#ifndef UCD_PRECOMPILED_DERIVEDCOREPROPERTIES_H
#define UCD_PRECOMPILED_DERIVEDCOREPROPERTIES_H
/*
 *  Copyright (c) 2015 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by generate_UCD_property_functions.py - manual edits may be lost.
 */

#include "pablo/pablo_compiler.h"


#include "icgrep.h"

#define LocalCarryDeclare(name, count)\
CarryArray<count, 0> name;\


  struct Struct_math_Y {
  BitBlock cc;
};

  struct Struct_alpha_Y {
  BitBlock cc;
};

  struct Struct_lower_Y {
  BitBlock cc;
};

  struct Struct_upper_Y {
  BitBlock cc;
};

  struct Struct_cased_Y {
  BitBlock cc;
};

  struct Struct_ci_Y {
  BitBlock cc;
};

  struct Struct_cwl_Y {
  BitBlock cc;
};

  struct Struct_cwu_Y {
  BitBlock cc;
};

  struct Struct_cwt_Y {
  BitBlock cc;
};

  struct Struct_cwcf_Y {
  BitBlock cc;
};

  struct Struct_cwcm_Y {
  BitBlock cc;
};

  struct Struct_ids_Y {
  BitBlock cc;
};

  struct Struct_idc_Y {
  BitBlock cc;
};

  struct Struct_xids_Y {
  BitBlock cc;
};

  struct Struct_xidc_Y {
  BitBlock cc;
};

  struct Struct_di_Y {
  BitBlock cc;
};

  struct Struct_gr_ext_Y {
  BitBlock cc;
};

  struct Struct_gr_base_Y {
  BitBlock cc;
};

  struct Struct_gr_link_Y {
  BitBlock cc;
};

  struct Property_math_Y {
  Property_math_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_math_Y & struct_math_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp21;
		BitBlock tmp22, tmp23, tmp24, tmp25, tmp26, cc_range_2b_7e_1, byte_range_c0_ff;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, byte_c2, r80_7ff_tmp5, r80_7ff_tmp6, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10, r80_7ff_tmp11;
		BitBlock cc_range_ac_b1_2, byte_c2_adv, r80_7ff_tmp12, r80_7ff_tmp13, byte_c3;
		BitBlock r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16, cc_range_d7_f7_2;
		BitBlock byte_c3_adv, r80_7ff_tmp17, byte_range_c4_cf, r100_3ff_tmp1, byte_cd;
		BitBlock byte_range_b0_bf, r100_3ff_tmp2, r100_3ff_tmp3, r100_3ff_tmp4;
		BitBlock byte_range_ce_cf, r100_3ff_tmp5, r370_3ff_tmp1, byte_cf;
		BitBlock r370_3ff_tmp2, r370_3ff_tmp3, r370_3ff_tmp4, r370_3ff_tmp5;
		BitBlock r370_3ff_tmp6, r370_3ff_tmp7, r370_3ff_tmp8, r370_3ff_tmp9;
		BitBlock r370_3ff_tmp10, r370_3ff_tmp11, r370_3ff_tmp12, cc_range_3d0_3f4_2;
		BitBlock byte_cf_adv, r370_3ff_tmp13, r80_7ff_tmp18, byte_range_d8_db;
		BitBlock r600_6ff_tmp1, byte_d8, r600_6ff_tmp2, r600_6ff_tmp3, r600_6ff_tmp4;
		BitBlock r600_6ff_tmp5, r600_6ff_tmp6, byte_range_86_88, byte_d8_adv;
		BitBlock r600_6ff_tmp7, byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, byte_e4, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, byte_range_80_b7, r800_ffff_tmp7;
		BitBlock r800_ffff_tmp8, r800_ffff_tmp9, r800_4dff_tmp1, byte_range_e2_e3;
		BitBlock r800_4dff_tmp2, r2000_4dff_tmp1, byte_e2, r2000_2fff_tmp1;
		BitBlock r2000_2fff_tmp2, r2000_2fff_tmp3, byte_80, r2000_2fff_tmp4;
		BitBlock sequence_e2_80, byte_e2_adv, r2000_2fff_tmp5, r2000_2fff_tmp6;
		BitBlock r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9, r2000_2fff_tmp10;
		BitBlock r2000_2fff_tmp11, r2000_2fff_tmp12, cc_range_2016_2032_3;
		BitBlock sequence_e2_80_adv, r2000_2fff_tmp13, r2000_2fff_tmp14;
		BitBlock r2000_2fff_tmp15, byte_81, sequence_e2_81, r2000_2fff_tmp16;
		BitBlock r2000_2fff_tmp17, r2000_2fff_tmp18, r2000_2fff_tmp19;
		BitBlock r2000_2fff_tmp20, r2000_2fff_tmp21, r2000_2fff_tmp22;
		BitBlock r2000_2fff_tmp23, r2000_2fff_tmp24, r2000_2fff_tmp25;
		BitBlock r2000_2fff_tmp26, r2000_2fff_tmp27, r2000_2fff_tmp28;
		BitBlock cc_range_2040_207a_3, sequence_e2_81_adv, r2000_2fff_tmp29, byte_82;
		BitBlock sequence_e2_82, r2000_2fff_tmp30, byte_range_8a_8e;
		BitBlock sequence_e2_82_adv, r2000_2fff_tmp31, r2000_2fff_tmp32, byte_83;
		BitBlock sequence_e2_83, r2000_2fff_tmp33, r2000_2fff_tmp34, r2000_2fff_tmp35;
		BitBlock r2000_2fff_tmp36, r2000_2fff_tmp37, r2000_2fff_tmp38;
		BitBlock r2000_2fff_tmp39, r2000_2fff_tmp40, r2000_2fff_tmp41;
		BitBlock r2000_2fff_tmp42, r2000_2fff_tmp43, r2000_2fff_tmp44;
		BitBlock cc_range_20d0_20eb_3, sequence_e2_83_adv, r2000_2fff_tmp45, byte_84;
		BitBlock sequence_e2_84, r2000_2fff_tmp46, r2000_2fff_tmp47, r2000_2fff_tmp48;
		BitBlock r2000_2fff_tmp49, r2000_2fff_tmp50, r2000_2fff_tmp51;
		BitBlock r2000_2fff_tmp52, r2000_2fff_tmp53, r2000_2fff_tmp54;
		BitBlock r2000_2fff_tmp55, r2000_2fff_tmp56, r2000_2fff_tmp57;
		BitBlock r2000_2fff_tmp58, r2000_2fff_tmp59, r2000_2fff_tmp60;
		BitBlock r2000_2fff_tmp61, r2000_2fff_tmp62, r2000_2fff_tmp63;
		BitBlock r2000_2fff_tmp64, r2000_2fff_tmp65, r2000_2fff_tmp66;
		BitBlock r2000_2fff_tmp67, r2000_2fff_tmp68, r2000_2fff_tmp69;
		BitBlock r2000_2fff_tmp70, r2000_2fff_tmp71, r2000_2fff_tmp72;
		BitBlock r2000_2fff_tmp73, r2000_2fff_tmp74, r2000_2fff_tmp75;
		BitBlock r2000_2fff_tmp76, r2000_2fff_tmp77, r2000_2fff_tmp78;
		BitBlock r2000_2fff_tmp79, r2000_2fff_tmp80, r2000_2fff_tmp81;
		BitBlock r2000_2fff_tmp82, r2000_2fff_tmp83, cc_range_2102_213c_3;
		BitBlock sequence_e2_84_adv, r2000_2fff_tmp84, byte_85, sequence_e2_85;
		BitBlock r2000_2fff_tmp85, cc_range_2140_214b_3, sequence_e2_85_adv;
		BitBlock r2000_2fff_tmp86, byte_86, sequence_e2_86, r2000_2fff_tmp87;
		BitBlock r2000_2fff_tmp88, r2000_2fff_tmp89, r2000_2fff_tmp90;
		BitBlock r2000_2fff_tmp91, r2000_2fff_tmp92, r2000_2fff_tmp93;
		BitBlock r2000_2fff_tmp94, r2000_2fff_tmp95, r2000_2fff_tmp96;
		BitBlock r2000_2fff_tmp97, r2000_2fff_tmp98, cc_range_2190_21bc_3;
		BitBlock sequence_e2_86_adv, r2000_2fff_tmp99, byte_87, sequence_e2_87;
		BitBlock r2000_2fff_tmp100, r2000_2fff_tmp101, r2000_2fff_tmp102;
		BitBlock r2000_2fff_tmp103, r2000_2fff_tmp104, r2000_2fff_tmp105;
		BitBlock r2000_2fff_tmp106, r2000_2fff_tmp107, r2000_2fff_tmp108;
		BitBlock cc_range_21c0_21f4_3, sequence_e2_87_adv, r2000_2fff_tmp109;
		BitBlock byte_range_88_8b, byte_e2_byte_range_88_8b, byte_range_80_bf;
		BitBlock r2000_2fff_tmp110, byte_e2_byte_range_88_8b_sfx, r2000_2fff_tmp111;
		BitBlock byte_8c, sequence_e2_8c, r2000_2fff_tmp112;
		BitBlock sequence_e2_8c_byte_range_88_8b, byte_8d, sequence_e2_8d;
		BitBlock r2000_2fff_tmp113, byte_bc, r2000_2fff_tmp114, sequence_e2_8d_bc;
		BitBlock byte_8e, sequence_e2_8e, r2000_2fff_tmp115, r2000_2fff_tmp116;
		BitBlock r2000_2fff_tmp117, r2000_2fff_tmp118, r2000_2fff_tmp119;
		BitBlock r2000_2fff_tmp120, byte_range_9b_b5, r2000_2fff_tmp121;
		BitBlock sequence_e2_8e_byte_range_9b_b5, byte_8f, sequence_e2_8f;
		BitBlock r2000_2fff_tmp122, byte_90, r2000_2fff_tmp123, sequence_e2_8f_90;
		BitBlock byte_96, sequence_e2_96, r2000_2fff_tmp124, byte_range_a0_a1;
		BitBlock r2000_2fff_tmp125, sequence_e2_96_byte_range_a0_a1, byte_97;
		BitBlock sequence_e2_97, byte_range_80_81, r2000_2fff_tmp126;
		BitBlock sequence_e2_97_byte_range_80_81, r2000_2fff_tmp127, byte_98;
		BitBlock sequence_e2_98, r2000_2fff_tmp128, byte_range_85_86;
		BitBlock r2000_2fff_tmp129, sequence_e2_98_byte_range_85_86, r2000_2fff_tmp130;
		BitBlock byte_99, sequence_e2_99, r2000_2fff_tmp131, sequence_e2_99_80;
		BitBlock byte_9f, sequence_e2_9f, r2000_2fff_tmp132;
		BitBlock sequence_e2_9f_byte_range_80_bf, byte_a4, sequence_e2_a4;
		BitBlock r2000_2fff_tmp133, sequence_e2_a4_byte_range_80_bf, byte_ac;
		BitBlock sequence_e2_ac, r2000_2fff_tmp134, sequence_e2_ac_byte_range_b0_bf;
		BitBlock byte_ad, sequence_e2_ad, r2000_2fff_tmp135, byte_range_80_84;
		BitBlock r2000_2fff_tmp136, sequence_e2_ad_byte_range_80_84, r800_ffff_tmp10;
		BitBlock r800_ffff_tmp11, byte_range_ea_ef, ra000_ffff_tmp1, byte_ef;
		BitBlock ra000_ffff_tmp2, ra000_ffff_tmp3, sequence_ef_ac, byte_ef_adv;
		BitBlock ra000_ffff_tmp4, ra000_ffff_tmp5, byte_a9, sequence_ef_ac_adv;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_b9, sequence_ef_b9;
		BitBlock ra000_ffff_tmp8, ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, cc_range_fe61_fe68_3;
		BitBlock sequence_ef_b9_adv, ra000_ffff_tmp14, sequence_ef_bc;
		BitBlock ra000_ffff_tmp15, ra000_ffff_tmp16, ra000_ffff_tmp17;
		BitBlock ra000_ffff_tmp18, ra000_ffff_tmp19, ra000_ffff_tmp20;
		BitBlock ra000_ffff_tmp21, ra000_ffff_tmp22, ra000_ffff_tmp23;
		BitBlock cc_range_ff0b_ff3e_3, sequence_ef_bc_adv, ra000_ffff_tmp24;
		BitBlock ra000_ffff_tmp25, byte_bd, sequence_ef_bd, ra000_ffff_tmp26;
		BitBlock ra000_ffff_tmp27, cc_range_ff5c_ff5e_3, sequence_ef_bd_adv;
		BitBlock ra000_ffff_tmp28, byte_bf, sequence_ef_bf, ra000_ffff_tmp29;
		BitBlock ra000_ffff_tmp30, ra000_ffff_tmp31, ra000_ffff_tmp32;
		BitBlock ra000_ffff_tmp33, cc_range_ffe2_ffe9_3, sequence_ef_bf_adv;
		BitBlock ra000_ffff_tmp34, byte_range_f0_ff, r10000_10ffff_tmp1;
		BitBlock r10000_10ffff_tmp2, byte_f0, r10000_10ffff_tmp3, r10000_10ffff_tmp4;
		BitBlock r10000_10ffff_tmp5, r10000_10ffff_tmp6, byte_9d, r10000_10ffff_tmp7;
		BitBlock sequence_f0_9d, byte_f0_adv, r10000_10ffff_tmp8, sequence_f0_9d_90;
		BitBlock sequence_f0_9d_adv, sequence_f0_9d_90_adv, r10000_10ffff_tmp9;
		BitBlock r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_91, sequence_f0_9d_91;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, cc_range_1d440_1d456_4, sequence_f0_9d_91_adv;
		BitBlock r10000_10ffff_tmp22, r10000_10ffff_tmp23, byte_92, sequence_f0_9d_92;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, r10000_10ffff_tmp26;
		BitBlock r10000_10ffff_tmp27, r10000_10ffff_tmp28, r10000_10ffff_tmp29;
		BitBlock r10000_10ffff_tmp30, r10000_10ffff_tmp31, r10000_10ffff_tmp32;
		BitBlock r10000_10ffff_tmp33, r10000_10ffff_tmp34, r10000_10ffff_tmp35;
		BitBlock r10000_10ffff_tmp36, r10000_10ffff_tmp37, r10000_10ffff_tmp38;
		BitBlock r10000_10ffff_tmp39, r10000_10ffff_tmp40, r10000_10ffff_tmp41;
		BitBlock r10000_10ffff_tmp42, r10000_10ffff_tmp43, r10000_10ffff_tmp44;
		BitBlock r10000_10ffff_tmp45, r10000_10ffff_tmp46, r10000_10ffff_tmp47;
		BitBlock r10000_10ffff_tmp48, r10000_10ffff_tmp49, r10000_10ffff_tmp50;
		BitBlock r10000_10ffff_tmp51, r10000_10ffff_tmp52, r10000_10ffff_tmp53;
		BitBlock cc_range_1d480_1d4bd_4, sequence_f0_9d_92_adv, r10000_10ffff_tmp54;
		BitBlock r10000_10ffff_tmp55, byte_93, sequence_f0_9d_93, r10000_10ffff_tmp56;
		BitBlock r10000_10ffff_tmp57, r10000_10ffff_tmp58, r10000_10ffff_tmp59;
		BitBlock r10000_10ffff_tmp60, r10000_10ffff_tmp61, cc_range_1d4c0_1d4c5_4;
		BitBlock sequence_f0_9d_93_adv, r10000_10ffff_tmp62, r10000_10ffff_tmp63;
		BitBlock byte_94, sequence_f0_9d_94, r10000_10ffff_tmp64, r10000_10ffff_tmp65;
		BitBlock r10000_10ffff_tmp66, r10000_10ffff_tmp67, r10000_10ffff_tmp68;
		BitBlock r10000_10ffff_tmp69, r10000_10ffff_tmp70, r10000_10ffff_tmp71;
		BitBlock r10000_10ffff_tmp72, r10000_10ffff_tmp73, r10000_10ffff_tmp74;
		BitBlock r10000_10ffff_tmp75, r10000_10ffff_tmp76, r10000_10ffff_tmp77;
		BitBlock r10000_10ffff_tmp78, r10000_10ffff_tmp79, r10000_10ffff_tmp80;
		BitBlock r10000_10ffff_tmp81, r10000_10ffff_tmp82, r10000_10ffff_tmp83;
		BitBlock r10000_10ffff_tmp84, r10000_10ffff_tmp85, r10000_10ffff_tmp86;
		BitBlock r10000_10ffff_tmp87, r10000_10ffff_tmp88, cc_range_1d500_1d53b_4;
		BitBlock sequence_f0_9d_94_adv, r10000_10ffff_tmp89, r10000_10ffff_tmp90;
		BitBlock byte_95, sequence_f0_9d_95, r10000_10ffff_tmp91, r10000_10ffff_tmp92;
		BitBlock r10000_10ffff_tmp93, r10000_10ffff_tmp94, r10000_10ffff_tmp95;
		BitBlock r10000_10ffff_tmp96, r10000_10ffff_tmp97, r10000_10ffff_tmp98;
		BitBlock r10000_10ffff_tmp99, r10000_10ffff_tmp100, r10000_10ffff_tmp101;
		BitBlock r10000_10ffff_tmp102, cc_range_1d540_1d552_4, sequence_f0_9d_95_adv;
		BitBlock r10000_10ffff_tmp103, r10000_10ffff_tmp104, r10000_10ffff_tmp105;
		BitBlock byte_range_96_99, sequence_f0_9d_byte_range_96_99;
		BitBlock r10000_10ffff_tmp106, sequence_f0_9d_byte_range_96_99_sfx;
		BitBlock r10000_10ffff_tmp107, byte_9a, sequence_f0_9d_9a;
		BitBlock r10000_10ffff_tmp108, r10000_10ffff_tmp109, byte_range_80_a5;
		BitBlock r10000_10ffff_tmp110, sequence_f0_9d_9a_byte_range_80_a5, byte_9b;
		BitBlock sequence_f0_9d_9b, r10000_10ffff_tmp111;
		BitBlock sequence_f0_9d_9b_byte_range_80_bf, r10000_10ffff_tmp112;
		BitBlock sequence_f0_9d_9f, byte_range_80_8b, r10000_10ffff_tmp113;
		BitBlock sequence_f0_9d_9f_byte_range_80_8b, byte_9e, sequence_f0_9e;
		BitBlock r10000_10ffff_tmp114, byte_b8, r10000_10ffff_tmp115;
		BitBlock sequence_f0_9e_b8, sequence_f0_9e_adv, r10000_10ffff_tmp116;
		BitBlock r10000_10ffff_tmp117, r10000_10ffff_tmp118, r10000_10ffff_tmp119;
		BitBlock r10000_10ffff_tmp120, r10000_10ffff_tmp121, r10000_10ffff_tmp122;
		BitBlock r10000_10ffff_tmp123, r10000_10ffff_tmp124, r10000_10ffff_tmp125;
		BitBlock r10000_10ffff_tmp126, r10000_10ffff_tmp127, r10000_10ffff_tmp128;
		BitBlock r10000_10ffff_tmp129, r10000_10ffff_tmp130, r10000_10ffff_tmp131;
		BitBlock r10000_10ffff_tmp132, r10000_10ffff_tmp133, r10000_10ffff_tmp134;
		BitBlock r10000_10ffff_tmp135, r10000_10ffff_tmp136, r10000_10ffff_tmp137;
		BitBlock cc_range_1ee00_1ee3b_4, sequence_f0_9e_b8_adv, r10000_10ffff_tmp138;
		BitBlock sequence_f0_9e_b9, r10000_10ffff_tmp139, r10000_10ffff_tmp140;
		BitBlock r10000_10ffff_tmp141, r10000_10ffff_tmp142, r10000_10ffff_tmp143;
		BitBlock r10000_10ffff_tmp144, r10000_10ffff_tmp145, r10000_10ffff_tmp146;
		BitBlock r10000_10ffff_tmp147, r10000_10ffff_tmp148, r10000_10ffff_tmp149;
		BitBlock r10000_10ffff_tmp150, r10000_10ffff_tmp151, r10000_10ffff_tmp152;
		BitBlock r10000_10ffff_tmp153, r10000_10ffff_tmp154, r10000_10ffff_tmp155;
		BitBlock r10000_10ffff_tmp156, r10000_10ffff_tmp157, r10000_10ffff_tmp158;
		BitBlock r10000_10ffff_tmp159, r10000_10ffff_tmp160, r10000_10ffff_tmp161;
		BitBlock r10000_10ffff_tmp162, r10000_10ffff_tmp163, r10000_10ffff_tmp164;
		BitBlock r10000_10ffff_tmp165, r10000_10ffff_tmp166, r10000_10ffff_tmp167;
		BitBlock r10000_10ffff_tmp168, cc_range_1ee42_1ee7e_4, sequence_f0_9e_b9_adv;
		BitBlock r10000_10ffff_tmp169, byte_ba, sequence_f0_9e_ba;
		BitBlock r10000_10ffff_tmp170, r10000_10ffff_tmp171, r10000_10ffff_tmp172;
		BitBlock r10000_10ffff_tmp173, r10000_10ffff_tmp174, r10000_10ffff_tmp175;
		BitBlock r10000_10ffff_tmp176, r10000_10ffff_tmp177, r10000_10ffff_tmp178;
		BitBlock r10000_10ffff_tmp179, r10000_10ffff_tmp180, r10000_10ffff_tmp181;
		BitBlock cc_range_1ee80_1eeab_4, sequence_f0_9e_ba_adv, r10000_10ffff_tmp182;
		BitBlock byte_bb, sequence_f0_9e_bb, byte_range_b0_b1, sequence_f0_9e_bb_adv;
		BitBlock r10000_10ffff_tmp183;




        struct_math_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_and(tmp4, tmp5);
        tmp7 = simd_and(tmp3, tmp6);
        tmp8 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp9 = simd_andc(tmp8, tmp1);
        tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp11 = simd_and(tmp9, tmp10);
        tmp12 = simd_andc(tmp11, tmp5);
        tmp13 = simd_or(tmp7, tmp12);
        tmp14 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp15 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp16 = simd_and(tmp14, tmp15);
        tmp17 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp18 = simd_and(tmp10, tmp17);
        tmp19 = simd_and(tmp16, tmp18);
        tmp20 = simd_or(tmp13, tmp19);
        tmp21 = simd_and(tmp14, tmp8);
        tmp22 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp23 = simd_andc(tmp10, tmp22);
        tmp24 = simd_and(tmp21, tmp23);
        tmp25 = simd_or(tmp20, tmp24);
        tmp26 = simd_and(tmp21, tmp18);
        cc_range_2b_7e_1 = simd_or(tmp25, tmp26);
        struct_math_Y.cc = simd_or(struct_math_Y.cc, cc_range_2b_7e_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 51))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 5))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(tmp17, r80_7ff_tmp3);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_and(r80_7ff_tmp5, tmp2);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp6, tmp23);
            r80_7ff_tmp8 = simd_and(r80_7ff_tmp5, tmp8);
            r80_7ff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp10 = simd_andc(r80_7ff_tmp9, r80_7ff_tmp3);
            r80_7ff_tmp11 = simd_and(r80_7ff_tmp8, r80_7ff_tmp10);
            cc_range_ac_b1_2 = simd_or(r80_7ff_tmp7, r80_7ff_tmp11);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp12 = simd_and(byte_c2_adv, cc_range_ac_b1_2);
            struct_math_Y.cc = simd_or(struct_math_Y.cc, r80_7ff_tmp12);
            r80_7ff_tmp13 = simd_andc(tmp5, r80_7ff_tmp3);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp13);
            r80_7ff_tmp14 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp15 = simd_and(r80_7ff_tmp14, tmp5);
            r80_7ff_tmp16 = simd_and(r80_7ff_tmp5, basis_bits.bit_3);
            cc_range_d7_f7_2 = simd_and(r80_7ff_tmp15, r80_7ff_tmp16);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp17 = simd_and(byte_c3_adv, cc_range_d7_f7_2);
            struct_math_Y.cc = simd_or(struct_math_Y.cc, r80_7ff_tmp17);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 2))) {
              r100_3ff_tmp1 = simd_and(tmp10, r80_7ff_tmp9);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              byte_range_b0_bf = r80_7ff_tmp8;
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(2), r100_3ff_tmp2));
              r100_3ff_tmp3 = simd_and(r100_3ff_tmp2, byte_range_b0_bf);
              r100_3ff_tmp4 = simd_and(tmp10, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp4);
              r100_3ff_tmp5 = simd_or(r100_3ff_tmp3, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp5) || carryQ.CarryTest(3, 1))) {
                r370_3ff_tmp1 = simd_and(tmp10, tmp5);
                byte_cf = simd_and(r80_7ff_tmp2, r370_3ff_tmp1);
                r370_3ff_tmp2 = simd_and(r80_7ff_tmp5, tmp15);
                r370_3ff_tmp3 = simd_andc(r370_3ff_tmp2, r80_7ff_tmp3);
                r370_3ff_tmp4 = simd_andc(r370_3ff_tmp3, tmp5);
                r370_3ff_tmp5 = simd_and(r80_7ff_tmp14, r80_7ff_tmp9);
                r370_3ff_tmp6 = simd_and(r370_3ff_tmp2, r370_3ff_tmp5);
                r370_3ff_tmp7 = simd_or(r370_3ff_tmp4, r370_3ff_tmp6);
                r370_3ff_tmp8 = simd_or(r80_7ff_tmp3, basis_bits.bit_6);
                r370_3ff_tmp9 = simd_andc(byte_range_b0_bf, r370_3ff_tmp8);
                r370_3ff_tmp10 = simd_or(r370_3ff_tmp7, r370_3ff_tmp9);
                r370_3ff_tmp11 = simd_and(byte_range_b0_bf, r80_7ff_tmp14);
                r370_3ff_tmp12 = simd_andc(r370_3ff_tmp11, tmp5);
                cc_range_3d0_3f4_2 = simd_or(r370_3ff_tmp10, r370_3ff_tmp12);
                carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(3), byte_cf_adv));
                r370_3ff_tmp13 = simd_and(byte_cf_adv, cc_range_3d0_3f4_2);
                struct_math_Y.cc = simd_or(struct_math_Y.cc, r370_3ff_tmp13);
              }
              else {
                carryQ.CarryDequeueEnqueue(3, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 2);
            }
            r80_7ff_tmp18 = simd_and(byte_range_c0_ff, tmp15);
            byte_range_d8_db = simd_and(r80_7ff_tmp18, tmp4);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(4, 1))) {
              r600_6ff_tmp1 = simd_andc(tmp4, tmp22);
              byte_d8 = simd_and(r80_7ff_tmp18, r600_6ff_tmp1);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              r600_6ff_tmp3 = simd_or(basis_bits.bit_5, tmp22);
              r600_6ff_tmp4 = simd_not(r600_6ff_tmp3);
              r600_6ff_tmp5 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              r600_6ff_tmp6 = simd_or(simd_and(basis_bits.bit_4, r600_6ff_tmp4), simd_andc(r600_6ff_tmp5, basis_bits.bit_4));
              byte_range_86_88 = simd_and(r600_6ff_tmp2, r600_6ff_tmp6);
              carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(4), byte_d8_adv));
              r600_6ff_tmp7 = simd_and(byte_d8_adv, byte_range_86_88);
              struct_math_Y.cc = simd_or(struct_math_Y.cc, r600_6ff_tmp7);
            }
            else {
              carryQ.CarryDequeueEnqueue(4, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 5);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(5, 29))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_andc(r800_ffff_tmp2, tmp22);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp3);
            r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_2, r800_ffff_tmp5);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp6);
            carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(5), r800_ffff_tmp7));
            r800_ffff_tmp8 = simd_and(r800_ffff_tmp7, byte_range_80_b7);
            r800_ffff_tmp9 = simd_or(byte_range_e0_e3, r800_ffff_tmp8);
            if ((bitblock::any(r800_ffff_tmp9) || carryQ.CarryTest(6, 22))) {
              r800_4dff_tmp1 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp1);
              r800_4dff_tmp2 = simd_or(byte_range_e2_e3, r800_ffff_tmp8);
              if ((bitblock::any(r800_4dff_tmp2) || carryQ.CarryTest(6, 22))) {
                r2000_4dff_tmp1 = simd_andc(tmp17, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp1);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(6, 22))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp4, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, tmp22);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(6), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_and(r800_ffff_tmp4, tmp15);
                  r2000_2fff_tmp6 = simd_and(r800_ffff_tmp2, tmp17);
                  r2000_2fff_tmp7 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp6);
                  r2000_2fff_tmp8 = simd_and(r800_ffff_tmp4, tmp8);
                  r2000_2fff_tmp9 = simd_andc(r2000_2fff_tmp8, basis_bits.bit_4);
                  r2000_2fff_tmp10 = simd_not(tmp22);
                  r2000_2fff_tmp11 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp10), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r2000_2fff_tmp12 = simd_and(r2000_2fff_tmp9, r2000_2fff_tmp11);
                  cc_range_2016_2032_3 = simd_or(r2000_2fff_tmp7, r2000_2fff_tmp12);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(7), sequence_e2_80_adv));
                  r2000_2fff_tmp13 = simd_and(sequence_e2_80_adv, cc_range_2016_2032_3);
                  struct_math_Y.cc = simd_or(struct_math_Y.cc, r2000_2fff_tmp13);
                  r2000_2fff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp15 = simd_andc(r2000_2fff_tmp14, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp15);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  r2000_2fff_tmp16 = simd_andc(r2000_2fff_tmp3, r800_ffff_tmp3);
                  r2000_2fff_tmp17 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp16);
                  r2000_2fff_tmp18 = simd_and(r2000_2fff_tmp5, r2000_4dff_tmp1);
                  r2000_2fff_tmp19 = simd_or(r2000_2fff_tmp17, r2000_2fff_tmp18);
                  r2000_2fff_tmp20 = simd_and(r800_ffff_tmp4, tmp2);
                  r2000_2fff_tmp21 = simd_andc(r2000_2fff_tmp20, basis_bits.bit_4);
                  r2000_2fff_tmp22 = simd_xor(basis_bits.bit_5, tmp22);
                  r2000_2fff_tmp23 = simd_and(r2000_2fff_tmp21, r2000_2fff_tmp22);
                  r2000_2fff_tmp24 = simd_or(r2000_2fff_tmp19, r2000_2fff_tmp23);
                  r2000_2fff_tmp25 = simd_and(r2000_2fff_tmp8, basis_bits.bit_4);
                  r2000_2fff_tmp26 = simd_not(tmp5);
                  r2000_2fff_tmp27 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp26), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r2000_2fff_tmp28 = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp27);
                  cc_range_2040_207a_3 = simd_or(r2000_2fff_tmp24, r2000_2fff_tmp28);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(8), sequence_e2_81_adv));
                  r2000_2fff_tmp29 = simd_and(sequence_e2_81_adv, cc_range_2040_207a_3);
                  struct_math_Y.cc = simd_or(struct_math_Y.cc, r2000_2fff_tmp29);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp1);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp30 = simd_and(r2000_2fff_tmp2, basis_bits.bit_4);
                  byte_range_8a_8e = simd_and(r2000_2fff_tmp30, r2000_2fff_tmp27);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(9), sequence_e2_82_adv));
                  r2000_2fff_tmp31 = simd_and(sequence_e2_82_adv, byte_range_8a_8e);
                  struct_math_Y.cc = simd_or(struct_math_Y.cc, r2000_2fff_tmp31);
                  r2000_2fff_tmp32 = simd_andc(tmp5, r800_ffff_tmp1);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp32);
                  sequence_e2_83 = simd_and(byte_e2_adv, byte_83);
                  r2000_2fff_tmp33 = simd_and(basis_bits.bit_5, tmp22);
                  r2000_2fff_tmp34 = simd_and(basis_bits.bit_4, r2000_2fff_tmp33);
                  r2000_2fff_tmp35 = simd_andc(r2000_2fff_tmp5, r2000_2fff_tmp34);
                  r2000_2fff_tmp36 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp15);
                  r2000_2fff_tmp37 = simd_or(r2000_2fff_tmp35, r2000_2fff_tmp36);
                  r2000_2fff_tmp38 = simd_and(r2000_2fff_tmp20, r800_ffff_tmp2);
                  r2000_2fff_tmp39 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp40 = simd_and(r2000_2fff_tmp38, r2000_2fff_tmp39);
                  r2000_2fff_tmp41 = simd_or(r2000_2fff_tmp37, r2000_2fff_tmp40);
                  r2000_2fff_tmp42 = simd_and(r2000_2fff_tmp20, basis_bits.bit_4);
                  r2000_2fff_tmp43 = simd_or(basis_bits.bit_5, tmp5);
                  r2000_2fff_tmp44 = simd_and(r2000_2fff_tmp42, r2000_2fff_tmp43);
                  cc_range_20d0_20eb_3 = simd_or(r2000_2fff_tmp41, r2000_2fff_tmp44);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(10), sequence_e2_83_adv));
                  r2000_2fff_tmp45 = simd_and(sequence_e2_83_adv, cc_range_20d0_20eb_3);
                  struct_math_Y.cc = simd_or(struct_math_Y.cc, r2000_2fff_tmp45);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp3);
                  sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
                  r2000_2fff_tmp46 = simd_and(r800_ffff_tmp2, tmp5);
                  r2000_2fff_tmp47 = simd_or(r2000_4dff_tmp1, r2000_2fff_tmp46);
                  r2000_2fff_tmp48 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp47);
                  r2000_2fff_tmp49 = simd_andc(r800_ffff_tmp4, basis_bits.bit_2);
                  r2000_2fff_tmp50 = simd_not(r800_ffff_tmp1);
                  r2000_2fff_tmp51 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp52 = simd_and(basis_bits.bit_4, r2000_2fff_tmp51);
                  r2000_2fff_tmp53 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp50), simd_andc(r2000_2fff_tmp52, basis_bits.bit_3));
                  r2000_2fff_tmp54 = simd_and(r2000_2fff_tmp49, r2000_2fff_tmp53);
                  r2000_2fff_tmp55 = simd_or(r2000_2fff_tmp48, r2000_2fff_tmp54);
                  r2000_2fff_tmp56 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp14);
                  r2000_2fff_tmp57 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp56);
                  r2000_2fff_tmp58 = simd_or(r2000_2fff_tmp55, r2000_2fff_tmp57);
                  r2000_2fff_tmp59 = simd_and(r2000_2fff_tmp5, basis_bits.bit_4);
                  r2000_2fff_tmp60 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp61 = simd_andc(r2000_2fff_tmp59, r2000_2fff_tmp60);
                  r2000_2fff_tmp62 = simd_or(r2000_2fff_tmp58, r2000_2fff_tmp61);
                  r2000_2fff_tmp63 = simd_and(r2000_2fff_tmp20, r800_ffff_tmp3);
                  r2000_2fff_tmp64 = simd_or(r2000_2fff_tmp62, r2000_2fff_tmp63);
                  r2000_2fff_tmp65 = simd_andc(tmp4, basis_bits.bit_6);
                  r2000_2fff_tmp66 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp65);
                  r2000_2fff_tmp67 = simd_or(r2000_2fff_tmp64, r2000_2fff_tmp66);
                  r2000_2fff_tmp68 = simd_andc(tmp10, basis_bits.bit_6);
                  r2000_2fff_tmp69 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp68);
                  r2000_2fff_tmp70 = simd_or(r2000_2fff_tmp67, r2000_2fff_tmp69);
                  r2000_2fff_tmp71 = simd_and(r800_ffff_tmp4, basis_bits.bit_2);
                  r2000_2fff_tmp72 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
                  r2000_2fff_tmp73 = simd_not(r2000_2fff_tmp72);
                  r2000_2fff_tmp74 = simd_and(tmp10, tmp5);
                  r2000_2fff_tmp75 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp73), simd_andc(r2000_2fff_tmp74, basis_bits.bit_3));
                  r2000_2fff_tmp76 = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp75);
                  r2000_2fff_tmp77 = simd_or(r2000_2fff_tmp70, r2000_2fff_tmp76);
                  r2000_2fff_tmp78 = simd_or(basis_bits.bit_5, tmp22);
                  r2000_2fff_tmp79 = simd_not(r2000_2fff_tmp78);
                  r2000_2fff_tmp80 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp79), simd_andc(r2000_2fff_tmp43, basis_bits.bit_4));
                  r2000_2fff_tmp81 = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp80);
                  r2000_2fff_tmp82 = simd_or(r2000_2fff_tmp77, r2000_2fff_tmp81);
                  r2000_2fff_tmp83 = simd_and(r2000_2fff_tmp8, tmp10);
                  cc_range_2102_213c_3 = simd_or(r2000_2fff_tmp82, r2000_2fff_tmp83);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(11), sequence_e2_84_adv));
                  r2000_2fff_tmp84 = simd_and(sequence_e2_84_adv, cc_range_2102_213c_3);
                  struct_math_Y.cc = simd_or(struct_math_Y.cc, r2000_2fff_tmp84);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp56);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp85 = simd_andc(r2000_2fff_tmp52, tmp6);
                  cc_range_2140_214b_3 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp85);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(12), sequence_e2_85_adv));
                  r2000_2fff_tmp86 = simd_and(sequence_e2_85_adv, cc_range_2140_214b_3);
                  struct_math_Y.cc = simd_or(struct_math_Y.cc, r2000_2fff_tmp86);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp6);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp87 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
                  r2000_2fff_tmp88 = simd_not(r2000_2fff_tmp87);
                  r2000_2fff_tmp89 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp88), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  r2000_2fff_tmp90 = simd_and(r800_ffff_tmp4, r2000_2fff_tmp89);
                  r2000_2fff_tmp91 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp26), simd_andc(tmp22, basis_bits.bit_5));
                  r2000_2fff_tmp92 = simd_and(r2000_2fff_tmp42, r2000_2fff_tmp91);
                  r2000_2fff_tmp93 = simd_or(r2000_2fff_tmp90, r2000_2fff_tmp92);
                  r2000_2fff_tmp94 = simd_andc(r2000_2fff_tmp8, r2000_2fff_tmp72);
                  r2000_2fff_tmp95 = simd_or(r2000_2fff_tmp93, r2000_2fff_tmp94);
                  r2000_2fff_tmp96 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  r2000_2fff_tmp97 = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp96);
                  r2000_2fff_tmp98 = simd_or(r2000_2fff_tmp95, r2000_2fff_tmp97);
                  cc_range_2190_21bc_3 = simd_or(r2000_2fff_tmp98, r2000_2fff_tmp83);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(13), sequence_e2_86_adv));
                  r2000_2fff_tmp99 = simd_and(sequence_e2_86_adv, cc_range_2190_21bc_3);
                  struct_math_Y.cc = simd_or(struct_math_Y.cc, r2000_2fff_tmp99);
                  byte_87 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp46);
                  sequence_e2_87 = simd_and(byte_e2_adv, byte_87);
                  r2000_2fff_tmp100 = simd_and(basis_bits.bit_3, tmp10);
                  r2000_2fff_tmp101 = simd_andc(r2000_2fff_tmp49, r2000_2fff_tmp100);
                  r2000_2fff_tmp102 = simd_and(tmp10, r2000_2fff_tmp14);
                  r2000_2fff_tmp103 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp102);
                  r2000_2fff_tmp104 = simd_or(r2000_2fff_tmp101, r2000_2fff_tmp103);
                  r2000_2fff_tmp105 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  r2000_2fff_tmp106 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp105);
                  r2000_2fff_tmp107 = simd_or(r2000_2fff_tmp104, r2000_2fff_tmp106);
                  r2000_2fff_tmp108 = simd_and(r2000_2fff_tmp8, r800_ffff_tmp1);
                  cc_range_21c0_21f4_3 = simd_or(r2000_2fff_tmp107, r2000_2fff_tmp108);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e2_87, carryQ.get_carry_in(14), sequence_e2_87_adv));
                  r2000_2fff_tmp109 = simd_and(sequence_e2_87_adv, cc_range_21c0_21f4_3);
                  struct_math_Y.cc = simd_or(struct_math_Y.cc, r2000_2fff_tmp109);
                  byte_range_88_8b = simd_and(r2000_2fff_tmp2, tmp4);
                  byte_e2_byte_range_88_8b = simd_and(byte_e2_adv, byte_range_88_8b);
                  byte_range_80_bf = r800_ffff_tmp4;
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_88_8b, carryQ.get_carry_in(15), r2000_2fff_tmp110));
                  byte_e2_byte_range_88_8b_sfx = simd_and(r2000_2fff_tmp110, byte_range_80_bf);
                  struct_math_Y.cc = simd_or(struct_math_Y.cc, byte_e2_byte_range_88_8b_sfx);
                  r2000_2fff_tmp111 = simd_andc(byte_range_80_bf, r2000_2fff_tmp1);
                  byte_8c = simd_and(r2000_2fff_tmp111, tmp23);
                  sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e2_8c, carryQ.get_carry_in(16), r2000_2fff_tmp112));
                  sequence_e2_8c_byte_range_88_8b = simd_and(r2000_2fff_tmp112, byte_range_88_8b);
                  struct_math_Y.cc = simd_or(struct_math_Y.cc, sequence_e2_8c_byte_range_88_8b);
                  byte_8d = simd_and(r2000_2fff_tmp111, r2000_2fff_tmp102);
                  sequence_e2_8d = simd_and(byte_e2_adv, byte_8d);
                  r2000_2fff_tmp113 = simd_and(byte_range_80_bf, tmp8);
                  byte_bc = simd_and(r2000_2fff_tmp113, tmp23);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e2_8d, carryQ.get_carry_in(17), r2000_2fff_tmp114));
                  sequence_e2_8d_bc = simd_and(r2000_2fff_tmp114, byte_bc);
                  byte_8e = simd_and(r2000_2fff_tmp111, tmp18);
                  sequence_e2_8e = simd_and(byte_e2_adv, byte_8e);
                  r2000_2fff_tmp115 = simd_or(basis_bits.bit_4, r2000_2fff_tmp60);
                  r2000_2fff_tmp116 = simd_and(basis_bits.bit_3, r2000_2fff_tmp115);
                  r2000_2fff_tmp117 = simd_not(r2000_2fff_tmp116);
                  r2000_2fff_tmp118 = simd_and(basis_bits.bit_4, r2000_2fff_tmp43);
                  r2000_2fff_tmp119 = simd_and(basis_bits.bit_3, r2000_2fff_tmp118);
                  r2000_2fff_tmp120 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp117), simd_andc(r2000_2fff_tmp119, basis_bits.bit_2));
                  byte_range_9b_b5 = simd_and(byte_range_80_bf, r2000_2fff_tmp120);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e2_8e, carryQ.get_carry_in(18), r2000_2fff_tmp121));
                  sequence_e2_8e_byte_range_9b_b5 = simd_and(r2000_2fff_tmp121, byte_range_9b_b5);
                  struct_math_Y.cc = simd_or(struct_math_Y.cc, sequence_e2_8e_byte_range_9b_b5);
                  byte_8f = simd_and(r2000_2fff_tmp111, r2000_2fff_tmp74);
                  sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
                  r2000_2fff_tmp122 = simd_and(byte_range_80_bf, tmp15);
                  byte_90 = simd_andc(r2000_2fff_tmp122, r2000_2fff_tmp3);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e2_8f, carryQ.get_carry_in(19), r2000_2fff_tmp123));
                  sequence_e2_8f_90 = simd_and(r2000_2fff_tmp123, byte_90);
                  byte_96 = simd_and(r2000_2fff_tmp122, r2000_2fff_tmp6);
                  sequence_e2_96 = simd_and(byte_e2_adv, byte_96);
                  r2000_2fff_tmp124 = simd_and(byte_range_80_bf, tmp2);
                  byte_range_a0_a1 = simd_andc(r2000_2fff_tmp124, r2000_2fff_tmp72);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e2_96, carryQ.get_carry_in(20), r2000_2fff_tmp125));
                  sequence_e2_96_byte_range_a0_a1 = simd_and(r2000_2fff_tmp125, byte_range_a0_a1);
                  struct_math_Y.cc = simd_or(struct_math_Y.cc, sequence_e2_96_byte_range_a0_a1);
                  byte_97 = simd_and(r2000_2fff_tmp122, r2000_2fff_tmp46);
                  sequence_e2_97 = simd_and(byte_e2_adv, byte_97);
                  byte_range_80_81 = simd_andc(r2000_2fff_tmp111, r2000_2fff_tmp72);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e2_97, carryQ.get_carry_in(21), r2000_2fff_tmp126));
                  sequence_e2_97_byte_range_80_81 = simd_and(r2000_2fff_tmp126, byte_range_80_81);
                  struct_math_Y.cc = simd_or(struct_math_Y.cc, sequence_e2_97_byte_range_80_81);
                  r2000_2fff_tmp127 = simd_andc(tmp4, tmp22);
                  byte_98 = simd_and(r2000_2fff_tmp122, r2000_2fff_tmp127);
                  sequence_e2_98 = simd_and(byte_e2_adv, byte_98);
                  r2000_2fff_tmp128 = simd_and(r2000_2fff_tmp111, r800_ffff_tmp2);
                  byte_range_85_86 = simd_and(r2000_2fff_tmp128, r2000_2fff_tmp39);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e2_98, carryQ.get_carry_in(22), r2000_2fff_tmp129));
                  sequence_e2_98_byte_range_85_86 = simd_and(r2000_2fff_tmp129, byte_range_85_86);
                  struct_math_Y.cc = simd_or(struct_math_Y.cc, sequence_e2_98_byte_range_85_86);
                  r2000_2fff_tmp130 = simd_and(tmp4, r2000_2fff_tmp14);
                  byte_99 = simd_and(r2000_2fff_tmp122, r2000_2fff_tmp130);
                  sequence_e2_99 = simd_and(byte_e2_adv, byte_99);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e2_99, carryQ.get_carry_in(23), r2000_2fff_tmp131));
                  sequence_e2_99_80 = simd_and(r2000_2fff_tmp131, byte_80);
                  byte_9f = simd_and(r2000_2fff_tmp122, r2000_2fff_tmp74);
                  sequence_e2_9f = simd_and(byte_e2_adv, byte_9f);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e2_9f, carryQ.get_carry_in(24), r2000_2fff_tmp132));
                  sequence_e2_9f_byte_range_80_bf = simd_and(r2000_2fff_tmp132, byte_range_80_bf);
                  struct_math_Y.cc = simd_or(struct_math_Y.cc, sequence_e2_9f_byte_range_80_bf);
                  byte_a4 = simd_and(r2000_2fff_tmp124, r800_ffff_tmp3);
                  sequence_e2_a4 = simd_and(byte_e2_adv, byte_a4);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e2_a4, carryQ.get_carry_in(25), r2000_2fff_tmp133));
                  sequence_e2_a4_byte_range_80_bf = simd_and(r2000_2fff_tmp133, byte_range_80_bf);
                  struct_math_Y.cc = simd_or(struct_math_Y.cc, sequence_e2_a4_byte_range_80_bf);
                  byte_ac = simd_and(r2000_2fff_tmp124, tmp23);
                  sequence_e2_ac = simd_and(byte_e2_adv, byte_ac);
                  byte_range_b0_bf = r2000_2fff_tmp113;
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e2_ac, carryQ.get_carry_in(26), r2000_2fff_tmp134));
                  sequence_e2_ac_byte_range_b0_bf = simd_and(r2000_2fff_tmp134, byte_range_b0_bf);
                  struct_math_Y.cc = simd_or(struct_math_Y.cc, sequence_e2_ac_byte_range_b0_bf);
                  byte_ad = simd_and(r2000_2fff_tmp124, r2000_2fff_tmp102);
                  sequence_e2_ad = simd_and(byte_e2_adv, byte_ad);
                  r2000_2fff_tmp135 = simd_andc(r2000_2fff_tmp111, basis_bits.bit_4);
                  byte_range_80_84 = simd_andc(r2000_2fff_tmp135, r2000_2fff_tmp33);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e2_ad, carryQ.get_carry_in(27), r2000_2fff_tmp136));
                  sequence_e2_ad_byte_range_80_84 = simd_and(r2000_2fff_tmp136, byte_range_80_84);
                  struct_math_Y.cc = simd_or(struct_math_Y.cc, sequence_e2_ad_byte_range_80_84);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 22);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(6, 22);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(6, 22);
            }
            r800_ffff_tmp10 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp11 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp10, r800_ffff_tmp11);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(28, 6))) {
              ra000_ffff_tmp1 = simd_and(tmp10, tmp5);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp1);
              ra000_ffff_tmp2 = simd_and(r800_ffff_tmp4, tmp2);
              byte_ac = simd_and(ra000_ffff_tmp2, tmp23);
              carryQ.cq[28] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(28), ra000_ffff_tmp3));
              sequence_ef_ac = simd_and(ra000_ffff_tmp3, byte_ac);
              byte_ef_adv = ra000_ffff_tmp3;
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp5 = simd_and(tmp4, ra000_ffff_tmp4);
              byte_a9 = simd_and(ra000_ffff_tmp2, ra000_ffff_tmp5);
              carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(29), sequence_ef_ac_adv));
              ra000_ffff_tmp6 = simd_and(sequence_ef_ac_adv, byte_a9);
              struct_math_Y.cc = simd_or(struct_math_Y.cc, ra000_ffff_tmp6);
              ra000_ffff_tmp7 = simd_and(r800_ffff_tmp4, tmp8);
              byte_b9 = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp5);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              ra000_ffff_tmp8 = simd_andc(ra000_ffff_tmp2, basis_bits.bit_4);
              ra000_ffff_tmp9 = simd_not(tmp5);
              ra000_ffff_tmp10 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp9), simd_andc(tmp22, basis_bits.bit_5));
              ra000_ffff_tmp11 = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp10);
              ra000_ffff_tmp12 = simd_andc(tmp4, tmp22);
              ra000_ffff_tmp13 = simd_and(ra000_ffff_tmp2, ra000_ffff_tmp12);
              cc_range_fe61_fe68_3 = simd_or(ra000_ffff_tmp11, ra000_ffff_tmp13);
              carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(30), sequence_ef_b9_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ef_b9_adv, cc_range_fe61_fe68_3);
              struct_math_Y.cc = simd_or(struct_math_Y.cc, ra000_ffff_tmp14);
              byte_bc = simd_and(ra000_ffff_tmp7, tmp23);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp15 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp16 = simd_andc(r800_ffff_tmp4, ra000_ffff_tmp15);
              ra000_ffff_tmp17 = simd_and(ra000_ffff_tmp16, tmp6);
              ra000_ffff_tmp18 = simd_and(r800_ffff_tmp4, tmp15);
              ra000_ffff_tmp19 = simd_and(ra000_ffff_tmp18, tmp10);
              ra000_ffff_tmp20 = simd_andc(ra000_ffff_tmp19, tmp5);
              ra000_ffff_tmp21 = simd_or(ra000_ffff_tmp17, ra000_ffff_tmp20);
              ra000_ffff_tmp22 = simd_or(ra000_ffff_tmp21, byte_bc);
              ra000_ffff_tmp23 = simd_and(ra000_ffff_tmp7, tmp18);
              cc_range_ff0b_ff3e_3 = simd_or(ra000_ffff_tmp22, ra000_ffff_tmp23);
              carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(31), sequence_ef_bc_adv));
              ra000_ffff_tmp24 = simd_and(sequence_ef_bc_adv, cc_range_ff0b_ff3e_3);
              struct_math_Y.cc = simd_or(struct_math_Y.cc, ra000_ffff_tmp24);
              ra000_ffff_tmp25 = simd_and(tmp10, ra000_ffff_tmp4);
              byte_bd = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp25);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              ra000_ffff_tmp26 = simd_andc(tmp22, tmp17);
              ra000_ffff_tmp27 = simd_andc(tmp10, ra000_ffff_tmp26);
              cc_range_ff5c_ff5e_3 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp27);
              carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(32), sequence_ef_bd_adv));
              ra000_ffff_tmp28 = simd_and(sequence_ef_bd_adv, cc_range_ff5c_ff5e_3);
              struct_math_Y.cc = simd_or(struct_math_Y.cc, ra000_ffff_tmp28);
              byte_bf = simd_and(ra000_ffff_tmp7, ra000_ffff_tmp1);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              ra000_ffff_tmp29 = simd_andc(tmp17, r800_ffff_tmp1);
              ra000_ffff_tmp30 = simd_and(ra000_ffff_tmp2, ra000_ffff_tmp29);
              ra000_ffff_tmp31 = simd_and(ra000_ffff_tmp2, basis_bits.bit_4);
              ra000_ffff_tmp32 = simd_xor(basis_bits.bit_5, tmp22);
              ra000_ffff_tmp33 = simd_and(ra000_ffff_tmp31, ra000_ffff_tmp32);
              cc_range_ffe2_ffe9_3 = simd_or(ra000_ffff_tmp30, ra000_ffff_tmp33);
              carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(33), sequence_ef_bf_adv));
              ra000_ffff_tmp34 = simd_and(sequence_ef_bf_adv, cc_range_ffe2_ffe9_3);
              struct_math_Y.cc = simd_or(struct_math_Y.cc, ra000_ffff_tmp34);
            }
            else {
              carryQ.CarryDequeueEnqueue(28, 6);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(5, 29);
          }
          byte_range_f0_ff = simd_and(byte_range_c0_ff, tmp8);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(34, 17))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(r10000_10ffff_tmp1, tmp22);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp2);
            r10000_10ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp4 = simd_and(r10000_10ffff_tmp3, tmp15);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp6 = simd_and(tmp10, r10000_10ffff_tmp5);
            byte_9d = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp6);
            carryQ.cq[34] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(34), r10000_10ffff_tmp7));
            sequence_f0_9d = simd_and(r10000_10ffff_tmp7, byte_9d);
            byte_f0_adv = r10000_10ffff_tmp7;
            byte_90 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp2);
            carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(35), r10000_10ffff_tmp8));
            sequence_f0_9d_90 = simd_and(r10000_10ffff_tmp8, byte_90);
            sequence_f0_9d_adv = r10000_10ffff_tmp8;
            byte_range_80_bf = r10000_10ffff_tmp3;
            carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(36), sequence_f0_9d_90_adv));
            r10000_10ffff_tmp9 = simd_and(sequence_f0_9d_90_adv, byte_range_80_bf);
            struct_math_Y.cc = simd_or(struct_math_Y.cc, r10000_10ffff_tmp9);
            r10000_10ffff_tmp10 = simd_and(byte_range_80_bf, tmp15);
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp5, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            r10000_10ffff_tmp12 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp13 = simd_and(basis_bits.bit_5, tmp22);
            r10000_10ffff_tmp14 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp13);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp18 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp17);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp18);
            r10000_10ffff_tmp20 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp19);
            r10000_10ffff_tmp21 = simd_and(byte_range_80_bf, r10000_10ffff_tmp20);
            cc_range_1d440_1d456_4 = simd_or(r10000_10ffff_tmp16, r10000_10ffff_tmp21);
            carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(37), sequence_f0_9d_91_adv));
            r10000_10ffff_tmp22 = simd_and(sequence_f0_9d_91_adv, cc_range_1d440_1d456_4);
            struct_math_Y.cc = simd_or(struct_math_Y.cc, r10000_10ffff_tmp22);
            r10000_10ffff_tmp23 = simd_andc(tmp17, r10000_10ffff_tmp1);
            byte_92 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp23);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            r10000_10ffff_tmp24 = simd_and(tmp10, tmp22);
            r10000_10ffff_tmp25 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp24);
            r10000_10ffff_tmp26 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp25);
            r10000_10ffff_tmp27 = simd_and(tmp10, basis_bits.bit_6);
            r10000_10ffff_tmp28 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp27);
            r10000_10ffff_tmp29 = simd_or(r10000_10ffff_tmp26, r10000_10ffff_tmp28);
            r10000_10ffff_tmp30 = simd_and(byte_range_80_bf, tmp2);
            r10000_10ffff_tmp31 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp23);
            r10000_10ffff_tmp32 = simd_or(r10000_10ffff_tmp29, r10000_10ffff_tmp31);
            r10000_10ffff_tmp33 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp34 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp33);
            r10000_10ffff_tmp35 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp36 = simd_and(r10000_10ffff_tmp34, r10000_10ffff_tmp35);
            r10000_10ffff_tmp37 = simd_or(r10000_10ffff_tmp32, r10000_10ffff_tmp36);
            r10000_10ffff_tmp38 = simd_and(r10000_10ffff_tmp30, basis_bits.bit_4);
            r10000_10ffff_tmp39 = simd_xor(basis_bits.bit_5, tmp22);
            r10000_10ffff_tmp40 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp39);
            r10000_10ffff_tmp41 = simd_or(r10000_10ffff_tmp37, r10000_10ffff_tmp40);
            r10000_10ffff_tmp42 = simd_and(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp43 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp44 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp43);
            r10000_10ffff_tmp45 = simd_not(r10000_10ffff_tmp44);
            r10000_10ffff_tmp46 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp45), simd_andc(r10000_10ffff_tmp27, basis_bits.bit_3));
            r10000_10ffff_tmp47 = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp46);
            r10000_10ffff_tmp48 = simd_or(r10000_10ffff_tmp41, r10000_10ffff_tmp47);
            r10000_10ffff_tmp49 = simd_and(byte_range_80_bf, tmp8);
            r10000_10ffff_tmp50 = simd_and(r10000_10ffff_tmp49, tmp6);
            r10000_10ffff_tmp51 = simd_or(r10000_10ffff_tmp48, r10000_10ffff_tmp50);
            r10000_10ffff_tmp52 = simd_and(r10000_10ffff_tmp49, tmp10);
            r10000_10ffff_tmp53 = simd_and(r10000_10ffff_tmp52, tmp22);
            cc_range_1d480_1d4bd_4 = simd_or(r10000_10ffff_tmp51, r10000_10ffff_tmp53);
            carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(38), sequence_f0_9d_92_adv));
            r10000_10ffff_tmp54 = simd_and(sequence_f0_9d_92_adv, cc_range_1d480_1d4bd_4);
            struct_math_Y.cc = simd_or(struct_math_Y.cc, r10000_10ffff_tmp54);
            r10000_10ffff_tmp55 = simd_andc(tmp5, r10000_10ffff_tmp1);
            byte_93 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp55);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            r10000_10ffff_tmp56 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp57 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp56);
            r10000_10ffff_tmp58 = simd_andc(r10000_10ffff_tmp57, r10000_10ffff_tmp1);
            r10000_10ffff_tmp59 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp14);
            r10000_10ffff_tmp60 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp59);
            r10000_10ffff_tmp61 = simd_and(byte_range_80_bf, r10000_10ffff_tmp60);
            cc_range_1d4c0_1d4c5_4 = simd_or(r10000_10ffff_tmp58, r10000_10ffff_tmp61);
            carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(39), sequence_f0_9d_93_adv));
            r10000_10ffff_tmp62 = simd_and(sequence_f0_9d_93_adv, cc_range_1d4c0_1d4c5_4);
            struct_math_Y.cc = simd_or(struct_math_Y.cc, r10000_10ffff_tmp62);
            r10000_10ffff_tmp63 = simd_andc(r10000_10ffff_tmp33, tmp22);
            byte_94 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp63);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            r10000_10ffff_tmp64 = simd_andc(r10000_10ffff_tmp57, basis_bits.bit_4);
            r10000_10ffff_tmp65 = simd_andc(r10000_10ffff_tmp64, r10000_10ffff_tmp17);
            r10000_10ffff_tmp66 = simd_or(basis_bits.bit_5, tmp5);
            r10000_10ffff_tmp67 = simd_not(r10000_10ffff_tmp66);
            r10000_10ffff_tmp68 = simd_and(basis_bits.bit_5, tmp5);
            r10000_10ffff_tmp69 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp67), simd_andc(r10000_10ffff_tmp68, basis_bits.bit_4));
            r10000_10ffff_tmp70 = simd_and(r10000_10ffff_tmp57, r10000_10ffff_tmp69);
            r10000_10ffff_tmp71 = simd_or(r10000_10ffff_tmp65, r10000_10ffff_tmp70);
            r10000_10ffff_tmp72 = simd_not(r10000_10ffff_tmp14);
            r10000_10ffff_tmp73 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp72), simd_andc(r10000_10ffff_tmp24, basis_bits.bit_3));
            r10000_10ffff_tmp74 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp73);
            r10000_10ffff_tmp75 = simd_or(r10000_10ffff_tmp71, r10000_10ffff_tmp74);
            r10000_10ffff_tmp76 = simd_not(r10000_10ffff_tmp13);
            r10000_10ffff_tmp77 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp76), simd_andc(r10000_10ffff_tmp17, basis_bits.bit_4));
            r10000_10ffff_tmp78 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp77);
            r10000_10ffff_tmp79 = simd_or(r10000_10ffff_tmp75, r10000_10ffff_tmp78);
            r10000_10ffff_tmp80 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp44);
            r10000_10ffff_tmp81 = simd_not(r10000_10ffff_tmp80);
            r10000_10ffff_tmp82 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp27);
            r10000_10ffff_tmp83 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp81), simd_andc(r10000_10ffff_tmp82, basis_bits.bit_2));
            r10000_10ffff_tmp84 = simd_and(byte_range_80_bf, r10000_10ffff_tmp83);
            r10000_10ffff_tmp85 = simd_or(r10000_10ffff_tmp79, r10000_10ffff_tmp84);
            r10000_10ffff_tmp86 = simd_and(r10000_10ffff_tmp49, basis_bits.bit_4);
            r10000_10ffff_tmp87 = simd_xor(basis_bits.bit_5, tmp5);
            r10000_10ffff_tmp88 = simd_and(r10000_10ffff_tmp86, r10000_10ffff_tmp87);
            cc_range_1d500_1d53b_4 = simd_or(r10000_10ffff_tmp85, r10000_10ffff_tmp88);
            carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(40), sequence_f0_9d_94_adv));
            r10000_10ffff_tmp89 = simd_and(sequence_f0_9d_94_adv, cc_range_1d500_1d53b_4);
            struct_math_Y.cc = simd_or(struct_math_Y.cc, r10000_10ffff_tmp89);
            r10000_10ffff_tmp90 = simd_and(r10000_10ffff_tmp33, r10000_10ffff_tmp5);
            byte_95 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp90);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            r10000_10ffff_tmp91 = simd_andc(r10000_10ffff_tmp64, r10000_10ffff_tmp13);
            r10000_10ffff_tmp92 = simd_and(r10000_10ffff_tmp33, tmp17);
            r10000_10ffff_tmp93 = simd_and(r10000_10ffff_tmp57, r10000_10ffff_tmp92);
            r10000_10ffff_tmp94 = simd_or(r10000_10ffff_tmp91, r10000_10ffff_tmp93);
            r10000_10ffff_tmp95 = simd_not(r10000_10ffff_tmp2);
            r10000_10ffff_tmp96 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp95), simd_andc(r10000_10ffff_tmp44, basis_bits.bit_3));
            r10000_10ffff_tmp97 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp96);
            r10000_10ffff_tmp98 = simd_or(r10000_10ffff_tmp94, r10000_10ffff_tmp97);
            r10000_10ffff_tmp99 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            r10000_10ffff_tmp100 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp99);
            r10000_10ffff_tmp101 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp100);
            r10000_10ffff_tmp102 = simd_and(byte_range_80_bf, r10000_10ffff_tmp101);
            cc_range_1d540_1d552_4 = simd_or(r10000_10ffff_tmp98, r10000_10ffff_tmp102);
            carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(41), sequence_f0_9d_95_adv));
            r10000_10ffff_tmp103 = simd_and(sequence_f0_9d_95_adv, cc_range_1d540_1d552_4);
            struct_math_Y.cc = simd_or(struct_math_Y.cc, r10000_10ffff_tmp103);
            r10000_10ffff_tmp104 = simd_not(r10000_10ffff_tmp43);
            r10000_10ffff_tmp105 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp104), simd_andc(r10000_10ffff_tmp17, basis_bits.bit_4));
            byte_range_96_99 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp105);
            sequence_f0_9d_byte_range_96_99 = simd_and(sequence_f0_9d_adv, byte_range_96_99);
            carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_96_99, carryQ.get_carry_in(42), r10000_10ffff_tmp106));
            sequence_f0_9d_byte_range_96_99_sfx = simd_and(r10000_10ffff_tmp106, byte_range_80_bf);
            struct_math_Y.cc = simd_or(struct_math_Y.cc, sequence_f0_9d_byte_range_96_99_sfx);
            r10000_10ffff_tmp107 = simd_and(tmp4, tmp17);
            byte_9a = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp107);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            r10000_10ffff_tmp108 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp18);
            r10000_10ffff_tmp109 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp108);
            byte_range_80_a5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp109);
            carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(43), r10000_10ffff_tmp110));
            sequence_f0_9d_9a_byte_range_80_a5 = simd_and(r10000_10ffff_tmp110, byte_range_80_a5);
            struct_math_Y.cc = simd_or(struct_math_Y.cc, sequence_f0_9d_9a_byte_range_80_a5);
            byte_9b = simd_and(r10000_10ffff_tmp10, tmp6);
            sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
            carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(44), r10000_10ffff_tmp111));
            sequence_f0_9d_9b_byte_range_80_bf = simd_and(r10000_10ffff_tmp111, byte_range_80_bf);
            struct_math_Y.cc = simd_or(struct_math_Y.cc, sequence_f0_9d_9b_byte_range_80_bf);
            r10000_10ffff_tmp112 = simd_and(tmp10, tmp5);
            byte_9f = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp112);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            byte_range_80_8b = simd_andc(r10000_10ffff_tmp57, tmp10);
            carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(45), r10000_10ffff_tmp113));
            sequence_f0_9d_9f_byte_range_80_8b = simd_and(r10000_10ffff_tmp113, byte_range_80_8b);
            struct_math_Y.cc = simd_or(struct_math_Y.cc, sequence_f0_9d_9f_byte_range_80_8b);
            byte_9e = simd_and(r10000_10ffff_tmp10, tmp18);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            r10000_10ffff_tmp114 = simd_andc(tmp4, tmp22);
            byte_b8 = simd_and(r10000_10ffff_tmp49, r10000_10ffff_tmp114);
            carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(46), r10000_10ffff_tmp115));
            sequence_f0_9e_b8 = simd_and(r10000_10ffff_tmp115, byte_b8);
            sequence_f0_9e_adv = r10000_10ffff_tmp115;
            r10000_10ffff_tmp116 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp59);
            r10000_10ffff_tmp117 = simd_or(r10000_10ffff_tmp58, r10000_10ffff_tmp116);
            r10000_10ffff_tmp118 = simd_andc(r10000_10ffff_tmp30, r10000_10ffff_tmp1);
            r10000_10ffff_tmp119 = simd_and(r10000_10ffff_tmp118, r10000_10ffff_tmp35);
            r10000_10ffff_tmp120 = simd_or(r10000_10ffff_tmp117, r10000_10ffff_tmp119);
            r10000_10ffff_tmp121 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp63);
            r10000_10ffff_tmp122 = simd_or(r10000_10ffff_tmp120, r10000_10ffff_tmp121);
            r10000_10ffff_tmp123 = simd_and(r10000_10ffff_tmp33, tmp5);
            r10000_10ffff_tmp124 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp123);
            r10000_10ffff_tmp125 = simd_or(r10000_10ffff_tmp122, r10000_10ffff_tmp124);
            r10000_10ffff_tmp126 = simd_or(r10000_10ffff_tmp1, tmp5);
            r10000_10ffff_tmp127 = simd_not(r10000_10ffff_tmp126);
            r10000_10ffff_tmp128 = simd_or(basis_bits.bit_5, tmp22);
            r10000_10ffff_tmp129 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp128);
            r10000_10ffff_tmp130 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp127), simd_andc(r10000_10ffff_tmp129, basis_bits.bit_3));
            r10000_10ffff_tmp131 = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp130);
            r10000_10ffff_tmp132 = simd_or(r10000_10ffff_tmp125, r10000_10ffff_tmp131);
            r10000_10ffff_tmp133 = simd_and(r10000_10ffff_tmp49, r10000_10ffff_tmp33);
            r10000_10ffff_tmp134 = simd_or(r10000_10ffff_tmp132, r10000_10ffff_tmp133);
            r10000_10ffff_tmp135 = simd_and(tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp136 = simd_and(r10000_10ffff_tmp49, r10000_10ffff_tmp135);
            r10000_10ffff_tmp137 = simd_or(r10000_10ffff_tmp134, r10000_10ffff_tmp136);
            cc_range_1ee00_1ee3b_4 = simd_or(r10000_10ffff_tmp137, r10000_10ffff_tmp50);
            carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b8, carryQ.get_carry_in(47), sequence_f0_9e_b8_adv));
            r10000_10ffff_tmp138 = simd_and(sequence_f0_9e_b8_adv, cc_range_1ee00_1ee3b_4);
            struct_math_Y.cc = simd_or(struct_math_Y.cc, r10000_10ffff_tmp138);
            byte_b9 = r10000_10ffff_tmp136;
            sequence_f0_9e_b9 = simd_and(sequence_f0_9e_adv, byte_b9);
            r10000_10ffff_tmp139 = simd_or(r10000_10ffff_tmp23, r10000_10ffff_tmp123);
            r10000_10ffff_tmp140 = simd_or(r10000_10ffff_tmp139, r10000_10ffff_tmp135);
            r10000_10ffff_tmp141 = simd_or(r10000_10ffff_tmp140, tmp6);
            r10000_10ffff_tmp142 = simd_and(r10000_10ffff_tmp57, r10000_10ffff_tmp141);
            r10000_10ffff_tmp143 = simd_and(r10000_10ffff_tmp57, tmp10);
            r10000_10ffff_tmp144 = simd_and(r10000_10ffff_tmp143, tmp22);
            r10000_10ffff_tmp145 = simd_or(r10000_10ffff_tmp142, r10000_10ffff_tmp144);
            r10000_10ffff_tmp146 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp1);
            r10000_10ffff_tmp147 = simd_and(r10000_10ffff_tmp146, r10000_10ffff_tmp35);
            r10000_10ffff_tmp148 = simd_or(r10000_10ffff_tmp145, r10000_10ffff_tmp147);
            r10000_10ffff_tmp149 = simd_or(r10000_10ffff_tmp148, byte_94);
            r10000_10ffff_tmp150 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp123);
            r10000_10ffff_tmp151 = simd_or(r10000_10ffff_tmp149, r10000_10ffff_tmp150);
            r10000_10ffff_tmp152 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp135);
            r10000_10ffff_tmp153 = simd_or(r10000_10ffff_tmp151, r10000_10ffff_tmp152);
            r10000_10ffff_tmp154 = simd_or(r10000_10ffff_tmp153, byte_9b);
            r10000_10ffff_tmp155 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp6);
            r10000_10ffff_tmp156 = simd_or(r10000_10ffff_tmp154, r10000_10ffff_tmp155);
            r10000_10ffff_tmp157 = simd_or(r10000_10ffff_tmp156, byte_9f);
            r10000_10ffff_tmp158 = simd_or(r10000_10ffff_tmp157, r10000_10ffff_tmp119);
            r10000_10ffff_tmp159 = simd_or(r10000_10ffff_tmp158, r10000_10ffff_tmp121);
            r10000_10ffff_tmp160 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp69);
            r10000_10ffff_tmp161 = simd_or(r10000_10ffff_tmp159, r10000_10ffff_tmp160);
            r10000_10ffff_tmp162 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp127), simd_andc(tmp10, basis_bits.bit_3));
            r10000_10ffff_tmp163 = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp162);
            r10000_10ffff_tmp164 = simd_or(r10000_10ffff_tmp161, r10000_10ffff_tmp163);
            r10000_10ffff_tmp165 = simd_or(r10000_10ffff_tmp164, r10000_10ffff_tmp133);
            r10000_10ffff_tmp166 = simd_and(r10000_10ffff_tmp86, r10000_10ffff_tmp39);
            r10000_10ffff_tmp167 = simd_or(r10000_10ffff_tmp165, r10000_10ffff_tmp166);
            r10000_10ffff_tmp168 = simd_and(r10000_10ffff_tmp49, tmp18);
            cc_range_1ee42_1ee7e_4 = simd_or(r10000_10ffff_tmp167, r10000_10ffff_tmp168);
            carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b9, carryQ.get_carry_in(48), sequence_f0_9e_b9_adv));
            r10000_10ffff_tmp169 = simd_and(sequence_f0_9e_b9_adv, cc_range_1ee42_1ee7e_4);
            struct_math_Y.cc = simd_or(struct_math_Y.cc, r10000_10ffff_tmp169);
            byte_ba = simd_and(r10000_10ffff_tmp49, r10000_10ffff_tmp107);
            sequence_f0_9e_ba = simd_and(sequence_f0_9e_adv, byte_ba);
            r10000_10ffff_tmp170 = simd_andc(r10000_10ffff_tmp57, r10000_10ffff_tmp44);
            r10000_10ffff_tmp171 = simd_not(tmp10);
            r10000_10ffff_tmp172 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp66);
            r10000_10ffff_tmp173 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp171), simd_andc(r10000_10ffff_tmp172, basis_bits.bit_3));
            r10000_10ffff_tmp174 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp173);
            r10000_10ffff_tmp175 = simd_or(r10000_10ffff_tmp170, r10000_10ffff_tmp174);
            r10000_10ffff_tmp176 = simd_and(r10000_10ffff_tmp118, tmp22);
            r10000_10ffff_tmp177 = simd_or(r10000_10ffff_tmp175, r10000_10ffff_tmp176);
            r10000_10ffff_tmp178 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp104), simd_andc(r10000_10ffff_tmp13, basis_bits.bit_4));
            r10000_10ffff_tmp179 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp178);
            r10000_10ffff_tmp180 = simd_or(r10000_10ffff_tmp177, r10000_10ffff_tmp179);
            r10000_10ffff_tmp181 = simd_and(r10000_10ffff_tmp42, r10000_10ffff_tmp173);
            cc_range_1ee80_1eeab_4 = simd_or(r10000_10ffff_tmp180, r10000_10ffff_tmp181);
            carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_ba, carryQ.get_carry_in(49), sequence_f0_9e_ba_adv));
            r10000_10ffff_tmp182 = simd_and(sequence_f0_9e_ba_adv, cc_range_1ee80_1eeab_4);
            struct_math_Y.cc = simd_or(struct_math_Y.cc, r10000_10ffff_tmp182);
            byte_bb = r10000_10ffff_tmp50;
            sequence_f0_9e_bb = simd_and(sequence_f0_9e_adv, byte_bb);
            byte_range_b0_b1 = simd_andc(r10000_10ffff_tmp49, r10000_10ffff_tmp99);
            carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_bb, carryQ.get_carry_in(50), sequence_f0_9e_bb_adv));
            r10000_10ffff_tmp183 = simd_and(sequence_f0_9e_bb_adv, byte_range_b0_b1);
            struct_math_Y.cc = simd_or(struct_math_Y.cc, r10000_10ffff_tmp183);
          }
          else {
            carryQ.CarryDequeueEnqueue(34, 17);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 51);
        }
        carryQ.CarryQ_Adjust(51);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<51, 0> carryQ;
  };

  struct Property_gr_ext_Y {
  Property_gr_ext_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gr_ext_Y & struct_gr_ext_Y) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_range_c4_cf, r100_3ff_tmp1, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, byte_cc, r100_3ff_tmp4, r100_3ff_tmp5, byte_cd;
		BitBlock r100_3ff_tmp6, r100_3ff_tmp7, byte_range_80_af, r100_3ff_tmp8;
		BitBlock r100_3ff_tmp9, r100_3ff_tmp10, byte_range_80_bf, byte_cc_adv;
		BitBlock r300_36f_tmp1, byte_cd_adv, r300_36f_tmp2, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock byte_range_d0_d7, byte_range_d0_d3, r400_4ff_tmp1, r400_4ff_tmp2;
		BitBlock byte_d2, r400_4ff_tmp3, r400_4ff_tmp4, r400_4ff_tmp5, r400_4ff_tmp6;
		BitBlock r400_4ff_tmp7, r400_4ff_tmp8, r400_4ff_tmp9, byte_range_83_89;
		BitBlock byte_d2_adv, r400_4ff_tmp10, r400_5ff_tmp1, r400_5ff_tmp2;
		BitBlock r400_5ff_tmp3, byte_d6, r400_5ff_tmp4, byte_range_90_bf;
		BitBlock r400_5ff_tmp5, r400_5ff_tmp6, r400_5ff_tmp7, r400_5ff_tmp8, byte_d7;
		BitBlock r400_5ff_tmp9, r590_5ff_tmp1, r590_5ff_tmp2, r590_5ff_tmp3;
		BitBlock r590_5ff_tmp4, r590_5ff_tmp5, r590_5ff_tmp6, r590_5ff_tmp7;
		BitBlock r590_5ff_tmp8, r590_5ff_tmp9, r590_5ff_tmp10, r590_5ff_tmp11;
		BitBlock r590_5ff_tmp12, r590_5ff_tmp13, cc_range_591_5bf_2, byte_d6_adv;
		BitBlock r590_5ff_tmp14, r590_5ff_tmp15, r590_5ff_tmp16, r590_5ff_tmp17;
		BitBlock r590_5ff_tmp18, r590_5ff_tmp19, r590_5ff_tmp20, r590_5ff_tmp21;
		BitBlock r590_5ff_tmp22, cc_range_5c1_5c7_2, byte_d7_adv, r590_5ff_tmp23;
		BitBlock r80_7ff_tmp6, byte_range_d8_db, r600_6ff_tmp1, r600_6ff_tmp2, byte_d8;
		BitBlock r600_6ff_tmp3, r600_6ff_tmp4, r600_6ff_tmp5, r600_6ff_tmp6;
		BitBlock r600_6ff_tmp7, byte_range_90_9a, byte_d8_adv, r600_6ff_tmp8;
		BitBlock r600_6ff_tmp9, r600_6ff_tmp10, byte_d9, r600_6ff_tmp11;
		BitBlock r600_6ff_tmp12, r600_6ff_tmp13, r600_6ff_tmp14, r600_6ff_tmp15;
		BitBlock r600_6ff_tmp16, r600_6ff_tmp17, cc_range_64b_670_2, byte_d9_adv;
		BitBlock r600_6ff_tmp18, r600_6ff_tmp19, byte_db, r600_6ff_tmp20;
		BitBlock r600_6ff_tmp21, r600_6ff_tmp22, r600_6ff_tmp23, r600_6ff_tmp24;
		BitBlock r600_6ff_tmp25, r600_6ff_tmp26, r600_6ff_tmp27, r600_6ff_tmp28;
		BitBlock r600_6ff_tmp29, r600_6ff_tmp30, r600_6ff_tmp31, r600_6ff_tmp32;
		BitBlock r600_6ff_tmp33, r600_6ff_tmp34, r600_6ff_tmp35, r600_6ff_tmp36;
		BitBlock r600_6ff_tmp37, r600_6ff_tmp38, r600_6ff_tmp39, r600_6ff_tmp40;
		BitBlock r600_6ff_tmp41, r600_6ff_tmp42, r600_6ff_tmp43, r600_6ff_tmp44;
		BitBlock cc_range_6d6_6ea_2, byte_db_adv, r600_6ff_tmp45, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, byte_range_dc_dd, r700_77f_tmp1, r700_77f_tmp2, byte_dc;
		BitBlock r700_77f_tmp3, r700_77f_tmp4, byte_dd, r700_77f_tmp5;
		BitBlock byte_range_80_8f, r700_77f_tmp6, r700_77f_tmp7, r700_77f_tmp8;
		BitBlock r700_74f_tmp1, r700_74f_tmp2, r700_74f_tmp3, r700_74f_tmp4;
		BitBlock r700_74f_tmp5, cc_range_711_730_2, byte_dc_adv, r700_74f_tmp6;
		BitBlock r700_74f_tmp7, r700_74f_tmp8, r700_74f_tmp9, byte_range_80_8a;
		BitBlock byte_dd_adv, r700_74f_tmp10, r80_7ff_tmp9, byte_range_de_df;
		BitBlock r780_7ff_tmp1, r780_7ff_tmp2, byte_de, r780_7bf_tmp1, r780_7bf_tmp2;
		BitBlock r780_7bf_tmp3, r780_7bf_tmp4, r780_7bf_tmp5, r780_7bf_tmp6;
		BitBlock r780_7bf_tmp7, r780_7bf_tmp8, byte_range_a6_b0, byte_de_adv;
		BitBlock r780_7bf_tmp9, r780_7ff_tmp3, r780_7ff_tmp4, byte_df, r7c0_7ff_tmp1;
		BitBlock r7c0_7ff_tmp2, r7c0_7ff_tmp3, r7c0_7ff_tmp4, r7c0_7ff_tmp5;
		BitBlock r7c0_7ff_tmp6, byte_range_ab_b3, byte_df_adv, r7c0_7ff_tmp7;
		BitBlock r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4, byte_e4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7;
		BitBlock r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1;
		BitBlock byte_range_e0_e1, r800_1fff_tmp1, byte_e0, r800_fff_tmp1, byte_a0;
		BitBlock r800_fff_tmp2, sequence_e0_a0, byte_e0_adv, r800_fff_tmp3;
		BitBlock r800_fff_tmp4, r800_fff_tmp5, r800_fff_tmp6, r800_fff_tmp7;
		BitBlock r800_fff_tmp8, r800_fff_tmp9, r800_fff_tmp10, r800_fff_tmp11;
		BitBlock r800_fff_tmp12, r800_fff_tmp13, r800_fff_tmp14, r800_fff_tmp15;
		BitBlock r800_fff_tmp16, r800_fff_tmp17, r800_fff_tmp18, r800_fff_tmp19;
		BitBlock r800_fff_tmp20, r800_fff_tmp21, r800_fff_tmp22, r800_fff_tmp23;
		BitBlock r800_fff_tmp24, r800_fff_tmp25, cc_range_816_829_3;
		BitBlock sequence_e0_a0_adv, r800_fff_tmp26, r800_fff_tmp27, r800_fff_tmp28;
		BitBlock byte_a1, sequence_e0_a1, r800_fff_tmp29, r800_fff_tmp30;
		BitBlock byte_range_99_9b, sequence_e0_a1_adv, r800_fff_tmp31, r800_fff_tmp32;
		BitBlock byte_a3, sequence_e0_a3, r800_fff_tmp33, byte_range_a4_bf;
		BitBlock sequence_e0_a3_adv, r800_fff_tmp34, byte_a4, sequence_e0_a4;
		BitBlock r800_fff_tmp35, r800_fff_tmp36, r800_fff_tmp37, r800_fff_tmp38;
		BitBlock r800_fff_tmp39, r800_fff_tmp40, r800_fff_tmp41, r800_fff_tmp42;
		BitBlock r800_fff_tmp43, r800_fff_tmp44, r800_fff_tmp45, r800_fff_tmp46;
		BitBlock r800_fff_tmp47, cc_range_900_93c_3, sequence_e0_a4_adv;
		BitBlock r800_fff_tmp48, r800_fff_tmp49, byte_a5, sequence_e0_a5;
		BitBlock r800_fff_tmp50, r800_fff_tmp51, r800_fff_tmp52, r800_fff_tmp53;
		BitBlock r800_fff_tmp54, r800_fff_tmp55, r800_fff_tmp56, r800_fff_tmp57;
		BitBlock r800_fff_tmp58, r800_fff_tmp59, cc_range_941_962_3;
		BitBlock sequence_e0_a5_adv, r800_fff_tmp60, r800_fff_tmp61, byte_a6;
		BitBlock sequence_e0_a6, r800_fff_tmp62, r800_fff_tmp63, r800_fff_tmp64;
		BitBlock r800_fff_tmp65, cc_range_981_9be_3, sequence_e0_a6_adv;
		BitBlock r800_fff_tmp66, r800_fff_tmp67, byte_a7, sequence_e0_a7;
		BitBlock r800_fff_tmp68, r800_fff_tmp69, r800_fff_tmp70, r800_fff_tmp71;
		BitBlock r800_fff_tmp72, r800_fff_tmp73, r800_fff_tmp74, cc_range_9c1_9e2_3;
		BitBlock sequence_e0_a7_adv, r800_fff_tmp75, r800_fff_tmp76, byte_a8;
		BitBlock sequence_e0_a8, r800_fff_tmp77, r800_fff_tmp78, cc_range_a01_a3c_3;
		BitBlock sequence_e0_a8_adv, r800_fff_tmp79, r800_fff_tmp80, byte_a9;
		BitBlock sequence_e0_a9, r800_fff_tmp81, r800_fff_tmp82, r800_fff_tmp83;
		BitBlock r800_fff_tmp84, r800_fff_tmp85, r800_fff_tmp86, r800_fff_tmp87;
		BitBlock r800_fff_tmp88, r800_fff_tmp89, r800_fff_tmp90, r800_fff_tmp91;
		BitBlock r800_fff_tmp92, r800_fff_tmp93, r800_fff_tmp94, cc_range_a41_a75_3;
		BitBlock sequence_e0_a9_adv, r800_fff_tmp95, byte_aa, sequence_e0_aa;
		BitBlock cc_range_a81_abc_3, sequence_e0_aa_adv, r800_fff_tmp96;
		BitBlock r800_fff_tmp97, byte_ab, sequence_e0_ab, r800_fff_tmp98;
		BitBlock r800_fff_tmp99, r800_fff_tmp100, cc_range_ac1_ae2_3;
		BitBlock sequence_e0_ab_adv, r800_fff_tmp101, byte_ac, sequence_e0_ac;
		BitBlock r800_fff_tmp102, r800_fff_tmp103, cc_range_b01_b3e_3;
		BitBlock sequence_e0_ac_adv, r800_fff_tmp104, byte_ad, sequence_e0_ad;
		BitBlock r800_fff_tmp105, r800_fff_tmp106, r800_fff_tmp107, cc_range_b41_b62_3;
		BitBlock sequence_e0_ad_adv, r800_fff_tmp108, byte_ae, sequence_e0_ae;
		BitBlock r800_fff_tmp109, r800_fff_tmp110, cc_range_b82_bbe_3;
		BitBlock sequence_e0_ae_adv, r800_fff_tmp111, r800_fff_tmp112, byte_af;
		BitBlock sequence_e0_af, r800_fff_tmp113, r800_fff_tmp114, cc_range_bc0_bd7_3;
		BitBlock sequence_e0_af_adv, r800_fff_tmp115, byte_b0, sequence_e0_b0;
		BitBlock r800_fff_tmp116, cc_range_c00_c3e_3, sequence_e0_b0_adv;
		BitBlock r800_fff_tmp117, byte_b1, sequence_e0_b1, r800_fff_tmp118;
		BitBlock r800_fff_tmp119, r800_fff_tmp120, r800_fff_tmp121, r800_fff_tmp122;
		BitBlock r800_fff_tmp123, r800_fff_tmp124, r800_fff_tmp125, r800_fff_tmp126;
		BitBlock cc_range_c40_c62_3, sequence_e0_b1_adv, r800_fff_tmp127, byte_b2;
		BitBlock sequence_e0_b2, r800_fff_tmp128, cc_range_c81_cbf_3;
		BitBlock sequence_e0_b2_adv, r800_fff_tmp129, byte_b3, sequence_e0_b3;
		BitBlock r800_fff_tmp130, r800_fff_tmp131, r800_fff_tmp132, r800_fff_tmp133;
		BitBlock r800_fff_tmp134, r800_fff_tmp135, cc_range_cc2_ce2_3;
		BitBlock sequence_e0_b3_adv, r800_fff_tmp136, byte_b4, sequence_e0_b4;
		BitBlock cc_range_d01_d3e_3, sequence_e0_b4_adv, r800_fff_tmp137, byte_b5;
		BitBlock sequence_e0_b5, cc_range_d41_d62_3, sequence_e0_b5_adv;
		BitBlock r800_fff_tmp138, byte_b7, sequence_e0_b7, r800_fff_tmp139;
		BitBlock r800_fff_tmp140, r800_fff_tmp141, r800_fff_tmp142, r800_fff_tmp143;
		BitBlock r800_fff_tmp144, r800_fff_tmp145, r800_fff_tmp146, r800_fff_tmp147;
		BitBlock cc_range_dca_ddf_3, sequence_e0_b7_adv, r800_fff_tmp148, byte_b8;
		BitBlock sequence_e0_b8, r800_fff_tmp149, r800_fff_tmp150, r800_fff_tmp151;
		BitBlock cc_range_e31_e34_3, sequence_e0_b8_adv, r800_fff_tmp152, byte_b9;
		BitBlock sequence_e0_b9, r800_fff_tmp153, byte_range_87_8e, sequence_e0_b9_adv;
		BitBlock r800_fff_tmp154, byte_ba, sequence_e0_ba, r800_fff_tmp155;
		BitBlock r800_fff_tmp156, r800_fff_tmp157, r800_fff_tmp158, r800_fff_tmp159;
		BitBlock r800_fff_tmp160, cc_range_eb1_ebb_3, sequence_e0_ba_adv;
		BitBlock r800_fff_tmp161, byte_bb, sequence_e0_bb, byte_range_88_8d;
		BitBlock sequence_e0_bb_adv, r800_fff_tmp162, byte_bc, sequence_e0_bc;
		BitBlock r800_fff_tmp163, r800_fff_tmp164, r800_fff_tmp165, r800_fff_tmp166;
		BitBlock cc_range_f18_f39_3, sequence_e0_bc_adv, r800_fff_tmp167, byte_bd;
		BitBlock sequence_e0_bd, r800_fff_tmp168, r800_fff_tmp169, byte_range_b1_be;
		BitBlock sequence_e0_bd_adv, r800_fff_tmp170, byte_be, sequence_e0_be;
		BitBlock r800_fff_tmp171, r800_fff_tmp172, r800_fff_tmp173, r800_fff_tmp174;
		BitBlock r800_fff_tmp175, r800_fff_tmp176, r800_fff_tmp177, r800_fff_tmp178;
		BitBlock r800_fff_tmp179, r800_fff_tmp180, r800_fff_tmp181, r800_fff_tmp182;
		BitBlock r800_fff_tmp183, r800_fff_tmp184, r800_fff_tmp185, r800_fff_tmp186;
		BitBlock cc_range_f80_f99_3, sequence_e0_be_adv, r800_fff_tmp187, byte_bf;
		BitBlock sequence_e0_bf, byte_86, sequence_e0_bf_adv, r800_fff_tmp188;
		BitBlock r800_1fff_tmp2, r800_1fff_tmp3, byte_e1, r1000_1fff_tmp1;
		BitBlock r1000_1fff_tmp2, byte_80, r1000_1fff_tmp3, sequence_e1_80;
		BitBlock byte_e1_adv, r1000_1fff_tmp4, r1000_1fff_tmp5, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9, r1000_1fff_tmp10;
		BitBlock r1000_1fff_tmp11, r1000_1fff_tmp12, r1000_1fff_tmp13;
		BitBlock r1000_1fff_tmp14, r1000_1fff_tmp15, r1000_1fff_tmp16;
		BitBlock r1000_1fff_tmp17, r1000_1fff_tmp18, r1000_1fff_tmp19;
		BitBlock r1000_1fff_tmp20, r1000_1fff_tmp21, r1000_1fff_tmp22;
		BitBlock cc_range_102d_103d_3, sequence_e1_80_adv, r1000_1fff_tmp23, byte_81;
		BitBlock sequence_e1_81, r1000_1fff_tmp24, r1000_1fff_tmp25, r1000_1fff_tmp26;
		BitBlock r1000_1fff_tmp27, r1000_1fff_tmp28, r1000_1fff_tmp29;
		BitBlock r1000_1fff_tmp30, r1000_1fff_tmp31, r1000_1fff_tmp32;
		BitBlock r1000_1fff_tmp33, r1000_1fff_tmp34, r1000_1fff_tmp35;
		BitBlock r1000_1fff_tmp36, cc_range_1058_1071_3, sequence_e1_81_adv;
		BitBlock r1000_1fff_tmp37, r1000_1fff_tmp38, r1000_1fff_tmp39, byte_82;
		BitBlock sequence_e1_82, r1000_1fff_tmp40, r1000_1fff_tmp41, r1000_1fff_tmp42;
		BitBlock r1000_1fff_tmp43, r1000_1fff_tmp44, r1000_1fff_tmp45;
		BitBlock r1000_1fff_tmp46, cc_range_1082_109d_3, sequence_e1_82_adv;
		BitBlock r1000_1fff_tmp47, byte_8d, sequence_e1_8d, r1000_1fff_tmp48;
		BitBlock byte_range_9d_9f, sequence_e1_8d_adv, r1000_1fff_tmp49;
		BitBlock r1000_1fff_tmp50, byte_9c, sequence_e1_9c, r1000_1fff_tmp51;
		BitBlock r1000_1fff_tmp52, r1000_1fff_tmp53, r1000_1fff_tmp54;
		BitBlock cc_range_1712_1732_3, sequence_e1_9c_adv, r1000_1fff_tmp55, byte_9d;
		BitBlock sequence_e1_9d, r1000_1fff_tmp56, cc_range_1752_1772_3;
		BitBlock sequence_e1_9d_adv, r1000_1fff_tmp57, r1000_1fff_tmp58, byte_9e;
		BitBlock sequence_e1_9e, r1000_1fff_tmp59, r1000_1fff_tmp60, r1000_1fff_tmp61;
		BitBlock r1000_1fff_tmp62, r1000_1fff_tmp63, r1000_1fff_tmp64;
		BitBlock r1000_1fff_tmp65, cc_range_17b4_17b7_3, sequence_e1_9e_adv;
		BitBlock r1000_1fff_tmp66, r1000_1fff_tmp67, byte_9f, sequence_e1_9f;
		BitBlock r1000_1fff_tmp68, r1000_1fff_tmp69, r1000_1fff_tmp70;
		BitBlock r1000_1fff_tmp71, r1000_1fff_tmp72, r1000_1fff_tmp73;
		BitBlock r1000_1fff_tmp74, r1000_1fff_tmp75, r1000_1fff_tmp76;
		BitBlock cc_range_17c6_17dd_3, sequence_e1_9f_adv, r1000_1fff_tmp77;
		BitBlock r1000_1fff_tmp78, sequence_e1_a0, r1000_1fff_tmp79, r1000_1fff_tmp80;
		BitBlock r1000_1fff_tmp81, byte_range_8b_8d, sequence_e1_a0_adv;
		BitBlock r1000_1fff_tmp82, byte_a2, sequence_e1_a2, r1000_1fff_tmp83;
		BitBlock sequence_e1_a2_adv, r1000_1fff_tmp84, sequence_e1_a4;
		BitBlock r1000_1fff_tmp85, r1000_1fff_tmp86, r1000_1fff_tmp87;
		BitBlock r1000_1fff_tmp88, r1000_1fff_tmp89, r1000_1fff_tmp90;
		BitBlock r1000_1fff_tmp91, r1000_1fff_tmp92, r1000_1fff_tmp93;
		BitBlock cc_range_1920_1939_3, sequence_e1_a4_adv, r1000_1fff_tmp94;
		BitBlock r1000_1fff_tmp95, sequence_e1_a8, r1000_1fff_tmp96, r1000_1fff_tmp97;
		BitBlock cc_range_1a17_1a1b_3, sequence_e1_a8_adv, r1000_1fff_tmp98;
		BitBlock sequence_e1_a9, r1000_1fff_tmp99, r1000_1fff_tmp100;
		BitBlock r1000_1fff_tmp101, r1000_1fff_tmp102, r1000_1fff_tmp103;
		BitBlock r1000_1fff_tmp104, r1000_1fff_tmp105, r1000_1fff_tmp106;
		BitBlock r1000_1fff_tmp107, r1000_1fff_tmp108, r1000_1fff_tmp109;
		BitBlock r1000_1fff_tmp110, r1000_1fff_tmp111, r1000_1fff_tmp112;
		BitBlock r1000_1fff_tmp113, r1000_1fff_tmp114, cc_range_1a56_1a7f_3;
		BitBlock sequence_e1_a9_adv, r1000_1fff_tmp115, r1000_1fff_tmp116;
		BitBlock sequence_e1_aa, r1000_1fff_tmp117, byte_range_b0_be;
		BitBlock sequence_e1_aa_adv, r1000_1fff_tmp118, sequence_e1_ac;
		BitBlock r1000_1fff_tmp119, r1000_1fff_tmp120, r1000_1fff_tmp121;
		BitBlock r1000_1fff_tmp122, r1000_1fff_tmp123, r1000_1fff_tmp124;
		BitBlock r1000_1fff_tmp125, r1000_1fff_tmp126, cc_range_1b00_1b3c_3;
		BitBlock sequence_e1_ac_adv, r1000_1fff_tmp127, sequence_e1_ad;
		BitBlock r1000_1fff_tmp128, r1000_1fff_tmp129, r1000_1fff_tmp130;
		BitBlock cc_range_1b42_1b6b_3, sequence_e1_ad_adv, r1000_1fff_tmp131;
		BitBlock sequence_e1_ae, r1000_1fff_tmp132, r1000_1fff_tmp133;
		BitBlock r1000_1fff_tmp134, r1000_1fff_tmp135, r1000_1fff_tmp136;
		BitBlock r1000_1fff_tmp137, r1000_1fff_tmp138, r1000_1fff_tmp139;
		BitBlock r1000_1fff_tmp140, cc_range_1b80_1bab_3, sequence_e1_ae_adv;
		BitBlock r1000_1fff_tmp141, sequence_e1_af, r1000_1fff_tmp142;
		BitBlock r1000_1fff_tmp143, r1000_1fff_tmp144, r1000_1fff_tmp145;
		BitBlock r1000_1fff_tmp146, r1000_1fff_tmp147, cc_range_1be6_1bef_3;
		BitBlock sequence_e1_af_adv, r1000_1fff_tmp148, sequence_e1_b0;
		BitBlock r1000_1fff_tmp149, r1000_1fff_tmp150, r1000_1fff_tmp151;
		BitBlock r1000_1fff_tmp152, cc_range_1c2c_1c36_3, sequence_e1_b0_adv;
		BitBlock r1000_1fff_tmp153, r1000_1fff_tmp154, sequence_e1_b3;
		BitBlock r1000_1fff_tmp155, r1000_1fff_tmp156, r1000_1fff_tmp157;
		BitBlock r1000_1fff_tmp158, r1000_1fff_tmp159, r1000_1fff_tmp160;
		BitBlock r1000_1fff_tmp161, r1000_1fff_tmp162, r1000_1fff_tmp163;
		BitBlock r1000_1fff_tmp164, r1000_1fff_tmp165, r1000_1fff_tmp166;
		BitBlock cc_range_1cd0_1cf8_3, sequence_e1_b3_adv, r1000_1fff_tmp167;
		BitBlock r1000_1fff_tmp168, sequence_e1_b7, r1000_1fff_tmp169;
		BitBlock r1000_1fff_tmp170, r1000_1fff_tmp171, r1000_1fff_tmp172;
		BitBlock cc_range_1dc0_1dfc_3, sequence_e1_b7_adv, r1000_1fff_tmp173;
		BitBlock r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, sequence_e2_80, byte_e2_adv;
		BitBlock r2000_2fff_tmp5, r2000_2fff_tmp6, byte_range_8c_8d;
		BitBlock sequence_e2_80_adv, r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock byte_83, sequence_e2_83, r2000_2fff_tmp10, r2000_2fff_tmp11;
		BitBlock r2000_2fff_tmp12, byte_range_90_b0, sequence_e2_83_adv;
		BitBlock r2000_2fff_tmp13, r2000_2fff_tmp14, r2000_2fff_tmp15, sequence_e2_b3;
		BitBlock r2000_2fff_tmp16, r2000_2fff_tmp17, r2000_2fff_tmp18;
		BitBlock r2000_2fff_tmp19, byte_range_af_b1, sequence_e2_b3_adv;
		BitBlock r2000_2fff_tmp20, r2000_2fff_tmp21, r2000_2fff_tmp22, sequence_e2_b5;
		BitBlock sequence_e2_b5_adv, r2000_2fff_tmp23, r2000_2fff_tmp24;
		BitBlock sequence_e2_b7, byte_range_a0_bf, sequence_e2_b7_adv;
		BitBlock r2000_2fff_tmp25, r2000_4dff_tmp3, r2000_4dff_tmp4, byte_e3;
		BitBlock r2000_4dff_tmp5, r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3;
		BitBlock r3000_4dff_tmp4, sequence_e3_80, byte_e3_adv, r3000_4dff_tmp5;
		BitBlock r3000_4dff_tmp6, r3000_4dff_tmp7, byte_range_aa_af;
		BitBlock sequence_e3_80_adv, r3000_4dff_tmp8, sequence_e3_82, r3000_4dff_tmp9;
		BitBlock r3000_4dff_tmp10, r3000_4dff_tmp11, r3000_4dff_tmp12;
		BitBlock r3000_4dff_tmp13, byte_range_99_9a, sequence_e3_82_adv;
		BitBlock r3000_4dff_tmp14, r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea;
		BitBlock ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7;
		BitBlock byte_99, ra000_ffff_tmp8, sequence_ea_99, byte_ea_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, ra000_ffff_tmp14, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, ra000_ffff_tmp17, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, ra000_ffff_tmp20, ra000_ffff_tmp21;
		BitBlock ra000_ffff_tmp22, cc_range_a66f_a674_3, sequence_ea_99_adv;
		BitBlock ra000_ffff_tmp23, byte_9a, sequence_ea_9a, sequence_ea_9a_adv;
		BitBlock ra000_ffff_tmp24, ra000_ffff_tmp25, byte_9b, sequence_ea_9b;
		BitBlock ra000_ffff_tmp26, byte_range_b0_b1, sequence_ea_9b_adv;
		BitBlock ra000_ffff_tmp27, ra000_ffff_tmp28, ra000_ffff_tmp29, sequence_ea_a0;
		BitBlock ra000_ffff_tmp30, ra000_ffff_tmp31, ra000_ffff_tmp32;
		BitBlock ra000_ffff_tmp33, ra000_ffff_tmp34, ra000_ffff_tmp35;
		BitBlock ra000_ffff_tmp36, ra000_ffff_tmp37, ra000_ffff_tmp38;
		BitBlock cc_range_a802_a825_3, sequence_ea_a0_adv, ra000_ffff_tmp39;
		BitBlock ra000_ffff_tmp40, sequence_ea_a3, ra000_ffff_tmp41, ra000_ffff_tmp42;
		BitBlock ra000_ffff_tmp43, cc_range_a8c4_a8e0_3, sequence_ea_a3_adv;
		BitBlock ra000_ffff_tmp44, sequence_ea_a4, ra000_ffff_tmp45, byte_range_a6_ad;
		BitBlock sequence_ea_a4_adv, ra000_ffff_tmp46, ra000_ffff_tmp47;
		BitBlock sequence_ea_a5, ra000_ffff_tmp48, ra000_ffff_tmp49, ra000_ffff_tmp50;
		BitBlock ra000_ffff_tmp51, ra000_ffff_tmp52, byte_range_87_91;
		BitBlock sequence_ea_a5_adv, ra000_ffff_tmp53, ra000_ffff_tmp54;
		BitBlock sequence_ea_a6, ra000_ffff_tmp55, ra000_ffff_tmp56, ra000_ffff_tmp57;
		BitBlock ra000_ffff_tmp58, ra000_ffff_tmp59, ra000_ffff_tmp60;
		BitBlock ra000_ffff_tmp61, ra000_ffff_tmp62, ra000_ffff_tmp63;
		BitBlock ra000_ffff_tmp64, cc_range_a980_a9bc_3, sequence_ea_a6_adv;
		BitBlock ra000_ffff_tmp65, ra000_ffff_tmp66, sequence_ea_a7;
		BitBlock sequence_ea_a7_adv, ra000_ffff_tmp67, ra000_ffff_tmp68;
		BitBlock sequence_ea_a8, ra000_ffff_tmp69, ra000_ffff_tmp70, ra000_ffff_tmp71;
		BitBlock ra000_ffff_tmp72, ra000_ffff_tmp73, ra000_ffff_tmp74;
		BitBlock ra000_ffff_tmp75, ra000_ffff_tmp76, ra000_ffff_tmp77;
		BitBlock cc_range_aa29_aa35_3, sequence_ea_a8_adv, ra000_ffff_tmp78;
		BitBlock sequence_ea_a9, ra000_ffff_tmp79, ra000_ffff_tmp80;
		BitBlock cc_range_aa43_aa7c_3, sequence_ea_a9_adv, ra000_ffff_tmp81;
		BitBlock sequence_ea_aa, ra000_ffff_tmp82, ra000_ffff_tmp83, ra000_ffff_tmp84;
		BitBlock ra000_ffff_tmp85, ra000_ffff_tmp86, ra000_ffff_tmp87;
		BitBlock ra000_ffff_tmp88, ra000_ffff_tmp89, ra000_ffff_tmp90;
		BitBlock ra000_ffff_tmp91, ra000_ffff_tmp92, ra000_ffff_tmp93;
		BitBlock ra000_ffff_tmp94, cc_range_aab0_aabe_3, sequence_ea_aa_adv;
		BitBlock ra000_ffff_tmp95, sequence_ea_ab, ra000_ffff_tmp96, ra000_ffff_tmp97;
		BitBlock ra000_ffff_tmp98, ra000_ffff_tmp99, ra000_ffff_tmp100;
		BitBlock ra000_ffff_tmp101, cc_range_aac1_aaf6_3, sequence_ea_ab_adv;
		BitBlock ra000_ffff_tmp102, sequence_ea_af, ra000_ffff_tmp103;
		BitBlock ra000_ffff_tmp104, ra000_ffff_tmp105, cc_range_abe5_abed_3;
		BitBlock sequence_ea_af_adv, ra000_ffff_tmp106, byte_ef, ra000_ffff_tmp107;
		BitBlock sequence_ef_ac, byte_ef_adv, ra000_ffff_tmp108, sequence_ef_ac_adv;
		BitBlock ra000_ffff_tmp109, sequence_ef_b8, ra000_ffff_tmp110;
		BitBlock ra000_ffff_tmp111, cc_range_fe00_fe20_3, sequence_ef_b8_adv;
		BitBlock ra000_ffff_tmp112, sequence_ef_be, byte_range_9e_9f;
		BitBlock sequence_ef_be_adv, ra000_ffff_tmp113, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, byte_90, r10000_10ffff_tmp7, sequence_f0_90;
		BitBlock byte_f0_adv, r10000_10ffff_tmp8, r10000_10ffff_tmp9;
		BitBlock r10000_10ffff_tmp10, r10000_10ffff_tmp11, r10000_10ffff_tmp12;
		BitBlock byte_87, r10000_10ffff_tmp13, sequence_f0_90_87, sequence_f0_90_adv;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, sequence_f0_90_87_adv, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, byte_8b, sequence_f0_90_8b;
		BitBlock r10000_10ffff_tmp21, sequence_f0_90_8b_adv, r10000_10ffff_tmp22;
		BitBlock sequence_f0_90_8d, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock r10000_10ffff_tmp25, r10000_10ffff_tmp26, byte_range_b6_ba;
		BitBlock sequence_f0_90_8d_adv, r10000_10ffff_tmp27, r10000_10ffff_tmp28;
		BitBlock sequence_f0_90_a8, r10000_10ffff_tmp29, r10000_10ffff_tmp30;
		BitBlock r10000_10ffff_tmp31, r10000_10ffff_tmp32, r10000_10ffff_tmp33;
		BitBlock r10000_10ffff_tmp34, r10000_10ffff_tmp35, r10000_10ffff_tmp36;
		BitBlock r10000_10ffff_tmp37, r10000_10ffff_tmp38, r10000_10ffff_tmp39;
		BitBlock r10000_10ffff_tmp40, r10000_10ffff_tmp41, cc_range_10a01_10a3f_4;
		BitBlock sequence_f0_90_a8_adv, r10000_10ffff_tmp42, sequence_f0_90_ab;
		BitBlock r10000_10ffff_tmp43, byte_range_a5_a6, sequence_f0_90_ab_adv;
		BitBlock r10000_10ffff_tmp44, r10000_10ffff_tmp45, byte_91, sequence_f0_91;
		BitBlock r10000_10ffff_tmp46, sequence_f0_91_80, sequence_f0_91_adv;
		BitBlock r10000_10ffff_tmp47, r10000_10ffff_tmp48, cc_range_11001_11038_4;
		BitBlock sequence_f0_91_80_adv, r10000_10ffff_tmp49, sequence_f0_91_81;
		BitBlock r10000_10ffff_tmp50, r10000_10ffff_tmp51, r10000_10ffff_tmp52;
		BitBlock cc_range_11040_1107f_4, sequence_f0_91_81_adv, r10000_10ffff_tmp53;
		BitBlock r10000_10ffff_tmp54, r10000_10ffff_tmp55, sequence_f0_91_82;
		BitBlock r10000_10ffff_tmp56, r10000_10ffff_tmp57, r10000_10ffff_tmp58;
		BitBlock r10000_10ffff_tmp59, r10000_10ffff_tmp60, r10000_10ffff_tmp61;
		BitBlock r10000_10ffff_tmp62, cc_range_11080_110b9_4, sequence_f0_91_82_adv;
		BitBlock r10000_10ffff_tmp63, r10000_10ffff_tmp64, byte_84, sequence_f0_91_84;
		BitBlock r10000_10ffff_tmp65, r10000_10ffff_tmp66, r10000_10ffff_tmp67;
		BitBlock r10000_10ffff_tmp68, r10000_10ffff_tmp69, r10000_10ffff_tmp70;
		BitBlock r10000_10ffff_tmp71, r10000_10ffff_tmp72, r10000_10ffff_tmp73;
		BitBlock r10000_10ffff_tmp74, r10000_10ffff_tmp75, r10000_10ffff_tmp76;
		BitBlock cc_range_11100_1112d_4, sequence_f0_91_84_adv, r10000_10ffff_tmp77;
		BitBlock r10000_10ffff_tmp78, byte_85, sequence_f0_91_85, r10000_10ffff_tmp79;
		BitBlock sequence_f0_91_85_adv, r10000_10ffff_tmp80, r10000_10ffff_tmp81;
		BitBlock sequence_f0_91_86, r10000_10ffff_tmp82, r10000_10ffff_tmp83;
		BitBlock r10000_10ffff_tmp84, cc_range_11180_111b6_4, sequence_f0_91_86_adv;
		BitBlock r10000_10ffff_tmp85, byte_88, sequence_f0_91_88, r10000_10ffff_tmp86;
		BitBlock r10000_10ffff_tmp87, r10000_10ffff_tmp88, r10000_10ffff_tmp89;
		BitBlock r10000_10ffff_tmp90, r10000_10ffff_tmp91, r10000_10ffff_tmp92;
		BitBlock cc_range_1122f_11236_4, sequence_f0_91_88_adv, r10000_10ffff_tmp93;
		BitBlock sequence_f0_91_8b, r10000_10ffff_tmp94, r10000_10ffff_tmp95;
		BitBlock r10000_10ffff_tmp96, cc_range_112df_112e3_4, sequence_f0_91_8b_adv;
		BitBlock r10000_10ffff_tmp97, r10000_10ffff_tmp98, byte_8c, sequence_f0_91_8c;
		BitBlock r10000_10ffff_tmp99, r10000_10ffff_tmp100, r10000_10ffff_tmp101;
		BitBlock r10000_10ffff_tmp102, cc_range_11301_1133e_4, sequence_f0_91_8c_adv;
		BitBlock r10000_10ffff_tmp103, sequence_f0_91_8d, r10000_10ffff_tmp104;
		BitBlock r10000_10ffff_tmp105, r10000_10ffff_tmp106, r10000_10ffff_tmp107;
		BitBlock r10000_10ffff_tmp108, r10000_10ffff_tmp109, r10000_10ffff_tmp110;
		BitBlock cc_range_11340_11370_4, sequence_f0_91_8d_adv, r10000_10ffff_tmp111;
		BitBlock byte_92, sequence_f0_91_92, r10000_10ffff_tmp112;
		BitBlock r10000_10ffff_tmp113, r10000_10ffff_tmp114, r10000_10ffff_tmp115;
		BitBlock r10000_10ffff_tmp116, r10000_10ffff_tmp117, r10000_10ffff_tmp118;
		BitBlock r10000_10ffff_tmp119, cc_range_114b0_114bf_4, sequence_f0_91_92_adv;
		BitBlock r10000_10ffff_tmp120, byte_93, sequence_f0_91_93;
		BitBlock r10000_10ffff_tmp121, r10000_10ffff_tmp122, cc_range_114c0_114c2_4;
		BitBlock sequence_f0_91_93_adv, r10000_10ffff_tmp123, byte_96;
		BitBlock sequence_f0_91_96, r10000_10ffff_tmp124, r10000_10ffff_tmp125;
		BitBlock r10000_10ffff_tmp126, r10000_10ffff_tmp127, r10000_10ffff_tmp128;
		BitBlock r10000_10ffff_tmp129, r10000_10ffff_tmp130, cc_range_115af_115bf_4;
		BitBlock sequence_f0_91_96_adv, r10000_10ffff_tmp131, byte_97;
		BitBlock sequence_f0_91_97, sequence_f0_91_97_adv, r10000_10ffff_tmp132;
		BitBlock byte_98, sequence_f0_91_98, r10000_10ffff_tmp133;
		BitBlock r10000_10ffff_tmp134, cc_range_11633_1163f_4, sequence_f0_91_98_adv;
		BitBlock r10000_10ffff_tmp135, r10000_10ffff_tmp136, sequence_f0_91_99;
		BitBlock sequence_f0_91_99_adv, r10000_10ffff_tmp137, sequence_f0_91_9a;
		BitBlock r10000_10ffff_tmp138, r10000_10ffff_tmp139, r10000_10ffff_tmp140;
		BitBlock r10000_10ffff_tmp141, r10000_10ffff_tmp142, cc_range_116ab_116b7_4;
		BitBlock sequence_f0_91_9a_adv, r10000_10ffff_tmp143, sequence_f0_96;
		BitBlock r10000_10ffff_tmp144, sequence_f0_96_ab, sequence_f0_96_adv;
		BitBlock byte_range_b0_b4, sequence_f0_96_ab_adv, r10000_10ffff_tmp145;
		BitBlock sequence_f0_96_ac, byte_range_b0_b6, sequence_f0_96_ac_adv;
		BitBlock r10000_10ffff_tmp146, sequence_f0_96_be, r10000_10ffff_tmp147;
		BitBlock r10000_10ffff_tmp148, r10000_10ffff_tmp149, r10000_10ffff_tmp150;
		BitBlock byte_range_8f_92, sequence_f0_96_be_adv, r10000_10ffff_tmp151;
		BitBlock sequence_f0_9b, r10000_10ffff_tmp152, sequence_f0_9b_b2;
		BitBlock sequence_f0_9b_adv, r10000_10ffff_tmp153, byte_range_9d_9e;
		BitBlock sequence_f0_9b_b2_adv, r10000_10ffff_tmp154, sequence_f0_9d;
		BitBlock r10000_10ffff_tmp155, sequence_f0_9d_85, sequence_f0_9d_adv;
		BitBlock r10000_10ffff_tmp156, r10000_10ffff_tmp157, r10000_10ffff_tmp158;
		BitBlock r10000_10ffff_tmp159, r10000_10ffff_tmp160, r10000_10ffff_tmp161;
		BitBlock r10000_10ffff_tmp162, r10000_10ffff_tmp163, r10000_10ffff_tmp164;
		BitBlock r10000_10ffff_tmp165, cc_range_1d165_1d17b_4, sequence_f0_9d_85_adv;
		BitBlock r10000_10ffff_tmp166, sequence_f0_9d_86, r10000_10ffff_tmp167;
		BitBlock r10000_10ffff_tmp168, r10000_10ffff_tmp169, r10000_10ffff_tmp170;
		BitBlock r10000_10ffff_tmp171, cc_range_1d180_1d1aa_4, sequence_f0_9d_86_adv;
		BitBlock r10000_10ffff_tmp172, byte_89, sequence_f0_9d_89;
		BitBlock r10000_10ffff_tmp173, r10000_10ffff_tmp174, byte_range_82_84;
		BitBlock sequence_f0_9d_89_adv, r10000_10ffff_tmp175, sequence_f0_9e;
		BitBlock r10000_10ffff_tmp176, sequence_f0_9e_a3, sequence_f0_9e_adv;
		BitBlock r10000_10ffff_tmp177, byte_range_90_96, sequence_f0_9e_a3_adv;
		BitBlock r10000_10ffff_tmp178, byte_f3, r10000_10ffff_tmp179, sequence_f3_a0;
		BitBlock byte_f3_adv, byte_range_84_86, r10000_10ffff_tmp180;
		BitBlock sequence_f3_a0_byte_range_84_86, r10000_10ffff_tmp181;
		BitBlock sequence_f3_a0_byte_range_84_86_sfx, r10000_10ffff_tmp182;
		BitBlock r10000_10ffff_tmp183, sequence_f3_a0_adv, sequence_f3_a0_87;
		BitBlock r10000_10ffff_tmp184, sequence_f3_a0_87_byte_range_80_af;




        struct_gr_ext_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 135))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 12))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(0, 2))) {
              r100_3ff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r100_3ff_tmp3 = simd_andc(r100_3ff_tmp1, r100_3ff_tmp2);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              r100_3ff_tmp4 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp1, r100_3ff_tmp4);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp5);
              r100_3ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r100_3ff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_af = simd_andc(r100_3ff_tmp6, r100_3ff_tmp7);
              carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(0), r100_3ff_tmp8));
              r100_3ff_tmp9 = simd_and(r100_3ff_tmp8, byte_range_80_af);
              r100_3ff_tmp10 = simd_or(byte_cc, r100_3ff_tmp9);
              if ((bitblock::any(r100_3ff_tmp10) || carryQ.CarryTest(1, 1))) {
                byte_range_80_bf = r100_3ff_tmp6;
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_cc, carryQ.get_carry_in(1), byte_cc_adv));
                r300_36f_tmp1 = simd_and(byte_cc_adv, byte_range_80_bf);
                struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r300_36f_tmp1);
                byte_cd_adv = r100_3ff_tmp8;
                r300_36f_tmp2 = simd_and(byte_cd_adv, byte_range_80_af);
                struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r300_36f_tmp2);
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(0, 2);
            }
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp5 = simd_and(byte_range_c0_ff, r80_7ff_tmp4);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp5, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(2, 3))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp3);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(2, 1))) {
                r400_4ff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r400_4ff_tmp2 = simd_andc(r400_4ff_tmp1, r80_7ff_tmp3);
                byte_d2 = simd_and(r80_7ff_tmp5, r400_4ff_tmp2);
                r400_4ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r400_4ff_tmp4 = simd_andc(r400_4ff_tmp3, r80_7ff_tmp1);
                r400_4ff_tmp5 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                r400_4ff_tmp6 = simd_not(r400_4ff_tmp5);
                r400_4ff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r400_4ff_tmp8 = simd_or(basis_bits.bit_5, r400_4ff_tmp7);
                r400_4ff_tmp9 = simd_or(simd_and(basis_bits.bit_4, r400_4ff_tmp6), simd_andc(r400_4ff_tmp8, basis_bits.bit_4));
                byte_range_83_89 = simd_and(r400_4ff_tmp4, r400_4ff_tmp9);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(2), byte_d2_adv));
                r400_4ff_tmp10 = simd_and(byte_d2_adv, byte_range_83_89);
                struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r400_4ff_tmp10);
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 1);
              }
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp3 = simd_and(r400_5ff_tmp1, r400_5ff_tmp2);
              byte_d6 = simd_and(r80_7ff_tmp5, r400_5ff_tmp3);
              r400_5ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              byte_range_90_bf = simd_and(r400_5ff_tmp4, r80_7ff_tmp1);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(3), r400_5ff_tmp5));
              r400_5ff_tmp6 = simd_and(r400_5ff_tmp5, byte_range_90_bf);
              r400_5ff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp8 = simd_and(r400_5ff_tmp1, r400_5ff_tmp7);
              byte_d7 = simd_and(r80_7ff_tmp5, r400_5ff_tmp8);
              r400_5ff_tmp9 = simd_or(r400_5ff_tmp6, byte_d7);
              if ((bitblock::any(r400_5ff_tmp9) || carryQ.CarryTest(4, 1))) {
                r590_5ff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                r590_5ff_tmp2 = simd_and(r590_5ff_tmp1, basis_bits.bit_6);
                r590_5ff_tmp3 = simd_and(basis_bits.bit_3, r590_5ff_tmp2);
                r590_5ff_tmp4 = simd_not(r590_5ff_tmp3);
                r590_5ff_tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r590_5ff_tmp6 = simd_or(r80_7ff_tmp3, r590_5ff_tmp5);
                r590_5ff_tmp7 = simd_and(basis_bits.bit_3, r590_5ff_tmp6);
                r590_5ff_tmp8 = simd_or(simd_and(basis_bits.bit_2, r590_5ff_tmp4), simd_andc(r590_5ff_tmp7, basis_bits.bit_2));
                r590_5ff_tmp9 = simd_and(r400_5ff_tmp4, r590_5ff_tmp8);
                r590_5ff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                r590_5ff_tmp11 = simd_and(r400_5ff_tmp4, r590_5ff_tmp10);
                r590_5ff_tmp12 = simd_and(r590_5ff_tmp1, r400_5ff_tmp7);
                r590_5ff_tmp13 = simd_and(r590_5ff_tmp11, r590_5ff_tmp12);
                cc_range_591_5bf_2 = simd_or(r590_5ff_tmp9, r590_5ff_tmp13);
                byte_d6_adv = r400_5ff_tmp5;
                r590_5ff_tmp14 = simd_and(byte_d6_adv, cc_range_591_5bf_2);
                struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r590_5ff_tmp14);
                r590_5ff_tmp15 = simd_andc(r400_5ff_tmp4, r80_7ff_tmp1);
                r590_5ff_tmp16 = simd_andc(r590_5ff_tmp15, r80_7ff_tmp3);
                r590_5ff_tmp17 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                r590_5ff_tmp18 = simd_and(r590_5ff_tmp16, r590_5ff_tmp17);
                r590_5ff_tmp19 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
                r590_5ff_tmp20 = simd_and(r590_5ff_tmp15, r590_5ff_tmp19);
                r590_5ff_tmp21 = simd_or(r590_5ff_tmp18, r590_5ff_tmp20);
                r590_5ff_tmp22 = simd_and(r590_5ff_tmp15, r400_5ff_tmp8);
                cc_range_5c1_5c7_2 = simd_or(r590_5ff_tmp21, r590_5ff_tmp22);
                carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(4), byte_d7_adv));
                r590_5ff_tmp23 = simd_and(byte_d7_adv, cc_range_5c1_5c7_2);
                struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r590_5ff_tmp23);
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 3);
            }
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(5, 3))) {
              r600_6ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp6, r600_6ff_tmp1);
              byte_d8 = simd_and(r80_7ff_tmp5, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              r600_6ff_tmp4 = simd_and(r600_6ff_tmp3, r80_7ff_tmp4);
              r600_6ff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp6 = simd_or(basis_bits.bit_5, r600_6ff_tmp5);
              r600_6ff_tmp7 = simd_and(basis_bits.bit_4, r600_6ff_tmp6);
              byte_range_90_9a = simd_andc(r600_6ff_tmp4, r600_6ff_tmp7);
              carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(5), byte_d8_adv));
              r600_6ff_tmp8 = simd_and(byte_d8_adv, byte_range_90_9a);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r600_6ff_tmp8);
              r600_6ff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r600_6ff_tmp10 = simd_and(r80_7ff_tmp6, r600_6ff_tmp9);
              byte_d9 = simd_and(r80_7ff_tmp5, r600_6ff_tmp10);
              r600_6ff_tmp11 = simd_andc(r600_6ff_tmp3, basis_bits.bit_2);
              r600_6ff_tmp12 = simd_or(basis_bits.bit_3, r600_6ff_tmp7);
              r600_6ff_tmp13 = simd_and(r600_6ff_tmp11, r600_6ff_tmp12);
              r600_6ff_tmp14 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              r600_6ff_tmp15 = simd_and(r600_6ff_tmp3, r600_6ff_tmp14);
              r600_6ff_tmp16 = simd_or(r80_7ff_tmp3, r600_6ff_tmp1);
              r600_6ff_tmp17 = simd_andc(r600_6ff_tmp15, r600_6ff_tmp16);
              cc_range_64b_670_2 = simd_or(r600_6ff_tmp13, r600_6ff_tmp17);
              carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(6), byte_d9_adv));
              r600_6ff_tmp18 = simd_and(byte_d9_adv, cc_range_64b_670_2);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r600_6ff_tmp18);
              r600_6ff_tmp19 = simd_and(r80_7ff_tmp6, r600_6ff_tmp5);
              byte_db = simd_and(r80_7ff_tmp5, r600_6ff_tmp19);
              r600_6ff_tmp20 = simd_and(basis_bits.bit_5, r600_6ff_tmp1);
              r600_6ff_tmp21 = simd_not(r600_6ff_tmp20);
              r600_6ff_tmp22 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              r600_6ff_tmp23 = simd_or(simd_and(basis_bits.bit_4, r600_6ff_tmp21), simd_andc(r600_6ff_tmp22, basis_bits.bit_4));
              r600_6ff_tmp24 = simd_and(r600_6ff_tmp4, r600_6ff_tmp23);
              r600_6ff_tmp25 = simd_or(basis_bits.bit_4, r600_6ff_tmp20);
              r600_6ff_tmp26 = simd_or(basis_bits.bit_3, r600_6ff_tmp25);
              r600_6ff_tmp27 = simd_not(r600_6ff_tmp26);
              r600_6ff_tmp28 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r600_6ff_tmp29 = simd_and(r600_6ff_tmp28, r600_6ff_tmp5);
              r600_6ff_tmp30 = simd_and(basis_bits.bit_3, r600_6ff_tmp29);
              r600_6ff_tmp31 = simd_or(simd_and(basis_bits.bit_2, r600_6ff_tmp27), simd_andc(r600_6ff_tmp30, basis_bits.bit_2));
              r600_6ff_tmp32 = simd_and(r600_6ff_tmp3, r600_6ff_tmp31);
              r600_6ff_tmp33 = simd_or(r600_6ff_tmp24, r600_6ff_tmp32);
              r600_6ff_tmp34 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
              r600_6ff_tmp35 = simd_and(r600_6ff_tmp3, r600_6ff_tmp34);
              r600_6ff_tmp36 = simd_or(basis_bits.bit_5, r600_6ff_tmp1);
              r600_6ff_tmp37 = simd_not(r600_6ff_tmp36);
              r600_6ff_tmp38 = simd_and(basis_bits.bit_5, r600_6ff_tmp5);
              r600_6ff_tmp39 = simd_or(simd_and(basis_bits.bit_4, r600_6ff_tmp37), simd_andc(r600_6ff_tmp38, basis_bits.bit_4));
              r600_6ff_tmp40 = simd_and(r600_6ff_tmp35, r600_6ff_tmp39);
              r600_6ff_tmp41 = simd_or(r600_6ff_tmp33, r600_6ff_tmp40);
              r600_6ff_tmp42 = simd_and(r600_6ff_tmp35, basis_bits.bit_4);
              r600_6ff_tmp43 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
              r600_6ff_tmp44 = simd_and(r600_6ff_tmp42, r600_6ff_tmp43);
              cc_range_6d6_6ea_2 = simd_or(r600_6ff_tmp41, r600_6ff_tmp44);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(7), byte_db_adv));
              r600_6ff_tmp45 = simd_and(byte_db_adv, cc_range_6d6_6ea_2);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r600_6ff_tmp45);
            }
            else {
              carryQ.CarryDequeueEnqueue(5, 3);
            }
            r80_7ff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp8 = simd_andc(r80_7ff_tmp7, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp5, r80_7ff_tmp8);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(8, 2))) {
              r700_77f_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r700_77f_tmp2 = simd_andc(r80_7ff_tmp7, r700_77f_tmp1);
              byte_dc = simd_and(r80_7ff_tmp5, r700_77f_tmp2);
              r700_77f_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r700_77f_tmp4 = simd_and(r80_7ff_tmp7, r700_77f_tmp3);
              byte_dd = simd_and(r80_7ff_tmp5, r700_77f_tmp4);
              r700_77f_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
              byte_range_80_8f = simd_andc(r700_77f_tmp5, r80_7ff_tmp1);
              carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(8), r700_77f_tmp6));
              r700_77f_tmp7 = simd_and(r700_77f_tmp6, byte_range_80_8f);
              r700_77f_tmp8 = simd_or(byte_dc, r700_77f_tmp7);
              if ((bitblock::any(r700_77f_tmp8) || carryQ.CarryTest(9, 1))) {
                r700_74f_tmp1 = simd_and(r700_77f_tmp5, r80_7ff_tmp4);
                r700_74f_tmp2 = simd_andc(r700_77f_tmp3, r80_7ff_tmp3);
                r700_74f_tmp3 = simd_and(r700_74f_tmp1, r700_74f_tmp2);
                r700_74f_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                r700_74f_tmp5 = simd_and(r700_77f_tmp5, r700_74f_tmp4);
                cc_range_711_730_2 = simd_or(r700_74f_tmp3, r700_74f_tmp5);
                carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(9), byte_dc_adv));
                r700_74f_tmp6 = simd_and(byte_dc_adv, cc_range_711_730_2);
                struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r700_74f_tmp6);
                r700_74f_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r700_74f_tmp8 = simd_or(basis_bits.bit_5, r700_74f_tmp7);
                r700_74f_tmp9 = simd_and(basis_bits.bit_4, r700_74f_tmp8);
                byte_range_80_8a = simd_andc(byte_range_80_8f, r700_74f_tmp9);
                byte_dd_adv = r700_77f_tmp6;
                r700_74f_tmp10 = simd_and(byte_dd_adv, byte_range_80_8a);
                struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r700_74f_tmp10);
              }
              else {
                carryQ.CarryDequeueEnqueue(9, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(8, 2);
            }
            r80_7ff_tmp9 = simd_and(r80_7ff_tmp7, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp5, r80_7ff_tmp9);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(10, 2))) {
              r780_7ff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r780_7ff_tmp2 = simd_and(r80_7ff_tmp7, r780_7ff_tmp1);
              byte_de = simd_and(r80_7ff_tmp5, r780_7ff_tmp2);
              if ((bitblock::any(byte_de) || carryQ.CarryTest(10, 1))) {
                r780_7bf_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r780_7bf_tmp2 = simd_and(r780_7bf_tmp1, basis_bits.bit_2);
                r780_7bf_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
                r780_7bf_tmp4 = simd_or(r80_7ff_tmp3, r780_7bf_tmp3);
                r780_7bf_tmp5 = simd_not(r780_7bf_tmp4);
                r780_7bf_tmp6 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r780_7bf_tmp7 = simd_or(basis_bits.bit_4, r780_7bf_tmp6);
                r780_7bf_tmp8 = simd_or(simd_and(basis_bits.bit_3, r780_7bf_tmp5), simd_andc(r780_7bf_tmp7, basis_bits.bit_3));
                byte_range_a6_b0 = simd_and(r780_7bf_tmp2, r780_7bf_tmp8);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(10), byte_de_adv));
                r780_7bf_tmp9 = simd_and(byte_de_adv, byte_range_a6_b0);
                struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r780_7bf_tmp9);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 1);
              }
              r780_7ff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              r780_7ff_tmp4 = simd_and(r80_7ff_tmp7, r780_7ff_tmp3);
              byte_df = simd_and(r80_7ff_tmp5, r780_7ff_tmp4);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(11, 1))) {
                r7c0_7ff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r7c0_7ff_tmp2 = simd_and(r7c0_7ff_tmp1, basis_bits.bit_2);
                r7c0_7ff_tmp3 = simd_not(r80_7ff_tmp3);
                r7c0_7ff_tmp4 = simd_or(basis_bits.bit_5, r780_7ff_tmp3);
                r7c0_7ff_tmp5 = simd_and(basis_bits.bit_4, r7c0_7ff_tmp4);
                r7c0_7ff_tmp6 = simd_or(simd_and(basis_bits.bit_3, r7c0_7ff_tmp3), simd_andc(r7c0_7ff_tmp5, basis_bits.bit_3));
                byte_range_ab_b3 = simd_and(r7c0_7ff_tmp2, r7c0_7ff_tmp6);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(11), byte_df_adv));
                r7c0_7ff_tmp7 = simd_and(byte_df_adv, byte_range_ab_b3);
                struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r7c0_7ff_tmp7);
              }
              else {
                carryQ.CarryDequeueEnqueue(11, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(10, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 12);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(12, 82))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(12), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(13, 62))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(13, 53))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(13, 31))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r800_fff_tmp1, r800_1fff_tmp1);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(13), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp4 = simd_and(r800_ffff_tmp5, r800_fff_tmp3);
                  r800_fff_tmp5 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp6 = simd_not(r800_fff_tmp5);
                  r800_fff_tmp7 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp8 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp6), simd_andc(r800_fff_tmp7, basis_bits.bit_4));
                  r800_fff_tmp9 = simd_and(r800_fff_tmp4, r800_fff_tmp8);
                  r800_fff_tmp10 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
                  r800_fff_tmp11 = simd_not(r800_fff_tmp10);
                  r800_fff_tmp12 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp13 = simd_or(basis_bits.bit_5, r800_fff_tmp12);
                  r800_fff_tmp14 = simd_and(basis_bits.bit_4, r800_fff_tmp13);
                  r800_fff_tmp15 = simd_and(basis_bits.bit_3, r800_fff_tmp14);
                  r800_fff_tmp16 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp11), simd_andc(r800_fff_tmp15, basis_bits.bit_2));
                  r800_fff_tmp17 = simd_and(r800_ffff_tmp5, r800_fff_tmp16);
                  r800_fff_tmp18 = simd_or(r800_fff_tmp9, r800_fff_tmp17);
                  r800_fff_tmp19 = simd_and(r800_fff_tmp1, r800_ffff_tmp2);
                  r800_fff_tmp20 = simd_and(r800_fff_tmp19, r800_ffff_tmp3);
                  r800_fff_tmp21 = simd_or(r800_fff_tmp18, r800_fff_tmp20);
                  r800_fff_tmp22 = simd_and(r800_fff_tmp1, basis_bits.bit_4);
                  r800_fff_tmp23 = simd_not(basis_bits.bit_6);
                  r800_fff_tmp24 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp23), simd_andc(r800_ffff_tmp3, basis_bits.bit_5));
                  r800_fff_tmp25 = simd_and(r800_fff_tmp22, r800_fff_tmp24);
                  cc_range_816_829_3 = simd_or(r800_fff_tmp21, r800_fff_tmp25);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(14), sequence_e0_a0_adv));
                  r800_fff_tmp26 = simd_and(sequence_e0_a0_adv, cc_range_816_829_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp26);
                  r800_fff_tmp27 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp28 = simd_andc(r800_fff_tmp27, r800_ffff_tmp1);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp28);
                  sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
                  r800_fff_tmp29 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp30 = simd_and(r800_fff_tmp4, r800_fff_tmp29);
                  byte_range_99_9b = simd_and(r800_fff_tmp30, r800_ffff_tmp3);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(15), sequence_e0_a1_adv));
                  r800_fff_tmp31 = simd_and(sequence_e0_a1_adv, byte_range_99_9b);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp31);
                  r800_fff_tmp32 = simd_andc(r800_fff_tmp12, r800_ffff_tmp1);
                  byte_a3 = simd_and(r800_fff_tmp1, r800_fff_tmp32);
                  sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
                  r800_fff_tmp33 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  byte_range_a4_bf = simd_and(r800_fff_tmp33, r800_fff_tmp10);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e0_a3, carryQ.get_carry_in(16), sequence_e0_a3_adv));
                  r800_fff_tmp34 = simd_and(sequence_e0_a3_adv, byte_range_a4_bf);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp34);
                  byte_a4 = simd_and(r800_fff_tmp1, r800_ffff_tmp4);
                  sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
                  r800_fff_tmp35 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp36 = simd_andc(r800_ffff_tmp5, r800_fff_tmp35);
                  r800_fff_tmp37 = simd_andc(r800_fff_tmp36, r800_ffff_tmp1);
                  r800_fff_tmp38 = simd_andc(r800_fff_tmp37, r800_fff_tmp12);
                  r800_fff_tmp39 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp40 = simd_and(r800_ffff_tmp5, r800_fff_tmp39);
                  r800_fff_tmp41 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp42 = simd_and(r800_fff_tmp29, r800_fff_tmp41);
                  r800_fff_tmp43 = simd_and(r800_fff_tmp40, r800_fff_tmp42);
                  r800_fff_tmp44 = simd_or(r800_fff_tmp38, r800_fff_tmp43);
                  r800_fff_tmp45 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp46 = simd_andc(r800_fff_tmp45, r800_ffff_tmp3);
                  r800_fff_tmp47 = simd_and(r800_fff_tmp40, r800_fff_tmp46);
                  cc_range_900_93c_3 = simd_or(r800_fff_tmp44, r800_fff_tmp47);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(17), sequence_e0_a4_adv));
                  r800_fff_tmp48 = simd_and(sequence_e0_a4_adv, cc_range_900_93c_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp48);
                  r800_fff_tmp49 = simd_and(r800_ffff_tmp2, r800_fff_tmp27);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp49);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  r800_fff_tmp50 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp51 = simd_xor(basis_bits.bit_4, r800_fff_tmp50);
                  r800_fff_tmp52 = simd_and(r800_fff_tmp45, r800_fff_tmp27);
                  r800_fff_tmp53 = simd_or(r800_fff_tmp51, r800_fff_tmp52);
                  r800_fff_tmp54 = simd_and(r800_fff_tmp36, r800_fff_tmp53);
                  r800_fff_tmp55 = simd_andc(r800_fff_tmp4, basis_bits.bit_4);
                  r800_fff_tmp56 = simd_and(r800_fff_tmp55, r800_fff_tmp50);
                  r800_fff_tmp57 = simd_or(r800_fff_tmp54, r800_fff_tmp56);
                  r800_fff_tmp58 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  r800_fff_tmp59 = simd_and(r800_fff_tmp1, r800_fff_tmp58);
                  cc_range_941_962_3 = simd_or(r800_fff_tmp57, r800_fff_tmp59);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(18), sequence_e0_a5_adv));
                  r800_fff_tmp60 = simd_and(sequence_e0_a5_adv, cc_range_941_962_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp60);
                  r800_fff_tmp61 = simd_and(r800_ffff_tmp2, r800_fff_tmp41);
                  byte_a6 = simd_and(r800_fff_tmp1, r800_fff_tmp61);
                  sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
                  r800_fff_tmp62 = simd_and(r800_fff_tmp36, r800_fff_tmp28);
                  r800_fff_tmp63 = simd_or(r800_fff_tmp62, r800_fff_tmp47);
                  r800_fff_tmp64 = simd_and(r800_fff_tmp45, r800_fff_tmp41);
                  r800_fff_tmp65 = simd_and(r800_fff_tmp40, r800_fff_tmp64);
                  cc_range_981_9be_3 = simd_or(r800_fff_tmp63, r800_fff_tmp65);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(19), sequence_e0_a6_adv));
                  r800_fff_tmp66 = simd_and(sequence_e0_a6_adv, cc_range_981_9be_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp66);
                  r800_fff_tmp67 = simd_and(r800_ffff_tmp2, r800_fff_tmp12);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp67);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  r800_fff_tmp68 = simd_andc(r800_fff_tmp36, basis_bits.bit_4);
                  r800_fff_tmp69 = simd_xor(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp70 = simd_and(r800_fff_tmp68, r800_fff_tmp69);
                  r800_fff_tmp71 = simd_and(r800_fff_tmp36, r800_fff_tmp52);
                  r800_fff_tmp72 = simd_or(r800_fff_tmp70, r800_fff_tmp71);
                  r800_fff_tmp73 = simd_and(r800_fff_tmp4, r800_fff_tmp67);
                  r800_fff_tmp74 = simd_or(r800_fff_tmp72, r800_fff_tmp73);
                  cc_range_9c1_9e2_3 = simd_or(r800_fff_tmp74, r800_fff_tmp59);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(20), sequence_e0_a7_adv));
                  r800_fff_tmp75 = simd_and(sequence_e0_a7_adv, cc_range_9c1_9e2_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp75);
                  r800_fff_tmp76 = simd_andc(r800_fff_tmp29, r800_ffff_tmp3);
                  byte_a8 = simd_and(r800_fff_tmp1, r800_fff_tmp76);
                  sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
                  r800_fff_tmp77 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp78 = simd_and(r800_fff_tmp37, r800_fff_tmp77);
                  cc_range_a01_a3c_3 = simd_or(r800_fff_tmp78, r800_fff_tmp47);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(21), sequence_e0_a8_adv));
                  r800_fff_tmp79 = simd_and(sequence_e0_a8_adv, cc_range_a01_a3c_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp79);
                  r800_fff_tmp80 = simd_and(r800_fff_tmp29, r800_fff_tmp27);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp80);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  r800_fff_tmp81 = simd_not(r800_fff_tmp50);
                  r800_fff_tmp82 = simd_and(basis_bits.bit_5, r800_fff_tmp12);
                  r800_fff_tmp83 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp81), simd_andc(r800_fff_tmp82, basis_bits.bit_4));
                  r800_fff_tmp84 = simd_and(r800_fff_tmp36, r800_fff_tmp83);
                  r800_fff_tmp85 = simd_or(r800_fff_tmp78, r800_fff_tmp84);
                  r800_fff_tmp86 = simd_and(r800_fff_tmp36, basis_bits.bit_4);
                  r800_fff_tmp87 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp23), simd_andc(r800_fff_tmp12, basis_bits.bit_5));
                  r800_fff_tmp88 = simd_and(r800_fff_tmp86, r800_fff_tmp87);
                  r800_fff_tmp89 = simd_or(r800_fff_tmp85, r800_fff_tmp88);
                  r800_fff_tmp90 = simd_and(r800_fff_tmp4, r800_fff_tmp28);
                  r800_fff_tmp91 = simd_or(r800_fff_tmp89, r800_fff_tmp90);
                  r800_fff_tmp92 = simd_andc(r800_fff_tmp40, r800_4dff_tmp1);
                  r800_fff_tmp93 = simd_or(r800_fff_tmp91, r800_fff_tmp92);
                  r800_fff_tmp94 = simd_and(r800_fff_tmp40, r800_fff_tmp49);
                  cc_range_a41_a75_3 = simd_or(r800_fff_tmp93, r800_fff_tmp94);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(22), sequence_e0_a9_adv));
                  r800_fff_tmp95 = simd_and(sequence_e0_a9_adv, cc_range_a41_a75_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp95);
                  byte_aa = simd_and(r800_fff_tmp1, r800_fff_tmp42);
                  sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
                  cc_range_a81_abc_3 = cc_range_a01_a3c_3;
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(23), sequence_e0_aa_adv));
                  r800_fff_tmp96 = simd_and(sequence_e0_aa_adv, cc_range_a81_abc_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp96);
                  r800_fff_tmp97 = simd_and(r800_fff_tmp29, r800_fff_tmp12);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp97);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  r800_fff_tmp98 = simd_and(r800_fff_tmp68, r800_fff_tmp24);
                  r800_fff_tmp99 = simd_or(r800_fff_tmp98, r800_fff_tmp84);
                  r800_fff_tmp100 = simd_or(r800_fff_tmp99, r800_fff_tmp71);
                  cc_range_ac1_ae2_3 = simd_or(r800_fff_tmp100, r800_fff_tmp59);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(24), sequence_e0_ab_adv));
                  r800_fff_tmp101 = simd_and(sequence_e0_ab_adv, cc_range_ac1_ae2_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp101);
                  byte_ac = simd_and(r800_fff_tmp1, r800_fff_tmp46);
                  sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
                  r800_fff_tmp102 = simd_and(r800_fff_tmp45, basis_bits.bit_6);
                  r800_fff_tmp103 = simd_and(r800_fff_tmp40, r800_fff_tmp102);
                  cc_range_b01_b3e_3 = simd_or(r800_fff_tmp63, r800_fff_tmp103);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(25), sequence_e0_ac_adv));
                  r800_fff_tmp104 = simd_and(sequence_e0_ac_adv, cc_range_b01_b3e_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp104);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp52);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  r800_fff_tmp105 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  r800_fff_tmp106 = simd_and(r800_fff_tmp4, r800_fff_tmp105);
                  r800_fff_tmp107 = simd_or(r800_fff_tmp72, r800_fff_tmp106);
                  cc_range_b41_b62_3 = simd_or(r800_fff_tmp107, r800_fff_tmp59);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(26), sequence_e0_ad_adv));
                  r800_fff_tmp108 = simd_and(sequence_e0_ad_adv, cc_range_b41_b62_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp108);
                  byte_ae = simd_and(r800_fff_tmp1, r800_fff_tmp64);
                  sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
                  r800_fff_tmp109 = simd_andc(r800_fff_tmp41, r800_ffff_tmp1);
                  r800_fff_tmp110 = simd_and(r800_fff_tmp36, r800_fff_tmp109);
                  cc_range_b82_bbe_3 = simd_or(r800_fff_tmp110, r800_fff_tmp65);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(27), sequence_e0_ae_adv));
                  r800_fff_tmp111 = simd_and(sequence_e0_ae_adv, cc_range_b82_bbe_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp111);
                  r800_fff_tmp112 = simd_and(r800_fff_tmp45, r800_fff_tmp12);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp112);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  r800_fff_tmp113 = simd_andc(r800_1fff_tmp1, r800_fff_tmp52);
                  r800_fff_tmp114 = simd_andc(r800_fff_tmp36, r800_fff_tmp113);
                  cc_range_bc0_bd7_3 = simd_or(r800_fff_tmp114, r800_fff_tmp73);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(28), sequence_e0_af_adv));
                  r800_fff_tmp115 = simd_and(sequence_e0_af_adv, cc_range_bc0_bd7_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp115);
                  byte_b0 = simd_andc(r800_fff_tmp40, r800_1fff_tmp1);
                  sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
                  r800_fff_tmp116 = simd_andc(r800_fff_tmp36, r800_1fff_tmp1);
                  cc_range_c00_c3e_3 = simd_or(r800_fff_tmp116, r800_fff_tmp103);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(29), sequence_e0_b0_adv));
                  r800_fff_tmp117 = simd_and(sequence_e0_b0_adv, cc_range_c00_c3e_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp117);
                  byte_b1 = simd_and(r800_fff_tmp40, r800_fff_tmp28);
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  r800_fff_tmp118 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp81), simd_andc(r800_fff_tmp7, basis_bits.bit_4));
                  r800_fff_tmp119 = simd_andc(r800_1fff_tmp1, r800_fff_tmp118);
                  r800_fff_tmp120 = simd_andc(r800_fff_tmp36, r800_fff_tmp119);
                  r800_fff_tmp121 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp122 = simd_and(r800_fff_tmp86, r800_fff_tmp121);
                  r800_fff_tmp123 = simd_or(r800_fff_tmp120, r800_fff_tmp122);
                  r800_fff_tmp124 = simd_and(r800_fff_tmp4, r800_ffff_tmp2);
                  r800_fff_tmp125 = simd_and(r800_fff_tmp124, r800_fff_tmp77);
                  r800_fff_tmp126 = simd_or(r800_fff_tmp123, r800_fff_tmp125);
                  cc_range_c40_c62_3 = simd_or(r800_fff_tmp126, r800_fff_tmp59);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(30), sequence_e0_b1_adv));
                  r800_fff_tmp127 = simd_and(sequence_e0_b1_adv, cc_range_c40_c62_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp127);
                  byte_b2 = simd_and(r800_fff_tmp40, r800_fff_tmp109);
                  sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
                  r800_fff_tmp128 = simd_and(r800_fff_tmp40, r800_fff_tmp112);
                  cc_range_c81_cbf_3 = simd_or(r800_fff_tmp63, r800_fff_tmp128);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(31), sequence_e0_b2_adv));
                  r800_fff_tmp129 = simd_and(sequence_e0_b2_adv, cc_range_c81_cbf_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp129);
                  byte_b3 = simd_and(r800_fff_tmp40, r800_fff_tmp32);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  r800_fff_tmp130 = simd_andc(r800_ffff_tmp1, r800_ffff_tmp2);
                  r800_fff_tmp131 = simd_andc(r800_fff_tmp41, r800_fff_tmp130);
                  r800_fff_tmp132 = simd_andc(r800_fff_tmp45, basis_bits.bit_6);
                  r800_fff_tmp133 = simd_or(r800_fff_tmp131, r800_fff_tmp132);
                  r800_fff_tmp134 = simd_and(r800_fff_tmp36, r800_fff_tmp133);
                  r800_fff_tmp135 = simd_or(r800_fff_tmp134, r800_fff_tmp125);
                  cc_range_cc2_ce2_3 = simd_or(r800_fff_tmp135, r800_fff_tmp59);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(32), sequence_e0_b3_adv));
                  r800_fff_tmp136 = simd_and(sequence_e0_b3_adv, cc_range_cc2_ce2_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp136);
                  byte_b4 = simd_and(r800_fff_tmp40, r800_ffff_tmp4);
                  sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
                  cc_range_d01_d3e_3 = simd_or(r800_fff_tmp62, r800_fff_tmp65);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(33), sequence_e0_b4_adv));
                  r800_fff_tmp137 = simd_and(sequence_e0_b4_adv, cc_range_d01_d3e_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp137);
                  byte_b5 = r800_fff_tmp94;
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  cc_range_d41_d62_3 = cc_range_9c1_9e2_3;
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(34), sequence_e0_b5_adv));
                  r800_fff_tmp138 = simd_and(sequence_e0_b5_adv, cc_range_d41_d62_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp138);
                  byte_b7 = simd_and(r800_fff_tmp40, r800_fff_tmp67);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  r800_fff_tmp139 = simd_or(r800_fff_tmp42, r800_fff_tmp112);
                  r800_fff_tmp140 = simd_and(r800_fff_tmp36, r800_fff_tmp139);
                  r800_fff_tmp141 = simd_not(r800_ffff_tmp3);
                  r800_fff_tmp142 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp141), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r800_fff_tmp143 = simd_and(r800_fff_tmp55, r800_fff_tmp142);
                  r800_fff_tmp144 = simd_or(r800_fff_tmp140, r800_fff_tmp143);
                  r800_fff_tmp145 = simd_and(r800_fff_tmp4, r800_fff_tmp61);
                  r800_fff_tmp146 = simd_or(r800_fff_tmp144, r800_fff_tmp145);
                  r800_fff_tmp147 = simd_and(r800_fff_tmp4, r800_fff_tmp112);
                  cc_range_dca_ddf_3 = simd_or(r800_fff_tmp146, r800_fff_tmp147);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(35), sequence_e0_b7_adv));
                  r800_fff_tmp148 = simd_and(sequence_e0_b7_adv, cc_range_dca_ddf_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp148);
                  byte_b8 = simd_and(r800_fff_tmp40, r800_fff_tmp76);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  r800_fff_tmp149 = simd_not(r800_fff_tmp13);
                  r800_fff_tmp150 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp149), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  r800_fff_tmp151 = simd_or(r800_fff_tmp28, r800_fff_tmp150);
                  cc_range_e31_e34_3 = simd_and(r800_fff_tmp40, r800_fff_tmp151);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(36), sequence_e0_b8_adv));
                  r800_fff_tmp152 = simd_and(sequence_e0_b8_adv, cc_range_e31_e34_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp152);
                  byte_b9 = simd_and(r800_fff_tmp40, r800_fff_tmp80);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  r800_fff_tmp153 = simd_xor(basis_bits.bit_4, r800_fff_tmp82);
                  byte_range_87_8e = simd_and(r800_fff_tmp36, r800_fff_tmp153);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(37), sequence_e0_b9_adv));
                  r800_fff_tmp154 = simd_and(sequence_e0_b9_adv, byte_range_87_8e);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp154);
                  byte_ba = r800_fff_tmp43;
                  sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
                  r800_fff_tmp155 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp6), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  r800_fff_tmp156 = simd_or(r800_fff_tmp28, r800_fff_tmp155);
                  r800_fff_tmp157 = simd_and(r800_fff_tmp40, r800_fff_tmp156);
                  r800_fff_tmp158 = simd_and(r800_fff_tmp40, basis_bits.bit_4);
                  r800_fff_tmp159 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp141), simd_andc(r800_fff_tmp12, basis_bits.bit_5));
                  r800_fff_tmp160 = simd_and(r800_fff_tmp158, r800_fff_tmp159);
                  cc_range_eb1_ebb_3 = simd_or(r800_fff_tmp157, r800_fff_tmp160);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(38), sequence_e0_ba_adv));
                  r800_fff_tmp161 = simd_and(sequence_e0_ba_adv, cc_range_eb1_ebb_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp161);
                  byte_bb = simd_and(r800_fff_tmp40, r800_fff_tmp97);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  byte_range_88_8d = simd_andc(r800_fff_tmp86, r800_fff_tmp7);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(39), sequence_e0_bb_adv));
                  r800_fff_tmp162 = simd_and(sequence_e0_bb_adv, byte_range_88_8d);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp162);
                  byte_bc = r800_fff_tmp47;
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  r800_fff_tmp163 = simd_andc(r800_fff_tmp29, basis_bits.bit_6);
                  r800_fff_tmp164 = simd_and(r800_fff_tmp4, r800_fff_tmp163);
                  r800_fff_tmp165 = simd_or(r800_fff_tmp164, byte_b5);
                  r800_fff_tmp166 = simd_or(r800_fff_tmp165, byte_b7);
                  cc_range_f18_f39_3 = simd_or(r800_fff_tmp166, byte_b9);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(40), sequence_e0_bc_adv));
                  r800_fff_tmp167 = simd_and(sequence_e0_bc_adv, cc_range_f18_f39_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp167);
                  byte_bd = simd_and(r800_fff_tmp40, r800_fff_tmp52);
                  sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
                  r800_fff_tmp168 = simd_not(r800_fff_tmp82);
                  r800_fff_tmp169 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp168), simd_andc(r800_fff_tmp50, basis_bits.bit_4));
                  byte_range_b1_be = simd_and(r800_fff_tmp40, r800_fff_tmp169);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(41), sequence_e0_bd_adv));
                  r800_fff_tmp170 = simd_and(sequence_e0_bd_adv, byte_range_b1_be);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp170);
                  byte_be = r800_fff_tmp65;
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  r800_fff_tmp171 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp172 = simd_andc(r800_fff_tmp68, r800_fff_tmp171);
                  r800_fff_tmp173 = simd_and(r800_fff_tmp36, r800_fff_tmp105);
                  r800_fff_tmp174 = simd_or(r800_fff_tmp172, r800_fff_tmp173);
                  r800_fff_tmp175 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp176 = simd_not(basis_bits.bit_4);
                  r800_fff_tmp177 = simd_and(r800_fff_tmp45, r800_ffff_tmp3);
                  r800_fff_tmp178 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp176), simd_andc(r800_fff_tmp177, basis_bits.bit_3));
                  r800_fff_tmp179 = simd_and(r800_fff_tmp175, r800_fff_tmp178);
                  r800_fff_tmp180 = simd_or(r800_fff_tmp174, r800_fff_tmp179);
                  r800_fff_tmp181 = simd_and(basis_bits.bit_3, r800_fff_tmp177);
                  r800_fff_tmp182 = simd_not(r800_fff_tmp181);
                  r800_fff_tmp183 = simd_and(basis_bits.bit_4, r800_fff_tmp50);
                  r800_fff_tmp184 = simd_and(basis_bits.bit_3, r800_fff_tmp183);
                  r800_fff_tmp185 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp182), simd_andc(r800_fff_tmp184, basis_bits.bit_2));
                  r800_fff_tmp186 = simd_and(r800_ffff_tmp5, r800_fff_tmp185);
                  cc_range_f80_f99_3 = simd_or(r800_fff_tmp180, r800_fff_tmp186);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(42), sequence_e0_be_adv));
                  r800_fff_tmp187 = simd_and(sequence_e0_be_adv, cc_range_f80_f99_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp187);
                  byte_bf = r800_fff_tmp128;
                  sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
                  byte_86 = simd_and(r800_fff_tmp36, r800_fff_tmp61);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(43), sequence_e0_bf_adv));
                  r800_fff_tmp188 = simd_and(sequence_e0_bf_adv, byte_86);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r800_fff_tmp188);
                }
                else {
                  carryQ.CarryDequeueEnqueue(13, 31);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(44, 22))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  byte_80 = simd_andc(r1000_1fff_tmp2, r800_1fff_tmp1);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(44), r1000_1fff_tmp3));
                  sequence_e1_80 = simd_and(r1000_1fff_tmp3, byte_80);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp5 = simd_not(r800_1fff_tmp1);
                  r1000_1fff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp7 = simd_and(r1000_1fff_tmp6, r800_ffff_tmp3);
                  r1000_1fff_tmp8 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp5), simd_andc(r1000_1fff_tmp7, basis_bits.bit_3));
                  r1000_1fff_tmp9 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp8);
                  r1000_1fff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp11 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp10);
                  r1000_1fff_tmp12 = simd_andc(r1000_1fff_tmp11, basis_bits.bit_4);
                  r1000_1fff_tmp13 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp14 = simd_and(r1000_1fff_tmp12, r1000_1fff_tmp13);
                  r1000_1fff_tmp15 = simd_or(r1000_1fff_tmp9, r1000_1fff_tmp14);
                  r1000_1fff_tmp16 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp17 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp16);
                  r1000_1fff_tmp18 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp19 = simd_and(r1000_1fff_tmp17, r1000_1fff_tmp18);
                  r1000_1fff_tmp20 = simd_or(r1000_1fff_tmp15, r1000_1fff_tmp19);
                  r1000_1fff_tmp21 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp6);
                  r1000_1fff_tmp22 = simd_and(r1000_1fff_tmp21, r1000_1fff_tmp18);
                  cc_range_102d_103d_3 = simd_or(r1000_1fff_tmp20, r1000_1fff_tmp22);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(45), sequence_e1_80_adv));
                  r1000_1fff_tmp23 = simd_and(sequence_e1_80_adv, cc_range_102d_103d_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp23);
                  byte_81 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp3);
                  sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
                  r1000_1fff_tmp24 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp25 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp24);
                  r1000_1fff_tmp26 = simd_andc(r1000_1fff_tmp16, basis_bits.bit_6);
                  r1000_1fff_tmp27 = simd_and(r1000_1fff_tmp25, r1000_1fff_tmp26);
                  r1000_1fff_tmp28 = simd_or(basis_bits.bit_3, r800_1fff_tmp1);
                  r1000_1fff_tmp29 = simd_not(r1000_1fff_tmp28);
                  r1000_1fff_tmp30 = simd_and(r1000_1fff_tmp6, basis_bits.bit_6);
                  r1000_1fff_tmp31 = simd_and(basis_bits.bit_3, r1000_1fff_tmp30);
                  r1000_1fff_tmp32 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp29), simd_andc(r1000_1fff_tmp31, basis_bits.bit_2));
                  r1000_1fff_tmp33 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp32);
                  r1000_1fff_tmp34 = simd_or(r1000_1fff_tmp27, r1000_1fff_tmp33);
                  r1000_1fff_tmp35 = simd_xor(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp36 = simd_and(r1000_1fff_tmp12, r1000_1fff_tmp35);
                  cc_range_1058_1071_3 = simd_or(r1000_1fff_tmp34, r1000_1fff_tmp36);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(46), sequence_e1_81_adv));
                  r1000_1fff_tmp37 = simd_and(sequence_e1_81_adv, cc_range_1058_1071_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp37);
                  r1000_1fff_tmp38 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp39 = simd_andc(r1000_1fff_tmp38, r800_ffff_tmp1);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp39);
                  sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
                  r1000_1fff_tmp40 = simd_and(r1000_1fff_tmp2, r800_ffff_tmp2);
                  r1000_1fff_tmp41 = simd_and(r1000_1fff_tmp40, r1000_1fff_tmp18);
                  r1000_1fff_tmp42 = simd_or(byte_82, r1000_1fff_tmp41);
                  r1000_1fff_tmp43 = simd_and(r1000_1fff_tmp6, r800_1fff_tmp2);
                  r1000_1fff_tmp44 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp43);
                  r1000_1fff_tmp45 = simd_or(r1000_1fff_tmp42, r1000_1fff_tmp44);
                  r1000_1fff_tmp46 = simd_and(r1000_1fff_tmp25, r1000_1fff_tmp43);
                  cc_range_1082_109d_3 = simd_or(r1000_1fff_tmp45, r1000_1fff_tmp46);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(47), sequence_e1_82_adv));
                  r1000_1fff_tmp47 = simd_and(sequence_e1_82_adv, cc_range_1082_109d_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp47);
                  byte_8d = r1000_1fff_tmp44;
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  r1000_1fff_tmp48 = simd_and(r1000_1fff_tmp25, r1000_1fff_tmp6);
                  byte_range_9d_9f = simd_and(r1000_1fff_tmp48, r800_ffff_tmp3);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(48), sequence_e1_8d_adv));
                  r1000_1fff_tmp49 = simd_and(sequence_e1_8d_adv, byte_range_9d_9f);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp49);
                  r1000_1fff_tmp50 = simd_andc(r1000_1fff_tmp6, r800_ffff_tmp3);
                  byte_9c = simd_and(r1000_1fff_tmp25, r1000_1fff_tmp50);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  r1000_1fff_tmp51 = simd_not(r800_ffff_tmp3);
                  r1000_1fff_tmp52 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp51), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r1000_1fff_tmp53 = simd_and(r800_ffff_tmp5, basis_bits.bit_3);
                  r1000_1fff_tmp54 = simd_andc(r1000_1fff_tmp53, basis_bits.bit_4);
                  cc_range_1712_1732_3 = simd_and(r1000_1fff_tmp52, r1000_1fff_tmp54);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(49), sequence_e1_9c_adv));
                  r1000_1fff_tmp55 = simd_and(sequence_e1_9c_adv, cc_range_1712_1732_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp55);
                  byte_9d = r1000_1fff_tmp46;
                  sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
                  r1000_1fff_tmp56 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  cc_range_1752_1772_3 = simd_and(r1000_1fff_tmp56, r1000_1fff_tmp53);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(50), sequence_e1_9d_adv));
                  r1000_1fff_tmp57 = simd_and(sequence_e1_9d_adv, cc_range_1752_1772_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp57);
                  r1000_1fff_tmp58 = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp38);
                  byte_9e = simd_and(r1000_1fff_tmp25, r1000_1fff_tmp58);
                  sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
                  r1000_1fff_tmp59 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  r1000_1fff_tmp60 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp61 = simd_not(r1000_1fff_tmp60);
                  r1000_1fff_tmp62 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp63 = simd_and(basis_bits.bit_5, r1000_1fff_tmp62);
                  r1000_1fff_tmp64 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp61), simd_andc(r1000_1fff_tmp63, basis_bits.bit_4));
                  r1000_1fff_tmp65 = simd_or(r1000_1fff_tmp59, r1000_1fff_tmp64);
                  cc_range_17b4_17b7_3 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp65);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(51), sequence_e1_9e_adv));
                  r1000_1fff_tmp66 = simd_and(sequence_e1_9e_adv, cc_range_17b4_17b7_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp66);
                  r1000_1fff_tmp67 = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp62);
                  byte_9f = simd_and(r1000_1fff_tmp25, r1000_1fff_tmp67);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  r1000_1fff_tmp68 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp38);
                  r1000_1fff_tmp69 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp68);
                  r1000_1fff_tmp70 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp71 = simd_not(r800_ffff_tmp1);
                  r1000_1fff_tmp72 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp73 = simd_and(basis_bits.bit_4, r1000_1fff_tmp72);
                  r1000_1fff_tmp74 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp71), simd_andc(r1000_1fff_tmp73, basis_bits.bit_3));
                  r1000_1fff_tmp75 = simd_and(r1000_1fff_tmp70, r1000_1fff_tmp74);
                  r1000_1fff_tmp76 = simd_or(r1000_1fff_tmp69, r1000_1fff_tmp75);
                  cc_range_17c6_17dd_3 = simd_or(r1000_1fff_tmp76, byte_9d);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(52), sequence_e1_9f_adv));
                  r1000_1fff_tmp77 = simd_and(sequence_e1_9f_adv, cc_range_17c6_17dd_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp77);
                  r1000_1fff_tmp78 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r1000_1fff_tmp78, r800_1fff_tmp1);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  r1000_1fff_tmp79 = simd_and(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp80 = simd_not(basis_bits.bit_6);
                  r1000_1fff_tmp81 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp80), simd_andc(r1000_1fff_tmp62, basis_bits.bit_5));
                  byte_range_8b_8d = simd_and(r1000_1fff_tmp79, r1000_1fff_tmp81);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(53), sequence_e1_a0_adv));
                  r1000_1fff_tmp82 = simd_and(sequence_e1_a0_adv, byte_range_8b_8d);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp82);
                  byte_a2 = simd_and(r1000_1fff_tmp78, r1000_1fff_tmp39);
                  sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
                  r1000_1fff_tmp83 = simd_and(r1000_1fff_tmp16, r800_1fff_tmp2);
                  byte_a9 = simd_and(r1000_1fff_tmp78, r1000_1fff_tmp83);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(54), sequence_e1_a2_adv));
                  r1000_1fff_tmp84 = simd_and(sequence_e1_a2_adv, byte_a9);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp84);
                  byte_a4 = simd_and(r1000_1fff_tmp78, r800_ffff_tmp4);
                  sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
                  r1000_1fff_tmp85 = simd_andc(r1000_1fff_tmp78, r800_ffff_tmp1);
                  r1000_1fff_tmp86 = simd_andc(r1000_1fff_tmp85, r1000_1fff_tmp62);
                  r1000_1fff_tmp87 = simd_not(r1000_1fff_tmp72);
                  r1000_1fff_tmp88 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp87), simd_andc(r1000_1fff_tmp63, basis_bits.bit_4));
                  r1000_1fff_tmp89 = simd_and(r1000_1fff_tmp78, r1000_1fff_tmp88);
                  r1000_1fff_tmp90 = simd_or(r1000_1fff_tmp86, r1000_1fff_tmp89);
                  r1000_1fff_tmp91 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp39);
                  r1000_1fff_tmp92 = simd_or(r1000_1fff_tmp90, r1000_1fff_tmp91);
                  r1000_1fff_tmp93 = simd_and(r1000_1fff_tmp17, r800_ffff_tmp3);
                  cc_range_1920_1939_3 = simd_or(r1000_1fff_tmp92, r1000_1fff_tmp93);
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(55), sequence_e1_a4_adv));
                  r1000_1fff_tmp94 = simd_and(sequence_e1_a4_adv, cc_range_1920_1939_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp94);
                  r1000_1fff_tmp95 = simd_andc(r1000_1fff_tmp16, r800_ffff_tmp3);
                  byte_a8 = simd_and(r1000_1fff_tmp78, r1000_1fff_tmp95);
                  sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
                  r1000_1fff_tmp96 = simd_and(r1000_1fff_tmp16, r1000_1fff_tmp62);
                  r1000_1fff_tmp97 = simd_or(r1000_1fff_tmp88, r1000_1fff_tmp96);
                  cc_range_1a17_1a1b_3 = simd_and(r1000_1fff_tmp25, r1000_1fff_tmp97);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(56), sequence_e1_a8_adv));
                  r1000_1fff_tmp98 = simd_and(sequence_e1_a8_adv, cc_range_1a17_1a1b_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp98);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  r1000_1fff_tmp99 = simd_and(r1000_1fff_tmp25, r1000_1fff_tmp68);
                  r1000_1fff_tmp100 = simd_and(r1000_1fff_tmp25, basis_bits.bit_4);
                  r1000_1fff_tmp101 = simd_andc(r1000_1fff_tmp100, r1000_1fff_tmp63);
                  r1000_1fff_tmp102 = simd_or(r1000_1fff_tmp99, r1000_1fff_tmp101);
                  r1000_1fff_tmp103 = simd_or(r1000_1fff_tmp102, byte_a0);
                  r1000_1fff_tmp104 = simd_or(r1000_1fff_tmp103, byte_a2);
                  r1000_1fff_tmp105 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp106 = simd_xor(basis_bits.bit_4, r1000_1fff_tmp105);
                  r1000_1fff_tmp107 = simd_and(r1000_1fff_tmp78, r1000_1fff_tmp106);
                  r1000_1fff_tmp108 = simd_or(r1000_1fff_tmp104, r1000_1fff_tmp107);
                  r1000_1fff_tmp109 = simd_not(r1000_1fff_tmp105);
                  r1000_1fff_tmp110 = simd_or(basis_bits.bit_5, r1000_1fff_tmp62);
                  r1000_1fff_tmp111 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp109), simd_andc(r1000_1fff_tmp110, basis_bits.bit_4));
                  r1000_1fff_tmp112 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp111);
                  r1000_1fff_tmp113 = simd_or(r1000_1fff_tmp108, r1000_1fff_tmp112);
                  r1000_1fff_tmp114 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp67);
                  cc_range_1a56_1a7f_3 = simd_or(r1000_1fff_tmp113, r1000_1fff_tmp114);
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(57), sequence_e1_a9_adv));
                  r1000_1fff_tmp115 = simd_and(sequence_e1_a9_adv, cc_range_1a56_1a7f_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp115);
                  r1000_1fff_tmp116 = simd_and(r1000_1fff_tmp16, r1000_1fff_tmp38);
                  byte_aa = simd_and(r1000_1fff_tmp78, r1000_1fff_tmp116);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  r1000_1fff_tmp117 = simd_and(basis_bits.bit_4, r1000_1fff_tmp63);
                  byte_range_b0_be = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp117);
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(58), sequence_e1_aa_adv));
                  r1000_1fff_tmp118 = simd_and(sequence_e1_aa_adv, byte_range_b0_be);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp118);
                  byte_ac = simd_and(r1000_1fff_tmp78, r1000_1fff_tmp50);
                  sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
                  r1000_1fff_tmp119 = simd_andc(r1000_1fff_tmp2, r800_ffff_tmp1);
                  r1000_1fff_tmp120 = simd_and(r1000_1fff_tmp11, r800_ffff_tmp4);
                  r1000_1fff_tmp121 = simd_or(r1000_1fff_tmp119, r1000_1fff_tmp120);
                  r1000_1fff_tmp122 = simd_not(r1000_1fff_tmp110);
                  r1000_1fff_tmp123 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp122), simd_andc(r1000_1fff_tmp60, basis_bits.bit_4));
                  r1000_1fff_tmp124 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp123);
                  r1000_1fff_tmp125 = simd_or(r1000_1fff_tmp121, r1000_1fff_tmp124);
                  r1000_1fff_tmp126 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp50);
                  cc_range_1b00_1b3c_3 = simd_or(r1000_1fff_tmp125, r1000_1fff_tmp126);
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(59), sequence_e1_ac_adv));
                  r1000_1fff_tmp127 = simd_and(sequence_e1_ac_adv, cc_range_1b00_1b3c_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp127);
                  byte_ad = simd_and(r1000_1fff_tmp78, r1000_1fff_tmp43);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  r1000_1fff_tmp128 = simd_and(basis_bits.bit_4, r1000_1fff_tmp110);
                  r1000_1fff_tmp129 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp71), simd_andc(r1000_1fff_tmp128, basis_bits.bit_3));
                  r1000_1fff_tmp130 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp129);
                  cc_range_1b42_1b6b_3 = simd_or(byte_82, r1000_1fff_tmp130);
                  carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(60), sequence_e1_ad_adv));
                  r1000_1fff_tmp131 = simd_and(sequence_e1_ad_adv, cc_range_1b42_1b6b_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp131);
                  byte_ae = simd_and(r1000_1fff_tmp78, r1000_1fff_tmp58);
                  sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
                  r1000_1fff_tmp132 = simd_andc(r1000_1fff_tmp2, r800_4dff_tmp1);
                  r1000_1fff_tmp133 = simd_andc(r1000_1fff_tmp78, basis_bits.bit_4);
                  r1000_1fff_tmp134 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp135 = simd_and(r1000_1fff_tmp133, r1000_1fff_tmp134);
                  r1000_1fff_tmp136 = simd_or(r1000_1fff_tmp132, r1000_1fff_tmp135);
                  r1000_1fff_tmp137 = simd_and(r1000_1fff_tmp78, r1000_1fff_tmp26);
                  r1000_1fff_tmp138 = simd_or(r1000_1fff_tmp136, r1000_1fff_tmp137);
                  r1000_1fff_tmp139 = simd_and(r1000_1fff_tmp78, basis_bits.bit_4);
                  r1000_1fff_tmp140 = simd_and(r1000_1fff_tmp139, r1000_1fff_tmp81);
                  cc_range_1b80_1bab_3 = simd_or(r1000_1fff_tmp138, r1000_1fff_tmp140);
                  carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(61), sequence_e1_ae_adv));
                  r1000_1fff_tmp141 = simd_and(sequence_e1_ae_adv, cc_range_1b80_1bab_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp141);
                  byte_af = simd_and(r1000_1fff_tmp78, r1000_1fff_tmp67);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  r1000_1fff_tmp142 = simd_or(r1000_1fff_tmp68, r1000_1fff_tmp26);
                  r1000_1fff_tmp143 = simd_or(r1000_1fff_tmp142, r1000_1fff_tmp43);
                  r1000_1fff_tmp144 = simd_and(r1000_1fff_tmp78, r1000_1fff_tmp143);
                  r1000_1fff_tmp145 = simd_not(r800_4dff_tmp1);
                  r1000_1fff_tmp146 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp145), simd_andc(r1000_1fff_tmp67, basis_bits.bit_3));
                  r1000_1fff_tmp147 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp146);
                  cc_range_1be6_1bef_3 = simd_or(r1000_1fff_tmp144, r1000_1fff_tmp147);
                  carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(62), sequence_e1_af_adv));
                  r1000_1fff_tmp148 = simd_and(sequence_e1_af_adv, cc_range_1be6_1bef_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp148);
                  byte_b0 = simd_andc(r1000_1fff_tmp11, r800_1fff_tmp1);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  r1000_1fff_tmp149 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp71), simd_andc(r1000_1fff_tmp6, basis_bits.bit_3));
                  r1000_1fff_tmp150 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp149);
                  r1000_1fff_tmp151 = simd_and(r800_ffff_tmp2, basis_bits.bit_6);
                  r1000_1fff_tmp152 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp151);
                  cc_range_1c2c_1c36_3 = simd_or(r1000_1fff_tmp150, r1000_1fff_tmp152);
                  carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(63), sequence_e1_b0_adv));
                  r1000_1fff_tmp153 = simd_and(sequence_e1_b0_adv, cc_range_1c2c_1c36_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp153);
                  r1000_1fff_tmp154 = simd_andc(r1000_1fff_tmp62, r800_ffff_tmp1);
                  byte_b3 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp154);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  r1000_1fff_tmp155 = simd_andc(r1000_1fff_tmp25, r800_ffff_tmp1);
                  r1000_1fff_tmp156 = simd_andc(r1000_1fff_tmp155, r1000_1fff_tmp62);
                  r1000_1fff_tmp157 = simd_and(basis_bits.bit_3, r800_ffff_tmp1);
                  r1000_1fff_tmp158 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp29), simd_andc(r1000_1fff_tmp157, basis_bits.bit_2));
                  r1000_1fff_tmp159 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp158);
                  r1000_1fff_tmp160 = simd_or(r1000_1fff_tmp156, r1000_1fff_tmp159);
                  r1000_1fff_tmp161 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp87), simd_andc(r1000_1fff_tmp13, basis_bits.bit_4));
                  r1000_1fff_tmp162 = simd_and(r1000_1fff_tmp78, r1000_1fff_tmp161);
                  r1000_1fff_tmp163 = simd_or(r1000_1fff_tmp160, r1000_1fff_tmp162);
                  r1000_1fff_tmp164 = simd_or(r1000_1fff_tmp163, byte_ad);
                  r1000_1fff_tmp165 = simd_or(r1000_1fff_tmp164, r1000_1fff_tmp120);
                  r1000_1fff_tmp166 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp26);
                  cc_range_1cd0_1cf8_3 = simd_or(r1000_1fff_tmp165, r1000_1fff_tmp166);
                  carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(64), sequence_e1_b3_adv));
                  r1000_1fff_tmp167 = simd_and(sequence_e1_b3_adv, cc_range_1cd0_1cf8_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp167);
                  r1000_1fff_tmp168 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp62);
                  byte_b7 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp168);
                  sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
                  r1000_1fff_tmp169 = simd_or(basis_bits.bit_4, r1000_1fff_tmp60);
                  r1000_1fff_tmp170 = simd_and(basis_bits.bit_3, r1000_1fff_tmp169);
                  r1000_1fff_tmp171 = simd_and(basis_bits.bit_2, r1000_1fff_tmp170);
                  r1000_1fff_tmp172 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp171);
                  cc_range_1dc0_1dfc_3 = simd_or(r1000_1fff_tmp172, r1000_1fff_tmp21);
                  carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_e1_b7, carryQ.get_carry_in(65), sequence_e1_b7_adv));
                  r1000_1fff_tmp173 = simd_and(sequence_e1_b7_adv, cc_range_1dc0_1dfc_3);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r1000_1fff_tmp173);
                }
                else {
                  carryQ.CarryDequeueEnqueue(44, 22);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(13, 53);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(66, 9))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(66, 6))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[66] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(66), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp6 = simd_andc(r2000_2fff_tmp5, basis_bits.bit_6);
                  byte_range_8c_8d = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp6);
                  carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(67), sequence_e2_80_adv));
                  r2000_2fff_tmp7 = simd_and(sequence_e2_80_adv, byte_range_8c_8d);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r2000_2fff_tmp7);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp9 = simd_andc(r2000_2fff_tmp8, r800_ffff_tmp1);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp9);
                  sequence_e2_83 = simd_and(byte_e2_adv, byte_83);
                  r2000_2fff_tmp10 = simd_and(basis_bits.bit_3, r2000_2fff_tmp3);
                  r2000_2fff_tmp11 = simd_not(r2000_2fff_tmp10);
                  r2000_2fff_tmp12 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp11), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_b0 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp12);
                  carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(68), sequence_e2_83_adv));
                  r2000_2fff_tmp13 = simd_and(sequence_e2_83_adv, byte_range_90_b0);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r2000_2fff_tmp13);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp15 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp14);
                  byte_b3 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp9);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp16 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp17 = simd_not(r800_4dff_tmp1);
                  r2000_2fff_tmp18 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp8);
                  r2000_2fff_tmp19 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp17), simd_andc(r2000_2fff_tmp18, basis_bits.bit_3));
                  byte_range_af_b1 = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp19);
                  carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(69), sequence_e2_b3_adv));
                  r2000_2fff_tmp20 = simd_and(sequence_e2_b3_adv, byte_range_af_b1);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r2000_2fff_tmp20);
                  r2000_2fff_tmp21 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp22 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp21);
                  byte_b5 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp22);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  byte_bf = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp18);
                  carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(70), sequence_e2_b5_adv));
                  r2000_2fff_tmp23 = simd_and(sequence_e2_b5_adv, byte_bf);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r2000_2fff_tmp23);
                  r2000_2fff_tmp24 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp8);
                  byte_b7 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp24);
                  sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
                  byte_range_a0_bf = r2000_2fff_tmp16;
                  carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(71), sequence_e2_b7_adv));
                  r2000_2fff_tmp25 = simd_and(sequence_e2_b7_adv, byte_range_a0_bf);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r2000_2fff_tmp25);
                }
                else {
                  carryQ.CarryDequeueEnqueue(66, 6);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(72, 3))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[72] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(72), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r3000_4dff_tmp6 = simd_and(r3000_4dff_tmp5, basis_bits.bit_4);
                  r3000_4dff_tmp7 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_aa_af = simd_and(r3000_4dff_tmp6, r3000_4dff_tmp7);
                  carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(73), sequence_e3_80_adv));
                  r3000_4dff_tmp8 = simd_and(sequence_e3_80_adv, byte_range_aa_af);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r3000_4dff_tmp8);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp10 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp9);
                  r3000_4dff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp12 = simd_and(r3000_4dff_tmp10, r3000_4dff_tmp11);
                  r3000_4dff_tmp13 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_99_9a = simd_and(r3000_4dff_tmp12, r3000_4dff_tmp13);
                  carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(74), sequence_e3_82_adv));
                  r3000_4dff_tmp14 = simd_and(sequence_e3_82_adv, byte_range_99_9a);
                  struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r3000_4dff_tmp14);
                }
                else {
                  carryQ.CarryDequeueEnqueue(72, 3);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(66, 9);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(13, 62);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(75, 19))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_99 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[75] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(75), ra000_ffff_tmp8));
              sequence_ea_99 = simd_and(ra000_ffff_tmp8, byte_99);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp11 = simd_or(r800_ffff_tmp1, ra000_ffff_tmp10);
              ra000_ffff_tmp12 = simd_not(ra000_ffff_tmp11);
              ra000_ffff_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp14 = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp10);
              ra000_ffff_tmp15 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp12), simd_andc(ra000_ffff_tmp14, basis_bits.bit_3));
              ra000_ffff_tmp16 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp15);
              ra000_ffff_tmp17 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp18 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp17);
              ra000_ffff_tmp19 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp20 = simd_not(ra000_ffff_tmp19);
              ra000_ffff_tmp21 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp20), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
              ra000_ffff_tmp22 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp21);
              cc_range_a66f_a674_3 = simd_or(ra000_ffff_tmp16, ra000_ffff_tmp22);
              carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(76), sequence_ea_99_adv));
              ra000_ffff_tmp23 = simd_and(sequence_ea_99_adv, cc_range_a66f_a674_3);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, ra000_ffff_tmp23);
              byte_9a = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              byte_9f = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp14);
              carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(77), sequence_ea_9a_adv));
              ra000_ffff_tmp24 = simd_and(sequence_ea_9a_adv, byte_9f);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, ra000_ffff_tmp24);
              ra000_ffff_tmp25 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp10);
              byte_9b = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp25);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              ra000_ffff_tmp26 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_b0_b1 = simd_andc(ra000_ffff_tmp18, ra000_ffff_tmp26);
              carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(78), sequence_ea_9b_adv));
              ra000_ffff_tmp27 = simd_and(sequence_ea_9b_adv, byte_range_b0_b1);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, ra000_ffff_tmp27);
              ra000_ffff_tmp28 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp29 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_a0 = simd_andc(ra000_ffff_tmp28, ra000_ffff_tmp29);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              ra000_ffff_tmp30 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp31 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp30);
              ra000_ffff_tmp32 = simd_andc(r800_ffff_tmp1, r800_ffff_tmp2);
              ra000_ffff_tmp33 = simd_andc(ra000_ffff_tmp2, ra000_ffff_tmp32);
              ra000_ffff_tmp34 = simd_or(ra000_ffff_tmp33, ra000_ffff_tmp25);
              ra000_ffff_tmp35 = simd_and(ra000_ffff_tmp31, ra000_ffff_tmp34);
              ra000_ffff_tmp36 = simd_and(ra000_ffff_tmp28, r800_ffff_tmp2);
              ra000_ffff_tmp37 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp38 = simd_and(ra000_ffff_tmp36, ra000_ffff_tmp37);
              cc_range_a802_a825_3 = simd_or(ra000_ffff_tmp35, ra000_ffff_tmp38);
              carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(79), sequence_ea_a0_adv));
              ra000_ffff_tmp39 = simd_and(sequence_ea_a0_adv, cc_range_a802_a825_3);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, ra000_ffff_tmp39);
              ra000_ffff_tmp40 = simd_andc(ra000_ffff_tmp10, r800_ffff_tmp1);
              byte_a3 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp40);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              ra000_ffff_tmp41 = simd_and(ra000_ffff_tmp31, r800_ffff_tmp4);
              ra000_ffff_tmp42 = simd_and(basis_bits.bit_3, ra000_ffff_tmp26);
              ra000_ffff_tmp43 = simd_andc(ra000_ffff_tmp9, ra000_ffff_tmp42);
              cc_range_a8c4_a8e0_3 = simd_or(ra000_ffff_tmp41, ra000_ffff_tmp43);
              carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(80), sequence_ea_a3_adv));
              ra000_ffff_tmp44 = simd_and(sequence_ea_a3_adv, cc_range_a8c4_a8e0_3);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, ra000_ffff_tmp44);
              byte_a4 = simd_and(ra000_ffff_tmp28, r800_ffff_tmp4);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              ra000_ffff_tmp45 = simd_xor(basis_bits.bit_4, ra000_ffff_tmp19);
              byte_range_a6_ad = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp45);
              carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(81), sequence_ea_a4_adv));
              ra000_ffff_tmp46 = simd_and(sequence_ea_a4_adv, byte_range_a6_ad);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, ra000_ffff_tmp46);
              ra000_ffff_tmp47 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp6);
              byte_a5 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp47);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              ra000_ffff_tmp48 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp49 = simd_not(ra000_ffff_tmp26);
              ra000_ffff_tmp50 = simd_and(basis_bits.bit_5, ra000_ffff_tmp10);
              ra000_ffff_tmp51 = simd_or(basis_bits.bit_4, ra000_ffff_tmp50);
              ra000_ffff_tmp52 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp49), simd_andc(ra000_ffff_tmp51, basis_bits.bit_3));
              byte_range_87_91 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp52);
              carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(82), sequence_ea_a5_adv));
              ra000_ffff_tmp53 = simd_and(sequence_ea_a5_adv, byte_range_87_91);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, ra000_ffff_tmp53);
              ra000_ffff_tmp54 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp2);
              byte_a6 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp54);
              sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
              ra000_ffff_tmp55 = simd_andc(ra000_ffff_tmp31, r800_ffff_tmp1);
              ra000_ffff_tmp56 = simd_andc(ra000_ffff_tmp55, ra000_ffff_tmp10);
              ra000_ffff_tmp57 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp40);
              ra000_ffff_tmp58 = simd_or(ra000_ffff_tmp56, ra000_ffff_tmp57);
              ra000_ffff_tmp59 = simd_not(r800_ffff_tmp12);
              ra000_ffff_tmp60 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp59), simd_andc(ra000_ffff_tmp19, basis_bits.bit_4));
              ra000_ffff_tmp61 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp60);
              ra000_ffff_tmp62 = simd_or(ra000_ffff_tmp58, ra000_ffff_tmp61);
              ra000_ffff_tmp63 = simd_andc(ra000_ffff_tmp13, r800_ffff_tmp3);
              ra000_ffff_tmp64 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp63);
              cc_range_a980_a9bc_3 = simd_or(ra000_ffff_tmp62, ra000_ffff_tmp64);
              carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(83), sequence_ea_a6_adv));
              ra000_ffff_tmp65 = simd_and(sequence_ea_a6_adv, cc_range_a980_a9bc_3);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, ra000_ffff_tmp65);
              ra000_ffff_tmp66 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp10);
              byte_a7 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp66);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(84), sequence_ea_a7_adv));
              ra000_ffff_tmp67 = simd_and(sequence_ea_a7_adv, byte_a5);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, ra000_ffff_tmp67);
              ra000_ffff_tmp68 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp3);
              byte_a8 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp68);
              sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
              ra000_ffff_tmp69 = simd_and(ra000_ffff_tmp28, basis_bits.bit_4);
              ra000_ffff_tmp70 = simd_not(ra000_ffff_tmp10);
              ra000_ffff_tmp71 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp70), simd_andc(r800_ffff_tmp3, basis_bits.bit_5));
              ra000_ffff_tmp72 = simd_and(ra000_ffff_tmp69, ra000_ffff_tmp71);
              ra000_ffff_tmp73 = simd_andc(ra000_ffff_tmp18, r800_ffff_tmp1);
              ra000_ffff_tmp74 = simd_and(ra000_ffff_tmp73, ra000_ffff_tmp37);
              ra000_ffff_tmp75 = simd_or(ra000_ffff_tmp72, ra000_ffff_tmp74);
              ra000_ffff_tmp76 = simd_and(ra000_ffff_tmp18, r800_ffff_tmp2);
              ra000_ffff_tmp77 = simd_and(ra000_ffff_tmp76, ra000_ffff_tmp37);
              cc_range_aa29_aa35_3 = simd_or(ra000_ffff_tmp75, ra000_ffff_tmp77);
              carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(85), sequence_ea_a8_adv));
              ra000_ffff_tmp78 = simd_and(sequence_ea_a8_adv, cc_range_aa29_aa35_3);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, ra000_ffff_tmp78);
              byte_a9 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp7);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              ra000_ffff_tmp79 = simd_or(ra000_ffff_tmp40, ra000_ffff_tmp63);
              ra000_ffff_tmp80 = simd_and(ra000_ffff_tmp31, ra000_ffff_tmp79);
              cc_range_aa43_aa7c_3 = simd_or(ra000_ffff_tmp80, ra000_ffff_tmp64);
              carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(86), sequence_ea_a9_adv));
              ra000_ffff_tmp81 = simd_and(sequence_ea_a9_adv, cc_range_aa43_aa7c_3);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, ra000_ffff_tmp81);
              byte_aa = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp3);
              sequence_ea_aa = simd_and(byte_ea_adv, byte_aa);
              ra000_ffff_tmp82 = simd_andc(ra000_ffff_tmp18, ra000_ffff_tmp29);
              ra000_ffff_tmp83 = simd_andc(ra000_ffff_tmp18, basis_bits.bit_4);
              ra000_ffff_tmp84 = simd_not(r800_ffff_tmp3);
              ra000_ffff_tmp85 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp84), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
              ra000_ffff_tmp86 = simd_and(ra000_ffff_tmp83, ra000_ffff_tmp85);
              ra000_ffff_tmp87 = simd_or(ra000_ffff_tmp82, ra000_ffff_tmp86);
              ra000_ffff_tmp88 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
              ra000_ffff_tmp89 = simd_not(ra000_ffff_tmp88);
              ra000_ffff_tmp90 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp89), simd_andc(ra000_ffff_tmp50, basis_bits.bit_4));
              ra000_ffff_tmp91 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp90);
              ra000_ffff_tmp92 = simd_or(ra000_ffff_tmp87, ra000_ffff_tmp91);
              ra000_ffff_tmp93 = simd_and(ra000_ffff_tmp13, basis_bits.bit_6);
              ra000_ffff_tmp94 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp93);
              cc_range_aab0_aabe_3 = simd_or(ra000_ffff_tmp92, ra000_ffff_tmp94);
              carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_ea_aa, carryQ.get_carry_in(87), sequence_ea_aa_adv));
              ra000_ffff_tmp95 = simd_and(sequence_ea_aa_adv, cc_range_aab0_aabe_3);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, ra000_ffff_tmp95);
              byte_ab = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp25);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              ra000_ffff_tmp96 = simd_andc(ra000_ffff_tmp6, r800_ffff_tmp1);
              ra000_ffff_tmp97 = simd_and(ra000_ffff_tmp31, ra000_ffff_tmp96);
              ra000_ffff_tmp98 = simd_andc(ra000_ffff_tmp13, basis_bits.bit_6);
              ra000_ffff_tmp99 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp98);
              ra000_ffff_tmp100 = simd_or(ra000_ffff_tmp97, ra000_ffff_tmp99);
              ra000_ffff_tmp101 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp54);
              cc_range_aac1_aaf6_3 = simd_or(ra000_ffff_tmp100, ra000_ffff_tmp101);
              carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(88), sequence_ea_ab_adv));
              ra000_ffff_tmp102 = simd_and(sequence_ea_ab_adv, cc_range_aac1_aaf6_3);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, ra000_ffff_tmp102);
              byte_af = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp14);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              ra000_ffff_tmp103 = simd_or(ra000_ffff_tmp47, ra000_ffff_tmp68);
              ra000_ffff_tmp104 = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp6);
              ra000_ffff_tmp105 = simd_or(ra000_ffff_tmp103, ra000_ffff_tmp104);
              cc_range_abe5_abed_3 = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp105);
              carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(89), sequence_ea_af_adv));
              ra000_ffff_tmp106 = simd_and(sequence_ea_af_adv, cc_range_abe5_abed_3);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, ra000_ffff_tmp106);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp14);
              byte_ac = simd_and(ra000_ffff_tmp28, ra000_ffff_tmp63);
              carryQ.cq[90] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(90), ra000_ffff_tmp107));
              sequence_ef_ac = simd_and(ra000_ffff_tmp107, byte_ac);
              byte_ef_adv = ra000_ffff_tmp107;
              ra000_ffff_tmp108 = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp108);
              carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(91), sequence_ef_ac_adv));
              ra000_ffff_tmp109 = simd_and(sequence_ef_ac_adv, byte_9e);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, ra000_ffff_tmp109);
              byte_b8 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp68);
              sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
              ra000_ffff_tmp110 = simd_and(basis_bits.bit_4, ra000_ffff_tmp19);
              ra000_ffff_tmp111 = simd_andc(ra000_ffff_tmp28, ra000_ffff_tmp110);
              cc_range_fe00_fe20_3 = simd_or(ra000_ffff_tmp31, ra000_ffff_tmp111);
              carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(92), sequence_ef_b8_adv));
              ra000_ffff_tmp112 = simd_and(sequence_ef_b8_adv, cc_range_fe00_fe20_3);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, ra000_ffff_tmp112);
              byte_be = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp108);
              sequence_ef_be = simd_and(byte_ef_adv, byte_be);
              byte_range_9e_9f = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp93);
              carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(93), sequence_ef_be_adv));
              ra000_ffff_tmp113 = simd_and(sequence_ef_be_adv, byte_range_9e_9f);
              struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, ra000_ffff_tmp113);
            }
            else {
              carryQ.CarryDequeueEnqueue(75, 19);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(12, 82);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(94, 41))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[94] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(94), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp11);
            byte_87 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp12);
            carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(95), r10000_10ffff_tmp13));
            sequence_f0_90_87 = simd_and(r10000_10ffff_tmp13, byte_87);
            sequence_f0_90_adv = r10000_10ffff_tmp13;
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            r10000_10ffff_tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp16 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp16);
            byte_bd = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp17);
            carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(96), sequence_f0_90_87_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_90_87_adv, byte_bd);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp20 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp11);
            byte_8b = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp20);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            byte_a0 = simd_andc(r10000_10ffff_tmp21, r10000_10ffff_tmp3);
            carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(97), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp22 = simd_and(sequence_f0_90_8b_adv, byte_a0);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp22);
            byte_8d = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp17);
            sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
            r10000_10ffff_tmp23 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp11);
            r10000_10ffff_tmp24 = simd_not(r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp26 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp24), simd_andc(r10000_10ffff_tmp25, basis_bits.bit_4));
            byte_range_b6_ba = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp26);
            carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(98), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp27 = simd_and(sequence_f0_90_8d_adv, byte_range_b6_ba);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp27);
            r10000_10ffff_tmp28 = simd_andc(r10000_10ffff_tmp19, r10000_10ffff_tmp2);
            byte_a8 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp28);
            sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
            r10000_10ffff_tmp29 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp1);
            r10000_10ffff_tmp30 = simd_and(r10000_10ffff_tmp29, r10000_10ffff_tmp2);
            r10000_10ffff_tmp31 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp10);
            r10000_10ffff_tmp32 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp33 = simd_and(r10000_10ffff_tmp31, r10000_10ffff_tmp32);
            r10000_10ffff_tmp34 = simd_or(r10000_10ffff_tmp30, r10000_10ffff_tmp33);
            r10000_10ffff_tmp35 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp15);
            r10000_10ffff_tmp36 = simd_or(r10000_10ffff_tmp34, r10000_10ffff_tmp35);
            r10000_10ffff_tmp37 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp19);
            r10000_10ffff_tmp38 = simd_andc(r10000_10ffff_tmp37, r10000_10ffff_tmp11);
            r10000_10ffff_tmp39 = simd_or(r10000_10ffff_tmp36, r10000_10ffff_tmp38);
            r10000_10ffff_tmp40 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp11);
            r10000_10ffff_tmp41 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp40);
            cc_range_10a01_10a3f_4 = simd_or(r10000_10ffff_tmp39, r10000_10ffff_tmp41);
            carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(99), sequence_f0_90_a8_adv));
            r10000_10ffff_tmp42 = simd_and(sequence_f0_90_a8_adv, cc_range_10a01_10a3f_4);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp42);
            byte_ab = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp20);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            r10000_10ffff_tmp43 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp10);
            byte_range_a5_a6 = simd_and(r10000_10ffff_tmp43, r10000_10ffff_tmp32);
            carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(100), sequence_f0_90_ab_adv));
            r10000_10ffff_tmp44 = simd_and(sequence_f0_90_ab_adv, byte_range_a5_a6);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp44);
            r10000_10ffff_tmp45 = simd_andc(r10000_10ffff_tmp16, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp45);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            byte_80 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp3);
            carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(101), r10000_10ffff_tmp46));
            sequence_f0_91_80 = simd_and(r10000_10ffff_tmp46, byte_80);
            sequence_f0_91_adv = r10000_10ffff_tmp46;
            r10000_10ffff_tmp47 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp45);
            r10000_10ffff_tmp48 = simd_and(r10000_10ffff_tmp14, basis_bits.bit_4);
            cc_range_11001_11038_4 = simd_or(r10000_10ffff_tmp47, r10000_10ffff_tmp48);
            carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(102), sequence_f0_91_80_adv));
            r10000_10ffff_tmp49 = simd_and(sequence_f0_91_80_adv, cc_range_11001_11038_4);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp49);
            byte_81 = r10000_10ffff_tmp47;
            sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
            r10000_10ffff_tmp50 = simd_andc(r10000_10ffff_tmp9, basis_bits.bit_4);
            r10000_10ffff_tmp51 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp11);
            r10000_10ffff_tmp52 = simd_andc(r10000_10ffff_tmp50, r10000_10ffff_tmp51);
            cc_range_11040_1107f_4 = simd_or(r10000_10ffff_tmp52, r10000_10ffff_tmp41);
            carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(103), sequence_f0_91_81_adv));
            r10000_10ffff_tmp53 = simd_and(sequence_f0_91_81_adv, cc_range_11040_1107f_4);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp53);
            r10000_10ffff_tmp54 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp55 = simd_andc(r10000_10ffff_tmp54, r10000_10ffff_tmp1);
            byte_82 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp55);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            r10000_10ffff_tmp56 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            r10000_10ffff_tmp57 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp56);
            r10000_10ffff_tmp58 = simd_andc(r10000_10ffff_tmp14, basis_bits.bit_4);
            r10000_10ffff_tmp59 = simd_xor(basis_bits.bit_5, r10000_10ffff_tmp11);
            r10000_10ffff_tmp60 = simd_and(r10000_10ffff_tmp58, r10000_10ffff_tmp59);
            r10000_10ffff_tmp61 = simd_or(r10000_10ffff_tmp57, r10000_10ffff_tmp60);
            r10000_10ffff_tmp62 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp32);
            cc_range_11080_110b9_4 = simd_or(r10000_10ffff_tmp61, r10000_10ffff_tmp62);
            carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(104), sequence_f0_91_82_adv));
            r10000_10ffff_tmp63 = simd_and(sequence_f0_91_82_adv, cc_range_11080_110b9_4);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp63);
            r10000_10ffff_tmp64 = simd_andc(r10000_10ffff_tmp10, r10000_10ffff_tmp2);
            byte_84 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp64);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            r10000_10ffff_tmp65 = simd_andc(r10000_10ffff_tmp29, r10000_10ffff_tmp11);
            r10000_10ffff_tmp66 = simd_not(basis_bits.bit_5);
            r10000_10ffff_tmp67 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp66), simd_andc(r10000_10ffff_tmp51, basis_bits.bit_4));
            r10000_10ffff_tmp68 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp67);
            r10000_10ffff_tmp69 = simd_or(r10000_10ffff_tmp65, r10000_10ffff_tmp68);
            r10000_10ffff_tmp70 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp71 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp72 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp71);
            r10000_10ffff_tmp73 = simd_not(r10000_10ffff_tmp72);
            r10000_10ffff_tmp74 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp2);
            r10000_10ffff_tmp75 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp73), simd_andc(r10000_10ffff_tmp74, basis_bits.bit_3));
            r10000_10ffff_tmp76 = simd_and(r10000_10ffff_tmp70, r10000_10ffff_tmp75);
            cc_range_11100_1112d_4 = simd_or(r10000_10ffff_tmp69, r10000_10ffff_tmp76);
            carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(105), sequence_f0_91_84_adv));
            r10000_10ffff_tmp77 = simd_and(sequence_f0_91_84_adv, cc_range_11100_1112d_4);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp77);
            r10000_10ffff_tmp78 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp16);
            byte_85 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp78);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            r10000_10ffff_tmp79 = simd_andc(r10000_10ffff_tmp11, r10000_10ffff_tmp1);
            byte_b3 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp79);
            carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(106), sequence_f0_91_85_adv));
            r10000_10ffff_tmp80 = simd_and(sequence_f0_91_85_adv, byte_b3);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp80);
            r10000_10ffff_tmp81 = simd_and(r10000_10ffff_tmp10, r10000_10ffff_tmp54);
            byte_86 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp81);
            sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
            r10000_10ffff_tmp82 = simd_not(r10000_10ffff_tmp51);
            r10000_10ffff_tmp83 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp82), simd_andc(r10000_10ffff_tmp25, basis_bits.bit_4));
            r10000_10ffff_tmp84 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp83);
            cc_range_11180_111b6_4 = simd_or(r10000_10ffff_tmp57, r10000_10ffff_tmp84);
            carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(107), sequence_f0_91_86_adv));
            r10000_10ffff_tmp85 = simd_and(sequence_f0_91_86_adv, cc_range_11180_111b6_4);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp85);
            byte_88 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp28);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            r10000_10ffff_tmp86 = simd_not(r10000_10ffff_tmp56);
            r10000_10ffff_tmp87 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp86), simd_andc(r10000_10ffff_tmp40, basis_bits.bit_3));
            r10000_10ffff_tmp88 = simd_and(r10000_10ffff_tmp70, r10000_10ffff_tmp87);
            r10000_10ffff_tmp89 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp64);
            r10000_10ffff_tmp90 = simd_or(r10000_10ffff_tmp88, r10000_10ffff_tmp89);
            r10000_10ffff_tmp91 = simd_and(r10000_10ffff_tmp10, basis_bits.bit_6);
            r10000_10ffff_tmp92 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp91);
            cc_range_1122f_11236_4 = simd_or(r10000_10ffff_tmp90, r10000_10ffff_tmp92);
            carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(108), sequence_f0_91_88_adv));
            r10000_10ffff_tmp93 = simd_and(sequence_f0_91_88_adv, cc_range_1122f_11236_4);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp93);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            r10000_10ffff_tmp94 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp40);
            r10000_10ffff_tmp95 = simd_xor(basis_bits.bit_4, r10000_10ffff_tmp23);
            r10000_10ffff_tmp96 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp95);
            cc_range_112df_112e3_4 = simd_or(r10000_10ffff_tmp94, r10000_10ffff_tmp96);
            carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(109), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp97 = simd_and(sequence_f0_91_8b_adv, cc_range_112df_112e3_4);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp97);
            r10000_10ffff_tmp98 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp2);
            byte_8c = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp98);
            sequence_f0_91_8c = simd_and(sequence_f0_91_adv, byte_8c);
            r10000_10ffff_tmp99 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp98);
            r10000_10ffff_tmp100 = simd_or(byte_81, r10000_10ffff_tmp99);
            r10000_10ffff_tmp101 = simd_and(r10000_10ffff_tmp15, r10000_10ffff_tmp54);
            r10000_10ffff_tmp102 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp101);
            cc_range_11301_1133e_4 = simd_or(r10000_10ffff_tmp100, r10000_10ffff_tmp102);
            carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(110), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp103 = simd_and(sequence_f0_91_8c_adv, cc_range_11301_1133e_4);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp103);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            r10000_10ffff_tmp104 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp12);
            r10000_10ffff_tmp105 = simd_or(byte_80, r10000_10ffff_tmp104);
            r10000_10ffff_tmp106 = simd_not(r10000_10ffff_tmp71);
            r10000_10ffff_tmp107 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp106), simd_andc(r10000_10ffff_tmp25, basis_bits.bit_4));
            r10000_10ffff_tmp108 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp107);
            r10000_10ffff_tmp109 = simd_or(r10000_10ffff_tmp105, r10000_10ffff_tmp108);
            r10000_10ffff_tmp110 = simd_andc(r10000_10ffff_tmp58, r10000_10ffff_tmp71);
            cc_range_11340_11370_4 = simd_or(r10000_10ffff_tmp109, r10000_10ffff_tmp110);
            carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(111), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp111 = simd_and(sequence_f0_91_8d_adv, cc_range_11340_11370_4);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp111);
            byte_92 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp55);
            sequence_f0_91_92 = simd_and(sequence_f0_91_adv, byte_92);
            r10000_10ffff_tmp112 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp113 = simd_not(r10000_10ffff_tmp112);
            r10000_10ffff_tmp114 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp113), simd_andc(r10000_10ffff_tmp23, basis_bits.bit_4));
            r10000_10ffff_tmp115 = simd_andc(r10000_10ffff_tmp3, r10000_10ffff_tmp114);
            r10000_10ffff_tmp116 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp54);
            r10000_10ffff_tmp117 = simd_andc(r10000_10ffff_tmp115, r10000_10ffff_tmp116);
            r10000_10ffff_tmp118 = simd_andc(r10000_10ffff_tmp117, r10000_10ffff_tmp17);
            r10000_10ffff_tmp119 = simd_andc(r10000_10ffff_tmp118, r10000_10ffff_tmp40);
            cc_range_114b0_114bf_4 = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp119);
            carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_f0_91_92, carryQ.get_carry_in(112), sequence_f0_91_92_adv));
            r10000_10ffff_tmp120 = simd_and(sequence_f0_91_92_adv, cc_range_114b0_114bf_4);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp120);
            byte_93 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp79);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            r10000_10ffff_tmp121 = simd_andc(basis_bits.bit_6, r10000_10ffff_tmp1);
            r10000_10ffff_tmp122 = simd_andc(r10000_10ffff_tmp3, r10000_10ffff_tmp121);
            cc_range_114c0_114c2_4 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp122);
            carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(113), sequence_f0_91_93_adv));
            r10000_10ffff_tmp123 = simd_and(sequence_f0_91_93_adv, cc_range_114c0_114c2_4);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp123);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp81);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            r10000_10ffff_tmp124 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp40);
            r10000_10ffff_tmp125 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp126 = simd_and(r10000_10ffff_tmp58, r10000_10ffff_tmp125);
            r10000_10ffff_tmp127 = simd_or(r10000_10ffff_tmp124, r10000_10ffff_tmp126);
            r10000_10ffff_tmp128 = simd_andc(r10000_10ffff_tmp15, basis_bits.bit_6);
            r10000_10ffff_tmp129 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp128);
            r10000_10ffff_tmp130 = simd_or(r10000_10ffff_tmp127, r10000_10ffff_tmp129);
            cc_range_115af_115bf_4 = simd_or(r10000_10ffff_tmp130, r10000_10ffff_tmp41);
            carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(114), sequence_f0_91_96_adv));
            r10000_10ffff_tmp131 = simd_and(sequence_f0_91_96_adv, cc_range_115af_115bf_4);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp131);
            byte_97 = r10000_10ffff_tmp104;
            sequence_f0_91_97 = simd_and(sequence_f0_91_adv, byte_97);
            carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_f0_91_97, carryQ.get_carry_in(115), sequence_f0_91_97_adv));
            r10000_10ffff_tmp132 = simd_and(sequence_f0_91_97_adv, byte_80);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp132);
            byte_98 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp28);
            sequence_f0_91_98 = simd_and(sequence_f0_91_adv, byte_98);
            r10000_10ffff_tmp133 = simd_or(r10000_10ffff_tmp95, r10000_10ffff_tmp17);
            r10000_10ffff_tmp134 = simd_or(r10000_10ffff_tmp133, r10000_10ffff_tmp40);
            cc_range_11633_1163f_4 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp134);
            carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_f0_91_98, carryQ.get_carry_in(116), sequence_f0_91_98_adv));
            r10000_10ffff_tmp135 = simd_and(sequence_f0_91_98_adv, cc_range_11633_1163f_4);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp135);
            r10000_10ffff_tmp136 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp16);
            byte_99 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp136);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(117), sequence_f0_91_99_adv));
            r10000_10ffff_tmp137 = simd_and(sequence_f0_91_99_adv, byte_80);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp137);
            byte_9a = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp116);
            sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
            r10000_10ffff_tmp138 = simd_or(r10000_10ffff_tmp20, r10000_10ffff_tmp17);
            r10000_10ffff_tmp139 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp138);
            r10000_10ffff_tmp140 = simd_andc(r10000_10ffff_tmp58, r10000_10ffff_tmp25);
            r10000_10ffff_tmp141 = simd_or(r10000_10ffff_tmp139, r10000_10ffff_tmp140);
            r10000_10ffff_tmp142 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp12);
            cc_range_116ab_116b7_4 = simd_or(r10000_10ffff_tmp141, r10000_10ffff_tmp142);
            carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(118), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp143 = simd_and(sequence_f0_91_9a_adv, cc_range_116ab_116b7_4);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp143);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(119), r10000_10ffff_tmp144));
            sequence_f0_96_ab = simd_and(r10000_10ffff_tmp144, byte_ab);
            sequence_f0_96_adv = r10000_10ffff_tmp144;
            byte_range_b0_b4 = r10000_10ffff_tmp110;
            carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(120), sequence_f0_96_ab_adv));
            r10000_10ffff_tmp145 = simd_and(sequence_f0_96_ab_adv, byte_range_b0_b4);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp145);
            byte_ac = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp98);
            sequence_f0_96_ac = simd_and(sequence_f0_96_adv, byte_ac);
            byte_range_b0_b6 = simd_andc(r10000_10ffff_tmp58, r10000_10ffff_tmp51);
            carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(121), sequence_f0_96_ac_adv));
            r10000_10ffff_tmp146 = simd_and(sequence_f0_96_ac_adv, byte_range_b0_b6);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp146);
            byte_be = r10000_10ffff_tmp102;
            sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
            r10000_10ffff_tmp147 = simd_andc(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp148 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp11);
            r10000_10ffff_tmp149 = simd_not(r10000_10ffff_tmp148);
            r10000_10ffff_tmp150 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp149), simd_andc(r10000_10ffff_tmp40, basis_bits.bit_3));
            byte_range_8f_92 = simd_and(r10000_10ffff_tmp147, r10000_10ffff_tmp150);
            carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(122), sequence_f0_96_be_adv));
            r10000_10ffff_tmp151 = simd_and(sequence_f0_96_be_adv, byte_range_8f_92);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp151);
            byte_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp20);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            byte_b2 = simd_and(r10000_10ffff_tmp14, r10000_10ffff_tmp55);
            carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(123), r10000_10ffff_tmp152));
            sequence_f0_9b_b2 = simd_and(r10000_10ffff_tmp152, byte_b2);
            sequence_f0_9b_adv = r10000_10ffff_tmp152;
            r10000_10ffff_tmp153 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp15);
            byte_range_9d_9e = simd_and(r10000_10ffff_tmp153, r10000_10ffff_tmp32);
            carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(124), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp154 = simd_and(sequence_f0_9b_b2_adv, byte_range_9d_9e);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp154);
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp17);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(125), r10000_10ffff_tmp155));
            sequence_f0_9d_85 = simd_and(r10000_10ffff_tmp155, byte_85);
            sequence_f0_9d_adv = r10000_10ffff_tmp155;
            r10000_10ffff_tmp156 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp157 = simd_not(r10000_10ffff_tmp156);
            r10000_10ffff_tmp158 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp157), simd_andc(r10000_10ffff_tmp51, basis_bits.bit_4));
            r10000_10ffff_tmp159 = simd_or(r10000_10ffff_tmp78, r10000_10ffff_tmp158);
            r10000_10ffff_tmp160 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp159);
            r10000_10ffff_tmp161 = simd_and(r10000_10ffff_tmp15, basis_bits.bit_6);
            r10000_10ffff_tmp162 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp149), simd_andc(r10000_10ffff_tmp161, basis_bits.bit_3));
            r10000_10ffff_tmp163 = simd_and(r10000_10ffff_tmp70, r10000_10ffff_tmp162);
            r10000_10ffff_tmp164 = simd_or(r10000_10ffff_tmp160, r10000_10ffff_tmp163);
            r10000_10ffff_tmp165 = simd_and(r10000_10ffff_tmp48, r10000_10ffff_tmp23);
            cc_range_1d165_1d17b_4 = simd_or(r10000_10ffff_tmp164, r10000_10ffff_tmp165);
            carryQ.cq[126] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(126), sequence_f0_9d_85_adv));
            r10000_10ffff_tmp166 = simd_and(sequence_f0_9d_85_adv, cc_range_1d165_1d17b_4);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp166);
            sequence_f0_9d_86 = simd_and(sequence_f0_9d_adv, byte_86);
            r10000_10ffff_tmp167 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp66), simd_andc(r10000_10ffff_tmp71, basis_bits.bit_4));
            r10000_10ffff_tmp168 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp167);
            r10000_10ffff_tmp169 = simd_or(r10000_10ffff_tmp65, r10000_10ffff_tmp168);
            r10000_10ffff_tmp170 = simd_and(r10000_10ffff_tmp21, basis_bits.bit_4);
            r10000_10ffff_tmp171 = simd_and(r10000_10ffff_tmp170, r10000_10ffff_tmp125);
            cc_range_1d180_1d1aa_4 = simd_or(r10000_10ffff_tmp169, r10000_10ffff_tmp171);
            carryQ.cq[127] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_86, carryQ.get_carry_in(127), sequence_f0_9d_86_adv));
            r10000_10ffff_tmp172 = simd_and(sequence_f0_9d_86_adv, cc_range_1d180_1d1aa_4);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp172);
            byte_89 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp136);
            sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
            r10000_10ffff_tmp173 = simd_not(r10000_10ffff_tmp2);
            r10000_10ffff_tmp174 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp173), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
            byte_range_82_84 = simd_and(r10000_10ffff_tmp50, r10000_10ffff_tmp174);
            carryQ.cq[128] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_89, carryQ.get_carry_in(128), sequence_f0_9d_89_adv));
            r10000_10ffff_tmp175 = simd_and(sequence_f0_9d_89_adv, byte_range_82_84);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp175);
            byte_9e = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp101);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            byte_a3 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp79);
            carryQ.cq[129] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(129), r10000_10ffff_tmp176));
            sequence_f0_9e_a3 = simd_and(r10000_10ffff_tmp176, byte_a3);
            sequence_f0_9e_adv = r10000_10ffff_tmp176;
            r10000_10ffff_tmp177 = simd_andc(r10000_10ffff_tmp6, basis_bits.bit_4);
            byte_range_90_96 = simd_andc(r10000_10ffff_tmp177, r10000_10ffff_tmp51);
            carryQ.cq[130] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(130), sequence_f0_9e_a3_adv));
            r10000_10ffff_tmp178 = simd_and(sequence_f0_9e_a3_adv, byte_range_90_96);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, r10000_10ffff_tmp178);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp79);
            carryQ.cq[131] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(131), r10000_10ffff_tmp179));
            sequence_f3_a0 = simd_and(r10000_10ffff_tmp179, byte_a0);
            byte_f3_adv = r10000_10ffff_tmp179;
            byte_range_84_86 = simd_andc(r10000_10ffff_tmp31, r10000_10ffff_tmp11);
            carryQ.cq[132] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(132), r10000_10ffff_tmp180));
            sequence_f3_a0_byte_range_84_86 = simd_and(r10000_10ffff_tmp180, byte_range_84_86);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[133] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_84_86, carryQ.get_carry_in(133), r10000_10ffff_tmp181));
            sequence_f3_a0_byte_range_84_86_sfx = simd_and(r10000_10ffff_tmp181, byte_range_80_bf);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, sequence_f3_a0_byte_range_84_86_sfx);
            r10000_10ffff_tmp182 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp183 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp8);
            sequence_f3_a0_adv = r10000_10ffff_tmp180;
            sequence_f3_a0_87 = simd_and(sequence_f3_a0_adv, byte_87);
            byte_range_80_af = simd_andc(byte_range_80_bf, r80_10ffff_tmp2);
            carryQ.cq[134] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_87, carryQ.get_carry_in(134), r10000_10ffff_tmp184));
            sequence_f3_a0_87_byte_range_80_af = simd_and(r10000_10ffff_tmp184, byte_range_80_af);
            struct_gr_ext_Y.cc = simd_or(struct_gr_ext_Y.cc, sequence_f3_a0_87_byte_range_80_af);
          }
          else {
            carryQ.CarryDequeueEnqueue(94, 41);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 135);
        }
        carryQ.CarryQ_Adjust(135);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<135, 0> carryQ;
  };

  struct Property_alpha_Y {
  Property_alpha_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_alpha_Y & struct_alpha_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9;
		BitBlock cc_range_41_61_1, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, byte_c2, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13, r80_7ff_tmp14;
		BitBlock r80_7ff_tmp15, r80_7ff_tmp16, r80_7ff_tmp17, r80_7ff_tmp18;
		BitBlock cc_range_aa_ba_2, byte_c2_adv, r80_7ff_tmp19, r80_7ff_tmp20, byte_c3;
		BitBlock r80_7ff_tmp21, r80_7ff_tmp22, r80_7ff_tmp23, r80_7ff_tmp24;
		BitBlock r80_7ff_tmp25, r80_7ff_tmp26, r80_7ff_tmp27, r80_7ff_tmp28;
		BitBlock r80_7ff_tmp29, r80_7ff_tmp30, r80_7ff_tmp31, cc_range_c0_f8_2;
		BitBlock byte_c3_adv, r80_7ff_tmp32, byte_range_c4_cf, r100_3ff_tmp1;
		BitBlock byte_range_c4_cb, r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3;
		BitBlock byte_range_c4_c8, r100_2ff_tmp4, byte_c9, byte_range_80_8f;
		BitBlock r100_2ff_tmp5, r100_2ff_tmp6, r100_2ff_tmp7, r100_24f_tmp1;
		BitBlock byte_range_c4_c5, byte_range_80_bf, r100_17f_tmp1;
		BitBlock byte_range_c4_c5_sfx, r100_24f_tmp2, r100_24f_tmp3, byte_range_c6_c8;
		BitBlock r100_24f_tmp4, r180_24f_tmp1, byte_range_c6_c8_sfx;
		BitBlock byte_c9_byte_range_80_8f, byte_range_90_bf, r100_2ff_tmp8, byte_ca;
		BitBlock byte_range_80_af, r100_2ff_tmp9, r100_2ff_tmp10, r100_2ff_tmp11;
		BitBlock byte_c9_adv, r250_2af_tmp1, byte_ca_adv, r250_2af_tmp2;
		BitBlock byte_range_b0_bf, r100_2ff_tmp12, r100_2ff_tmp13, byte_cb;
		BitBlock r100_2ff_tmp14, r2b0_2ff_tmp1, r2b0_2ff_tmp2, r2b0_2ff_tmp3;
		BitBlock r2b0_2ff_tmp4, r2b0_2ff_tmp5, r2b0_2ff_tmp6, r2b0_2ff_tmp7;
		BitBlock r2b0_2ff_tmp8, r2b0_2ff_tmp9, r2b0_2ff_tmp10, r2b0_2ff_tmp11;
		BitBlock r2b0_2ff_tmp12, r2b0_2ff_tmp13, r2b0_2ff_tmp14, r2b0_2ff_tmp15;
		BitBlock r2b0_2ff_tmp16, r2b0_2ff_tmp17, r2b0_2ff_tmp18, r2b0_2ff_tmp19;
		BitBlock cc_range_2c0_2ee_2, byte_cb_adv, r2b0_2ff_tmp20, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, byte_cc, r100_3ff_tmp4, byte_cd, r100_3ff_tmp5;
		BitBlock r100_3ff_tmp6, r100_3ff_tmp7, r300_36f_tmp1, byte_85, byte_cd_adv;
		BitBlock r300_36f_tmp2, r100_3ff_tmp8, r100_3ff_tmp9, byte_range_ce_cf;
		BitBlock r100_3ff_tmp10, r370_3ff_tmp1, r370_3ff_tmp2, r370_3ff_tmp3;
		BitBlock r370_3ff_tmp4, r370_3ff_tmp5, r370_3ff_tmp6, r370_3ff_tmp7;
		BitBlock r370_3ff_tmp8, r370_3ff_tmp9, r370_3ff_tmp10, r370_3ff_tmp11;
		BitBlock r370_3ff_tmp12, cc_range_370_37f_2, r370_3ff_tmp13, r370_3ff_tmp14;
		BitBlock byte_ce, r370_3ff_tmp15, r370_3ff_tmp16, r370_3ff_tmp17;
		BitBlock r370_3ff_tmp18, r370_3ff_tmp19, r370_3ff_tmp20, r370_3ff_tmp21;
		BitBlock r370_3ff_tmp22, r370_3ff_tmp23, r370_3ff_tmp24, r370_3ff_tmp25;
		BitBlock r370_3ff_tmp26, r370_3ff_tmp27, r370_3ff_tmp28, r370_3ff_tmp29;
		BitBlock r370_3ff_tmp30, r370_3ff_tmp31, r370_3ff_tmp32, r370_3ff_tmp33;
		BitBlock cc_range_386_3a3_2, byte_ce_adv, r370_3ff_tmp34, byte_cf;
		BitBlock r370_3ff_tmp35, r370_3ff_tmp36, r370_3ff_tmp37, r370_3ff_tmp38;
		BitBlock r370_3ff_tmp39, r370_3ff_tmp40, cc_range_3c0_3f7_2, byte_cf_adv;
		BitBlock r370_3ff_tmp41, r80_7ff_tmp33, r80_7ff_tmp34, byte_range_d0_d7;
		BitBlock byte_range_d0_d3, r400_4ff_tmp1, byte_range_d0_d1, r400_4ff_tmp2;
		BitBlock byte_range_d0_d1_sfx, byte_d2, r400_4ff_tmp3, byte_range_80_81;
		BitBlock r400_4ff_tmp4, byte_d2_byte_range_80_81, byte_d3, r400_4ff_tmp5;
		BitBlock byte_d3_byte_range_80_bf, r400_5ff_tmp1, byte_range_d4_d5;
		BitBlock r400_5ff_tmp2, byte_d6, r400_5ff_tmp3, r400_5ff_tmp4, r400_5ff_tmp5;
		BitBlock r500_58f_tmp1, byte_d4, r500_58f_tmp2, r500_58f_tmp3, byte_d4_adv;
		BitBlock r500_52f_tmp1, r500_58f_tmp4, byte_d5, r500_58f_tmp5, r500_58f_tmp6;
		BitBlock r530_58f_tmp1, r530_58f_tmp2, byte_range_b1_bf, r530_58f_tmp3;
		BitBlock r530_58f_tmp4, r530_58f_tmp5, r530_58f_tmp6, r530_58f_tmp7;
		BitBlock r530_58f_tmp8, r530_58f_tmp9, r530_58f_tmp10, cc_range_540_561_2;
		BitBlock byte_d5_adv, r530_58f_tmp11, byte_range_80_87, byte_d6_adv;
		BitBlock r530_58f_tmp12, r400_5ff_tmp6, r400_5ff_tmp7, byte_d7, r400_5ff_tmp8;
		BitBlock r590_5ff_tmp1, r590_5ff_tmp2, r590_5ff_tmp3, r590_5ff_tmp4;
		BitBlock r590_5ff_tmp5, cc_range_5b0_5bf_2, r590_5ff_tmp6, r590_5ff_tmp7;
		BitBlock r590_5ff_tmp8, r590_5ff_tmp9, r590_5ff_tmp10, r590_5ff_tmp11;
		BitBlock r590_5ff_tmp12, r590_5ff_tmp13, r590_5ff_tmp14, r590_5ff_tmp15;
		BitBlock r590_5ff_tmp16, r590_5ff_tmp17, r590_5ff_tmp18, r590_5ff_tmp19;
		BitBlock r590_5ff_tmp20, cc_range_5c1_5f0_2, byte_d7_adv, r590_5ff_tmp21;
		BitBlock byte_range_d8_db, r600_6ff_tmp1, byte_d8, r600_6ff_tmp2;
		BitBlock r600_6ff_tmp3, r600_6ff_tmp4, cc_range_610_620_2, byte_d8_adv;
		BitBlock r600_6ff_tmp5, r600_6ff_tmp6, byte_d9, r600_6ff_tmp7, r600_6ff_tmp8;
		BitBlock r600_6ff_tmp9, r600_6ff_tmp10, r600_6ff_tmp11, r600_6ff_tmp12;
		BitBlock r600_6ff_tmp13, r600_6ff_tmp14, r600_6ff_tmp15, cc_range_640_66e_2;
		BitBlock byte_d9_adv, r600_6ff_tmp16, byte_da, byte_da_adv, r600_6ff_tmp17;
		BitBlock r600_6ff_tmp18, byte_db, r600_6ff_tmp19, r600_6ff_tmp20;
		BitBlock r600_6ff_tmp21, r600_6ff_tmp22, r600_6ff_tmp23, r600_6ff_tmp24;
		BitBlock r600_6ff_tmp25, r600_6ff_tmp26, r600_6ff_tmp27, r600_6ff_tmp28;
		BitBlock r600_6ff_tmp29, r600_6ff_tmp30, r600_6ff_tmp31, r600_6ff_tmp32;
		BitBlock r600_6ff_tmp33, r600_6ff_tmp34, r600_6ff_tmp35, r600_6ff_tmp36;
		BitBlock r600_6ff_tmp37, r600_6ff_tmp38, r600_6ff_tmp39, r600_6ff_tmp40;
		BitBlock r600_6ff_tmp41, cc_range_6c0_6ff_2, byte_db_adv, r600_6ff_tmp42;
		BitBlock r80_7ff_tmp35, r80_7ff_tmp36, byte_range_dc_dd, r700_77f_tmp1;
		BitBlock byte_dc, r700_77f_tmp2, byte_dd, r700_77f_tmp3, r700_77f_tmp4;
		BitBlock r700_77f_tmp5, byte_dc_adv, r700_74f_tmp1, r700_74f_tmp2;
		BitBlock byte_range_8d_8f, byte_dd_adv, r700_74f_tmp3, r700_77f_tmp6;
		BitBlock r750_77f_tmp1, r80_7ff_tmp37, byte_range_de_df, r780_7ff_tmp1;
		BitBlock byte_de, r780_7bf_tmp1, r780_7bf_tmp2, r780_7bf_tmp3;
		BitBlock byte_range_80_b1, byte_de_adv, r780_7bf_tmp4, r780_7ff_tmp2, byte_df;
		BitBlock r7c0_7ff_tmp1, r7c0_7ff_tmp2, r7c0_7ff_tmp3, r7c0_7ff_tmp4;
		BitBlock r7c0_7ff_tmp5, r7c0_7ff_tmp6, r7c0_7ff_tmp7, r7c0_7ff_tmp8;
		BitBlock r7c0_7ff_tmp9, r7c0_7ff_tmp10, cc_range_7ca_7fa_2, byte_df_adv;
		BitBlock r7c0_7ff_tmp11, r80_10ffff_tmp1, byte_range_e0_ef, byte_range_e0_e3;
		BitBlock r800_ffff_tmp1, r800_ffff_tmp2, byte_e4, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, r800_ffff_tmp5, byte_range_80_b7, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, r800_ffff_tmp8, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock byte_e0, r800_fff_tmp1, byte_a0, r800_fff_tmp2, sequence_e0_a0;
		BitBlock byte_e0_adv, r800_fff_tmp3, r800_fff_tmp4, r800_fff_tmp5;
		BitBlock r800_fff_tmp6, r800_fff_tmp7, r800_fff_tmp8, r800_fff_tmp9;
		BitBlock r800_fff_tmp10, r800_fff_tmp11, r800_fff_tmp12, r800_fff_tmp13;
		BitBlock cc_range_800_81a_3, sequence_e0_a0_adv, r800_fff_tmp14;
		BitBlock r800_fff_tmp15, r800_fff_tmp16, byte_a1, sequence_e0_a1;
		BitBlock r800_fff_tmp17, r800_fff_tmp18, r800_fff_tmp19, byte_range_80_98;
		BitBlock sequence_e0_a1_adv, r800_fff_tmp20, r800_fff_tmp21, r800_fff_tmp22;
		BitBlock byte_a2, sequence_e0_a2, r800_fff_tmp23, r800_fff_tmp24;
		BitBlock r800_fff_tmp25, byte_range_a0_b2, sequence_e0_a2_adv, r800_fff_tmp26;
		BitBlock r800_fff_tmp27, byte_a3, sequence_e0_a3, r800_fff_tmp28;
		BitBlock r800_fff_tmp29, r800_fff_tmp30, r800_fff_tmp31, r800_fff_tmp32;
		BitBlock cc_range_8e4_8f0_3, sequence_e0_a3_adv, r800_fff_tmp33, byte_a4;
		BitBlock sequence_e0_a4, r800_fff_tmp34, r800_fff_tmp35, r800_fff_tmp36;
		BitBlock r800_fff_tmp37, r800_fff_tmp38, cc_range_900_93d_3;
		BitBlock sequence_e0_a4_adv, r800_fff_tmp39, r800_fff_tmp40, byte_a5;
		BitBlock sequence_e0_a5, r800_fff_tmp41, r800_fff_tmp42, r800_fff_tmp43;
		BitBlock r800_fff_tmp44, r800_fff_tmp45, r800_fff_tmp46, r800_fff_tmp47;
		BitBlock r800_fff_tmp48, r800_fff_tmp49, r800_fff_tmp50, r800_fff_tmp51;
		BitBlock r800_fff_tmp52, r800_fff_tmp53, r800_fff_tmp54, r800_fff_tmp55;
		BitBlock r800_fff_tmp56, r800_fff_tmp57, r800_fff_tmp58, r800_fff_tmp59;
		BitBlock cc_range_940_971_3, sequence_e0_a5_adv, r800_fff_tmp60;
		BitBlock r800_fff_tmp61, byte_a6, sequence_e0_a6, r800_fff_tmp62;
		BitBlock r800_fff_tmp63, r800_fff_tmp64, r800_fff_tmp65, r800_fff_tmp66;
		BitBlock r800_fff_tmp67, r800_fff_tmp68, r800_fff_tmp69, r800_fff_tmp70;
		BitBlock r800_fff_tmp71, r800_fff_tmp72, r800_fff_tmp73, r800_fff_tmp74;
		BitBlock r800_fff_tmp75, r800_fff_tmp76, r800_fff_tmp77, r800_fff_tmp78;
		BitBlock r800_fff_tmp79, r800_fff_tmp80, r800_fff_tmp81, r800_fff_tmp82;
		BitBlock cc_range_980_9bd_3, sequence_e0_a6_adv, r800_fff_tmp83;
		BitBlock r800_fff_tmp84, byte_a7, sequence_e0_a7, r800_fff_tmp85;
		BitBlock r800_fff_tmp86, r800_fff_tmp87, r800_fff_tmp88, r800_fff_tmp89;
		BitBlock r800_fff_tmp90, r800_fff_tmp91, r800_fff_tmp92, r800_fff_tmp93;
		BitBlock r800_fff_tmp94, r800_fff_tmp95, r800_fff_tmp96, r800_fff_tmp97;
		BitBlock r800_fff_tmp98, r800_fff_tmp99, r800_fff_tmp100, r800_fff_tmp101;
		BitBlock r800_fff_tmp102, r800_fff_tmp103, r800_fff_tmp104, r800_fff_tmp105;
		BitBlock r800_fff_tmp106, r800_fff_tmp107, r800_fff_tmp108, r800_fff_tmp109;
		BitBlock r800_fff_tmp110, r800_fff_tmp111, cc_range_9c0_9f0_3;
		BitBlock sequence_e0_a7_adv, r800_fff_tmp112, r800_fff_tmp113, r800_fff_tmp114;
		BitBlock byte_a8, sequence_e0_a8, r800_fff_tmp115, r800_fff_tmp116;
		BitBlock r800_fff_tmp117, r800_fff_tmp118, r800_fff_tmp119, r800_fff_tmp120;
		BitBlock r800_fff_tmp121, r800_fff_tmp122, r800_fff_tmp123, r800_fff_tmp124;
		BitBlock r800_fff_tmp125, r800_fff_tmp126, r800_fff_tmp127, r800_fff_tmp128;
		BitBlock r800_fff_tmp129, r800_fff_tmp130, r800_fff_tmp131, r800_fff_tmp132;
		BitBlock r800_fff_tmp133, r800_fff_tmp134, cc_range_a01_a3e_3;
		BitBlock sequence_e0_a8_adv, r800_fff_tmp135, r800_fff_tmp136, byte_a9;
		BitBlock sequence_e0_a9, r800_fff_tmp137, r800_fff_tmp138, r800_fff_tmp139;
		BitBlock r800_fff_tmp140, r800_fff_tmp141, r800_fff_tmp142, r800_fff_tmp143;
		BitBlock r800_fff_tmp144, r800_fff_tmp145, r800_fff_tmp146, r800_fff_tmp147;
		BitBlock r800_fff_tmp148, r800_fff_tmp149, cc_range_a40_a70_3;
		BitBlock sequence_e0_a9_adv, r800_fff_tmp150, r800_fff_tmp151, byte_aa;
		BitBlock sequence_e0_aa, r800_fff_tmp152, r800_fff_tmp153, r800_fff_tmp154;
		BitBlock r800_fff_tmp155, r800_fff_tmp156, r800_fff_tmp157, r800_fff_tmp158;
		BitBlock r800_fff_tmp159, r800_fff_tmp160, r800_fff_tmp161, r800_fff_tmp162;
		BitBlock r800_fff_tmp163, r800_fff_tmp164, r800_fff_tmp165, cc_range_a81_abd_3;
		BitBlock sequence_e0_aa_adv, r800_fff_tmp166, r800_fff_tmp167, byte_ab;
		BitBlock sequence_e0_ab, r800_fff_tmp168, r800_fff_tmp169, r800_fff_tmp170;
		BitBlock r800_fff_tmp171, r800_fff_tmp172, r800_fff_tmp173, r800_fff_tmp174;
		BitBlock r800_fff_tmp175, cc_range_ac0_ae0_3, sequence_e0_ab_adv;
		BitBlock r800_fff_tmp176, r800_fff_tmp177, byte_ac, sequence_e0_ac;
		BitBlock r800_fff_tmp178, r800_fff_tmp179, r800_fff_tmp180, r800_fff_tmp181;
		BitBlock r800_fff_tmp182, r800_fff_tmp183, r800_fff_tmp184, cc_range_b01_b3d_3;
		BitBlock sequence_e0_ac_adv, r800_fff_tmp185, r800_fff_tmp186, byte_ad;
		BitBlock sequence_e0_ad, r800_fff_tmp187, r800_fff_tmp188, r800_fff_tmp189;
		BitBlock r800_fff_tmp190, r800_fff_tmp191, r800_fff_tmp192, cc_range_b40_b71_3;
		BitBlock sequence_e0_ad_adv, r800_fff_tmp193, byte_ae, sequence_e0_ae;
		BitBlock r800_fff_tmp194, r800_fff_tmp195, r800_fff_tmp196, r800_fff_tmp197;
		BitBlock r800_fff_tmp198, r800_fff_tmp199, r800_fff_tmp200, r800_fff_tmp201;
		BitBlock r800_fff_tmp202, r800_fff_tmp203, r800_fff_tmp204, r800_fff_tmp205;
		BitBlock r800_fff_tmp206, r800_fff_tmp207, r800_fff_tmp208, r800_fff_tmp209;
		BitBlock r800_fff_tmp210, r800_fff_tmp211, r800_fff_tmp212, r800_fff_tmp213;
		BitBlock r800_fff_tmp214, r800_fff_tmp215, r800_fff_tmp216, r800_fff_tmp217;
		BitBlock cc_range_b82_bbe_3, sequence_e0_ae_adv, r800_fff_tmp218, byte_af;
		BitBlock sequence_e0_af, r800_fff_tmp219, r800_fff_tmp220, r800_fff_tmp221;
		BitBlock r800_fff_tmp222, r800_fff_tmp223, r800_fff_tmp224, r800_fff_tmp225;
		BitBlock cc_range_bc0_bd7_3, sequence_e0_af_adv, r800_fff_tmp226, byte_b0;
		BitBlock sequence_e0_b0, r800_fff_tmp227, r800_fff_tmp228, r800_fff_tmp229;
		BitBlock r800_fff_tmp230, r800_fff_tmp231, r800_fff_tmp232, r800_fff_tmp233;
		BitBlock r800_fff_tmp234, cc_range_c00_c3d_3, sequence_e0_b0_adv;
		BitBlock r800_fff_tmp235, byte_b1, sequence_e0_b1, r800_fff_tmp236;
		BitBlock r800_fff_tmp237, r800_fff_tmp238, r800_fff_tmp239, r800_fff_tmp240;
		BitBlock r800_fff_tmp241, r800_fff_tmp242, cc_range_c40_c60_3;
		BitBlock sequence_e0_b1_adv, r800_fff_tmp243, byte_b2, sequence_e0_b2;
		BitBlock r800_fff_tmp244, r800_fff_tmp245, r800_fff_tmp246, r800_fff_tmp247;
		BitBlock r800_fff_tmp248, r800_fff_tmp249, r800_fff_tmp250, cc_range_c81_cbd_3;
		BitBlock sequence_e0_b2_adv, r800_fff_tmp251, byte_b3, sequence_e0_b3;
		BitBlock r800_fff_tmp252, r800_fff_tmp253, r800_fff_tmp254, r800_fff_tmp255;
		BitBlock cc_range_cc0_cf1_3, sequence_e0_b3_adv, r800_fff_tmp256, byte_b4;
		BitBlock sequence_e0_b4, r800_fff_tmp257, r800_fff_tmp258, r800_fff_tmp259;
		BitBlock r800_fff_tmp260, r800_fff_tmp261, cc_range_d01_d3d_3;
		BitBlock sequence_e0_b4_adv, r800_fff_tmp262, byte_b5, sequence_e0_b5;
		BitBlock r800_fff_tmp263, r800_fff_tmp264, r800_fff_tmp265, r800_fff_tmp266;
		BitBlock r800_fff_tmp267, cc_range_d40_d7a_3, sequence_e0_b5_adv;
		BitBlock r800_fff_tmp268, byte_b6, sequence_e0_b6, r800_fff_tmp269;
		BitBlock r800_fff_tmp270, r800_fff_tmp271, r800_fff_tmp272, r800_fff_tmp273;
		BitBlock r800_fff_tmp274, r800_fff_tmp275, r800_fff_tmp276, r800_fff_tmp277;
		BitBlock r800_fff_tmp278, r800_fff_tmp279, r800_fff_tmp280, r800_fff_tmp281;
		BitBlock r800_fff_tmp282, r800_fff_tmp283, cc_range_d82_dbd_3;
		BitBlock sequence_e0_b6_adv, r800_fff_tmp284, byte_b7, sequence_e0_b7;
		BitBlock r800_fff_tmp285, r800_fff_tmp286, r800_fff_tmp287, r800_fff_tmp288;
		BitBlock r800_fff_tmp289, r800_fff_tmp290, r800_fff_tmp291, r800_fff_tmp292;
		BitBlock cc_range_dc0_df2_3, sequence_e0_b7_adv, r800_fff_tmp293, byte_b8;
		BitBlock sequence_e0_b8, r800_fff_tmp294, r800_fff_tmp295, byte_range_81_ba;
		BitBlock sequence_e0_b8_adv, r800_fff_tmp296, byte_b9, sequence_e0_b9;
		BitBlock r800_fff_tmp297, cc_range_e40_e4d_3, sequence_e0_b9_adv;
		BitBlock r800_fff_tmp298, byte_ba, sequence_e0_ba, r800_fff_tmp299;
		BitBlock r800_fff_tmp300, r800_fff_tmp301, r800_fff_tmp302, r800_fff_tmp303;
		BitBlock r800_fff_tmp304, r800_fff_tmp305, r800_fff_tmp306, r800_fff_tmp307;
		BitBlock r800_fff_tmp308, r800_fff_tmp309, r800_fff_tmp310, r800_fff_tmp311;
		BitBlock r800_fff_tmp312, r800_fff_tmp313, r800_fff_tmp314, r800_fff_tmp315;
		BitBlock r800_fff_tmp316, r800_fff_tmp317, r800_fff_tmp318, r800_fff_tmp319;
		BitBlock r800_fff_tmp320, r800_fff_tmp321, cc_range_e81_ebb_3;
		BitBlock sequence_e0_ba_adv, r800_fff_tmp322, byte_bb, sequence_e0_bb;
		BitBlock r800_fff_tmp323, r800_fff_tmp324, r800_fff_tmp325, r800_fff_tmp326;
		BitBlock cc_range_ec0_edc_3, sequence_e0_bb_adv, r800_fff_tmp327, byte_bc;
		BitBlock sequence_e0_bc, byte_80, sequence_e0_bc_adv, r800_fff_tmp328, byte_bd;
		BitBlock sequence_e0_bd, r800_fff_tmp329, r800_fff_tmp330, r800_fff_tmp331;
		BitBlock cc_range_f40_f71_3, sequence_e0_bd_adv, r800_fff_tmp332, byte_be;
		BitBlock sequence_e0_be, r800_fff_tmp333, r800_fff_tmp334, r800_fff_tmp335;
		BitBlock r800_fff_tmp336, r800_fff_tmp337, r800_fff_tmp338, r800_fff_tmp339;
		BitBlock r800_fff_tmp340, cc_range_f80_f99_3, sequence_e0_be_adv;
		BitBlock r800_fff_tmp341, r800_1fff_tmp1, r800_1fff_tmp2, byte_e1;
		BitBlock r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, sequence_e1_80;
		BitBlock byte_e1_adv, r1000_1fff_tmp4, r1000_1fff_tmp5, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9, r1000_1fff_tmp10;
		BitBlock r1000_1fff_tmp11, r1000_1fff_tmp12, r1000_1fff_tmp13;
		BitBlock r1000_1fff_tmp14, r1000_1fff_tmp15, r1000_1fff_tmp16;
		BitBlock cc_range_1000_103b_3, sequence_e1_80_adv, r1000_1fff_tmp17, byte_81;
		BitBlock sequence_e1_81, r1000_1fff_tmp18, r1000_1fff_tmp19, r1000_1fff_tmp20;
		BitBlock r1000_1fff_tmp21, r1000_1fff_tmp22, r1000_1fff_tmp23;
		BitBlock r1000_1fff_tmp24, r1000_1fff_tmp25, r1000_1fff_tmp26;
		BitBlock r1000_1fff_tmp27, r1000_1fff_tmp28, r1000_1fff_tmp29;
		BitBlock r1000_1fff_tmp30, r1000_1fff_tmp31, r1000_1fff_tmp32;
		BitBlock r1000_1fff_tmp33, r1000_1fff_tmp34, cc_range_1050_106e_3;
		BitBlock sequence_e1_81_adv, r1000_1fff_tmp35, r1000_1fff_tmp36;
		BitBlock r1000_1fff_tmp37, byte_82, sequence_e1_82, r1000_1fff_tmp38;
		BitBlock r1000_1fff_tmp39, r1000_1fff_tmp40, r1000_1fff_tmp41;
		BitBlock r1000_1fff_tmp42, r1000_1fff_tmp43, r1000_1fff_tmp44;
		BitBlock r1000_1fff_tmp45, r1000_1fff_tmp46, r1000_1fff_tmp47;
		BitBlock cc_range_1080_10a0_3, sequence_e1_82_adv, r1000_1fff_tmp48;
		BitBlock r1000_1fff_tmp49, byte_83, sequence_e1_83, r1000_1fff_tmp50;
		BitBlock r1000_1fff_tmp51, r1000_1fff_tmp52, r1000_1fff_tmp53;
		BitBlock r1000_1fff_tmp54, r1000_1fff_tmp55, r1000_1fff_tmp56;
		BitBlock r1000_1fff_tmp57, r1000_1fff_tmp58, r1000_1fff_tmp59;
		BitBlock r1000_1fff_tmp60, r1000_1fff_tmp61, r1000_1fff_tmp62;
		BitBlock r1000_1fff_tmp63, cc_range_10c0_10fc_3, sequence_e1_83_adv;
		BitBlock r1000_1fff_tmp64, r1000_1fff_tmp65, byte_range_84_88;
		BitBlock byte_e1_byte_range_84_88, r1000_1fff_tmp66;
		BitBlock byte_e1_byte_range_84_88_sfx, r1000_1fff_tmp67, r1000_1fff_tmp68;
		BitBlock byte_89, sequence_e1_89, r1000_1fff_tmp69, byte_range_80_88;
		BitBlock r1000_1fff_tmp70, sequence_e1_89_byte_range_80_88, r1000_1fff_tmp71;
		BitBlock byte_8a, sequence_e1_8a, r1000_1fff_tmp72;
		BitBlock sequence_e1_8a_byte_range_80_88, r1000_1fff_tmp73, byte_8b;
		BitBlock sequence_e1_8b, r1000_1fff_tmp74, sequence_e1_8b_80, r1000_1fff_tmp75;
		BitBlock byte_8c, sequence_e1_8c, r1000_1fff_tmp76, r1000_1fff_tmp77;
		BitBlock byte_range_80_90, r1000_1fff_tmp78, sequence_e1_8c_byte_range_80_90;
		BitBlock byte_8d, sequence_e1_8d, byte_range_80_9a, r1000_1fff_tmp79;
		BitBlock sequence_e1_8d_byte_range_80_9a, byte_8e, sequence_e1_8e;
		BitBlock r1000_1fff_tmp80, sequence_e1_8e_byte_range_80_8f, r1000_1fff_tmp81;
		BitBlock byte_8f, sequence_e1_8f, r1000_1fff_tmp82, r1000_1fff_tmp83;
		BitBlock r1000_1fff_tmp84, byte_range_80_b4, r1000_1fff_tmp85;
		BitBlock sequence_e1_8f_byte_range_80_b4, r1000_1fff_tmp86, byte_90;
		BitBlock sequence_e1_90, r1000_1fff_tmp87, r1000_1fff_tmp88, byte_range_81_bf;
		BitBlock r1000_1fff_tmp89, sequence_e1_90_byte_range_81_bf, byte_91;
		BitBlock sequence_e1_91, r1000_1fff_tmp90, sequence_e1_91_byte_range_80_bf;
		BitBlock byte_99, sequence_e1_99, r1000_1fff_tmp91, r1000_1fff_tmp92;
		BitBlock r1000_1fff_tmp93, byte_range_80_ac, r1000_1fff_tmp94;
		BitBlock sequence_e1_99_byte_range_80_ac, byte_9a, sequence_e1_9a;
		BitBlock byte_range_81_9a, r1000_1fff_tmp95, sequence_e1_9a_byte_range_81_9a;
		BitBlock byte_9b, sequence_e1_9b, r1000_1fff_tmp96, r1000_1fff_tmp97;
		BitBlock byte_range_80_aa, r1000_1fff_tmp98, sequence_e1_9b_byte_range_80_aa;
		BitBlock byte_9c, sequence_e1_9c, r1000_1fff_tmp99, byte_range_80_8c;
		BitBlock r1000_1fff_tmp100, sequence_e1_9c_byte_range_80_8c, byte_9d;
		BitBlock sequence_e1_9d, r1000_1fff_tmp101, byte_range_80_93;
		BitBlock r1000_1fff_tmp102, sequence_e1_9d_byte_range_80_93, byte_9e;
		BitBlock sequence_e1_9e, r1000_1fff_tmp103, byte_range_80_b3;
		BitBlock r1000_1fff_tmp104, sequence_e1_9e_byte_range_80_b3, byte_9f;
		BitBlock sequence_e1_9f, r1000_1fff_tmp105, sequence_e1_9f_byte_range_80_88;
		BitBlock r1000_1fff_tmp106, sequence_e1_a0, byte_range_a0_bf;
		BitBlock r1000_1fff_tmp107, sequence_e1_a0_byte_range_a0_bf, sequence_e1_a1;
		BitBlock r1000_1fff_tmp108, sequence_e1_a1_byte_range_80_b7, sequence_e1_a2;
		BitBlock r1000_1fff_tmp109, sequence_e1_a2_byte_range_80_aa, sequence_e1_a3;
		BitBlock r1000_1fff_tmp110, r1000_1fff_tmp111, r1000_1fff_tmp112;
		BitBlock byte_range_80_b5, r1000_1fff_tmp113, sequence_e1_a3_byte_range_80_b5;
		BitBlock sequence_e1_a4, r1000_1fff_tmp114, byte_range_80_9e;
		BitBlock r1000_1fff_tmp115, sequence_e1_a4_byte_range_80_9e, r1000_1fff_tmp116;
		BitBlock sequence_e1_a5, r1000_1fff_tmp117, r1000_1fff_tmp118;
		BitBlock byte_range_90_ad, r1000_1fff_tmp119, sequence_e1_a5_byte_range_90_ad;
		BitBlock r1000_1fff_tmp120, sequence_e1_a6, r1000_1fff_tmp121;
		BitBlock r1000_1fff_tmp122, byte_range_80_ab, r1000_1fff_tmp123;
		BitBlock sequence_e1_a6_byte_range_80_ab, sequence_e1_a7, r1000_1fff_tmp124;
		BitBlock r1000_1fff_tmp125, byte_range_80_89, r1000_1fff_tmp126;
		BitBlock sequence_e1_a7_byte_range_80_89, sequence_e1_a8, r1000_1fff_tmp127;
		BitBlock byte_range_80_9b, r1000_1fff_tmp128, sequence_e1_a8_byte_range_80_9b;
		BitBlock sequence_e1_a9, r1000_1fff_tmp129, sequence_e1_a9_byte_range_80_9e;
		BitBlock sequence_e1_aa, r1000_1fff_tmp130, sequence_e1_aa_a7, sequence_e1_ac;
		BitBlock r1000_1fff_tmp131, sequence_e1_ac_byte_range_80_b3, sequence_e1_ad;
		BitBlock byte_range_80_83, r1000_1fff_tmp132, sequence_e1_ad_byte_range_80_83;
		BitBlock sequence_e1_ae, r1000_1fff_tmp133, r1000_1fff_tmp134;
		BitBlock byte_range_80_a9, r1000_1fff_tmp135, sequence_e1_ae_byte_range_80_a9;
		BitBlock sequence_e1_af, r1000_1fff_tmp136, r1000_1fff_tmp137;
		BitBlock byte_range_80_a5, r1000_1fff_tmp138, sequence_e1_af_byte_range_80_a5;
		BitBlock r1000_1fff_tmp139, sequence_e1_b0, r1000_1fff_tmp140;
		BitBlock sequence_e1_b0_byte_range_80_b5, sequence_e1_b1, r1000_1fff_tmp141;
		BitBlock r1000_1fff_tmp142, sequence_e1_b1_byte_range_8d_8f, sequence_e1_b3;
		BitBlock r1000_1fff_tmp143, r1000_1fff_tmp144, byte_range_a9_ac;
		BitBlock r1000_1fff_tmp145, sequence_e1_b3_byte_range_a9_ac, sequence_e1_b4;
		BitBlock r1000_1fff_tmp146, sequence_e1_b4_byte_range_80_bf, sequence_e1_b7;
		BitBlock r1000_1fff_tmp147, r1000_1fff_tmp148, byte_range_a7_b4;
		BitBlock r1000_1fff_tmp149, sequence_e1_b7_byte_range_a7_b4, sequence_e1_b8;
		BitBlock r1000_1fff_tmp150, sequence_e1_b8_byte_range_80_bf, sequence_e1_bc;
		BitBlock byte_range_80_95, r1000_1fff_tmp151, sequence_e1_bc_byte_range_80_95;
		BitBlock sequence_e1_bd, r1000_1fff_tmp152, byte_range_80_85;
		BitBlock r1000_1fff_tmp153, sequence_e1_bd_byte_range_80_85, sequence_e1_be;
		BitBlock r1000_1fff_tmp154, sequence_e1_be_byte_range_80_b4, byte_bf;
		BitBlock sequence_e1_bf, r1000_1fff_tmp155, r1000_1fff_tmp156;
		BitBlock byte_range_82_84, r1000_1fff_tmp157, sequence_e1_bf_byte_range_82_84;
		BitBlock r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5, sequence_e2_81;
		BitBlock byte_e2_adv, r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8;
		BitBlock r2000_2fff_tmp9, r2000_2fff_tmp10, cc_range_2071_207f_3;
		BitBlock sequence_e2_81_adv, r2000_2fff_tmp11, sequence_e2_82;
		BitBlock r2000_2fff_tmp12, r2000_2fff_tmp13, r2000_2fff_tmp14;
		BitBlock r2000_2fff_tmp15, byte_range_90_9c, sequence_e2_82_adv;
		BitBlock r2000_2fff_tmp16, byte_84, sequence_e2_84, r2000_2fff_tmp17;
		BitBlock r2000_2fff_tmp18, r2000_2fff_tmp19, r2000_2fff_tmp20;
		BitBlock r2000_2fff_tmp21, r2000_2fff_tmp22, r2000_2fff_tmp23;
		BitBlock r2000_2fff_tmp24, r2000_2fff_tmp25, r2000_2fff_tmp26;
		BitBlock r2000_2fff_tmp27, r2000_2fff_tmp28, r2000_2fff_tmp29;
		BitBlock r2000_2fff_tmp30, r2000_2fff_tmp31, r2000_2fff_tmp32;
		BitBlock r2000_2fff_tmp33, r2000_2fff_tmp34, r2000_2fff_tmp35;
		BitBlock r2000_2fff_tmp36, r2000_2fff_tmp37, r2000_2fff_tmp38;
		BitBlock r2000_2fff_tmp39, r2000_2fff_tmp40, r2000_2fff_tmp41;
		BitBlock r2000_2fff_tmp42, r2000_2fff_tmp43, r2000_2fff_tmp44;
		BitBlock r2000_2fff_tmp45, r2000_2fff_tmp46, r2000_2fff_tmp47;
		BitBlock r2000_2fff_tmp48, r2000_2fff_tmp49, r2000_2fff_tmp50;
		BitBlock r2000_2fff_tmp51, r2000_2fff_tmp52, r2000_2fff_tmp53;
		BitBlock r2000_2fff_tmp54, cc_range_2102_213c_3, sequence_e2_84_adv;
		BitBlock r2000_2fff_tmp55, sequence_e2_85, r2000_2fff_tmp56, r2000_2fff_tmp57;
		BitBlock r2000_2fff_tmp58, r2000_2fff_tmp59, r2000_2fff_tmp60;
		BitBlock cc_range_2145_2160_3, sequence_e2_85_adv, r2000_2fff_tmp61, byte_86;
		BitBlock sequence_e2_86, r2000_2fff_tmp62, r2000_2fff_tmp63;
		BitBlock sequence_e2_86_adv, r2000_2fff_tmp64, byte_92, sequence_e2_92;
		BitBlock r2000_2fff_tmp65, r2000_2fff_tmp66, byte_range_b6_bf;
		BitBlock sequence_e2_92_adv, r2000_2fff_tmp67, r2000_2fff_tmp68, byte_93;
		BitBlock sequence_e2_93, r2000_2fff_tmp69, r2000_2fff_tmp70;
		BitBlock sequence_e2_93_adv, r2000_2fff_tmp71, sequence_e2_b0;
		BitBlock r2000_2fff_tmp72, r2000_2fff_tmp73, r2000_2fff_tmp74;
		BitBlock cc_range_2c00_2c30_3, sequence_e2_b0_adv, r2000_2fff_tmp75;
		BitBlock sequence_e2_b1, r2000_2fff_tmp76, r2000_2fff_tmp77;
		BitBlock cc_range_2c40_2c60_3, sequence_e2_b1_adv, r2000_2fff_tmp78;
		BitBlock sequence_e2_b2, sequence_e2_b2_adv, r2000_2fff_tmp79;
		BitBlock r2000_2fff_tmp80, sequence_e2_b3, r2000_2fff_tmp81, r2000_2fff_tmp82;
		BitBlock r2000_2fff_tmp83, r2000_2fff_tmp84, r2000_2fff_tmp85;
		BitBlock r2000_2fff_tmp86, r2000_2fff_tmp87, r2000_2fff_tmp88;
		BitBlock r2000_2fff_tmp89, r2000_2fff_tmp90, cc_range_2cc0_2cf2_3;
		BitBlock sequence_e2_b3_adv, r2000_2fff_tmp91, sequence_e2_b4;
		BitBlock r2000_2fff_tmp92, r2000_2fff_tmp93, r2000_2fff_tmp94;
		BitBlock r2000_2fff_tmp95, r2000_2fff_tmp96, r2000_2fff_tmp97;
		BitBlock r2000_2fff_tmp98, r2000_2fff_tmp99, cc_range_2d00_2d30_3;
		BitBlock sequence_e2_b4_adv, r2000_2fff_tmp100, sequence_e2_b5;
		BitBlock r2000_2fff_tmp101, r2000_2fff_tmp102, r2000_2fff_tmp103;
		BitBlock r2000_2fff_tmp104, cc_range_2d40_2d6f_3, sequence_e2_b5_adv;
		BitBlock r2000_2fff_tmp105, sequence_e2_b6, r2000_2fff_tmp106;
		BitBlock r2000_2fff_tmp107, r2000_2fff_tmp108, r2000_2fff_tmp109;
		BitBlock r2000_2fff_tmp110, r2000_2fff_tmp111, r2000_2fff_tmp112;
		BitBlock r2000_2fff_tmp113, r2000_2fff_tmp114, r2000_2fff_tmp115;
		BitBlock r2000_2fff_tmp116, r2000_2fff_tmp117, r2000_2fff_tmp118;
		BitBlock r2000_2fff_tmp119, r2000_2fff_tmp120, cc_range_2d80_2db8_3;
		BitBlock sequence_e2_b6_adv, r2000_2fff_tmp121, sequence_e2_b7;
		BitBlock r2000_2fff_tmp122, r2000_2fff_tmp123, r2000_2fff_tmp124;
		BitBlock r2000_2fff_tmp125, r2000_2fff_tmp126, r2000_2fff_tmp127;
		BitBlock r2000_2fff_tmp128, r2000_2fff_tmp129, cc_range_2dc0_2de0_3;
		BitBlock sequence_e2_b7_adv, r2000_2fff_tmp130, sequence_e2_b8;
		BitBlock sequence_e2_b8_adv, r2000_2fff_tmp131, r2000_4dff_tmp3, byte_e3;
		BitBlock r2000_4dff_tmp4, r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3;
		BitBlock sequence_e3_80, byte_e3_adv, r3000_4dff_tmp4, r3000_4dff_tmp5;
		BitBlock r3000_4dff_tmp6, r3000_4dff_tmp7, r3000_4dff_tmp8, r3000_4dff_tmp9;
		BitBlock r3000_4dff_tmp10, r3000_4dff_tmp11, r3000_4dff_tmp12;
		BitBlock r3000_4dff_tmp13, r3000_4dff_tmp14, r3000_4dff_tmp15;
		BitBlock r3000_4dff_tmp16, r3000_4dff_tmp17, r3000_4dff_tmp18;
		BitBlock r3000_4dff_tmp19, r3000_4dff_tmp20, r3000_4dff_tmp21;
		BitBlock r3000_4dff_tmp22, cc_range_3005_3038_3, sequence_e3_80_adv;
		BitBlock r3000_4dff_tmp23, r3000_4dff_tmp24, r3000_4dff_tmp25, sequence_e3_81;
		BitBlock r3000_4dff_tmp26, r3000_4dff_tmp27, sequence_e3_81_adv;
		BitBlock r3000_4dff_tmp28, sequence_e3_82, r3000_4dff_tmp29, r3000_4dff_tmp30;
		BitBlock r3000_4dff_tmp31, r3000_4dff_tmp32, r3000_4dff_tmp33;
		BitBlock r3000_4dff_tmp34, r3000_4dff_tmp35, r3000_4dff_tmp36;
		BitBlock r3000_4dff_tmp37, r3000_4dff_tmp38, r3000_4dff_tmp39;
		BitBlock r3000_4dff_tmp40, r3000_4dff_tmp41, cc_range_3080_30a1_3;
		BitBlock sequence_e3_82_adv, r3000_4dff_tmp42, sequence_e3_83;
		BitBlock r3000_4dff_tmp43, r3000_4dff_tmp44, r3000_4dff_tmp45;
		BitBlock r3000_4dff_tmp46, cc_range_30c0_30fc_3, sequence_e3_83_adv;
		BitBlock r3000_4dff_tmp47, sequence_e3_84, r3000_4dff_tmp48, r3000_4dff_tmp49;
		BitBlock r3000_4dff_tmp50, r3000_4dff_tmp51, r3000_4dff_tmp52;
		BitBlock r3000_4dff_tmp53, r3000_4dff_tmp54, r3000_4dff_tmp55;
		BitBlock r3000_4dff_tmp56, cc_range_3105_3131_3, sequence_e3_84_adv;
		BitBlock r3000_4dff_tmp57, r3000_4dff_tmp58, sequence_e3_85;
		BitBlock sequence_e3_85_adv, r3000_4dff_tmp59, r3000_4dff_tmp60;
		BitBlock r3000_4dff_tmp61, sequence_e3_86, r3000_4dff_tmp62, r3000_4dff_tmp63;
		BitBlock r3000_4dff_tmp64, r3000_4dff_tmp65, cc_range_3180_31a0_3;
		BitBlock sequence_e3_86_adv, r3000_4dff_tmp66, r3000_4dff_tmp67, byte_87;
		BitBlock sequence_e3_87, sequence_e3_87_adv, r3000_4dff_tmp68;
		BitBlock byte_e3_byte_range_90_bf, r3000_4dff_tmp69;
		BitBlock byte_e3_byte_range_90_bf_sfx, r3000_4dff_tmp70, r3000_4dff_tmp71;
		BitBlock r3000_4dff_tmp72, r3000_4dff_tmp73, byte_e4_byte_range_80_b5;
		BitBlock r3000_4dff_tmp74, byte_e4_byte_range_80_b5_sfx, byte_e4_adv;
		BitBlock sequence_e4_b6, r3000_4dff_tmp75, sequence_e4_b6_byte_range_80_b5;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, byte_range_b8_bf, r800_ffff_tmp11;
		BitBlock r800_ffff_tmp12, r800_ffff_tmp13, r800_ffff_tmp14, r800_ffff_tmp15;
		BitBlock byte_range_e5_e9, r800_ffff_tmp16, byte_e4_byte_range_b8_bf;
		BitBlock r4e00_9fff_tmp1, byte_e4_byte_range_b8_bf_sfx, r4e00_9fff_tmp2;
		BitBlock r4e00_9fff_tmp3, r4e00_9fff_tmp4, byte_range_e5_e8, r4e00_9fff_tmp5;
		BitBlock byte_range_e5_e8_sfx, r4e00_9fff_tmp6, byte_range_e5_e8_sfx_sfx;
		BitBlock r4e00_9fff_tmp7, r4e00_9fff_tmp8, r4e00_9fff_tmp9, byte_e9;
		BitBlock r4e00_9fff_tmp10, r4e00_9fff_tmp11, byte_e9_adv, sequence_e9_80;
		BitBlock r4e00_9fff_tmp12, r4e00_9fff_tmp13, sequence_e9_80_byte_range_80_8c;
		BitBlock r800_ffff_tmp17, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, byte_range_80_91, ra000_ffff_tmp7;
		BitBlock byte_ea_byte_range_80_91, ra000_ffff_tmp8;
		BitBlock byte_ea_byte_range_80_91_sfx, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, byte_ea_adv, sequence_ea_92, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, ra000_ffff_tmp14, ra000_ffff_tmp15;
		BitBlock sequence_ea_92_byte_range_80_8c, ra000_ffff_tmp16, sequence_ea_93;
		BitBlock ra000_ffff_tmp17, ra000_ffff_tmp18, ra000_ffff_tmp19;
		BitBlock ra000_ffff_tmp20, ra000_ffff_tmp21, byte_range_90_bd;
		BitBlock ra000_ffff_tmp22, sequence_ea_93_byte_range_90_bd, byte_94;
		BitBlock sequence_ea_94, ra000_ffff_tmp23, sequence_ea_94_byte_range_80_bf;
		BitBlock ra000_ffff_tmp24, byte_98, sequence_ea_98, ra000_ffff_tmp25;
		BitBlock sequence_ea_98_byte_range_80_8c, ra000_ffff_tmp26, ra000_ffff_tmp27;
		BitBlock sequence_ea_99, ra000_ffff_tmp28, ra000_ffff_tmp29, ra000_ffff_tmp30;
		BitBlock byte_range_80_ae, ra000_ffff_tmp31, sequence_ea_99_byte_range_80_ae;
		BitBlock sequence_ea_9a, ra000_ffff_tmp32, byte_range_80_9d, ra000_ffff_tmp33;
		BitBlock sequence_ea_9a_byte_range_80_9d, ra000_ffff_tmp34, sequence_ea_9b;
		BitBlock ra000_ffff_tmp35, sequence_ea_9b_byte_range_80_af, ra000_ffff_tmp36;
		BitBlock sequence_ea_9c, ra000_ffff_tmp37, ra000_ffff_tmp38, byte_range_97_9f;
		BitBlock ra000_ffff_tmp39, sequence_ea_9c_byte_range_97_9f, ra000_ffff_tmp40;
		BitBlock sequence_ea_9d, ra000_ffff_tmp41, sequence_ea_9d_byte_range_80_bf;
		BitBlock ra000_ffff_tmp42, sequence_ea_9e, ra000_ffff_tmp43, ra000_ffff_tmp44;
		BitBlock ra000_ffff_tmp45, sequence_ea_9e_byte_range_80_88, sequence_ea_9f;
		BitBlock ra000_ffff_tmp46, byte_range_b7_bf, ra000_ffff_tmp47;
		BitBlock sequence_ea_9f_byte_range_b7_bf, ra000_ffff_tmp48, sequence_ea_a0;
		BitBlock ra000_ffff_tmp49, sequence_ea_a0_byte_range_80_81, ra000_ffff_tmp50;
		BitBlock sequence_ea_a1, ra000_ffff_tmp51, ra000_ffff_tmp52, ra000_ffff_tmp53;
		BitBlock sequence_ea_a1_byte_range_80_b3, sequence_ea_a2, ra000_ffff_tmp54;
		BitBlock sequence_ea_a2_byte_range_80_bf, sequence_ea_a3, ra000_ffff_tmp55;
		BitBlock sequence_ea_a3_byte_range_80_83, sequence_ea_a4, ra000_ffff_tmp56;
		BitBlock ra000_ffff_tmp57, ra000_ffff_tmp58, ra000_ffff_tmp59;
		BitBlock ra000_ffff_tmp60, byte_range_8a_aa, ra000_ffff_tmp61;
		BitBlock sequence_ea_a4_byte_range_8a_aa, ra000_ffff_tmp62, sequence_ea_a5;
		BitBlock ra000_ffff_tmp63, ra000_ffff_tmp64, byte_range_80_92;
		BitBlock ra000_ffff_tmp65, sequence_ea_a5_byte_range_80_92, ra000_ffff_tmp66;
		BitBlock sequence_ea_a6, ra000_ffff_tmp67, byte_range_80_b2, ra000_ffff_tmp68;
		BitBlock sequence_ea_a6_byte_range_80_b2, ra000_ffff_tmp69, sequence_ea_a7;
		BitBlock ra000_ffff_tmp70, sequence_ea_a7_8f, sequence_ea_a8, ra000_ffff_tmp71;
		BitBlock ra000_ffff_tmp72, byte_range_80_b6, ra000_ffff_tmp73;
		BitBlock sequence_ea_a8_byte_range_80_b6, sequence_ea_a9, ra000_ffff_tmp74;
		BitBlock ra000_ffff_tmp75, byte_range_80_8d, ra000_ffff_tmp76;
		BitBlock sequence_ea_a9_byte_range_80_8d, sequence_ea_aa, ra000_ffff_tmp77;
		BitBlock ra000_ffff_tmp78, byte_range_80_be, ra000_ffff_tmp79;
		BitBlock sequence_ea_aa_byte_range_80_be, sequence_ea_ab, ra000_ffff_tmp80;
		BitBlock sequence_ea_ab_80, sequence_ea_ac, ra000_ffff_tmp81, ra000_ffff_tmp82;
		BitBlock ra000_ffff_tmp83, byte_range_81_86, ra000_ffff_tmp84;
		BitBlock sequence_ea_ac_byte_range_81_86, sequence_ea_ad, ra000_ffff_tmp85;
		BitBlock ra000_ffff_tmp86, sequence_ea_ad_byte_range_80_9a, sequence_ea_af;
		BitBlock ra000_ffff_tmp87, ra000_ffff_tmp88, sequence_ea_af_byte_range_80_aa;
		BitBlock sequence_ea_b0, ra000_ffff_tmp89, sequence_ea_b0_byte_range_80_bf;
		BitBlock ra000_ffff_tmp90, ra000_ffff_tmp91, byte_range_eb_ec;
		BitBlock ra000_ffff_tmp92, byte_range_eb_ec_sfx, ra000_ffff_tmp93;
		BitBlock byte_range_eb_ec_sfx_sfx, byte_ed, byte_ed_adv, sequence_ed_80;
		BitBlock ra000_ffff_tmp94, ra000_ffff_tmp95, byte_range_80_a3;
		BitBlock ra000_ffff_tmp96, sequence_ed_80_byte_range_80_a3, byte_ef;
		BitBlock ra000_ffff_tmp97, ra000_ffff_tmp98, byte_range_a4_a8;
		BitBlock ra000_ffff_tmp99, byte_ef_byte_range_a4_a8, ra000_ffff_tmp100;
		BitBlock byte_ef_byte_range_a4_a8_sfx, byte_ef_adv, sequence_ef_a9;
		BitBlock ra000_ffff_tmp101, ra000_ffff_tmp102, byte_range_80_ad;
		BitBlock ra000_ffff_tmp103, sequence_ef_a9_byte_range_80_ad, sequence_ef_aa;
		BitBlock ra000_ffff_tmp104, sequence_ef_aa_byte_range_80_bf, sequence_ef_ab;
		BitBlock ra000_ffff_tmp105, byte_range_80_99, ra000_ffff_tmp106;
		BitBlock sequence_ef_ab_byte_range_80_99, sequence_ef_ac, byte_range_80_86;
		BitBlock ra000_ffff_tmp107, sequence_ef_ac_byte_range_80_86, sequence_ef_ad;
		BitBlock ra000_ffff_tmp108, sequence_ef_ad_byte_range_80_81, sequence_ef_ae;
		BitBlock ra000_ffff_tmp109, ra000_ffff_tmp110, sequence_ef_ae_byte_range_80_b1;
		BitBlock sequence_ef_af, ra000_ffff_tmp111, byte_range_93_bf;
		BitBlock ra000_ffff_tmp112, sequence_ef_af_byte_range_93_bf, sequence_ef_b0;
		BitBlock ra000_ffff_tmp113, sequence_ef_b0_byte_range_80_bf, sequence_ef_b4;
		BitBlock ra000_ffff_tmp114, byte_range_80_bd, ra000_ffff_tmp115;
		BitBlock sequence_ef_b4_byte_range_80_bd, sequence_ef_b5, ra000_ffff_tmp116;
		BitBlock sequence_ef_b5_byte_range_90_bf, sequence_ef_b6, ra000_ffff_tmp117;
		BitBlock sequence_ef_b6_byte_range_80_8f, sequence_ef_b7, ra000_ffff_tmp118;
		BitBlock sequence_ef_b7_byte_range_80_87, sequence_ef_b9, ra000_ffff_tmp119;
		BitBlock byte_range_b0_b4, ra000_ffff_tmp120, sequence_ef_b9_byte_range_b0_b4;
		BitBlock sequence_ef_ba, ra000_ffff_tmp121, sequence_ef_ba_byte_range_80_bf;
		BitBlock sequence_ef_bb, ra000_ffff_tmp122, ra000_ffff_tmp123;
		BitBlock ra000_ffff_tmp124, byte_range_80_bc, ra000_ffff_tmp125;
		BitBlock sequence_ef_bb_byte_range_80_bc, sequence_ef_bc, ra000_ffff_tmp126;
		BitBlock byte_range_a1_ba, ra000_ffff_tmp127, sequence_ef_bc_byte_range_a1_ba;
		BitBlock sequence_ef_bd, ra000_ffff_tmp128, sequence_ef_bd_byte_range_81_9a;
		BitBlock sequence_ef_be, ra000_ffff_tmp129, sequence_ef_be_byte_range_80_be;
		BitBlock sequence_ef_bf, byte_range_82_87, ra000_ffff_tmp130;
		BitBlock sequence_ef_bf_byte_range_82_87, r80_10ffff_tmp2, byte_range_f0_ff;
		BitBlock byte_f0, r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3;
		BitBlock r10000_10ffff_tmp4, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, r10000_10ffff_tmp7, sequence_f0_90_80;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp8, r10000_10ffff_tmp9;
		BitBlock r10000_10ffff_tmp10, r10000_10ffff_tmp11, r10000_10ffff_tmp12;
		BitBlock r10000_10ffff_tmp13, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock r10000_10ffff_tmp22, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock r10000_10ffff_tmp25, r10000_10ffff_tmp26, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, cc_range_10000_1003f_4, sequence_f0_90_80_adv;
		BitBlock r10000_10ffff_tmp29, r10000_10ffff_tmp30, r10000_10ffff_tmp31;
		BitBlock sequence_f0_90_81, r10000_10ffff_tmp32, r10000_10ffff_tmp33;
		BitBlock r10000_10ffff_tmp34, r10000_10ffff_tmp35, cc_range_10040_10050_4;
		BitBlock sequence_f0_90_81_adv, r10000_10ffff_tmp36, r10000_10ffff_tmp37;
		BitBlock r10000_10ffff_tmp38, sequence_f0_90_82, sequence_f0_90_82_adv;
		BitBlock r10000_10ffff_tmp39, r10000_10ffff_tmp40, r10000_10ffff_tmp41;
		BitBlock r10000_10ffff_tmp42, sequence_f0_90_83, r10000_10ffff_tmp43;
		BitBlock r10000_10ffff_tmp44, byte_range_80_ba, sequence_f0_90_83_adv;
		BitBlock r10000_10ffff_tmp45, r10000_10ffff_tmp46, r10000_10ffff_tmp47;
		BitBlock sequence_f0_90_85, r10000_10ffff_tmp48, r10000_10ffff_tmp49;
		BitBlock r10000_10ffff_tmp50, r10000_10ffff_tmp51, sequence_f0_90_85_adv;
		BitBlock r10000_10ffff_tmp52, r10000_10ffff_tmp53, r10000_10ffff_tmp54;
		BitBlock sequence_f0_90_8a, r10000_10ffff_tmp55, r10000_10ffff_tmp56;
		BitBlock r10000_10ffff_tmp57, r10000_10ffff_tmp58, cc_range_10280_102a0_4;
		BitBlock sequence_f0_90_8a_adv, r10000_10ffff_tmp59, r10000_10ffff_tmp60;
		BitBlock sequence_f0_90_8b, r10000_10ffff_tmp61, sequence_f0_90_8b_adv;
		BitBlock r10000_10ffff_tmp62, r10000_10ffff_tmp63, sequence_f0_90_8c;
		BitBlock r10000_10ffff_tmp64, cc_range_10300_10330_4, sequence_f0_90_8c_adv;
		BitBlock r10000_10ffff_tmp65, r10000_10ffff_tmp66, sequence_f0_90_8d;
		BitBlock r10000_10ffff_tmp67, r10000_10ffff_tmp68, r10000_10ffff_tmp69;
		BitBlock r10000_10ffff_tmp70, cc_range_10340_10350_4, sequence_f0_90_8d_adv;
		BitBlock r10000_10ffff_tmp71, r10000_10ffff_tmp72, sequence_f0_90_8e;
		BitBlock r10000_10ffff_tmp73, r10000_10ffff_tmp74, r10000_10ffff_tmp75;
		BitBlock cc_range_10380_103a0_4, sequence_f0_90_8e_adv, r10000_10ffff_tmp76;
		BitBlock sequence_f0_90_8f, r10000_10ffff_tmp77, r10000_10ffff_tmp78;
		BitBlock r10000_10ffff_tmp79, r10000_10ffff_tmp80, r10000_10ffff_tmp81;
		BitBlock r10000_10ffff_tmp82, cc_range_103c0_103d1_4, sequence_f0_90_8f_adv;
		BitBlock r10000_10ffff_tmp83, r10000_10ffff_tmp84, byte_range_90_91;
		BitBlock sequence_f0_90_byte_range_90_91, r10000_10ffff_tmp85;
		BitBlock sequence_f0_90_byte_range_90_91_sfx, sequence_f0_90_92;
		BitBlock r10000_10ffff_tmp86, sequence_f0_90_92_byte_range_80_9d;
		BitBlock r10000_10ffff_tmp87, sequence_f0_90_94, r10000_10ffff_tmp88;
		BitBlock r10000_10ffff_tmp89, byte_range_80_a7, r10000_10ffff_tmp90;
		BitBlock sequence_f0_90_94_byte_range_80_a7, byte_95, sequence_f0_90_95;
		BitBlock r10000_10ffff_tmp91, r10000_10ffff_tmp92, r10000_10ffff_tmp93;
		BitBlock sequence_f0_90_95_byte_range_80_a3, r10000_10ffff_tmp94;
		BitBlock sequence_f0_90_98, r10000_10ffff_tmp95;
		BitBlock sequence_f0_90_98_byte_range_80_bf, sequence_f0_90_9c;
		BitBlock r10000_10ffff_tmp96, r10000_10ffff_tmp97, r10000_10ffff_tmp98;
		BitBlock sequence_f0_90_9c_byte_range_80_b6, sequence_f0_90_9d;
		BitBlock r10000_10ffff_tmp99, r10000_10ffff_tmp100, r10000_10ffff_tmp101;
		BitBlock sequence_f0_90_9d_byte_range_80_95, r10000_10ffff_tmp102;
		BitBlock sequence_f0_90_a0, r10000_10ffff_tmp103, r10000_10ffff_tmp104;
		BitBlock sequence_f0_90_a0_byte_range_80_85, sequence_f0_90_a1;
		BitBlock r10000_10ffff_tmp105, sequence_f0_90_a1_byte_range_80_95;
		BitBlock sequence_f0_90_a2, r10000_10ffff_tmp106, r10000_10ffff_tmp107;
		BitBlock sequence_f0_90_a2_byte_range_80_9e, sequence_f0_90_a4;
		BitBlock r10000_10ffff_tmp108, sequence_f0_90_a4_byte_range_80_95;
		BitBlock r10000_10ffff_tmp109, sequence_f0_90_a6, r10000_10ffff_tmp110;
		BitBlock r10000_10ffff_tmp111, r10000_10ffff_tmp112;
		BitBlock sequence_f0_90_a6_byte_range_80_b7, sequence_f0_90_a8;
		BitBlock r10000_10ffff_tmp113, sequence_f0_90_a8_byte_range_80_83;
		BitBlock r10000_10ffff_tmp114, sequence_f0_90_a9, byte_range_a0_bc;
		BitBlock r10000_10ffff_tmp115, sequence_f0_90_a9_byte_range_a0_bc;
		BitBlock sequence_f0_90_aa, byte_range_80_9c, r10000_10ffff_tmp116;
		BitBlock sequence_f0_90_aa_byte_range_80_9c, sequence_f0_90_ab;
		BitBlock r10000_10ffff_tmp117, sequence_f0_90_ab_byte_range_80_87;
		BitBlock sequence_f0_90_ac, r10000_10ffff_tmp118, r10000_10ffff_tmp119;
		BitBlock sequence_f0_90_ac_byte_range_80_b5, sequence_f0_90_ad;
		BitBlock r10000_10ffff_tmp120, sequence_f0_90_ad_byte_range_80_95;
		BitBlock sequence_f0_90_ae, r10000_10ffff_tmp121, r10000_10ffff_tmp122;
		BitBlock sequence_f0_90_ae_byte_range_80_91, r10000_10ffff_tmp123;
		BitBlock sequence_f0_90_b0, r10000_10ffff_tmp124;
		BitBlock sequence_f0_90_b0_byte_range_80_bf, sequence_f0_90_b1;
		BitBlock r10000_10ffff_tmp125, r10000_10ffff_tmp126, r10000_10ffff_tmp127;
		BitBlock sequence_f0_90_b1_byte_range_80_88, sequence_f0_91;
		BitBlock r10000_10ffff_tmp128, sequence_f0_91_80, sequence_f0_91_adv;
		BitBlock sequence_f0_91_80_adv, r10000_10ffff_tmp129, sequence_f0_91_81;
		BitBlock sequence_f0_91_81_adv, r10000_10ffff_tmp130, sequence_f0_91_82;
		BitBlock r10000_10ffff_tmp131, r10000_10ffff_tmp132, r10000_10ffff_tmp133;
		BitBlock r10000_10ffff_tmp134, byte_range_82_b8, sequence_f0_91_82_adv;
		BitBlock r10000_10ffff_tmp135, sequence_f0_91_83, r10000_10ffff_tmp136;
		BitBlock r10000_10ffff_tmp137, r10000_10ffff_tmp138, byte_range_90_a8;
		BitBlock sequence_f0_91_83_adv, r10000_10ffff_tmp139, sequence_f0_91_84;
		BitBlock r10000_10ffff_tmp140, r10000_10ffff_tmp141, r10000_10ffff_tmp142;
		BitBlock sequence_f0_91_84_adv, r10000_10ffff_tmp143, sequence_f0_91_85;
		BitBlock r10000_10ffff_tmp144, r10000_10ffff_tmp145, r10000_10ffff_tmp146;
		BitBlock r10000_10ffff_tmp147, cc_range_11150_11176_4, sequence_f0_91_85_adv;
		BitBlock r10000_10ffff_tmp148, sequence_f0_91_86, sequence_f0_91_86_adv;
		BitBlock r10000_10ffff_tmp149, r10000_10ffff_tmp150, sequence_f0_91_87;
		BitBlock r10000_10ffff_tmp151, r10000_10ffff_tmp152, r10000_10ffff_tmp153;
		BitBlock cc_range_111c1_111da_4, sequence_f0_91_87_adv, r10000_10ffff_tmp154;
		BitBlock byte_88, sequence_f0_91_88, r10000_10ffff_tmp155;
		BitBlock r10000_10ffff_tmp156, r10000_10ffff_tmp157, r10000_10ffff_tmp158;
		BitBlock r10000_10ffff_tmp159, cc_range_11200_11237_4, sequence_f0_91_88_adv;
		BitBlock r10000_10ffff_tmp160, sequence_f0_91_8a, sequence_f0_91_8a_adv;
		BitBlock r10000_10ffff_tmp161, sequence_f0_91_8b, r10000_10ffff_tmp162;
		BitBlock byte_range_80_a8, sequence_f0_91_8b_adv, r10000_10ffff_tmp163;
		BitBlock sequence_f0_91_8c, r10000_10ffff_tmp164, r10000_10ffff_tmp165;
		BitBlock r10000_10ffff_tmp166, r10000_10ffff_tmp167, r10000_10ffff_tmp168;
		BitBlock r10000_10ffff_tmp169, r10000_10ffff_tmp170, r10000_10ffff_tmp171;
		BitBlock r10000_10ffff_tmp172, r10000_10ffff_tmp173, r10000_10ffff_tmp174;
		BitBlock r10000_10ffff_tmp175, r10000_10ffff_tmp176, r10000_10ffff_tmp177;
		BitBlock r10000_10ffff_tmp178, r10000_10ffff_tmp179, r10000_10ffff_tmp180;
		BitBlock r10000_10ffff_tmp181, r10000_10ffff_tmp182, r10000_10ffff_tmp183;
		BitBlock r10000_10ffff_tmp184, r10000_10ffff_tmp185, r10000_10ffff_tmp186;
		BitBlock r10000_10ffff_tmp187, r10000_10ffff_tmp188, cc_range_11301_1133d_4;
		BitBlock sequence_f0_91_8c_adv, r10000_10ffff_tmp189, sequence_f0_91_8d;
		BitBlock r10000_10ffff_tmp190, r10000_10ffff_tmp191, r10000_10ffff_tmp192;
		BitBlock r10000_10ffff_tmp193, r10000_10ffff_tmp194, r10000_10ffff_tmp195;
		BitBlock r10000_10ffff_tmp196, r10000_10ffff_tmp197, r10000_10ffff_tmp198;
		BitBlock r10000_10ffff_tmp199, r10000_10ffff_tmp200, r10000_10ffff_tmp201;
		BitBlock r10000_10ffff_tmp202, r10000_10ffff_tmp203, r10000_10ffff_tmp204;
		BitBlock cc_range_11340_1135d_4, sequence_f0_91_8d_adv, r10000_10ffff_tmp205;
		BitBlock sequence_f0_91_92, sequence_f0_91_92_adv, r10000_10ffff_tmp206;
		BitBlock sequence_f0_91_93, r10000_10ffff_tmp207, r10000_10ffff_tmp208;
		BitBlock r10000_10ffff_tmp209, cc_range_114c0_114c7_4, sequence_f0_91_93_adv;
		BitBlock r10000_10ffff_tmp210, byte_96, sequence_f0_91_96;
		BitBlock r10000_10ffff_tmp211, r10000_10ffff_tmp212, cc_range_11580_115b8_4;
		BitBlock sequence_f0_91_96_adv, r10000_10ffff_tmp213, sequence_f0_91_98;
		BitBlock r10000_10ffff_tmp214, sequence_f0_91_98_adv, r10000_10ffff_tmp215;
		BitBlock sequence_f0_91_99, r10000_10ffff_tmp216, cc_range_11640_11644_4;
		BitBlock sequence_f0_91_99_adv, r10000_10ffff_tmp217, sequence_f0_91_9a;
		BitBlock sequence_f0_91_9a_adv, r10000_10ffff_tmp218, sequence_f0_91_a2;
		BitBlock sequence_f0_91_a2_adv, r10000_10ffff_tmp219, sequence_f0_91_a3;
		BitBlock r10000_10ffff_tmp220, cc_range_118c0_118ff_4, sequence_f0_91_a3_adv;
		BitBlock r10000_10ffff_tmp221, sequence_f0_91_ab, r10000_10ffff_tmp222;
		BitBlock byte_range_80_b8, sequence_f0_91_ab_adv, r10000_10ffff_tmp223;
		BitBlock sequence_f0_92, r10000_10ffff_tmp224, sequence_f0_92_byte_range_80_8d;
		BitBlock r10000_10ffff_tmp225, sequence_f0_92_byte_range_80_8d_sfx;
		BitBlock sequence_f0_92_adv, sequence_f0_92_8e, r10000_10ffff_tmp226;
		BitBlock sequence_f0_92_8e_byte_range_80_98, sequence_f0_92_90;
		BitBlock r10000_10ffff_tmp227, sequence_f0_92_90_byte_range_80_bf;
		BitBlock sequence_f0_92_91, r10000_10ffff_tmp228, r10000_10ffff_tmp229;
		BitBlock r10000_10ffff_tmp230, sequence_f0_92_91_byte_range_80_ae;
		BitBlock sequence_f0_93, r10000_10ffff_tmp231, sequence_f0_93_byte_range_80_8f;
		BitBlock r10000_10ffff_tmp232, sequence_f0_93_byte_range_80_8f_sfx;
		BitBlock sequence_f0_93_adv, sequence_f0_93_90, r10000_10ffff_tmp233;
		BitBlock sequence_f0_93_90_byte_range_80_ae, sequence_f0_96, byte_range_a0_a7;
		BitBlock r10000_10ffff_tmp234, sequence_f0_96_byte_range_a0_a7;
		BitBlock r10000_10ffff_tmp235, sequence_f0_96_byte_range_a0_a7_sfx;
		BitBlock sequence_f0_96_adv, sequence_f0_96_a8, r10000_10ffff_tmp236;
		BitBlock sequence_f0_96_a8_byte_range_80_b8, sequence_f0_96_a9;
		BitBlock r10000_10ffff_tmp237, sequence_f0_96_a9_byte_range_80_9e;
		BitBlock sequence_f0_96_ab, r10000_10ffff_tmp238, r10000_10ffff_tmp239;
		BitBlock r10000_10ffff_tmp240, r10000_10ffff_tmp241;
		BitBlock sequence_f0_96_ab_byte_range_90_ad, sequence_f0_96_ac;
		BitBlock r10000_10ffff_tmp242, sequence_f0_96_ac_byte_range_80_b6;
		BitBlock sequence_f0_96_ad, r10000_10ffff_tmp243;
		BitBlock sequence_f0_96_ad_byte_range_80_83, sequence_f0_96_ae;
		BitBlock r10000_10ffff_tmp244, sequence_f0_96_ae_byte_range_80_8f;
		BitBlock sequence_f0_96_bc, r10000_10ffff_tmp245;
		BitBlock sequence_f0_96_bc_byte_range_80_bf, sequence_f0_96_bd;
		BitBlock r10000_10ffff_tmp246, byte_range_80_84, r10000_10ffff_tmp247;
		BitBlock sequence_f0_96_bd_byte_range_80_84, sequence_f0_96_be;
		BitBlock r10000_10ffff_tmp248, byte_range_93_9f, r10000_10ffff_tmp249;
		BitBlock sequence_f0_96_be_byte_range_93_9f, sequence_f0_9b;
		BitBlock r10000_10ffff_tmp250, sequence_f0_9b_80, sequence_f0_9b_adv;
		BitBlock sequence_f0_9b_80_adv, r10000_10ffff_tmp251, sequence_f0_9b_b0;
		BitBlock sequence_f0_9b_b0_adv, r10000_10ffff_tmp252, sequence_f0_9b_b1;
		BitBlock r10000_10ffff_tmp253, r10000_10ffff_tmp254, r10000_10ffff_tmp255;
		BitBlock r10000_10ffff_tmp256, r10000_10ffff_tmp257, cc_range_1bc40_1bc70_4;
		BitBlock sequence_f0_9b_b1_adv, r10000_10ffff_tmp258, sequence_f0_9b_b2;
		BitBlock r10000_10ffff_tmp259, r10000_10ffff_tmp260, r10000_10ffff_tmp261;
		BitBlock r10000_10ffff_tmp262, cc_range_1bc80_1bc9e_4, sequence_f0_9b_b2_adv;
		BitBlock r10000_10ffff_tmp263, sequence_f0_9d, r10000_10ffff_tmp264;
		BitBlock sequence_f0_9d_90, sequence_f0_9d_adv, sequence_f0_9d_90_adv;
		BitBlock r10000_10ffff_tmp265, sequence_f0_9d_91, r10000_10ffff_tmp266;
		BitBlock r10000_10ffff_tmp267, r10000_10ffff_tmp268, cc_range_1d440_1d456_4;
		BitBlock sequence_f0_9d_91_adv, r10000_10ffff_tmp269, sequence_f0_9d_92;
		BitBlock r10000_10ffff_tmp270, r10000_10ffff_tmp271, r10000_10ffff_tmp272;
		BitBlock r10000_10ffff_tmp273, r10000_10ffff_tmp274, r10000_10ffff_tmp275;
		BitBlock r10000_10ffff_tmp276, r10000_10ffff_tmp277, r10000_10ffff_tmp278;
		BitBlock r10000_10ffff_tmp279, r10000_10ffff_tmp280, r10000_10ffff_tmp281;
		BitBlock r10000_10ffff_tmp282, r10000_10ffff_tmp283, r10000_10ffff_tmp284;
		BitBlock r10000_10ffff_tmp285, cc_range_1d480_1d4bd_4, sequence_f0_9d_92_adv;
		BitBlock r10000_10ffff_tmp286, sequence_f0_9d_93, r10000_10ffff_tmp287;
		BitBlock r10000_10ffff_tmp288, r10000_10ffff_tmp289, r10000_10ffff_tmp290;
		BitBlock cc_range_1d4c0_1d4c5_4, sequence_f0_9d_93_adv, r10000_10ffff_tmp291;
		BitBlock sequence_f0_9d_94, r10000_10ffff_tmp292, r10000_10ffff_tmp293;
		BitBlock r10000_10ffff_tmp294, r10000_10ffff_tmp295, r10000_10ffff_tmp296;
		BitBlock r10000_10ffff_tmp297, r10000_10ffff_tmp298, r10000_10ffff_tmp299;
		BitBlock r10000_10ffff_tmp300, r10000_10ffff_tmp301, r10000_10ffff_tmp302;
		BitBlock r10000_10ffff_tmp303, r10000_10ffff_tmp304, r10000_10ffff_tmp305;
		BitBlock r10000_10ffff_tmp306, r10000_10ffff_tmp307, r10000_10ffff_tmp308;
		BitBlock r10000_10ffff_tmp309, r10000_10ffff_tmp310, r10000_10ffff_tmp311;
		BitBlock cc_range_1d500_1d53b_4, sequence_f0_9d_94_adv, r10000_10ffff_tmp312;
		BitBlock sequence_f0_9d_95, r10000_10ffff_tmp313, r10000_10ffff_tmp314;
		BitBlock r10000_10ffff_tmp315, r10000_10ffff_tmp316, r10000_10ffff_tmp317;
		BitBlock r10000_10ffff_tmp318, cc_range_1d540_1d552_4, sequence_f0_9d_95_adv;
		BitBlock r10000_10ffff_tmp319, r10000_10ffff_tmp320, byte_range_96_99;
		BitBlock sequence_f0_9d_byte_range_96_99, r10000_10ffff_tmp321;
		BitBlock sequence_f0_9d_byte_range_96_99_sfx, sequence_f0_9d_9a;
		BitBlock r10000_10ffff_tmp322, r10000_10ffff_tmp323, r10000_10ffff_tmp324;
		BitBlock sequence_f0_9d_9a_byte_range_80_a5, sequence_f0_9d_9b;
		BitBlock r10000_10ffff_tmp325, sequence_f0_9d_9b_80, sequence_f0_9d_9c;
		BitBlock byte_range_80_94, r10000_10ffff_tmp326;
		BitBlock sequence_f0_9d_9c_byte_range_80_94, sequence_f0_9d_9d;
		BitBlock r10000_10ffff_tmp327, byte_range_80_8e, r10000_10ffff_tmp328;
		BitBlock sequence_f0_9d_9d_byte_range_80_8e, sequence_f0_9d_9e;
		BitBlock r10000_10ffff_tmp329, sequence_f0_9d_9e_byte_range_80_88;
		BitBlock sequence_f0_9d_9f, byte_range_80_82, r10000_10ffff_tmp330;
		BitBlock sequence_f0_9d_9f_byte_range_80_82, sequence_f0_9e;
		BitBlock r10000_10ffff_tmp331, byte_range_a0_a2, r10000_10ffff_tmp332;
		BitBlock sequence_f0_9e_byte_range_a0_a2, r10000_10ffff_tmp333;
		BitBlock sequence_f0_9e_byte_range_a0_a2_sfx, sequence_f0_9e_adv;
		BitBlock sequence_f0_9e_a3, r10000_10ffff_tmp334;
		BitBlock sequence_f0_9e_a3_byte_range_80_84, sequence_f0_9e_b8;
		BitBlock r10000_10ffff_tmp335, sequence_f0_9e_b8_byte_range_80_83;
		BitBlock sequence_f0_9e_b9, r10000_10ffff_tmp336, sequence_f0_9e_b9_82;
		BitBlock sequence_f0_9e_ba, r10000_10ffff_tmp337;
		BitBlock sequence_f0_9e_ba_byte_range_80_89, sequence_f0_9f;
		BitBlock r10000_10ffff_tmp338, sequence_f0_9f_84, sequence_f0_9f_adv;
		BitBlock sequence_f0_9f_84_adv, r10000_10ffff_tmp339, sequence_f0_9f_85;
		BitBlock r10000_10ffff_tmp340, r10000_10ffff_tmp341, r10000_10ffff_tmp342;
		BitBlock r10000_10ffff_tmp343, r10000_10ffff_tmp344, cc_range_1f140_1f170_4;
		BitBlock sequence_f0_9f_85_adv, r10000_10ffff_tmp345, sequence_f0_9f_86;
		BitBlock sequence_f0_9f_86_adv, r10000_10ffff_tmp346, byte_range_a0_a9;
		BitBlock byte_f0_byte_range_a0_a9, r10000_10ffff_tmp347;
		BitBlock byte_f0_byte_range_a0_a9_sfx, r10000_10ffff_tmp348;
		BitBlock byte_f0_byte_range_a0_a9_sfx_sfx, sequence_f0_aa, sequence_f0_aa_adv;
		BitBlock sequence_f0_aa_80, byte_range_80_96, r10000_10ffff_tmp349;
		BitBlock sequence_f0_aa_80_byte_range_80_96, sequence_f0_ab;
		BitBlock sequence_f0_ab_adv, sequence_f0_ab_80, r10000_10ffff_tmp350;
		BitBlock sequence_f0_ab_80_byte_range_80_b4, sequence_f0_af;
		BitBlock sequence_f0_af_adv, sequence_f0_af_a0, r10000_10ffff_tmp351;
		BitBlock sequence_f0_af_a0_byte_range_80_9d;




        struct_alpha_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp2 = simd_or(basis_bits.bit_5, tmp1);
        tmp3 = simd_and(basis_bits.bit_4, tmp2);
        tmp4 = simd_not(tmp3);
        tmp5 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp7 = simd_or(tmp5, tmp6);
        tmp8 = simd_or(simd_and(basis_bits.bit_3, tmp4), simd_andc(tmp7, basis_bits.bit_3));
        tmp9 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        cc_range_41_61_1 = simd_and(tmp8, tmp9);
        struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, cc_range_41_61_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 306))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 25))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, tmp5);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp9 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
            r80_7ff_tmp10 = simd_and(r80_7ff_tmp7, r80_7ff_tmp9);
            r80_7ff_tmp11 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp12 = simd_and(r80_7ff_tmp5, r80_7ff_tmp11);
            r80_7ff_tmp13 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp15 = simd_and(r80_7ff_tmp13, r80_7ff_tmp14);
            r80_7ff_tmp16 = simd_and(r80_7ff_tmp12, r80_7ff_tmp15);
            r80_7ff_tmp17 = simd_or(r80_7ff_tmp10, r80_7ff_tmp16);
            r80_7ff_tmp18 = simd_and(r80_7ff_tmp12, r80_7ff_tmp9);
            cc_range_aa_ba_2 = simd_or(r80_7ff_tmp17, r80_7ff_tmp18);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp19 = simd_and(byte_c2_adv, cc_range_aa_ba_2);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r80_7ff_tmp19);
            r80_7ff_tmp20 = simd_andc(tmp1, tmp5);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp20);
            r80_7ff_tmp21 = simd_andc(r80_7ff_tmp5, basis_bits.bit_2);
            r80_7ff_tmp22 = simd_and(basis_bits.bit_5, tmp1);
            r80_7ff_tmp23 = simd_or(basis_bits.bit_4, r80_7ff_tmp22);
            r80_7ff_tmp24 = simd_and(basis_bits.bit_3, r80_7ff_tmp23);
            r80_7ff_tmp25 = simd_andc(r80_7ff_tmp21, r80_7ff_tmp24);
            r80_7ff_tmp26 = simd_not(r80_7ff_tmp24);
            r80_7ff_tmp27 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r80_7ff_tmp28 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp26), simd_andc(r80_7ff_tmp27, basis_bits.bit_2));
            r80_7ff_tmp29 = simd_and(r80_7ff_tmp5, r80_7ff_tmp28);
            r80_7ff_tmp30 = simd_or(r80_7ff_tmp25, r80_7ff_tmp29);
            r80_7ff_tmp31 = simd_and(r80_7ff_tmp12, basis_bits.bit_4);
            cc_range_c0_f8_2 = simd_or(r80_7ff_tmp30, r80_7ff_tmp31);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp32 = simd_and(byte_c3_adv, cc_range_c0_f8_2);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r80_7ff_tmp32);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp5);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 8))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(2, 5))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_5, tmp6);
                r100_2ff_tmp2 = simd_not(r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_and(r80_7ff_tmp8, r80_7ff_tmp14);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp4);
                byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(2), r100_2ff_tmp5));
                r100_2ff_tmp6 = simd_and(r100_2ff_tmp5, byte_range_80_8f);
                r100_2ff_tmp7 = simd_or(byte_range_c4_c8, r100_2ff_tmp6);
                if ((bitblock::any(r100_2ff_tmp7) || carryQ.CarryTest(3, 2))) {
                  r100_24f_tmp1 = simd_andc(r80_7ff_tmp13, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp1);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(3, 1))) {
                    byte_range_80_bf = r80_7ff_tmp5;
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_range_c4_c5, carryQ.get_carry_in(3), r100_17f_tmp1));
                    byte_range_c4_c5_sfx = simd_and(r100_17f_tmp1, byte_range_80_bf);
                    struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, byte_range_c4_c5_sfx);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(3, 1);
                  }
                  r100_24f_tmp2 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r100_24f_tmp2, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp3);
                  r100_24f_tmp4 = simd_or(byte_range_c6_c8, r100_2ff_tmp6);
                  if ((bitblock::any(r100_24f_tmp4) || carryQ.CarryTest(4, 1))) {
                    byte_range_80_bf = r80_7ff_tmp5;
                    carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_range_c6_c8, carryQ.get_carry_in(4), r180_24f_tmp1));
                    byte_range_c6_c8_sfx = simd_and(r180_24f_tmp1, byte_range_80_bf);
                    struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, byte_range_c6_c8_sfx);
                    byte_c9_byte_range_80_8f = r100_2ff_tmp6;
                    struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, byte_c9_byte_range_80_8f);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(4, 1);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 2);
                }
                byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
                r100_2ff_tmp8 = simd_and(r100_2ff_tmp5, byte_range_90_bf);
                byte_ca = simd_and(r80_7ff_tmp2, r80_7ff_tmp9);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp11);
                carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(5), r100_2ff_tmp9));
                r100_2ff_tmp10 = simd_and(r100_2ff_tmp9, byte_range_80_af);
                r100_2ff_tmp11 = simd_or(r100_2ff_tmp8, r100_2ff_tmp10);
                if (bitblock::any(r100_2ff_tmp11)) {
                  byte_c9_adv = r100_2ff_tmp5;
                  r250_2af_tmp1 = simd_and(byte_c9_adv, byte_range_90_bf);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r250_2af_tmp1);
                  byte_ca_adv = r100_2ff_tmp9;
                  r250_2af_tmp2 = simd_and(byte_ca_adv, byte_range_80_af);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r250_2af_tmp2);
                }
                byte_range_b0_bf = r80_7ff_tmp12;
                r100_2ff_tmp12 = simd_and(r100_2ff_tmp9, byte_range_b0_bf);
                r100_2ff_tmp13 = simd_and(r80_7ff_tmp8, tmp1);
                byte_cb = simd_and(r80_7ff_tmp2, r100_2ff_tmp13);
                r100_2ff_tmp14 = simd_or(r100_2ff_tmp12, byte_cb);
                if ((bitblock::any(r100_2ff_tmp14) || carryQ.CarryTest(6, 1))) {
                  byte_ca_adv = r100_2ff_tmp9;
                  r2b0_2ff_tmp1 = simd_and(byte_ca_adv, byte_range_b0_bf);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r2b0_2ff_tmp1);
                  r2b0_2ff_tmp2 = simd_or(tmp5, basis_bits.bit_6);
                  r2b0_2ff_tmp3 = simd_andc(byte_range_80_8f, r2b0_2ff_tmp2);
                  r2b0_2ff_tmp4 = simd_not(r2b0_2ff_tmp2);
                  r2b0_2ff_tmp5 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2b0_2ff_tmp6 = simd_or(basis_bits.bit_4, r2b0_2ff_tmp5);
                  r2b0_2ff_tmp7 = simd_or(simd_and(basis_bits.bit_3, r2b0_2ff_tmp4), simd_andc(r2b0_2ff_tmp6, basis_bits.bit_3));
                  r2b0_2ff_tmp8 = simd_and(r80_7ff_tmp21, r2b0_2ff_tmp7);
                  r2b0_2ff_tmp9 = simd_or(r2b0_2ff_tmp3, r2b0_2ff_tmp8);
                  r2b0_2ff_tmp10 = simd_andc(r80_7ff_tmp7, basis_bits.bit_4);
                  r2b0_2ff_tmp11 = simd_and(basis_bits.bit_5, tmp6);
                  r2b0_2ff_tmp12 = simd_andc(r2b0_2ff_tmp10, r2b0_2ff_tmp11);
                  r2b0_2ff_tmp13 = simd_or(r2b0_2ff_tmp9, r2b0_2ff_tmp12);
                  r2b0_2ff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2b0_2ff_tmp15 = simd_andc(r2b0_2ff_tmp14, tmp6);
                  r2b0_2ff_tmp16 = simd_and(r80_7ff_tmp7, r2b0_2ff_tmp15);
                  r2b0_2ff_tmp17 = simd_or(r2b0_2ff_tmp13, r2b0_2ff_tmp16);
                  r2b0_2ff_tmp18 = simd_and(r2b0_2ff_tmp14, r80_7ff_tmp3);
                  r2b0_2ff_tmp19 = simd_and(r80_7ff_tmp7, r2b0_2ff_tmp18);
                  cc_range_2c0_2ee_2 = simd_or(r2b0_2ff_tmp17, r2b0_2ff_tmp19);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(6), byte_cb_adv));
                  r2b0_2ff_tmp20 = simd_and(byte_cb_adv, cc_range_2c0_2ee_2);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r2b0_2ff_tmp20);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 5);
              }
              r100_3ff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp3 = simd_andc(r100_3ff_tmp2, tmp6);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              r100_3ff_tmp4 = simd_and(r100_3ff_tmp2, r80_7ff_tmp14);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp4);
              byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp11);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(7), r100_3ff_tmp5));
              r100_3ff_tmp6 = simd_and(r100_3ff_tmp5, byte_range_80_af);
              r100_3ff_tmp7 = simd_or(byte_cc, r100_3ff_tmp6);
              if (bitblock::any(r100_3ff_tmp7)) {
                r300_36f_tmp1 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                byte_85 = simd_and(r300_36f_tmp1, r80_7ff_tmp15);
                byte_cd_adv = r100_3ff_tmp5;
                r300_36f_tmp2 = simd_and(byte_cd_adv, byte_85);
                struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r300_36f_tmp2);
              }
              byte_range_b0_bf = r80_7ff_tmp12;
              r100_3ff_tmp8 = simd_and(r100_3ff_tmp5, byte_range_b0_bf);
              r100_3ff_tmp9 = simd_and(r100_3ff_tmp2, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp9);
              r100_3ff_tmp10 = simd_or(r100_3ff_tmp8, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp10) || carryQ.CarryTest(8, 2))) {
                r370_3ff_tmp1 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp2 = simd_and(basis_bits.bit_5, tmp6);
                r370_3ff_tmp3 = simd_andc(r370_3ff_tmp1, r370_3ff_tmp2);
                r370_3ff_tmp4 = simd_and(r80_7ff_tmp13, basis_bits.bit_6);
                r370_3ff_tmp5 = simd_and(byte_range_b0_bf, r370_3ff_tmp4);
                r370_3ff_tmp6 = simd_or(r370_3ff_tmp3, r370_3ff_tmp5);
                r370_3ff_tmp7 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp8 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                r370_3ff_tmp9 = simd_and(r370_3ff_tmp7, r370_3ff_tmp8);
                r370_3ff_tmp10 = simd_or(r370_3ff_tmp6, r370_3ff_tmp9);
                r370_3ff_tmp11 = simd_and(r100_3ff_tmp2, tmp1);
                r370_3ff_tmp12 = simd_and(byte_range_b0_bf, r370_3ff_tmp11);
                cc_range_370_37f_2 = simd_or(r370_3ff_tmp10, r370_3ff_tmp12);
                byte_cd_adv = r100_3ff_tmp5;
                r370_3ff_tmp13 = simd_and(byte_cd_adv, cc_range_370_37f_2);
                struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r370_3ff_tmp13);
                r370_3ff_tmp14 = simd_and(r100_3ff_tmp2, r80_7ff_tmp3);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp14);
                r370_3ff_tmp15 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                r370_3ff_tmp16 = simd_and(r80_7ff_tmp13, r80_7ff_tmp3);
                r370_3ff_tmp17 = simd_and(r370_3ff_tmp15, r370_3ff_tmp16);
                r370_3ff_tmp18 = simd_and(r370_3ff_tmp15, r80_7ff_tmp8);
                r370_3ff_tmp19 = simd_andc(r370_3ff_tmp18, tmp1);
                r370_3ff_tmp20 = simd_or(r370_3ff_tmp17, r370_3ff_tmp19);
                r370_3ff_tmp21 = simd_and(r370_3ff_tmp15, r100_3ff_tmp3);
                r370_3ff_tmp22 = simd_or(r370_3ff_tmp20, r370_3ff_tmp21);
                r370_3ff_tmp23 = simd_or(tmp5, basis_bits.bit_6);
                r370_3ff_tmp24 = simd_or(basis_bits.bit_3, r370_3ff_tmp23);
                r370_3ff_tmp25 = simd_not(r370_3ff_tmp24);
                r370_3ff_tmp26 = simd_or(basis_bits.bit_3, r100_3ff_tmp9);
                r370_3ff_tmp27 = simd_or(simd_and(basis_bits.bit_2, r370_3ff_tmp25), simd_andc(r370_3ff_tmp26, basis_bits.bit_2));
                r370_3ff_tmp28 = simd_and(r80_7ff_tmp5, r370_3ff_tmp27);
                r370_3ff_tmp29 = simd_or(r370_3ff_tmp22, r370_3ff_tmp28);
                r370_3ff_tmp30 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                r370_3ff_tmp31 = simd_or(tmp5, tmp1);
                r370_3ff_tmp32 = simd_or(basis_bits.bit_3, r370_3ff_tmp31);
                r370_3ff_tmp33 = simd_and(r370_3ff_tmp30, r370_3ff_tmp32);
                cc_range_386_3a3_2 = simd_or(r370_3ff_tmp29, r370_3ff_tmp33);
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(8), byte_ce_adv));
                r370_3ff_tmp34 = simd_and(byte_ce_adv, cc_range_386_3a3_2);
                struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r370_3ff_tmp34);
                byte_cf = simd_and(r80_7ff_tmp2, r370_3ff_tmp11);
                r370_3ff_tmp35 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r370_3ff_tmp36 = simd_or(basis_bits.bit_4, r370_3ff_tmp35);
                r370_3ff_tmp37 = simd_and(basis_bits.bit_3, r370_3ff_tmp36);
                r370_3ff_tmp38 = simd_and(basis_bits.bit_2, r370_3ff_tmp37);
                r370_3ff_tmp39 = simd_andc(r80_7ff_tmp5, r370_3ff_tmp38);
                r370_3ff_tmp40 = simd_and(byte_range_b0_bf, r80_7ff_tmp23);
                cc_range_3c0_3f7_2 = simd_or(r370_3ff_tmp39, r370_3ff_tmp40);
                carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(9), byte_cf_adv));
                r370_3ff_tmp41 = simd_and(byte_cf_adv, cc_range_3c0_3f7_2);
                struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r370_3ff_tmp41);
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 8);
            }
            r80_7ff_tmp33 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp34 = simd_and(byte_range_c0_ff, r80_7ff_tmp33);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp34, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(10, 7))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp34, tmp5);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(10, 3))) {
                r400_4ff_tmp1 = simd_or(tmp5, basis_bits.bit_6);
                byte_range_d0_d1 = simd_andc(r80_7ff_tmp34, r400_4ff_tmp1);
                byte_range_80_bf = r80_7ff_tmp5;
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_range_d0_d1, carryQ.get_carry_in(10), r400_4ff_tmp2));
                byte_range_d0_d1_sfx = simd_and(r400_4ff_tmp2, byte_range_80_bf);
                struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, byte_range_d0_d1_sfx);
                byte_d2 = simd_and(r80_7ff_tmp34, r80_7ff_tmp4);
                r400_4ff_tmp3 = simd_andc(byte_range_80_bf, r80_7ff_tmp1);
                byte_range_80_81 = simd_andc(r400_4ff_tmp3, r400_4ff_tmp1);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(11), r400_4ff_tmp4));
                byte_d2_byte_range_80_81 = simd_and(r400_4ff_tmp4, byte_range_80_81);
                struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, byte_d2_byte_range_80_81);
                byte_d3 = simd_and(r80_7ff_tmp34, r80_7ff_tmp20);
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(12), r400_4ff_tmp5));
                byte_d3_byte_range_80_bf = simd_and(r400_4ff_tmp5, byte_range_80_bf);
                struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, byte_d3_byte_range_80_bf);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 3);
              }
              r400_5ff_tmp1 = simd_andc(r80_7ff_tmp13, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp34, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(r80_7ff_tmp13, r80_7ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp34, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(13), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(14, 2))) {
                r500_58f_tmp1 = simd_andc(r80_7ff_tmp13, tmp6);
                byte_d4 = simd_and(r80_7ff_tmp34, r500_58f_tmp1);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp11);
                carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(14), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp3)) {
                  byte_d4_adv = r500_58f_tmp2;
                  r500_52f_tmp1 = simd_and(byte_d4_adv, byte_range_80_af);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r500_52f_tmp1);
                }
                byte_range_b0_bf = r80_7ff_tmp12;
                r500_58f_tmp4 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                byte_d5 = simd_and(r80_7ff_tmp34, r80_7ff_tmp15);
                r500_58f_tmp5 = simd_or(r500_58f_tmp4, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp4);
                if ((bitblock::any(r500_58f_tmp6) || carryQ.CarryTest(15, 1))) {
                  r530_58f_tmp1 = simd_or(basis_bits.bit_5, tmp6);
                  r530_58f_tmp2 = simd_or(basis_bits.bit_4, r530_58f_tmp1);
                  byte_range_b1_bf = simd_and(byte_range_b0_bf, r530_58f_tmp2);
                  byte_d4_adv = r500_58f_tmp2;
                  r530_58f_tmp3 = simd_and(byte_d4_adv, byte_range_b1_bf);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r530_58f_tmp3);
                  r530_58f_tmp4 = simd_and(r80_7ff_tmp5, r80_7ff_tmp33);
                  r530_58f_tmp5 = simd_and(r80_7ff_tmp8, r80_7ff_tmp14);
                  r530_58f_tmp6 = simd_and(r530_58f_tmp4, r530_58f_tmp5);
                  r530_58f_tmp7 = simd_or(r80_7ff_tmp25, r530_58f_tmp6);
                  r530_58f_tmp8 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                  r530_58f_tmp9 = simd_or(basis_bits.bit_3, tmp7);
                  r530_58f_tmp10 = simd_and(r530_58f_tmp8, r530_58f_tmp9);
                  cc_range_540_561_2 = simd_or(r530_58f_tmp7, r530_58f_tmp10);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(15), byte_d5_adv));
                  r530_58f_tmp11 = simd_and(byte_d5_adv, cc_range_540_561_2);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r530_58f_tmp11);
                  byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_d6_adv = r400_5ff_tmp3;
                  r530_58f_tmp12 = simd_and(byte_d6_adv, byte_range_80_87);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r530_58f_tmp12);
                }
                else {
                  carryQ.CarryDequeueEnqueue(15, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(14, 2);
              }
              byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
              r400_5ff_tmp6 = simd_and(r400_5ff_tmp3, byte_range_90_bf);
              r400_5ff_tmp7 = simd_and(r80_7ff_tmp13, tmp1);
              byte_d7 = simd_and(r80_7ff_tmp34, r400_5ff_tmp7);
              r400_5ff_tmp8 = simd_or(r400_5ff_tmp6, byte_d7);
              if ((bitblock::any(r400_5ff_tmp8) || carryQ.CarryTest(16, 1))) {
                r590_5ff_tmp1 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r590_5ff_tmp2 = simd_and(basis_bits.bit_4, r590_5ff_tmp1);
                r590_5ff_tmp3 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                r590_5ff_tmp4 = simd_and(r590_5ff_tmp3, tmp1);
                r590_5ff_tmp5 = simd_andc(r590_5ff_tmp2, r590_5ff_tmp4);
                cc_range_5b0_5bf_2 = simd_andc(r80_7ff_tmp12, r590_5ff_tmp5);
                byte_d6_adv = r400_5ff_tmp3;
                r590_5ff_tmp6 = simd_and(byte_d6_adv, cc_range_5b0_5bf_2);
                struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r590_5ff_tmp6);
                r590_5ff_tmp7 = simd_andc(byte_range_80_8f, tmp5);
                r590_5ff_tmp8 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                r590_5ff_tmp9 = simd_and(r590_5ff_tmp7, r590_5ff_tmp8);
                r590_5ff_tmp10 = simd_and(byte_range_80_8f, r400_5ff_tmp1);
                r590_5ff_tmp11 = simd_or(r590_5ff_tmp9, r590_5ff_tmp10);
                r590_5ff_tmp12 = simd_and(byte_range_80_8f, r400_5ff_tmp7);
                r590_5ff_tmp13 = simd_or(r590_5ff_tmp11, r590_5ff_tmp12);
                r590_5ff_tmp14 = simd_or(basis_bits.bit_3, tmp3);
                r590_5ff_tmp15 = simd_not(r590_5ff_tmp14);
                r590_5ff_tmp16 = simd_or(simd_and(basis_bits.bit_2, r590_5ff_tmp15), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                r590_5ff_tmp17 = simd_and(r80_7ff_tmp5, r590_5ff_tmp16);
                r590_5ff_tmp18 = simd_or(r590_5ff_tmp13, r590_5ff_tmp17);
                r590_5ff_tmp19 = simd_andc(r80_7ff_tmp12, tmp5);
                r590_5ff_tmp20 = simd_andc(r590_5ff_tmp19, tmp1);
                cc_range_5c1_5f0_2 = simd_or(r590_5ff_tmp18, r590_5ff_tmp20);
                carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(16), byte_d7_adv));
                r590_5ff_tmp21 = simd_and(byte_d7_adv, cc_range_5c1_5f0_2);
                struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r590_5ff_tmp21);
              }
              else {
                carryQ.CarryDequeueEnqueue(16, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(10, 7);
            }
            byte_range_d8_db = simd_and(r80_7ff_tmp34, r80_7ff_tmp8);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(17, 4))) {
              r600_6ff_tmp1 = simd_andc(r80_7ff_tmp8, tmp6);
              byte_d8 = simd_and(r80_7ff_tmp34, r600_6ff_tmp1);
              r600_6ff_tmp2 = simd_and(r80_7ff_tmp5, r80_7ff_tmp33);
              r600_6ff_tmp3 = simd_andc(r600_6ff_tmp2, tmp3);
              r600_6ff_tmp4 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
              cc_range_610_620_2 = simd_or(r600_6ff_tmp3, r600_6ff_tmp4);
              carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(17), byte_d8_adv));
              r600_6ff_tmp5 = simd_and(byte_d8_adv, cc_range_610_620_2);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r600_6ff_tmp5);
              r600_6ff_tmp6 = simd_and(r80_7ff_tmp8, r80_7ff_tmp14);
              byte_d9 = simd_and(r80_7ff_tmp34, r600_6ff_tmp6);
              r600_6ff_tmp7 = simd_andc(r80_7ff_tmp21, r80_7ff_tmp27);
              r600_6ff_tmp8 = simd_and(r600_6ff_tmp2, basis_bits.bit_4);
              r600_6ff_tmp9 = simd_or(basis_bits.bit_5, tmp6);
              r600_6ff_tmp10 = simd_and(r600_6ff_tmp8, r600_6ff_tmp9);
              r600_6ff_tmp11 = simd_or(r600_6ff_tmp7, r600_6ff_tmp10);
              r600_6ff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r600_6ff_tmp13 = simd_and(r600_6ff_tmp12, basis_bits.bit_6);
              r600_6ff_tmp14 = simd_or(basis_bits.bit_3, r600_6ff_tmp13);
              r600_6ff_tmp15 = simd_and(r600_6ff_tmp4, r600_6ff_tmp14);
              cc_range_640_66e_2 = simd_or(r600_6ff_tmp11, r600_6ff_tmp15);
              carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(18), byte_d9_adv));
              r600_6ff_tmp16 = simd_and(byte_d9_adv, cc_range_640_66e_2);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r600_6ff_tmp16);
              byte_da = simd_and(r80_7ff_tmp34, r80_7ff_tmp9);
              byte_range_80_bf = r80_7ff_tmp5;
              carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_da, carryQ.get_carry_in(19), byte_da_adv));
              r600_6ff_tmp17 = simd_and(byte_da_adv, byte_range_80_bf);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r600_6ff_tmp17);
              r600_6ff_tmp18 = simd_and(r80_7ff_tmp8, tmp1);
              byte_db = simd_and(r80_7ff_tmp34, r600_6ff_tmp18);
              r600_6ff_tmp19 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              r600_6ff_tmp20 = simd_and(basis_bits.bit_3, tmp5);
              r600_6ff_tmp21 = simd_andc(r600_6ff_tmp19, r600_6ff_tmp20);
              r600_6ff_tmp22 = simd_and(byte_range_80_bf, r80_7ff_tmp33);
              r600_6ff_tmp23 = simd_and(basis_bits.bit_5, tmp6);
              r600_6ff_tmp24 = simd_xor(basis_bits.bit_4, r600_6ff_tmp23);
              r600_6ff_tmp25 = simd_and(r600_6ff_tmp22, r600_6ff_tmp24);
              r600_6ff_tmp26 = simd_or(r600_6ff_tmp21, r600_6ff_tmp25);
              r600_6ff_tmp27 = simd_and(byte_range_80_bf, r80_7ff_tmp6);
              r600_6ff_tmp28 = simd_xor(basis_bits.bit_4, r600_6ff_tmp9);
              r600_6ff_tmp29 = simd_and(r600_6ff_tmp27, r600_6ff_tmp28);
              r600_6ff_tmp30 = simd_or(r600_6ff_tmp26, r600_6ff_tmp29);
              r600_6ff_tmp31 = simd_and(r600_6ff_tmp27, r600_6ff_tmp12);
              r600_6ff_tmp32 = simd_and(r600_6ff_tmp31, tmp6);
              r600_6ff_tmp33 = simd_or(r600_6ff_tmp30, r600_6ff_tmp32);
              r600_6ff_tmp34 = simd_and(byte_range_80_bf, r80_7ff_tmp11);
              r600_6ff_tmp35 = simd_and(r600_6ff_tmp34, basis_bits.bit_4);
              r600_6ff_tmp36 = simd_not(tmp6);
              r600_6ff_tmp37 = simd_or(simd_and(basis_bits.bit_5, r600_6ff_tmp36), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
              r600_6ff_tmp38 = simd_and(r600_6ff_tmp35, r600_6ff_tmp37);
              r600_6ff_tmp39 = simd_or(r600_6ff_tmp33, r600_6ff_tmp38);
              r600_6ff_tmp40 = simd_and(r600_6ff_tmp12, tmp1);
              r600_6ff_tmp41 = simd_and(r600_6ff_tmp34, r600_6ff_tmp40);
              cc_range_6c0_6ff_2 = simd_or(r600_6ff_tmp39, r600_6ff_tmp41);
              carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(20), byte_db_adv));
              r600_6ff_tmp42 = simd_and(byte_db_adv, cc_range_6c0_6ff_2);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r600_6ff_tmp42);
            }
            else {
              carryQ.CarryDequeueEnqueue(17, 4);
            }
            r80_7ff_tmp35 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp36 = simd_andc(r80_7ff_tmp35, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp34, r80_7ff_tmp36);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(21, 2))) {
              r700_77f_tmp1 = simd_andc(r80_7ff_tmp35, tmp6);
              byte_dc = simd_and(r80_7ff_tmp34, r700_77f_tmp1);
              r700_77f_tmp2 = simd_and(r80_7ff_tmp35, r80_7ff_tmp14);
              byte_dd = simd_and(r80_7ff_tmp34, r700_77f_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(21), r700_77f_tmp3));
              r700_77f_tmp4 = simd_and(r700_77f_tmp3, byte_range_80_8f);
              r700_77f_tmp5 = simd_or(byte_dc, r700_77f_tmp4);
              if ((bitblock::any(r700_77f_tmp5) || carryQ.CarryTest(22, 1))) {
                byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
                carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(22), byte_dc_adv));
                r700_74f_tmp1 = simd_and(byte_dc_adv, byte_range_90_bf);
                struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r700_74f_tmp1);
                r700_74f_tmp2 = simd_and(byte_range_80_8f, r80_7ff_tmp35);
                byte_range_8d_8f = simd_and(r700_74f_tmp2, tmp6);
                byte_dd_adv = r700_77f_tmp3;
                r700_74f_tmp3 = simd_and(byte_dd_adv, byte_range_8d_8f);
                struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r700_74f_tmp3);
              }
              else {
                carryQ.CarryDequeueEnqueue(22, 1);
              }
              byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
              r700_77f_tmp6 = simd_and(r700_77f_tmp3, byte_range_90_bf);
              if (bitblock::any(r700_77f_tmp6)) {
                byte_dd_adv = r700_77f_tmp3;
                r750_77f_tmp1 = simd_and(byte_dd_adv, byte_range_90_bf);
                struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r750_77f_tmp1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(21, 2);
            }
            r80_7ff_tmp37 = simd_and(r80_7ff_tmp35, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp34, r80_7ff_tmp37);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(23, 2))) {
              r780_7ff_tmp1 = simd_and(r80_7ff_tmp35, r80_7ff_tmp3);
              byte_de = simd_and(r80_7ff_tmp34, r780_7ff_tmp1);
              if ((bitblock::any(byte_de) || carryQ.CarryTest(23, 1))) {
                r780_7bf_tmp1 = simd_or(tmp5, basis_bits.bit_6);
                r780_7bf_tmp2 = simd_and(basis_bits.bit_3, r780_7bf_tmp1);
                r780_7bf_tmp3 = simd_and(basis_bits.bit_2, r780_7bf_tmp2);
                byte_range_80_b1 = simd_andc(r80_7ff_tmp5, r780_7bf_tmp3);
                carryQ.cq[23] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(23), byte_de_adv));
                r780_7bf_tmp4 = simd_and(byte_de_adv, byte_range_80_b1);
                struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r780_7bf_tmp4);
              }
              else {
                carryQ.CarryDequeueEnqueue(23, 1);
              }
              r780_7ff_tmp2 = simd_and(r80_7ff_tmp35, tmp1);
              byte_df = simd_and(r80_7ff_tmp34, r780_7ff_tmp2);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(24, 1))) {
                r7c0_7ff_tmp1 = simd_or(basis_bits.bit_3, tmp3);
                r7c0_7ff_tmp2 = simd_not(r7c0_7ff_tmp1);
                r7c0_7ff_tmp3 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                r7c0_7ff_tmp4 = simd_and(basis_bits.bit_4, r7c0_7ff_tmp3);
                r7c0_7ff_tmp5 = simd_or(basis_bits.bit_3, r7c0_7ff_tmp4);
                r7c0_7ff_tmp6 = simd_or(simd_and(basis_bits.bit_2, r7c0_7ff_tmp2), simd_andc(r7c0_7ff_tmp5, basis_bits.bit_2));
                r7c0_7ff_tmp7 = simd_and(r80_7ff_tmp5, r7c0_7ff_tmp6);
                r7c0_7ff_tmp8 = simd_andc(r80_7ff_tmp13, basis_bits.bit_6);
                r7c0_7ff_tmp9 = simd_and(r80_7ff_tmp12, r7c0_7ff_tmp8);
                r7c0_7ff_tmp10 = simd_or(r7c0_7ff_tmp7, r7c0_7ff_tmp9);
                cc_range_7ca_7fa_2 = simd_or(r7c0_7ff_tmp10, r80_7ff_tmp18);
                carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(24), byte_df_adv));
                r7c0_7ff_tmp11 = simd_and(byte_df_adv, cc_range_7ca_7fa_2);
                struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r7c0_7ff_tmp11);
              }
              else {
                carryQ.CarryDequeueEnqueue(24, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(23, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 25);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(25, 168))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp5);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp6);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(25), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(26, 108))) {
              r800_4dff_tmp1 = simd_or(tmp5, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(26, 79))) {
                byte_e0 = simd_andc(byte_range_e0_ef, tmp7);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(26, 32))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r800_fff_tmp1, tmp7);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(26), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r800_fff_tmp4 = simd_andc(r800_fff_tmp3, r800_ffff_tmp4);
                  r800_fff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp6 = simd_and(r800_fff_tmp5, tmp6);
                  r800_fff_tmp7 = simd_or(basis_bits.bit_3, r800_fff_tmp6);
                  r800_fff_tmp8 = simd_not(r800_fff_tmp7);
                  r800_fff_tmp9 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp10 = simd_and(basis_bits.bit_4, r800_fff_tmp9);
                  r800_fff_tmp11 = simd_and(basis_bits.bit_3, r800_fff_tmp10);
                  r800_fff_tmp12 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp8), simd_andc(r800_fff_tmp11, basis_bits.bit_2));
                  r800_fff_tmp13 = simd_and(r800_ffff_tmp3, r800_fff_tmp12);
                  cc_range_800_81a_3 = simd_or(r800_fff_tmp4, r800_fff_tmp13);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(27), sequence_e0_a0_adv));
                  r800_fff_tmp14 = simd_and(sequence_e0_a0_adv, cc_range_800_81a_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp14);
                  r800_fff_tmp15 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp16 = simd_andc(r800_fff_tmp15, tmp5);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp16);
                  sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
                  r800_fff_tmp17 = simd_or(basis_bits.bit_5, tmp6);
                  r800_fff_tmp18 = simd_and(basis_bits.bit_4, r800_fff_tmp17);
                  r800_fff_tmp19 = simd_and(basis_bits.bit_3, r800_fff_tmp18);
                  byte_range_80_98 = simd_andc(r800_fff_tmp3, r800_fff_tmp19);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(28), sequence_e0_a1_adv));
                  r800_fff_tmp20 = simd_and(sequence_e0_a1_adv, byte_range_80_98);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp20);
                  r800_fff_tmp21 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp22 = simd_andc(r800_fff_tmp21, tmp5);
                  byte_a2 = simd_and(r800_fff_tmp1, r800_fff_tmp22);
                  sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
                  r800_fff_tmp23 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r800_fff_tmp24 = simd_or(tmp5, tmp1);
                  r800_fff_tmp25 = simd_and(basis_bits.bit_3, r800_fff_tmp24);
                  byte_range_a0_b2 = simd_andc(r800_fff_tmp23, r800_fff_tmp25);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_a2, carryQ.get_carry_in(29), sequence_e0_a2_adv));
                  r800_fff_tmp26 = simd_and(sequence_e0_a2_adv, byte_range_a0_b2);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp26);
                  r800_fff_tmp27 = simd_andc(tmp1, tmp5);
                  byte_a3 = simd_and(r800_fff_tmp1, r800_fff_tmp27);
                  sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
                  r800_fff_tmp28 = simd_not(r800_fff_tmp9);
                  r800_fff_tmp29 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp28), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  r800_fff_tmp30 = simd_and(r800_fff_tmp1, r800_fff_tmp29);
                  r800_fff_tmp31 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp32 = simd_and(r800_ffff_tmp3, r800_fff_tmp31);
                  cc_range_8e4_8f0_3 = simd_or(r800_fff_tmp30, r800_fff_tmp32);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_a3, carryQ.get_carry_in(30), sequence_e0_a3_adv));
                  r800_fff_tmp33 = simd_and(sequence_e0_a3_adv, cc_range_8e4_8f0_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp33);
                  byte_a4 = simd_and(r800_fff_tmp1, r800_ffff_tmp2);
                  sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
                  r800_fff_tmp34 = simd_and(basis_bits.bit_3, r800_fff_tmp5);
                  r800_fff_tmp35 = simd_and(basis_bits.bit_2, r800_fff_tmp34);
                  r800_fff_tmp36 = simd_andc(r800_ffff_tmp3, r800_fff_tmp35);
                  r800_fff_tmp37 = simd_and(r800_fff_tmp32, r800_fff_tmp5);
                  r800_fff_tmp38 = simd_and(r800_fff_tmp37, tmp6);
                  cc_range_900_93d_3 = simd_or(r800_fff_tmp36, r800_fff_tmp38);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(31), sequence_e0_a4_adv));
                  r800_fff_tmp39 = simd_and(sequence_e0_a4_adv, cc_range_900_93d_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp39);
                  r800_fff_tmp40 = simd_and(r800_ffff_tmp1, r800_fff_tmp15);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp40);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  r800_fff_tmp41 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp42 = simd_andc(r800_ffff_tmp3, r800_fff_tmp41);
                  r800_fff_tmp43 = simd_and(basis_bits.bit_5, tmp6);
                  r800_fff_tmp44 = simd_and(basis_bits.bit_4, r800_fff_tmp43);
                  r800_fff_tmp45 = simd_andc(r800_fff_tmp42, r800_fff_tmp44);
                  r800_fff_tmp46 = simd_not(tmp7);
                  r800_fff_tmp47 = simd_and(r800_fff_tmp5, basis_bits.bit_6);
                  r800_fff_tmp48 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp46), simd_andc(r800_fff_tmp47, basis_bits.bit_3));
                  r800_fff_tmp49 = simd_and(r800_fff_tmp3, r800_fff_tmp48);
                  r800_fff_tmp50 = simd_or(r800_fff_tmp45, r800_fff_tmp49);
                  r800_fff_tmp51 = simd_or(basis_bits.bit_3, tmp5);
                  r800_fff_tmp52 = simd_not(r800_fff_tmp51);
                  r800_fff_tmp53 = simd_or(basis_bits.bit_4, r800_fff_tmp43);
                  r800_fff_tmp54 = simd_and(basis_bits.bit_3, r800_fff_tmp53);
                  r800_fff_tmp55 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp52), simd_andc(r800_fff_tmp54, basis_bits.bit_2));
                  r800_fff_tmp56 = simd_and(r800_ffff_tmp3, r800_fff_tmp55);
                  r800_fff_tmp57 = simd_or(r800_fff_tmp50, r800_fff_tmp56);
                  r800_fff_tmp58 = simd_or(basis_bits.bit_4, r800_fff_tmp17);
                  r800_fff_tmp59 = simd_and(r800_fff_tmp32, r800_fff_tmp58);
                  cc_range_940_971_3 = simd_or(r800_fff_tmp57, r800_fff_tmp59);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(32), sequence_e0_a5_adv));
                  r800_fff_tmp60 = simd_and(sequence_e0_a5_adv, cc_range_940_971_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp60);
                  r800_fff_tmp61 = simd_and(r800_ffff_tmp1, r800_fff_tmp21);
                  byte_a6 = simd_and(r800_fff_tmp1, r800_fff_tmp61);
                  sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
                  r800_fff_tmp62 = simd_xor(basis_bits.bit_4, r800_fff_tmp43);
                  r800_fff_tmp63 = simd_andc(tmp5, r800_fff_tmp62);
                  r800_fff_tmp64 = simd_andc(r800_fff_tmp42, r800_fff_tmp63);
                  r800_fff_tmp65 = simd_and(r800_fff_tmp5, tmp1);
                  r800_fff_tmp66 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp46), simd_andc(r800_fff_tmp65, basis_bits.bit_3));
                  r800_fff_tmp67 = simd_and(r800_fff_tmp3, r800_fff_tmp66);
                  r800_fff_tmp68 = simd_or(r800_fff_tmp64, r800_fff_tmp67);
                  r800_fff_tmp69 = simd_or(basis_bits.bit_3, r800_fff_tmp18);
                  r800_fff_tmp70 = simd_not(r800_fff_tmp69);
                  r800_fff_tmp71 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp70), simd_andc(r800_fff_tmp25, basis_bits.bit_2));
                  r800_fff_tmp72 = simd_and(r800_ffff_tmp3, r800_fff_tmp71);
                  r800_fff_tmp73 = simd_or(r800_fff_tmp68, r800_fff_tmp72);
                  r800_fff_tmp74 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp46), simd_andc(r800_fff_tmp10, basis_bits.bit_3));
                  r800_fff_tmp75 = simd_and(r800_fff_tmp23, r800_fff_tmp74);
                  r800_fff_tmp76 = simd_or(r800_fff_tmp73, r800_fff_tmp75);
                  r800_fff_tmp77 = simd_and(r800_fff_tmp32, r800_fff_tmp22);
                  r800_fff_tmp78 = simd_or(r800_fff_tmp76, r800_fff_tmp77);
                  r800_fff_tmp79 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp80 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp28), simd_andc(r800_fff_tmp79, basis_bits.bit_4));
                  r800_fff_tmp81 = simd_and(r800_fff_tmp32, r800_fff_tmp80);
                  r800_fff_tmp82 = simd_or(r800_fff_tmp78, r800_fff_tmp81);
                  cc_range_980_9bd_3 = simd_or(r800_fff_tmp82, r800_fff_tmp38);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(33), sequence_e0_a6_adv));
                  r800_fff_tmp83 = simd_and(sequence_e0_a6_adv, cc_range_980_9bd_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp83);
                  r800_fff_tmp84 = simd_and(r800_ffff_tmp1, tmp1);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp84);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  r800_fff_tmp85 = simd_andc(r800_fff_tmp42, basis_bits.bit_4);
                  r800_fff_tmp86 = simd_andc(r800_fff_tmp85, r800_fff_tmp43);
                  r800_fff_tmp87 = simd_not(r800_fff_tmp17);
                  r800_fff_tmp88 = simd_and(basis_bits.bit_5, tmp1);
                  r800_fff_tmp89 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp87), simd_andc(r800_fff_tmp88, basis_bits.bit_4));
                  r800_fff_tmp90 = simd_and(r800_fff_tmp42, r800_fff_tmp89);
                  r800_fff_tmp91 = simd_or(r800_fff_tmp86, r800_fff_tmp90);
                  r800_fff_tmp92 = simd_and(r800_fff_tmp42, basis_bits.bit_4);
                  r800_fff_tmp93 = simd_not(tmp6);
                  r800_fff_tmp94 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp93), simd_andc(tmp1, basis_bits.bit_5));
                  r800_fff_tmp95 = simd_and(r800_fff_tmp92, r800_fff_tmp94);
                  r800_fff_tmp96 = simd_or(r800_fff_tmp91, r800_fff_tmp95);
                  r800_fff_tmp97 = simd_and(r800_fff_tmp5, r800_fff_tmp21);
                  r800_fff_tmp98 = simd_and(r800_fff_tmp42, r800_fff_tmp97);
                  r800_fff_tmp99 = simd_or(r800_fff_tmp96, r800_fff_tmp98);
                  r800_fff_tmp100 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp101 = simd_and(r800_ffff_tmp3, r800_fff_tmp100);
                  r800_fff_tmp102 = simd_and(r800_fff_tmp101, r800_fff_tmp84);
                  r800_fff_tmp103 = simd_or(r800_fff_tmp99, r800_fff_tmp102);
                  r800_fff_tmp104 = simd_andc(r800_fff_tmp5, basis_bits.bit_6);
                  r800_fff_tmp105 = simd_and(r800_fff_tmp101, r800_fff_tmp104);
                  r800_fff_tmp106 = simd_or(r800_fff_tmp103, r800_fff_tmp105);
                  r800_fff_tmp107 = simd_and(basis_bits.bit_3, r800_fff_tmp65);
                  r800_fff_tmp108 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp52), simd_andc(r800_fff_tmp107, basis_bits.bit_2));
                  r800_fff_tmp109 = simd_and(r800_ffff_tmp3, r800_fff_tmp108);
                  r800_fff_tmp110 = simd_or(r800_fff_tmp106, r800_fff_tmp109);
                  r800_fff_tmp111 = simd_andc(r800_fff_tmp32, r800_4dff_tmp1);
                  cc_range_9c0_9f0_3 = simd_or(r800_fff_tmp110, r800_fff_tmp111);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(34), sequence_e0_a7_adv));
                  r800_fff_tmp112 = simd_and(sequence_e0_a7_adv, cc_range_9c0_9f0_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp112);
                  r800_fff_tmp113 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp114 = simd_andc(r800_fff_tmp113, tmp6);
                  byte_a8 = simd_and(r800_fff_tmp1, r800_fff_tmp114);
                  sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
                  r800_fff_tmp115 = simd_andc(r800_fff_tmp42, tmp5);
                  r800_fff_tmp116 = simd_and(r800_fff_tmp115, tmp6);
                  r800_fff_tmp117 = simd_not(tmp2);
                  r800_fff_tmp118 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp117), simd_andc(r800_fff_tmp43, basis_bits.bit_4));
                  r800_fff_tmp119 = simd_and(r800_fff_tmp42, r800_fff_tmp118);
                  r800_fff_tmp120 = simd_or(r800_fff_tmp116, r800_fff_tmp119);
                  r800_fff_tmp121 = simd_or(r800_fff_tmp120, r800_fff_tmp67);
                  r800_fff_tmp122 = simd_or(r800_fff_tmp121, r800_fff_tmp72);
                  r800_fff_tmp123 = simd_or(r800_fff_tmp122, r800_fff_tmp75);
                  r800_fff_tmp124 = simd_andc(basis_bits.bit_6, tmp5);
                  r800_fff_tmp125 = simd_and(r800_fff_tmp32, r800_fff_tmp124);
                  r800_fff_tmp126 = simd_or(r800_fff_tmp123, r800_fff_tmp125);
                  r800_fff_tmp127 = simd_and(r800_fff_tmp32, r800_ffff_tmp1);
                  r800_fff_tmp128 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp129 = simd_and(r800_fff_tmp127, r800_fff_tmp128);
                  r800_fff_tmp130 = simd_or(r800_fff_tmp126, r800_fff_tmp129);
                  r800_fff_tmp131 = simd_andc(r800_fff_tmp113, basis_bits.bit_6);
                  r800_fff_tmp132 = simd_and(r800_fff_tmp32, r800_fff_tmp131);
                  r800_fff_tmp133 = simd_or(r800_fff_tmp130, r800_fff_tmp132);
                  r800_fff_tmp134 = simd_and(r800_fff_tmp32, r800_fff_tmp47);
                  cc_range_a01_a3e_3 = simd_or(r800_fff_tmp133, r800_fff_tmp134);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(35), sequence_e0_a8_adv));
                  r800_fff_tmp135 = simd_and(sequence_e0_a8_adv, cc_range_a01_a3e_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp135);
                  r800_fff_tmp136 = simd_and(r800_fff_tmp113, r800_fff_tmp15);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp136);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  r800_fff_tmp137 = simd_andc(r800_fff_tmp115, tmp1);
                  r800_fff_tmp138 = simd_or(r800_fff_tmp137, r800_fff_tmp90);
                  r800_fff_tmp139 = simd_or(r800_fff_tmp138, r800_fff_tmp95);
                  r800_fff_tmp140 = simd_and(r800_fff_tmp101, r800_fff_tmp16);
                  r800_fff_tmp141 = simd_or(r800_fff_tmp139, r800_fff_tmp140);
                  r800_fff_tmp142 = simd_and(r800_fff_tmp101, basis_bits.bit_4);
                  r800_fff_tmp143 = simd_xor(basis_bits.bit_5, tmp6);
                  r800_fff_tmp144 = simd_and(r800_fff_tmp142, r800_fff_tmp143);
                  r800_fff_tmp145 = simd_or(r800_fff_tmp141, r800_fff_tmp144);
                  r800_fff_tmp146 = simd_and(r800_fff_tmp101, r800_fff_tmp97);
                  r800_fff_tmp147 = simd_or(r800_fff_tmp145, r800_fff_tmp146);
                  r800_fff_tmp148 = simd_andc(r800_fff_tmp32, basis_bits.bit_4);
                  r800_fff_tmp149 = simd_andc(r800_fff_tmp148, r800_fff_tmp79);
                  cc_range_a40_a70_3 = simd_or(r800_fff_tmp147, r800_fff_tmp149);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(36), sequence_e0_a9_adv));
                  r800_fff_tmp150 = simd_and(sequence_e0_a9_adv, cc_range_a40_a70_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp150);
                  r800_fff_tmp151 = simd_and(r800_fff_tmp113, r800_fff_tmp21);
                  byte_aa = simd_and(r800_fff_tmp1, r800_fff_tmp151);
                  sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
                  r800_fff_tmp152 = simd_not(r800_fff_tmp79);
                  r800_fff_tmp153 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp152), simd_andc(r800_fff_tmp43, basis_bits.bit_4));
                  r800_fff_tmp154 = simd_and(r800_fff_tmp42, r800_fff_tmp153);
                  r800_fff_tmp155 = simd_or(r800_fff_tmp116, r800_fff_tmp154);
                  r800_fff_tmp156 = simd_not(r800_4dff_tmp1);
                  r800_fff_tmp157 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp156), simd_andc(r800_fff_tmp65, basis_bits.bit_3));
                  r800_fff_tmp158 = simd_and(r800_fff_tmp3, r800_fff_tmp157);
                  r800_fff_tmp159 = simd_or(r800_fff_tmp155, r800_fff_tmp158);
                  r800_fff_tmp160 = simd_or(r800_fff_tmp159, r800_fff_tmp72);
                  r800_fff_tmp161 = simd_or(r800_fff_tmp160, r800_fff_tmp75);
                  r800_fff_tmp162 = simd_or(r800_fff_tmp161, r800_fff_tmp125);
                  r800_fff_tmp163 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp28), simd_andc(r800_fff_tmp43, basis_bits.bit_4));
                  r800_fff_tmp164 = simd_and(r800_fff_tmp32, r800_fff_tmp163);
                  r800_fff_tmp165 = simd_or(r800_fff_tmp162, r800_fff_tmp164);
                  cc_range_a81_abd_3 = simd_or(r800_fff_tmp165, r800_fff_tmp38);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(37), sequence_e0_aa_adv));
                  r800_fff_tmp166 = simd_and(sequence_e0_aa_adv, cc_range_a81_abd_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp166);
                  r800_fff_tmp167 = simd_and(r800_fff_tmp113, tmp1);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp167);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  r800_fff_tmp168 = simd_andc(r800_fff_tmp85, r800_fff_tmp79);
                  r800_fff_tmp169 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp28), simd_andc(r800_fff_tmp88, basis_bits.bit_4));
                  r800_fff_tmp170 = simd_and(r800_fff_tmp42, r800_fff_tmp169);
                  r800_fff_tmp171 = simd_or(r800_fff_tmp168, r800_fff_tmp170);
                  r800_fff_tmp172 = simd_or(r800_fff_tmp171, r800_fff_tmp95);
                  r800_fff_tmp173 = simd_andc(r800_fff_tmp101, tmp7);
                  r800_fff_tmp174 = simd_or(r800_fff_tmp172, r800_fff_tmp173);
                  r800_fff_tmp175 = simd_andc(r800_fff_tmp1, tmp5);
                  cc_range_ac0_ae0_3 = simd_or(r800_fff_tmp174, r800_fff_tmp175);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(38), sequence_e0_ab_adv));
                  r800_fff_tmp176 = simd_and(sequence_e0_ab_adv, cc_range_ac0_ae0_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp176);
                  r800_fff_tmp177 = simd_andc(r800_fff_tmp5, tmp6);
                  byte_ac = simd_and(r800_fff_tmp1, r800_fff_tmp177);
                  sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
                  r800_fff_tmp178 = simd_and(r800_fff_tmp42, r800_fff_tmp62);
                  r800_fff_tmp179 = simd_or(r800_fff_tmp116, r800_fff_tmp178);
                  r800_fff_tmp180 = simd_or(r800_fff_tmp179, r800_fff_tmp67);
                  r800_fff_tmp181 = simd_or(r800_fff_tmp180, r800_fff_tmp72);
                  r800_fff_tmp182 = simd_or(r800_fff_tmp181, r800_fff_tmp75);
                  r800_fff_tmp183 = simd_or(r800_fff_tmp182, r800_fff_tmp125);
                  r800_fff_tmp184 = simd_or(r800_fff_tmp183, r800_fff_tmp164);
                  cc_range_b01_b3d_3 = simd_or(r800_fff_tmp184, r800_fff_tmp38);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(39), sequence_e0_ac_adv));
                  r800_fff_tmp185 = simd_and(sequence_e0_ac_adv, cc_range_b01_b3d_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp185);
                  r800_fff_tmp186 = simd_and(r800_fff_tmp5, r800_fff_tmp15);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp186);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  r800_fff_tmp187 = simd_and(r800_ffff_tmp1, basis_bits.bit_6);
                  r800_fff_tmp188 = simd_and(r800_fff_tmp101, r800_fff_tmp187);
                  r800_fff_tmp189 = simd_or(r800_fff_tmp96, r800_fff_tmp188);
                  r800_fff_tmp190 = simd_or(r800_fff_tmp189, r800_fff_tmp105);
                  r800_fff_tmp191 = simd_or(r800_fff_tmp190, r800_fff_tmp109);
                  r800_fff_tmp192 = simd_and(r800_fff_tmp32, r800_fff_tmp16);
                  cc_range_b40_b71_3 = simd_or(r800_fff_tmp191, r800_fff_tmp192);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(40), sequence_e0_ad_adv));
                  r800_fff_tmp193 = simd_and(sequence_e0_ad_adv, cc_range_b40_b71_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp193);
                  byte_ae = simd_and(r800_fff_tmp1, r800_fff_tmp97);
                  sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
                  r800_fff_tmp194 = simd_or(r800_fff_tmp124, r800_fff_tmp118);
                  r800_fff_tmp195 = simd_and(r800_fff_tmp42, r800_fff_tmp194);
                  r800_fff_tmp196 = simd_or(r800_fff_tmp195, r800_fff_tmp49);
                  r800_fff_tmp197 = simd_andc(r800_fff_tmp101, basis_bits.bit_4);
                  r800_fff_tmp198 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp199 = simd_and(r800_fff_tmp197, r800_fff_tmp198);
                  r800_fff_tmp200 = simd_or(r800_fff_tmp196, r800_fff_tmp199);
                  r800_fff_tmp201 = simd_and(r800_fff_tmp101, r800_fff_tmp113);
                  r800_fff_tmp202 = simd_and(r800_fff_tmp201, r800_fff_tmp128);
                  r800_fff_tmp203 = simd_or(r800_fff_tmp200, r800_fff_tmp202);
                  r800_fff_tmp204 = simd_and(r800_fff_tmp101, r800_fff_tmp177);
                  r800_fff_tmp205 = simd_or(r800_fff_tmp203, r800_fff_tmp204);
                  r800_fff_tmp206 = simd_and(r800_fff_tmp101, r800_fff_tmp47);
                  r800_fff_tmp207 = simd_or(r800_fff_tmp205, r800_fff_tmp206);
                  r800_fff_tmp208 = simd_andc(r800_fff_tmp1, basis_bits.bit_4);
                  r800_fff_tmp209 = simd_and(r800_fff_tmp208, r800_fff_tmp94);
                  r800_fff_tmp210 = simd_or(r800_fff_tmp207, r800_fff_tmp209);
                  r800_fff_tmp211 = simd_and(r800_fff_tmp1, r800_fff_tmp113);
                  r800_fff_tmp212 = simd_andc(r800_fff_tmp211, tmp1);
                  r800_fff_tmp213 = simd_or(r800_fff_tmp210, r800_fff_tmp212);
                  r800_fff_tmp214 = simd_not(r800_fff_tmp10);
                  r800_fff_tmp215 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp214), simd_andc(r800_fff_tmp47, basis_bits.bit_3));
                  r800_fff_tmp216 = simd_and(r800_fff_tmp23, r800_fff_tmp215);
                  r800_fff_tmp217 = simd_or(r800_fff_tmp213, r800_fff_tmp216);
                  cc_range_b82_bbe_3 = simd_or(r800_fff_tmp217, r800_fff_tmp134);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(41), sequence_e0_ae_adv));
                  r800_fff_tmp218 = simd_and(sequence_e0_ae_adv, cc_range_b82_bbe_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp218);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp65);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  r800_fff_tmp219 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp87), simd_andc(r800_fff_tmp79, basis_bits.bit_4));
                  r800_fff_tmp220 = simd_and(r800_fff_tmp42, r800_fff_tmp219);
                  r800_fff_tmp221 = simd_or(r800_fff_tmp137, r800_fff_tmp220);
                  r800_fff_tmp222 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp93), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r800_fff_tmp223 = simd_and(r800_fff_tmp92, r800_fff_tmp222);
                  r800_fff_tmp224 = simd_or(r800_fff_tmp221, r800_fff_tmp223);
                  r800_fff_tmp225 = simd_or(r800_fff_tmp224, r800_fff_tmp173);
                  cc_range_bc0_bd7_3 = simd_or(r800_fff_tmp225, r800_fff_tmp102);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(42), sequence_e0_af_adv));
                  r800_fff_tmp226 = simd_and(sequence_e0_af_adv, cc_range_bc0_bd7_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp226);
                  byte_b0 = simd_andc(r800_fff_tmp32, tmp7);
                  sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
                  r800_fff_tmp227 = simd_or(r800_fff_tmp64, r800_fff_tmp49);
                  r800_fff_tmp228 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  r800_fff_tmp229 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp70), simd_andc(r800_fff_tmp228, basis_bits.bit_2));
                  r800_fff_tmp230 = simd_and(r800_ffff_tmp3, r800_fff_tmp229);
                  r800_fff_tmp231 = simd_or(r800_fff_tmp227, r800_fff_tmp230);
                  r800_fff_tmp232 = simd_xor(basis_bits.bit_3, r800_fff_tmp10);
                  r800_fff_tmp233 = simd_and(r800_fff_tmp23, r800_fff_tmp232);
                  r800_fff_tmp234 = simd_or(r800_fff_tmp231, r800_fff_tmp233);
                  cc_range_c00_c3d_3 = simd_or(r800_fff_tmp234, r800_fff_tmp38);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(43), sequence_e0_b0_adv));
                  r800_fff_tmp235 = simd_and(sequence_e0_b0_adv, cc_range_c00_c3d_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp235);
                  byte_b1 = r800_fff_tmp192;
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  r800_fff_tmp236 = simd_or(r800_fff_tmp86, r800_fff_tmp220);
                  r800_fff_tmp237 = simd_or(r800_fff_tmp236, r800_fff_tmp223);
                  r800_fff_tmp238 = simd_and(r800_fff_tmp101, r800_ffff_tmp1);
                  r800_fff_tmp239 = simd_and(r800_fff_tmp238, r800_fff_tmp128);
                  r800_fff_tmp240 = simd_or(r800_fff_tmp237, r800_fff_tmp239);
                  r800_fff_tmp241 = simd_and(r800_fff_tmp101, r800_fff_tmp131);
                  r800_fff_tmp242 = simd_or(r800_fff_tmp240, r800_fff_tmp241);
                  cc_range_c40_c60_3 = simd_or(r800_fff_tmp242, r800_fff_tmp175);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(44), sequence_e0_b1_adv));
                  r800_fff_tmp243 = simd_and(sequence_e0_b1_adv, cc_range_c40_c60_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp243);
                  byte_b2 = r800_fff_tmp77;
                  sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
                  r800_fff_tmp244 = simd_or(r800_fff_tmp179, r800_fff_tmp49);
                  r800_fff_tmp245 = simd_or(r800_fff_tmp244, r800_fff_tmp230);
                  r800_fff_tmp246 = simd_not(tmp5);
                  r800_fff_tmp247 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp246), simd_andc(r800_fff_tmp10, basis_bits.bit_3));
                  r800_fff_tmp248 = simd_and(r800_fff_tmp23, r800_fff_tmp247);
                  r800_fff_tmp249 = simd_or(r800_fff_tmp245, r800_fff_tmp248);
                  r800_fff_tmp250 = simd_or(r800_fff_tmp249, r800_fff_tmp164);
                  cc_range_c81_cbd_3 = simd_or(r800_fff_tmp250, r800_fff_tmp38);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(45), sequence_e0_b2_adv));
                  r800_fff_tmp251 = simd_and(sequence_e0_b2_adv, cc_range_c81_cbd_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp251);
                  byte_b3 = simd_and(r800_fff_tmp32, r800_fff_tmp27);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  r800_fff_tmp252 = simd_or(r800_fff_tmp240, r800_fff_tmp146);
                  r800_fff_tmp253 = simd_or(r800_fff_tmp252, r800_fff_tmp175);
                  r800_fff_tmp254 = simd_andc(r800_fff_tmp32, tmp5);
                  r800_fff_tmp255 = simd_and(r800_fff_tmp254, r800_fff_tmp128);
                  cc_range_cc0_cf1_3 = simd_or(r800_fff_tmp253, r800_fff_tmp255);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(46), sequence_e0_b3_adv));
                  r800_fff_tmp256 = simd_and(sequence_e0_b3_adv, cc_range_cc0_cf1_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp256);
                  byte_b4 = simd_and(r800_fff_tmp32, r800_ffff_tmp2);
                  sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
                  r800_fff_tmp257 = simd_and(basis_bits.bit_3, tmp3);
                  r800_fff_tmp258 = simd_not(r800_fff_tmp257);
                  r800_fff_tmp259 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp258), simd_andc(r800_fff_tmp228, basis_bits.bit_2));
                  r800_fff_tmp260 = simd_and(r800_ffff_tmp3, r800_fff_tmp259);
                  r800_fff_tmp261 = simd_or(r800_fff_tmp244, r800_fff_tmp260);
                  cc_range_d01_d3d_3 = simd_or(r800_fff_tmp261, r800_fff_tmp38);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(47), sequence_e0_b4_adv));
                  r800_fff_tmp262 = simd_and(sequence_e0_b4_adv, cc_range_d01_d3d_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp262);
                  byte_b5 = simd_and(r800_fff_tmp32, r800_fff_tmp40);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  r800_fff_tmp263 = simd_or(r800_fff_tmp237, r800_fff_tmp98);
                  r800_fff_tmp264 = simd_or(r800_fff_tmp263, r800_fff_tmp102);
                  r800_fff_tmp265 = simd_or(r800_fff_tmp264, r800_fff_tmp175);
                  r800_fff_tmp266 = simd_and(r800_fff_tmp32, basis_bits.bit_4);
                  r800_fff_tmp267 = simd_and(r800_fff_tmp266, r800_fff_tmp9);
                  cc_range_d40_d7a_3 = simd_or(r800_fff_tmp265, r800_fff_tmp267);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(48), sequence_e0_b5_adv));
                  r800_fff_tmp268 = simd_and(sequence_e0_b5_adv, cc_range_d40_d7a_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp268);
                  byte_b6 = simd_and(r800_fff_tmp32, r800_fff_tmp61);
                  sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
                  r800_fff_tmp269 = simd_and(r800_fff_tmp42, r800_fff_tmp124);
                  r800_fff_tmp270 = simd_or(basis_bits.bit_4, r800_fff_tmp88);
                  r800_fff_tmp271 = simd_not(r800_fff_tmp270);
                  r800_fff_tmp272 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp271), simd_andc(r800_fff_tmp53, basis_bits.bit_3));
                  r800_fff_tmp273 = simd_and(r800_fff_tmp3, r800_fff_tmp272);
                  r800_fff_tmp274 = simd_or(r800_fff_tmp269, r800_fff_tmp273);
                  r800_fff_tmp275 = simd_not(r800_fff_tmp228);
                  r800_fff_tmp276 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp275), simd_andc(r800_fff_tmp11, basis_bits.bit_2));
                  r800_fff_tmp277 = simd_and(r800_ffff_tmp3, r800_fff_tmp276);
                  r800_fff_tmp278 = simd_or(r800_fff_tmp274, r800_fff_tmp277);
                  r800_fff_tmp279 = simd_not(basis_bits.bit_5);
                  r800_fff_tmp280 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp279), simd_andc(tmp2, basis_bits.bit_4));
                  r800_fff_tmp281 = simd_and(r800_fff_tmp32, r800_fff_tmp280);
                  r800_fff_tmp282 = simd_or(r800_fff_tmp278, r800_fff_tmp281);
                  r800_fff_tmp283 = simd_and(r800_fff_tmp32, r800_fff_tmp186);
                  cc_range_d82_dbd_3 = simd_or(r800_fff_tmp282, r800_fff_tmp283);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(49), sequence_e0_b6_adv));
                  r800_fff_tmp284 = simd_and(sequence_e0_b6_adv, cc_range_d82_dbd_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp284);
                  byte_b7 = simd_and(r800_fff_tmp32, r800_fff_tmp84);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  r800_fff_tmp285 = simd_andc(r800_fff_tmp85, r800_fff_tmp88);
                  r800_fff_tmp286 = simd_not(r800_fff_tmp53);
                  r800_fff_tmp287 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp286), simd_andc(r800_fff_tmp65, basis_bits.bit_3));
                  r800_fff_tmp288 = simd_and(r800_fff_tmp3, r800_fff_tmp287);
                  r800_fff_tmp289 = simd_or(r800_fff_tmp285, r800_fff_tmp288);
                  r800_fff_tmp290 = simd_and(r800_fff_tmp101, r800_fff_tmp61);
                  r800_fff_tmp291 = simd_or(r800_fff_tmp289, r800_fff_tmp290);
                  r800_fff_tmp292 = simd_or(r800_fff_tmp291, r800_fff_tmp142);
                  cc_range_dc0_df2_3 = simd_or(r800_fff_tmp292, r800_fff_tmp125);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(50), sequence_e0_b7_adv));
                  r800_fff_tmp293 = simd_and(sequence_e0_b7_adv, cc_range_dc0_df2_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp293);
                  byte_b8 = simd_and(r800_fff_tmp32, r800_fff_tmp114);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  r800_fff_tmp294 = simd_or(basis_bits.bit_3, tmp7);
                  r800_fff_tmp295 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp258), simd_andc(r800_fff_tmp294, basis_bits.bit_2));
                  byte_range_81_ba = simd_and(r800_ffff_tmp3, r800_fff_tmp295);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(51), sequence_e0_b8_adv));
                  r800_fff_tmp296 = simd_and(sequence_e0_b8_adv, byte_range_81_ba);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp296);
                  byte_b9 = simd_and(r800_fff_tmp32, r800_fff_tmp136);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  r800_fff_tmp297 = simd_and(r800_fff_tmp42, r800_fff_tmp186);
                  cc_range_e40_e4d_3 = simd_or(r800_fff_tmp285, r800_fff_tmp297);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(52), sequence_e0_b9_adv));
                  r800_fff_tmp298 = simd_and(sequence_e0_b9_adv, cc_range_e40_e4d_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp298);
                  byte_ba = simd_and(r800_fff_tmp32, r800_fff_tmp151);
                  sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
                  r800_fff_tmp299 = simd_and(r800_fff_tmp115, r800_fff_tmp128);
                  r800_fff_tmp300 = simd_and(r800_fff_tmp42, r800_ffff_tmp2);
                  r800_fff_tmp301 = simd_or(r800_fff_tmp299, r800_fff_tmp300);
                  r800_fff_tmp302 = simd_or(r800_fff_tmp301, r800_fff_tmp90);
                  r800_fff_tmp303 = simd_and(r800_fff_tmp42, r800_fff_tmp151);
                  r800_fff_tmp304 = simd_or(r800_fff_tmp302, r800_fff_tmp303);
                  r800_fff_tmp305 = simd_or(r800_fff_tmp304, r800_fff_tmp297);
                  r800_fff_tmp306 = simd_or(r800_fff_tmp305, r800_fff_tmp238);
                  r800_fff_tmp307 = simd_and(r800_fff_tmp142, r800_fff_tmp17);
                  r800_fff_tmp308 = simd_or(r800_fff_tmp306, r800_fff_tmp307);
                  r800_fff_tmp309 = simd_and(r800_fff_tmp175, tmp6);
                  r800_fff_tmp310 = simd_or(r800_fff_tmp308, r800_fff_tmp309);
                  r800_fff_tmp311 = simd_or(r800_fff_tmp310, byte_a5);
                  r800_fff_tmp312 = simd_or(r800_fff_tmp311, byte_a7);
                  r800_fff_tmp313 = simd_and(r800_fff_tmp113, basis_bits.bit_6);
                  r800_fff_tmp314 = simd_and(r800_fff_tmp1, r800_fff_tmp313);
                  r800_fff_tmp315 = simd_or(r800_fff_tmp312, r800_fff_tmp314);
                  r800_fff_tmp316 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp214), simd_andc(r800_fff_tmp6, basis_bits.bit_3));
                  r800_fff_tmp317 = simd_and(r800_fff_tmp23, r800_fff_tmp316);
                  r800_fff_tmp318 = simd_or(r800_fff_tmp315, r800_fff_tmp317);
                  r800_fff_tmp319 = simd_not(basis_bits.bit_6);
                  r800_fff_tmp320 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp319), simd_andc(tmp1, basis_bits.bit_5));
                  r800_fff_tmp321 = simd_and(r800_fff_tmp266, r800_fff_tmp320);
                  cc_range_e81_ebb_3 = simd_or(r800_fff_tmp318, r800_fff_tmp321);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(53), sequence_e0_ba_adv));
                  r800_fff_tmp322 = simd_and(sequence_e0_ba_adv, cc_range_e81_ebb_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp322);
                  byte_bb = simd_and(r800_fff_tmp32, r800_fff_tmp167);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  r800_fff_tmp323 = simd_and(r800_fff_tmp42, r800_fff_tmp61);
                  r800_fff_tmp324 = simd_or(r800_fff_tmp86, r800_fff_tmp323);
                  r800_fff_tmp325 = simd_or(r800_fff_tmp324, r800_fff_tmp297);
                  r800_fff_tmp326 = simd_and(r800_fff_tmp101, r800_fff_tmp5);
                  cc_range_ec0_edc_3 = simd_or(r800_fff_tmp325, r800_fff_tmp326);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(54), sequence_e0_bb_adv));
                  r800_fff_tmp327 = simd_and(sequence_e0_bb_adv, cc_range_ec0_edc_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp327);
                  byte_bc = simd_and(r800_fff_tmp32, r800_fff_tmp177);
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  byte_80 = simd_andc(r800_fff_tmp42, tmp7);
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(55), sequence_e0_bc_adv));
                  r800_fff_tmp328 = simd_and(sequence_e0_bc_adv, byte_80);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp328);
                  byte_bd = r800_fff_tmp283;
                  sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
                  r800_fff_tmp329 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp8), simd_andc(r800_fff_tmp69, basis_bits.bit_2));
                  r800_fff_tmp330 = simd_and(r800_ffff_tmp3, r800_fff_tmp329);
                  r800_fff_tmp331 = simd_or(r800_fff_tmp85, r800_fff_tmp330);
                  cc_range_f40_f71_3 = simd_or(r800_fff_tmp331, r800_fff_tmp59);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(56), sequence_e0_bd_adv));
                  r800_fff_tmp332 = simd_and(sequence_e0_bd_adv, cc_range_f40_f71_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp332);
                  byte_be = simd_and(r800_fff_tmp32, r800_fff_tmp97);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  r800_fff_tmp333 = simd_andc(r800_fff_tmp42, r800_4dff_tmp1);
                  r800_fff_tmp334 = simd_xor(basis_bits.bit_3, basis_bits.bit_4);
                  r800_fff_tmp335 = simd_and(r800_fff_tmp3, r800_fff_tmp334);
                  r800_fff_tmp336 = simd_or(r800_fff_tmp333, r800_fff_tmp335);
                  r800_fff_tmp337 = simd_and(basis_bits.bit_3, r800_fff_tmp6);
                  r800_fff_tmp338 = simd_not(r800_fff_tmp337);
                  r800_fff_tmp339 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp338), simd_andc(r800_fff_tmp19, basis_bits.bit_2));
                  r800_fff_tmp340 = simd_and(r800_ffff_tmp3, r800_fff_tmp339);
                  cc_range_f80_f99_3 = simd_or(r800_fff_tmp336, r800_fff_tmp340);
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(57), sequence_e0_be_adv));
                  r800_fff_tmp341 = simd_and(sequence_e0_be_adv, cc_range_f80_f99_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r800_fff_tmp341);
                }
                else {
                  carryQ.CarryDequeueEnqueue(26, 32);
                }
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp5);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(58, 47))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp1);
                  byte_80 = simd_andc(r1000_1fff_tmp2, tmp7);
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(58), r1000_1fff_tmp3));
                  sequence_e1_80 = simd_and(r1000_1fff_tmp3, byte_80);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_and(basis_bits.bit_5, tmp1);
                  r1000_1fff_tmp5 = simd_or(basis_bits.bit_4, r1000_1fff_tmp4);
                  r1000_1fff_tmp6 = simd_and(basis_bits.bit_3, r1000_1fff_tmp5);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_2, r1000_1fff_tmp6);
                  r1000_1fff_tmp8 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp7);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp10 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp9);
                  r1000_1fff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp12 = simd_andc(r1000_1fff_tmp11, tmp6);
                  r1000_1fff_tmp13 = simd_and(r1000_1fff_tmp10, r1000_1fff_tmp12);
                  r1000_1fff_tmp14 = simd_or(r1000_1fff_tmp8, r1000_1fff_tmp13);
                  r1000_1fff_tmp15 = simd_and(r1000_1fff_tmp10, basis_bits.bit_4);
                  r1000_1fff_tmp16 = simd_and(r1000_1fff_tmp15, tmp2);
                  cc_range_1000_103b_3 = simd_or(r1000_1fff_tmp14, r1000_1fff_tmp16);
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(59), sequence_e1_80_adv));
                  r1000_1fff_tmp17 = simd_and(sequence_e1_80_adv, cc_range_1000_103b_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r1000_1fff_tmp17);
                  byte_81 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp2);
                  sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
                  r1000_1fff_tmp18 = simd_or(tmp5, tmp1);
                  r1000_1fff_tmp19 = simd_or(basis_bits.bit_3, r1000_1fff_tmp18);
                  r1000_1fff_tmp20 = simd_not(r1000_1fff_tmp19);
                  r1000_1fff_tmp21 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp20), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  r1000_1fff_tmp22 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp21);
                  r1000_1fff_tmp23 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r1000_1fff_tmp24 = simd_or(basis_bits.bit_5, tmp6);
                  r1000_1fff_tmp25 = simd_not(r1000_1fff_tmp24);
                  r1000_1fff_tmp26 = simd_and(basis_bits.bit_5, tmp6);
                  r1000_1fff_tmp27 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp25), simd_andc(r1000_1fff_tmp26, basis_bits.bit_4));
                  r1000_1fff_tmp28 = simd_and(r1000_1fff_tmp23, r1000_1fff_tmp27);
                  r1000_1fff_tmp29 = simd_or(r1000_1fff_tmp22, r1000_1fff_tmp28);
                  r1000_1fff_tmp30 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r1000_1fff_tmp31 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp32 = simd_and(r1000_1fff_tmp31, basis_bits.bit_6);
                  r1000_1fff_tmp33 = simd_or(basis_bits.bit_3, r1000_1fff_tmp32);
                  r1000_1fff_tmp34 = simd_and(r1000_1fff_tmp30, r1000_1fff_tmp33);
                  cc_range_1050_106e_3 = simd_or(r1000_1fff_tmp29, r1000_1fff_tmp34);
                  carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(60), sequence_e1_81_adv));
                  r1000_1fff_tmp35 = simd_and(sequence_e1_81_adv, cc_range_1050_106e_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r1000_1fff_tmp35);
                  r1000_1fff_tmp36 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp37 = simd_andc(r1000_1fff_tmp36, tmp5);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp37);
                  sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
                  r1000_1fff_tmp38 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp39 = simd_andc(r1000_1fff_tmp38, r1000_1fff_tmp4);
                  r1000_1fff_tmp40 = simd_and(r1000_1fff_tmp31, r1000_1fff_tmp36);
                  r1000_1fff_tmp41 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp40);
                  r1000_1fff_tmp42 = simd_or(r1000_1fff_tmp39, r1000_1fff_tmp41);
                  r1000_1fff_tmp43 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp44 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp43);
                  r1000_1fff_tmp45 = simd_andc(r1000_1fff_tmp31, basis_bits.bit_6);
                  r1000_1fff_tmp46 = simd_and(r1000_1fff_tmp44, r1000_1fff_tmp45);
                  r1000_1fff_tmp47 = simd_or(r1000_1fff_tmp42, r1000_1fff_tmp46);
                  cc_range_1080_10a0_3 = simd_or(r1000_1fff_tmp47, r1000_1fff_tmp30);
                  carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(61), sequence_e1_82_adv));
                  r1000_1fff_tmp48 = simd_and(sequence_e1_82_adv, cc_range_1080_10a0_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r1000_1fff_tmp48);
                  r1000_1fff_tmp49 = simd_andc(tmp1, tmp5);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp49);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  r1000_1fff_tmp50 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp51 = simd_andc(r1000_1fff_tmp38, r1000_1fff_tmp50);
                  r1000_1fff_tmp52 = simd_and(r800_ffff_tmp1, tmp1);
                  r1000_1fff_tmp53 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp52);
                  r1000_1fff_tmp54 = simd_or(r1000_1fff_tmp51, r1000_1fff_tmp53);
                  r1000_1fff_tmp55 = simd_and(r1000_1fff_tmp31, r800_1fff_tmp1);
                  r1000_1fff_tmp56 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp55);
                  r1000_1fff_tmp57 = simd_or(r1000_1fff_tmp54, r1000_1fff_tmp56);
                  r1000_1fff_tmp58 = simd_and(basis_bits.bit_3, tmp3);
                  r1000_1fff_tmp59 = simd_not(r1000_1fff_tmp58);
                  r1000_1fff_tmp60 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp59), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  r1000_1fff_tmp61 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp60);
                  r1000_1fff_tmp62 = simd_or(r1000_1fff_tmp57, r1000_1fff_tmp61);
                  r1000_1fff_tmp63 = simd_and(r1000_1fff_tmp10, r1000_1fff_tmp31);
                  cc_range_10c0_10fc_3 = simd_or(r1000_1fff_tmp62, r1000_1fff_tmp63);
                  carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(62), sequence_e1_83_adv));
                  r1000_1fff_tmp64 = simd_and(sequence_e1_83_adv, cc_range_10c0_10fc_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r1000_1fff_tmp64);
                  r1000_1fff_tmp65 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp25), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_84_88 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp65);
                  byte_e1_byte_range_84_88 = simd_and(byte_e1_adv, byte_range_84_88);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[63] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_84_88, carryQ.get_carry_in(63), r1000_1fff_tmp66));
                  byte_e1_byte_range_84_88_sfx = simd_and(r1000_1fff_tmp66, byte_range_80_bf);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, byte_e1_byte_range_84_88_sfx);
                  r1000_1fff_tmp67 = simd_andc(byte_range_80_bf, r1000_1fff_tmp1);
                  r1000_1fff_tmp68 = simd_and(r1000_1fff_tmp11, r800_1fff_tmp1);
                  byte_89 = simd_and(r1000_1fff_tmp67, r1000_1fff_tmp68);
                  sequence_e1_89 = simd_and(byte_e1_adv, byte_89);
                  r1000_1fff_tmp69 = simd_and(basis_bits.bit_4, r1000_1fff_tmp24);
                  byte_range_80_88 = simd_andc(r1000_1fff_tmp67, r1000_1fff_tmp69);
                  carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e1_89, carryQ.get_carry_in(64), r1000_1fff_tmp70));
                  sequence_e1_89_byte_range_80_88 = simd_and(r1000_1fff_tmp70, byte_range_80_88);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_89_byte_range_80_88);
                  r1000_1fff_tmp71 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp36);
                  byte_8a = simd_and(r1000_1fff_tmp67, r1000_1fff_tmp71);
                  sequence_e1_8a = simd_and(byte_e1_adv, byte_8a);
                  carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_e1_8a, carryQ.get_carry_in(65), r1000_1fff_tmp72));
                  sequence_e1_8a_byte_range_80_88 = simd_and(r1000_1fff_tmp72, byte_range_80_88);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_8a_byte_range_80_88);
                  r1000_1fff_tmp73 = simd_and(r1000_1fff_tmp11, tmp1);
                  byte_8b = simd_and(r1000_1fff_tmp67, r1000_1fff_tmp73);
                  sequence_e1_8b = simd_and(byte_e1_adv, byte_8b);
                  carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_e1_8b, carryQ.get_carry_in(66), r1000_1fff_tmp74));
                  sequence_e1_8b_80 = simd_and(r1000_1fff_tmp74, byte_80);
                  r1000_1fff_tmp75 = simd_andc(r1000_1fff_tmp31, tmp6);
                  byte_8c = simd_and(r1000_1fff_tmp67, r1000_1fff_tmp75);
                  sequence_e1_8c = simd_and(byte_e1_adv, byte_8c);
                  r1000_1fff_tmp76 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r1000_1fff_tmp77 = simd_and(basis_bits.bit_3, tmp7);
                  byte_range_80_90 = simd_andc(r1000_1fff_tmp76, r1000_1fff_tmp77);
                  carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e1_8c, carryQ.get_carry_in(67), r1000_1fff_tmp78));
                  sequence_e1_8c_byte_range_80_90 = simd_and(r1000_1fff_tmp78, byte_range_80_90);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_8c_byte_range_80_90);
                  byte_8d = simd_and(r1000_1fff_tmp67, r1000_1fff_tmp55);
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  byte_range_80_9a = simd_andc(r1000_1fff_tmp76, r1000_1fff_tmp58);
                  carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(68), r1000_1fff_tmp79));
                  sequence_e1_8d_byte_range_80_9a = simd_and(r1000_1fff_tmp79, byte_range_80_9a);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_8d_byte_range_80_9a);
                  byte_8e = simd_and(r1000_1fff_tmp67, r1000_1fff_tmp40);
                  sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
                  byte_range_80_8f = r1000_1fff_tmp67;
                  carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(69), r1000_1fff_tmp80));
                  sequence_e1_8e_byte_range_80_8f = simd_and(r1000_1fff_tmp80, byte_range_80_8f);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_8e_byte_range_80_8f);
                  r1000_1fff_tmp81 = simd_and(r1000_1fff_tmp31, tmp1);
                  byte_8f = simd_and(byte_range_80_8f, r1000_1fff_tmp81);
                  sequence_e1_8f = simd_and(byte_e1_adv, byte_8f);
                  r1000_1fff_tmp82 = simd_or(basis_bits.bit_4, r1000_1fff_tmp26);
                  r1000_1fff_tmp83 = simd_and(basis_bits.bit_3, r1000_1fff_tmp82);
                  r1000_1fff_tmp84 = simd_and(basis_bits.bit_2, r1000_1fff_tmp83);
                  byte_range_80_b4 = simd_andc(byte_range_80_bf, r1000_1fff_tmp84);
                  carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e1_8f, carryQ.get_carry_in(70), r1000_1fff_tmp85));
                  sequence_e1_8f_byte_range_80_b4 = simd_and(r1000_1fff_tmp85, byte_range_80_b4);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_8f_byte_range_80_b4);
                  r1000_1fff_tmp86 = simd_and(byte_range_80_bf, r1000_1fff_tmp43);
                  byte_90 = simd_andc(r1000_1fff_tmp86, tmp7);
                  sequence_e1_90 = simd_and(byte_e1_adv, byte_90);
                  r1000_1fff_tmp87 = simd_or(basis_bits.bit_3, tmp7);
                  r1000_1fff_tmp88 = simd_or(basis_bits.bit_2, r1000_1fff_tmp87);
                  byte_range_81_bf = simd_and(byte_range_80_bf, r1000_1fff_tmp88);
                  carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e1_90, carryQ.get_carry_in(71), r1000_1fff_tmp89));
                  sequence_e1_90_byte_range_81_bf = simd_and(r1000_1fff_tmp89, byte_range_81_bf);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_90_byte_range_81_bf);
                  byte_91 = simd_and(r1000_1fff_tmp86, r800_1fff_tmp2);
                  sequence_e1_91 = simd_and(byte_e1_adv, byte_91);
                  carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e1_91, carryQ.get_carry_in(72), r1000_1fff_tmp90));
                  sequence_e1_91_byte_range_80_bf = simd_and(r1000_1fff_tmp90, byte_range_80_bf);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_91_byte_range_80_bf);
                  byte_99 = simd_and(r1000_1fff_tmp86, r1000_1fff_tmp68);
                  sequence_e1_99 = simd_and(byte_e1_adv, byte_99);
                  r1000_1fff_tmp91 = simd_and(r1000_1fff_tmp31, tmp6);
                  r1000_1fff_tmp92 = simd_or(basis_bits.bit_3, r1000_1fff_tmp91);
                  r1000_1fff_tmp93 = simd_and(basis_bits.bit_2, r1000_1fff_tmp92);
                  byte_range_80_ac = simd_andc(byte_range_80_bf, r1000_1fff_tmp93);
                  carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e1_99, carryQ.get_carry_in(73), r1000_1fff_tmp94));
                  sequence_e1_99_byte_range_80_ac = simd_and(r1000_1fff_tmp94, byte_range_80_ac);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_99_byte_range_80_ac);
                  byte_9a = simd_and(r1000_1fff_tmp86, r1000_1fff_tmp71);
                  sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
                  byte_range_81_9a = simd_and(r1000_1fff_tmp76, tmp8);
                  carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(74), r1000_1fff_tmp95));
                  sequence_e1_9a_byte_range_81_9a = simd_and(r1000_1fff_tmp95, byte_range_81_9a);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_9a_byte_range_81_9a);
                  byte_9b = simd_and(r1000_1fff_tmp86, r1000_1fff_tmp73);
                  sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
                  r1000_1fff_tmp96 = simd_or(basis_bits.bit_3, tmp3);
                  r1000_1fff_tmp97 = simd_and(basis_bits.bit_2, r1000_1fff_tmp96);
                  byte_range_80_aa = simd_andc(byte_range_80_bf, r1000_1fff_tmp97);
                  carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(75), r1000_1fff_tmp98));
                  sequence_e1_9b_byte_range_80_aa = simd_and(r1000_1fff_tmp98, byte_range_80_aa);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_9b_byte_range_80_aa);
                  byte_9c = simd_and(r1000_1fff_tmp86, r1000_1fff_tmp75);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  r1000_1fff_tmp99 = simd_and(basis_bits.bit_4, r1000_1fff_tmp26);
                  byte_range_80_8c = simd_andc(byte_range_80_8f, r1000_1fff_tmp99);
                  carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(76), r1000_1fff_tmp100));
                  sequence_e1_9c_byte_range_80_8c = simd_and(r1000_1fff_tmp100, byte_range_80_8c);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_9c_byte_range_80_8c);
                  byte_9d = simd_and(r1000_1fff_tmp86, r1000_1fff_tmp55);
                  sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
                  r1000_1fff_tmp101 = simd_and(basis_bits.bit_3, tmp5);
                  byte_range_80_93 = simd_andc(r1000_1fff_tmp76, r1000_1fff_tmp101);
                  carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(77), r1000_1fff_tmp102));
                  sequence_e1_9d_byte_range_80_93 = simd_and(r1000_1fff_tmp102, byte_range_80_93);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_9d_byte_range_80_93);
                  byte_9e = simd_and(r1000_1fff_tmp86, r1000_1fff_tmp40);
                  sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
                  r1000_1fff_tmp103 = simd_and(basis_bits.bit_2, r1000_1fff_tmp101);
                  byte_range_80_b3 = simd_andc(byte_range_80_bf, r1000_1fff_tmp103);
                  carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(78), r1000_1fff_tmp104));
                  sequence_e1_9e_byte_range_80_b3 = simd_and(r1000_1fff_tmp104, byte_range_80_b3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_9e_byte_range_80_b3);
                  byte_9f = simd_and(r1000_1fff_tmp86, r1000_1fff_tmp81);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(79), r1000_1fff_tmp105));
                  sequence_e1_9f_byte_range_80_88 = simd_and(r1000_1fff_tmp105, byte_range_80_88);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_9f_byte_range_80_88);
                  r1000_1fff_tmp106 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r1000_1fff_tmp106, tmp7);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(80), r1000_1fff_tmp107));
                  sequence_e1_a0_byte_range_a0_bf = simd_and(r1000_1fff_tmp107, byte_range_a0_bf);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_a0_byte_range_a0_bf);
                  byte_a1 = simd_and(r1000_1fff_tmp106, r800_1fff_tmp2);
                  sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
                  carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(81), r1000_1fff_tmp108));
                  sequence_e1_a1_byte_range_80_b7 = simd_and(r1000_1fff_tmp108, byte_range_80_b7);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_a1_byte_range_80_b7);
                  byte_a2 = simd_and(r1000_1fff_tmp106, r1000_1fff_tmp37);
                  sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
                  carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(82), r1000_1fff_tmp109));
                  sequence_e1_a2_byte_range_80_aa = simd_and(r1000_1fff_tmp109, byte_range_80_aa);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_a2_byte_range_80_aa);
                  byte_a3 = simd_and(r1000_1fff_tmp106, r1000_1fff_tmp49);
                  sequence_e1_a3 = simd_and(byte_e1_adv, byte_a3);
                  r1000_1fff_tmp110 = simd_or(basis_bits.bit_4, r1000_1fff_tmp50);
                  r1000_1fff_tmp111 = simd_and(basis_bits.bit_3, r1000_1fff_tmp110);
                  r1000_1fff_tmp112 = simd_and(basis_bits.bit_2, r1000_1fff_tmp111);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r1000_1fff_tmp112);
                  carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e1_a3, carryQ.get_carry_in(83), r1000_1fff_tmp113));
                  sequence_e1_a3_byte_range_80_b5 = simd_and(r1000_1fff_tmp113, byte_range_80_b5);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_a3_byte_range_80_b5);
                  byte_a4 = simd_and(r1000_1fff_tmp106, r800_ffff_tmp2);
                  sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
                  r1000_1fff_tmp114 = simd_and(basis_bits.bit_3, r1000_1fff_tmp81);
                  byte_range_80_9e = simd_andc(r1000_1fff_tmp76, r1000_1fff_tmp114);
                  carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(84), r1000_1fff_tmp115));
                  sequence_e1_a4_byte_range_80_9e = simd_and(r1000_1fff_tmp115, byte_range_80_9e);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_a4_byte_range_80_9e);
                  r1000_1fff_tmp116 = simd_and(r800_ffff_tmp1, r800_1fff_tmp1);
                  byte_a5 = simd_and(r1000_1fff_tmp106, r1000_1fff_tmp116);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  r1000_1fff_tmp117 = simd_not(r1000_1fff_tmp33);
                  r1000_1fff_tmp118 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp117), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_ad = simd_and(byte_range_80_bf, r1000_1fff_tmp118);
                  carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(85), r1000_1fff_tmp119));
                  sequence_e1_a5_byte_range_90_ad = simd_and(r1000_1fff_tmp119, byte_range_90_ad);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_a5_byte_range_90_ad);
                  r1000_1fff_tmp120 = simd_and(r800_ffff_tmp1, r1000_1fff_tmp36);
                  byte_a6 = simd_and(r1000_1fff_tmp106, r1000_1fff_tmp120);
                  sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
                  r1000_1fff_tmp121 = simd_or(basis_bits.bit_3, r1000_1fff_tmp31);
                  r1000_1fff_tmp122 = simd_and(basis_bits.bit_2, r1000_1fff_tmp121);
                  byte_range_80_ab = simd_andc(byte_range_80_bf, r1000_1fff_tmp122);
                  carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(86), r1000_1fff_tmp123));
                  sequence_e1_a6_byte_range_80_ab = simd_and(r1000_1fff_tmp123, byte_range_80_ab);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_a6_byte_range_80_ab);
                  byte_a7 = simd_and(r1000_1fff_tmp106, r1000_1fff_tmp52);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  r1000_1fff_tmp124 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp125 = simd_and(basis_bits.bit_4, r1000_1fff_tmp124);
                  byte_range_80_89 = simd_andc(byte_range_80_8f, r1000_1fff_tmp125);
                  carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(87), r1000_1fff_tmp126));
                  sequence_e1_a7_byte_range_80_89 = simd_and(r1000_1fff_tmp126, byte_range_80_89);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_a7_byte_range_80_89);
                  byte_a8 = simd_and(r1000_1fff_tmp106, r1000_1fff_tmp12);
                  sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
                  r1000_1fff_tmp127 = simd_and(basis_bits.bit_3, r1000_1fff_tmp31);
                  byte_range_80_9b = simd_andc(r1000_1fff_tmp76, r1000_1fff_tmp127);
                  carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(88), r1000_1fff_tmp128));
                  sequence_e1_a8_byte_range_80_9b = simd_and(r1000_1fff_tmp128, byte_range_80_9b);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_a8_byte_range_80_9b);
                  byte_a9 = simd_and(r1000_1fff_tmp106, r1000_1fff_tmp68);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(89), r1000_1fff_tmp129));
                  sequence_e1_a9_byte_range_80_9e = simd_and(r1000_1fff_tmp129, byte_range_80_9e);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_a9_byte_range_80_9e);
                  byte_aa = simd_and(r1000_1fff_tmp106, r1000_1fff_tmp71);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(90), r1000_1fff_tmp130));
                  sequence_e1_aa_a7 = simd_and(r1000_1fff_tmp130, byte_a7);
                  byte_ac = simd_and(r1000_1fff_tmp106, r1000_1fff_tmp75);
                  sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
                  carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(91), r1000_1fff_tmp131));
                  sequence_e1_ac_byte_range_80_b3 = simd_and(r1000_1fff_tmp131, byte_range_80_b3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_ac_byte_range_80_b3);
                  byte_ad = simd_and(r1000_1fff_tmp106, r1000_1fff_tmp55);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  byte_range_80_83 = simd_andc(byte_range_80_8f, tmp5);
                  carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(92), r1000_1fff_tmp132));
                  sequence_e1_ad_byte_range_80_83 = simd_and(r1000_1fff_tmp132, byte_range_80_83);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_ad_byte_range_80_83);
                  byte_ae = simd_and(r1000_1fff_tmp106, r1000_1fff_tmp40);
                  sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
                  r1000_1fff_tmp133 = simd_or(basis_bits.bit_3, r1000_1fff_tmp125);
                  r1000_1fff_tmp134 = simd_and(basis_bits.bit_2, r1000_1fff_tmp133);
                  byte_range_80_a9 = simd_andc(byte_range_80_bf, r1000_1fff_tmp134);
                  carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(93), r1000_1fff_tmp135));
                  sequence_e1_ae_byte_range_80_a9 = simd_and(r1000_1fff_tmp135, byte_range_80_a9);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_ae_byte_range_80_a9);
                  byte_af = simd_and(r1000_1fff_tmp106, r1000_1fff_tmp81);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  r1000_1fff_tmp136 = simd_or(basis_bits.bit_3, r1000_1fff_tmp110);
                  r1000_1fff_tmp137 = simd_and(basis_bits.bit_2, r1000_1fff_tmp136);
                  byte_range_80_a5 = simd_andc(byte_range_80_bf, r1000_1fff_tmp137);
                  carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(94), r1000_1fff_tmp138));
                  sequence_e1_af_byte_range_80_a5 = simd_and(r1000_1fff_tmp138, byte_range_80_a5);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_af_byte_range_80_a5);
                  r1000_1fff_tmp139 = simd_and(byte_range_80_bf, r1000_1fff_tmp9);
                  byte_b0 = simd_andc(r1000_1fff_tmp139, tmp7);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(95), r1000_1fff_tmp140));
                  sequence_e1_b0_byte_range_80_b5 = simd_and(r1000_1fff_tmp140, byte_range_80_b5);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_b0_byte_range_80_b5);
                  byte_b1 = simd_and(r1000_1fff_tmp139, r800_1fff_tmp2);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  r1000_1fff_tmp141 = simd_and(byte_range_80_8f, r1000_1fff_tmp31);
                  byte_range_8d_8f = simd_and(r1000_1fff_tmp141, tmp6);
                  carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(96), r1000_1fff_tmp142));
                  sequence_e1_b1_byte_range_8d_8f = simd_and(r1000_1fff_tmp142, byte_range_8d_8f);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_b1_byte_range_8d_8f);
                  byte_b3 = simd_and(r1000_1fff_tmp139, r1000_1fff_tmp49);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  r1000_1fff_tmp143 = simd_and(r1000_1fff_tmp106, basis_bits.bit_4);
                  r1000_1fff_tmp144 = simd_xor(basis_bits.bit_5, tmp6);
                  byte_range_a9_ac = simd_and(r1000_1fff_tmp143, r1000_1fff_tmp144);
                  carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(97), r1000_1fff_tmp145));
                  sequence_e1_b3_byte_range_a9_ac = simd_and(r1000_1fff_tmp145, byte_range_a9_ac);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_b3_byte_range_a9_ac);
                  byte_b4 = simd_and(r1000_1fff_tmp139, r800_ffff_tmp2);
                  sequence_e1_b4 = simd_and(byte_e1_adv, byte_b4);
                  carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_e1_b4, carryQ.get_carry_in(98), r1000_1fff_tmp146));
                  sequence_e1_b4_byte_range_80_bf = simd_and(r1000_1fff_tmp146, byte_range_80_bf);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_b4_byte_range_80_bf);
                  byte_b7 = simd_and(r1000_1fff_tmp139, r1000_1fff_tmp52);
                  sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
                  r1000_1fff_tmp147 = simd_not(r1000_1fff_tmp82);
                  r1000_1fff_tmp148 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp147), simd_andc(r1000_1fff_tmp5, basis_bits.bit_3));
                  byte_range_a7_b4 = simd_and(byte_range_a0_bf, r1000_1fff_tmp148);
                  carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_e1_b7, carryQ.get_carry_in(99), r1000_1fff_tmp149));
                  sequence_e1_b7_byte_range_a7_b4 = simd_and(r1000_1fff_tmp149, byte_range_a7_b4);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_b7_byte_range_a7_b4);
                  byte_b8 = simd_and(r1000_1fff_tmp139, r1000_1fff_tmp12);
                  sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
                  carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(100), r1000_1fff_tmp150));
                  sequence_e1_b8_byte_range_80_bf = simd_and(r1000_1fff_tmp150, byte_range_80_bf);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_b8_byte_range_80_bf);
                  byte_bc = simd_and(r1000_1fff_tmp139, r1000_1fff_tmp75);
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  byte_range_80_95 = simd_andc(r1000_1fff_tmp76, r1000_1fff_tmp111);
                  carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(101), r1000_1fff_tmp151));
                  sequence_e1_bc_byte_range_80_95 = simd_and(r1000_1fff_tmp151, byte_range_80_95);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_bc_byte_range_80_95);
                  byte_bd = simd_and(r1000_1fff_tmp139, r1000_1fff_tmp55);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  r1000_1fff_tmp152 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_range_80_85 = simd_andc(r1000_1fff_tmp152, r1000_1fff_tmp50);
                  carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(102), r1000_1fff_tmp153));
                  sequence_e1_bd_byte_range_80_85 = simd_and(r1000_1fff_tmp153, byte_range_80_85);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_bd_byte_range_80_85);
                  byte_be = simd_and(r1000_1fff_tmp139, r1000_1fff_tmp40);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(103), r1000_1fff_tmp154));
                  sequence_e1_be_byte_range_80_b4 = simd_and(r1000_1fff_tmp154, byte_range_80_b4);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_be_byte_range_80_b4);
                  byte_bf = simd_and(r1000_1fff_tmp139, r1000_1fff_tmp81);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  r1000_1fff_tmp155 = simd_not(tmp6);
                  r1000_1fff_tmp156 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp155), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_82_84 = simd_and(r1000_1fff_tmp152, r1000_1fff_tmp156);
                  carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(104), r1000_1fff_tmp157));
                  sequence_e1_bf_byte_range_82_84 = simd_and(r1000_1fff_tmp157, byte_range_82_84);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e1_bf_byte_range_82_84);
                }
                else {
                  carryQ.CarryDequeueEnqueue(58, 47);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(26, 79);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp5);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(105, 29))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp5);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(105, 17))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, tmp5);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[105] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(105), r2000_2fff_tmp5));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp5, byte_81);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp6);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp9 = simd_and(r2000_2fff_tmp8, tmp1);
                  r2000_2fff_tmp10 = simd_or(r2000_2fff_tmp4, r2000_2fff_tmp9);
                  cc_range_2071_207f_3 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp10);
                  carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(106), sequence_e2_81_adv));
                  r2000_2fff_tmp11 = simd_and(sequence_e2_81_adv, cc_range_2071_207f_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r2000_2fff_tmp11);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp13 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp12);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_5, tmp6);
                  r2000_2fff_tmp15 = simd_and(basis_bits.bit_4, r2000_2fff_tmp14);
                  byte_range_90_9c = simd_andc(r2000_2fff_tmp13, r2000_2fff_tmp15);
                  carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(107), sequence_e2_82_adv));
                  r2000_2fff_tmp16 = simd_and(sequence_e2_82_adv, byte_range_90_9c);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r2000_2fff_tmp16);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp2);
                  sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
                  r2000_2fff_tmp17 = simd_and(r800_ffff_tmp1, tmp1);
                  r2000_2fff_tmp18 = simd_or(r2000_4dff_tmp2, r2000_2fff_tmp17);
                  r2000_2fff_tmp19 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp18);
                  r2000_2fff_tmp20 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp21 = simd_not(tmp5);
                  r2000_2fff_tmp22 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp23 = simd_and(basis_bits.bit_4, r2000_2fff_tmp22);
                  r2000_2fff_tmp24 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp21), simd_andc(r2000_2fff_tmp23, basis_bits.bit_3));
                  r2000_2fff_tmp25 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp24);
                  r2000_2fff_tmp26 = simd_or(r2000_2fff_tmp19, r2000_2fff_tmp25);
                  r2000_2fff_tmp27 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp3);
                  r2000_2fff_tmp28 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp27);
                  r2000_2fff_tmp29 = simd_or(r2000_2fff_tmp26, r2000_2fff_tmp28);
                  r2000_2fff_tmp30 = simd_and(r2000_2fff_tmp13, basis_bits.bit_4);
                  r2000_2fff_tmp31 = simd_not(basis_bits.bit_6);
                  r2000_2fff_tmp32 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp31), simd_andc(tmp6, basis_bits.bit_5));
                  r2000_2fff_tmp33 = simd_and(r2000_2fff_tmp30, r2000_2fff_tmp32);
                  r2000_2fff_tmp34 = simd_or(r2000_2fff_tmp29, r2000_2fff_tmp33);
                  r2000_2fff_tmp35 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r2000_2fff_tmp36 = simd_and(r2000_2fff_tmp35, r800_ffff_tmp2);
                  r2000_2fff_tmp37 = simd_or(r2000_2fff_tmp34, r2000_2fff_tmp36);
                  r2000_2fff_tmp38 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  r2000_2fff_tmp39 = simd_and(r2000_2fff_tmp35, r2000_2fff_tmp38);
                  r2000_2fff_tmp40 = simd_or(r2000_2fff_tmp37, r2000_2fff_tmp39);
                  r2000_2fff_tmp41 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp42 = simd_andc(r2000_2fff_tmp41, tmp6);
                  r2000_2fff_tmp43 = simd_and(r2000_2fff_tmp35, r2000_2fff_tmp42);
                  r2000_2fff_tmp44 = simd_or(r2000_2fff_tmp40, r2000_2fff_tmp43);
                  r2000_2fff_tmp45 = simd_and(r2000_2fff_tmp35, basis_bits.bit_4);
                  r2000_2fff_tmp46 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp47 = simd_and(r2000_2fff_tmp45, r2000_2fff_tmp46);
                  r2000_2fff_tmp48 = simd_or(r2000_2fff_tmp44, r2000_2fff_tmp47);
                  r2000_2fff_tmp49 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp50 = simd_not(r2000_2fff_tmp23);
                  r2000_2fff_tmp51 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp50), simd_andc(r2000_2fff_tmp9, basis_bits.bit_3));
                  r2000_2fff_tmp52 = simd_and(r2000_2fff_tmp49, r2000_2fff_tmp51);
                  r2000_2fff_tmp53 = simd_or(r2000_2fff_tmp48, r2000_2fff_tmp52);
                  r2000_2fff_tmp54 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp8);
                  cc_range_2102_213c_3 = simd_or(r2000_2fff_tmp53, r2000_2fff_tmp54);
                  carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(108), sequence_e2_84_adv));
                  r2000_2fff_tmp55 = simd_and(sequence_e2_84_adv, cc_range_2102_213c_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r2000_2fff_tmp55);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp27);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp56 = simd_not(r2000_2fff_tmp22);
                  r2000_2fff_tmp57 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp56), simd_andc(r2000_2fff_tmp14, basis_bits.bit_4));
                  r2000_2fff_tmp58 = simd_and(r2000_2fff_tmp8, r2000_4dff_tmp1);
                  r2000_2fff_tmp59 = simd_or(r2000_2fff_tmp57, r2000_2fff_tmp58);
                  r2000_2fff_tmp60 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp59);
                  cc_range_2145_2160_3 = simd_or(r2000_2fff_tmp60, r2000_2fff_tmp49);
                  carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(109), sequence_e2_85_adv));
                  r2000_2fff_tmp61 = simd_and(sequence_e2_85_adv, cc_range_2145_2160_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r2000_2fff_tmp61);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp38);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp62 = simd_or(basis_bits.bit_5, tmp6);
                  r2000_2fff_tmp63 = simd_and(basis_bits.bit_4, r2000_2fff_tmp62);
                  byte_range_80_88 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp63);
                  carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(110), sequence_e2_86_adv));
                  r2000_2fff_tmp64 = simd_and(sequence_e2_86_adv, byte_range_80_88);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r2000_2fff_tmp64);
                  byte_92 = simd_and(r2000_2fff_tmp13, r2000_4dff_tmp2);
                  sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
                  r2000_2fff_tmp65 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp66 = simd_or(basis_bits.bit_4, r2000_2fff_tmp65);
                  byte_range_b6_bf = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp66);
                  carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_e2_92, carryQ.get_carry_in(111), sequence_e2_92_adv));
                  r2000_2fff_tmp67 = simd_and(sequence_e2_92_adv, byte_range_b6_bf);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r2000_2fff_tmp67);
                  r2000_2fff_tmp68 = simd_andc(tmp1, tmp5);
                  byte_93 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp68);
                  sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
                  r2000_2fff_tmp69 = simd_or(basis_bits.bit_3, r2000_2fff_tmp23);
                  r2000_2fff_tmp70 = simd_and(basis_bits.bit_2, r2000_2fff_tmp69);
                  byte_range_80_a9 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp70);
                  carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(112), sequence_e2_93_adv));
                  r2000_2fff_tmp71 = simd_and(sequence_e2_93_adv, byte_range_80_a9);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r2000_2fff_tmp71);
                  byte_b0 = simd_andc(r2000_2fff_tmp7, tmp7);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  r2000_2fff_tmp72 = simd_or(basis_bits.bit_3, r2000_2fff_tmp9);
                  r2000_2fff_tmp73 = simd_and(basis_bits.bit_2, r2000_2fff_tmp72);
                  r2000_2fff_tmp74 = simd_andc(r2000_2fff_tmp73, r2000_2fff_tmp6);
                  cc_range_2c00_2c30_3 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp74);
                  carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(113), sequence_e2_b0_adv));
                  r2000_2fff_tmp75 = simd_and(sequence_e2_b0_adv, cc_range_2c00_2c30_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r2000_2fff_tmp75);
                  byte_b1 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp4);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp76 = simd_and(basis_bits.bit_3, r2000_2fff_tmp9);
                  r2000_2fff_tmp77 = simd_andc(r2000_2fff_tmp20, r2000_2fff_tmp76);
                  cc_range_2c40_2c60_3 = simd_or(r2000_2fff_tmp77, r2000_2fff_tmp49);
                  carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(114), sequence_e2_b1_adv));
                  r2000_2fff_tmp78 = simd_and(sequence_e2_b1_adv, cc_range_2c40_2c60_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r2000_2fff_tmp78);
                  byte_b2 = simd_and(r2000_2fff_tmp7, r2000_4dff_tmp2);
                  sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(115), sequence_e2_b2_adv));
                  r2000_2fff_tmp79 = simd_and(sequence_e2_b2_adv, byte_range_80_bf);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r2000_2fff_tmp79);
                  r2000_2fff_tmp80 = simd_and(byte_range_80_bf, r2000_2fff_tmp6);
                  byte_b3 = simd_and(r2000_2fff_tmp80, r2000_2fff_tmp68);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp81 = simd_or(basis_bits.bit_4, r2000_2fff_tmp14);
                  r2000_2fff_tmp82 = simd_or(basis_bits.bit_3, r2000_2fff_tmp81);
                  r2000_2fff_tmp83 = simd_and(basis_bits.bit_2, r2000_2fff_tmp82);
                  r2000_2fff_tmp84 = simd_andc(byte_range_80_bf, r2000_2fff_tmp83);
                  r2000_2fff_tmp85 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r2000_2fff_tmp86 = simd_and(r2000_2fff_tmp85, basis_bits.bit_4);
                  r2000_2fff_tmp87 = simd_xor(basis_bits.bit_5, tmp1);
                  r2000_2fff_tmp88 = simd_and(r2000_2fff_tmp86, r2000_2fff_tmp87);
                  r2000_2fff_tmp89 = simd_or(r2000_2fff_tmp84, r2000_2fff_tmp88);
                  r2000_2fff_tmp90 = simd_and(r2000_2fff_tmp80, r800_4dff_tmp2);
                  cc_range_2cc0_2cf2_3 = simd_or(r2000_2fff_tmp89, r2000_2fff_tmp90);
                  carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(116), sequence_e2_b3_adv));
                  r2000_2fff_tmp91 = simd_and(sequence_e2_b3_adv, cc_range_2cc0_2cf2_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r2000_2fff_tmp91);
                  byte_b4 = simd_and(r2000_2fff_tmp80, r800_ffff_tmp2);
                  sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
                  r2000_2fff_tmp92 = simd_or(basis_bits.bit_3, r2000_2fff_tmp66);
                  r2000_2fff_tmp93 = simd_and(basis_bits.bit_2, r2000_2fff_tmp92);
                  r2000_2fff_tmp94 = simd_andc(byte_range_80_bf, r2000_2fff_tmp93);
                  r2000_2fff_tmp95 = simd_and(r2000_2fff_tmp85, r2000_2fff_tmp17);
                  r2000_2fff_tmp96 = simd_or(r2000_2fff_tmp94, r2000_2fff_tmp95);
                  r2000_2fff_tmp97 = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp3);
                  r2000_2fff_tmp98 = simd_and(r2000_2fff_tmp85, r2000_2fff_tmp97);
                  r2000_2fff_tmp99 = simd_or(r2000_2fff_tmp96, r2000_2fff_tmp98);
                  cc_range_2d00_2d30_3 = simd_or(r2000_2fff_tmp99, r2000_2fff_tmp80);
                  carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(117), sequence_e2_b4_adv));
                  r2000_2fff_tmp100 = simd_and(sequence_e2_b4_adv, cc_range_2d00_2d30_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r2000_2fff_tmp100);
                  byte_b5 = simd_and(r2000_2fff_tmp80, r2000_2fff_tmp27);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  r2000_2fff_tmp101 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
                  r2000_2fff_tmp102 = simd_and(basis_bits.bit_2, r2000_2fff_tmp101);
                  r2000_2fff_tmp103 = simd_andc(byte_range_80_bf, r2000_2fff_tmp102);
                  r2000_2fff_tmp104 = simd_and(r2000_2fff_tmp85, r2000_2fff_tmp9);
                  cc_range_2d40_2d6f_3 = simd_or(r2000_2fff_tmp103, r2000_2fff_tmp104);
                  carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(118), sequence_e2_b5_adv));
                  r2000_2fff_tmp105 = simd_and(sequence_e2_b5_adv, cc_range_2d40_2d6f_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r2000_2fff_tmp105);
                  byte_b6 = simd_and(r2000_2fff_tmp80, r2000_2fff_tmp38);
                  sequence_e2_b6 = simd_and(byte_e2_adv, byte_b6);
                  r2000_2fff_tmp106 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r2000_2fff_tmp107 = simd_and(basis_bits.bit_5, tmp1);
                  r2000_2fff_tmp108 = simd_or(basis_bits.bit_4, r2000_2fff_tmp107);
                  r2000_2fff_tmp109 = simd_and(basis_bits.bit_3, r2000_2fff_tmp108);
                  r2000_2fff_tmp110 = simd_andc(r2000_2fff_tmp106, r2000_2fff_tmp109);
                  r2000_2fff_tmp111 = simd_andc(r2000_2fff_tmp85, basis_bits.bit_4);
                  r2000_2fff_tmp112 = simd_andc(r2000_2fff_tmp111, r2000_2fff_tmp107);
                  r2000_2fff_tmp113 = simd_or(r2000_2fff_tmp110, r2000_2fff_tmp112);
                  r2000_2fff_tmp114 = simd_andc(r2000_2fff_tmp86, r2000_2fff_tmp107);
                  r2000_2fff_tmp115 = simd_or(r2000_2fff_tmp113, r2000_2fff_tmp114);
                  r2000_2fff_tmp116 = simd_andc(r2000_2fff_tmp80, basis_bits.bit_4);
                  r2000_2fff_tmp117 = simd_andc(r2000_2fff_tmp116, r2000_2fff_tmp107);
                  r2000_2fff_tmp118 = simd_or(r2000_2fff_tmp115, r2000_2fff_tmp117);
                  r2000_2fff_tmp119 = simd_and(r2000_2fff_tmp80, basis_bits.bit_4);
                  r2000_2fff_tmp120 = simd_andc(r2000_2fff_tmp119, r2000_2fff_tmp107);
                  cc_range_2d80_2db8_3 = simd_or(r2000_2fff_tmp118, r2000_2fff_tmp120);
                  carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_e2_b6, carryQ.get_carry_in(119), sequence_e2_b6_adv));
                  r2000_2fff_tmp121 = simd_and(sequence_e2_b6_adv, cc_range_2d80_2db8_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r2000_2fff_tmp121);
                  byte_b7 = simd_and(r2000_2fff_tmp80, r2000_2fff_tmp17);
                  sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
                  r2000_2fff_tmp122 = simd_andc(byte_range_80_bf, r2000_2fff_tmp1);
                  r2000_2fff_tmp123 = simd_and(byte_range_80_bf, r2000_2fff_tmp12);
                  r2000_2fff_tmp124 = simd_andc(r2000_2fff_tmp123, basis_bits.bit_4);
                  r2000_2fff_tmp125 = simd_or(r2000_2fff_tmp122, r2000_2fff_tmp124);
                  r2000_2fff_tmp126 = simd_and(r2000_2fff_tmp123, basis_bits.bit_4);
                  r2000_2fff_tmp127 = simd_or(r2000_2fff_tmp125, r2000_2fff_tmp126);
                  r2000_2fff_tmp128 = simd_andc(r2000_2fff_tmp127, r2000_2fff_tmp107);
                  r2000_2fff_tmp129 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  cc_range_2dc0_2de0_3 = simd_or(r2000_2fff_tmp128, r2000_2fff_tmp129);
                  carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(120), sequence_e2_b7_adv));
                  r2000_2fff_tmp130 = simd_and(sequence_e2_b7_adv, cc_range_2dc0_2de0_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r2000_2fff_tmp130);
                  byte_b8 = simd_and(r2000_2fff_tmp80, r2000_2fff_tmp42);
                  sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
                  byte_af = r2000_2fff_tmp104;
                  carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(121), sequence_e2_b8_adv));
                  r2000_2fff_tmp131 = simd_and(sequence_e2_b8_adv, byte_af);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r2000_2fff_tmp131);
                }
                else {
                  carryQ.CarryDequeueEnqueue(105, 17);
                }
                r2000_4dff_tmp3 = simd_andc(tmp1, tmp5);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp3);
                r2000_4dff_tmp4 = simd_or(byte_e3, r800_ffff_tmp7);
                if ((bitblock::any(r2000_4dff_tmp4) || carryQ.CarryTest(122, 12))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp3, r3000_4dff_tmp1);
                  byte_80 = simd_andc(r3000_4dff_tmp2, tmp7);
                  carryQ.cq[122] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(122), r3000_4dff_tmp3));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp3, byte_80);
                  byte_e3_adv = r3000_4dff_tmp3;
                  r3000_4dff_tmp4 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp1);
                  r3000_4dff_tmp5 = simd_and(r3000_4dff_tmp4, tmp6);
                  r3000_4dff_tmp6 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r3000_4dff_tmp7 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp8 = simd_not(r3000_4dff_tmp7);
                  r3000_4dff_tmp9 = simd_or(basis_bits.bit_5, tmp6);
                  r3000_4dff_tmp10 = simd_or(simd_and(basis_bits.bit_4, r3000_4dff_tmp8), simd_andc(r3000_4dff_tmp9, basis_bits.bit_4));
                  r3000_4dff_tmp11 = simd_and(r3000_4dff_tmp6, r3000_4dff_tmp10);
                  r3000_4dff_tmp12 = simd_or(r3000_4dff_tmp5, r3000_4dff_tmp11);
                  r3000_4dff_tmp13 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp14 = simd_and(r800_ffff_tmp3, r3000_4dff_tmp13);
                  r3000_4dff_tmp15 = simd_andc(r3000_4dff_tmp14, basis_bits.bit_4);
                  r3000_4dff_tmp16 = simd_not(basis_bits.bit_6);
                  r3000_4dff_tmp17 = simd_or(simd_and(basis_bits.bit_5, r3000_4dff_tmp16), simd_andc(tmp6, basis_bits.bit_5));
                  r3000_4dff_tmp18 = simd_and(r3000_4dff_tmp15, r3000_4dff_tmp17);
                  r3000_4dff_tmp19 = simd_or(r3000_4dff_tmp12, r3000_4dff_tmp18);
                  r3000_4dff_tmp20 = simd_and(r3000_4dff_tmp14, basis_bits.bit_4);
                  r3000_4dff_tmp21 = simd_and(basis_bits.bit_5, tmp6);
                  r3000_4dff_tmp22 = simd_andc(r3000_4dff_tmp20, r3000_4dff_tmp21);
                  cc_range_3005_3038_3 = simd_or(r3000_4dff_tmp19, r3000_4dff_tmp22);
                  carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(123), sequence_e3_80_adv));
                  r3000_4dff_tmp23 = simd_and(sequence_e3_80_adv, cc_range_3005_3038_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r3000_4dff_tmp23);
                  r3000_4dff_tmp24 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp25 = simd_andc(r3000_4dff_tmp24, tmp5);
                  byte_81 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp25);
                  sequence_e3_81 = simd_and(byte_e3_adv, byte_81);
                  r3000_4dff_tmp26 = simd_or(basis_bits.bit_3, tmp7);
                  r3000_4dff_tmp27 = simd_or(basis_bits.bit_2, r3000_4dff_tmp26);
                  byte_range_81_bf = simd_and(r800_ffff_tmp3, r3000_4dff_tmp27);
                  carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_e3_81, carryQ.get_carry_in(124), sequence_e3_81_adv));
                  r3000_4dff_tmp28 = simd_and(sequence_e3_81_adv, byte_range_81_bf);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r3000_4dff_tmp28);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp29 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r3000_4dff_tmp30 = simd_and(basis_bits.bit_5, tmp1);
                  r3000_4dff_tmp31 = simd_or(basis_bits.bit_4, r3000_4dff_tmp30);
                  r3000_4dff_tmp32 = simd_and(basis_bits.bit_3, r3000_4dff_tmp31);
                  r3000_4dff_tmp33 = simd_andc(r3000_4dff_tmp29, r3000_4dff_tmp32);
                  r3000_4dff_tmp34 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp35 = simd_and(r800_ffff_tmp3, r3000_4dff_tmp34);
                  r3000_4dff_tmp36 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp37 = simd_and(r3000_4dff_tmp35, r3000_4dff_tmp36);
                  r3000_4dff_tmp38 = simd_and(r3000_4dff_tmp37, tmp6);
                  r3000_4dff_tmp39 = simd_or(r3000_4dff_tmp33, r3000_4dff_tmp38);
                  r3000_4dff_tmp40 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r3000_4dff_tmp41 = simd_and(r3000_4dff_tmp40, r3000_4dff_tmp26);
                  cc_range_3080_30a1_3 = simd_or(r3000_4dff_tmp39, r3000_4dff_tmp41);
                  carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(125), sequence_e3_82_adv));
                  r3000_4dff_tmp42 = simd_and(sequence_e3_82_adv, cc_range_3080_30a1_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r3000_4dff_tmp42);
                  byte_83 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp3);
                  sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
                  r3000_4dff_tmp43 = simd_and(basis_bits.bit_3, tmp3);
                  r3000_4dff_tmp44 = simd_and(basis_bits.bit_2, r3000_4dff_tmp43);
                  r3000_4dff_tmp45 = simd_andc(r800_ffff_tmp3, r3000_4dff_tmp44);
                  r3000_4dff_tmp46 = simd_and(r3000_4dff_tmp14, r3000_4dff_tmp36);
                  cc_range_30c0_30fc_3 = simd_or(r3000_4dff_tmp45, r3000_4dff_tmp46);
                  carryQ.cq[126] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(126), sequence_e3_83_adv));
                  r3000_4dff_tmp47 = simd_and(sequence_e3_83_adv, cc_range_30c0_30fc_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r3000_4dff_tmp47);
                  byte_84 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp2);
                  sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
                  r3000_4dff_tmp48 = simd_and(r3000_4dff_tmp36, basis_bits.bit_6);
                  r3000_4dff_tmp49 = simd_or(basis_bits.bit_3, r3000_4dff_tmp48);
                  r3000_4dff_tmp50 = simd_not(r3000_4dff_tmp49);
                  r3000_4dff_tmp51 = simd_or(basis_bits.bit_4, r3000_4dff_tmp21);
                  r3000_4dff_tmp52 = simd_or(basis_bits.bit_3, r3000_4dff_tmp51);
                  r3000_4dff_tmp53 = simd_or(simd_and(basis_bits.bit_2, r3000_4dff_tmp50), simd_andc(r3000_4dff_tmp52, basis_bits.bit_2));
                  r3000_4dff_tmp54 = simd_and(r800_ffff_tmp3, r3000_4dff_tmp53);
                  r3000_4dff_tmp55 = simd_or(basis_bits.bit_4, r3000_4dff_tmp9);
                  r3000_4dff_tmp56 = simd_and(r3000_4dff_tmp14, r3000_4dff_tmp55);
                  cc_range_3105_3131_3 = simd_or(r3000_4dff_tmp54, r3000_4dff_tmp56);
                  carryQ.cq[127] = carryout2carry(pablo_blk_Advance(sequence_e3_84, carryQ.get_carry_in(127), sequence_e3_84_adv));
                  r3000_4dff_tmp57 = simd_and(sequence_e3_84_adv, cc_range_3105_3131_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r3000_4dff_tmp57);
                  r3000_4dff_tmp58 = simd_and(r800_ffff_tmp1, r3000_4dff_tmp24);
                  byte_85 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp58);
                  sequence_e3_85 = simd_and(byte_e3_adv, byte_85);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[128] = carryout2carry(pablo_blk_Advance(sequence_e3_85, carryQ.get_carry_in(128), sequence_e3_85_adv));
                  r3000_4dff_tmp59 = simd_and(sequence_e3_85_adv, byte_range_80_bf);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r3000_4dff_tmp59);
                  r3000_4dff_tmp60 = simd_andc(byte_range_80_bf, r3000_4dff_tmp1);
                  r3000_4dff_tmp61 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  byte_86 = simd_and(r3000_4dff_tmp60, r3000_4dff_tmp61);
                  sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
                  r3000_4dff_tmp62 = simd_and(basis_bits.bit_4, r3000_4dff_tmp30);
                  r3000_4dff_tmp63 = simd_andc(r3000_4dff_tmp60, r3000_4dff_tmp62);
                  r3000_4dff_tmp64 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  r3000_4dff_tmp65 = simd_andc(r3000_4dff_tmp64, r3000_4dff_tmp43);
                  cc_range_3180_31a0_3 = simd_or(r3000_4dff_tmp63, r3000_4dff_tmp65);
                  carryQ.cq[129] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(129), sequence_e3_86_adv));
                  r3000_4dff_tmp66 = simd_and(sequence_e3_86_adv, cc_range_3180_31a0_3);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r3000_4dff_tmp66);
                  r3000_4dff_tmp67 = simd_and(r800_ffff_tmp1, tmp1);
                  byte_87 = simd_and(r3000_4dff_tmp60, r3000_4dff_tmp67);
                  sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
                  byte_range_b0_bf = simd_and(byte_range_80_bf, r3000_4dff_tmp13);
                  carryQ.cq[130] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(130), sequence_e3_87_adv));
                  r3000_4dff_tmp68 = simd_and(sequence_e3_87_adv, byte_range_b0_bf);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r3000_4dff_tmp68);
                  byte_range_90_bf = simd_and(byte_range_80_bf, r3000_4dff_tmp1);
                  byte_e3_byte_range_90_bf = simd_and(byte_e3_adv, byte_range_90_bf);
                  carryQ.cq[131] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_90_bf, carryQ.get_carry_in(131), r3000_4dff_tmp69));
                  byte_e3_byte_range_90_bf_sfx = simd_and(r3000_4dff_tmp69, byte_range_80_bf);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, byte_e3_byte_range_90_bf_sfx);
                  r3000_4dff_tmp70 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp71 = simd_or(basis_bits.bit_4, r3000_4dff_tmp70);
                  r3000_4dff_tmp72 = simd_and(basis_bits.bit_3, r3000_4dff_tmp71);
                  r3000_4dff_tmp73 = simd_and(basis_bits.bit_2, r3000_4dff_tmp72);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r3000_4dff_tmp73);
                  byte_e4_byte_range_80_b5 = simd_and(r800_ffff_tmp6, byte_range_80_b5);
                  carryQ.cq[132] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_80_b5, carryQ.get_carry_in(132), r3000_4dff_tmp74));
                  byte_e4_byte_range_80_b5_sfx = simd_and(r3000_4dff_tmp74, byte_range_80_bf);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, byte_e4_byte_range_80_b5_sfx);
                  byte_b6 = simd_and(byte_range_b0_bf, r3000_4dff_tmp61);
                  byte_e4_adv = r800_ffff_tmp6;
                  sequence_e4_b6 = simd_and(byte_e4_adv, byte_b6);
                  carryQ.cq[133] = carryout2carry(pablo_blk_Advance(sequence_e4_b6, carryQ.get_carry_in(133), r3000_4dff_tmp75));
                  sequence_e4_b6_byte_range_80_b5 = simd_and(r3000_4dff_tmp75, byte_range_80_b5);
                  struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e4_b6_byte_range_80_b5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(122, 12);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(105, 29);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(26, 108);
            }
            r800_ffff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r800_ffff_tmp10 = simd_and(r800_ffff_tmp3, r800_ffff_tmp9);
            byte_range_b8_bf = simd_and(r800_ffff_tmp10, basis_bits.bit_4);
            r800_ffff_tmp11 = simd_and(r800_ffff_tmp6, byte_range_b8_bf);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r800_ffff_tmp13 = simd_not(r800_ffff_tmp12);
            r800_ffff_tmp14 = simd_and(basis_bits.bit_5, tmp6);
            r800_ffff_tmp15 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp13), simd_andc(r800_ffff_tmp14, basis_bits.bit_4));
            byte_range_e5_e9 = simd_and(byte_range_e0_ef, r800_ffff_tmp15);
            r800_ffff_tmp16 = simd_or(r800_ffff_tmp11, byte_range_e5_e9);
            if ((bitblock::any(r800_ffff_tmp16) || carryQ.CarryTest(134, 5))) {
              byte_e4_byte_range_b8_bf = r800_ffff_tmp11;
              byte_range_80_bf = r800_ffff_tmp3;
              carryQ.cq[134] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_b8_bf, carryQ.get_carry_in(134), r4e00_9fff_tmp1));
              byte_e4_byte_range_b8_bf_sfx = simd_and(r4e00_9fff_tmp1, byte_range_80_bf);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, byte_e4_byte_range_b8_bf_sfx);
              r4e00_9fff_tmp2 = simd_or(basis_bits.bit_5, tmp6);
              r4e00_9fff_tmp3 = simd_not(r4e00_9fff_tmp2);
              r4e00_9fff_tmp4 = simd_or(simd_and(basis_bits.bit_4, r4e00_9fff_tmp3), simd_andc(r800_ffff_tmp14, basis_bits.bit_4));
              byte_range_e5_e8 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp4);
              carryQ.cq[135] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8, carryQ.get_carry_in(135), r4e00_9fff_tmp5));
              byte_range_e5_e8_sfx = simd_and(r4e00_9fff_tmp5, byte_range_80_bf);
              carryQ.cq[136] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8_sfx, carryQ.get_carry_in(136), r4e00_9fff_tmp6));
              byte_range_e5_e8_sfx_sfx = simd_and(r4e00_9fff_tmp6, byte_range_80_bf);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, byte_range_e5_e8_sfx_sfx);
              r4e00_9fff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              r4e00_9fff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r4e00_9fff_tmp9 = simd_and(r4e00_9fff_tmp7, r4e00_9fff_tmp8);
              byte_e9 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp9);
              r4e00_9fff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              r4e00_9fff_tmp11 = simd_andc(byte_range_80_bf, r4e00_9fff_tmp10);
              byte_80 = simd_andc(r4e00_9fff_tmp11, tmp7);
              carryQ.cq[137] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(137), byte_e9_adv));
              sequence_e9_80 = simd_and(byte_e9_adv, byte_80);
              r4e00_9fff_tmp12 = simd_and(basis_bits.bit_4, r800_ffff_tmp14);
              byte_range_80_8c = simd_andc(r4e00_9fff_tmp11, r4e00_9fff_tmp12);
              carryQ.cq[138] = carryout2carry(pablo_blk_Advance(sequence_e9_80, carryQ.get_carry_in(138), r4e00_9fff_tmp13));
              sequence_e9_80_byte_range_80_8c = simd_and(r4e00_9fff_tmp13, byte_range_80_8c);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_e9_80_byte_range_80_8c);
            }
            else {
              carryQ.CarryDequeueEnqueue(134, 5);
            }
            r800_ffff_tmp17 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            byte_range_ea_ef = simd_and(r800_ffff_tmp17, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(139, 54))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_or(tmp5, basis_bits.bit_6);
              ra000_ffff_tmp6 = simd_and(basis_bits.bit_3, ra000_ffff_tmp5);
              byte_range_80_91 = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp6);
              carryQ.cq[139] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(139), ra000_ffff_tmp7));
              byte_ea_byte_range_80_91 = simd_and(ra000_ffff_tmp7, byte_range_80_91);
              byte_range_80_bf = r800_ffff_tmp3;
              carryQ.cq[140] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_80_91, carryQ.get_carry_in(140), ra000_ffff_tmp8));
              byte_ea_byte_range_80_91_sfx = simd_and(ra000_ffff_tmp8, byte_range_80_bf);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, byte_ea_byte_range_80_91_sfx);
              ra000_ffff_tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp10 = simd_and(byte_range_80_bf, ra000_ffff_tmp9);
              ra000_ffff_tmp11 = simd_andc(ra000_ffff_tmp2, tmp5);
              byte_92 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp11);
              byte_ea_adv = ra000_ffff_tmp7;
              sequence_ea_92 = simd_and(byte_ea_adv, byte_92);
              ra000_ffff_tmp12 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp13 = simd_andc(byte_range_80_bf, ra000_ffff_tmp12);
              ra000_ffff_tmp14 = simd_and(basis_bits.bit_4, r800_ffff_tmp14);
              byte_range_80_8c = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp14);
              carryQ.cq[141] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(141), ra000_ffff_tmp15));
              sequence_ea_92_byte_range_80_8c = simd_and(ra000_ffff_tmp15, byte_range_80_8c);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_92_byte_range_80_8c);
              ra000_ffff_tmp16 = simd_andc(tmp1, tmp5);
              byte_93 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp16);
              sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
              ra000_ffff_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp18 = simd_and(ra000_ffff_tmp17, basis_bits.bit_6);
              ra000_ffff_tmp19 = simd_and(basis_bits.bit_3, ra000_ffff_tmp18);
              ra000_ffff_tmp20 = simd_not(ra000_ffff_tmp19);
              ra000_ffff_tmp21 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp20), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
              byte_range_90_bd = simd_and(byte_range_80_bf, ra000_ffff_tmp21);
              carryQ.cq[142] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(142), ra000_ffff_tmp22));
              sequence_ea_93_byte_range_90_bd = simd_and(ra000_ffff_tmp22, byte_range_90_bd);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_93_byte_range_90_bd);
              byte_94 = simd_and(ra000_ffff_tmp10, r800_ffff_tmp2);
              sequence_ea_94 = simd_and(byte_ea_adv, byte_94);
              carryQ.cq[143] = carryout2carry(pablo_blk_Advance(sequence_ea_94, carryQ.get_carry_in(143), ra000_ffff_tmp23));
              sequence_ea_94_byte_range_80_bf = simd_and(ra000_ffff_tmp23, byte_range_80_bf);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_94_byte_range_80_bf);
              ra000_ffff_tmp24 = simd_andc(ra000_ffff_tmp1, tmp6);
              byte_98 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp24);
              sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
              carryQ.cq[144] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(144), ra000_ffff_tmp25));
              sequence_ea_98_byte_range_80_8c = simd_and(ra000_ffff_tmp25, byte_range_80_8c);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_98_byte_range_80_8c);
              ra000_ffff_tmp26 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp27 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp26);
              byte_99 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp27);
              sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
              ra000_ffff_tmp28 = simd_and(ra000_ffff_tmp17, tmp1);
              ra000_ffff_tmp29 = simd_or(basis_bits.bit_3, ra000_ffff_tmp28);
              ra000_ffff_tmp30 = simd_and(basis_bits.bit_2, ra000_ffff_tmp29);
              byte_range_80_ae = simd_andc(byte_range_80_bf, ra000_ffff_tmp30);
              carryQ.cq[145] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(145), ra000_ffff_tmp31));
              sequence_ea_99_byte_range_80_ae = simd_and(ra000_ffff_tmp31, byte_range_80_ae);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_99_byte_range_80_ae);
              byte_9a = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp32 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              byte_range_80_9d = simd_andc(ra000_ffff_tmp32, ra000_ffff_tmp19);
              carryQ.cq[146] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(146), ra000_ffff_tmp33));
              sequence_ea_9a_byte_range_80_9d = simd_and(ra000_ffff_tmp33, byte_range_80_9d);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_9a_byte_range_80_9d);
              ra000_ffff_tmp34 = simd_and(ra000_ffff_tmp1, tmp1);
              byte_9b = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp34);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              byte_range_80_af = simd_andc(byte_range_80_bf, r800_ffff_tmp9);
              carryQ.cq[147] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(147), ra000_ffff_tmp35));
              sequence_ea_9b_byte_range_80_af = simd_and(ra000_ffff_tmp35, byte_range_80_af);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_9b_byte_range_80_af);
              ra000_ffff_tmp36 = simd_andc(ra000_ffff_tmp17, tmp6);
              byte_9c = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp36);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              ra000_ffff_tmp37 = simd_and(basis_bits.bit_5, tmp1);
              ra000_ffff_tmp38 = simd_or(basis_bits.bit_4, ra000_ffff_tmp37);
              byte_range_97_9f = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp38);
              carryQ.cq[148] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(148), ra000_ffff_tmp39));
              sequence_ea_9c_byte_range_97_9f = simd_and(ra000_ffff_tmp39, byte_range_97_9f);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_9c_byte_range_97_9f);
              ra000_ffff_tmp40 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp26);
              byte_9d = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp40);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              carryQ.cq[149] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(149), ra000_ffff_tmp41));
              sequence_ea_9d_byte_range_80_bf = simd_and(ra000_ffff_tmp41, byte_range_80_bf);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_9d_byte_range_80_bf);
              ra000_ffff_tmp42 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp42);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp43 = simd_or(basis_bits.bit_5, tmp6);
              ra000_ffff_tmp44 = simd_and(basis_bits.bit_4, ra000_ffff_tmp43);
              byte_range_80_88 = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp44);
              carryQ.cq[150] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(150), ra000_ffff_tmp45));
              sequence_ea_9e_byte_range_80_88 = simd_and(ra000_ffff_tmp45, byte_range_80_88);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_9e_byte_range_80_88);
              byte_9f = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp28);
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              ra000_ffff_tmp46 = simd_and(byte_range_80_bf, r800_ffff_tmp9);
              byte_range_b7_bf = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp38);
              carryQ.cq[151] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(151), ra000_ffff_tmp47));
              sequence_ea_9f_byte_range_b7_bf = simd_and(ra000_ffff_tmp47, byte_range_b7_bf);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_9f_byte_range_b7_bf);
              ra000_ffff_tmp48 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              byte_a0 = simd_andc(ra000_ffff_tmp48, tmp7);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              byte_range_80_81 = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp5);
              carryQ.cq[152] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(152), ra000_ffff_tmp49));
              sequence_ea_a0_byte_range_80_81 = simd_and(ra000_ffff_tmp49, byte_range_80_81);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_a0_byte_range_80_81);
              ra000_ffff_tmp50 = simd_andc(ra000_ffff_tmp26, tmp5);
              byte_a1 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp50);
              sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
              ra000_ffff_tmp51 = simd_and(basis_bits.bit_3, tmp5);
              ra000_ffff_tmp52 = simd_and(basis_bits.bit_2, ra000_ffff_tmp51);
              byte_range_80_b3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp52);
              carryQ.cq[153] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(153), ra000_ffff_tmp53));
              sequence_ea_a1_byte_range_80_b3 = simd_and(ra000_ffff_tmp53, byte_range_80_b3);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_a1_byte_range_80_b3);
              byte_a2 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp11);
              sequence_ea_a2 = simd_and(byte_ea_adv, byte_a2);
              carryQ.cq[154] = carryout2carry(pablo_blk_Advance(sequence_ea_a2, carryQ.get_carry_in(154), ra000_ffff_tmp54));
              sequence_ea_a2_byte_range_80_bf = simd_and(ra000_ffff_tmp54, byte_range_80_bf);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_a2_byte_range_80_bf);
              byte_a3 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp16);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              byte_range_80_83 = simd_andc(ra000_ffff_tmp13, tmp5);
              carryQ.cq[155] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(155), ra000_ffff_tmp55));
              sequence_ea_a3_byte_range_80_83 = simd_and(ra000_ffff_tmp55, byte_range_80_83);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_a3_byte_range_80_83);
              byte_a4 = simd_and(ra000_ffff_tmp48, r800_ffff_tmp2);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              ra000_ffff_tmp56 = simd_or(basis_bits.bit_3, tmp3);
              ra000_ffff_tmp57 = simd_not(ra000_ffff_tmp56);
              ra000_ffff_tmp58 = simd_and(basis_bits.bit_4, r800_ffff_tmp12);
              ra000_ffff_tmp59 = simd_or(basis_bits.bit_3, ra000_ffff_tmp58);
              ra000_ffff_tmp60 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp57), simd_andc(ra000_ffff_tmp59, basis_bits.bit_2));
              byte_range_8a_aa = simd_and(byte_range_80_bf, ra000_ffff_tmp60);
              carryQ.cq[156] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(156), ra000_ffff_tmp61));
              sequence_ea_a4_byte_range_8a_aa = simd_and(ra000_ffff_tmp61, byte_range_8a_aa);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_a4_byte_range_8a_aa);
              ra000_ffff_tmp62 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp26);
              byte_a5 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp62);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              ra000_ffff_tmp63 = simd_or(tmp5, tmp1);
              ra000_ffff_tmp64 = simd_and(basis_bits.bit_3, ra000_ffff_tmp63);
              byte_range_80_92 = simd_andc(ra000_ffff_tmp32, ra000_ffff_tmp64);
              carryQ.cq[157] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(157), ra000_ffff_tmp65));
              sequence_ea_a5_byte_range_80_92 = simd_and(ra000_ffff_tmp65, byte_range_80_92);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_a5_byte_range_80_92);
              ra000_ffff_tmp66 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp2);
              byte_a6 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp66);
              sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
              ra000_ffff_tmp67 = simd_and(basis_bits.bit_2, ra000_ffff_tmp64);
              byte_range_80_b2 = simd_andc(byte_range_80_bf, ra000_ffff_tmp67);
              carryQ.cq[158] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(158), ra000_ffff_tmp68));
              sequence_ea_a6_byte_range_80_b2 = simd_and(ra000_ffff_tmp68, byte_range_80_b2);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_a6_byte_range_80_b2);
              ra000_ffff_tmp69 = simd_and(r800_ffff_tmp1, tmp1);
              byte_a7 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp69);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              byte_8f = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp28);
              carryQ.cq[159] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(159), ra000_ffff_tmp70));
              sequence_ea_a7_8f = simd_and(ra000_ffff_tmp70, byte_8f);
              byte_a8 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp24);
              sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
              ra000_ffff_tmp71 = simd_and(basis_bits.bit_3, ra000_ffff_tmp38);
              ra000_ffff_tmp72 = simd_and(basis_bits.bit_2, ra000_ffff_tmp71);
              byte_range_80_b6 = simd_andc(byte_range_80_bf, ra000_ffff_tmp72);
              carryQ.cq[160] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(160), ra000_ffff_tmp73));
              sequence_ea_a8_byte_range_80_b6 = simd_and(ra000_ffff_tmp73, byte_range_80_b6);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_a8_byte_range_80_b6);
              byte_a9 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp27);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              ra000_ffff_tmp74 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp75 = simd_and(basis_bits.bit_4, ra000_ffff_tmp74);
              byte_range_80_8d = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp75);
              carryQ.cq[161] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(161), ra000_ffff_tmp76));
              sequence_ea_a9_byte_range_80_8d = simd_and(ra000_ffff_tmp76, byte_range_80_8d);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_a9_byte_range_80_8d);
              byte_aa = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp3);
              sequence_ea_aa = simd_and(byte_ea_adv, byte_aa);
              ra000_ffff_tmp77 = simd_and(basis_bits.bit_3, ra000_ffff_tmp28);
              ra000_ffff_tmp78 = simd_and(basis_bits.bit_2, ra000_ffff_tmp77);
              byte_range_80_be = simd_andc(byte_range_80_bf, ra000_ffff_tmp78);
              carryQ.cq[162] = carryout2carry(pablo_blk_Advance(sequence_ea_aa, carryQ.get_carry_in(162), ra000_ffff_tmp79));
              sequence_ea_aa_byte_range_80_be = simd_and(ra000_ffff_tmp79, byte_range_80_be);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_aa_byte_range_80_be);
              byte_ab = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp34);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              byte_80 = simd_andc(ra000_ffff_tmp13, tmp7);
              carryQ.cq[163] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(163), ra000_ffff_tmp80));
              sequence_ea_ab_80 = simd_and(ra000_ffff_tmp80, byte_80);
              byte_ac = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp36);
              sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
              ra000_ffff_tmp81 = simd_andc(ra000_ffff_tmp13, basis_bits.bit_4);
              ra000_ffff_tmp82 = simd_not(tmp1);
              ra000_ffff_tmp83 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp82), simd_andc(tmp6, basis_bits.bit_5));
              byte_range_81_86 = simd_and(ra000_ffff_tmp81, ra000_ffff_tmp83);
              carryQ.cq[164] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(164), ra000_ffff_tmp84));
              sequence_ea_ac_byte_range_81_86 = simd_and(ra000_ffff_tmp84, byte_range_81_86);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_ac_byte_range_81_86);
              byte_ad = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp40);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              ra000_ffff_tmp85 = simd_and(basis_bits.bit_3, tmp3);
              byte_range_80_9a = simd_andc(ra000_ffff_tmp32, ra000_ffff_tmp85);
              carryQ.cq[165] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(165), ra000_ffff_tmp86));
              sequence_ea_ad_byte_range_80_9a = simd_and(ra000_ffff_tmp86, byte_range_80_9a);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_ad_byte_range_80_9a);
              byte_af = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp28);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              ra000_ffff_tmp87 = simd_and(basis_bits.bit_2, ra000_ffff_tmp56);
              byte_range_80_aa = simd_andc(byte_range_80_bf, ra000_ffff_tmp87);
              carryQ.cq[166] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(166), ra000_ffff_tmp88));
              sequence_ea_af_byte_range_80_aa = simd_and(ra000_ffff_tmp88, byte_range_80_aa);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_af_byte_range_80_aa);
              byte_b0 = simd_andc(ra000_ffff_tmp46, tmp7);
              sequence_ea_b0 = simd_and(byte_ea_adv, byte_b0);
              carryQ.cq[167] = carryout2carry(pablo_blk_Advance(sequence_ea_b0, carryQ.get_carry_in(167), ra000_ffff_tmp89));
              sequence_ea_b0_byte_range_80_bf = simd_and(ra000_ffff_tmp89, byte_range_80_bf);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ea_b0_byte_range_80_bf);
              ra000_ffff_tmp90 = simd_not(tmp6);
              ra000_ffff_tmp91 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp90), simd_andc(tmp1, basis_bits.bit_5));
              byte_range_eb_ec = simd_and(r800_ffff_tmp17, ra000_ffff_tmp91);
              carryQ.cq[168] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec, carryQ.get_carry_in(168), ra000_ffff_tmp92));
              byte_range_eb_ec_sfx = simd_and(ra000_ffff_tmp92, byte_range_80_bf);
              carryQ.cq[169] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec_sfx, carryQ.get_carry_in(169), ra000_ffff_tmp93));
              byte_range_eb_ec_sfx_sfx = simd_and(ra000_ffff_tmp93, byte_range_80_bf);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, byte_range_eb_ec_sfx_sfx);
              byte_ed = simd_and(byte_range_e0_ef, ra000_ffff_tmp40);
              carryQ.cq[170] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(170), byte_ed_adv));
              sequence_ed_80 = simd_and(byte_ed_adv, byte_80);
              ra000_ffff_tmp94 = simd_or(basis_bits.bit_3, tmp5);
              ra000_ffff_tmp95 = simd_and(basis_bits.bit_2, ra000_ffff_tmp94);
              byte_range_80_a3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp95);
              carryQ.cq[171] = carryout2carry(pablo_blk_Advance(sequence_ed_80, carryQ.get_carry_in(171), ra000_ffff_tmp96));
              sequence_ed_80_byte_range_80_a3 = simd_and(ra000_ffff_tmp96, byte_range_80_a3);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ed_80_byte_range_80_a3);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp28);
              ra000_ffff_tmp97 = simd_not(ra000_ffff_tmp43);
              ra000_ffff_tmp98 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp97), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
              byte_range_a4_a8 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp98);
              carryQ.cq[172] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(172), ra000_ffff_tmp99));
              byte_ef_byte_range_a4_a8 = simd_and(ra000_ffff_tmp99, byte_range_a4_a8);
              carryQ.cq[173] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_a4_a8, carryQ.get_carry_in(173), ra000_ffff_tmp100));
              byte_ef_byte_range_a4_a8_sfx = simd_and(ra000_ffff_tmp100, byte_range_80_bf);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, byte_ef_byte_range_a4_a8_sfx);
              byte_ef_adv = ra000_ffff_tmp99;
              sequence_ef_a9 = simd_and(byte_ef_adv, byte_a9);
              ra000_ffff_tmp101 = simd_or(basis_bits.bit_3, ra000_ffff_tmp18);
              ra000_ffff_tmp102 = simd_and(basis_bits.bit_2, ra000_ffff_tmp101);
              byte_range_80_ad = simd_andc(byte_range_80_bf, ra000_ffff_tmp102);
              carryQ.cq[174] = carryout2carry(pablo_blk_Advance(sequence_ef_a9, carryQ.get_carry_in(174), ra000_ffff_tmp103));
              sequence_ef_a9_byte_range_80_ad = simd_and(ra000_ffff_tmp103, byte_range_80_ad);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ef_a9_byte_range_80_ad);
              sequence_ef_aa = simd_and(byte_ef_adv, byte_aa);
              carryQ.cq[175] = carryout2carry(pablo_blk_Advance(sequence_ef_aa, carryQ.get_carry_in(175), ra000_ffff_tmp104));
              sequence_ef_aa_byte_range_80_bf = simd_and(ra000_ffff_tmp104, byte_range_80_bf);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ef_aa_byte_range_80_bf);
              sequence_ef_ab = simd_and(byte_ef_adv, byte_ab);
              ra000_ffff_tmp105 = simd_and(basis_bits.bit_3, ra000_ffff_tmp58);
              byte_range_80_99 = simd_andc(ra000_ffff_tmp32, ra000_ffff_tmp105);
              carryQ.cq[176] = carryout2carry(pablo_blk_Advance(sequence_ef_ab, carryQ.get_carry_in(176), ra000_ffff_tmp106));
              sequence_ef_ab_byte_range_80_99 = simd_and(ra000_ffff_tmp106, byte_range_80_99);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ef_ab_byte_range_80_99);
              sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
              byte_range_80_86 = simd_andc(ra000_ffff_tmp81, ra000_ffff_tmp37);
              carryQ.cq[177] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(177), ra000_ffff_tmp107));
              sequence_ef_ac_byte_range_80_86 = simd_and(ra000_ffff_tmp107, byte_range_80_86);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ef_ac_byte_range_80_86);
              sequence_ef_ad = simd_and(byte_ef_adv, byte_ad);
              carryQ.cq[178] = carryout2carry(pablo_blk_Advance(sequence_ef_ad, carryQ.get_carry_in(178), ra000_ffff_tmp108));
              sequence_ef_ad_byte_range_80_81 = simd_and(ra000_ffff_tmp108, byte_range_80_81);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ef_ad_byte_range_80_81);
              byte_ae = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp42);
              sequence_ef_ae = simd_and(byte_ef_adv, byte_ae);
              ra000_ffff_tmp109 = simd_and(basis_bits.bit_2, ra000_ffff_tmp6);
              byte_range_80_b1 = simd_andc(byte_range_80_bf, ra000_ffff_tmp109);
              carryQ.cq[179] = carryout2carry(pablo_blk_Advance(sequence_ef_ae, carryQ.get_carry_in(179), ra000_ffff_tmp110));
              sequence_ef_ae_byte_range_80_b1 = simd_and(ra000_ffff_tmp110, byte_range_80_b1);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ef_ae_byte_range_80_b1);
              sequence_ef_af = simd_and(byte_ef_adv, byte_af);
              ra000_ffff_tmp111 = simd_or(basis_bits.bit_2, ra000_ffff_tmp64);
              byte_range_93_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp111);
              carryQ.cq[180] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(180), ra000_ffff_tmp112));
              sequence_ef_af_byte_range_93_bf = simd_and(ra000_ffff_tmp112, byte_range_93_bf);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ef_af_byte_range_93_bf);
              sequence_ef_b0 = simd_and(byte_ef_adv, byte_b0);
              carryQ.cq[181] = carryout2carry(pablo_blk_Advance(sequence_ef_b0, carryQ.get_carry_in(181), ra000_ffff_tmp113));
              sequence_ef_b0_byte_range_80_bf = simd_and(ra000_ffff_tmp113, byte_range_80_bf);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ef_b0_byte_range_80_bf);
              byte_b4 = simd_and(ra000_ffff_tmp46, r800_ffff_tmp2);
              sequence_ef_b4 = simd_and(byte_ef_adv, byte_b4);
              ra000_ffff_tmp114 = simd_and(basis_bits.bit_2, ra000_ffff_tmp19);
              byte_range_80_bd = simd_andc(byte_range_80_bf, ra000_ffff_tmp114);
              carryQ.cq[182] = carryout2carry(pablo_blk_Advance(sequence_ef_b4, carryQ.get_carry_in(182), ra000_ffff_tmp115));
              sequence_ef_b4_byte_range_80_bd = simd_and(ra000_ffff_tmp115, byte_range_80_bd);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ef_b4_byte_range_80_bd);
              byte_b5 = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp62);
              sequence_ef_b5 = simd_and(byte_ef_adv, byte_b5);
              byte_range_90_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp12);
              carryQ.cq[183] = carryout2carry(pablo_blk_Advance(sequence_ef_b5, carryQ.get_carry_in(183), ra000_ffff_tmp116));
              sequence_ef_b5_byte_range_90_bf = simd_and(ra000_ffff_tmp116, byte_range_90_bf);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ef_b5_byte_range_90_bf);
              byte_b6 = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp66);
              sequence_ef_b6 = simd_and(byte_ef_adv, byte_b6);
              byte_range_80_8f = ra000_ffff_tmp13;
              carryQ.cq[184] = carryout2carry(pablo_blk_Advance(sequence_ef_b6, carryQ.get_carry_in(184), ra000_ffff_tmp117));
              sequence_ef_b6_byte_range_80_8f = simd_and(ra000_ffff_tmp117, byte_range_80_8f);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ef_b6_byte_range_80_8f);
              byte_b7 = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp69);
              sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
              byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
              carryQ.cq[185] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(185), ra000_ffff_tmp118));
              sequence_ef_b7_byte_range_80_87 = simd_and(ra000_ffff_tmp118, byte_range_80_87);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ef_b7_byte_range_80_87);
              byte_b9 = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp27);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              ra000_ffff_tmp119 = simd_andc(ra000_ffff_tmp46, basis_bits.bit_4);
              byte_range_b0_b4 = simd_andc(ra000_ffff_tmp119, r800_ffff_tmp14);
              carryQ.cq[186] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(186), ra000_ffff_tmp120));
              sequence_ef_b9_byte_range_b0_b4 = simd_and(ra000_ffff_tmp120, byte_range_b0_b4);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ef_b9_byte_range_b0_b4);
              byte_ba = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp3);
              sequence_ef_ba = simd_and(byte_ef_adv, byte_ba);
              carryQ.cq[187] = carryout2carry(pablo_blk_Advance(sequence_ef_ba, carryQ.get_carry_in(187), ra000_ffff_tmp121));
              sequence_ef_ba_byte_range_80_bf = simd_and(ra000_ffff_tmp121, byte_range_80_bf);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ef_ba_byte_range_80_bf);
              byte_bb = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp34);
              sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
              ra000_ffff_tmp122 = simd_and(ra000_ffff_tmp17, tmp6);
              ra000_ffff_tmp123 = simd_and(basis_bits.bit_3, ra000_ffff_tmp122);
              ra000_ffff_tmp124 = simd_and(basis_bits.bit_2, ra000_ffff_tmp123);
              byte_range_80_bc = simd_andc(byte_range_80_bf, ra000_ffff_tmp124);
              carryQ.cq[188] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(188), ra000_ffff_tmp125));
              sequence_ef_bb_byte_range_80_bc = simd_and(ra000_ffff_tmp125, byte_range_80_bc);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ef_bb_byte_range_80_bc);
              byte_bc = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp36);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp126 = simd_and(byte_range_80_bf, basis_bits.bit_2);
              byte_range_a1_ba = simd_and(ra000_ffff_tmp126, tmp8);
              carryQ.cq[189] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(189), ra000_ffff_tmp127));
              sequence_ef_bc_byte_range_a1_ba = simd_and(ra000_ffff_tmp127, byte_range_a1_ba);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ef_bc_byte_range_a1_ba);
              byte_bd = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp40);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_range_81_9a = simd_and(ra000_ffff_tmp32, tmp8);
              carryQ.cq[190] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(190), ra000_ffff_tmp128));
              sequence_ef_bd_byte_range_81_9a = simd_and(ra000_ffff_tmp128, byte_range_81_9a);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ef_bd_byte_range_81_9a);
              byte_be = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp42);
              sequence_ef_be = simd_and(byte_ef_adv, byte_be);
              carryQ.cq[191] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(191), ra000_ffff_tmp129));
              sequence_ef_be_byte_range_80_be = simd_and(ra000_ffff_tmp129, byte_range_80_be);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ef_be_byte_range_80_be);
              byte_bf = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp28);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              byte_range_82_87 = simd_and(byte_range_80_87, r800_ffff_tmp12);
              carryQ.cq[192] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(192), ra000_ffff_tmp130));
              sequence_ef_bf_byte_range_82_87 = simd_and(ra000_ffff_tmp130, byte_range_82_87);
              struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_ef_bf_byte_range_82_87);
            }
            else {
              carryQ.CarryDequeueEnqueue(139, 54);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(25, 168);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(193, 113))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp7);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp3 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_90 = simd_andc(r10000_10ffff_tmp3, tmp7);
            carryQ.cq[193] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(193), r10000_10ffff_tmp4));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp4, byte_90);
            byte_f0_adv = r10000_10ffff_tmp4;
            r10000_10ffff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp6 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp5);
            byte_80 = simd_andc(r10000_10ffff_tmp6, tmp7);
            carryQ.cq[194] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(194), r10000_10ffff_tmp7));
            sequence_f0_90_80 = simd_and(r10000_10ffff_tmp7, byte_80);
            sequence_f0_90_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_5, tmp1);
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_not(r10000_10ffff_tmp12);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp8, tmp6);
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp13), simd_andc(r10000_10ffff_tmp15, basis_bits.bit_2));
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_or(r10000_10ffff_tmp9, r10000_10ffff_tmp17);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp1, basis_bits.bit_2);
            r10000_10ffff_tmp20 = simd_or(simd_and(basis_bits.bit_3, tmp4), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp20);
            r10000_10ffff_tmp22 = simd_or(r10000_10ffff_tmp18, r10000_10ffff_tmp21);
            r10000_10ffff_tmp23 = simd_and(r10000_10ffff_tmp1, r80_10ffff_tmp2);
            r10000_10ffff_tmp24 = simd_andc(r10000_10ffff_tmp8, basis_bits.bit_6);
            r10000_10ffff_tmp25 = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp24);
            r10000_10ffff_tmp26 = simd_or(r10000_10ffff_tmp22, r10000_10ffff_tmp25);
            r10000_10ffff_tmp27 = simd_and(r10000_10ffff_tmp8, tmp1);
            r10000_10ffff_tmp28 = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp27);
            cc_range_10000_1003f_4 = simd_or(r10000_10ffff_tmp26, r10000_10ffff_tmp28);
            carryQ.cq[195] = carryout2carry(pablo_blk_Advance(sequence_f0_90_80, carryQ.get_carry_in(195), sequence_f0_90_80_adv));
            r10000_10ffff_tmp29 = simd_and(sequence_f0_90_80_adv, cc_range_10000_1003f_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp29);
            r10000_10ffff_tmp30 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp31 = simd_andc(r10000_10ffff_tmp30, tmp5);
            byte_81 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp31);
            sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
            r10000_10ffff_tmp32 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp33 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp32);
            r10000_10ffff_tmp34 = simd_andc(r10000_10ffff_tmp5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp35 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp34);
            cc_range_10040_10050_4 = simd_andc(r10000_10ffff_tmp35, r10000_10ffff_tmp33);
            carryQ.cq[196] = carryout2carry(pablo_blk_Advance(sequence_f0_90_81, carryQ.get_carry_in(196), sequence_f0_90_81_adv));
            r10000_10ffff_tmp36 = simd_and(sequence_f0_90_81_adv, cc_range_10040_10050_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp36);
            r10000_10ffff_tmp37 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp38 = simd_andc(r10000_10ffff_tmp37, tmp5);
            byte_82 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp38);
            sequence_f0_90_82 = simd_and(sequence_f0_90_adv, byte_82);
            byte_range_80_bf = r10000_10ffff_tmp1;
            carryQ.cq[197] = carryout2carry(pablo_blk_Advance(sequence_f0_90_82, carryQ.get_carry_in(197), sequence_f0_90_82_adv));
            r10000_10ffff_tmp39 = simd_and(sequence_f0_90_82_adv, byte_range_80_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp39);
            r10000_10ffff_tmp40 = simd_and(byte_range_80_bf, r10000_10ffff_tmp2);
            r10000_10ffff_tmp41 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp42 = simd_andc(tmp1, tmp5);
            byte_83 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp42);
            sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
            r10000_10ffff_tmp43 = simd_and(basis_bits.bit_3, tmp3);
            r10000_10ffff_tmp44 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp43);
            byte_range_80_ba = simd_andc(byte_range_80_bf, r10000_10ffff_tmp44);
            carryQ.cq[198] = carryout2carry(pablo_blk_Advance(sequence_f0_90_83, carryQ.get_carry_in(198), sequence_f0_90_83_adv));
            r10000_10ffff_tmp45 = simd_and(sequence_f0_90_83_adv, byte_range_80_ba);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp45);
            r10000_10ffff_tmp46 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp47 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp30);
            byte_85 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp47);
            sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
            r10000_10ffff_tmp48 = simd_and(basis_bits.bit_5, tmp6);
            r10000_10ffff_tmp49 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp48);
            r10000_10ffff_tmp50 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp49);
            r10000_10ffff_tmp51 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp50);
            byte_range_80_b4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp51);
            carryQ.cq[199] = carryout2carry(pablo_blk_Advance(sequence_f0_90_85, carryQ.get_carry_in(199), sequence_f0_90_85_adv));
            r10000_10ffff_tmp52 = simd_and(sequence_f0_90_85_adv, byte_range_80_b4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp52);
            r10000_10ffff_tmp53 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp54 = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp37);
            byte_8a = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp54);
            sequence_f0_90_8a = simd_and(sequence_f0_90_adv, byte_8a);
            r10000_10ffff_tmp55 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp56 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp14);
            r10000_10ffff_tmp57 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp56);
            r10000_10ffff_tmp58 = simd_and(byte_range_80_bf, basis_bits.bit_2);
            cc_range_10280_102a0_4 = simd_or(r10000_10ffff_tmp57, r10000_10ffff_tmp58);
            carryQ.cq[200] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8a, carryQ.get_carry_in(200), sequence_f0_90_8a_adv));
            r10000_10ffff_tmp59 = simd_and(sequence_f0_90_8a_adv, cc_range_10280_102a0_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp59);
            r10000_10ffff_tmp60 = simd_and(r10000_10ffff_tmp53, tmp1);
            byte_8b = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp60);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp61 = simd_and(basis_bits.bit_3, tmp7);
            byte_range_80_90 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp61);
            carryQ.cq[201] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(201), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp62 = simd_and(sequence_f0_90_8b_adv, byte_range_80_90);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp62);
            r10000_10ffff_tmp63 = simd_andc(r10000_10ffff_tmp8, tmp6);
            byte_8c = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp63);
            sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
            r10000_10ffff_tmp64 = simd_andc(basis_bits.bit_2, r80_10ffff_tmp2);
            cc_range_10300_10330_4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp64);
            carryQ.cq[202] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(202), sequence_f0_90_8c_adv));
            r10000_10ffff_tmp65 = simd_and(sequence_f0_90_8c_adv, cc_range_10300_10330_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp65);
            r10000_10ffff_tmp66 = simd_and(r10000_10ffff_tmp8, r10000_10ffff_tmp30);
            byte_8d = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp66);
            sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
            r10000_10ffff_tmp67 = simd_andc(r10000_10ffff_tmp41, tmp3);
            r10000_10ffff_tmp68 = simd_not(r10000_10ffff_tmp43);
            r10000_10ffff_tmp69 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp68), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp70 = simd_and(byte_range_80_bf, r10000_10ffff_tmp69);
            cc_range_10340_10350_4 = simd_or(r10000_10ffff_tmp67, r10000_10ffff_tmp70);
            carryQ.cq[203] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(203), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp71 = simd_and(sequence_f0_90_8d_adv, cc_range_10340_10350_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp71);
            r10000_10ffff_tmp72 = simd_and(r10000_10ffff_tmp8, r10000_10ffff_tmp37);
            byte_8e = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp72);
            sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
            r10000_10ffff_tmp73 = simd_and(r10000_10ffff_tmp8, basis_bits.bit_6);
            r10000_10ffff_tmp74 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp73);
            r10000_10ffff_tmp75 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp74);
            cc_range_10380_103a0_4 = simd_or(r10000_10ffff_tmp75, r10000_10ffff_tmp58);
            carryQ.cq[204] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(204), sequence_f0_90_8e_adv));
            r10000_10ffff_tmp76 = simd_and(sequence_f0_90_8e_adv, cc_range_10380_103a0_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp76);
            byte_8f = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp27);
            sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
            r10000_10ffff_tmp77 = simd_andc(tmp5, basis_bits.bit_4);
            r10000_10ffff_tmp78 = simd_andc(r10000_10ffff_tmp41, r10000_10ffff_tmp77);
            r10000_10ffff_tmp79 = simd_andc(r10000_10ffff_tmp40, basis_bits.bit_4);
            r10000_10ffff_tmp80 = simd_not(basis_bits.bit_6);
            r10000_10ffff_tmp81 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp80), simd_andc(tmp6, basis_bits.bit_5));
            r10000_10ffff_tmp82 = simd_and(r10000_10ffff_tmp79, r10000_10ffff_tmp81);
            cc_range_103c0_103d1_4 = simd_or(r10000_10ffff_tmp78, r10000_10ffff_tmp82);
            carryQ.cq[205] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(205), sequence_f0_90_8f_adv));
            r10000_10ffff_tmp83 = simd_and(sequence_f0_90_8f_adv, cc_range_103c0_103d1_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp83);
            r10000_10ffff_tmp84 = simd_or(tmp5, basis_bits.bit_6);
            byte_range_90_91 = simd_andc(r10000_10ffff_tmp40, r10000_10ffff_tmp84);
            sequence_f0_90_byte_range_90_91 = simd_and(sequence_f0_90_adv, byte_range_90_91);
            carryQ.cq[206] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_90_91, carryQ.get_carry_in(206), r10000_10ffff_tmp85));
            sequence_f0_90_byte_range_90_91_sfx = simd_and(r10000_10ffff_tmp85, byte_range_80_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_byte_range_90_91_sfx);
            byte_92 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp38);
            sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
            byte_range_80_9d = r10000_10ffff_tmp75;
            carryQ.cq[207] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(207), r10000_10ffff_tmp86));
            sequence_f0_90_92_byte_range_80_9d = simd_and(r10000_10ffff_tmp86, byte_range_80_9d);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_92_byte_range_80_9d);
            r10000_10ffff_tmp87 = simd_andc(r10000_10ffff_tmp46, tmp6);
            byte_94 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp87);
            sequence_f0_90_94 = simd_and(sequence_f0_90_adv, byte_94);
            r10000_10ffff_tmp88 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp89 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp88);
            byte_range_80_a7 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp89);
            carryQ.cq[208] = carryout2carry(pablo_blk_Advance(sequence_f0_90_94, carryQ.get_carry_in(208), r10000_10ffff_tmp90));
            sequence_f0_90_94_byte_range_80_a7 = simd_and(r10000_10ffff_tmp90, byte_range_80_a7);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_94_byte_range_80_a7);
            byte_95 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp47);
            sequence_f0_90_95 = simd_and(sequence_f0_90_adv, byte_95);
            r10000_10ffff_tmp91 = simd_or(basis_bits.bit_3, tmp5);
            r10000_10ffff_tmp92 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp91);
            byte_range_80_a3 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp92);
            carryQ.cq[209] = carryout2carry(pablo_blk_Advance(sequence_f0_90_95, carryQ.get_carry_in(209), r10000_10ffff_tmp93));
            sequence_f0_90_95_byte_range_80_a3 = simd_and(r10000_10ffff_tmp93, byte_range_80_a3);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_95_byte_range_80_a3);
            r10000_10ffff_tmp94 = simd_andc(r10000_10ffff_tmp53, tmp6);
            byte_98 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp94);
            sequence_f0_90_98 = simd_and(sequence_f0_90_adv, byte_98);
            carryQ.cq[210] = carryout2carry(pablo_blk_Advance(sequence_f0_90_98, carryQ.get_carry_in(210), r10000_10ffff_tmp95));
            sequence_f0_90_98_byte_range_80_bf = simd_and(r10000_10ffff_tmp95, byte_range_80_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_98_byte_range_80_bf);
            byte_9c = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp63);
            sequence_f0_90_9c = simd_and(sequence_f0_90_adv, byte_9c);
            r10000_10ffff_tmp96 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp11);
            r10000_10ffff_tmp97 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp96);
            byte_range_80_b6 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp97);
            carryQ.cq[211] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9c, carryQ.get_carry_in(211), r10000_10ffff_tmp98));
            sequence_f0_90_9c_byte_range_80_b6 = simd_and(r10000_10ffff_tmp98, byte_range_80_b6);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_9c_byte_range_80_b6);
            byte_9d = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp66);
            sequence_f0_90_9d = simd_and(sequence_f0_90_adv, byte_9d);
            r10000_10ffff_tmp99 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp32);
            r10000_10ffff_tmp100 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp99);
            byte_range_80_95 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp100);
            carryQ.cq[212] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9d, carryQ.get_carry_in(212), r10000_10ffff_tmp101));
            sequence_f0_90_9d_byte_range_80_95 = simd_and(r10000_10ffff_tmp101, byte_range_80_95);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_9d_byte_range_80_95);
            r10000_10ffff_tmp102 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            byte_a0 = simd_andc(r10000_10ffff_tmp102, tmp7);
            sequence_f0_90_a0 = simd_and(sequence_f0_90_adv, byte_a0);
            r10000_10ffff_tmp103 = simd_andc(r10000_10ffff_tmp41, basis_bits.bit_4);
            byte_range_80_85 = simd_andc(r10000_10ffff_tmp103, r10000_10ffff_tmp32);
            carryQ.cq[213] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a0, carryQ.get_carry_in(213), r10000_10ffff_tmp104));
            sequence_f0_90_a0_byte_range_80_85 = simd_and(r10000_10ffff_tmp104, byte_range_80_85);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_a0_byte_range_80_85);
            byte_a1 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp31);
            sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
            carryQ.cq[214] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(214), r10000_10ffff_tmp105));
            sequence_f0_90_a1_byte_range_80_95 = simd_and(r10000_10ffff_tmp105, byte_range_80_95);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_a1_byte_range_80_95);
            byte_a2 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp38);
            sequence_f0_90_a2 = simd_and(sequence_f0_90_adv, byte_a2);
            r10000_10ffff_tmp106 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp27);
            byte_range_80_9e = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp106);
            carryQ.cq[215] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a2, carryQ.get_carry_in(215), r10000_10ffff_tmp107));
            sequence_f0_90_a2_byte_range_80_9e = simd_and(r10000_10ffff_tmp107, byte_range_80_9e);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_a2_byte_range_80_9e);
            byte_a4 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp87);
            sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
            carryQ.cq[216] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(216), r10000_10ffff_tmp108));
            sequence_f0_90_a4_byte_range_80_95 = simd_and(r10000_10ffff_tmp108, byte_range_80_95);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_a4_byte_range_80_95);
            r10000_10ffff_tmp109 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp37);
            byte_a6 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp109);
            sequence_f0_90_a6 = simd_and(sequence_f0_90_adv, byte_a6);
            r10000_10ffff_tmp110 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp111 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp110);
            byte_range_80_b7 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp111);
            carryQ.cq[217] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a6, carryQ.get_carry_in(217), r10000_10ffff_tmp112));
            sequence_f0_90_a6_byte_range_80_b7 = simd_and(r10000_10ffff_tmp112, byte_range_80_b7);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_a6_byte_range_80_b7);
            byte_a8 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp94);
            sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
            byte_range_80_83 = simd_andc(r10000_10ffff_tmp41, tmp5);
            carryQ.cq[218] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(218), r10000_10ffff_tmp113));
            sequence_f0_90_a8_byte_range_80_83 = simd_and(r10000_10ffff_tmp113, byte_range_80_83);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_a8_byte_range_80_83);
            r10000_10ffff_tmp114 = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp30);
            byte_a9 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp114);
            sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
            byte_range_a0_bc = simd_andc(r10000_10ffff_tmp58, r10000_10ffff_tmp56);
            carryQ.cq[219] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(219), r10000_10ffff_tmp115));
            sequence_f0_90_a9_byte_range_a0_bc = simd_and(r10000_10ffff_tmp115, byte_range_a0_bc);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_a9_byte_range_a0_bc);
            byte_aa = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp54);
            sequence_f0_90_aa = simd_and(sequence_f0_90_adv, byte_aa);
            byte_range_80_9c = r10000_10ffff_tmp57;
            carryQ.cq[220] = carryout2carry(pablo_blk_Advance(sequence_f0_90_aa, carryQ.get_carry_in(220), r10000_10ffff_tmp116));
            sequence_f0_90_aa_byte_range_80_9c = simd_and(r10000_10ffff_tmp116, byte_range_80_9c);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_aa_byte_range_80_9c);
            byte_ab = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp60);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            byte_range_80_87 = r10000_10ffff_tmp103;
            carryQ.cq[221] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(221), r10000_10ffff_tmp117));
            sequence_f0_90_ab_byte_range_80_87 = simd_and(r10000_10ffff_tmp117, byte_range_80_87);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_ab_byte_range_80_87);
            byte_ac = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp63);
            sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
            r10000_10ffff_tmp118 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp100);
            byte_range_80_b5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp118);
            carryQ.cq[222] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(222), r10000_10ffff_tmp119));
            sequence_f0_90_ac_byte_range_80_b5 = simd_and(r10000_10ffff_tmp119, byte_range_80_b5);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_ac_byte_range_80_b5);
            byte_ad = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp66);
            sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
            carryQ.cq[223] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(223), r10000_10ffff_tmp120));
            sequence_f0_90_ad_byte_range_80_95 = simd_and(r10000_10ffff_tmp120, byte_range_80_95);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_ad_byte_range_80_95);
            byte_ae = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp72);
            sequence_f0_90_ae = simd_and(sequence_f0_90_adv, byte_ae);
            r10000_10ffff_tmp121 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp84);
            byte_range_80_91 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp121);
            carryQ.cq[224] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(224), r10000_10ffff_tmp122));
            sequence_f0_90_ae_byte_range_80_91 = simd_and(r10000_10ffff_tmp122, byte_range_80_91);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_ae_byte_range_80_91);
            r10000_10ffff_tmp123 = simd_and(byte_range_80_bf, r80_10ffff_tmp2);
            byte_b0 = simd_andc(r10000_10ffff_tmp123, tmp7);
            sequence_f0_90_b0 = simd_and(sequence_f0_90_adv, byte_b0);
            carryQ.cq[225] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b0, carryQ.get_carry_in(225), r10000_10ffff_tmp124));
            sequence_f0_90_b0_byte_range_80_bf = simd_and(r10000_10ffff_tmp124, byte_range_80_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_b0_byte_range_80_bf);
            byte_b1 = simd_and(r10000_10ffff_tmp123, r10000_10ffff_tmp31);
            sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
            r10000_10ffff_tmp125 = simd_or(basis_bits.bit_5, tmp6);
            r10000_10ffff_tmp126 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp125);
            byte_range_80_88 = simd_andc(r10000_10ffff_tmp41, r10000_10ffff_tmp126);
            carryQ.cq[226] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b1, carryQ.get_carry_in(226), r10000_10ffff_tmp127));
            sequence_f0_90_b1_byte_range_80_88 = simd_and(r10000_10ffff_tmp127, byte_range_80_88);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_90_b1_byte_range_80_88);
            byte_91 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp31);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            carryQ.cq[227] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(227), r10000_10ffff_tmp128));
            sequence_f0_91_80 = simd_and(r10000_10ffff_tmp128, byte_80);
            sequence_f0_91_adv = r10000_10ffff_tmp128;
            carryQ.cq[228] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(228), sequence_f0_91_80_adv));
            r10000_10ffff_tmp129 = simd_and(sequence_f0_91_80_adv, byte_range_80_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp129);
            sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
            carryQ.cq[229] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(229), sequence_f0_91_81_adv));
            r10000_10ffff_tmp130 = simd_and(sequence_f0_91_81_adv, byte_range_80_85);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp130);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            r10000_10ffff_tmp131 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp126);
            r10000_10ffff_tmp132 = simd_not(r10000_10ffff_tmp131);
            r10000_10ffff_tmp133 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp84);
            r10000_10ffff_tmp134 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp132), simd_andc(r10000_10ffff_tmp133, basis_bits.bit_2));
            byte_range_82_b8 = simd_and(byte_range_80_bf, r10000_10ffff_tmp134);
            carryQ.cq[230] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(230), sequence_f0_91_82_adv));
            r10000_10ffff_tmp135 = simd_and(sequence_f0_91_82_adv, byte_range_82_b8);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp135);
            sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
            r10000_10ffff_tmp136 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp126);
            r10000_10ffff_tmp137 = simd_not(r10000_10ffff_tmp136);
            r10000_10ffff_tmp138 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp137), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_a8 = simd_and(byte_range_80_bf, r10000_10ffff_tmp138);
            carryQ.cq[231] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(231), sequence_f0_91_83_adv));
            r10000_10ffff_tmp139 = simd_and(sequence_f0_91_83_adv, byte_range_90_a8);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp139);
            byte_84 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp87);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            r10000_10ffff_tmp140 = simd_or(tmp5, tmp1);
            r10000_10ffff_tmp141 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp140);
            r10000_10ffff_tmp142 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp141);
            byte_range_80_b2 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp142);
            carryQ.cq[232] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(232), sequence_f0_91_84_adv));
            r10000_10ffff_tmp143 = simd_and(sequence_f0_91_84_adv, byte_range_80_b2);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp143);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            r10000_10ffff_tmp144 = simd_not(r10000_10ffff_tmp141);
            r10000_10ffff_tmp145 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp144), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp146 = simd_and(byte_range_80_bf, r10000_10ffff_tmp145);
            r10000_10ffff_tmp147 = simd_and(r10000_10ffff_tmp123, r10000_10ffff_tmp109);
            cc_range_11150_11176_4 = simd_or(r10000_10ffff_tmp146, r10000_10ffff_tmp147);
            carryQ.cq[233] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(233), sequence_f0_91_85_adv));
            r10000_10ffff_tmp148 = simd_and(sequence_f0_91_85_adv, cc_range_11150_11176_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp148);
            byte_86 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp109);
            sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
            carryQ.cq[234] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(234), sequence_f0_91_86_adv));
            r10000_10ffff_tmp149 = simd_and(sequence_f0_91_86_adv, byte_range_80_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp149);
            r10000_10ffff_tmp150 = simd_and(r10000_10ffff_tmp46, tmp1);
            byte_87 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp150);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            r10000_10ffff_tmp151 = simd_xor(basis_bits.bit_5, tmp6);
            r10000_10ffff_tmp152 = simd_and(byte_range_80_87, r10000_10ffff_tmp151);
            r10000_10ffff_tmp153 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp54);
            cc_range_111c1_111da_4 = simd_or(r10000_10ffff_tmp152, r10000_10ffff_tmp153);
            carryQ.cq[235] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(235), sequence_f0_91_87_adv));
            r10000_10ffff_tmp154 = simd_and(sequence_f0_91_87_adv, cc_range_111c1_111da_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp154);
            byte_88 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp94);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            r10000_10ffff_tmp155 = simd_not(r10000_10ffff_tmp50);
            r10000_10ffff_tmp156 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp155), simd_andc(r10000_10ffff_tmp141, basis_bits.bit_2));
            r10000_10ffff_tmp157 = simd_and(byte_range_80_bf, r10000_10ffff_tmp156);
            r10000_10ffff_tmp158 = simd_or(byte_range_80_91, r10000_10ffff_tmp157);
            r10000_10ffff_tmp159 = simd_and(r10000_10ffff_tmp123, r10000_10ffff_tmp150);
            cc_range_11200_11237_4 = simd_or(r10000_10ffff_tmp158, r10000_10ffff_tmp159);
            carryQ.cq[236] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(236), sequence_f0_91_88_adv));
            r10000_10ffff_tmp160 = simd_and(sequence_f0_91_88_adv, cc_range_11200_11237_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp160);
            sequence_f0_91_8a = simd_and(sequence_f0_91_adv, byte_8a);
            byte_range_b0_bf = r10000_10ffff_tmp123;
            carryQ.cq[237] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8a, carryQ.get_carry_in(237), sequence_f0_91_8a_adv));
            r10000_10ffff_tmp161 = simd_and(sequence_f0_91_8a_adv, byte_range_b0_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp161);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            r10000_10ffff_tmp162 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp136);
            byte_range_80_a8 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp162);
            carryQ.cq[238] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(238), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp163 = simd_and(sequence_f0_91_8b_adv, byte_range_80_a8);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp163);
            sequence_f0_91_8c = simd_and(sequence_f0_91_adv, byte_8c);
            r10000_10ffff_tmp164 = simd_and(byte_range_80_83, tmp6);
            r10000_10ffff_tmp165 = simd_xor(basis_bits.bit_4, r10000_10ffff_tmp48);
            r10000_10ffff_tmp166 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp165);
            r10000_10ffff_tmp167 = simd_or(r10000_10ffff_tmp164, r10000_10ffff_tmp166);
            r10000_10ffff_tmp168 = simd_not(tmp7);
            r10000_10ffff_tmp169 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp168), simd_andc(r10000_10ffff_tmp27, basis_bits.bit_3));
            r10000_10ffff_tmp170 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp169);
            r10000_10ffff_tmp171 = simd_or(r10000_10ffff_tmp167, r10000_10ffff_tmp170);
            r10000_10ffff_tmp172 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp137), simd_andc(r10000_10ffff_tmp141, basis_bits.bit_2));
            r10000_10ffff_tmp173 = simd_and(byte_range_80_bf, r10000_10ffff_tmp172);
            r10000_10ffff_tmp174 = simd_or(r10000_10ffff_tmp171, r10000_10ffff_tmp173);
            r10000_10ffff_tmp175 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp176 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp175);
            r10000_10ffff_tmp177 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp168), simd_andc(r10000_10ffff_tmp176, basis_bits.bit_3));
            r10000_10ffff_tmp178 = simd_and(r10000_10ffff_tmp58, r10000_10ffff_tmp177);
            r10000_10ffff_tmp179 = simd_or(r10000_10ffff_tmp174, r10000_10ffff_tmp178);
            r10000_10ffff_tmp180 = simd_andc(basis_bits.bit_6, tmp5);
            r10000_10ffff_tmp181 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp180);
            r10000_10ffff_tmp182 = simd_or(r10000_10ffff_tmp179, r10000_10ffff_tmp181);
            r10000_10ffff_tmp183 = simd_not(r10000_10ffff_tmp175);
            r10000_10ffff_tmp184 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp183), simd_andc(r10000_10ffff_tmp48, basis_bits.bit_4));
            r10000_10ffff_tmp185 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp184);
            r10000_10ffff_tmp186 = simd_or(r10000_10ffff_tmp182, r10000_10ffff_tmp185);
            r10000_10ffff_tmp187 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp8);
            r10000_10ffff_tmp188 = simd_and(r10000_10ffff_tmp187, tmp6);
            cc_range_11301_1133d_4 = simd_or(r10000_10ffff_tmp186, r10000_10ffff_tmp188);
            carryQ.cq[239] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(239), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp189 = simd_and(sequence_f0_91_8c_adv, cc_range_11301_1133d_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp189);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            r10000_10ffff_tmp190 = simd_andc(byte_range_80_87, r10000_10ffff_tmp48);
            r10000_10ffff_tmp191 = simd_not(r10000_10ffff_tmp125);
            r10000_10ffff_tmp192 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp191), simd_andc(r10000_10ffff_tmp10, basis_bits.bit_4));
            r10000_10ffff_tmp193 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp192);
            r10000_10ffff_tmp194 = simd_or(r10000_10ffff_tmp190, r10000_10ffff_tmp193);
            r10000_10ffff_tmp195 = simd_and(r10000_10ffff_tmp41, basis_bits.bit_4);
            r10000_10ffff_tmp196 = simd_not(tmp6);
            r10000_10ffff_tmp197 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp196), simd_andc(tmp1, basis_bits.bit_5));
            r10000_10ffff_tmp198 = simd_and(r10000_10ffff_tmp195, r10000_10ffff_tmp197);
            r10000_10ffff_tmp199 = simd_or(r10000_10ffff_tmp194, r10000_10ffff_tmp198);
            r10000_10ffff_tmp200 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp150);
            r10000_10ffff_tmp201 = simd_or(r10000_10ffff_tmp199, r10000_10ffff_tmp200);
            r10000_10ffff_tmp202 = simd_not(r10000_10ffff_tmp91);
            r10000_10ffff_tmp203 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp202), simd_andc(r10000_10ffff_tmp56, basis_bits.bit_2));
            r10000_10ffff_tmp204 = simd_and(byte_range_80_bf, r10000_10ffff_tmp203);
            cc_range_11340_1135d_4 = simd_or(r10000_10ffff_tmp201, r10000_10ffff_tmp204);
            carryQ.cq[240] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(240), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp205 = simd_and(sequence_f0_91_8d_adv, cc_range_11340_1135d_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp205);
            sequence_f0_91_92 = simd_and(sequence_f0_91_adv, byte_92);
            carryQ.cq[241] = carryout2carry(pablo_blk_Advance(sequence_f0_91_92, carryQ.get_carry_in(241), sequence_f0_91_92_adv));
            r10000_10ffff_tmp206 = simd_and(sequence_f0_91_92_adv, byte_range_80_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp206);
            byte_93 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp42);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            r10000_10ffff_tmp207 = simd_andc(r10000_10ffff_tmp46, basis_bits.bit_6);
            r10000_10ffff_tmp208 = simd_andc(r10000_10ffff_tmp84, r10000_10ffff_tmp207);
            r10000_10ffff_tmp209 = simd_andc(r10000_10ffff_tmp208, r10000_10ffff_tmp150);
            cc_range_114c0_114c7_4 = simd_andc(r10000_10ffff_tmp41, r10000_10ffff_tmp209);
            carryQ.cq[242] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(242), sequence_f0_91_93_adv));
            r10000_10ffff_tmp210 = simd_and(sequence_f0_91_93_adv, cc_range_114c0_114c7_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp210);
            byte_96 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp109);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            r10000_10ffff_tmp211 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
            r10000_10ffff_tmp212 = simd_andc(r10000_10ffff_tmp211, r10000_10ffff_tmp10);
            cc_range_11580_115b8_4 = simd_or(byte_range_80_b5, r10000_10ffff_tmp212);
            carryQ.cq[243] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(243), sequence_f0_91_96_adv));
            r10000_10ffff_tmp213 = simd_and(sequence_f0_91_96_adv, cc_range_11580_115b8_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp213);
            sequence_f0_91_98 = simd_and(sequence_f0_91_adv, byte_98);
            r10000_10ffff_tmp214 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp106);
            byte_range_80_be = simd_andc(byte_range_80_bf, r10000_10ffff_tmp214);
            carryQ.cq[244] = carryout2carry(pablo_blk_Advance(sequence_f0_91_98, carryQ.get_carry_in(244), sequence_f0_91_98_adv));
            r10000_10ffff_tmp215 = simd_and(sequence_f0_91_98_adv, byte_range_80_be);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp215);
            byte_99 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp114);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            r10000_10ffff_tmp216 = simd_andc(tmp7, r10000_10ffff_tmp87);
            cc_range_11640_11644_4 = simd_andc(r10000_10ffff_tmp41, r10000_10ffff_tmp216);
            carryQ.cq[245] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(245), sequence_f0_91_99_adv));
            r10000_10ffff_tmp217 = simd_and(sequence_f0_91_99_adv, cc_range_11640_11644_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp217);
            byte_9a = r10000_10ffff_tmp153;
            sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
            carryQ.cq[246] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(246), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp218 = simd_and(sequence_f0_91_9a_adv, byte_range_80_b5);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp218);
            sequence_f0_91_a2 = simd_and(sequence_f0_91_adv, byte_a2);
            byte_range_a0_bf = r10000_10ffff_tmp58;
            carryQ.cq[247] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(247), sequence_f0_91_a2_adv));
            r10000_10ffff_tmp219 = simd_and(sequence_f0_91_a2_adv, byte_range_a0_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp219);
            byte_a3 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp42);
            sequence_f0_91_a3 = simd_and(sequence_f0_91_adv, byte_a3);
            r10000_10ffff_tmp220 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp27);
            cc_range_118c0_118ff_4 = simd_or(r10000_10ffff_tmp55, r10000_10ffff_tmp220);
            carryQ.cq[248] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(248), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp221 = simd_and(sequence_f0_91_a3_adv, cc_range_118c0_118ff_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp221);
            sequence_f0_91_ab = simd_and(sequence_f0_91_adv, byte_ab);
            r10000_10ffff_tmp222 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp131);
            byte_range_80_b8 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp222);
            carryQ.cq[249] = carryout2carry(pablo_blk_Advance(sequence_f0_91_ab, carryQ.get_carry_in(249), sequence_f0_91_ab_adv));
            r10000_10ffff_tmp223 = simd_and(sequence_f0_91_ab_adv, byte_range_80_b8);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp223);
            sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
            byte_range_80_8d = simd_andc(r10000_10ffff_tmp41, r10000_10ffff_tmp33);
            carryQ.cq[250] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(250), r10000_10ffff_tmp224));
            sequence_f0_92_byte_range_80_8d = simd_and(r10000_10ffff_tmp224, byte_range_80_8d);
            carryQ.cq[251] = carryout2carry(pablo_blk_Advance(sequence_f0_92_byte_range_80_8d, carryQ.get_carry_in(251), r10000_10ffff_tmp225));
            sequence_f0_92_byte_range_80_8d_sfx = simd_and(r10000_10ffff_tmp225, byte_range_80_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_92_byte_range_80_8d_sfx);
            sequence_f0_92_adv = r10000_10ffff_tmp224;
            sequence_f0_92_8e = simd_and(sequence_f0_92_adv, byte_8e);
            byte_range_80_98 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp131);
            carryQ.cq[252] = carryout2carry(pablo_blk_Advance(sequence_f0_92_8e, carryQ.get_carry_in(252), r10000_10ffff_tmp226));
            sequence_f0_92_8e_byte_range_80_98 = simd_and(r10000_10ffff_tmp226, byte_range_80_98);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_92_8e_byte_range_80_98);
            sequence_f0_92_90 = simd_and(sequence_f0_92_adv, byte_90);
            carryQ.cq[253] = carryout2carry(pablo_blk_Advance(sequence_f0_92_90, carryQ.get_carry_in(253), r10000_10ffff_tmp227));
            sequence_f0_92_90_byte_range_80_bf = simd_and(r10000_10ffff_tmp227, byte_range_80_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_92_90_byte_range_80_bf);
            sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
            r10000_10ffff_tmp228 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp27);
            r10000_10ffff_tmp229 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp228);
            byte_range_80_ae = simd_andc(byte_range_80_bf, r10000_10ffff_tmp229);
            carryQ.cq[254] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(254), r10000_10ffff_tmp230));
            sequence_f0_92_91_byte_range_80_ae = simd_and(r10000_10ffff_tmp230, byte_range_80_ae);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_92_91_byte_range_80_ae);
            sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
            byte_range_80_8f = r10000_10ffff_tmp41;
            carryQ.cq[255] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(255), r10000_10ffff_tmp231));
            sequence_f0_93_byte_range_80_8f = simd_and(r10000_10ffff_tmp231, byte_range_80_8f);
            carryQ.cq[256] = carryout2carry(pablo_blk_Advance(sequence_f0_93_byte_range_80_8f, carryQ.get_carry_in(256), r10000_10ffff_tmp232));
            sequence_f0_93_byte_range_80_8f_sfx = simd_and(r10000_10ffff_tmp232, byte_range_80_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_93_byte_range_80_8f_sfx);
            sequence_f0_93_adv = r10000_10ffff_tmp231;
            sequence_f0_93_90 = simd_and(sequence_f0_93_adv, byte_90);
            carryQ.cq[257] = carryout2carry(pablo_blk_Advance(sequence_f0_93_90, carryQ.get_carry_in(257), r10000_10ffff_tmp233));
            sequence_f0_93_90_byte_range_80_ae = simd_and(r10000_10ffff_tmp233, byte_range_80_ae);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_93_90_byte_range_80_ae);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            byte_range_a0_a7 = simd_andc(r10000_10ffff_tmp102, basis_bits.bit_4);
            carryQ.cq[258] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(258), r10000_10ffff_tmp234));
            sequence_f0_96_byte_range_a0_a7 = simd_and(r10000_10ffff_tmp234, byte_range_a0_a7);
            carryQ.cq[259] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_a0_a7, carryQ.get_carry_in(259), r10000_10ffff_tmp235));
            sequence_f0_96_byte_range_a0_a7_sfx = simd_and(r10000_10ffff_tmp235, byte_range_80_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_96_byte_range_a0_a7_sfx);
            sequence_f0_96_adv = r10000_10ffff_tmp234;
            sequence_f0_96_a8 = simd_and(sequence_f0_96_adv, byte_a8);
            carryQ.cq[260] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a8, carryQ.get_carry_in(260), r10000_10ffff_tmp236));
            sequence_f0_96_a8_byte_range_80_b8 = simd_and(r10000_10ffff_tmp236, byte_range_80_b8);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_96_a8_byte_range_80_b8);
            sequence_f0_96_a9 = simd_and(sequence_f0_96_adv, byte_a9);
            carryQ.cq[261] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a9, carryQ.get_carry_in(261), r10000_10ffff_tmp237));
            sequence_f0_96_a9_byte_range_80_9e = simd_and(r10000_10ffff_tmp237, byte_range_80_9e);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_96_a9_byte_range_80_9e);
            sequence_f0_96_ab = simd_and(sequence_f0_96_adv, byte_ab);
            r10000_10ffff_tmp238 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp73);
            r10000_10ffff_tmp239 = simd_not(r10000_10ffff_tmp238);
            r10000_10ffff_tmp240 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp239), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ad = simd_and(byte_range_80_bf, r10000_10ffff_tmp240);
            carryQ.cq[262] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(262), r10000_10ffff_tmp241));
            sequence_f0_96_ab_byte_range_90_ad = simd_and(r10000_10ffff_tmp241, byte_range_90_ad);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_96_ab_byte_range_90_ad);
            sequence_f0_96_ac = simd_and(sequence_f0_96_adv, byte_ac);
            carryQ.cq[263] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(263), r10000_10ffff_tmp242));
            sequence_f0_96_ac_byte_range_80_b6 = simd_and(r10000_10ffff_tmp242, byte_range_80_b6);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_96_ac_byte_range_80_b6);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            carryQ.cq[264] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(264), r10000_10ffff_tmp243));
            sequence_f0_96_ad_byte_range_80_83 = simd_and(r10000_10ffff_tmp243, byte_range_80_83);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_96_ad_byte_range_80_83);
            sequence_f0_96_ae = simd_and(sequence_f0_96_adv, byte_ae);
            carryQ.cq[265] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ae, carryQ.get_carry_in(265), r10000_10ffff_tmp244));
            sequence_f0_96_ae_byte_range_80_8f = simd_and(r10000_10ffff_tmp244, byte_range_80_8f);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_96_ae_byte_range_80_8f);
            byte_bc = simd_and(byte_range_b0_bf, r10000_10ffff_tmp63);
            sequence_f0_96_bc = simd_and(sequence_f0_96_adv, byte_bc);
            carryQ.cq[266] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bc, carryQ.get_carry_in(266), r10000_10ffff_tmp245));
            sequence_f0_96_bc_byte_range_80_bf = simd_and(r10000_10ffff_tmp245, byte_range_80_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_96_bc_byte_range_80_bf);
            byte_bd = simd_and(byte_range_b0_bf, r10000_10ffff_tmp66);
            sequence_f0_96_bd = simd_and(sequence_f0_96_adv, byte_bd);
            r10000_10ffff_tmp246 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
            byte_range_80_84 = simd_andc(r10000_10ffff_tmp246, r10000_10ffff_tmp48);
            carryQ.cq[267] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bd, carryQ.get_carry_in(267), r10000_10ffff_tmp247));
            sequence_f0_96_bd_byte_range_80_84 = simd_and(r10000_10ffff_tmp247, byte_range_80_84);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_96_bd_byte_range_80_84);
            byte_be = simd_and(byte_range_b0_bf, r10000_10ffff_tmp72);
            sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
            r10000_10ffff_tmp248 = simd_or(basis_bits.bit_4, tmp2);
            byte_range_93_9f = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp248);
            carryQ.cq[268] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(268), r10000_10ffff_tmp249));
            sequence_f0_96_be_byte_range_93_9f = simd_and(r10000_10ffff_tmp249, byte_range_93_9f);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_96_be_byte_range_93_9f);
            byte_9b = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp60);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            carryQ.cq[269] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(269), r10000_10ffff_tmp250));
            sequence_f0_9b_80 = simd_and(r10000_10ffff_tmp250, byte_80);
            sequence_f0_9b_adv = r10000_10ffff_tmp250;
            byte_range_80_81 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp84);
            carryQ.cq[270] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_80, carryQ.get_carry_in(270), sequence_f0_9b_80_adv));
            r10000_10ffff_tmp251 = simd_and(sequence_f0_9b_80_adv, byte_range_80_81);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp251);
            sequence_f0_9b_b0 = simd_and(sequence_f0_9b_adv, byte_b0);
            carryQ.cq[271] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b0, carryQ.get_carry_in(271), sequence_f0_9b_b0_adv));
            r10000_10ffff_tmp252 = simd_and(sequence_f0_9b_b0_adv, byte_range_80_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp252);
            sequence_f0_9b_b1 = simd_and(sequence_f0_9b_adv, byte_b1);
            r10000_10ffff_tmp253 = simd_or(basis_bits.bit_3, tmp3);
            r10000_10ffff_tmp254 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp253);
            r10000_10ffff_tmp255 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp254);
            r10000_10ffff_tmp256 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp48);
            r10000_10ffff_tmp257 = simd_andc(byte_range_b0_bf, r10000_10ffff_tmp256);
            cc_range_1bc40_1bc70_4 = simd_or(r10000_10ffff_tmp255, r10000_10ffff_tmp257);
            carryQ.cq[272] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b1, carryQ.get_carry_in(272), sequence_f0_9b_b1_adv));
            r10000_10ffff_tmp258 = simd_and(sequence_f0_9b_b1_adv, cc_range_1bc40_1bc70_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp258);
            byte_b2 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp38);
            sequence_f0_9b_b2 = simd_and(sequence_f0_9b_adv, byte_b2);
            r10000_10ffff_tmp259 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp126);
            r10000_10ffff_tmp260 = simd_andc(r10000_10ffff_tmp40, r10000_10ffff_tmp176);
            r10000_10ffff_tmp261 = simd_or(r10000_10ffff_tmp259, r10000_10ffff_tmp260);
            r10000_10ffff_tmp262 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp72);
            cc_range_1bc80_1bc9e_4 = simd_or(r10000_10ffff_tmp261, r10000_10ffff_tmp262);
            carryQ.cq[273] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(273), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp263 = simd_and(sequence_f0_9b_b2_adv, cc_range_1bc80_1bc9e_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp263);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[274] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(274), r10000_10ffff_tmp264));
            sequence_f0_9d_90 = simd_and(r10000_10ffff_tmp264, byte_90);
            sequence_f0_9d_adv = r10000_10ffff_tmp264;
            carryQ.cq[275] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(275), sequence_f0_9d_90_adv));
            r10000_10ffff_tmp265 = simd_and(sequence_f0_9d_90_adv, byte_range_80_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp265);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            r10000_10ffff_tmp266 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp50);
            r10000_10ffff_tmp267 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp100);
            r10000_10ffff_tmp268 = simd_and(byte_range_80_bf, r10000_10ffff_tmp267);
            cc_range_1d440_1d456_4 = simd_or(r10000_10ffff_tmp266, r10000_10ffff_tmp268);
            carryQ.cq[276] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(276), sequence_f0_9d_91_adv));
            r10000_10ffff_tmp269 = simd_and(sequence_f0_9d_91_adv, cc_range_1d440_1d456_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp269);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            r10000_10ffff_tmp270 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp73);
            r10000_10ffff_tmp271 = simd_or(byte_range_80_9c, r10000_10ffff_tmp270);
            r10000_10ffff_tmp272 = simd_or(r10000_10ffff_tmp271, byte_a2);
            r10000_10ffff_tmp273 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp46);
            r10000_10ffff_tmp274 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp275 = simd_and(r10000_10ffff_tmp273, r10000_10ffff_tmp274);
            r10000_10ffff_tmp276 = simd_or(r10000_10ffff_tmp272, r10000_10ffff_tmp275);
            r10000_10ffff_tmp277 = simd_and(r10000_10ffff_tmp102, basis_bits.bit_4);
            r10000_10ffff_tmp278 = simd_and(r10000_10ffff_tmp277, r10000_10ffff_tmp151);
            r10000_10ffff_tmp279 = simd_or(r10000_10ffff_tmp276, r10000_10ffff_tmp278);
            r10000_10ffff_tmp280 = simd_not(r10000_10ffff_tmp176);
            r10000_10ffff_tmp281 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp280), simd_andc(r10000_10ffff_tmp73, basis_bits.bit_3));
            r10000_10ffff_tmp282 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp281);
            r10000_10ffff_tmp283 = simd_or(r10000_10ffff_tmp279, r10000_10ffff_tmp282);
            r10000_10ffff_tmp284 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp60);
            r10000_10ffff_tmp285 = simd_or(r10000_10ffff_tmp283, r10000_10ffff_tmp284);
            cc_range_1d480_1d4bd_4 = simd_or(r10000_10ffff_tmp285, r10000_10ffff_tmp188);
            carryQ.cq[277] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(277), sequence_f0_9d_92_adv));
            r10000_10ffff_tmp286 = simd_and(sequence_f0_9d_92_adv, cc_range_1d480_1d4bd_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp286);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            r10000_10ffff_tmp287 = simd_andc(byte_range_80_8f, tmp5);
            r10000_10ffff_tmp288 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp49);
            r10000_10ffff_tmp289 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp288);
            r10000_10ffff_tmp290 = simd_and(byte_range_80_bf, r10000_10ffff_tmp289);
            cc_range_1d4c0_1d4c5_4 = simd_or(r10000_10ffff_tmp287, r10000_10ffff_tmp290);
            carryQ.cq[278] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(278), sequence_f0_9d_93_adv));
            r10000_10ffff_tmp291 = simd_and(sequence_f0_9d_93_adv, cc_range_1d4c0_1d4c5_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp291);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            r10000_10ffff_tmp292 = simd_andc(r10000_10ffff_tmp246, r10000_10ffff_tmp32);
            r10000_10ffff_tmp293 = simd_not(tmp2);
            r10000_10ffff_tmp294 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp293), simd_andc(r10000_10ffff_tmp10, basis_bits.bit_4));
            r10000_10ffff_tmp295 = simd_and(byte_range_80_8f, r10000_10ffff_tmp294);
            r10000_10ffff_tmp296 = simd_or(r10000_10ffff_tmp292, r10000_10ffff_tmp295);
            r10000_10ffff_tmp297 = simd_not(r10000_10ffff_tmp49);
            r10000_10ffff_tmp298 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp297), simd_andc(r10000_10ffff_tmp14, basis_bits.bit_3));
            r10000_10ffff_tmp299 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp298);
            r10000_10ffff_tmp300 = simd_or(r10000_10ffff_tmp296, r10000_10ffff_tmp299);
            r10000_10ffff_tmp301 = simd_not(r10000_10ffff_tmp48);
            r10000_10ffff_tmp302 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp301), simd_andc(r10000_10ffff_tmp32, basis_bits.bit_4));
            r10000_10ffff_tmp303 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp302);
            r10000_10ffff_tmp304 = simd_or(r10000_10ffff_tmp300, r10000_10ffff_tmp303);
            r10000_10ffff_tmp305 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp176);
            r10000_10ffff_tmp306 = simd_not(r10000_10ffff_tmp305);
            r10000_10ffff_tmp307 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp306), simd_andc(r10000_10ffff_tmp74, basis_bits.bit_2));
            r10000_10ffff_tmp308 = simd_and(byte_range_80_bf, r10000_10ffff_tmp307);
            r10000_10ffff_tmp309 = simd_or(r10000_10ffff_tmp304, r10000_10ffff_tmp308);
            r10000_10ffff_tmp310 = simd_xor(basis_bits.bit_5, tmp1);
            r10000_10ffff_tmp311 = simd_and(r10000_10ffff_tmp211, r10000_10ffff_tmp310);
            cc_range_1d500_1d53b_4 = simd_or(r10000_10ffff_tmp309, r10000_10ffff_tmp311);
            carryQ.cq[279] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(279), sequence_f0_9d_94_adv));
            r10000_10ffff_tmp312 = simd_and(sequence_f0_9d_94_adv, cc_range_1d500_1d53b_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp312);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            r10000_10ffff_tmp313 = simd_and(byte_range_80_8f, r10000_10ffff_tmp109);
            r10000_10ffff_tmp314 = simd_or(byte_range_80_84, r10000_10ffff_tmp313);
            r10000_10ffff_tmp315 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp177);
            r10000_10ffff_tmp316 = simd_or(r10000_10ffff_tmp314, r10000_10ffff_tmp315);
            r10000_10ffff_tmp317 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp121);
            r10000_10ffff_tmp318 = simd_and(byte_range_80_bf, r10000_10ffff_tmp317);
            cc_range_1d540_1d552_4 = simd_or(r10000_10ffff_tmp316, r10000_10ffff_tmp318);
            carryQ.cq[280] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(280), sequence_f0_9d_95_adv));
            r10000_10ffff_tmp319 = simd_and(sequence_f0_9d_95_adv, cc_range_1d540_1d552_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp319);
            r10000_10ffff_tmp320 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp183), simd_andc(r10000_10ffff_tmp32, basis_bits.bit_4));
            byte_range_96_99 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp320);
            sequence_f0_9d_byte_range_96_99 = simd_and(sequence_f0_9d_adv, byte_range_96_99);
            carryQ.cq[281] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_96_99, carryQ.get_carry_in(281), r10000_10ffff_tmp321));
            sequence_f0_9d_byte_range_96_99_sfx = simd_and(r10000_10ffff_tmp321, byte_range_80_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_9d_byte_range_96_99_sfx);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            r10000_10ffff_tmp322 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp99);
            r10000_10ffff_tmp323 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp322);
            byte_range_80_a5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp323);
            carryQ.cq[282] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(282), r10000_10ffff_tmp324));
            sequence_f0_9d_9a_byte_range_80_a5 = simd_and(r10000_10ffff_tmp324, byte_range_80_a5);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_9d_9a_byte_range_80_a5);
            sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
            carryQ.cq[283] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(283), r10000_10ffff_tmp325));
            sequence_f0_9d_9b_80 = simd_and(r10000_10ffff_tmp325, byte_80);
            sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
            byte_range_80_94 = r10000_10ffff_tmp266;
            carryQ.cq[284] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(284), r10000_10ffff_tmp326));
            sequence_f0_9d_9c_byte_range_80_94 = simd_and(r10000_10ffff_tmp326, byte_range_80_94);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_9d_9c_byte_range_80_94);
            sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
            r10000_10ffff_tmp327 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp10);
            byte_range_80_8e = simd_andc(byte_range_80_8f, r10000_10ffff_tmp327);
            carryQ.cq[285] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(285), r10000_10ffff_tmp328));
            sequence_f0_9d_9d_byte_range_80_8e = simd_and(r10000_10ffff_tmp328, byte_range_80_8e);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_9d_9d_byte_range_80_8e);
            byte_9e = r10000_10ffff_tmp262;
            sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
            carryQ.cq[286] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(286), r10000_10ffff_tmp329));
            sequence_f0_9d_9e_byte_range_80_88 = simd_and(r10000_10ffff_tmp329, byte_range_80_88);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_9d_9e_byte_range_80_88);
            byte_9f = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp27);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            byte_range_80_82 = simd_andc(r10000_10ffff_tmp287, tmp1);
            carryQ.cq[287] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(287), r10000_10ffff_tmp330));
            sequence_f0_9d_9f_byte_range_80_82 = simd_and(r10000_10ffff_tmp330, byte_range_80_82);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_9d_9f_byte_range_80_82);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            r10000_10ffff_tmp331 = simd_andc(r10000_10ffff_tmp102, tmp5);
            byte_range_a0_a2 = simd_andc(r10000_10ffff_tmp331, tmp1);
            carryQ.cq[288] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(288), r10000_10ffff_tmp332));
            sequence_f0_9e_byte_range_a0_a2 = simd_and(r10000_10ffff_tmp332, byte_range_a0_a2);
            carryQ.cq[289] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_a0_a2, carryQ.get_carry_in(289), r10000_10ffff_tmp333));
            sequence_f0_9e_byte_range_a0_a2_sfx = simd_and(r10000_10ffff_tmp333, byte_range_80_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_9e_byte_range_a0_a2_sfx);
            sequence_f0_9e_adv = r10000_10ffff_tmp332;
            sequence_f0_9e_a3 = simd_and(sequence_f0_9e_adv, byte_a3);
            carryQ.cq[290] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(290), r10000_10ffff_tmp334));
            sequence_f0_9e_a3_byte_range_80_84 = simd_and(r10000_10ffff_tmp334, byte_range_80_84);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_9e_a3_byte_range_80_84);
            byte_b8 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp94);
            sequence_f0_9e_b8 = simd_and(sequence_f0_9e_adv, byte_b8);
            carryQ.cq[291] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b8, carryQ.get_carry_in(291), r10000_10ffff_tmp335));
            sequence_f0_9e_b8_byte_range_80_83 = simd_and(r10000_10ffff_tmp335, byte_range_80_83);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_9e_b8_byte_range_80_83);
            byte_b9 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp114);
            sequence_f0_9e_b9 = simd_and(sequence_f0_9e_adv, byte_b9);
            carryQ.cq[292] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b9, carryQ.get_carry_in(292), r10000_10ffff_tmp336));
            sequence_f0_9e_b9_82 = simd_and(r10000_10ffff_tmp336, byte_82);
            byte_ba = simd_and(byte_range_b0_bf, r10000_10ffff_tmp54);
            sequence_f0_9e_ba = simd_and(sequence_f0_9e_adv, byte_ba);
            byte_range_80_89 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp176);
            carryQ.cq[293] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_ba, carryQ.get_carry_in(293), r10000_10ffff_tmp337));
            sequence_f0_9e_ba_byte_range_80_89 = simd_and(r10000_10ffff_tmp337, byte_range_80_89);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_9e_ba_byte_range_80_89);
            sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
            carryQ.cq[294] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(294), r10000_10ffff_tmp338));
            sequence_f0_9f_84 = simd_and(r10000_10ffff_tmp338, byte_84);
            sequence_f0_9f_adv = r10000_10ffff_tmp338;
            carryQ.cq[295] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_84, carryQ.get_carry_in(295), sequence_f0_9f_84_adv));
            r10000_10ffff_tmp339 = simd_and(sequence_f0_9f_84_adv, byte_range_b0_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp339);
            sequence_f0_9f_85 = simd_and(sequence_f0_9f_adv, byte_85);
            r10000_10ffff_tmp340 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp176);
            r10000_10ffff_tmp341 = simd_not(r10000_10ffff_tmp340);
            r10000_10ffff_tmp342 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp341), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp343 = simd_and(byte_range_80_bf, r10000_10ffff_tmp342);
            r10000_10ffff_tmp344 = simd_or(byte_range_80_89, r10000_10ffff_tmp343);
            cc_range_1f140_1f170_4 = simd_or(r10000_10ffff_tmp344, byte_range_b0_bf);
            carryQ.cq[296] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_85, carryQ.get_carry_in(296), sequence_f0_9f_85_adv));
            r10000_10ffff_tmp345 = simd_and(sequence_f0_9f_85_adv, cc_range_1f140_1f170_4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp345);
            sequence_f0_9f_86 = simd_and(sequence_f0_9f_adv, byte_86);
            carryQ.cq[297] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_86, carryQ.get_carry_in(297), sequence_f0_9f_86_adv));
            r10000_10ffff_tmp346 = simd_and(sequence_f0_9f_86_adv, byte_range_80_89);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, r10000_10ffff_tmp346);
            byte_range_a0_a9 = simd_andc(r10000_10ffff_tmp102, r10000_10ffff_tmp176);
            byte_f0_byte_range_a0_a9 = simd_and(byte_f0_adv, byte_range_a0_a9);
            carryQ.cq[298] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9, carryQ.get_carry_in(298), r10000_10ffff_tmp347));
            byte_f0_byte_range_a0_a9_sfx = simd_and(r10000_10ffff_tmp347, byte_range_80_bf);
            carryQ.cq[299] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9_sfx, carryQ.get_carry_in(299), r10000_10ffff_tmp348));
            byte_f0_byte_range_a0_a9_sfx_sfx = simd_and(r10000_10ffff_tmp348, byte_range_80_bf);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, byte_f0_byte_range_a0_a9_sfx_sfx);
            sequence_f0_aa = simd_and(byte_f0_adv, byte_aa);
            carryQ.cq[300] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(300), sequence_f0_aa_adv));
            sequence_f0_aa_80 = simd_and(sequence_f0_aa_adv, byte_80);
            byte_range_80_96 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp96);
            carryQ.cq[301] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_80, carryQ.get_carry_in(301), r10000_10ffff_tmp349));
            sequence_f0_aa_80_byte_range_80_96 = simd_and(r10000_10ffff_tmp349, byte_range_80_96);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_aa_80_byte_range_80_96);
            sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
            carryQ.cq[302] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(302), sequence_f0_ab_adv));
            sequence_f0_ab_80 = simd_and(sequence_f0_ab_adv, byte_80);
            carryQ.cq[303] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_80, carryQ.get_carry_in(303), r10000_10ffff_tmp350));
            sequence_f0_ab_80_byte_range_80_b4 = simd_and(r10000_10ffff_tmp350, byte_range_80_b4);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_ab_80_byte_range_80_b4);
            byte_af = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp27);
            sequence_f0_af = simd_and(byte_f0_adv, byte_af);
            carryQ.cq[304] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(304), sequence_f0_af_adv));
            sequence_f0_af_a0 = simd_and(sequence_f0_af_adv, byte_a0);
            carryQ.cq[305] = carryout2carry(pablo_blk_Advance(sequence_f0_af_a0, carryQ.get_carry_in(305), r10000_10ffff_tmp351));
            sequence_f0_af_a0_byte_range_80_9d = simd_and(r10000_10ffff_tmp351, byte_range_80_9d);
            struct_alpha_Y.cc = simd_or(struct_alpha_Y.cc, sequence_f0_af_a0_byte_range_80_9d);
          }
          else {
            carryQ.CarryDequeueEnqueue(193, 113);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 306);
        }
        carryQ.CarryQ_Adjust(306);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<306, 0> carryQ;
  };

  struct Property_ids_Y {
  Property_ids_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_ids_Y & struct_ids_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9;
		BitBlock cc_range_41_61_1, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, byte_c2, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13, r80_7ff_tmp14;
		BitBlock r80_7ff_tmp15, r80_7ff_tmp16, r80_7ff_tmp17, r80_7ff_tmp18;
		BitBlock cc_range_aa_ba_2, byte_c2_adv, r80_7ff_tmp19, r80_7ff_tmp20, byte_c3;
		BitBlock r80_7ff_tmp21, r80_7ff_tmp22, r80_7ff_tmp23, r80_7ff_tmp24;
		BitBlock r80_7ff_tmp25, r80_7ff_tmp26, r80_7ff_tmp27, r80_7ff_tmp28;
		BitBlock r80_7ff_tmp29, r80_7ff_tmp30, r80_7ff_tmp31, cc_range_c0_f8_2;
		BitBlock byte_c3_adv, r80_7ff_tmp32, byte_range_c4_cf, r100_3ff_tmp1;
		BitBlock byte_range_c4_cb, r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3;
		BitBlock byte_range_c4_c8, r100_2ff_tmp4, byte_c9, byte_range_80_8f;
		BitBlock r100_2ff_tmp5, r100_2ff_tmp6, r100_2ff_tmp7, r100_24f_tmp1;
		BitBlock byte_range_c4_c5, byte_range_80_bf, r100_17f_tmp1;
		BitBlock byte_range_c4_c5_sfx, r100_24f_tmp2, r100_24f_tmp3, byte_range_c6_c8;
		BitBlock r100_24f_tmp4, r180_24f_tmp1, byte_range_c6_c8_sfx;
		BitBlock byte_c9_byte_range_80_8f, byte_range_90_bf, r100_2ff_tmp8, byte_ca;
		BitBlock byte_range_80_af, r100_2ff_tmp9, r100_2ff_tmp10, r100_2ff_tmp11;
		BitBlock byte_c9_adv, r250_2af_tmp1, byte_ca_adv, r250_2af_tmp2;
		BitBlock byte_range_b0_bf, r100_2ff_tmp12, r100_2ff_tmp13, byte_cb;
		BitBlock r100_2ff_tmp14, r2b0_2ff_tmp1, r2b0_2ff_tmp2, r2b0_2ff_tmp3;
		BitBlock r2b0_2ff_tmp4, r2b0_2ff_tmp5, r2b0_2ff_tmp6, r2b0_2ff_tmp7;
		BitBlock r2b0_2ff_tmp8, r2b0_2ff_tmp9, r2b0_2ff_tmp10, r2b0_2ff_tmp11;
		BitBlock r2b0_2ff_tmp12, r2b0_2ff_tmp13, r2b0_2ff_tmp14, r2b0_2ff_tmp15;
		BitBlock r2b0_2ff_tmp16, r2b0_2ff_tmp17, r2b0_2ff_tmp18, r2b0_2ff_tmp19;
		BitBlock cc_range_2c0_2ee_2, byte_cb_adv, r2b0_2ff_tmp20, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, byte_cd, r100_3ff_tmp4, r100_3ff_tmp5, r100_3ff_tmp6;
		BitBlock byte_range_ce_cf, r100_3ff_tmp7, r370_3ff_tmp1, r370_3ff_tmp2;
		BitBlock r370_3ff_tmp3, r370_3ff_tmp4, r370_3ff_tmp5, r370_3ff_tmp6;
		BitBlock r370_3ff_tmp7, r370_3ff_tmp8, r370_3ff_tmp9, r370_3ff_tmp10;
		BitBlock r370_3ff_tmp11, r370_3ff_tmp12, cc_range_370_37f_2, byte_cd_adv;
		BitBlock r370_3ff_tmp13, r370_3ff_tmp14, byte_ce, r370_3ff_tmp15;
		BitBlock r370_3ff_tmp16, r370_3ff_tmp17, r370_3ff_tmp18, r370_3ff_tmp19;
		BitBlock r370_3ff_tmp20, r370_3ff_tmp21, r370_3ff_tmp22, r370_3ff_tmp23;
		BitBlock r370_3ff_tmp24, r370_3ff_tmp25, r370_3ff_tmp26, r370_3ff_tmp27;
		BitBlock r370_3ff_tmp28, r370_3ff_tmp29, r370_3ff_tmp30, r370_3ff_tmp31;
		BitBlock r370_3ff_tmp32, r370_3ff_tmp33, r370_3ff_tmp34, cc_range_386_3a3_2;
		BitBlock byte_ce_adv, r370_3ff_tmp35, byte_cf, r370_3ff_tmp36, r370_3ff_tmp37;
		BitBlock r370_3ff_tmp38, r370_3ff_tmp39, r370_3ff_tmp40, r370_3ff_tmp41;
		BitBlock cc_range_3c0_3f7_2, byte_cf_adv, r370_3ff_tmp42, r80_7ff_tmp33;
		BitBlock r80_7ff_tmp34, byte_range_d0_d7, byte_range_d0_d3, r400_4ff_tmp1;
		BitBlock byte_range_d0_d1, r400_4ff_tmp2, byte_range_d0_d1_sfx, byte_d2;
		BitBlock r400_4ff_tmp3, byte_range_80_81, r400_4ff_tmp4;
		BitBlock byte_d2_byte_range_80_81, byte_d3, r400_4ff_tmp5;
		BitBlock byte_d3_byte_range_80_bf, r400_5ff_tmp1, byte_range_d4_d5;
		BitBlock r400_5ff_tmp2, byte_d6, r400_5ff_tmp3, r400_5ff_tmp4, r400_5ff_tmp5;
		BitBlock r500_58f_tmp1, byte_d4, r500_58f_tmp2, r500_58f_tmp3, byte_d4_adv;
		BitBlock r500_52f_tmp1, r500_58f_tmp4, byte_d5, r500_58f_tmp5, r500_58f_tmp6;
		BitBlock r530_58f_tmp1, r530_58f_tmp2, byte_range_b1_bf, r530_58f_tmp3;
		BitBlock r530_58f_tmp4, r530_58f_tmp5, r530_58f_tmp6, r530_58f_tmp7;
		BitBlock r530_58f_tmp8, r530_58f_tmp9, r530_58f_tmp10, cc_range_540_561_2;
		BitBlock byte_d5_adv, r530_58f_tmp11, byte_range_80_87, byte_d6_adv;
		BitBlock r530_58f_tmp12, r400_5ff_tmp6, r400_5ff_tmp7, byte_d7, r400_5ff_tmp8;
		BitBlock r590_5ff_tmp1, r590_5ff_tmp2, r590_5ff_tmp3, r590_5ff_tmp4;
		BitBlock r590_5ff_tmp5, r590_5ff_tmp6, cc_range_5d0_5f0_2, byte_d7_adv;
		BitBlock r590_5ff_tmp7, byte_range_d8_db, r600_6ff_tmp1, byte_d8;
		BitBlock byte_range_a0_bf, byte_d8_adv, r600_6ff_tmp2, r600_6ff_tmp3, byte_d9;
		BitBlock r600_6ff_tmp4, r600_6ff_tmp5, r600_6ff_tmp6, r600_6ff_tmp7;
		BitBlock r600_6ff_tmp8, r600_6ff_tmp9, r600_6ff_tmp10, r600_6ff_tmp11;
		BitBlock r600_6ff_tmp12, cc_range_640_671_2, byte_d9_adv, r600_6ff_tmp13;
		BitBlock byte_da, byte_da_adv, r600_6ff_tmp14, r600_6ff_tmp15, byte_db;
		BitBlock r600_6ff_tmp16, r600_6ff_tmp17, r600_6ff_tmp18, r600_6ff_tmp19;
		BitBlock r600_6ff_tmp20, r600_6ff_tmp21, r600_6ff_tmp22, r600_6ff_tmp23;
		BitBlock r600_6ff_tmp24, r600_6ff_tmp25, r600_6ff_tmp26, r600_6ff_tmp27;
		BitBlock r600_6ff_tmp28, r600_6ff_tmp29, r600_6ff_tmp30, r600_6ff_tmp31;
		BitBlock r600_6ff_tmp32, r600_6ff_tmp33, r600_6ff_tmp34, r600_6ff_tmp35;
		BitBlock r600_6ff_tmp36, cc_range_6c0_6ff_2, byte_db_adv, r600_6ff_tmp37;
		BitBlock r80_7ff_tmp35, r80_7ff_tmp36, byte_range_dc_dd, r700_77f_tmp1;
		BitBlock byte_dc, r700_77f_tmp2, byte_dd, r700_77f_tmp3, r700_77f_tmp4;
		BitBlock r700_77f_tmp5, r700_74f_tmp1, r700_74f_tmp2, r700_74f_tmp3;
		BitBlock r700_74f_tmp4, r700_74f_tmp5, r700_74f_tmp6, r700_74f_tmp7;
		BitBlock cc_range_710_712_2, byte_dc_adv, r700_74f_tmp8, r700_74f_tmp9;
		BitBlock byte_range_8d_8f, byte_dd_adv, r700_74f_tmp10, r700_77f_tmp6;
		BitBlock r750_77f_tmp1, r80_7ff_tmp37, byte_range_de_df, r780_7ff_tmp1;
		BitBlock byte_de, r780_7bf_tmp1, r780_7bf_tmp2, r780_7bf_tmp3, r780_7bf_tmp4;
		BitBlock r780_7bf_tmp5, r780_7bf_tmp6, r780_7bf_tmp7, cc_range_780_7b1_2;
		BitBlock byte_de_adv, r780_7bf_tmp8, r780_7ff_tmp2, byte_df, r7c0_7ff_tmp1;
		BitBlock r7c0_7ff_tmp2, r7c0_7ff_tmp3, r7c0_7ff_tmp4, r7c0_7ff_tmp5;
		BitBlock r7c0_7ff_tmp6, r7c0_7ff_tmp7, r7c0_7ff_tmp8, r7c0_7ff_tmp9;
		BitBlock r7c0_7ff_tmp10, cc_range_7ca_7fa_2, byte_df_adv, r7c0_7ff_tmp11;
		BitBlock r80_10ffff_tmp1, byte_range_e0_ef, byte_range_e0_e3, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_e4, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, byte_range_80_b7, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock r800_ffff_tmp8, r800_4dff_tmp1, byte_range_e0_e1, byte_e0;
		BitBlock r800_fff_tmp1, byte_a0, r800_fff_tmp2, sequence_e0_a0, byte_e0_adv;
		BitBlock r800_fff_tmp3, r800_fff_tmp4, r800_fff_tmp5, r800_fff_tmp6;
		BitBlock r800_fff_tmp7, r800_fff_tmp8, r800_fff_tmp9, r800_fff_tmp10;
		BitBlock r800_fff_tmp11, r800_fff_tmp12, r800_fff_tmp13, r800_fff_tmp14;
		BitBlock r800_fff_tmp15, r800_fff_tmp16, r800_fff_tmp17, r800_fff_tmp18;
		BitBlock cc_range_800_828_3, sequence_e0_a0_adv, r800_fff_tmp19;
		BitBlock r800_fff_tmp20, r800_fff_tmp21, byte_a1, sequence_e0_a1;
		BitBlock r800_fff_tmp22, r800_fff_tmp23, r800_fff_tmp24, byte_range_80_98;
		BitBlock sequence_e0_a1_adv, r800_fff_tmp25, r800_fff_tmp26, byte_a2;
		BitBlock sequence_e0_a2, r800_fff_tmp27, r800_fff_tmp28, r800_fff_tmp29;
		BitBlock byte_range_a0_b2, sequence_e0_a2_adv, r800_fff_tmp30, byte_a4;
		BitBlock sequence_e0_a4, r800_fff_tmp31, r800_fff_tmp32, r800_fff_tmp33;
		BitBlock r800_fff_tmp34, r800_fff_tmp35, r800_fff_tmp36, r800_fff_tmp37;
		BitBlock r800_fff_tmp38, r800_fff_tmp39, r800_fff_tmp40, r800_fff_tmp41;
		BitBlock r800_fff_tmp42, cc_range_904_93d_3, sequence_e0_a4_adv;
		BitBlock r800_fff_tmp43, r800_fff_tmp44, byte_a5, sequence_e0_a5;
		BitBlock r800_fff_tmp45, r800_fff_tmp46, r800_fff_tmp47, r800_fff_tmp48;
		BitBlock r800_fff_tmp49, r800_fff_tmp50, r800_fff_tmp51, r800_fff_tmp52;
		BitBlock cc_range_950_971_3, sequence_e0_a5_adv, r800_fff_tmp53;
		BitBlock r800_fff_tmp54, byte_a6, sequence_e0_a6, r800_fff_tmp55;
		BitBlock r800_fff_tmp56, r800_fff_tmp57, r800_fff_tmp58, r800_fff_tmp59;
		BitBlock r800_fff_tmp60, r800_fff_tmp61, r800_fff_tmp62, r800_fff_tmp63;
		BitBlock r800_fff_tmp64, r800_fff_tmp65, r800_fff_tmp66, r800_fff_tmp67;
		BitBlock r800_fff_tmp68, r800_fff_tmp69, r800_fff_tmp70, r800_fff_tmp71;
		BitBlock r800_fff_tmp72, r800_fff_tmp73, r800_fff_tmp74, r800_fff_tmp75;
		BitBlock r800_fff_tmp76, r800_fff_tmp77, r800_fff_tmp78, r800_fff_tmp79;
		BitBlock cc_range_980_9bd_3, sequence_e0_a6_adv, r800_fff_tmp80;
		BitBlock r800_fff_tmp81, byte_a7, sequence_e0_a7, r800_fff_tmp82;
		BitBlock r800_fff_tmp83, r800_fff_tmp84, r800_fff_tmp85, r800_fff_tmp86;
		BitBlock r800_fff_tmp87, r800_fff_tmp88, r800_fff_tmp89, r800_fff_tmp90;
		BitBlock r800_fff_tmp91, cc_range_9ce_9f0_3, sequence_e0_a7_adv;
		BitBlock r800_fff_tmp92, byte_a8, sequence_e0_a8, r800_fff_tmp93;
		BitBlock r800_fff_tmp94, r800_fff_tmp95, r800_fff_tmp96, r800_fff_tmp97;
		BitBlock r800_fff_tmp98, r800_fff_tmp99, r800_fff_tmp100, r800_fff_tmp101;
		BitBlock r800_fff_tmp102, r800_fff_tmp103, r800_fff_tmp104, r800_fff_tmp105;
		BitBlock r800_fff_tmp106, r800_fff_tmp107, cc_range_a05_a38_3;
		BitBlock sequence_e0_a8_adv, r800_fff_tmp108, r800_fff_tmp109, byte_a9;
		BitBlock sequence_e0_a9, r800_fff_tmp110, r800_fff_tmp111, r800_fff_tmp112;
		BitBlock r800_fff_tmp113, r800_fff_tmp114, r800_fff_tmp115, r800_fff_tmp116;
		BitBlock r800_fff_tmp117, r800_fff_tmp118, cc_range_a59_a72_3;
		BitBlock sequence_e0_a9_adv, r800_fff_tmp119, byte_aa, sequence_e0_aa;
		BitBlock r800_fff_tmp120, r800_fff_tmp121, r800_fff_tmp122, r800_fff_tmp123;
		BitBlock r800_fff_tmp124, r800_fff_tmp125, r800_fff_tmp126, r800_fff_tmp127;
		BitBlock r800_fff_tmp128, r800_fff_tmp129, r800_fff_tmp130, r800_fff_tmp131;
		BitBlock r800_fff_tmp132, cc_range_a85_abd_3, sequence_e0_aa_adv;
		BitBlock r800_fff_tmp133, r800_fff_tmp134, byte_ab, sequence_e0_ab;
		BitBlock r800_fff_tmp135, cc_range_ad0_ae0_3, sequence_e0_ab_adv;
		BitBlock r800_fff_tmp136, r800_fff_tmp137, byte_ac, sequence_e0_ac;
		BitBlock r800_fff_tmp138, r800_fff_tmp139, r800_fff_tmp140, r800_fff_tmp141;
		BitBlock r800_fff_tmp142, r800_fff_tmp143, cc_range_b05_b3d_3;
		BitBlock sequence_e0_ac_adv, r800_fff_tmp144, byte_ad, sequence_e0_ad;
		BitBlock r800_fff_tmp145, r800_fff_tmp146, cc_range_b5c_b71_3;
		BitBlock sequence_e0_ad_adv, r800_fff_tmp147, byte_ae, sequence_e0_ae;
		BitBlock r800_fff_tmp148, r800_fff_tmp149, r800_fff_tmp150, r800_fff_tmp151;
		BitBlock r800_fff_tmp152, r800_fff_tmp153, r800_fff_tmp154, r800_fff_tmp155;
		BitBlock r800_fff_tmp156, r800_fff_tmp157, r800_fff_tmp158, r800_fff_tmp159;
		BitBlock r800_fff_tmp160, r800_fff_tmp161, r800_fff_tmp162, r800_fff_tmp163;
		BitBlock r800_fff_tmp164, r800_fff_tmp165, r800_fff_tmp166, r800_fff_tmp167;
		BitBlock r800_fff_tmp168, r800_fff_tmp169, r800_fff_tmp170, r800_fff_tmp171;
		BitBlock r800_fff_tmp172, r800_fff_tmp173, r800_fff_tmp174, r800_fff_tmp175;
		BitBlock cc_range_b83_bae_3, sequence_e0_ae_adv, r800_fff_tmp176, byte_af;
		BitBlock sequence_e0_af, byte_90, sequence_e0_af_adv, r800_fff_tmp177, byte_b0;
		BitBlock sequence_e0_b0, r800_fff_tmp178, r800_fff_tmp179, r800_fff_tmp180;
		BitBlock r800_fff_tmp181, r800_fff_tmp182, r800_fff_tmp183, r800_fff_tmp184;
		BitBlock r800_fff_tmp185, cc_range_c05_c3d_3, sequence_e0_b0_adv;
		BitBlock r800_fff_tmp186, byte_b1, sequence_e0_b1, r800_fff_tmp187;
		BitBlock cc_range_c58_c60_3, sequence_e0_b1_adv, r800_fff_tmp188, byte_b2;
		BitBlock sequence_e0_b2, r800_fff_tmp189, r800_fff_tmp190, r800_fff_tmp191;
		BitBlock r800_fff_tmp192, r800_fff_tmp193, cc_range_c85_cbd_3;
		BitBlock sequence_e0_b2_adv, r800_fff_tmp194, byte_b3, sequence_e0_b3;
		BitBlock r800_fff_tmp195, r800_fff_tmp196, r800_fff_tmp197, cc_range_cde_cf1_3;
		BitBlock sequence_e0_b3_adv, r800_fff_tmp198, byte_b4, sequence_e0_b4;
		BitBlock r800_fff_tmp199, r800_fff_tmp200, r800_fff_tmp201, r800_fff_tmp202;
		BitBlock r800_fff_tmp203, cc_range_d05_d3d_3, sequence_e0_b4_adv;
		BitBlock r800_fff_tmp204, byte_b5, sequence_e0_b5, r800_fff_tmp205;
		BitBlock r800_fff_tmp206, r800_fff_tmp207, cc_range_d4e_d7a_3;
		BitBlock sequence_e0_b5_adv, r800_fff_tmp208, byte_b6, sequence_e0_b6;
		BitBlock r800_fff_tmp209, r800_fff_tmp210, r800_fff_tmp211, r800_fff_tmp212;
		BitBlock r800_fff_tmp213, r800_fff_tmp214, r800_fff_tmp215, r800_fff_tmp216;
		BitBlock r800_fff_tmp217, r800_fff_tmp218, r800_fff_tmp219, r800_fff_tmp220;
		BitBlock r800_fff_tmp221, r800_fff_tmp222, cc_range_d85_dbd_3;
		BitBlock sequence_e0_b6_adv, r800_fff_tmp223, byte_b7, sequence_e0_b7;
		BitBlock r800_fff_tmp224, byte_range_80_86, sequence_e0_b7_adv;
		BitBlock r800_fff_tmp225, byte_b8, sequence_e0_b8, r800_fff_tmp226;
		BitBlock r800_fff_tmp227, r800_fff_tmp228, r800_fff_tmp229, r800_fff_tmp230;
		BitBlock cc_range_e01_e32_3, sequence_e0_b8_adv, r800_fff_tmp231, byte_b9;
		BitBlock sequence_e0_b9, sequence_e0_b9_adv, r800_fff_tmp232, byte_ba;
		BitBlock sequence_e0_ba, r800_fff_tmp233, r800_fff_tmp234, r800_fff_tmp235;
		BitBlock r800_fff_tmp236, r800_fff_tmp237, r800_fff_tmp238, r800_fff_tmp239;
		BitBlock r800_fff_tmp240, r800_fff_tmp241, r800_fff_tmp242, r800_fff_tmp243;
		BitBlock r800_fff_tmp244, r800_fff_tmp245, r800_fff_tmp246, r800_fff_tmp247;
		BitBlock r800_fff_tmp248, r800_fff_tmp249, r800_fff_tmp250, r800_fff_tmp251;
		BitBlock r800_fff_tmp252, r800_fff_tmp253, r800_fff_tmp254, r800_fff_tmp255;
		BitBlock r800_fff_tmp256, r800_fff_tmp257, r800_fff_tmp258, r800_fff_tmp259;
		BitBlock r800_fff_tmp260, r800_fff_tmp261, cc_range_e81_ebd_3;
		BitBlock sequence_e0_ba_adv, r800_fff_tmp262, byte_bb, sequence_e0_bb;
		BitBlock r800_fff_tmp263, r800_fff_tmp264, r800_fff_tmp265, r800_fff_tmp266;
		BitBlock cc_range_ec0_edc_3, sequence_e0_bb_adv, r800_fff_tmp267, byte_bc;
		BitBlock sequence_e0_bc, byte_80, sequence_e0_bc_adv, r800_fff_tmp268, byte_bd;
		BitBlock sequence_e0_bd, r800_fff_tmp269, r800_fff_tmp270, r800_fff_tmp271;
		BitBlock r800_fff_tmp272, cc_range_f40_f49_3, sequence_e0_bd_adv;
		BitBlock r800_fff_tmp273, byte_be, sequence_e0_be, r800_fff_tmp274;
		BitBlock byte_range_88_8c, sequence_e0_be_adv, r800_fff_tmp275, r800_1fff_tmp1;
		BitBlock r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2;
		BitBlock r1000_1fff_tmp3, sequence_e1_80, byte_e1_adv, r1000_1fff_tmp4;
		BitBlock r1000_1fff_tmp5, r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, r1000_1fff_tmp11;
		BitBlock cc_range_1000_103f_3, sequence_e1_80_adv, r1000_1fff_tmp12, byte_81;
		BitBlock sequence_e1_81, r1000_1fff_tmp13, r1000_1fff_tmp14, r1000_1fff_tmp15;
		BitBlock r1000_1fff_tmp16, r1000_1fff_tmp17, r1000_1fff_tmp18;
		BitBlock r1000_1fff_tmp19, r1000_1fff_tmp20, r1000_1fff_tmp21;
		BitBlock r1000_1fff_tmp22, r1000_1fff_tmp23, r1000_1fff_tmp24;
		BitBlock r1000_1fff_tmp25, r1000_1fff_tmp26, r1000_1fff_tmp27;
		BitBlock r1000_1fff_tmp28, r1000_1fff_tmp29, r1000_1fff_tmp30;
		BitBlock r1000_1fff_tmp31, r1000_1fff_tmp32, r1000_1fff_tmp33;
		BitBlock r1000_1fff_tmp34, r1000_1fff_tmp35, r1000_1fff_tmp36;
		BitBlock r1000_1fff_tmp37, cc_range_1050_1075_3, sequence_e1_81_adv;
		BitBlock r1000_1fff_tmp38, r1000_1fff_tmp39, r1000_1fff_tmp40, byte_82;
		BitBlock sequence_e1_82, r1000_1fff_tmp41, r1000_1fff_tmp42, r1000_1fff_tmp43;
		BitBlock cc_range_1080_10a0_3, sequence_e1_82_adv, r1000_1fff_tmp44;
		BitBlock r1000_1fff_tmp45, byte_83, sequence_e1_83, r1000_1fff_tmp46;
		BitBlock r1000_1fff_tmp47, r1000_1fff_tmp48, r1000_1fff_tmp49;
		BitBlock r1000_1fff_tmp50, r1000_1fff_tmp51, r1000_1fff_tmp52;
		BitBlock r1000_1fff_tmp53, r1000_1fff_tmp54, r1000_1fff_tmp55;
		BitBlock r1000_1fff_tmp56, r1000_1fff_tmp57, r1000_1fff_tmp58;
		BitBlock r1000_1fff_tmp59, cc_range_10c0_10fc_3, sequence_e1_83_adv;
		BitBlock r1000_1fff_tmp60, r1000_1fff_tmp61, r1000_1fff_tmp62;
		BitBlock r1000_1fff_tmp63, byte_range_84_88, byte_e1_byte_range_84_88;
		BitBlock r1000_1fff_tmp64, byte_e1_byte_range_84_88_sfx, r1000_1fff_tmp65;
		BitBlock r1000_1fff_tmp66, r1000_1fff_tmp67, byte_89, sequence_e1_89;
		BitBlock r1000_1fff_tmp68, byte_range_80_88, r1000_1fff_tmp69;
		BitBlock sequence_e1_89_byte_range_80_88, r1000_1fff_tmp70, byte_8a;
		BitBlock sequence_e1_8a, r1000_1fff_tmp71, sequence_e1_8a_byte_range_80_88;
		BitBlock r1000_1fff_tmp72, byte_8b, sequence_e1_8b, r1000_1fff_tmp73;
		BitBlock sequence_e1_8b_80, r1000_1fff_tmp74, byte_8c, sequence_e1_8c;
		BitBlock r1000_1fff_tmp75, r1000_1fff_tmp76, byte_range_80_90;
		BitBlock r1000_1fff_tmp77, sequence_e1_8c_byte_range_80_90, byte_8d;
		BitBlock sequence_e1_8d, byte_range_80_9a, r1000_1fff_tmp78;
		BitBlock sequence_e1_8d_byte_range_80_9a, byte_8e, sequence_e1_8e;
		BitBlock r1000_1fff_tmp79, sequence_e1_8e_byte_range_80_8f, byte_8f;
		BitBlock sequence_e1_8f, r1000_1fff_tmp80, r1000_1fff_tmp81, byte_range_80_b4;
		BitBlock r1000_1fff_tmp82, sequence_e1_8f_byte_range_80_b4, r1000_1fff_tmp83;
		BitBlock sequence_e1_90, r1000_1fff_tmp84, r1000_1fff_tmp85, byte_range_81_bf;
		BitBlock r1000_1fff_tmp86, sequence_e1_90_byte_range_81_bf, byte_91;
		BitBlock sequence_e1_91, r1000_1fff_tmp87, sequence_e1_91_byte_range_80_bf;
		BitBlock byte_99, sequence_e1_99, r1000_1fff_tmp88, r1000_1fff_tmp89;
		BitBlock r1000_1fff_tmp90, byte_range_80_ac, r1000_1fff_tmp91;
		BitBlock sequence_e1_99_byte_range_80_ac, byte_9a, sequence_e1_9a;
		BitBlock byte_range_81_9a, r1000_1fff_tmp92, sequence_e1_9a_byte_range_81_9a;
		BitBlock byte_9b, sequence_e1_9b, byte_range_80_aa, r1000_1fff_tmp93;
		BitBlock sequence_e1_9b_byte_range_80_aa, byte_9c, sequence_e1_9c;
		BitBlock r1000_1fff_tmp94, byte_range_80_8c, r1000_1fff_tmp95;
		BitBlock sequence_e1_9c_byte_range_80_8c, byte_9d, sequence_e1_9d;
		BitBlock r1000_1fff_tmp96, byte_range_80_91, r1000_1fff_tmp97;
		BitBlock sequence_e1_9d_byte_range_80_91, byte_9e, sequence_e1_9e;
		BitBlock r1000_1fff_tmp98, r1000_1fff_tmp99, byte_range_80_b3;
		BitBlock r1000_1fff_tmp100, sequence_e1_9e_byte_range_80_b3, byte_9f;
		BitBlock sequence_e1_9f, byte_97, r1000_1fff_tmp101, sequence_e1_9f_97;
		BitBlock r1000_1fff_tmp102, sequence_e1_a0, r1000_1fff_tmp103;
		BitBlock sequence_e1_a0_byte_range_a0_bf, sequence_e1_a1, r1000_1fff_tmp104;
		BitBlock sequence_e1_a1_byte_range_80_b7, sequence_e1_a2, r1000_1fff_tmp105;
		BitBlock r1000_1fff_tmp106, byte_range_80_a8, r1000_1fff_tmp107;
		BitBlock sequence_e1_a2_byte_range_80_a8, byte_a3, sequence_e1_a3;
		BitBlock r1000_1fff_tmp108, r1000_1fff_tmp109, r1000_1fff_tmp110;
		BitBlock byte_range_80_b5, r1000_1fff_tmp111, sequence_e1_a3_byte_range_80_b5;
		BitBlock sequence_e1_a4, r1000_1fff_tmp112, byte_range_80_9e;
		BitBlock r1000_1fff_tmp113, sequence_e1_a4_byte_range_80_9e, r1000_1fff_tmp114;
		BitBlock sequence_e1_a5, r1000_1fff_tmp115, r1000_1fff_tmp116;
		BitBlock r1000_1fff_tmp117, byte_range_90_ad, r1000_1fff_tmp118;
		BitBlock sequence_e1_a5_byte_range_90_ad, r1000_1fff_tmp119, sequence_e1_a6;
		BitBlock r1000_1fff_tmp120, r1000_1fff_tmp121, byte_range_80_ab;
		BitBlock r1000_1fff_tmp122, sequence_e1_a6_byte_range_80_ab, sequence_e1_a7;
		BitBlock r1000_1fff_tmp123, byte_range_81_87, r1000_1fff_tmp124;
		BitBlock sequence_e1_a7_byte_range_81_87, r1000_1fff_tmp125, sequence_e1_a8;
		BitBlock r1000_1fff_tmp126, r1000_1fff_tmp127, r1000_1fff_tmp128;
		BitBlock byte_range_80_96, r1000_1fff_tmp129, sequence_e1_a8_byte_range_80_96;
		BitBlock sequence_e1_a9, byte_range_80_94, r1000_1fff_tmp130;
		BitBlock sequence_e1_a9_byte_range_80_94, sequence_e1_aa, r1000_1fff_tmp131;
		BitBlock sequence_e1_aa_a7, sequence_e1_ac, r1000_1fff_tmp132;
		BitBlock r1000_1fff_tmp133, r1000_1fff_tmp134, byte_range_85_b3;
		BitBlock r1000_1fff_tmp135, sequence_e1_ac_byte_range_85_b3, sequence_e1_ad;
		BitBlock r1000_1fff_tmp136, r1000_1fff_tmp137, byte_range_85_8b;
		BitBlock r1000_1fff_tmp138, sequence_e1_ad_byte_range_85_8b, sequence_e1_ae;
		BitBlock r1000_1fff_tmp139, r1000_1fff_tmp140, r1000_1fff_tmp141;
		BitBlock r1000_1fff_tmp142, byte_range_83_a0, r1000_1fff_tmp143;
		BitBlock sequence_e1_ae_byte_range_83_a0, sequence_e1_af, r1000_1fff_tmp144;
		BitBlock r1000_1fff_tmp145, byte_range_80_a5, r1000_1fff_tmp146;
		BitBlock sequence_e1_af_byte_range_80_a5, r1000_1fff_tmp147, sequence_e1_b0;
		BitBlock r1000_1fff_tmp148, r1000_1fff_tmp149, byte_range_80_a3;
		BitBlock r1000_1fff_tmp150, sequence_e1_b0_byte_range_80_a3, sequence_e1_b1;
		BitBlock r1000_1fff_tmp151, r1000_1fff_tmp152, sequence_e1_b1_byte_range_8d_8f;
		BitBlock sequence_e1_b3, r1000_1fff_tmp153, r1000_1fff_tmp154;
		BitBlock byte_range_a9_ac, r1000_1fff_tmp155, sequence_e1_b3_byte_range_a9_ac;
		BitBlock sequence_e1_b4, r1000_1fff_tmp156, sequence_e1_b4_byte_range_80_bf;
		BitBlock sequence_e1_b8, r1000_1fff_tmp157, sequence_e1_b8_byte_range_80_bf;
		BitBlock sequence_e1_bc, byte_range_80_95, r1000_1fff_tmp158;
		BitBlock sequence_e1_bc_byte_range_80_95, sequence_e1_bd, byte_range_80_85;
		BitBlock r1000_1fff_tmp159, sequence_e1_bd_byte_range_80_85, sequence_e1_be;
		BitBlock r1000_1fff_tmp160, sequence_e1_be_byte_range_80_b4, byte_bf;
		BitBlock sequence_e1_bf, r1000_1fff_tmp161, r1000_1fff_tmp162;
		BitBlock byte_range_82_84, r1000_1fff_tmp163, sequence_e1_bf_byte_range_82_84;
		BitBlock r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5, sequence_e2_81;
		BitBlock byte_e2_adv, r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8;
		BitBlock r2000_2fff_tmp9, r2000_2fff_tmp10, cc_range_2071_207f_3;
		BitBlock sequence_e2_81_adv, r2000_2fff_tmp11, sequence_e2_82;
		BitBlock r2000_2fff_tmp12, r2000_2fff_tmp13, r2000_2fff_tmp14;
		BitBlock r2000_2fff_tmp15, byte_range_90_9c, sequence_e2_82_adv;
		BitBlock r2000_2fff_tmp16, byte_84, sequence_e2_84, r2000_2fff_tmp17;
		BitBlock r2000_2fff_tmp18, r2000_2fff_tmp19, r2000_2fff_tmp20;
		BitBlock r2000_2fff_tmp21, r2000_2fff_tmp22, r2000_2fff_tmp23;
		BitBlock r2000_2fff_tmp24, r2000_2fff_tmp25, r2000_2fff_tmp26;
		BitBlock r2000_2fff_tmp27, r2000_2fff_tmp28, r2000_2fff_tmp29;
		BitBlock r2000_2fff_tmp30, r2000_2fff_tmp31, r2000_2fff_tmp32;
		BitBlock r2000_2fff_tmp33, r2000_2fff_tmp34, r2000_2fff_tmp35;
		BitBlock r2000_2fff_tmp36, r2000_2fff_tmp37, r2000_2fff_tmp38;
		BitBlock r2000_2fff_tmp39, r2000_2fff_tmp40, r2000_2fff_tmp41;
		BitBlock r2000_2fff_tmp42, r2000_2fff_tmp43, r2000_2fff_tmp44;
		BitBlock r2000_2fff_tmp45, r2000_2fff_tmp46, r2000_2fff_tmp47;
		BitBlock r2000_2fff_tmp48, cc_range_2102_213c_3, sequence_e2_84_adv;
		BitBlock r2000_2fff_tmp49, byte_85, sequence_e2_85, r2000_2fff_tmp50;
		BitBlock r2000_2fff_tmp51, r2000_2fff_tmp52, r2000_2fff_tmp53;
		BitBlock r2000_2fff_tmp54, cc_range_2145_2160_3, sequence_e2_85_adv;
		BitBlock r2000_2fff_tmp55, byte_86, sequence_e2_86, r2000_2fff_tmp56;
		BitBlock r2000_2fff_tmp57, sequence_e2_86_adv, r2000_2fff_tmp58;
		BitBlock sequence_e2_b0, r2000_2fff_tmp59, r2000_2fff_tmp60, r2000_2fff_tmp61;
		BitBlock cc_range_2c00_2c30_3, sequence_e2_b0_adv, r2000_2fff_tmp62;
		BitBlock sequence_e2_b1, r2000_2fff_tmp63, r2000_2fff_tmp64;
		BitBlock cc_range_2c40_2c60_3, sequence_e2_b1_adv, r2000_2fff_tmp65;
		BitBlock sequence_e2_b2, sequence_e2_b2_adv, r2000_2fff_tmp66;
		BitBlock r2000_2fff_tmp67, r2000_2fff_tmp68, sequence_e2_b3, r2000_2fff_tmp69;
		BitBlock r2000_2fff_tmp70, r2000_2fff_tmp71, r2000_2fff_tmp72;
		BitBlock r2000_2fff_tmp73, r2000_2fff_tmp74, r2000_2fff_tmp75;
		BitBlock r2000_2fff_tmp76, r2000_2fff_tmp77, r2000_2fff_tmp78;
		BitBlock cc_range_2cc0_2cf2_3, sequence_e2_b3_adv, r2000_2fff_tmp79;
		BitBlock sequence_e2_b4, r2000_2fff_tmp80, r2000_2fff_tmp81, r2000_2fff_tmp82;
		BitBlock r2000_2fff_tmp83, r2000_2fff_tmp84, r2000_2fff_tmp85;
		BitBlock r2000_2fff_tmp86, r2000_2fff_tmp87, r2000_2fff_tmp88;
		BitBlock cc_range_2d00_2d30_3, sequence_e2_b4_adv, r2000_2fff_tmp89;
		BitBlock sequence_e2_b5, r2000_2fff_tmp90, r2000_2fff_tmp91, r2000_2fff_tmp92;
		BitBlock r2000_2fff_tmp93, cc_range_2d40_2d6f_3, sequence_e2_b5_adv;
		BitBlock r2000_2fff_tmp94, sequence_e2_b6, r2000_2fff_tmp95, r2000_2fff_tmp96;
		BitBlock r2000_2fff_tmp97, r2000_2fff_tmp98, r2000_2fff_tmp99;
		BitBlock r2000_2fff_tmp100, r2000_2fff_tmp101, r2000_2fff_tmp102;
		BitBlock r2000_2fff_tmp103, r2000_2fff_tmp104, r2000_2fff_tmp105;
		BitBlock r2000_2fff_tmp106, r2000_2fff_tmp107, r2000_2fff_tmp108;
		BitBlock r2000_2fff_tmp109, cc_range_2d80_2db8_3, sequence_e2_b6_adv;
		BitBlock r2000_2fff_tmp110, sequence_e2_b7, r2000_2fff_tmp111;
		BitBlock r2000_2fff_tmp112, r2000_2fff_tmp113, r2000_2fff_tmp114;
		BitBlock r2000_2fff_tmp115, r2000_2fff_tmp116, cc_range_2dc0_2dd8_3;
		BitBlock sequence_e2_b7_adv, r2000_2fff_tmp117, r2000_4dff_tmp3, byte_e3;
		BitBlock r2000_4dff_tmp4, r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3;
		BitBlock sequence_e3_80, byte_e3_adv, r3000_4dff_tmp4, r3000_4dff_tmp5;
		BitBlock r3000_4dff_tmp6, r3000_4dff_tmp7, r3000_4dff_tmp8, r3000_4dff_tmp9;
		BitBlock r3000_4dff_tmp10, r3000_4dff_tmp11, r3000_4dff_tmp12;
		BitBlock r3000_4dff_tmp13, r3000_4dff_tmp14, r3000_4dff_tmp15;
		BitBlock r3000_4dff_tmp16, r3000_4dff_tmp17, r3000_4dff_tmp18;
		BitBlock r3000_4dff_tmp19, r3000_4dff_tmp20, r3000_4dff_tmp21;
		BitBlock r3000_4dff_tmp22, cc_range_3005_3038_3, sequence_e3_80_adv;
		BitBlock r3000_4dff_tmp23, r3000_4dff_tmp24, r3000_4dff_tmp25, sequence_e3_81;
		BitBlock r3000_4dff_tmp26, r3000_4dff_tmp27, sequence_e3_81_adv;
		BitBlock r3000_4dff_tmp28, sequence_e3_82, r3000_4dff_tmp29, r3000_4dff_tmp30;
		BitBlock r3000_4dff_tmp31, r3000_4dff_tmp32, r3000_4dff_tmp33;
		BitBlock r3000_4dff_tmp34, r3000_4dff_tmp35, r3000_4dff_tmp36;
		BitBlock r3000_4dff_tmp37, r3000_4dff_tmp38, r3000_4dff_tmp39;
		BitBlock r3000_4dff_tmp40, cc_range_3080_30a1_3, sequence_e3_82_adv;
		BitBlock r3000_4dff_tmp41, sequence_e3_83, r3000_4dff_tmp42, r3000_4dff_tmp43;
		BitBlock r3000_4dff_tmp44, r3000_4dff_tmp45, r3000_4dff_tmp46;
		BitBlock cc_range_30c0_30fc_3, sequence_e3_83_adv, r3000_4dff_tmp47;
		BitBlock sequence_e3_84, r3000_4dff_tmp48, r3000_4dff_tmp49, r3000_4dff_tmp50;
		BitBlock r3000_4dff_tmp51, r3000_4dff_tmp52, r3000_4dff_tmp53;
		BitBlock r3000_4dff_tmp54, r3000_4dff_tmp55, r3000_4dff_tmp56;
		BitBlock cc_range_3105_3131_3, sequence_e3_84_adv, r3000_4dff_tmp57;
		BitBlock r3000_4dff_tmp58, sequence_e3_85, sequence_e3_85_adv;
		BitBlock r3000_4dff_tmp59, r3000_4dff_tmp60, r3000_4dff_tmp61, sequence_e3_86;
		BitBlock r3000_4dff_tmp62, r3000_4dff_tmp63, r3000_4dff_tmp64;
		BitBlock r3000_4dff_tmp65, cc_range_3180_31a0_3, sequence_e3_86_adv;
		BitBlock r3000_4dff_tmp66, r3000_4dff_tmp67, byte_87, sequence_e3_87;
		BitBlock sequence_e3_87_adv, r3000_4dff_tmp68, byte_e3_byte_range_90_bf;
		BitBlock r3000_4dff_tmp69, byte_e3_byte_range_90_bf_sfx, r3000_4dff_tmp70;
		BitBlock r3000_4dff_tmp71, r3000_4dff_tmp72, r3000_4dff_tmp73;
		BitBlock byte_e4_byte_range_80_b5, r3000_4dff_tmp74;
		BitBlock byte_e4_byte_range_80_b5_sfx, byte_e4_adv, sequence_e4_b6;
		BitBlock r3000_4dff_tmp75, sequence_e4_b6_byte_range_80_b5, r800_ffff_tmp9;
		BitBlock r800_ffff_tmp10, byte_range_b8_bf, r800_ffff_tmp11, r800_ffff_tmp12;
		BitBlock r800_ffff_tmp13, r800_ffff_tmp14, r800_ffff_tmp15, byte_range_e5_e9;
		BitBlock r800_ffff_tmp16, byte_e4_byte_range_b8_bf, r4e00_9fff_tmp1;
		BitBlock byte_e4_byte_range_b8_bf_sfx, r4e00_9fff_tmp2, r4e00_9fff_tmp3;
		BitBlock r4e00_9fff_tmp4, byte_range_e5_e8, r4e00_9fff_tmp5;
		BitBlock byte_range_e5_e8_sfx, r4e00_9fff_tmp6, byte_range_e5_e8_sfx_sfx;
		BitBlock r4e00_9fff_tmp7, r4e00_9fff_tmp8, r4e00_9fff_tmp9, byte_e9;
		BitBlock r4e00_9fff_tmp10, r4e00_9fff_tmp11, byte_e9_adv, sequence_e9_80;
		BitBlock r4e00_9fff_tmp12, r4e00_9fff_tmp13, sequence_e9_80_byte_range_80_8c;
		BitBlock r800_ffff_tmp17, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_ea_byte_range_80_91;
		BitBlock ra000_ffff_tmp8, byte_ea_byte_range_80_91_sfx, ra000_ffff_tmp9;
		BitBlock ra000_ffff_tmp10, ra000_ffff_tmp11, byte_92, byte_ea_adv;
		BitBlock sequence_ea_92, ra000_ffff_tmp12, ra000_ffff_tmp13, ra000_ffff_tmp14;
		BitBlock ra000_ffff_tmp15, sequence_ea_92_byte_range_80_8c, ra000_ffff_tmp16;
		BitBlock byte_93, sequence_ea_93, ra000_ffff_tmp17, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, ra000_ffff_tmp20, ra000_ffff_tmp21;
		BitBlock byte_range_90_bd, ra000_ffff_tmp22, sequence_ea_93_byte_range_90_bd;
		BitBlock byte_94, sequence_ea_94, ra000_ffff_tmp23;
		BitBlock sequence_ea_94_byte_range_80_bf, ra000_ffff_tmp24, byte_98;
		BitBlock sequence_ea_98, ra000_ffff_tmp25, sequence_ea_98_byte_range_80_8c;
		BitBlock ra000_ffff_tmp26, ra000_ffff_tmp27, sequence_ea_99, ra000_ffff_tmp28;
		BitBlock ra000_ffff_tmp29, ra000_ffff_tmp30, byte_range_80_ae;
		BitBlock ra000_ffff_tmp31, sequence_ea_99_byte_range_80_ae, sequence_ea_9a;
		BitBlock ra000_ffff_tmp32, byte_range_80_9d, ra000_ffff_tmp33;
		BitBlock sequence_ea_9a_byte_range_80_9d, ra000_ffff_tmp34, sequence_ea_9b;
		BitBlock ra000_ffff_tmp35, sequence_ea_9b_byte_range_80_af, ra000_ffff_tmp36;
		BitBlock sequence_ea_9c, ra000_ffff_tmp37, ra000_ffff_tmp38, byte_range_97_9f;
		BitBlock ra000_ffff_tmp39, sequence_ea_9c_byte_range_97_9f, ra000_ffff_tmp40;
		BitBlock sequence_ea_9d, ra000_ffff_tmp41, sequence_ea_9d_byte_range_80_bf;
		BitBlock ra000_ffff_tmp42, sequence_ea_9e, ra000_ffff_tmp43, ra000_ffff_tmp44;
		BitBlock ra000_ffff_tmp45, sequence_ea_9e_byte_range_80_88, sequence_ea_9f;
		BitBlock ra000_ffff_tmp46, byte_range_b7_bf, ra000_ffff_tmp47;
		BitBlock sequence_ea_9f_byte_range_b7_bf, ra000_ffff_tmp48, sequence_ea_a0;
		BitBlock ra000_ffff_tmp49, sequence_ea_a0_byte_range_80_81, ra000_ffff_tmp50;
		BitBlock sequence_ea_a1, ra000_ffff_tmp51, ra000_ffff_tmp52, ra000_ffff_tmp53;
		BitBlock sequence_ea_a1_byte_range_80_b3, sequence_ea_a2, ra000_ffff_tmp54;
		BitBlock ra000_ffff_tmp55, ra000_ffff_tmp56, byte_range_82_b3;
		BitBlock ra000_ffff_tmp57, sequence_ea_a2_byte_range_82_b3, sequence_ea_a3;
		BitBlock ra000_ffff_tmp58, byte_range_b2_b7, ra000_ffff_tmp59;
		BitBlock sequence_ea_a3_byte_range_b2_b7, sequence_ea_a4, ra000_ffff_tmp60;
		BitBlock ra000_ffff_tmp61, ra000_ffff_tmp62, ra000_ffff_tmp63;
		BitBlock ra000_ffff_tmp64, ra000_ffff_tmp65, ra000_ffff_tmp66;
		BitBlock byte_range_8a_a5, ra000_ffff_tmp67, sequence_ea_a4_byte_range_8a_a5;
		BitBlock ra000_ffff_tmp68, sequence_ea_a5, ra000_ffff_tmp69, ra000_ffff_tmp70;
		BitBlock sequence_ea_a5_byte_range_80_86, ra000_ffff_tmp71, sequence_ea_a6;
		BitBlock ra000_ffff_tmp72, ra000_ffff_tmp73, ra000_ffff_tmp74;
		BitBlock ra000_ffff_tmp75, ra000_ffff_tmp76, byte_range_84_b2;
		BitBlock ra000_ffff_tmp77, sequence_ea_a6_byte_range_84_b2, ra000_ffff_tmp78;
		BitBlock sequence_ea_a7, ra000_ffff_tmp79, sequence_ea_a7_8f, sequence_ea_a8;
		BitBlock ra000_ffff_tmp80, ra000_ffff_tmp81, ra000_ffff_tmp82;
		BitBlock sequence_ea_a8_byte_range_80_a8, sequence_ea_a9, ra000_ffff_tmp83;
		BitBlock byte_range_80_82, ra000_ffff_tmp84, sequence_ea_a9_byte_range_80_82;
		BitBlock sequence_ea_aa, ra000_ffff_tmp85, sequence_ea_aa_byte_range_80_af;
		BitBlock sequence_ea_ab, ra000_ffff_tmp86, sequence_ea_ab_80, sequence_ea_ac;
		BitBlock ra000_ffff_tmp87, ra000_ffff_tmp88, byte_range_81_86;
		BitBlock ra000_ffff_tmp89, sequence_ea_ac_byte_range_81_86, sequence_ea_ad;
		BitBlock ra000_ffff_tmp90, ra000_ffff_tmp91, sequence_ea_ad_byte_range_80_9a;
		BitBlock sequence_ea_af, ra000_ffff_tmp92, ra000_ffff_tmp93, byte_range_80_a2;
		BitBlock ra000_ffff_tmp94, sequence_ea_af_byte_range_80_a2, sequence_ea_b0;
		BitBlock ra000_ffff_tmp95, sequence_ea_b0_byte_range_80_bf, ra000_ffff_tmp96;
		BitBlock ra000_ffff_tmp97, byte_range_eb_ec, ra000_ffff_tmp98;
		BitBlock byte_range_eb_ec_sfx, ra000_ffff_tmp99, byte_range_eb_ec_sfx_sfx;
		BitBlock byte_ed, byte_ed_adv, sequence_ed_80, ra000_ffff_tmp100;
		BitBlock ra000_ffff_tmp101, sequence_ed_80_byte_range_80_a3, byte_ef;
		BitBlock ra000_ffff_tmp102, ra000_ffff_tmp103, byte_range_a4_a8;
		BitBlock ra000_ffff_tmp104, byte_ef_byte_range_a4_a8, ra000_ffff_tmp105;
		BitBlock byte_ef_byte_range_a4_a8_sfx, byte_ef_adv, sequence_ef_a9;
		BitBlock ra000_ffff_tmp106, ra000_ffff_tmp107, byte_range_80_ad;
		BitBlock ra000_ffff_tmp108, sequence_ef_a9_byte_range_80_ad, sequence_ef_aa;
		BitBlock ra000_ffff_tmp109, sequence_ef_aa_byte_range_80_bf, sequence_ef_ab;
		BitBlock ra000_ffff_tmp110, byte_range_80_99, ra000_ffff_tmp111;
		BitBlock sequence_ef_ab_byte_range_80_99, sequence_ef_ac, ra000_ffff_tmp112;
		BitBlock sequence_ef_ac_byte_range_80_86, sequence_ef_ad, ra000_ffff_tmp113;
		BitBlock sequence_ef_ad_byte_range_80_81, sequence_ef_ae, ra000_ffff_tmp114;
		BitBlock byte_range_80_b1, ra000_ffff_tmp115, sequence_ef_ae_byte_range_80_b1;
		BitBlock sequence_ef_af, ra000_ffff_tmp116, byte_range_93_bf;
		BitBlock ra000_ffff_tmp117, sequence_ef_af_byte_range_93_bf, sequence_ef_b0;
		BitBlock ra000_ffff_tmp118, sequence_ef_b0_byte_range_80_bf, sequence_ef_b4;
		BitBlock ra000_ffff_tmp119, byte_range_80_bd, ra000_ffff_tmp120;
		BitBlock sequence_ef_b4_byte_range_80_bd, sequence_ef_b5, ra000_ffff_tmp121;
		BitBlock sequence_ef_b5_byte_range_90_bf, sequence_ef_b6, ra000_ffff_tmp122;
		BitBlock sequence_ef_b6_byte_range_80_8f, sequence_ef_b7, ra000_ffff_tmp123;
		BitBlock sequence_ef_b7_byte_range_80_87, sequence_ef_b9, byte_range_b0_b4;
		BitBlock ra000_ffff_tmp124, sequence_ef_b9_byte_range_b0_b4, sequence_ef_ba;
		BitBlock ra000_ffff_tmp125, sequence_ef_ba_byte_range_80_bf, sequence_ef_bb;
		BitBlock ra000_ffff_tmp126, ra000_ffff_tmp127, ra000_ffff_tmp128;
		BitBlock byte_range_80_bc, ra000_ffff_tmp129, sequence_ef_bb_byte_range_80_bc;
		BitBlock sequence_ef_bc, ra000_ffff_tmp130, byte_range_a1_ba;
		BitBlock ra000_ffff_tmp131, sequence_ef_bc_byte_range_a1_ba, sequence_ef_bd;
		BitBlock ra000_ffff_tmp132, sequence_ef_bd_byte_range_81_9a, sequence_ef_be;
		BitBlock ra000_ffff_tmp133, ra000_ffff_tmp134, byte_range_80_be;
		BitBlock ra000_ffff_tmp135, sequence_ef_be_byte_range_80_be, sequence_ef_bf;
		BitBlock byte_range_82_87, ra000_ffff_tmp136, sequence_ef_bf_byte_range_82_87;
		BitBlock r80_10ffff_tmp2, byte_range_f0_ff, byte_f0, r10000_10ffff_tmp1;
		BitBlock r10000_10ffff_tmp2, r10000_10ffff_tmp3, r10000_10ffff_tmp4;
		BitBlock sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp5, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, sequence_f0_90_80, sequence_f0_90_adv;
		BitBlock r10000_10ffff_tmp8, r10000_10ffff_tmp9, r10000_10ffff_tmp10;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock r10000_10ffff_tmp20, r10000_10ffff_tmp21, r10000_10ffff_tmp22;
		BitBlock r10000_10ffff_tmp23, r10000_10ffff_tmp24, r10000_10ffff_tmp25;
		BitBlock r10000_10ffff_tmp26, r10000_10ffff_tmp27, r10000_10ffff_tmp28;
		BitBlock cc_range_10000_1003f_4, sequence_f0_90_80_adv, r10000_10ffff_tmp29;
		BitBlock r10000_10ffff_tmp30, r10000_10ffff_tmp31, sequence_f0_90_81;
		BitBlock r10000_10ffff_tmp32, r10000_10ffff_tmp33, r10000_10ffff_tmp34;
		BitBlock r10000_10ffff_tmp35, cc_range_10040_10050_4, sequence_f0_90_81_adv;
		BitBlock r10000_10ffff_tmp36, r10000_10ffff_tmp37, r10000_10ffff_tmp38;
		BitBlock sequence_f0_90_82, sequence_f0_90_82_adv, r10000_10ffff_tmp39;
		BitBlock r10000_10ffff_tmp40, r10000_10ffff_tmp41, r10000_10ffff_tmp42;
		BitBlock sequence_f0_90_83, r10000_10ffff_tmp43, r10000_10ffff_tmp44;
		BitBlock byte_range_80_ba, sequence_f0_90_83_adv, r10000_10ffff_tmp45;
		BitBlock r10000_10ffff_tmp46, r10000_10ffff_tmp47, sequence_f0_90_85;
		BitBlock r10000_10ffff_tmp48, r10000_10ffff_tmp49, r10000_10ffff_tmp50;
		BitBlock r10000_10ffff_tmp51, sequence_f0_90_85_adv, r10000_10ffff_tmp52;
		BitBlock r10000_10ffff_tmp53, r10000_10ffff_tmp54, sequence_f0_90_8a;
		BitBlock r10000_10ffff_tmp55, r10000_10ffff_tmp56, r10000_10ffff_tmp57;
		BitBlock r10000_10ffff_tmp58, cc_range_10280_102a0_4, sequence_f0_90_8a_adv;
		BitBlock r10000_10ffff_tmp59, r10000_10ffff_tmp60, sequence_f0_90_8b;
		BitBlock r10000_10ffff_tmp61, sequence_f0_90_8b_adv, r10000_10ffff_tmp62;
		BitBlock r10000_10ffff_tmp63, sequence_f0_90_8c, r10000_10ffff_tmp64;
		BitBlock cc_range_10300_10330_4, sequence_f0_90_8c_adv, r10000_10ffff_tmp65;
		BitBlock r10000_10ffff_tmp66, sequence_f0_90_8d, r10000_10ffff_tmp67;
		BitBlock r10000_10ffff_tmp68, r10000_10ffff_tmp69, r10000_10ffff_tmp70;
		BitBlock r10000_10ffff_tmp71, r10000_10ffff_tmp72, cc_range_10340_10350_4;
		BitBlock sequence_f0_90_8d_adv, r10000_10ffff_tmp73, r10000_10ffff_tmp74;
		BitBlock sequence_f0_90_8e, r10000_10ffff_tmp75, r10000_10ffff_tmp76;
		BitBlock r10000_10ffff_tmp77, cc_range_10380_103a0_4, sequence_f0_90_8e_adv;
		BitBlock r10000_10ffff_tmp78, sequence_f0_90_8f, r10000_10ffff_tmp79;
		BitBlock r10000_10ffff_tmp80, r10000_10ffff_tmp81, r10000_10ffff_tmp82;
		BitBlock r10000_10ffff_tmp83, r10000_10ffff_tmp84, cc_range_103c0_103d1_4;
		BitBlock sequence_f0_90_8f_adv, r10000_10ffff_tmp85, r10000_10ffff_tmp86;
		BitBlock byte_range_90_91, sequence_f0_90_byte_range_90_91;
		BitBlock r10000_10ffff_tmp87, sequence_f0_90_byte_range_90_91_sfx;
		BitBlock sequence_f0_90_92, r10000_10ffff_tmp88;
		BitBlock sequence_f0_90_92_byte_range_80_9d, r10000_10ffff_tmp89;
		BitBlock sequence_f0_90_94, r10000_10ffff_tmp90, r10000_10ffff_tmp91;
		BitBlock byte_range_80_a7, r10000_10ffff_tmp92;
		BitBlock sequence_f0_90_94_byte_range_80_a7, byte_95, sequence_f0_90_95;
		BitBlock r10000_10ffff_tmp93, r10000_10ffff_tmp94, r10000_10ffff_tmp95;
		BitBlock sequence_f0_90_95_byte_range_80_a3, r10000_10ffff_tmp96;
		BitBlock sequence_f0_90_98, r10000_10ffff_tmp97;
		BitBlock sequence_f0_90_98_byte_range_80_bf, sequence_f0_90_9c;
		BitBlock r10000_10ffff_tmp98, r10000_10ffff_tmp99, byte_range_80_b6;
		BitBlock r10000_10ffff_tmp100, sequence_f0_90_9c_byte_range_80_b6;
		BitBlock sequence_f0_90_9d, r10000_10ffff_tmp101;
		BitBlock sequence_f0_90_9d_byte_range_80_95, r10000_10ffff_tmp102;
		BitBlock sequence_f0_90_a0, r10000_10ffff_tmp103, r10000_10ffff_tmp104;
		BitBlock sequence_f0_90_a0_byte_range_80_85, sequence_f0_90_a1;
		BitBlock r10000_10ffff_tmp105, sequence_f0_90_a1_byte_range_80_95;
		BitBlock sequence_f0_90_a2, r10000_10ffff_tmp106, r10000_10ffff_tmp107;
		BitBlock sequence_f0_90_a2_byte_range_80_9e, sequence_f0_90_a4;
		BitBlock r10000_10ffff_tmp108, sequence_f0_90_a4_byte_range_80_95;
		BitBlock r10000_10ffff_tmp109, sequence_f0_90_a6, r10000_10ffff_tmp110;
		BitBlock r10000_10ffff_tmp111, r10000_10ffff_tmp112;
		BitBlock sequence_f0_90_a6_byte_range_80_b7, sequence_f0_90_a8;
		BitBlock r10000_10ffff_tmp113, sequence_f0_90_a8_80, r10000_10ffff_tmp114;
		BitBlock sequence_f0_90_a9, byte_range_a0_bc, r10000_10ffff_tmp115;
		BitBlock sequence_f0_90_a9_byte_range_a0_bc, sequence_f0_90_aa;
		BitBlock byte_range_80_9c, r10000_10ffff_tmp116;
		BitBlock sequence_f0_90_aa_byte_range_80_9c, sequence_f0_90_ab;
		BitBlock r10000_10ffff_tmp117, sequence_f0_90_ab_byte_range_80_87;
		BitBlock sequence_f0_90_ac, r10000_10ffff_tmp118, r10000_10ffff_tmp119;
		BitBlock sequence_f0_90_ac_byte_range_80_b5, sequence_f0_90_ad;
		BitBlock r10000_10ffff_tmp120, sequence_f0_90_ad_byte_range_80_95;
		BitBlock sequence_f0_90_ae, r10000_10ffff_tmp121, r10000_10ffff_tmp122;
		BitBlock sequence_f0_90_ae_byte_range_80_91, r10000_10ffff_tmp123;
		BitBlock sequence_f0_90_b0, r10000_10ffff_tmp124;
		BitBlock sequence_f0_90_b0_byte_range_80_bf, sequence_f0_90_b1;
		BitBlock r10000_10ffff_tmp125, r10000_10ffff_tmp126, r10000_10ffff_tmp127;
		BitBlock sequence_f0_90_b1_byte_range_80_88, sequence_f0_91;
		BitBlock r10000_10ffff_tmp128, sequence_f0_91_80, sequence_f0_91_adv;
		BitBlock r10000_10ffff_tmp129, r10000_10ffff_tmp130, r10000_10ffff_tmp131;
		BitBlock r10000_10ffff_tmp132, byte_range_83_b7, sequence_f0_91_80_adv;
		BitBlock r10000_10ffff_tmp133, sequence_f0_91_82, r10000_10ffff_tmp134;
		BitBlock r10000_10ffff_tmp135, byte_range_83_af, sequence_f0_91_82_adv;
		BitBlock r10000_10ffff_tmp136, sequence_f0_91_83, r10000_10ffff_tmp137;
		BitBlock r10000_10ffff_tmp138, r10000_10ffff_tmp139, byte_range_90_a8;
		BitBlock sequence_f0_91_83_adv, r10000_10ffff_tmp140, sequence_f0_91_84;
		BitBlock r10000_10ffff_tmp141, byte_range_83_a6, sequence_f0_91_84_adv;
		BitBlock r10000_10ffff_tmp142, sequence_f0_91_85, r10000_10ffff_tmp143;
		BitBlock r10000_10ffff_tmp144, r10000_10ffff_tmp145, r10000_10ffff_tmp146;
		BitBlock r10000_10ffff_tmp147, cc_range_11150_11176_4, sequence_f0_91_85_adv;
		BitBlock r10000_10ffff_tmp148, sequence_f0_91_86, r10000_10ffff_tmp149;
		BitBlock byte_range_83_b2, sequence_f0_91_86_adv, r10000_10ffff_tmp150;
		BitBlock r10000_10ffff_tmp151, sequence_f0_91_87, r10000_10ffff_tmp152;
		BitBlock r10000_10ffff_tmp153, r10000_10ffff_tmp154, cc_range_111c1_111da_4;
		BitBlock sequence_f0_91_87_adv, r10000_10ffff_tmp155, byte_88;
		BitBlock sequence_f0_91_88, r10000_10ffff_tmp156, r10000_10ffff_tmp157;
		BitBlock r10000_10ffff_tmp158, r10000_10ffff_tmp159, cc_range_11200_11213_4;
		BitBlock sequence_f0_91_88_adv, r10000_10ffff_tmp160, sequence_f0_91_8a;
		BitBlock sequence_f0_91_8a_adv, r10000_10ffff_tmp161, sequence_f0_91_8b;
		BitBlock sequence_f0_91_8b_adv, r10000_10ffff_tmp162, sequence_f0_91_8c;
		BitBlock r10000_10ffff_tmp163, r10000_10ffff_tmp164, r10000_10ffff_tmp165;
		BitBlock r10000_10ffff_tmp166, r10000_10ffff_tmp167, r10000_10ffff_tmp168;
		BitBlock r10000_10ffff_tmp169, r10000_10ffff_tmp170, r10000_10ffff_tmp171;
		BitBlock r10000_10ffff_tmp172, r10000_10ffff_tmp173, r10000_10ffff_tmp174;
		BitBlock r10000_10ffff_tmp175, r10000_10ffff_tmp176, r10000_10ffff_tmp177;
		BitBlock r10000_10ffff_tmp178, r10000_10ffff_tmp179, r10000_10ffff_tmp180;
		BitBlock r10000_10ffff_tmp181, r10000_10ffff_tmp182, r10000_10ffff_tmp183;
		BitBlock r10000_10ffff_tmp184, cc_range_11305_1133d_4, sequence_f0_91_8c_adv;
		BitBlock r10000_10ffff_tmp185, sequence_f0_91_8d, r10000_10ffff_tmp186;
		BitBlock r10000_10ffff_tmp187, r10000_10ffff_tmp188, byte_range_9d_a1;
		BitBlock sequence_f0_91_8d_adv, r10000_10ffff_tmp189, sequence_f0_91_92;
		BitBlock sequence_f0_91_92_adv, r10000_10ffff_tmp190, sequence_f0_91_93;
		BitBlock r10000_10ffff_tmp191, r10000_10ffff_tmp192, cc_range_114c4_114c7_4;
		BitBlock sequence_f0_91_93_adv, r10000_10ffff_tmp193, byte_96;
		BitBlock sequence_f0_91_96, r10000_10ffff_tmp194, r10000_10ffff_tmp195;
		BitBlock sequence_f0_91_96_adv, r10000_10ffff_tmp196, sequence_f0_91_98;
		BitBlock sequence_f0_91_98_adv, r10000_10ffff_tmp197, sequence_f0_91_99;
		BitBlock sequence_f0_91_99_adv, r10000_10ffff_tmp198, sequence_f0_91_9a;
		BitBlock r10000_10ffff_tmp199, r10000_10ffff_tmp200, sequence_f0_91_9a_adv;
		BitBlock r10000_10ffff_tmp201, sequence_f0_91_a2, sequence_f0_91_a2_adv;
		BitBlock r10000_10ffff_tmp202, sequence_f0_91_a3, r10000_10ffff_tmp203;
		BitBlock cc_range_118c0_118ff_4, sequence_f0_91_a3_adv, r10000_10ffff_tmp204;
		BitBlock sequence_f0_91_ab, r10000_10ffff_tmp205, r10000_10ffff_tmp206;
		BitBlock byte_range_80_b8, sequence_f0_91_ab_adv, r10000_10ffff_tmp207;
		BitBlock sequence_f0_92, byte_range_80_8d, r10000_10ffff_tmp208;
		BitBlock sequence_f0_92_byte_range_80_8d, r10000_10ffff_tmp209;
		BitBlock sequence_f0_92_byte_range_80_8d_sfx, sequence_f0_92_adv;
		BitBlock sequence_f0_92_8e, r10000_10ffff_tmp210;
		BitBlock sequence_f0_92_8e_byte_range_80_98, sequence_f0_92_90;
		BitBlock r10000_10ffff_tmp211, sequence_f0_92_90_byte_range_80_bf;
		BitBlock sequence_f0_92_91, r10000_10ffff_tmp212;
		BitBlock sequence_f0_92_91_byte_range_80_ae, sequence_f0_93;
		BitBlock r10000_10ffff_tmp213, sequence_f0_93_byte_range_80_8f;
		BitBlock r10000_10ffff_tmp214, sequence_f0_93_byte_range_80_8f_sfx;
		BitBlock sequence_f0_93_adv, sequence_f0_93_90, r10000_10ffff_tmp215;
		BitBlock sequence_f0_93_90_byte_range_80_ae, sequence_f0_96, byte_range_a0_a7;
		BitBlock r10000_10ffff_tmp216, sequence_f0_96_byte_range_a0_a7;
		BitBlock r10000_10ffff_tmp217, sequence_f0_96_byte_range_a0_a7_sfx;
		BitBlock sequence_f0_96_adv, sequence_f0_96_a8, r10000_10ffff_tmp218;
		BitBlock sequence_f0_96_a8_byte_range_80_b8, sequence_f0_96_a9;
		BitBlock r10000_10ffff_tmp219, sequence_f0_96_a9_byte_range_80_9e;
		BitBlock sequence_f0_96_ab, r10000_10ffff_tmp220, r10000_10ffff_tmp221;
		BitBlock r10000_10ffff_tmp222, r10000_10ffff_tmp223;
		BitBlock sequence_f0_96_ab_byte_range_90_ad, sequence_f0_96_ac;
		BitBlock r10000_10ffff_tmp224, sequence_f0_96_ac_byte_range_80_af;
		BitBlock sequence_f0_96_ad, byte_range_80_83, r10000_10ffff_tmp225;
		BitBlock sequence_f0_96_ad_byte_range_80_83, sequence_f0_96_ae;
		BitBlock r10000_10ffff_tmp226, sequence_f0_96_ae_byte_range_80_8f;
		BitBlock sequence_f0_96_bc, r10000_10ffff_tmp227;
		BitBlock sequence_f0_96_bc_byte_range_80_bf, sequence_f0_96_bd;
		BitBlock r10000_10ffff_tmp228, byte_range_80_84, r10000_10ffff_tmp229;
		BitBlock sequence_f0_96_bd_byte_range_80_84, sequence_f0_96_be;
		BitBlock r10000_10ffff_tmp230, byte_range_93_9f, r10000_10ffff_tmp231;
		BitBlock sequence_f0_96_be_byte_range_93_9f, sequence_f0_9b;
		BitBlock r10000_10ffff_tmp232, sequence_f0_9b_80, sequence_f0_9b_adv;
		BitBlock sequence_f0_9b_80_adv, r10000_10ffff_tmp233, sequence_f0_9b_b0;
		BitBlock sequence_f0_9b_b0_adv, r10000_10ffff_tmp234, sequence_f0_9b_b1;
		BitBlock r10000_10ffff_tmp235, r10000_10ffff_tmp236, cc_range_1bc40_1bc70_4;
		BitBlock sequence_f0_9b_b1_adv, r10000_10ffff_tmp237, sequence_f0_9b_b2;
		BitBlock r10000_10ffff_tmp238, r10000_10ffff_tmp239, cc_range_1bc80_1bc90_4;
		BitBlock sequence_f0_9b_b2_adv, r10000_10ffff_tmp240, sequence_f0_9d;
		BitBlock r10000_10ffff_tmp241, sequence_f0_9d_90, sequence_f0_9d_adv;
		BitBlock sequence_f0_9d_90_adv, r10000_10ffff_tmp242, sequence_f0_9d_91;
		BitBlock r10000_10ffff_tmp243, r10000_10ffff_tmp244, r10000_10ffff_tmp245;
		BitBlock cc_range_1d440_1d456_4, sequence_f0_9d_91_adv, r10000_10ffff_tmp246;
		BitBlock sequence_f0_9d_92, r10000_10ffff_tmp247, r10000_10ffff_tmp248;
		BitBlock r10000_10ffff_tmp249, r10000_10ffff_tmp250, r10000_10ffff_tmp251;
		BitBlock r10000_10ffff_tmp252, r10000_10ffff_tmp253, r10000_10ffff_tmp254;
		BitBlock r10000_10ffff_tmp255, r10000_10ffff_tmp256, r10000_10ffff_tmp257;
		BitBlock r10000_10ffff_tmp258, r10000_10ffff_tmp259, r10000_10ffff_tmp260;
		BitBlock r10000_10ffff_tmp261, r10000_10ffff_tmp262, r10000_10ffff_tmp263;
		BitBlock r10000_10ffff_tmp264, cc_range_1d480_1d4bd_4, sequence_f0_9d_92_adv;
		BitBlock r10000_10ffff_tmp265, sequence_f0_9d_93, r10000_10ffff_tmp266;
		BitBlock r10000_10ffff_tmp267, r10000_10ffff_tmp268, cc_range_1d4c0_1d4c5_4;
		BitBlock sequence_f0_9d_93_adv, r10000_10ffff_tmp269, sequence_f0_9d_94;
		BitBlock r10000_10ffff_tmp270, r10000_10ffff_tmp271, r10000_10ffff_tmp272;
		BitBlock r10000_10ffff_tmp273, r10000_10ffff_tmp274, r10000_10ffff_tmp275;
		BitBlock r10000_10ffff_tmp276, r10000_10ffff_tmp277, r10000_10ffff_tmp278;
		BitBlock r10000_10ffff_tmp279, r10000_10ffff_tmp280, r10000_10ffff_tmp281;
		BitBlock r10000_10ffff_tmp282, r10000_10ffff_tmp283, r10000_10ffff_tmp284;
		BitBlock r10000_10ffff_tmp285, r10000_10ffff_tmp286, r10000_10ffff_tmp287;
		BitBlock r10000_10ffff_tmp288, r10000_10ffff_tmp289, r10000_10ffff_tmp290;
		BitBlock cc_range_1d500_1d53b_4, sequence_f0_9d_94_adv, r10000_10ffff_tmp291;
		BitBlock sequence_f0_9d_95, r10000_10ffff_tmp292, r10000_10ffff_tmp293;
		BitBlock r10000_10ffff_tmp294, r10000_10ffff_tmp295, r10000_10ffff_tmp296;
		BitBlock r10000_10ffff_tmp297, cc_range_1d540_1d552_4, sequence_f0_9d_95_adv;
		BitBlock r10000_10ffff_tmp298, r10000_10ffff_tmp299, byte_range_96_99;
		BitBlock sequence_f0_9d_byte_range_96_99, r10000_10ffff_tmp300;
		BitBlock sequence_f0_9d_byte_range_96_99_sfx, sequence_f0_9d_9a;
		BitBlock r10000_10ffff_tmp301, r10000_10ffff_tmp302, r10000_10ffff_tmp303;
		BitBlock sequence_f0_9d_9a_byte_range_80_a5, sequence_f0_9d_9b;
		BitBlock r10000_10ffff_tmp304, sequence_f0_9d_9b_80, sequence_f0_9d_9c;
		BitBlock r10000_10ffff_tmp305, sequence_f0_9d_9c_byte_range_80_94;
		BitBlock sequence_f0_9d_9d, r10000_10ffff_tmp306, byte_range_80_8e;
		BitBlock r10000_10ffff_tmp307, sequence_f0_9d_9d_byte_range_80_8e;
		BitBlock sequence_f0_9d_9e, r10000_10ffff_tmp308;
		BitBlock sequence_f0_9d_9e_byte_range_80_88, sequence_f0_9d_9f;
		BitBlock r10000_10ffff_tmp309, sequence_f0_9d_9f_byte_range_80_82;
		BitBlock sequence_f0_9e, r10000_10ffff_tmp310, byte_range_a0_a2;
		BitBlock r10000_10ffff_tmp311, sequence_f0_9e_byte_range_a0_a2;
		BitBlock r10000_10ffff_tmp312, sequence_f0_9e_byte_range_a0_a2_sfx;
		BitBlock sequence_f0_9e_adv, sequence_f0_9e_a3, r10000_10ffff_tmp313;
		BitBlock sequence_f0_9e_a3_byte_range_80_84, sequence_f0_9e_b8;
		BitBlock r10000_10ffff_tmp314, sequence_f0_9e_b8_byte_range_80_83;
		BitBlock sequence_f0_9e_b9, r10000_10ffff_tmp315, sequence_f0_9e_b9_82;
		BitBlock sequence_f0_9e_ba, byte_range_80_89, r10000_10ffff_tmp316;
		BitBlock sequence_f0_9e_ba_byte_range_80_89, byte_range_a0_a9;
		BitBlock byte_f0_byte_range_a0_a9, r10000_10ffff_tmp317;
		BitBlock byte_f0_byte_range_a0_a9_sfx, r10000_10ffff_tmp318;
		BitBlock byte_f0_byte_range_a0_a9_sfx_sfx, sequence_f0_aa, sequence_f0_aa_adv;
		BitBlock sequence_f0_aa_80, r10000_10ffff_tmp319;
		BitBlock sequence_f0_aa_80_byte_range_80_96, sequence_f0_ab;
		BitBlock sequence_f0_ab_adv, sequence_f0_ab_80, r10000_10ffff_tmp320;
		BitBlock sequence_f0_ab_80_byte_range_80_b4, sequence_f0_af;
		BitBlock sequence_f0_af_adv, sequence_f0_af_a0, r10000_10ffff_tmp321;
		BitBlock sequence_f0_af_a0_byte_range_80_9d;




        struct_ids_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp2 = simd_or(basis_bits.bit_5, tmp1);
        tmp3 = simd_and(basis_bits.bit_4, tmp2);
        tmp4 = simd_not(tmp3);
        tmp5 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp7 = simd_or(tmp5, tmp6);
        tmp8 = simd_or(simd_and(basis_bits.bit_3, tmp4), simd_andc(tmp7, basis_bits.bit_3));
        tmp9 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        cc_range_41_61_1 = simd_and(tmp8, tmp9);
        struct_ids_Y.cc = simd_or(struct_ids_Y.cc, cc_range_41_61_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 296))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 25))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, tmp5);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp9 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
            r80_7ff_tmp10 = simd_and(r80_7ff_tmp7, r80_7ff_tmp9);
            r80_7ff_tmp11 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp12 = simd_and(r80_7ff_tmp5, r80_7ff_tmp11);
            r80_7ff_tmp13 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp15 = simd_and(r80_7ff_tmp13, r80_7ff_tmp14);
            r80_7ff_tmp16 = simd_and(r80_7ff_tmp12, r80_7ff_tmp15);
            r80_7ff_tmp17 = simd_or(r80_7ff_tmp10, r80_7ff_tmp16);
            r80_7ff_tmp18 = simd_and(r80_7ff_tmp12, r80_7ff_tmp9);
            cc_range_aa_ba_2 = simd_or(r80_7ff_tmp17, r80_7ff_tmp18);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp19 = simd_and(byte_c2_adv, cc_range_aa_ba_2);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r80_7ff_tmp19);
            r80_7ff_tmp20 = simd_andc(tmp1, tmp5);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp20);
            r80_7ff_tmp21 = simd_andc(r80_7ff_tmp5, basis_bits.bit_2);
            r80_7ff_tmp22 = simd_and(basis_bits.bit_5, tmp1);
            r80_7ff_tmp23 = simd_or(basis_bits.bit_4, r80_7ff_tmp22);
            r80_7ff_tmp24 = simd_and(basis_bits.bit_3, r80_7ff_tmp23);
            r80_7ff_tmp25 = simd_andc(r80_7ff_tmp21, r80_7ff_tmp24);
            r80_7ff_tmp26 = simd_not(r80_7ff_tmp24);
            r80_7ff_tmp27 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r80_7ff_tmp28 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp26), simd_andc(r80_7ff_tmp27, basis_bits.bit_2));
            r80_7ff_tmp29 = simd_and(r80_7ff_tmp5, r80_7ff_tmp28);
            r80_7ff_tmp30 = simd_or(r80_7ff_tmp25, r80_7ff_tmp29);
            r80_7ff_tmp31 = simd_and(r80_7ff_tmp12, basis_bits.bit_4);
            cc_range_c0_f8_2 = simd_or(r80_7ff_tmp30, r80_7ff_tmp31);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp32 = simd_and(byte_c3_adv, cc_range_c0_f8_2);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r80_7ff_tmp32);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp5);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 8))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(2, 5))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_5, tmp6);
                r100_2ff_tmp2 = simd_not(r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_and(r80_7ff_tmp8, r80_7ff_tmp14);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp4);
                byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(2), r100_2ff_tmp5));
                r100_2ff_tmp6 = simd_and(r100_2ff_tmp5, byte_range_80_8f);
                r100_2ff_tmp7 = simd_or(byte_range_c4_c8, r100_2ff_tmp6);
                if ((bitblock::any(r100_2ff_tmp7) || carryQ.CarryTest(3, 2))) {
                  r100_24f_tmp1 = simd_andc(r80_7ff_tmp13, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp1);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(3, 1))) {
                    byte_range_80_bf = r80_7ff_tmp5;
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_range_c4_c5, carryQ.get_carry_in(3), r100_17f_tmp1));
                    byte_range_c4_c5_sfx = simd_and(r100_17f_tmp1, byte_range_80_bf);
                    struct_ids_Y.cc = simd_or(struct_ids_Y.cc, byte_range_c4_c5_sfx);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(3, 1);
                  }
                  r100_24f_tmp2 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r100_24f_tmp2, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp3);
                  r100_24f_tmp4 = simd_or(byte_range_c6_c8, r100_2ff_tmp6);
                  if ((bitblock::any(r100_24f_tmp4) || carryQ.CarryTest(4, 1))) {
                    byte_range_80_bf = r80_7ff_tmp5;
                    carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_range_c6_c8, carryQ.get_carry_in(4), r180_24f_tmp1));
                    byte_range_c6_c8_sfx = simd_and(r180_24f_tmp1, byte_range_80_bf);
                    struct_ids_Y.cc = simd_or(struct_ids_Y.cc, byte_range_c6_c8_sfx);
                    byte_c9_byte_range_80_8f = r100_2ff_tmp6;
                    struct_ids_Y.cc = simd_or(struct_ids_Y.cc, byte_c9_byte_range_80_8f);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(4, 1);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 2);
                }
                byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
                r100_2ff_tmp8 = simd_and(r100_2ff_tmp5, byte_range_90_bf);
                byte_ca = simd_and(r80_7ff_tmp2, r80_7ff_tmp9);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp11);
                carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(5), r100_2ff_tmp9));
                r100_2ff_tmp10 = simd_and(r100_2ff_tmp9, byte_range_80_af);
                r100_2ff_tmp11 = simd_or(r100_2ff_tmp8, r100_2ff_tmp10);
                if (bitblock::any(r100_2ff_tmp11)) {
                  byte_c9_adv = r100_2ff_tmp5;
                  r250_2af_tmp1 = simd_and(byte_c9_adv, byte_range_90_bf);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r250_2af_tmp1);
                  byte_ca_adv = r100_2ff_tmp9;
                  r250_2af_tmp2 = simd_and(byte_ca_adv, byte_range_80_af);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r250_2af_tmp2);
                }
                byte_range_b0_bf = r80_7ff_tmp12;
                r100_2ff_tmp12 = simd_and(r100_2ff_tmp9, byte_range_b0_bf);
                r100_2ff_tmp13 = simd_and(r80_7ff_tmp8, tmp1);
                byte_cb = simd_and(r80_7ff_tmp2, r100_2ff_tmp13);
                r100_2ff_tmp14 = simd_or(r100_2ff_tmp12, byte_cb);
                if ((bitblock::any(r100_2ff_tmp14) || carryQ.CarryTest(6, 1))) {
                  byte_ca_adv = r100_2ff_tmp9;
                  r2b0_2ff_tmp1 = simd_and(byte_ca_adv, byte_range_b0_bf);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r2b0_2ff_tmp1);
                  r2b0_2ff_tmp2 = simd_or(tmp5, basis_bits.bit_6);
                  r2b0_2ff_tmp3 = simd_andc(byte_range_80_8f, r2b0_2ff_tmp2);
                  r2b0_2ff_tmp4 = simd_not(r2b0_2ff_tmp2);
                  r2b0_2ff_tmp5 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2b0_2ff_tmp6 = simd_or(basis_bits.bit_4, r2b0_2ff_tmp5);
                  r2b0_2ff_tmp7 = simd_or(simd_and(basis_bits.bit_3, r2b0_2ff_tmp4), simd_andc(r2b0_2ff_tmp6, basis_bits.bit_3));
                  r2b0_2ff_tmp8 = simd_and(r80_7ff_tmp21, r2b0_2ff_tmp7);
                  r2b0_2ff_tmp9 = simd_or(r2b0_2ff_tmp3, r2b0_2ff_tmp8);
                  r2b0_2ff_tmp10 = simd_andc(r80_7ff_tmp7, basis_bits.bit_4);
                  r2b0_2ff_tmp11 = simd_and(basis_bits.bit_5, tmp6);
                  r2b0_2ff_tmp12 = simd_andc(r2b0_2ff_tmp10, r2b0_2ff_tmp11);
                  r2b0_2ff_tmp13 = simd_or(r2b0_2ff_tmp9, r2b0_2ff_tmp12);
                  r2b0_2ff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2b0_2ff_tmp15 = simd_andc(r2b0_2ff_tmp14, tmp6);
                  r2b0_2ff_tmp16 = simd_and(r80_7ff_tmp7, r2b0_2ff_tmp15);
                  r2b0_2ff_tmp17 = simd_or(r2b0_2ff_tmp13, r2b0_2ff_tmp16);
                  r2b0_2ff_tmp18 = simd_and(r2b0_2ff_tmp14, r80_7ff_tmp3);
                  r2b0_2ff_tmp19 = simd_and(r80_7ff_tmp7, r2b0_2ff_tmp18);
                  cc_range_2c0_2ee_2 = simd_or(r2b0_2ff_tmp17, r2b0_2ff_tmp19);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(6), byte_cb_adv));
                  r2b0_2ff_tmp20 = simd_and(byte_cb_adv, cc_range_2c0_2ee_2);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r2b0_2ff_tmp20);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 5);
              }
              r100_3ff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp3 = simd_and(r100_3ff_tmp2, r80_7ff_tmp14);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              byte_range_b0_bf = r80_7ff_tmp12;
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(7), r100_3ff_tmp4));
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp4, byte_range_b0_bf);
              r100_3ff_tmp6 = simd_and(r100_3ff_tmp2, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp6);
              r100_3ff_tmp7 = simd_or(r100_3ff_tmp5, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp7) || carryQ.CarryTest(8, 2))) {
                r370_3ff_tmp1 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp2 = simd_and(basis_bits.bit_5, tmp6);
                r370_3ff_tmp3 = simd_andc(r370_3ff_tmp1, r370_3ff_tmp2);
                r370_3ff_tmp4 = simd_and(r80_7ff_tmp13, basis_bits.bit_6);
                r370_3ff_tmp5 = simd_and(byte_range_b0_bf, r370_3ff_tmp4);
                r370_3ff_tmp6 = simd_or(r370_3ff_tmp3, r370_3ff_tmp5);
                r370_3ff_tmp7 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp8 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                r370_3ff_tmp9 = simd_and(r370_3ff_tmp7, r370_3ff_tmp8);
                r370_3ff_tmp10 = simd_or(r370_3ff_tmp6, r370_3ff_tmp9);
                r370_3ff_tmp11 = simd_and(r100_3ff_tmp2, tmp1);
                r370_3ff_tmp12 = simd_and(byte_range_b0_bf, r370_3ff_tmp11);
                cc_range_370_37f_2 = simd_or(r370_3ff_tmp10, r370_3ff_tmp12);
                byte_cd_adv = r100_3ff_tmp4;
                r370_3ff_tmp13 = simd_and(byte_cd_adv, cc_range_370_37f_2);
                struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r370_3ff_tmp13);
                r370_3ff_tmp14 = simd_and(r100_3ff_tmp2, r80_7ff_tmp3);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp14);
                r370_3ff_tmp15 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                r370_3ff_tmp16 = simd_and(r80_7ff_tmp13, r80_7ff_tmp3);
                r370_3ff_tmp17 = simd_and(r370_3ff_tmp15, r370_3ff_tmp16);
                r370_3ff_tmp18 = simd_and(r370_3ff_tmp15, r80_7ff_tmp8);
                r370_3ff_tmp19 = simd_andc(r370_3ff_tmp18, tmp1);
                r370_3ff_tmp20 = simd_or(r370_3ff_tmp17, r370_3ff_tmp19);
                r370_3ff_tmp21 = simd_andc(r100_3ff_tmp2, tmp6);
                r370_3ff_tmp22 = simd_and(r370_3ff_tmp15, r370_3ff_tmp21);
                r370_3ff_tmp23 = simd_or(r370_3ff_tmp20, r370_3ff_tmp22);
                r370_3ff_tmp24 = simd_or(tmp5, basis_bits.bit_6);
                r370_3ff_tmp25 = simd_or(basis_bits.bit_3, r370_3ff_tmp24);
                r370_3ff_tmp26 = simd_not(r370_3ff_tmp25);
                r370_3ff_tmp27 = simd_or(basis_bits.bit_3, r100_3ff_tmp6);
                r370_3ff_tmp28 = simd_or(simd_and(basis_bits.bit_2, r370_3ff_tmp26), simd_andc(r370_3ff_tmp27, basis_bits.bit_2));
                r370_3ff_tmp29 = simd_and(r80_7ff_tmp5, r370_3ff_tmp28);
                r370_3ff_tmp30 = simd_or(r370_3ff_tmp23, r370_3ff_tmp29);
                r370_3ff_tmp31 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                r370_3ff_tmp32 = simd_or(tmp5, tmp1);
                r370_3ff_tmp33 = simd_or(basis_bits.bit_3, r370_3ff_tmp32);
                r370_3ff_tmp34 = simd_and(r370_3ff_tmp31, r370_3ff_tmp33);
                cc_range_386_3a3_2 = simd_or(r370_3ff_tmp30, r370_3ff_tmp34);
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(8), byte_ce_adv));
                r370_3ff_tmp35 = simd_and(byte_ce_adv, cc_range_386_3a3_2);
                struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r370_3ff_tmp35);
                byte_cf = simd_and(r80_7ff_tmp2, r370_3ff_tmp11);
                r370_3ff_tmp36 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r370_3ff_tmp37 = simd_or(basis_bits.bit_4, r370_3ff_tmp36);
                r370_3ff_tmp38 = simd_and(basis_bits.bit_3, r370_3ff_tmp37);
                r370_3ff_tmp39 = simd_and(basis_bits.bit_2, r370_3ff_tmp38);
                r370_3ff_tmp40 = simd_andc(r80_7ff_tmp5, r370_3ff_tmp39);
                r370_3ff_tmp41 = simd_and(byte_range_b0_bf, r80_7ff_tmp23);
                cc_range_3c0_3f7_2 = simd_or(r370_3ff_tmp40, r370_3ff_tmp41);
                carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(9), byte_cf_adv));
                r370_3ff_tmp42 = simd_and(byte_cf_adv, cc_range_3c0_3f7_2);
                struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r370_3ff_tmp42);
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 8);
            }
            r80_7ff_tmp33 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp34 = simd_and(byte_range_c0_ff, r80_7ff_tmp33);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp34, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(10, 7))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp34, tmp5);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(10, 3))) {
                r400_4ff_tmp1 = simd_or(tmp5, basis_bits.bit_6);
                byte_range_d0_d1 = simd_andc(r80_7ff_tmp34, r400_4ff_tmp1);
                byte_range_80_bf = r80_7ff_tmp5;
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_range_d0_d1, carryQ.get_carry_in(10), r400_4ff_tmp2));
                byte_range_d0_d1_sfx = simd_and(r400_4ff_tmp2, byte_range_80_bf);
                struct_ids_Y.cc = simd_or(struct_ids_Y.cc, byte_range_d0_d1_sfx);
                byte_d2 = simd_and(r80_7ff_tmp34, r80_7ff_tmp4);
                r400_4ff_tmp3 = simd_andc(byte_range_80_bf, r80_7ff_tmp1);
                byte_range_80_81 = simd_andc(r400_4ff_tmp3, r400_4ff_tmp1);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(11), r400_4ff_tmp4));
                byte_d2_byte_range_80_81 = simd_and(r400_4ff_tmp4, byte_range_80_81);
                struct_ids_Y.cc = simd_or(struct_ids_Y.cc, byte_d2_byte_range_80_81);
                byte_d3 = simd_and(r80_7ff_tmp34, r80_7ff_tmp20);
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(12), r400_4ff_tmp5));
                byte_d3_byte_range_80_bf = simd_and(r400_4ff_tmp5, byte_range_80_bf);
                struct_ids_Y.cc = simd_or(struct_ids_Y.cc, byte_d3_byte_range_80_bf);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 3);
              }
              r400_5ff_tmp1 = simd_andc(r80_7ff_tmp13, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp34, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(r80_7ff_tmp13, r80_7ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp34, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(13), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(14, 2))) {
                r500_58f_tmp1 = simd_andc(r80_7ff_tmp13, tmp6);
                byte_d4 = simd_and(r80_7ff_tmp34, r500_58f_tmp1);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp11);
                carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(14), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp3)) {
                  byte_d4_adv = r500_58f_tmp2;
                  r500_52f_tmp1 = simd_and(byte_d4_adv, byte_range_80_af);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r500_52f_tmp1);
                }
                byte_range_b0_bf = r80_7ff_tmp12;
                r500_58f_tmp4 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                byte_d5 = simd_and(r80_7ff_tmp34, r80_7ff_tmp15);
                r500_58f_tmp5 = simd_or(r500_58f_tmp4, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp4);
                if ((bitblock::any(r500_58f_tmp6) || carryQ.CarryTest(15, 1))) {
                  r530_58f_tmp1 = simd_or(basis_bits.bit_5, tmp6);
                  r530_58f_tmp2 = simd_or(basis_bits.bit_4, r530_58f_tmp1);
                  byte_range_b1_bf = simd_and(byte_range_b0_bf, r530_58f_tmp2);
                  byte_d4_adv = r500_58f_tmp2;
                  r530_58f_tmp3 = simd_and(byte_d4_adv, byte_range_b1_bf);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r530_58f_tmp3);
                  r530_58f_tmp4 = simd_and(r80_7ff_tmp5, r80_7ff_tmp33);
                  r530_58f_tmp5 = simd_and(r80_7ff_tmp8, r80_7ff_tmp14);
                  r530_58f_tmp6 = simd_and(r530_58f_tmp4, r530_58f_tmp5);
                  r530_58f_tmp7 = simd_or(r80_7ff_tmp25, r530_58f_tmp6);
                  r530_58f_tmp8 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                  r530_58f_tmp9 = simd_or(basis_bits.bit_3, tmp7);
                  r530_58f_tmp10 = simd_and(r530_58f_tmp8, r530_58f_tmp9);
                  cc_range_540_561_2 = simd_or(r530_58f_tmp7, r530_58f_tmp10);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(15), byte_d5_adv));
                  r530_58f_tmp11 = simd_and(byte_d5_adv, cc_range_540_561_2);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r530_58f_tmp11);
                  byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_d6_adv = r400_5ff_tmp3;
                  r530_58f_tmp12 = simd_and(byte_d6_adv, byte_range_80_87);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r530_58f_tmp12);
                }
                else {
                  carryQ.CarryDequeueEnqueue(15, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(14, 2);
              }
              byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
              r400_5ff_tmp6 = simd_and(r400_5ff_tmp3, byte_range_90_bf);
              r400_5ff_tmp7 = simd_and(r80_7ff_tmp13, tmp1);
              byte_d7 = simd_and(r80_7ff_tmp34, r400_5ff_tmp7);
              r400_5ff_tmp8 = simd_or(r400_5ff_tmp6, byte_d7);
              if ((bitblock::any(r400_5ff_tmp8) || carryQ.CarryTest(16, 1))) {
                r590_5ff_tmp1 = simd_or(basis_bits.bit_3, tmp3);
                r590_5ff_tmp2 = simd_not(r590_5ff_tmp1);
                r590_5ff_tmp3 = simd_or(simd_and(basis_bits.bit_2, r590_5ff_tmp2), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                r590_5ff_tmp4 = simd_and(r80_7ff_tmp5, r590_5ff_tmp3);
                r590_5ff_tmp5 = simd_andc(r80_7ff_tmp12, tmp5);
                r590_5ff_tmp6 = simd_andc(r590_5ff_tmp5, tmp1);
                cc_range_5d0_5f0_2 = simd_or(r590_5ff_tmp4, r590_5ff_tmp6);
                carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(16), byte_d7_adv));
                r590_5ff_tmp7 = simd_and(byte_d7_adv, cc_range_5d0_5f0_2);
                struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r590_5ff_tmp7);
              }
              else {
                carryQ.CarryDequeueEnqueue(16, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(10, 7);
            }
            byte_range_d8_db = simd_and(r80_7ff_tmp34, r80_7ff_tmp8);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(17, 4))) {
              r600_6ff_tmp1 = simd_andc(r80_7ff_tmp8, tmp6);
              byte_d8 = simd_and(r80_7ff_tmp34, r600_6ff_tmp1);
              byte_range_a0_bf = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
              carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(17), byte_d8_adv));
              r600_6ff_tmp2 = simd_and(byte_d8_adv, byte_range_a0_bf);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_and(r80_7ff_tmp8, r80_7ff_tmp14);
              byte_d9 = simd_and(r80_7ff_tmp34, r600_6ff_tmp3);
              r600_6ff_tmp4 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              r600_6ff_tmp5 = simd_andc(r600_6ff_tmp4, tmp3);
              r600_6ff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r600_6ff_tmp7 = simd_and(r600_6ff_tmp6, basis_bits.bit_6);
              r600_6ff_tmp8 = simd_and(r80_7ff_tmp7, r600_6ff_tmp7);
              r600_6ff_tmp9 = simd_or(r600_6ff_tmp5, r600_6ff_tmp8);
              r600_6ff_tmp10 = simd_or(basis_bits.bit_5, tmp6);
              r600_6ff_tmp11 = simd_or(basis_bits.bit_4, r600_6ff_tmp10);
              r600_6ff_tmp12 = simd_and(r80_7ff_tmp12, r600_6ff_tmp11);
              cc_range_640_671_2 = simd_or(r600_6ff_tmp9, r600_6ff_tmp12);
              carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(18), byte_d9_adv));
              r600_6ff_tmp13 = simd_and(byte_d9_adv, cc_range_640_671_2);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r600_6ff_tmp13);
              byte_da = simd_and(r80_7ff_tmp34, r80_7ff_tmp9);
              byte_range_80_bf = r80_7ff_tmp5;
              carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_da, carryQ.get_carry_in(19), byte_da_adv));
              r600_6ff_tmp14 = simd_and(byte_da_adv, byte_range_80_bf);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r600_6ff_tmp14);
              r600_6ff_tmp15 = simd_and(r80_7ff_tmp8, tmp1);
              byte_db = simd_and(r80_7ff_tmp34, r600_6ff_tmp15);
              r600_6ff_tmp16 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              r600_6ff_tmp17 = simd_and(basis_bits.bit_3, tmp5);
              r600_6ff_tmp18 = simd_andc(r600_6ff_tmp16, r600_6ff_tmp17);
              r600_6ff_tmp19 = simd_and(byte_range_80_bf, r80_7ff_tmp33);
              r600_6ff_tmp20 = simd_and(r600_6ff_tmp19, r80_7ff_tmp15);
              r600_6ff_tmp21 = simd_or(r600_6ff_tmp18, r600_6ff_tmp20);
              r600_6ff_tmp22 = simd_and(byte_range_80_bf, r80_7ff_tmp6);
              r600_6ff_tmp23 = simd_and(r600_6ff_tmp22, r80_7ff_tmp13);
              r600_6ff_tmp24 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp25 = simd_and(r600_6ff_tmp23, r600_6ff_tmp24);
              r600_6ff_tmp26 = simd_or(r600_6ff_tmp21, r600_6ff_tmp25);
              r600_6ff_tmp27 = simd_and(r600_6ff_tmp22, r600_6ff_tmp7);
              r600_6ff_tmp28 = simd_or(r600_6ff_tmp26, r600_6ff_tmp27);
              r600_6ff_tmp29 = simd_and(byte_range_80_bf, r80_7ff_tmp11);
              r600_6ff_tmp30 = simd_and(r600_6ff_tmp29, basis_bits.bit_4);
              r600_6ff_tmp31 = simd_not(tmp6);
              r600_6ff_tmp32 = simd_or(simd_and(basis_bits.bit_5, r600_6ff_tmp31), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
              r600_6ff_tmp33 = simd_and(r600_6ff_tmp30, r600_6ff_tmp32);
              r600_6ff_tmp34 = simd_or(r600_6ff_tmp28, r600_6ff_tmp33);
              r600_6ff_tmp35 = simd_and(r600_6ff_tmp6, tmp1);
              r600_6ff_tmp36 = simd_and(r600_6ff_tmp29, r600_6ff_tmp35);
              cc_range_6c0_6ff_2 = simd_or(r600_6ff_tmp34, r600_6ff_tmp36);
              carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(20), byte_db_adv));
              r600_6ff_tmp37 = simd_and(byte_db_adv, cc_range_6c0_6ff_2);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r600_6ff_tmp37);
            }
            else {
              carryQ.CarryDequeueEnqueue(17, 4);
            }
            r80_7ff_tmp35 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp36 = simd_andc(r80_7ff_tmp35, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp34, r80_7ff_tmp36);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(21, 2))) {
              r700_77f_tmp1 = simd_andc(r80_7ff_tmp35, tmp6);
              byte_dc = simd_and(r80_7ff_tmp34, r700_77f_tmp1);
              r700_77f_tmp2 = simd_and(r80_7ff_tmp35, r80_7ff_tmp14);
              byte_dd = simd_and(r80_7ff_tmp34, r700_77f_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(21), r700_77f_tmp3));
              r700_77f_tmp4 = simd_and(r700_77f_tmp3, byte_range_80_8f);
              r700_77f_tmp5 = simd_or(byte_dc, r700_77f_tmp4);
              if ((bitblock::any(r700_77f_tmp5) || carryQ.CarryTest(22, 1))) {
                r700_74f_tmp1 = simd_and(r80_7ff_tmp5, r80_7ff_tmp33);
                r700_74f_tmp2 = simd_andc(r700_74f_tmp1, tmp7);
                r700_74f_tmp3 = simd_not(basis_bits.bit_3);
                r700_74f_tmp4 = simd_or(tmp5, basis_bits.bit_6);
                r700_74f_tmp5 = simd_and(basis_bits.bit_3, r700_74f_tmp4);
                r700_74f_tmp6 = simd_or(simd_and(basis_bits.bit_2, r700_74f_tmp3), simd_andc(r700_74f_tmp5, basis_bits.bit_2));
                r700_74f_tmp7 = simd_and(r80_7ff_tmp5, r700_74f_tmp6);
                cc_range_710_712_2 = simd_or(r700_74f_tmp2, r700_74f_tmp7);
                carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(22), byte_dc_adv));
                r700_74f_tmp8 = simd_and(byte_dc_adv, cc_range_710_712_2);
                struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r700_74f_tmp8);
                r700_74f_tmp9 = simd_and(byte_range_80_8f, r80_7ff_tmp35);
                byte_range_8d_8f = simd_and(r700_74f_tmp9, tmp6);
                byte_dd_adv = r700_77f_tmp3;
                r700_74f_tmp10 = simd_and(byte_dd_adv, byte_range_8d_8f);
                struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r700_74f_tmp10);
              }
              else {
                carryQ.CarryDequeueEnqueue(22, 1);
              }
              byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
              r700_77f_tmp6 = simd_and(r700_77f_tmp3, byte_range_90_bf);
              if (bitblock::any(r700_77f_tmp6)) {
                byte_dd_adv = r700_77f_tmp3;
                r750_77f_tmp1 = simd_and(byte_dd_adv, byte_range_90_bf);
                struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r750_77f_tmp1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(21, 2);
            }
            r80_7ff_tmp37 = simd_and(r80_7ff_tmp35, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp34, r80_7ff_tmp37);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(23, 2))) {
              r780_7ff_tmp1 = simd_and(r80_7ff_tmp35, r80_7ff_tmp3);
              byte_de = simd_and(r80_7ff_tmp34, r780_7ff_tmp1);
              if ((bitblock::any(byte_de) || carryQ.CarryTest(23, 1))) {
                r780_7bf_tmp1 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r780_7bf_tmp2 = simd_or(basis_bits.bit_4, r780_7bf_tmp1);
                r780_7bf_tmp3 = simd_or(basis_bits.bit_3, r780_7bf_tmp2);
                r780_7bf_tmp4 = simd_and(basis_bits.bit_2, r780_7bf_tmp3);
                r780_7bf_tmp5 = simd_andc(r80_7ff_tmp5, r780_7bf_tmp4);
                r780_7bf_tmp6 = simd_andc(r80_7ff_tmp14, tmp5);
                r780_7bf_tmp7 = simd_and(r80_7ff_tmp12, r780_7bf_tmp6);
                cc_range_780_7b1_2 = simd_or(r780_7bf_tmp5, r780_7bf_tmp7);
                carryQ.cq[23] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(23), byte_de_adv));
                r780_7bf_tmp8 = simd_and(byte_de_adv, cc_range_780_7b1_2);
                struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r780_7bf_tmp8);
              }
              else {
                carryQ.CarryDequeueEnqueue(23, 1);
              }
              r780_7ff_tmp2 = simd_and(r80_7ff_tmp35, tmp1);
              byte_df = simd_and(r80_7ff_tmp34, r780_7ff_tmp2);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(24, 1))) {
                r7c0_7ff_tmp1 = simd_or(basis_bits.bit_3, tmp3);
                r7c0_7ff_tmp2 = simd_not(r7c0_7ff_tmp1);
                r7c0_7ff_tmp3 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                r7c0_7ff_tmp4 = simd_and(basis_bits.bit_4, r7c0_7ff_tmp3);
                r7c0_7ff_tmp5 = simd_or(basis_bits.bit_3, r7c0_7ff_tmp4);
                r7c0_7ff_tmp6 = simd_or(simd_and(basis_bits.bit_2, r7c0_7ff_tmp2), simd_andc(r7c0_7ff_tmp5, basis_bits.bit_2));
                r7c0_7ff_tmp7 = simd_and(r80_7ff_tmp5, r7c0_7ff_tmp6);
                r7c0_7ff_tmp8 = simd_andc(r80_7ff_tmp13, basis_bits.bit_6);
                r7c0_7ff_tmp9 = simd_and(r80_7ff_tmp12, r7c0_7ff_tmp8);
                r7c0_7ff_tmp10 = simd_or(r7c0_7ff_tmp7, r7c0_7ff_tmp9);
                cc_range_7ca_7fa_2 = simd_or(r7c0_7ff_tmp10, r80_7ff_tmp18);
                carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(24), byte_df_adv));
                r7c0_7ff_tmp11 = simd_and(byte_df_adv, cc_range_7ca_7fa_2);
                struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r7c0_7ff_tmp11);
              }
              else {
                carryQ.CarryDequeueEnqueue(24, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(23, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 25);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(25, 163))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp5);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp6);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(25), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(26, 103))) {
              r800_4dff_tmp1 = simd_or(tmp5, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(26, 77))) {
                byte_e0 = simd_andc(byte_range_e0_ef, tmp7);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(26, 31))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r800_fff_tmp1, tmp7);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(26), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r800_fff_tmp4 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp5 = simd_or(basis_bits.bit_4, r800_fff_tmp4);
                  r800_fff_tmp6 = simd_and(basis_bits.bit_3, r800_fff_tmp5);
                  r800_fff_tmp7 = simd_andc(r800_fff_tmp3, r800_fff_tmp6);
                  r800_fff_tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp9 = simd_and(r800_ffff_tmp3, r800_fff_tmp8);
                  r800_fff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp12 = simd_and(r800_fff_tmp10, r800_fff_tmp11);
                  r800_fff_tmp13 = simd_and(r800_fff_tmp9, r800_fff_tmp12);
                  r800_fff_tmp14 = simd_or(r800_fff_tmp7, r800_fff_tmp13);
                  r800_fff_tmp15 = simd_and(r800_fff_tmp1, r800_ffff_tmp2);
                  r800_fff_tmp16 = simd_or(r800_fff_tmp14, r800_fff_tmp15);
                  r800_fff_tmp17 = simd_andc(r800_fff_tmp10, tmp6);
                  r800_fff_tmp18 = simd_and(r800_fff_tmp1, r800_fff_tmp17);
                  cc_range_800_828_3 = simd_or(r800_fff_tmp16, r800_fff_tmp18);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(27), sequence_e0_a0_adv));
                  r800_fff_tmp19 = simd_and(sequence_e0_a0_adv, cc_range_800_828_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp19);
                  r800_fff_tmp20 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp21 = simd_andc(r800_fff_tmp20, tmp5);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp21);
                  sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
                  r800_fff_tmp22 = simd_or(basis_bits.bit_5, tmp6);
                  r800_fff_tmp23 = simd_and(basis_bits.bit_4, r800_fff_tmp22);
                  r800_fff_tmp24 = simd_and(basis_bits.bit_3, r800_fff_tmp23);
                  byte_range_80_98 = simd_andc(r800_fff_tmp3, r800_fff_tmp24);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(28), sequence_e0_a1_adv));
                  r800_fff_tmp25 = simd_and(sequence_e0_a1_adv, byte_range_80_98);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp25);
                  r800_fff_tmp26 = simd_andc(r800_fff_tmp11, tmp5);
                  byte_a2 = simd_and(r800_fff_tmp1, r800_fff_tmp26);
                  sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
                  r800_fff_tmp27 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r800_fff_tmp28 = simd_or(tmp5, tmp1);
                  r800_fff_tmp29 = simd_and(basis_bits.bit_3, r800_fff_tmp28);
                  byte_range_a0_b2 = simd_andc(r800_fff_tmp27, r800_fff_tmp29);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_a2, carryQ.get_carry_in(29), sequence_e0_a2_adv));
                  r800_fff_tmp30 = simd_and(sequence_e0_a2_adv, byte_range_a0_b2);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp30);
                  byte_a4 = r800_fff_tmp15;
                  sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
                  r800_fff_tmp31 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp32 = simd_and(basis_bits.bit_4, r800_fff_tmp31);
                  r800_fff_tmp33 = simd_and(basis_bits.bit_3, r800_fff_tmp32);
                  r800_fff_tmp34 = simd_not(r800_fff_tmp33);
                  r800_fff_tmp35 = simd_or(basis_bits.bit_3, tmp5);
                  r800_fff_tmp36 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp34), simd_andc(r800_fff_tmp35, basis_bits.bit_2));
                  r800_fff_tmp37 = simd_and(r800_ffff_tmp3, r800_fff_tmp36);
                  r800_fff_tmp38 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp39 = simd_and(r800_ffff_tmp3, r800_fff_tmp38);
                  r800_fff_tmp40 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp41 = simd_and(r800_fff_tmp40, r800_fff_tmp20);
                  r800_fff_tmp42 = simd_and(r800_fff_tmp39, r800_fff_tmp41);
                  cc_range_904_93d_3 = simd_or(r800_fff_tmp37, r800_fff_tmp42);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(30), sequence_e0_a4_adv));
                  r800_fff_tmp43 = simd_and(sequence_e0_a4_adv, cc_range_904_93d_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp43);
                  r800_fff_tmp44 = simd_and(r800_ffff_tmp1, r800_fff_tmp20);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp44);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  r800_fff_tmp45 = simd_andc(r800_fff_tmp9, tmp7);
                  r800_fff_tmp46 = simd_or(basis_bits.bit_3, r800_4dff_tmp1);
                  r800_fff_tmp47 = simd_not(r800_fff_tmp46);
                  r800_fff_tmp48 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp47), simd_andc(r800_ffff_tmp4, basis_bits.bit_2));
                  r800_fff_tmp49 = simd_and(r800_ffff_tmp3, r800_fff_tmp48);
                  r800_fff_tmp50 = simd_or(r800_fff_tmp45, r800_fff_tmp49);
                  r800_fff_tmp51 = simd_or(basis_bits.bit_4, r800_fff_tmp22);
                  r800_fff_tmp52 = simd_and(r800_fff_tmp39, r800_fff_tmp51);
                  cc_range_950_971_3 = simd_or(r800_fff_tmp50, r800_fff_tmp52);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(31), sequence_e0_a5_adv));
                  r800_fff_tmp53 = simd_and(sequence_e0_a5_adv, cc_range_950_971_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp53);
                  r800_fff_tmp54 = simd_and(r800_ffff_tmp1, r800_fff_tmp11);
                  byte_a6 = simd_and(r800_fff_tmp1, r800_fff_tmp54);
                  sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
                  r800_fff_tmp55 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp56 = simd_andc(r800_ffff_tmp3, r800_fff_tmp55);
                  r800_fff_tmp57 = simd_and(basis_bits.bit_5, tmp6);
                  r800_fff_tmp58 = simd_xor(basis_bits.bit_4, r800_fff_tmp57);
                  r800_fff_tmp59 = simd_andc(tmp7, r800_fff_tmp58);
                  r800_fff_tmp60 = simd_andc(r800_fff_tmp56, r800_fff_tmp59);
                  r800_fff_tmp61 = simd_not(tmp7);
                  r800_fff_tmp62 = simd_and(r800_fff_tmp40, tmp1);
                  r800_fff_tmp63 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp61), simd_andc(r800_fff_tmp62, basis_bits.bit_3));
                  r800_fff_tmp64 = simd_and(r800_fff_tmp3, r800_fff_tmp63);
                  r800_fff_tmp65 = simd_or(r800_fff_tmp60, r800_fff_tmp64);
                  r800_fff_tmp66 = simd_or(basis_bits.bit_3, r800_fff_tmp23);
                  r800_fff_tmp67 = simd_not(r800_fff_tmp66);
                  r800_fff_tmp68 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp67), simd_andc(r800_fff_tmp29, basis_bits.bit_2));
                  r800_fff_tmp69 = simd_and(r800_ffff_tmp3, r800_fff_tmp68);
                  r800_fff_tmp70 = simd_or(r800_fff_tmp65, r800_fff_tmp69);
                  r800_fff_tmp71 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp61), simd_andc(r800_fff_tmp32, basis_bits.bit_3));
                  r800_fff_tmp72 = simd_and(r800_fff_tmp27, r800_fff_tmp71);
                  r800_fff_tmp73 = simd_or(r800_fff_tmp70, r800_fff_tmp72);
                  r800_fff_tmp74 = simd_and(r800_fff_tmp39, r800_fff_tmp26);
                  r800_fff_tmp75 = simd_or(r800_fff_tmp73, r800_fff_tmp74);
                  r800_fff_tmp76 = simd_not(r800_fff_tmp31);
                  r800_fff_tmp77 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp76), simd_andc(r800_fff_tmp4, basis_bits.bit_4));
                  r800_fff_tmp78 = simd_and(r800_fff_tmp39, r800_fff_tmp77);
                  r800_fff_tmp79 = simd_or(r800_fff_tmp75, r800_fff_tmp78);
                  cc_range_980_9bd_3 = simd_or(r800_fff_tmp79, r800_fff_tmp42);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(32), sequence_e0_a6_adv));
                  r800_fff_tmp80 = simd_and(sequence_e0_a6_adv, cc_range_980_9bd_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp80);
                  r800_fff_tmp81 = simd_and(r800_ffff_tmp1, tmp1);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp81);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  r800_fff_tmp82 = simd_and(r800_fff_tmp40, r800_fff_tmp11);
                  r800_fff_tmp83 = simd_and(r800_fff_tmp56, r800_fff_tmp82);
                  r800_fff_tmp84 = simd_andc(r800_fff_tmp40, basis_bits.bit_6);
                  r800_fff_tmp85 = simd_and(r800_fff_tmp9, r800_fff_tmp84);
                  r800_fff_tmp86 = simd_or(r800_fff_tmp83, r800_fff_tmp85);
                  r800_fff_tmp87 = simd_and(basis_bits.bit_3, r800_fff_tmp62);
                  r800_fff_tmp88 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp47), simd_andc(r800_fff_tmp87, basis_bits.bit_2));
                  r800_fff_tmp89 = simd_and(r800_ffff_tmp3, r800_fff_tmp88);
                  r800_fff_tmp90 = simd_or(r800_fff_tmp86, r800_fff_tmp89);
                  r800_fff_tmp91 = simd_andc(r800_fff_tmp39, r800_4dff_tmp1);
                  cc_range_9ce_9f0_3 = simd_or(r800_fff_tmp90, r800_fff_tmp91);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(33), sequence_e0_a7_adv));
                  r800_fff_tmp92 = simd_and(sequence_e0_a7_adv, cc_range_9ce_9f0_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp92);
                  byte_a8 = r800_fff_tmp18;
                  sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
                  r800_fff_tmp93 = simd_not(tmp2);
                  r800_fff_tmp94 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp93), simd_andc(r800_fff_tmp57, basis_bits.bit_4));
                  r800_fff_tmp95 = simd_and(r800_fff_tmp56, r800_fff_tmp94);
                  r800_fff_tmp96 = simd_or(r800_fff_tmp95, r800_fff_tmp64);
                  r800_fff_tmp97 = simd_or(r800_fff_tmp96, r800_fff_tmp69);
                  r800_fff_tmp98 = simd_or(r800_fff_tmp97, r800_fff_tmp72);
                  r800_fff_tmp99 = simd_andc(basis_bits.bit_6, tmp5);
                  r800_fff_tmp100 = simd_and(r800_fff_tmp39, r800_fff_tmp99);
                  r800_fff_tmp101 = simd_or(r800_fff_tmp98, r800_fff_tmp100);
                  r800_fff_tmp102 = simd_and(r800_fff_tmp39, r800_ffff_tmp1);
                  r800_fff_tmp103 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp104 = simd_and(r800_fff_tmp102, r800_fff_tmp103);
                  r800_fff_tmp105 = simd_or(r800_fff_tmp101, r800_fff_tmp104);
                  r800_fff_tmp106 = simd_andc(r800_fff_tmp10, basis_bits.bit_6);
                  r800_fff_tmp107 = simd_and(r800_fff_tmp39, r800_fff_tmp106);
                  cc_range_a05_a38_3 = simd_or(r800_fff_tmp105, r800_fff_tmp107);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(34), sequence_e0_a8_adv));
                  r800_fff_tmp108 = simd_and(sequence_e0_a8_adv, cc_range_a05_a38_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp108);
                  r800_fff_tmp109 = simd_and(r800_fff_tmp10, r800_fff_tmp20);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp109);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  r800_fff_tmp110 = simd_and(r800_fff_tmp9, basis_bits.bit_4);
                  r800_fff_tmp111 = simd_xor(basis_bits.bit_5, tmp6);
                  r800_fff_tmp112 = simd_and(r800_fff_tmp110, r800_fff_tmp111);
                  r800_fff_tmp113 = simd_and(r800_fff_tmp9, r800_fff_tmp82);
                  r800_fff_tmp114 = simd_or(r800_fff_tmp112, r800_fff_tmp113);
                  r800_fff_tmp115 = simd_andc(r800_fff_tmp39, basis_bits.bit_4);
                  r800_fff_tmp116 = simd_not(tmp6);
                  r800_fff_tmp117 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp116), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r800_fff_tmp118 = simd_and(r800_fff_tmp115, r800_fff_tmp117);
                  cc_range_a59_a72_3 = simd_or(r800_fff_tmp114, r800_fff_tmp118);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(35), sequence_e0_a9_adv));
                  r800_fff_tmp119 = simd_and(sequence_e0_a9_adv, cc_range_a59_a72_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp119);
                  byte_aa = simd_and(r800_fff_tmp1, r800_fff_tmp12);
                  sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
                  r800_fff_tmp120 = simd_not(r800_fff_tmp4);
                  r800_fff_tmp121 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp120), simd_andc(r800_fff_tmp57, basis_bits.bit_4));
                  r800_fff_tmp122 = simd_and(r800_fff_tmp56, r800_fff_tmp121);
                  r800_fff_tmp123 = simd_not(r800_4dff_tmp1);
                  r800_fff_tmp124 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp123), simd_andc(r800_fff_tmp62, basis_bits.bit_3));
                  r800_fff_tmp125 = simd_and(r800_fff_tmp3, r800_fff_tmp124);
                  r800_fff_tmp126 = simd_or(r800_fff_tmp122, r800_fff_tmp125);
                  r800_fff_tmp127 = simd_or(r800_fff_tmp126, r800_fff_tmp69);
                  r800_fff_tmp128 = simd_or(r800_fff_tmp127, r800_fff_tmp72);
                  r800_fff_tmp129 = simd_or(r800_fff_tmp128, r800_fff_tmp100);
                  r800_fff_tmp130 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp76), simd_andc(r800_fff_tmp57, basis_bits.bit_4));
                  r800_fff_tmp131 = simd_and(r800_fff_tmp39, r800_fff_tmp130);
                  r800_fff_tmp132 = simd_or(r800_fff_tmp129, r800_fff_tmp131);
                  cc_range_a85_abd_3 = simd_or(r800_fff_tmp132, r800_fff_tmp42);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(36), sequence_e0_aa_adv));
                  r800_fff_tmp133 = simd_and(sequence_e0_aa_adv, cc_range_a85_abd_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp133);
                  r800_fff_tmp134 = simd_and(r800_fff_tmp10, tmp1);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp134);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  r800_fff_tmp135 = simd_andc(r800_fff_tmp1, r800_4dff_tmp1);
                  cc_range_ad0_ae0_3 = simd_or(r800_fff_tmp45, r800_fff_tmp135);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(37), sequence_e0_ab_adv));
                  r800_fff_tmp136 = simd_and(sequence_e0_ab_adv, cc_range_ad0_ae0_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp136);
                  r800_fff_tmp137 = simd_andc(r800_fff_tmp40, tmp6);
                  byte_ac = simd_and(r800_fff_tmp1, r800_fff_tmp137);
                  sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
                  r800_fff_tmp138 = simd_and(r800_fff_tmp56, r800_fff_tmp58);
                  r800_fff_tmp139 = simd_or(r800_fff_tmp138, r800_fff_tmp64);
                  r800_fff_tmp140 = simd_or(r800_fff_tmp139, r800_fff_tmp69);
                  r800_fff_tmp141 = simd_or(r800_fff_tmp140, r800_fff_tmp72);
                  r800_fff_tmp142 = simd_or(r800_fff_tmp141, r800_fff_tmp100);
                  r800_fff_tmp143 = simd_or(r800_fff_tmp142, r800_fff_tmp131);
                  cc_range_b05_b3d_3 = simd_or(r800_fff_tmp143, r800_fff_tmp42);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(38), sequence_e0_ac_adv));
                  r800_fff_tmp144 = simd_and(sequence_e0_ac_adv, cc_range_b05_b3d_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp144);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp41);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  r800_fff_tmp145 = simd_or(r800_fff_tmp85, r800_fff_tmp89);
                  r800_fff_tmp146 = simd_and(r800_fff_tmp39, r800_fff_tmp21);
                  cc_range_b5c_b71_3 = simd_or(r800_fff_tmp145, r800_fff_tmp146);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(39), sequence_e0_ad_adv));
                  r800_fff_tmp147 = simd_and(sequence_e0_ad_adv, cc_range_b5c_b71_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp147);
                  byte_ae = simd_and(r800_fff_tmp1, r800_fff_tmp82);
                  sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
                  r800_fff_tmp148 = simd_andc(tmp1, tmp5);
                  r800_fff_tmp149 = simd_or(r800_fff_tmp148, r800_fff_tmp94);
                  r800_fff_tmp150 = simd_and(r800_fff_tmp56, r800_fff_tmp149);
                  r800_fff_tmp151 = simd_and(r800_fff_tmp40, basis_bits.bit_6);
                  r800_fff_tmp152 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp61), simd_andc(r800_fff_tmp151, basis_bits.bit_3));
                  r800_fff_tmp153 = simd_and(r800_fff_tmp3, r800_fff_tmp152);
                  r800_fff_tmp154 = simd_or(r800_fff_tmp150, r800_fff_tmp153);
                  r800_fff_tmp155 = simd_andc(r800_fff_tmp9, basis_bits.bit_4);
                  r800_fff_tmp156 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp157 = simd_and(r800_fff_tmp155, r800_fff_tmp156);
                  r800_fff_tmp158 = simd_or(r800_fff_tmp154, r800_fff_tmp157);
                  r800_fff_tmp159 = simd_and(r800_fff_tmp9, r800_fff_tmp10);
                  r800_fff_tmp160 = simd_and(r800_fff_tmp159, r800_fff_tmp103);
                  r800_fff_tmp161 = simd_or(r800_fff_tmp158, r800_fff_tmp160);
                  r800_fff_tmp162 = simd_and(r800_fff_tmp9, r800_fff_tmp137);
                  r800_fff_tmp163 = simd_or(r800_fff_tmp161, r800_fff_tmp162);
                  r800_fff_tmp164 = simd_and(r800_fff_tmp9, r800_fff_tmp151);
                  r800_fff_tmp165 = simd_or(r800_fff_tmp163, r800_fff_tmp164);
                  r800_fff_tmp166 = simd_andc(r800_fff_tmp1, basis_bits.bit_4);
                  r800_fff_tmp167 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp116), simd_andc(tmp1, basis_bits.bit_5));
                  r800_fff_tmp168 = simd_and(r800_fff_tmp166, r800_fff_tmp167);
                  r800_fff_tmp169 = simd_or(r800_fff_tmp165, r800_fff_tmp168);
                  r800_fff_tmp170 = simd_and(r800_fff_tmp1, r800_fff_tmp10);
                  r800_fff_tmp171 = simd_andc(r800_fff_tmp170, tmp1);
                  r800_fff_tmp172 = simd_or(r800_fff_tmp169, r800_fff_tmp171);
                  r800_fff_tmp173 = simd_not(r800_fff_tmp32);
                  r800_fff_tmp174 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp173), simd_andc(r800_fff_tmp151, basis_bits.bit_3));
                  r800_fff_tmp175 = simd_and(r800_fff_tmp27, r800_fff_tmp174);
                  cc_range_b83_bae_3 = simd_or(r800_fff_tmp172, r800_fff_tmp175);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(40), sequence_e0_ae_adv));
                  r800_fff_tmp176 = simd_and(sequence_e0_ae_adv, cc_range_b83_bae_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp176);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp62);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  byte_90 = r800_fff_tmp45;
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(41), sequence_e0_af_adv));
                  r800_fff_tmp177 = simd_and(sequence_e0_af_adv, byte_90);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp177);
                  byte_b0 = simd_andc(r800_fff_tmp39, tmp7);
                  sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
                  r800_fff_tmp178 = simd_or(r800_fff_tmp138, r800_fff_tmp153);
                  r800_fff_tmp179 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  r800_fff_tmp180 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp67), simd_andc(r800_fff_tmp179, basis_bits.bit_2));
                  r800_fff_tmp181 = simd_and(r800_ffff_tmp3, r800_fff_tmp180);
                  r800_fff_tmp182 = simd_or(r800_fff_tmp178, r800_fff_tmp181);
                  r800_fff_tmp183 = simd_xor(basis_bits.bit_3, r800_fff_tmp32);
                  r800_fff_tmp184 = simd_and(r800_fff_tmp27, r800_fff_tmp183);
                  r800_fff_tmp185 = simd_or(r800_fff_tmp182, r800_fff_tmp184);
                  cc_range_c05_c3d_3 = simd_or(r800_fff_tmp185, r800_fff_tmp42);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(42), sequence_e0_b0_adv));
                  r800_fff_tmp186 = simd_and(sequence_e0_b0_adv, cc_range_c05_c3d_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp186);
                  byte_b1 = r800_fff_tmp146;
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  r800_fff_tmp187 = simd_and(r800_fff_tmp9, r800_fff_tmp106);
                  cc_range_c58_c60_3 = simd_or(r800_fff_tmp187, r800_fff_tmp135);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(43), sequence_e0_b1_adv));
                  r800_fff_tmp188 = simd_and(sequence_e0_b1_adv, cc_range_c58_c60_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp188);
                  byte_b2 = r800_fff_tmp74;
                  sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
                  r800_fff_tmp189 = simd_not(tmp5);
                  r800_fff_tmp190 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp189), simd_andc(r800_fff_tmp32, basis_bits.bit_3));
                  r800_fff_tmp191 = simd_and(r800_fff_tmp27, r800_fff_tmp190);
                  r800_fff_tmp192 = simd_or(r800_fff_tmp182, r800_fff_tmp191);
                  r800_fff_tmp193 = simd_or(r800_fff_tmp192, r800_fff_tmp131);
                  cc_range_c85_cbd_3 = simd_or(r800_fff_tmp193, r800_fff_tmp42);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(44), sequence_e0_b2_adv));
                  r800_fff_tmp194 = simd_and(sequence_e0_b2_adv, cc_range_c85_cbd_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp194);
                  byte_b3 = simd_and(r800_fff_tmp39, r800_fff_tmp148);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  r800_fff_tmp195 = simd_or(r800_fff_tmp113, r800_fff_tmp135);
                  r800_fff_tmp196 = simd_andc(r800_fff_tmp39, tmp5);
                  r800_fff_tmp197 = simd_and(r800_fff_tmp196, r800_fff_tmp103);
                  cc_range_cde_cf1_3 = simd_or(r800_fff_tmp195, r800_fff_tmp197);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(45), sequence_e0_b3_adv));
                  r800_fff_tmp198 = simd_and(sequence_e0_b3_adv, cc_range_cde_cf1_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp198);
                  byte_b4 = simd_and(r800_fff_tmp39, r800_ffff_tmp2);
                  sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
                  r800_fff_tmp199 = simd_and(basis_bits.bit_3, tmp3);
                  r800_fff_tmp200 = simd_not(r800_fff_tmp199);
                  r800_fff_tmp201 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp200), simd_andc(r800_fff_tmp179, basis_bits.bit_2));
                  r800_fff_tmp202 = simd_and(r800_ffff_tmp3, r800_fff_tmp201);
                  r800_fff_tmp203 = simd_or(r800_fff_tmp178, r800_fff_tmp202);
                  cc_range_d05_d3d_3 = simd_or(r800_fff_tmp203, r800_fff_tmp42);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(46), sequence_e0_b4_adv));
                  r800_fff_tmp204 = simd_and(sequence_e0_b4_adv, cc_range_d05_d3d_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp204);
                  byte_b5 = simd_and(r800_fff_tmp39, r800_fff_tmp44);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  r800_fff_tmp205 = simd_or(r800_fff_tmp83, r800_fff_tmp135);
                  r800_fff_tmp206 = simd_and(r800_fff_tmp39, basis_bits.bit_4);
                  r800_fff_tmp207 = simd_and(r800_fff_tmp206, r800_fff_tmp31);
                  cc_range_d4e_d7a_3 = simd_or(r800_fff_tmp205, r800_fff_tmp207);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(47), sequence_e0_b5_adv));
                  r800_fff_tmp208 = simd_and(sequence_e0_b5_adv, cc_range_d4e_d7a_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp208);
                  byte_b6 = simd_and(r800_fff_tmp39, r800_fff_tmp54);
                  sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
                  r800_fff_tmp209 = simd_and(basis_bits.bit_5, tmp1);
                  r800_fff_tmp210 = simd_or(basis_bits.bit_4, r800_fff_tmp209);
                  r800_fff_tmp211 = simd_not(r800_fff_tmp210);
                  r800_fff_tmp212 = simd_or(basis_bits.bit_4, r800_fff_tmp57);
                  r800_fff_tmp213 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp211), simd_andc(r800_fff_tmp212, basis_bits.bit_3));
                  r800_fff_tmp214 = simd_and(r800_fff_tmp3, r800_fff_tmp213);
                  r800_fff_tmp215 = simd_not(r800_fff_tmp179);
                  r800_fff_tmp216 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp215), simd_andc(r800_fff_tmp33, basis_bits.bit_2));
                  r800_fff_tmp217 = simd_and(r800_ffff_tmp3, r800_fff_tmp216);
                  r800_fff_tmp218 = simd_or(r800_fff_tmp214, r800_fff_tmp217);
                  r800_fff_tmp219 = simd_not(basis_bits.bit_5);
                  r800_fff_tmp220 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp219), simd_andc(tmp2, basis_bits.bit_4));
                  r800_fff_tmp221 = simd_and(r800_fff_tmp39, r800_fff_tmp220);
                  r800_fff_tmp222 = simd_or(r800_fff_tmp218, r800_fff_tmp221);
                  cc_range_d85_dbd_3 = simd_or(r800_fff_tmp222, r800_fff_tmp42);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(48), sequence_e0_b6_adv));
                  r800_fff_tmp223 = simd_and(sequence_e0_b6_adv, cc_range_d85_dbd_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp223);
                  byte_b7 = simd_and(r800_fff_tmp39, r800_fff_tmp81);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  r800_fff_tmp224 = simd_andc(r800_fff_tmp56, basis_bits.bit_4);
                  byte_range_80_86 = simd_andc(r800_fff_tmp224, r800_fff_tmp209);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(49), sequence_e0_b7_adv));
                  r800_fff_tmp225 = simd_and(sequence_e0_b7_adv, byte_range_80_86);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp225);
                  byte_b8 = simd_and(r800_fff_tmp39, r800_fff_tmp17);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  r800_fff_tmp226 = simd_and(basis_bits.bit_3, tmp7);
                  r800_fff_tmp227 = simd_not(r800_fff_tmp226);
                  r800_fff_tmp228 = simd_or(basis_bits.bit_3, tmp7);
                  r800_fff_tmp229 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp227), simd_andc(r800_fff_tmp228, basis_bits.bit_2));
                  r800_fff_tmp230 = simd_and(r800_ffff_tmp3, r800_fff_tmp229);
                  cc_range_e01_e32_3 = simd_or(r800_fff_tmp230, r800_fff_tmp100);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(50), sequence_e0_b8_adv));
                  r800_fff_tmp231 = simd_and(sequence_e0_b8_adv, cc_range_e01_e32_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp231);
                  byte_b9 = simd_and(r800_fff_tmp39, r800_fff_tmp109);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(51), sequence_e0_b9_adv));
                  r800_fff_tmp232 = simd_and(sequence_e0_b9_adv, byte_range_80_86);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp232);
                  byte_ba = simd_and(r800_fff_tmp39, r800_fff_tmp12);
                  sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
                  r800_fff_tmp233 = simd_andc(r800_fff_tmp56, tmp5);
                  r800_fff_tmp234 = simd_and(r800_fff_tmp233, r800_fff_tmp103);
                  r800_fff_tmp235 = simd_and(r800_fff_tmp56, r800_ffff_tmp2);
                  r800_fff_tmp236 = simd_or(r800_fff_tmp234, r800_fff_tmp235);
                  r800_fff_tmp237 = simd_not(r800_fff_tmp22);
                  r800_fff_tmp238 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp237), simd_andc(r800_fff_tmp209, basis_bits.bit_4));
                  r800_fff_tmp239 = simd_and(r800_fff_tmp56, r800_fff_tmp238);
                  r800_fff_tmp240 = simd_or(r800_fff_tmp236, r800_fff_tmp239);
                  r800_fff_tmp241 = simd_and(r800_fff_tmp56, r800_fff_tmp12);
                  r800_fff_tmp242 = simd_or(r800_fff_tmp240, r800_fff_tmp241);
                  r800_fff_tmp243 = simd_and(r800_fff_tmp56, r800_fff_tmp41);
                  r800_fff_tmp244 = simd_or(r800_fff_tmp242, r800_fff_tmp243);
                  r800_fff_tmp245 = simd_and(r800_fff_tmp9, r800_ffff_tmp1);
                  r800_fff_tmp246 = simd_or(r800_fff_tmp244, r800_fff_tmp245);
                  r800_fff_tmp247 = simd_and(r800_fff_tmp110, r800_fff_tmp22);
                  r800_fff_tmp248 = simd_or(r800_fff_tmp246, r800_fff_tmp247);
                  r800_fff_tmp249 = simd_andc(r800_fff_tmp1, tmp5);
                  r800_fff_tmp250 = simd_and(r800_fff_tmp249, tmp6);
                  r800_fff_tmp251 = simd_or(r800_fff_tmp248, r800_fff_tmp250);
                  r800_fff_tmp252 = simd_or(r800_fff_tmp251, byte_a5);
                  r800_fff_tmp253 = simd_or(r800_fff_tmp252, byte_a7);
                  r800_fff_tmp254 = simd_and(r800_fff_tmp10, basis_bits.bit_6);
                  r800_fff_tmp255 = simd_and(r800_fff_tmp1, r800_fff_tmp254);
                  r800_fff_tmp256 = simd_or(r800_fff_tmp253, r800_fff_tmp255);
                  r800_fff_tmp257 = simd_and(r800_fff_tmp40, tmp6);
                  r800_fff_tmp258 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp61), simd_andc(r800_fff_tmp257, basis_bits.bit_3));
                  r800_fff_tmp259 = simd_and(r800_fff_tmp27, r800_fff_tmp258);
                  r800_fff_tmp260 = simd_or(r800_fff_tmp256, r800_fff_tmp259);
                  r800_fff_tmp261 = simd_or(r800_fff_tmp260, r800_fff_tmp100);
                  cc_range_e81_ebd_3 = simd_or(r800_fff_tmp261, r800_fff_tmp42);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(52), sequence_e0_ba_adv));
                  r800_fff_tmp262 = simd_and(sequence_e0_ba_adv, cc_range_e81_ebd_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp262);
                  byte_bb = simd_and(r800_fff_tmp39, r800_fff_tmp134);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  r800_fff_tmp263 = simd_andc(r800_fff_tmp224, r800_fff_tmp57);
                  r800_fff_tmp264 = simd_and(r800_fff_tmp56, r800_fff_tmp54);
                  r800_fff_tmp265 = simd_or(r800_fff_tmp263, r800_fff_tmp264);
                  r800_fff_tmp266 = simd_and(r800_fff_tmp9, r800_fff_tmp40);
                  cc_range_ec0_edc_3 = simd_or(r800_fff_tmp265, r800_fff_tmp266);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(53), sequence_e0_bb_adv));
                  r800_fff_tmp267 = simd_and(sequence_e0_bb_adv, cc_range_ec0_edc_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp267);
                  byte_bc = simd_and(r800_fff_tmp39, r800_fff_tmp137);
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  byte_80 = simd_andc(r800_fff_tmp56, tmp7);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(54), sequence_e0_bc_adv));
                  r800_fff_tmp268 = simd_and(sequence_e0_bc_adv, byte_80);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp268);
                  byte_bd = r800_fff_tmp42;
                  sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
                  r800_fff_tmp269 = simd_or(basis_bits.bit_3, r800_fff_tmp257);
                  r800_fff_tmp270 = simd_not(r800_fff_tmp269);
                  r800_fff_tmp271 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp270), simd_andc(r800_fff_tmp66, basis_bits.bit_2));
                  r800_fff_tmp272 = simd_and(r800_ffff_tmp3, r800_fff_tmp271);
                  cc_range_f40_f49_3 = simd_or(r800_fff_tmp224, r800_fff_tmp272);
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(55), sequence_e0_bd_adv));
                  r800_fff_tmp273 = simd_and(sequence_e0_bd_adv, cc_range_f40_f49_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp273);
                  byte_be = simd_and(r800_fff_tmp39, r800_fff_tmp82);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  r800_fff_tmp274 = simd_and(r800_fff_tmp56, basis_bits.bit_4);
                  byte_range_88_8c = simd_andc(r800_fff_tmp274, r800_fff_tmp57);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(56), sequence_e0_be_adv));
                  r800_fff_tmp275 = simd_and(sequence_e0_be_adv, byte_range_88_8c);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r800_fff_tmp275);
                }
                else {
                  carryQ.CarryDequeueEnqueue(26, 31);
                }
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp5);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(57, 46))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp1);
                  byte_80 = simd_andc(r1000_1fff_tmp2, tmp7);
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(57), r1000_1fff_tmp3));
                  sequence_e1_80 = simd_and(r1000_1fff_tmp3, byte_80);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_or(basis_bits.bit_3, tmp3);
                  r1000_1fff_tmp5 = simd_and(basis_bits.bit_2, r1000_1fff_tmp4);
                  r1000_1fff_tmp6 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp5);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp8 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp7);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp10 = simd_and(r1000_1fff_tmp9, tmp1);
                  r1000_1fff_tmp11 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp10);
                  cc_range_1000_103f_3 = simd_or(r1000_1fff_tmp6, r1000_1fff_tmp11);
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(58), sequence_e1_80_adv));
                  r1000_1fff_tmp12 = simd_and(sequence_e1_80_adv, cc_range_1000_103f_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r1000_1fff_tmp12);
                  byte_81 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp2);
                  sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
                  r1000_1fff_tmp13 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp14 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp13);
                  r1000_1fff_tmp15 = simd_andc(r1000_1fff_tmp14, basis_bits.bit_4);
                  r1000_1fff_tmp16 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp17 = simd_andc(r1000_1fff_tmp15, r1000_1fff_tmp16);
                  r1000_1fff_tmp18 = simd_and(r1000_1fff_tmp14, basis_bits.bit_4);
                  r1000_1fff_tmp19 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp20 = simd_and(r1000_1fff_tmp18, r1000_1fff_tmp19);
                  r1000_1fff_tmp21 = simd_or(r1000_1fff_tmp17, r1000_1fff_tmp20);
                  r1000_1fff_tmp22 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r1000_1fff_tmp23 = simd_and(r1000_1fff_tmp22, r800_1fff_tmp2);
                  r1000_1fff_tmp24 = simd_or(r1000_1fff_tmp21, r1000_1fff_tmp23);
                  r1000_1fff_tmp25 = simd_and(r1000_1fff_tmp22, r800_ffff_tmp1);
                  r1000_1fff_tmp26 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp27 = simd_and(r1000_1fff_tmp25, r1000_1fff_tmp26);
                  r1000_1fff_tmp28 = simd_or(r1000_1fff_tmp24, r1000_1fff_tmp27);
                  r1000_1fff_tmp29 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r1000_1fff_tmp30 = simd_not(tmp7);
                  r1000_1fff_tmp31 = simd_and(r1000_1fff_tmp9, basis_bits.bit_6);
                  r1000_1fff_tmp32 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp30), simd_andc(r1000_1fff_tmp31, basis_bits.bit_3));
                  r1000_1fff_tmp33 = simd_and(r1000_1fff_tmp29, r1000_1fff_tmp32);
                  r1000_1fff_tmp34 = simd_or(r1000_1fff_tmp28, r1000_1fff_tmp33);
                  r1000_1fff_tmp35 = simd_and(basis_bits.bit_5, tmp6);
                  r1000_1fff_tmp36 = simd_or(basis_bits.bit_4, r1000_1fff_tmp35);
                  r1000_1fff_tmp37 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp36);
                  cc_range_1050_1075_3 = simd_or(r1000_1fff_tmp34, r1000_1fff_tmp37);
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(59), sequence_e1_81_adv));
                  r1000_1fff_tmp38 = simd_and(sequence_e1_81_adv, cc_range_1050_1075_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r1000_1fff_tmp38);
                  r1000_1fff_tmp39 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp40 = simd_andc(r1000_1fff_tmp39, tmp5);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp40);
                  sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
                  r1000_1fff_tmp41 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp39);
                  r1000_1fff_tmp42 = simd_andc(r800_4dff_tmp1, r1000_1fff_tmp41);
                  r1000_1fff_tmp43 = simd_andc(r1000_1fff_tmp2, r1000_1fff_tmp42);
                  cc_range_1080_10a0_3 = simd_or(r1000_1fff_tmp43, r1000_1fff_tmp29);
                  carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(60), sequence_e1_82_adv));
                  r1000_1fff_tmp44 = simd_and(sequence_e1_82_adv, cc_range_1080_10a0_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r1000_1fff_tmp44);
                  r1000_1fff_tmp45 = simd_andc(tmp1, tmp5);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp45);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  r1000_1fff_tmp46 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp47 = simd_andc(r1000_1fff_tmp46, r1000_1fff_tmp16);
                  r1000_1fff_tmp48 = simd_and(r800_ffff_tmp1, tmp1);
                  r1000_1fff_tmp49 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp48);
                  r1000_1fff_tmp50 = simd_or(r1000_1fff_tmp47, r1000_1fff_tmp49);
                  r1000_1fff_tmp51 = simd_and(r1000_1fff_tmp9, r800_1fff_tmp1);
                  r1000_1fff_tmp52 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp51);
                  r1000_1fff_tmp53 = simd_or(r1000_1fff_tmp50, r1000_1fff_tmp52);
                  r1000_1fff_tmp54 = simd_and(basis_bits.bit_3, tmp3);
                  r1000_1fff_tmp55 = simd_not(r1000_1fff_tmp54);
                  r1000_1fff_tmp56 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp55), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  r1000_1fff_tmp57 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp56);
                  r1000_1fff_tmp58 = simd_or(r1000_1fff_tmp53, r1000_1fff_tmp57);
                  r1000_1fff_tmp59 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp9);
                  cc_range_10c0_10fc_3 = simd_or(r1000_1fff_tmp58, r1000_1fff_tmp59);
                  carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(61), sequence_e1_83_adv));
                  r1000_1fff_tmp60 = simd_and(sequence_e1_83_adv, cc_range_10c0_10fc_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r1000_1fff_tmp60);
                  r1000_1fff_tmp61 = simd_or(basis_bits.bit_5, tmp6);
                  r1000_1fff_tmp62 = simd_not(r1000_1fff_tmp61);
                  r1000_1fff_tmp63 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp62), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_84_88 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp63);
                  byte_e1_byte_range_84_88 = simd_and(byte_e1_adv, byte_range_84_88);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[62] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_84_88, carryQ.get_carry_in(62), r1000_1fff_tmp64));
                  byte_e1_byte_range_84_88_sfx = simd_and(r1000_1fff_tmp64, byte_range_80_bf);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, byte_e1_byte_range_84_88_sfx);
                  r1000_1fff_tmp65 = simd_andc(byte_range_80_bf, r1000_1fff_tmp1);
                  r1000_1fff_tmp66 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp67 = simd_and(r1000_1fff_tmp66, r800_1fff_tmp1);
                  byte_89 = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp67);
                  sequence_e1_89 = simd_and(byte_e1_adv, byte_89);
                  r1000_1fff_tmp68 = simd_and(basis_bits.bit_4, r1000_1fff_tmp61);
                  byte_range_80_88 = simd_andc(r1000_1fff_tmp65, r1000_1fff_tmp68);
                  carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e1_89, carryQ.get_carry_in(63), r1000_1fff_tmp69));
                  sequence_e1_89_byte_range_80_88 = simd_and(r1000_1fff_tmp69, byte_range_80_88);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_89_byte_range_80_88);
                  r1000_1fff_tmp70 = simd_and(r1000_1fff_tmp66, r1000_1fff_tmp39);
                  byte_8a = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp70);
                  sequence_e1_8a = simd_and(byte_e1_adv, byte_8a);
                  carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e1_8a, carryQ.get_carry_in(64), r1000_1fff_tmp71));
                  sequence_e1_8a_byte_range_80_88 = simd_and(r1000_1fff_tmp71, byte_range_80_88);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_8a_byte_range_80_88);
                  r1000_1fff_tmp72 = simd_and(r1000_1fff_tmp66, tmp1);
                  byte_8b = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp72);
                  sequence_e1_8b = simd_and(byte_e1_adv, byte_8b);
                  carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_e1_8b, carryQ.get_carry_in(65), r1000_1fff_tmp73));
                  sequence_e1_8b_80 = simd_and(r1000_1fff_tmp73, byte_80);
                  r1000_1fff_tmp74 = simd_andc(r1000_1fff_tmp9, tmp6);
                  byte_8c = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp74);
                  sequence_e1_8c = simd_and(byte_e1_adv, byte_8c);
                  r1000_1fff_tmp75 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r1000_1fff_tmp76 = simd_and(basis_bits.bit_3, tmp7);
                  byte_range_80_90 = simd_andc(r1000_1fff_tmp75, r1000_1fff_tmp76);
                  carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_e1_8c, carryQ.get_carry_in(66), r1000_1fff_tmp77));
                  sequence_e1_8c_byte_range_80_90 = simd_and(r1000_1fff_tmp77, byte_range_80_90);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_8c_byte_range_80_90);
                  byte_8d = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp51);
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  byte_range_80_9a = simd_andc(r1000_1fff_tmp75, r1000_1fff_tmp54);
                  carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(67), r1000_1fff_tmp78));
                  sequence_e1_8d_byte_range_80_9a = simd_and(r1000_1fff_tmp78, byte_range_80_9a);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_8d_byte_range_80_9a);
                  byte_8e = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp41);
                  sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
                  byte_range_80_8f = r1000_1fff_tmp65;
                  carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(68), r1000_1fff_tmp79));
                  sequence_e1_8e_byte_range_80_8f = simd_and(r1000_1fff_tmp79, byte_range_80_8f);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_8e_byte_range_80_8f);
                  byte_8f = simd_and(byte_range_80_8f, r1000_1fff_tmp10);
                  sequence_e1_8f = simd_and(byte_e1_adv, byte_8f);
                  r1000_1fff_tmp80 = simd_and(basis_bits.bit_3, r1000_1fff_tmp36);
                  r1000_1fff_tmp81 = simd_and(basis_bits.bit_2, r1000_1fff_tmp80);
                  byte_range_80_b4 = simd_andc(byte_range_80_bf, r1000_1fff_tmp81);
                  carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e1_8f, carryQ.get_carry_in(69), r1000_1fff_tmp82));
                  sequence_e1_8f_byte_range_80_b4 = simd_and(r1000_1fff_tmp82, byte_range_80_b4);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_8f_byte_range_80_b4);
                  r1000_1fff_tmp83 = simd_and(byte_range_80_bf, r1000_1fff_tmp13);
                  byte_90 = simd_andc(r1000_1fff_tmp83, tmp7);
                  sequence_e1_90 = simd_and(byte_e1_adv, byte_90);
                  r1000_1fff_tmp84 = simd_or(basis_bits.bit_3, tmp7);
                  r1000_1fff_tmp85 = simd_or(basis_bits.bit_2, r1000_1fff_tmp84);
                  byte_range_81_bf = simd_and(byte_range_80_bf, r1000_1fff_tmp85);
                  carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e1_90, carryQ.get_carry_in(70), r1000_1fff_tmp86));
                  sequence_e1_90_byte_range_81_bf = simd_and(r1000_1fff_tmp86, byte_range_81_bf);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_90_byte_range_81_bf);
                  byte_91 = simd_and(r1000_1fff_tmp83, r800_1fff_tmp2);
                  sequence_e1_91 = simd_and(byte_e1_adv, byte_91);
                  carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e1_91, carryQ.get_carry_in(71), r1000_1fff_tmp87));
                  sequence_e1_91_byte_range_80_bf = simd_and(r1000_1fff_tmp87, byte_range_80_bf);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_91_byte_range_80_bf);
                  byte_99 = simd_and(r1000_1fff_tmp83, r1000_1fff_tmp67);
                  sequence_e1_99 = simd_and(byte_e1_adv, byte_99);
                  r1000_1fff_tmp88 = simd_and(r1000_1fff_tmp9, tmp6);
                  r1000_1fff_tmp89 = simd_or(basis_bits.bit_3, r1000_1fff_tmp88);
                  r1000_1fff_tmp90 = simd_and(basis_bits.bit_2, r1000_1fff_tmp89);
                  byte_range_80_ac = simd_andc(byte_range_80_bf, r1000_1fff_tmp90);
                  carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e1_99, carryQ.get_carry_in(72), r1000_1fff_tmp91));
                  sequence_e1_99_byte_range_80_ac = simd_and(r1000_1fff_tmp91, byte_range_80_ac);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_99_byte_range_80_ac);
                  byte_9a = simd_and(r1000_1fff_tmp83, r1000_1fff_tmp70);
                  sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
                  byte_range_81_9a = simd_and(r1000_1fff_tmp75, tmp8);
                  carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(73), r1000_1fff_tmp92));
                  sequence_e1_9a_byte_range_81_9a = simd_and(r1000_1fff_tmp92, byte_range_81_9a);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_9a_byte_range_81_9a);
                  byte_9b = simd_and(r1000_1fff_tmp83, r1000_1fff_tmp72);
                  sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
                  byte_range_80_aa = simd_andc(byte_range_80_bf, r1000_1fff_tmp5);
                  carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(74), r1000_1fff_tmp93));
                  sequence_e1_9b_byte_range_80_aa = simd_and(r1000_1fff_tmp93, byte_range_80_aa);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_9b_byte_range_80_aa);
                  byte_9c = simd_and(r1000_1fff_tmp83, r1000_1fff_tmp74);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  r1000_1fff_tmp94 = simd_and(basis_bits.bit_4, r1000_1fff_tmp35);
                  byte_range_80_8c = simd_andc(byte_range_80_8f, r1000_1fff_tmp94);
                  carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(75), r1000_1fff_tmp95));
                  sequence_e1_9c_byte_range_80_8c = simd_and(r1000_1fff_tmp95, byte_range_80_8c);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_9c_byte_range_80_8c);
                  byte_9d = simd_and(r1000_1fff_tmp83, r1000_1fff_tmp51);
                  sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
                  r1000_1fff_tmp96 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  byte_range_80_91 = simd_andc(r1000_1fff_tmp75, r1000_1fff_tmp96);
                  carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(76), r1000_1fff_tmp97));
                  sequence_e1_9d_byte_range_80_91 = simd_and(r1000_1fff_tmp97, byte_range_80_91);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_9d_byte_range_80_91);
                  byte_9e = simd_and(r1000_1fff_tmp83, r1000_1fff_tmp41);
                  sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
                  r1000_1fff_tmp98 = simd_and(basis_bits.bit_3, tmp5);
                  r1000_1fff_tmp99 = simd_and(basis_bits.bit_2, r1000_1fff_tmp98);
                  byte_range_80_b3 = simd_andc(byte_range_80_bf, r1000_1fff_tmp99);
                  carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(77), r1000_1fff_tmp100));
                  sequence_e1_9e_byte_range_80_b3 = simd_and(r1000_1fff_tmp100, byte_range_80_b3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_9e_byte_range_80_b3);
                  byte_9f = simd_and(r1000_1fff_tmp83, r1000_1fff_tmp10);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  byte_97 = simd_and(r1000_1fff_tmp83, r1000_1fff_tmp48);
                  carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(78), r1000_1fff_tmp101));
                  sequence_e1_9f_97 = simd_and(r1000_1fff_tmp101, byte_97);
                  r1000_1fff_tmp102 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r1000_1fff_tmp102, tmp7);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(79), r1000_1fff_tmp103));
                  sequence_e1_a0_byte_range_a0_bf = simd_and(r1000_1fff_tmp103, byte_range_a0_bf);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_a0_byte_range_a0_bf);
                  byte_a1 = simd_and(r1000_1fff_tmp102, r800_1fff_tmp2);
                  sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
                  carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(80), r1000_1fff_tmp104));
                  sequence_e1_a1_byte_range_80_b7 = simd_and(r1000_1fff_tmp104, byte_range_80_b7);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_a1_byte_range_80_b7);
                  byte_a2 = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp40);
                  sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
                  r1000_1fff_tmp105 = simd_or(basis_bits.bit_3, r1000_1fff_tmp68);
                  r1000_1fff_tmp106 = simd_and(basis_bits.bit_2, r1000_1fff_tmp105);
                  byte_range_80_a8 = simd_andc(byte_range_80_bf, r1000_1fff_tmp106);
                  carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(81), r1000_1fff_tmp107));
                  sequence_e1_a2_byte_range_80_a8 = simd_and(r1000_1fff_tmp107, byte_range_80_a8);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_a2_byte_range_80_a8);
                  byte_a3 = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp45);
                  sequence_e1_a3 = simd_and(byte_e1_adv, byte_a3);
                  r1000_1fff_tmp108 = simd_or(basis_bits.bit_4, r1000_1fff_tmp16);
                  r1000_1fff_tmp109 = simd_and(basis_bits.bit_3, r1000_1fff_tmp108);
                  r1000_1fff_tmp110 = simd_and(basis_bits.bit_2, r1000_1fff_tmp109);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r1000_1fff_tmp110);
                  carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e1_a3, carryQ.get_carry_in(82), r1000_1fff_tmp111));
                  sequence_e1_a3_byte_range_80_b5 = simd_and(r1000_1fff_tmp111, byte_range_80_b5);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_a3_byte_range_80_b5);
                  byte_a4 = simd_and(r1000_1fff_tmp102, r800_ffff_tmp2);
                  sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
                  r1000_1fff_tmp112 = simd_and(basis_bits.bit_3, r1000_1fff_tmp10);
                  byte_range_80_9e = simd_andc(r1000_1fff_tmp75, r1000_1fff_tmp112);
                  carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(83), r1000_1fff_tmp113));
                  sequence_e1_a4_byte_range_80_9e = simd_and(r1000_1fff_tmp113, byte_range_80_9e);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_a4_byte_range_80_9e);
                  r1000_1fff_tmp114 = simd_and(r800_ffff_tmp1, r800_1fff_tmp1);
                  byte_a5 = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp114);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  r1000_1fff_tmp115 = simd_or(basis_bits.bit_3, r1000_1fff_tmp31);
                  r1000_1fff_tmp116 = simd_not(r1000_1fff_tmp115);
                  r1000_1fff_tmp117 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp116), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_ad = simd_and(byte_range_80_bf, r1000_1fff_tmp117);
                  carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(84), r1000_1fff_tmp118));
                  sequence_e1_a5_byte_range_90_ad = simd_and(r1000_1fff_tmp118, byte_range_90_ad);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_a5_byte_range_90_ad);
                  r1000_1fff_tmp119 = simd_and(r800_ffff_tmp1, r1000_1fff_tmp39);
                  byte_a6 = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp119);
                  sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
                  r1000_1fff_tmp120 = simd_or(basis_bits.bit_3, r1000_1fff_tmp9);
                  r1000_1fff_tmp121 = simd_and(basis_bits.bit_2, r1000_1fff_tmp120);
                  byte_range_80_ab = simd_andc(byte_range_80_bf, r1000_1fff_tmp121);
                  carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(85), r1000_1fff_tmp122));
                  sequence_e1_a6_byte_range_80_ab = simd_and(r1000_1fff_tmp122, byte_range_80_ab);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_a6_byte_range_80_ab);
                  byte_a7 = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp48);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  r1000_1fff_tmp123 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_range_81_87 = simd_and(r1000_1fff_tmp123, r1000_1fff_tmp61);
                  carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(86), r1000_1fff_tmp124));
                  sequence_e1_a7_byte_range_81_87 = simd_and(r1000_1fff_tmp124, byte_range_81_87);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_a7_byte_range_81_87);
                  r1000_1fff_tmp125 = simd_andc(r1000_1fff_tmp66, tmp6);
                  byte_a8 = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp125);
                  sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
                  r1000_1fff_tmp126 = simd_and(basis_bits.bit_5, tmp1);
                  r1000_1fff_tmp127 = simd_or(basis_bits.bit_4, r1000_1fff_tmp126);
                  r1000_1fff_tmp128 = simd_and(basis_bits.bit_3, r1000_1fff_tmp127);
                  byte_range_80_96 = simd_andc(r1000_1fff_tmp75, r1000_1fff_tmp128);
                  carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(87), r1000_1fff_tmp129));
                  sequence_e1_a8_byte_range_80_96 = simd_and(r1000_1fff_tmp129, byte_range_80_96);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_a8_byte_range_80_96);
                  byte_a9 = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp67);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  byte_range_80_94 = simd_andc(r1000_1fff_tmp75, r1000_1fff_tmp80);
                  carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(88), r1000_1fff_tmp130));
                  sequence_e1_a9_byte_range_80_94 = simd_and(r1000_1fff_tmp130, byte_range_80_94);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_a9_byte_range_80_94);
                  byte_aa = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp70);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(89), r1000_1fff_tmp131));
                  sequence_e1_aa_a7 = simd_and(r1000_1fff_tmp131, byte_a7);
                  byte_ac = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp74);
                  sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
                  r1000_1fff_tmp132 = simd_not(r1000_1fff_tmp98);
                  r1000_1fff_tmp133 = simd_or(basis_bits.bit_3, r1000_1fff_tmp36);
                  r1000_1fff_tmp134 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp132), simd_andc(r1000_1fff_tmp133, basis_bits.bit_2));
                  byte_range_85_b3 = simd_and(byte_range_80_bf, r1000_1fff_tmp134);
                  carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(90), r1000_1fff_tmp135));
                  sequence_e1_ac_byte_range_85_b3 = simd_and(r1000_1fff_tmp135, byte_range_85_b3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_ac_byte_range_85_b3);
                  byte_ad = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp51);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  r1000_1fff_tmp136 = simd_not(basis_bits.bit_5);
                  r1000_1fff_tmp137 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp136), simd_andc(r1000_1fff_tmp35, basis_bits.bit_4));
                  byte_range_85_8b = simd_and(byte_range_80_8f, r1000_1fff_tmp137);
                  carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(91), r1000_1fff_tmp138));
                  sequence_e1_ad_byte_range_85_8b = simd_and(r1000_1fff_tmp138, byte_range_85_8b);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_ad_byte_range_85_8b);
                  byte_ae = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp41);
                  sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
                  r1000_1fff_tmp139 = simd_not(r1000_1fff_tmp84);
                  r1000_1fff_tmp140 = simd_or(tmp5, tmp1);
                  r1000_1fff_tmp141 = simd_or(basis_bits.bit_3, r1000_1fff_tmp140);
                  r1000_1fff_tmp142 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp139), simd_andc(r1000_1fff_tmp141, basis_bits.bit_2));
                  byte_range_83_a0 = simd_and(byte_range_80_bf, r1000_1fff_tmp142);
                  carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(92), r1000_1fff_tmp143));
                  sequence_e1_ae_byte_range_83_a0 = simd_and(r1000_1fff_tmp143, byte_range_83_a0);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_ae_byte_range_83_a0);
                  byte_af = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp10);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  r1000_1fff_tmp144 = simd_or(basis_bits.bit_3, r1000_1fff_tmp108);
                  r1000_1fff_tmp145 = simd_and(basis_bits.bit_2, r1000_1fff_tmp144);
                  byte_range_80_a5 = simd_andc(byte_range_80_bf, r1000_1fff_tmp145);
                  carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(93), r1000_1fff_tmp146));
                  sequence_e1_af_byte_range_80_a5 = simd_and(r1000_1fff_tmp146, byte_range_80_a5);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_af_byte_range_80_a5);
                  r1000_1fff_tmp147 = simd_and(byte_range_80_bf, r1000_1fff_tmp7);
                  byte_b0 = simd_andc(r1000_1fff_tmp147, tmp7);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  r1000_1fff_tmp148 = simd_or(basis_bits.bit_3, tmp5);
                  r1000_1fff_tmp149 = simd_and(basis_bits.bit_2, r1000_1fff_tmp148);
                  byte_range_80_a3 = simd_andc(byte_range_80_bf, r1000_1fff_tmp149);
                  carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(94), r1000_1fff_tmp150));
                  sequence_e1_b0_byte_range_80_a3 = simd_and(r1000_1fff_tmp150, byte_range_80_a3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_b0_byte_range_80_a3);
                  byte_b1 = simd_and(r1000_1fff_tmp147, r800_1fff_tmp2);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  r1000_1fff_tmp151 = simd_and(byte_range_80_8f, r1000_1fff_tmp9);
                  byte_range_8d_8f = simd_and(r1000_1fff_tmp151, tmp6);
                  carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(95), r1000_1fff_tmp152));
                  sequence_e1_b1_byte_range_8d_8f = simd_and(r1000_1fff_tmp152, byte_range_8d_8f);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_b1_byte_range_8d_8f);
                  byte_b3 = simd_and(r1000_1fff_tmp147, r1000_1fff_tmp45);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  r1000_1fff_tmp153 = simd_and(r1000_1fff_tmp102, basis_bits.bit_4);
                  r1000_1fff_tmp154 = simd_xor(basis_bits.bit_5, tmp6);
                  byte_range_a9_ac = simd_and(r1000_1fff_tmp153, r1000_1fff_tmp154);
                  carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(96), r1000_1fff_tmp155));
                  sequence_e1_b3_byte_range_a9_ac = simd_and(r1000_1fff_tmp155, byte_range_a9_ac);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_b3_byte_range_a9_ac);
                  byte_b4 = simd_and(r1000_1fff_tmp147, r800_ffff_tmp2);
                  sequence_e1_b4 = simd_and(byte_e1_adv, byte_b4);
                  carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_e1_b4, carryQ.get_carry_in(97), r1000_1fff_tmp156));
                  sequence_e1_b4_byte_range_80_bf = simd_and(r1000_1fff_tmp156, byte_range_80_bf);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_b4_byte_range_80_bf);
                  byte_b8 = simd_and(r1000_1fff_tmp147, r1000_1fff_tmp125);
                  sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
                  carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(98), r1000_1fff_tmp157));
                  sequence_e1_b8_byte_range_80_bf = simd_and(r1000_1fff_tmp157, byte_range_80_bf);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_b8_byte_range_80_bf);
                  byte_bc = simd_and(r1000_1fff_tmp147, r1000_1fff_tmp74);
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  byte_range_80_95 = simd_andc(r1000_1fff_tmp75, r1000_1fff_tmp109);
                  carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(99), r1000_1fff_tmp158));
                  sequence_e1_bc_byte_range_80_95 = simd_and(r1000_1fff_tmp158, byte_range_80_95);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_bc_byte_range_80_95);
                  byte_bd = simd_and(r1000_1fff_tmp147, r1000_1fff_tmp51);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  byte_range_80_85 = simd_andc(r1000_1fff_tmp123, r1000_1fff_tmp16);
                  carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(100), r1000_1fff_tmp159));
                  sequence_e1_bd_byte_range_80_85 = simd_and(r1000_1fff_tmp159, byte_range_80_85);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_bd_byte_range_80_85);
                  byte_be = simd_and(r1000_1fff_tmp147, r1000_1fff_tmp41);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(101), r1000_1fff_tmp160));
                  sequence_e1_be_byte_range_80_b4 = simd_and(r1000_1fff_tmp160, byte_range_80_b4);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_be_byte_range_80_b4);
                  byte_bf = simd_and(r1000_1fff_tmp147, r1000_1fff_tmp10);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  r1000_1fff_tmp161 = simd_not(tmp6);
                  r1000_1fff_tmp162 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp161), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_82_84 = simd_and(r1000_1fff_tmp123, r1000_1fff_tmp162);
                  carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(102), r1000_1fff_tmp163));
                  sequence_e1_bf_byte_range_82_84 = simd_and(r1000_1fff_tmp163, byte_range_82_84);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e1_bf_byte_range_82_84);
                }
                else {
                  carryQ.CarryDequeueEnqueue(57, 46);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(26, 77);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp5);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(103, 26))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp5);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(103, 14))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, tmp5);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[103] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(103), r2000_2fff_tmp5));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp5, byte_81);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp6);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp9 = simd_and(r2000_2fff_tmp8, tmp1);
                  r2000_2fff_tmp10 = simd_or(r2000_2fff_tmp4, r2000_2fff_tmp9);
                  cc_range_2071_207f_3 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp10);
                  carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(104), sequence_e2_81_adv));
                  r2000_2fff_tmp11 = simd_and(sequence_e2_81_adv, cc_range_2071_207f_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r2000_2fff_tmp11);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp13 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp12);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_5, tmp6);
                  r2000_2fff_tmp15 = simd_and(basis_bits.bit_4, r2000_2fff_tmp14);
                  byte_range_90_9c = simd_andc(r2000_2fff_tmp13, r2000_2fff_tmp15);
                  carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(105), sequence_e2_82_adv));
                  r2000_2fff_tmp16 = simd_and(sequence_e2_82_adv, byte_range_90_9c);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r2000_2fff_tmp16);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp2);
                  sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
                  r2000_2fff_tmp17 = simd_and(r800_ffff_tmp1, tmp1);
                  r2000_2fff_tmp18 = simd_or(r2000_4dff_tmp2, r2000_2fff_tmp17);
                  r2000_2fff_tmp19 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp18);
                  r2000_2fff_tmp20 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp21 = simd_not(tmp5);
                  r2000_2fff_tmp22 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp23 = simd_and(basis_bits.bit_4, r2000_2fff_tmp22);
                  r2000_2fff_tmp24 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp21), simd_andc(r2000_2fff_tmp23, basis_bits.bit_3));
                  r2000_2fff_tmp25 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp24);
                  r2000_2fff_tmp26 = simd_or(r2000_2fff_tmp19, r2000_2fff_tmp25);
                  r2000_2fff_tmp27 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp3);
                  r2000_2fff_tmp28 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp27);
                  r2000_2fff_tmp29 = simd_or(r2000_2fff_tmp26, r2000_2fff_tmp28);
                  r2000_2fff_tmp30 = simd_and(r2000_2fff_tmp13, basis_bits.bit_4);
                  r2000_2fff_tmp31 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp32 = simd_andc(r2000_2fff_tmp30, r2000_2fff_tmp31);
                  r2000_2fff_tmp33 = simd_or(r2000_2fff_tmp29, r2000_2fff_tmp32);
                  r2000_2fff_tmp34 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r2000_2fff_tmp35 = simd_and(r2000_2fff_tmp34, r800_ffff_tmp2);
                  r2000_2fff_tmp36 = simd_or(r2000_2fff_tmp33, r2000_2fff_tmp35);
                  r2000_2fff_tmp37 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  r2000_2fff_tmp38 = simd_and(r2000_2fff_tmp34, r2000_2fff_tmp37);
                  r2000_2fff_tmp39 = simd_or(r2000_2fff_tmp36, r2000_2fff_tmp38);
                  r2000_2fff_tmp40 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp41 = simd_andc(r2000_2fff_tmp40, tmp6);
                  r2000_2fff_tmp42 = simd_and(r2000_2fff_tmp34, r2000_2fff_tmp41);
                  r2000_2fff_tmp43 = simd_or(r2000_2fff_tmp39, r2000_2fff_tmp42);
                  r2000_2fff_tmp44 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp45 = simd_xor(basis_bits.bit_3, r2000_2fff_tmp23);
                  r2000_2fff_tmp46 = simd_and(r2000_2fff_tmp44, r2000_2fff_tmp45);
                  r2000_2fff_tmp47 = simd_or(r2000_2fff_tmp43, r2000_2fff_tmp46);
                  r2000_2fff_tmp48 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp8);
                  cc_range_2102_213c_3 = simd_or(r2000_2fff_tmp47, r2000_2fff_tmp48);
                  carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(106), sequence_e2_84_adv));
                  r2000_2fff_tmp49 = simd_and(sequence_e2_84_adv, cc_range_2102_213c_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r2000_2fff_tmp49);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp27);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp50 = simd_not(r2000_2fff_tmp22);
                  r2000_2fff_tmp51 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp50), simd_andc(r2000_2fff_tmp14, basis_bits.bit_4));
                  r2000_2fff_tmp52 = simd_and(r2000_2fff_tmp8, r2000_4dff_tmp1);
                  r2000_2fff_tmp53 = simd_or(r2000_2fff_tmp51, r2000_2fff_tmp52);
                  r2000_2fff_tmp54 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp53);
                  cc_range_2145_2160_3 = simd_or(r2000_2fff_tmp54, r2000_2fff_tmp44);
                  carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(107), sequence_e2_85_adv));
                  r2000_2fff_tmp55 = simd_and(sequence_e2_85_adv, cc_range_2145_2160_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r2000_2fff_tmp55);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp37);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp56 = simd_or(basis_bits.bit_5, tmp6);
                  r2000_2fff_tmp57 = simd_and(basis_bits.bit_4, r2000_2fff_tmp56);
                  byte_range_80_88 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp57);
                  carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(108), sequence_e2_86_adv));
                  r2000_2fff_tmp58 = simd_and(sequence_e2_86_adv, byte_range_80_88);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r2000_2fff_tmp58);
                  byte_b0 = simd_andc(r2000_2fff_tmp7, tmp7);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  r2000_2fff_tmp59 = simd_or(basis_bits.bit_3, r2000_2fff_tmp9);
                  r2000_2fff_tmp60 = simd_and(basis_bits.bit_2, r2000_2fff_tmp59);
                  r2000_2fff_tmp61 = simd_andc(r2000_2fff_tmp60, r2000_2fff_tmp6);
                  cc_range_2c00_2c30_3 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp61);
                  carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(109), sequence_e2_b0_adv));
                  r2000_2fff_tmp62 = simd_and(sequence_e2_b0_adv, cc_range_2c00_2c30_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r2000_2fff_tmp62);
                  byte_b1 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp4);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp63 = simd_and(basis_bits.bit_3, r2000_2fff_tmp9);
                  r2000_2fff_tmp64 = simd_andc(r2000_2fff_tmp20, r2000_2fff_tmp63);
                  cc_range_2c40_2c60_3 = simd_or(r2000_2fff_tmp64, r2000_2fff_tmp44);
                  carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(110), sequence_e2_b1_adv));
                  r2000_2fff_tmp65 = simd_and(sequence_e2_b1_adv, cc_range_2c40_2c60_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r2000_2fff_tmp65);
                  byte_b2 = simd_and(r2000_2fff_tmp7, r2000_4dff_tmp2);
                  sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(111), sequence_e2_b2_adv));
                  r2000_2fff_tmp66 = simd_and(sequence_e2_b2_adv, byte_range_80_bf);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r2000_2fff_tmp66);
                  r2000_2fff_tmp67 = simd_and(byte_range_80_bf, r2000_2fff_tmp6);
                  r2000_2fff_tmp68 = simd_andc(tmp1, tmp5);
                  byte_b3 = simd_and(r2000_2fff_tmp67, r2000_2fff_tmp68);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp69 = simd_or(basis_bits.bit_4, r2000_2fff_tmp14);
                  r2000_2fff_tmp70 = simd_or(basis_bits.bit_3, r2000_2fff_tmp69);
                  r2000_2fff_tmp71 = simd_and(basis_bits.bit_2, r2000_2fff_tmp70);
                  r2000_2fff_tmp72 = simd_andc(byte_range_80_bf, r2000_2fff_tmp71);
                  r2000_2fff_tmp73 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r2000_2fff_tmp74 = simd_and(r2000_2fff_tmp73, basis_bits.bit_4);
                  r2000_2fff_tmp75 = simd_xor(basis_bits.bit_5, tmp1);
                  r2000_2fff_tmp76 = simd_and(r2000_2fff_tmp74, r2000_2fff_tmp75);
                  r2000_2fff_tmp77 = simd_or(r2000_2fff_tmp72, r2000_2fff_tmp76);
                  r2000_2fff_tmp78 = simd_and(r2000_2fff_tmp67, r800_4dff_tmp2);
                  cc_range_2cc0_2cf2_3 = simd_or(r2000_2fff_tmp77, r2000_2fff_tmp78);
                  carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(112), sequence_e2_b3_adv));
                  r2000_2fff_tmp79 = simd_and(sequence_e2_b3_adv, cc_range_2cc0_2cf2_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r2000_2fff_tmp79);
                  byte_b4 = simd_and(r2000_2fff_tmp67, r800_ffff_tmp2);
                  sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
                  r2000_2fff_tmp80 = simd_or(basis_bits.bit_4, r2000_2fff_tmp31);
                  r2000_2fff_tmp81 = simd_or(basis_bits.bit_3, r2000_2fff_tmp80);
                  r2000_2fff_tmp82 = simd_and(basis_bits.bit_2, r2000_2fff_tmp81);
                  r2000_2fff_tmp83 = simd_andc(byte_range_80_bf, r2000_2fff_tmp82);
                  r2000_2fff_tmp84 = simd_and(r2000_2fff_tmp73, r2000_2fff_tmp17);
                  r2000_2fff_tmp85 = simd_or(r2000_2fff_tmp83, r2000_2fff_tmp84);
                  r2000_2fff_tmp86 = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp3);
                  r2000_2fff_tmp87 = simd_and(r2000_2fff_tmp73, r2000_2fff_tmp86);
                  r2000_2fff_tmp88 = simd_or(r2000_2fff_tmp85, r2000_2fff_tmp87);
                  cc_range_2d00_2d30_3 = simd_or(r2000_2fff_tmp88, r2000_2fff_tmp67);
                  carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(113), sequence_e2_b4_adv));
                  r2000_2fff_tmp89 = simd_and(sequence_e2_b4_adv, cc_range_2d00_2d30_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r2000_2fff_tmp89);
                  byte_b5 = simd_and(r2000_2fff_tmp67, r2000_2fff_tmp27);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  r2000_2fff_tmp90 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
                  r2000_2fff_tmp91 = simd_and(basis_bits.bit_2, r2000_2fff_tmp90);
                  r2000_2fff_tmp92 = simd_andc(byte_range_80_bf, r2000_2fff_tmp91);
                  r2000_2fff_tmp93 = simd_and(r2000_2fff_tmp73, r2000_2fff_tmp9);
                  cc_range_2d40_2d6f_3 = simd_or(r2000_2fff_tmp92, r2000_2fff_tmp93);
                  carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(114), sequence_e2_b5_adv));
                  r2000_2fff_tmp94 = simd_and(sequence_e2_b5_adv, cc_range_2d40_2d6f_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r2000_2fff_tmp94);
                  byte_b6 = simd_and(r2000_2fff_tmp67, r2000_2fff_tmp37);
                  sequence_e2_b6 = simd_and(byte_e2_adv, byte_b6);
                  r2000_2fff_tmp95 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r2000_2fff_tmp96 = simd_and(basis_bits.bit_5, tmp1);
                  r2000_2fff_tmp97 = simd_or(basis_bits.bit_4, r2000_2fff_tmp96);
                  r2000_2fff_tmp98 = simd_and(basis_bits.bit_3, r2000_2fff_tmp97);
                  r2000_2fff_tmp99 = simd_andc(r2000_2fff_tmp95, r2000_2fff_tmp98);
                  r2000_2fff_tmp100 = simd_andc(r2000_2fff_tmp73, basis_bits.bit_4);
                  r2000_2fff_tmp101 = simd_andc(r2000_2fff_tmp100, r2000_2fff_tmp96);
                  r2000_2fff_tmp102 = simd_or(r2000_2fff_tmp99, r2000_2fff_tmp101);
                  r2000_2fff_tmp103 = simd_andc(r2000_2fff_tmp74, r2000_2fff_tmp96);
                  r2000_2fff_tmp104 = simd_or(r2000_2fff_tmp102, r2000_2fff_tmp103);
                  r2000_2fff_tmp105 = simd_andc(r2000_2fff_tmp67, basis_bits.bit_4);
                  r2000_2fff_tmp106 = simd_andc(r2000_2fff_tmp105, r2000_2fff_tmp96);
                  r2000_2fff_tmp107 = simd_or(r2000_2fff_tmp104, r2000_2fff_tmp106);
                  r2000_2fff_tmp108 = simd_and(r2000_2fff_tmp67, basis_bits.bit_4);
                  r2000_2fff_tmp109 = simd_andc(r2000_2fff_tmp108, r2000_2fff_tmp96);
                  cc_range_2d80_2db8_3 = simd_or(r2000_2fff_tmp107, r2000_2fff_tmp109);
                  carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_e2_b6, carryQ.get_carry_in(115), sequence_e2_b6_adv));
                  r2000_2fff_tmp110 = simd_and(sequence_e2_b6_adv, cc_range_2d80_2db8_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r2000_2fff_tmp110);
                  byte_b7 = simd_and(r2000_2fff_tmp67, r2000_2fff_tmp17);
                  sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
                  r2000_2fff_tmp111 = simd_andc(byte_range_80_bf, r2000_2fff_tmp1);
                  r2000_2fff_tmp112 = simd_and(byte_range_80_bf, r2000_2fff_tmp12);
                  r2000_2fff_tmp113 = simd_andc(r2000_2fff_tmp112, basis_bits.bit_4);
                  r2000_2fff_tmp114 = simd_or(r2000_2fff_tmp111, r2000_2fff_tmp113);
                  r2000_2fff_tmp115 = simd_and(r2000_2fff_tmp112, basis_bits.bit_4);
                  r2000_2fff_tmp116 = simd_or(r2000_2fff_tmp114, r2000_2fff_tmp115);
                  cc_range_2dc0_2dd8_3 = simd_andc(r2000_2fff_tmp116, r2000_2fff_tmp96);
                  carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(116), sequence_e2_b7_adv));
                  r2000_2fff_tmp117 = simd_and(sequence_e2_b7_adv, cc_range_2dc0_2dd8_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r2000_2fff_tmp117);
                }
                else {
                  carryQ.CarryDequeueEnqueue(103, 14);
                }
                r2000_4dff_tmp3 = simd_andc(tmp1, tmp5);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp3);
                r2000_4dff_tmp4 = simd_or(byte_e3, r800_ffff_tmp7);
                if ((bitblock::any(r2000_4dff_tmp4) || carryQ.CarryTest(117, 12))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp3, r3000_4dff_tmp1);
                  byte_80 = simd_andc(r3000_4dff_tmp2, tmp7);
                  carryQ.cq[117] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(117), r3000_4dff_tmp3));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp3, byte_80);
                  byte_e3_adv = r3000_4dff_tmp3;
                  r3000_4dff_tmp4 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp1);
                  r3000_4dff_tmp5 = simd_and(r3000_4dff_tmp4, tmp6);
                  r3000_4dff_tmp6 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r3000_4dff_tmp7 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp8 = simd_not(r3000_4dff_tmp7);
                  r3000_4dff_tmp9 = simd_or(basis_bits.bit_5, tmp6);
                  r3000_4dff_tmp10 = simd_or(simd_and(basis_bits.bit_4, r3000_4dff_tmp8), simd_andc(r3000_4dff_tmp9, basis_bits.bit_4));
                  r3000_4dff_tmp11 = simd_and(r3000_4dff_tmp6, r3000_4dff_tmp10);
                  r3000_4dff_tmp12 = simd_or(r3000_4dff_tmp5, r3000_4dff_tmp11);
                  r3000_4dff_tmp13 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp14 = simd_and(r800_ffff_tmp3, r3000_4dff_tmp13);
                  r3000_4dff_tmp15 = simd_andc(r3000_4dff_tmp14, basis_bits.bit_4);
                  r3000_4dff_tmp16 = simd_not(basis_bits.bit_6);
                  r3000_4dff_tmp17 = simd_or(simd_and(basis_bits.bit_5, r3000_4dff_tmp16), simd_andc(tmp6, basis_bits.bit_5));
                  r3000_4dff_tmp18 = simd_and(r3000_4dff_tmp15, r3000_4dff_tmp17);
                  r3000_4dff_tmp19 = simd_or(r3000_4dff_tmp12, r3000_4dff_tmp18);
                  r3000_4dff_tmp20 = simd_and(r3000_4dff_tmp14, basis_bits.bit_4);
                  r3000_4dff_tmp21 = simd_and(basis_bits.bit_5, tmp6);
                  r3000_4dff_tmp22 = simd_andc(r3000_4dff_tmp20, r3000_4dff_tmp21);
                  cc_range_3005_3038_3 = simd_or(r3000_4dff_tmp19, r3000_4dff_tmp22);
                  carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(118), sequence_e3_80_adv));
                  r3000_4dff_tmp23 = simd_and(sequence_e3_80_adv, cc_range_3005_3038_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r3000_4dff_tmp23);
                  r3000_4dff_tmp24 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp25 = simd_andc(r3000_4dff_tmp24, tmp5);
                  byte_81 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp25);
                  sequence_e3_81 = simd_and(byte_e3_adv, byte_81);
                  r3000_4dff_tmp26 = simd_or(basis_bits.bit_3, tmp7);
                  r3000_4dff_tmp27 = simd_or(basis_bits.bit_2, r3000_4dff_tmp26);
                  byte_range_81_bf = simd_and(r800_ffff_tmp3, r3000_4dff_tmp27);
                  carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_e3_81, carryQ.get_carry_in(119), sequence_e3_81_adv));
                  r3000_4dff_tmp28 = simd_and(sequence_e3_81_adv, byte_range_81_bf);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r3000_4dff_tmp28);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp29 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r3000_4dff_tmp30 = simd_and(basis_bits.bit_5, tmp1);
                  r3000_4dff_tmp31 = simd_or(basis_bits.bit_4, r3000_4dff_tmp30);
                  r3000_4dff_tmp32 = simd_and(basis_bits.bit_3, r3000_4dff_tmp31);
                  r3000_4dff_tmp33 = simd_andc(r3000_4dff_tmp29, r3000_4dff_tmp32);
                  r3000_4dff_tmp34 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp35 = simd_and(r800_ffff_tmp3, r3000_4dff_tmp34);
                  r3000_4dff_tmp36 = simd_and(r3000_4dff_tmp35, basis_bits.bit_4);
                  r3000_4dff_tmp37 = simd_and(r3000_4dff_tmp36, tmp2);
                  r3000_4dff_tmp38 = simd_or(r3000_4dff_tmp33, r3000_4dff_tmp37);
                  r3000_4dff_tmp39 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r3000_4dff_tmp40 = simd_and(r3000_4dff_tmp39, r3000_4dff_tmp26);
                  cc_range_3080_30a1_3 = simd_or(r3000_4dff_tmp38, r3000_4dff_tmp40);
                  carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(120), sequence_e3_82_adv));
                  r3000_4dff_tmp41 = simd_and(sequence_e3_82_adv, cc_range_3080_30a1_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r3000_4dff_tmp41);
                  byte_83 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp3);
                  sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
                  r3000_4dff_tmp42 = simd_and(basis_bits.bit_3, tmp3);
                  r3000_4dff_tmp43 = simd_and(basis_bits.bit_2, r3000_4dff_tmp42);
                  r3000_4dff_tmp44 = simd_andc(r800_ffff_tmp3, r3000_4dff_tmp43);
                  r3000_4dff_tmp45 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp46 = simd_and(r3000_4dff_tmp14, r3000_4dff_tmp45);
                  cc_range_30c0_30fc_3 = simd_or(r3000_4dff_tmp44, r3000_4dff_tmp46);
                  carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(121), sequence_e3_83_adv));
                  r3000_4dff_tmp47 = simd_and(sequence_e3_83_adv, cc_range_30c0_30fc_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r3000_4dff_tmp47);
                  byte_84 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp2);
                  sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
                  r3000_4dff_tmp48 = simd_and(r3000_4dff_tmp45, basis_bits.bit_6);
                  r3000_4dff_tmp49 = simd_or(basis_bits.bit_3, r3000_4dff_tmp48);
                  r3000_4dff_tmp50 = simd_not(r3000_4dff_tmp49);
                  r3000_4dff_tmp51 = simd_or(basis_bits.bit_4, r3000_4dff_tmp21);
                  r3000_4dff_tmp52 = simd_or(basis_bits.bit_3, r3000_4dff_tmp51);
                  r3000_4dff_tmp53 = simd_or(simd_and(basis_bits.bit_2, r3000_4dff_tmp50), simd_andc(r3000_4dff_tmp52, basis_bits.bit_2));
                  r3000_4dff_tmp54 = simd_and(r800_ffff_tmp3, r3000_4dff_tmp53);
                  r3000_4dff_tmp55 = simd_or(basis_bits.bit_4, r3000_4dff_tmp9);
                  r3000_4dff_tmp56 = simd_and(r3000_4dff_tmp14, r3000_4dff_tmp55);
                  cc_range_3105_3131_3 = simd_or(r3000_4dff_tmp54, r3000_4dff_tmp56);
                  carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_e3_84, carryQ.get_carry_in(122), sequence_e3_84_adv));
                  r3000_4dff_tmp57 = simd_and(sequence_e3_84_adv, cc_range_3105_3131_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r3000_4dff_tmp57);
                  r3000_4dff_tmp58 = simd_and(r800_ffff_tmp1, r3000_4dff_tmp24);
                  byte_85 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp58);
                  sequence_e3_85 = simd_and(byte_e3_adv, byte_85);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_e3_85, carryQ.get_carry_in(123), sequence_e3_85_adv));
                  r3000_4dff_tmp59 = simd_and(sequence_e3_85_adv, byte_range_80_bf);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r3000_4dff_tmp59);
                  r3000_4dff_tmp60 = simd_andc(byte_range_80_bf, r3000_4dff_tmp1);
                  r3000_4dff_tmp61 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  byte_86 = simd_and(r3000_4dff_tmp60, r3000_4dff_tmp61);
                  sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
                  r3000_4dff_tmp62 = simd_and(basis_bits.bit_4, r3000_4dff_tmp30);
                  r3000_4dff_tmp63 = simd_andc(r3000_4dff_tmp60, r3000_4dff_tmp62);
                  r3000_4dff_tmp64 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  r3000_4dff_tmp65 = simd_andc(r3000_4dff_tmp64, r3000_4dff_tmp42);
                  cc_range_3180_31a0_3 = simd_or(r3000_4dff_tmp63, r3000_4dff_tmp65);
                  carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(124), sequence_e3_86_adv));
                  r3000_4dff_tmp66 = simd_and(sequence_e3_86_adv, cc_range_3180_31a0_3);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r3000_4dff_tmp66);
                  r3000_4dff_tmp67 = simd_and(r800_ffff_tmp1, tmp1);
                  byte_87 = simd_and(r3000_4dff_tmp60, r3000_4dff_tmp67);
                  sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
                  byte_range_b0_bf = simd_and(byte_range_80_bf, r3000_4dff_tmp13);
                  carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(125), sequence_e3_87_adv));
                  r3000_4dff_tmp68 = simd_and(sequence_e3_87_adv, byte_range_b0_bf);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r3000_4dff_tmp68);
                  byte_range_90_bf = simd_and(byte_range_80_bf, r3000_4dff_tmp1);
                  byte_e3_byte_range_90_bf = simd_and(byte_e3_adv, byte_range_90_bf);
                  carryQ.cq[126] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_90_bf, carryQ.get_carry_in(126), r3000_4dff_tmp69));
                  byte_e3_byte_range_90_bf_sfx = simd_and(r3000_4dff_tmp69, byte_range_80_bf);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, byte_e3_byte_range_90_bf_sfx);
                  r3000_4dff_tmp70 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp71 = simd_or(basis_bits.bit_4, r3000_4dff_tmp70);
                  r3000_4dff_tmp72 = simd_and(basis_bits.bit_3, r3000_4dff_tmp71);
                  r3000_4dff_tmp73 = simd_and(basis_bits.bit_2, r3000_4dff_tmp72);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r3000_4dff_tmp73);
                  byte_e4_byte_range_80_b5 = simd_and(r800_ffff_tmp6, byte_range_80_b5);
                  carryQ.cq[127] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_80_b5, carryQ.get_carry_in(127), r3000_4dff_tmp74));
                  byte_e4_byte_range_80_b5_sfx = simd_and(r3000_4dff_tmp74, byte_range_80_bf);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, byte_e4_byte_range_80_b5_sfx);
                  byte_b6 = simd_and(byte_range_b0_bf, r3000_4dff_tmp61);
                  byte_e4_adv = r800_ffff_tmp6;
                  sequence_e4_b6 = simd_and(byte_e4_adv, byte_b6);
                  carryQ.cq[128] = carryout2carry(pablo_blk_Advance(sequence_e4_b6, carryQ.get_carry_in(128), r3000_4dff_tmp75));
                  sequence_e4_b6_byte_range_80_b5 = simd_and(r3000_4dff_tmp75, byte_range_80_b5);
                  struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e4_b6_byte_range_80_b5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(117, 12);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(103, 26);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(26, 103);
            }
            r800_ffff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r800_ffff_tmp10 = simd_and(r800_ffff_tmp3, r800_ffff_tmp9);
            byte_range_b8_bf = simd_and(r800_ffff_tmp10, basis_bits.bit_4);
            r800_ffff_tmp11 = simd_and(r800_ffff_tmp6, byte_range_b8_bf);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r800_ffff_tmp13 = simd_not(r800_ffff_tmp12);
            r800_ffff_tmp14 = simd_and(basis_bits.bit_5, tmp6);
            r800_ffff_tmp15 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp13), simd_andc(r800_ffff_tmp14, basis_bits.bit_4));
            byte_range_e5_e9 = simd_and(byte_range_e0_ef, r800_ffff_tmp15);
            r800_ffff_tmp16 = simd_or(r800_ffff_tmp11, byte_range_e5_e9);
            if ((bitblock::any(r800_ffff_tmp16) || carryQ.CarryTest(129, 5))) {
              byte_e4_byte_range_b8_bf = r800_ffff_tmp11;
              byte_range_80_bf = r800_ffff_tmp3;
              carryQ.cq[129] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_b8_bf, carryQ.get_carry_in(129), r4e00_9fff_tmp1));
              byte_e4_byte_range_b8_bf_sfx = simd_and(r4e00_9fff_tmp1, byte_range_80_bf);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, byte_e4_byte_range_b8_bf_sfx);
              r4e00_9fff_tmp2 = simd_or(basis_bits.bit_5, tmp6);
              r4e00_9fff_tmp3 = simd_not(r4e00_9fff_tmp2);
              r4e00_9fff_tmp4 = simd_or(simd_and(basis_bits.bit_4, r4e00_9fff_tmp3), simd_andc(r800_ffff_tmp14, basis_bits.bit_4));
              byte_range_e5_e8 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp4);
              carryQ.cq[130] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8, carryQ.get_carry_in(130), r4e00_9fff_tmp5));
              byte_range_e5_e8_sfx = simd_and(r4e00_9fff_tmp5, byte_range_80_bf);
              carryQ.cq[131] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8_sfx, carryQ.get_carry_in(131), r4e00_9fff_tmp6));
              byte_range_e5_e8_sfx_sfx = simd_and(r4e00_9fff_tmp6, byte_range_80_bf);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, byte_range_e5_e8_sfx_sfx);
              r4e00_9fff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              r4e00_9fff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r4e00_9fff_tmp9 = simd_and(r4e00_9fff_tmp7, r4e00_9fff_tmp8);
              byte_e9 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp9);
              r4e00_9fff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              r4e00_9fff_tmp11 = simd_andc(byte_range_80_bf, r4e00_9fff_tmp10);
              byte_80 = simd_andc(r4e00_9fff_tmp11, tmp7);
              carryQ.cq[132] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(132), byte_e9_adv));
              sequence_e9_80 = simd_and(byte_e9_adv, byte_80);
              r4e00_9fff_tmp12 = simd_and(basis_bits.bit_4, r800_ffff_tmp14);
              byte_range_80_8c = simd_andc(r4e00_9fff_tmp11, r4e00_9fff_tmp12);
              carryQ.cq[133] = carryout2carry(pablo_blk_Advance(sequence_e9_80, carryQ.get_carry_in(133), r4e00_9fff_tmp13));
              sequence_e9_80_byte_range_80_8c = simd_and(r4e00_9fff_tmp13, byte_range_80_8c);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_e9_80_byte_range_80_8c);
            }
            else {
              carryQ.CarryDequeueEnqueue(129, 5);
            }
            r800_ffff_tmp17 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            byte_range_ea_ef = simd_and(r800_ffff_tmp17, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(134, 54))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_or(tmp5, basis_bits.bit_6);
              ra000_ffff_tmp6 = simd_and(basis_bits.bit_3, ra000_ffff_tmp5);
              byte_range_80_91 = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp6);
              carryQ.cq[134] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(134), ra000_ffff_tmp7));
              byte_ea_byte_range_80_91 = simd_and(ra000_ffff_tmp7, byte_range_80_91);
              byte_range_80_bf = r800_ffff_tmp3;
              carryQ.cq[135] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_80_91, carryQ.get_carry_in(135), ra000_ffff_tmp8));
              byte_ea_byte_range_80_91_sfx = simd_and(ra000_ffff_tmp8, byte_range_80_bf);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, byte_ea_byte_range_80_91_sfx);
              ra000_ffff_tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp10 = simd_and(byte_range_80_bf, ra000_ffff_tmp9);
              ra000_ffff_tmp11 = simd_andc(ra000_ffff_tmp2, tmp5);
              byte_92 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp11);
              byte_ea_adv = ra000_ffff_tmp7;
              sequence_ea_92 = simd_and(byte_ea_adv, byte_92);
              ra000_ffff_tmp12 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp13 = simd_andc(byte_range_80_bf, ra000_ffff_tmp12);
              ra000_ffff_tmp14 = simd_and(basis_bits.bit_4, r800_ffff_tmp14);
              byte_range_80_8c = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp14);
              carryQ.cq[136] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(136), ra000_ffff_tmp15));
              sequence_ea_92_byte_range_80_8c = simd_and(ra000_ffff_tmp15, byte_range_80_8c);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_92_byte_range_80_8c);
              ra000_ffff_tmp16 = simd_andc(tmp1, tmp5);
              byte_93 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp16);
              sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
              ra000_ffff_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp18 = simd_and(ra000_ffff_tmp17, basis_bits.bit_6);
              ra000_ffff_tmp19 = simd_and(basis_bits.bit_3, ra000_ffff_tmp18);
              ra000_ffff_tmp20 = simd_not(ra000_ffff_tmp19);
              ra000_ffff_tmp21 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp20), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
              byte_range_90_bd = simd_and(byte_range_80_bf, ra000_ffff_tmp21);
              carryQ.cq[137] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(137), ra000_ffff_tmp22));
              sequence_ea_93_byte_range_90_bd = simd_and(ra000_ffff_tmp22, byte_range_90_bd);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_93_byte_range_90_bd);
              byte_94 = simd_and(ra000_ffff_tmp10, r800_ffff_tmp2);
              sequence_ea_94 = simd_and(byte_ea_adv, byte_94);
              carryQ.cq[138] = carryout2carry(pablo_blk_Advance(sequence_ea_94, carryQ.get_carry_in(138), ra000_ffff_tmp23));
              sequence_ea_94_byte_range_80_bf = simd_and(ra000_ffff_tmp23, byte_range_80_bf);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_94_byte_range_80_bf);
              ra000_ffff_tmp24 = simd_andc(ra000_ffff_tmp1, tmp6);
              byte_98 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp24);
              sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
              carryQ.cq[139] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(139), ra000_ffff_tmp25));
              sequence_ea_98_byte_range_80_8c = simd_and(ra000_ffff_tmp25, byte_range_80_8c);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_98_byte_range_80_8c);
              ra000_ffff_tmp26 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp27 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp26);
              byte_99 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp27);
              sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
              ra000_ffff_tmp28 = simd_and(ra000_ffff_tmp17, tmp1);
              ra000_ffff_tmp29 = simd_or(basis_bits.bit_3, ra000_ffff_tmp28);
              ra000_ffff_tmp30 = simd_and(basis_bits.bit_2, ra000_ffff_tmp29);
              byte_range_80_ae = simd_andc(byte_range_80_bf, ra000_ffff_tmp30);
              carryQ.cq[140] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(140), ra000_ffff_tmp31));
              sequence_ea_99_byte_range_80_ae = simd_and(ra000_ffff_tmp31, byte_range_80_ae);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_99_byte_range_80_ae);
              byte_9a = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp32 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              byte_range_80_9d = simd_andc(ra000_ffff_tmp32, ra000_ffff_tmp19);
              carryQ.cq[141] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(141), ra000_ffff_tmp33));
              sequence_ea_9a_byte_range_80_9d = simd_and(ra000_ffff_tmp33, byte_range_80_9d);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_9a_byte_range_80_9d);
              ra000_ffff_tmp34 = simd_and(ra000_ffff_tmp1, tmp1);
              byte_9b = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp34);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              byte_range_80_af = simd_andc(byte_range_80_bf, r800_ffff_tmp9);
              carryQ.cq[142] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(142), ra000_ffff_tmp35));
              sequence_ea_9b_byte_range_80_af = simd_and(ra000_ffff_tmp35, byte_range_80_af);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_9b_byte_range_80_af);
              ra000_ffff_tmp36 = simd_andc(ra000_ffff_tmp17, tmp6);
              byte_9c = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp36);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              ra000_ffff_tmp37 = simd_and(basis_bits.bit_5, tmp1);
              ra000_ffff_tmp38 = simd_or(basis_bits.bit_4, ra000_ffff_tmp37);
              byte_range_97_9f = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp38);
              carryQ.cq[143] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(143), ra000_ffff_tmp39));
              sequence_ea_9c_byte_range_97_9f = simd_and(ra000_ffff_tmp39, byte_range_97_9f);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_9c_byte_range_97_9f);
              ra000_ffff_tmp40 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp26);
              byte_9d = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp40);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              carryQ.cq[144] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(144), ra000_ffff_tmp41));
              sequence_ea_9d_byte_range_80_bf = simd_and(ra000_ffff_tmp41, byte_range_80_bf);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_9d_byte_range_80_bf);
              ra000_ffff_tmp42 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp42);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp43 = simd_or(basis_bits.bit_5, tmp6);
              ra000_ffff_tmp44 = simd_and(basis_bits.bit_4, ra000_ffff_tmp43);
              byte_range_80_88 = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp44);
              carryQ.cq[145] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(145), ra000_ffff_tmp45));
              sequence_ea_9e_byte_range_80_88 = simd_and(ra000_ffff_tmp45, byte_range_80_88);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_9e_byte_range_80_88);
              byte_9f = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp28);
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              ra000_ffff_tmp46 = simd_and(byte_range_80_bf, r800_ffff_tmp9);
              byte_range_b7_bf = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp38);
              carryQ.cq[146] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(146), ra000_ffff_tmp47));
              sequence_ea_9f_byte_range_b7_bf = simd_and(ra000_ffff_tmp47, byte_range_b7_bf);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_9f_byte_range_b7_bf);
              ra000_ffff_tmp48 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              byte_a0 = simd_andc(ra000_ffff_tmp48, tmp7);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              byte_range_80_81 = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp5);
              carryQ.cq[147] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(147), ra000_ffff_tmp49));
              sequence_ea_a0_byte_range_80_81 = simd_and(ra000_ffff_tmp49, byte_range_80_81);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_a0_byte_range_80_81);
              ra000_ffff_tmp50 = simd_andc(ra000_ffff_tmp26, tmp5);
              byte_a1 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp50);
              sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
              ra000_ffff_tmp51 = simd_and(basis_bits.bit_3, tmp5);
              ra000_ffff_tmp52 = simd_and(basis_bits.bit_2, ra000_ffff_tmp51);
              byte_range_80_b3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp52);
              carryQ.cq[148] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(148), ra000_ffff_tmp53));
              sequence_ea_a1_byte_range_80_b3 = simd_and(ra000_ffff_tmp53, byte_range_80_b3);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_a1_byte_range_80_b3);
              byte_a2 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp11);
              sequence_ea_a2 = simd_and(byte_ea_adv, byte_a2);
              ra000_ffff_tmp54 = simd_not(ra000_ffff_tmp51);
              ra000_ffff_tmp55 = simd_or(basis_bits.bit_3, ra000_ffff_tmp5);
              ra000_ffff_tmp56 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp54), simd_andc(ra000_ffff_tmp55, basis_bits.bit_2));
              byte_range_82_b3 = simd_and(byte_range_80_bf, ra000_ffff_tmp56);
              carryQ.cq[149] = carryout2carry(pablo_blk_Advance(sequence_ea_a2, carryQ.get_carry_in(149), ra000_ffff_tmp57));
              sequence_ea_a2_byte_range_82_b3 = simd_and(ra000_ffff_tmp57, byte_range_82_b3);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_a2_byte_range_82_b3);
              byte_a3 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp16);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              ra000_ffff_tmp58 = simd_andc(ra000_ffff_tmp46, basis_bits.bit_4);
              byte_range_b2_b7 = simd_and(ra000_ffff_tmp58, r800_ffff_tmp12);
              carryQ.cq[150] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(150), ra000_ffff_tmp59));
              sequence_ea_a3_byte_range_b2_b7 = simd_and(ra000_ffff_tmp59, byte_range_b2_b7);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_a3_byte_range_b2_b7);
              byte_a4 = simd_and(ra000_ffff_tmp48, r800_ffff_tmp2);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              ra000_ffff_tmp60 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp61 = simd_or(basis_bits.bit_4, ra000_ffff_tmp60);
              ra000_ffff_tmp62 = simd_or(basis_bits.bit_3, ra000_ffff_tmp61);
              ra000_ffff_tmp63 = simd_not(ra000_ffff_tmp62);
              ra000_ffff_tmp64 = simd_and(basis_bits.bit_4, r800_ffff_tmp12);
              ra000_ffff_tmp65 = simd_or(basis_bits.bit_3, ra000_ffff_tmp64);
              ra000_ffff_tmp66 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp63), simd_andc(ra000_ffff_tmp65, basis_bits.bit_2));
              byte_range_8a_a5 = simd_and(byte_range_80_bf, ra000_ffff_tmp66);
              carryQ.cq[151] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(151), ra000_ffff_tmp67));
              sequence_ea_a4_byte_range_8a_a5 = simd_and(ra000_ffff_tmp67, byte_range_8a_a5);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_a4_byte_range_8a_a5);
              ra000_ffff_tmp68 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp26);
              byte_a5 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp68);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              ra000_ffff_tmp69 = simd_andc(ra000_ffff_tmp13, basis_bits.bit_4);
              byte_range_80_86 = simd_andc(ra000_ffff_tmp69, ra000_ffff_tmp37);
              carryQ.cq[152] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(152), ra000_ffff_tmp70));
              sequence_ea_a5_byte_range_80_86 = simd_and(ra000_ffff_tmp70, byte_range_80_86);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_a5_byte_range_80_86);
              ra000_ffff_tmp71 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp2);
              byte_a6 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp71);
              sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
              ra000_ffff_tmp72 = simd_or(tmp5, tmp1);
              ra000_ffff_tmp73 = simd_and(basis_bits.bit_3, ra000_ffff_tmp72);
              ra000_ffff_tmp74 = simd_not(ra000_ffff_tmp73);
              ra000_ffff_tmp75 = simd_or(basis_bits.bit_3, tmp5);
              ra000_ffff_tmp76 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp74), simd_andc(ra000_ffff_tmp75, basis_bits.bit_2));
              byte_range_84_b2 = simd_and(byte_range_80_bf, ra000_ffff_tmp76);
              carryQ.cq[153] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(153), ra000_ffff_tmp77));
              sequence_ea_a6_byte_range_84_b2 = simd_and(ra000_ffff_tmp77, byte_range_84_b2);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_a6_byte_range_84_b2);
              ra000_ffff_tmp78 = simd_and(r800_ffff_tmp1, tmp1);
              byte_a7 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp78);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              byte_8f = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp28);
              carryQ.cq[154] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(154), ra000_ffff_tmp79));
              sequence_ea_a7_8f = simd_and(ra000_ffff_tmp79, byte_8f);
              byte_a8 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp24);
              sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
              ra000_ffff_tmp80 = simd_or(basis_bits.bit_3, ra000_ffff_tmp44);
              ra000_ffff_tmp81 = simd_and(basis_bits.bit_2, ra000_ffff_tmp80);
              byte_range_80_a8 = simd_andc(byte_range_80_bf, ra000_ffff_tmp81);
              carryQ.cq[155] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(155), ra000_ffff_tmp82));
              sequence_ea_a8_byte_range_80_a8 = simd_and(ra000_ffff_tmp82, byte_range_80_a8);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_a8_byte_range_80_a8);
              byte_a9 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp27);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              ra000_ffff_tmp83 = simd_andc(ra000_ffff_tmp13, tmp5);
              byte_range_80_82 = simd_andc(ra000_ffff_tmp83, tmp1);
              carryQ.cq[156] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(156), ra000_ffff_tmp84));
              sequence_ea_a9_byte_range_80_82 = simd_and(ra000_ffff_tmp84, byte_range_80_82);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_a9_byte_range_80_82);
              byte_aa = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp3);
              sequence_ea_aa = simd_and(byte_ea_adv, byte_aa);
              carryQ.cq[157] = carryout2carry(pablo_blk_Advance(sequence_ea_aa, carryQ.get_carry_in(157), ra000_ffff_tmp85));
              sequence_ea_aa_byte_range_80_af = simd_and(ra000_ffff_tmp85, byte_range_80_af);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_aa_byte_range_80_af);
              byte_ab = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp34);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              byte_80 = simd_andc(ra000_ffff_tmp13, tmp7);
              carryQ.cq[158] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(158), ra000_ffff_tmp86));
              sequence_ea_ab_80 = simd_and(ra000_ffff_tmp86, byte_80);
              byte_ac = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp36);
              sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
              ra000_ffff_tmp87 = simd_not(tmp1);
              ra000_ffff_tmp88 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp87), simd_andc(tmp6, basis_bits.bit_5));
              byte_range_81_86 = simd_and(ra000_ffff_tmp69, ra000_ffff_tmp88);
              carryQ.cq[159] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(159), ra000_ffff_tmp89));
              sequence_ea_ac_byte_range_81_86 = simd_and(ra000_ffff_tmp89, byte_range_81_86);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_ac_byte_range_81_86);
              byte_ad = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp40);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              ra000_ffff_tmp90 = simd_and(basis_bits.bit_3, tmp3);
              byte_range_80_9a = simd_andc(ra000_ffff_tmp32, ra000_ffff_tmp90);
              carryQ.cq[160] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(160), ra000_ffff_tmp91));
              sequence_ea_ad_byte_range_80_9a = simd_and(ra000_ffff_tmp91, byte_range_80_9a);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_ad_byte_range_80_9a);
              byte_af = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp28);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              ra000_ffff_tmp92 = simd_or(basis_bits.bit_3, ra000_ffff_tmp72);
              ra000_ffff_tmp93 = simd_and(basis_bits.bit_2, ra000_ffff_tmp92);
              byte_range_80_a2 = simd_andc(byte_range_80_bf, ra000_ffff_tmp93);
              carryQ.cq[161] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(161), ra000_ffff_tmp94));
              sequence_ea_af_byte_range_80_a2 = simd_and(ra000_ffff_tmp94, byte_range_80_a2);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_af_byte_range_80_a2);
              byte_b0 = simd_andc(ra000_ffff_tmp46, tmp7);
              sequence_ea_b0 = simd_and(byte_ea_adv, byte_b0);
              carryQ.cq[162] = carryout2carry(pablo_blk_Advance(sequence_ea_b0, carryQ.get_carry_in(162), ra000_ffff_tmp95));
              sequence_ea_b0_byte_range_80_bf = simd_and(ra000_ffff_tmp95, byte_range_80_bf);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ea_b0_byte_range_80_bf);
              ra000_ffff_tmp96 = simd_not(tmp6);
              ra000_ffff_tmp97 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp96), simd_andc(tmp1, basis_bits.bit_5));
              byte_range_eb_ec = simd_and(r800_ffff_tmp17, ra000_ffff_tmp97);
              carryQ.cq[163] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec, carryQ.get_carry_in(163), ra000_ffff_tmp98));
              byte_range_eb_ec_sfx = simd_and(ra000_ffff_tmp98, byte_range_80_bf);
              carryQ.cq[164] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec_sfx, carryQ.get_carry_in(164), ra000_ffff_tmp99));
              byte_range_eb_ec_sfx_sfx = simd_and(ra000_ffff_tmp99, byte_range_80_bf);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, byte_range_eb_ec_sfx_sfx);
              byte_ed = simd_and(byte_range_e0_ef, ra000_ffff_tmp40);
              carryQ.cq[165] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(165), byte_ed_adv));
              sequence_ed_80 = simd_and(byte_ed_adv, byte_80);
              ra000_ffff_tmp100 = simd_and(basis_bits.bit_2, ra000_ffff_tmp75);
              byte_range_80_a3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp100);
              carryQ.cq[166] = carryout2carry(pablo_blk_Advance(sequence_ed_80, carryQ.get_carry_in(166), ra000_ffff_tmp101));
              sequence_ed_80_byte_range_80_a3 = simd_and(ra000_ffff_tmp101, byte_range_80_a3);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ed_80_byte_range_80_a3);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp28);
              ra000_ffff_tmp102 = simd_not(ra000_ffff_tmp43);
              ra000_ffff_tmp103 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp102), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
              byte_range_a4_a8 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp103);
              carryQ.cq[167] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(167), ra000_ffff_tmp104));
              byte_ef_byte_range_a4_a8 = simd_and(ra000_ffff_tmp104, byte_range_a4_a8);
              carryQ.cq[168] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_a4_a8, carryQ.get_carry_in(168), ra000_ffff_tmp105));
              byte_ef_byte_range_a4_a8_sfx = simd_and(ra000_ffff_tmp105, byte_range_80_bf);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, byte_ef_byte_range_a4_a8_sfx);
              byte_ef_adv = ra000_ffff_tmp104;
              sequence_ef_a9 = simd_and(byte_ef_adv, byte_a9);
              ra000_ffff_tmp106 = simd_or(basis_bits.bit_3, ra000_ffff_tmp18);
              ra000_ffff_tmp107 = simd_and(basis_bits.bit_2, ra000_ffff_tmp106);
              byte_range_80_ad = simd_andc(byte_range_80_bf, ra000_ffff_tmp107);
              carryQ.cq[169] = carryout2carry(pablo_blk_Advance(sequence_ef_a9, carryQ.get_carry_in(169), ra000_ffff_tmp108));
              sequence_ef_a9_byte_range_80_ad = simd_and(ra000_ffff_tmp108, byte_range_80_ad);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ef_a9_byte_range_80_ad);
              sequence_ef_aa = simd_and(byte_ef_adv, byte_aa);
              carryQ.cq[170] = carryout2carry(pablo_blk_Advance(sequence_ef_aa, carryQ.get_carry_in(170), ra000_ffff_tmp109));
              sequence_ef_aa_byte_range_80_bf = simd_and(ra000_ffff_tmp109, byte_range_80_bf);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ef_aa_byte_range_80_bf);
              sequence_ef_ab = simd_and(byte_ef_adv, byte_ab);
              ra000_ffff_tmp110 = simd_and(basis_bits.bit_3, ra000_ffff_tmp64);
              byte_range_80_99 = simd_andc(ra000_ffff_tmp32, ra000_ffff_tmp110);
              carryQ.cq[171] = carryout2carry(pablo_blk_Advance(sequence_ef_ab, carryQ.get_carry_in(171), ra000_ffff_tmp111));
              sequence_ef_ab_byte_range_80_99 = simd_and(ra000_ffff_tmp111, byte_range_80_99);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ef_ab_byte_range_80_99);
              sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
              carryQ.cq[172] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(172), ra000_ffff_tmp112));
              sequence_ef_ac_byte_range_80_86 = simd_and(ra000_ffff_tmp112, byte_range_80_86);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ef_ac_byte_range_80_86);
              sequence_ef_ad = simd_and(byte_ef_adv, byte_ad);
              carryQ.cq[173] = carryout2carry(pablo_blk_Advance(sequence_ef_ad, carryQ.get_carry_in(173), ra000_ffff_tmp113));
              sequence_ef_ad_byte_range_80_81 = simd_and(ra000_ffff_tmp113, byte_range_80_81);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ef_ad_byte_range_80_81);
              byte_ae = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp42);
              sequence_ef_ae = simd_and(byte_ef_adv, byte_ae);
              ra000_ffff_tmp114 = simd_and(basis_bits.bit_2, ra000_ffff_tmp6);
              byte_range_80_b1 = simd_andc(byte_range_80_bf, ra000_ffff_tmp114);
              carryQ.cq[174] = carryout2carry(pablo_blk_Advance(sequence_ef_ae, carryQ.get_carry_in(174), ra000_ffff_tmp115));
              sequence_ef_ae_byte_range_80_b1 = simd_and(ra000_ffff_tmp115, byte_range_80_b1);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ef_ae_byte_range_80_b1);
              sequence_ef_af = simd_and(byte_ef_adv, byte_af);
              ra000_ffff_tmp116 = simd_or(basis_bits.bit_2, ra000_ffff_tmp73);
              byte_range_93_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp116);
              carryQ.cq[175] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(175), ra000_ffff_tmp117));
              sequence_ef_af_byte_range_93_bf = simd_and(ra000_ffff_tmp117, byte_range_93_bf);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ef_af_byte_range_93_bf);
              sequence_ef_b0 = simd_and(byte_ef_adv, byte_b0);
              carryQ.cq[176] = carryout2carry(pablo_blk_Advance(sequence_ef_b0, carryQ.get_carry_in(176), ra000_ffff_tmp118));
              sequence_ef_b0_byte_range_80_bf = simd_and(ra000_ffff_tmp118, byte_range_80_bf);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ef_b0_byte_range_80_bf);
              byte_b4 = simd_and(ra000_ffff_tmp46, r800_ffff_tmp2);
              sequence_ef_b4 = simd_and(byte_ef_adv, byte_b4);
              ra000_ffff_tmp119 = simd_and(basis_bits.bit_2, ra000_ffff_tmp19);
              byte_range_80_bd = simd_andc(byte_range_80_bf, ra000_ffff_tmp119);
              carryQ.cq[177] = carryout2carry(pablo_blk_Advance(sequence_ef_b4, carryQ.get_carry_in(177), ra000_ffff_tmp120));
              sequence_ef_b4_byte_range_80_bd = simd_and(ra000_ffff_tmp120, byte_range_80_bd);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ef_b4_byte_range_80_bd);
              byte_b5 = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp68);
              sequence_ef_b5 = simd_and(byte_ef_adv, byte_b5);
              byte_range_90_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp12);
              carryQ.cq[178] = carryout2carry(pablo_blk_Advance(sequence_ef_b5, carryQ.get_carry_in(178), ra000_ffff_tmp121));
              sequence_ef_b5_byte_range_90_bf = simd_and(ra000_ffff_tmp121, byte_range_90_bf);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ef_b5_byte_range_90_bf);
              byte_b6 = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp71);
              sequence_ef_b6 = simd_and(byte_ef_adv, byte_b6);
              byte_range_80_8f = ra000_ffff_tmp13;
              carryQ.cq[179] = carryout2carry(pablo_blk_Advance(sequence_ef_b6, carryQ.get_carry_in(179), ra000_ffff_tmp122));
              sequence_ef_b6_byte_range_80_8f = simd_and(ra000_ffff_tmp122, byte_range_80_8f);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ef_b6_byte_range_80_8f);
              byte_b7 = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp78);
              sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
              byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
              carryQ.cq[180] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(180), ra000_ffff_tmp123));
              sequence_ef_b7_byte_range_80_87 = simd_and(ra000_ffff_tmp123, byte_range_80_87);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ef_b7_byte_range_80_87);
              byte_b9 = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp27);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              byte_range_b0_b4 = simd_andc(ra000_ffff_tmp58, r800_ffff_tmp14);
              carryQ.cq[181] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(181), ra000_ffff_tmp124));
              sequence_ef_b9_byte_range_b0_b4 = simd_and(ra000_ffff_tmp124, byte_range_b0_b4);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ef_b9_byte_range_b0_b4);
              byte_ba = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp3);
              sequence_ef_ba = simd_and(byte_ef_adv, byte_ba);
              carryQ.cq[182] = carryout2carry(pablo_blk_Advance(sequence_ef_ba, carryQ.get_carry_in(182), ra000_ffff_tmp125));
              sequence_ef_ba_byte_range_80_bf = simd_and(ra000_ffff_tmp125, byte_range_80_bf);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ef_ba_byte_range_80_bf);
              byte_bb = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp34);
              sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
              ra000_ffff_tmp126 = simd_and(ra000_ffff_tmp17, tmp6);
              ra000_ffff_tmp127 = simd_and(basis_bits.bit_3, ra000_ffff_tmp126);
              ra000_ffff_tmp128 = simd_and(basis_bits.bit_2, ra000_ffff_tmp127);
              byte_range_80_bc = simd_andc(byte_range_80_bf, ra000_ffff_tmp128);
              carryQ.cq[183] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(183), ra000_ffff_tmp129));
              sequence_ef_bb_byte_range_80_bc = simd_and(ra000_ffff_tmp129, byte_range_80_bc);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ef_bb_byte_range_80_bc);
              byte_bc = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp36);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp130 = simd_and(byte_range_80_bf, basis_bits.bit_2);
              byte_range_a1_ba = simd_and(ra000_ffff_tmp130, tmp8);
              carryQ.cq[184] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(184), ra000_ffff_tmp131));
              sequence_ef_bc_byte_range_a1_ba = simd_and(ra000_ffff_tmp131, byte_range_a1_ba);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ef_bc_byte_range_a1_ba);
              byte_bd = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp40);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_range_81_9a = simd_and(ra000_ffff_tmp32, tmp8);
              carryQ.cq[185] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(185), ra000_ffff_tmp132));
              sequence_ef_bd_byte_range_81_9a = simd_and(ra000_ffff_tmp132, byte_range_81_9a);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ef_bd_byte_range_81_9a);
              byte_be = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp42);
              sequence_ef_be = simd_and(byte_ef_adv, byte_be);
              ra000_ffff_tmp133 = simd_and(basis_bits.bit_3, ra000_ffff_tmp28);
              ra000_ffff_tmp134 = simd_and(basis_bits.bit_2, ra000_ffff_tmp133);
              byte_range_80_be = simd_andc(byte_range_80_bf, ra000_ffff_tmp134);
              carryQ.cq[186] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(186), ra000_ffff_tmp135));
              sequence_ef_be_byte_range_80_be = simd_and(ra000_ffff_tmp135, byte_range_80_be);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ef_be_byte_range_80_be);
              byte_bf = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp28);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              byte_range_82_87 = simd_and(byte_range_80_87, r800_ffff_tmp12);
              carryQ.cq[187] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(187), ra000_ffff_tmp136));
              sequence_ef_bf_byte_range_82_87 = simd_and(ra000_ffff_tmp136, byte_range_82_87);
              struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_ef_bf_byte_range_82_87);
            }
            else {
              carryQ.CarryDequeueEnqueue(134, 54);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(25, 163);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(188, 108))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp7);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp3 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_90 = simd_andc(r10000_10ffff_tmp3, tmp7);
            carryQ.cq[188] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(188), r10000_10ffff_tmp4));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp4, byte_90);
            byte_f0_adv = r10000_10ffff_tmp4;
            r10000_10ffff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp6 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp5);
            byte_80 = simd_andc(r10000_10ffff_tmp6, tmp7);
            carryQ.cq[189] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(189), r10000_10ffff_tmp7));
            sequence_f0_90_80 = simd_and(r10000_10ffff_tmp7, byte_80);
            sequence_f0_90_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_5, tmp1);
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_not(r10000_10ffff_tmp12);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp8, tmp6);
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp13), simd_andc(r10000_10ffff_tmp15, basis_bits.bit_2));
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_or(r10000_10ffff_tmp9, r10000_10ffff_tmp17);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp1, basis_bits.bit_2);
            r10000_10ffff_tmp20 = simd_or(simd_and(basis_bits.bit_3, tmp4), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp20);
            r10000_10ffff_tmp22 = simd_or(r10000_10ffff_tmp18, r10000_10ffff_tmp21);
            r10000_10ffff_tmp23 = simd_and(r10000_10ffff_tmp1, r80_10ffff_tmp2);
            r10000_10ffff_tmp24 = simd_andc(r10000_10ffff_tmp8, basis_bits.bit_6);
            r10000_10ffff_tmp25 = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp24);
            r10000_10ffff_tmp26 = simd_or(r10000_10ffff_tmp22, r10000_10ffff_tmp25);
            r10000_10ffff_tmp27 = simd_and(r10000_10ffff_tmp8, tmp1);
            r10000_10ffff_tmp28 = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp27);
            cc_range_10000_1003f_4 = simd_or(r10000_10ffff_tmp26, r10000_10ffff_tmp28);
            carryQ.cq[190] = carryout2carry(pablo_blk_Advance(sequence_f0_90_80, carryQ.get_carry_in(190), sequence_f0_90_80_adv));
            r10000_10ffff_tmp29 = simd_and(sequence_f0_90_80_adv, cc_range_10000_1003f_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp29);
            r10000_10ffff_tmp30 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp31 = simd_andc(r10000_10ffff_tmp30, tmp5);
            byte_81 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp31);
            sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
            r10000_10ffff_tmp32 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp33 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp32);
            r10000_10ffff_tmp34 = simd_andc(r10000_10ffff_tmp5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp35 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp34);
            cc_range_10040_10050_4 = simd_andc(r10000_10ffff_tmp35, r10000_10ffff_tmp33);
            carryQ.cq[191] = carryout2carry(pablo_blk_Advance(sequence_f0_90_81, carryQ.get_carry_in(191), sequence_f0_90_81_adv));
            r10000_10ffff_tmp36 = simd_and(sequence_f0_90_81_adv, cc_range_10040_10050_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp36);
            r10000_10ffff_tmp37 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp38 = simd_andc(r10000_10ffff_tmp37, tmp5);
            byte_82 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp38);
            sequence_f0_90_82 = simd_and(sequence_f0_90_adv, byte_82);
            byte_range_80_bf = r10000_10ffff_tmp1;
            carryQ.cq[192] = carryout2carry(pablo_blk_Advance(sequence_f0_90_82, carryQ.get_carry_in(192), sequence_f0_90_82_adv));
            r10000_10ffff_tmp39 = simd_and(sequence_f0_90_82_adv, byte_range_80_bf);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp39);
            r10000_10ffff_tmp40 = simd_and(byte_range_80_bf, r10000_10ffff_tmp2);
            r10000_10ffff_tmp41 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp42 = simd_andc(tmp1, tmp5);
            byte_83 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp42);
            sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
            r10000_10ffff_tmp43 = simd_and(basis_bits.bit_3, tmp3);
            r10000_10ffff_tmp44 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp43);
            byte_range_80_ba = simd_andc(byte_range_80_bf, r10000_10ffff_tmp44);
            carryQ.cq[193] = carryout2carry(pablo_blk_Advance(sequence_f0_90_83, carryQ.get_carry_in(193), sequence_f0_90_83_adv));
            r10000_10ffff_tmp45 = simd_and(sequence_f0_90_83_adv, byte_range_80_ba);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp45);
            r10000_10ffff_tmp46 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp47 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp30);
            byte_85 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp47);
            sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
            r10000_10ffff_tmp48 = simd_and(basis_bits.bit_5, tmp6);
            r10000_10ffff_tmp49 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp48);
            r10000_10ffff_tmp50 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp49);
            r10000_10ffff_tmp51 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp50);
            byte_range_80_b4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp51);
            carryQ.cq[194] = carryout2carry(pablo_blk_Advance(sequence_f0_90_85, carryQ.get_carry_in(194), sequence_f0_90_85_adv));
            r10000_10ffff_tmp52 = simd_and(sequence_f0_90_85_adv, byte_range_80_b4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp52);
            r10000_10ffff_tmp53 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp54 = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp37);
            byte_8a = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp54);
            sequence_f0_90_8a = simd_and(sequence_f0_90_adv, byte_8a);
            r10000_10ffff_tmp55 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp56 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp14);
            r10000_10ffff_tmp57 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp56);
            r10000_10ffff_tmp58 = simd_and(byte_range_80_bf, basis_bits.bit_2);
            cc_range_10280_102a0_4 = simd_or(r10000_10ffff_tmp57, r10000_10ffff_tmp58);
            carryQ.cq[195] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8a, carryQ.get_carry_in(195), sequence_f0_90_8a_adv));
            r10000_10ffff_tmp59 = simd_and(sequence_f0_90_8a_adv, cc_range_10280_102a0_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp59);
            r10000_10ffff_tmp60 = simd_and(r10000_10ffff_tmp53, tmp1);
            byte_8b = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp60);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp61 = simd_and(basis_bits.bit_3, tmp7);
            byte_range_80_90 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp61);
            carryQ.cq[196] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(196), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp62 = simd_and(sequence_f0_90_8b_adv, byte_range_80_90);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp62);
            r10000_10ffff_tmp63 = simd_andc(r10000_10ffff_tmp8, tmp6);
            byte_8c = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp63);
            sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
            r10000_10ffff_tmp64 = simd_andc(basis_bits.bit_2, r80_10ffff_tmp2);
            cc_range_10300_10330_4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp64);
            carryQ.cq[197] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(197), sequence_f0_90_8c_adv));
            r10000_10ffff_tmp65 = simd_and(sequence_f0_90_8c_adv, cc_range_10300_10330_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp65);
            r10000_10ffff_tmp66 = simd_and(r10000_10ffff_tmp8, r10000_10ffff_tmp30);
            byte_8d = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp66);
            sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
            r10000_10ffff_tmp67 = simd_andc(r10000_10ffff_tmp41, tmp3);
            r10000_10ffff_tmp68 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp32);
            r10000_10ffff_tmp69 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp68);
            r10000_10ffff_tmp70 = simd_not(r10000_10ffff_tmp69);
            r10000_10ffff_tmp71 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp70), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp72 = simd_and(byte_range_80_bf, r10000_10ffff_tmp71);
            cc_range_10340_10350_4 = simd_or(r10000_10ffff_tmp67, r10000_10ffff_tmp72);
            carryQ.cq[198] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(198), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp73 = simd_and(sequence_f0_90_8d_adv, cc_range_10340_10350_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp73);
            r10000_10ffff_tmp74 = simd_and(r10000_10ffff_tmp8, r10000_10ffff_tmp37);
            byte_8e = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp74);
            sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
            r10000_10ffff_tmp75 = simd_and(r10000_10ffff_tmp8, basis_bits.bit_6);
            r10000_10ffff_tmp76 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp75);
            r10000_10ffff_tmp77 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp76);
            cc_range_10380_103a0_4 = simd_or(r10000_10ffff_tmp77, r10000_10ffff_tmp58);
            carryQ.cq[199] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(199), sequence_f0_90_8e_adv));
            r10000_10ffff_tmp78 = simd_and(sequence_f0_90_8e_adv, cc_range_10380_103a0_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp78);
            byte_8f = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp27);
            sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
            r10000_10ffff_tmp79 = simd_andc(tmp5, basis_bits.bit_4);
            r10000_10ffff_tmp80 = simd_andc(r10000_10ffff_tmp41, r10000_10ffff_tmp79);
            r10000_10ffff_tmp81 = simd_andc(r10000_10ffff_tmp40, basis_bits.bit_4);
            r10000_10ffff_tmp82 = simd_not(basis_bits.bit_6);
            r10000_10ffff_tmp83 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp82), simd_andc(tmp6, basis_bits.bit_5));
            r10000_10ffff_tmp84 = simd_and(r10000_10ffff_tmp81, r10000_10ffff_tmp83);
            cc_range_103c0_103d1_4 = simd_or(r10000_10ffff_tmp80, r10000_10ffff_tmp84);
            carryQ.cq[200] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(200), sequence_f0_90_8f_adv));
            r10000_10ffff_tmp85 = simd_and(sequence_f0_90_8f_adv, cc_range_103c0_103d1_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp85);
            r10000_10ffff_tmp86 = simd_or(tmp5, basis_bits.bit_6);
            byte_range_90_91 = simd_andc(r10000_10ffff_tmp40, r10000_10ffff_tmp86);
            sequence_f0_90_byte_range_90_91 = simd_and(sequence_f0_90_adv, byte_range_90_91);
            carryQ.cq[201] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_90_91, carryQ.get_carry_in(201), r10000_10ffff_tmp87));
            sequence_f0_90_byte_range_90_91_sfx = simd_and(r10000_10ffff_tmp87, byte_range_80_bf);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_byte_range_90_91_sfx);
            byte_92 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp38);
            sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
            byte_range_80_9d = r10000_10ffff_tmp77;
            carryQ.cq[202] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(202), r10000_10ffff_tmp88));
            sequence_f0_90_92_byte_range_80_9d = simd_and(r10000_10ffff_tmp88, byte_range_80_9d);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_92_byte_range_80_9d);
            r10000_10ffff_tmp89 = simd_andc(r10000_10ffff_tmp46, tmp6);
            byte_94 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp89);
            sequence_f0_90_94 = simd_and(sequence_f0_90_adv, byte_94);
            r10000_10ffff_tmp90 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp91 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp90);
            byte_range_80_a7 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp91);
            carryQ.cq[203] = carryout2carry(pablo_blk_Advance(sequence_f0_90_94, carryQ.get_carry_in(203), r10000_10ffff_tmp92));
            sequence_f0_90_94_byte_range_80_a7 = simd_and(r10000_10ffff_tmp92, byte_range_80_a7);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_94_byte_range_80_a7);
            byte_95 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp47);
            sequence_f0_90_95 = simd_and(sequence_f0_90_adv, byte_95);
            r10000_10ffff_tmp93 = simd_or(basis_bits.bit_3, tmp5);
            r10000_10ffff_tmp94 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp93);
            byte_range_80_a3 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp94);
            carryQ.cq[204] = carryout2carry(pablo_blk_Advance(sequence_f0_90_95, carryQ.get_carry_in(204), r10000_10ffff_tmp95));
            sequence_f0_90_95_byte_range_80_a3 = simd_and(r10000_10ffff_tmp95, byte_range_80_a3);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_95_byte_range_80_a3);
            r10000_10ffff_tmp96 = simd_andc(r10000_10ffff_tmp53, tmp6);
            byte_98 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp96);
            sequence_f0_90_98 = simd_and(sequence_f0_90_adv, byte_98);
            carryQ.cq[205] = carryout2carry(pablo_blk_Advance(sequence_f0_90_98, carryQ.get_carry_in(205), r10000_10ffff_tmp97));
            sequence_f0_90_98_byte_range_80_bf = simd_and(r10000_10ffff_tmp97, byte_range_80_bf);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_98_byte_range_80_bf);
            byte_9c = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp63);
            sequence_f0_90_9c = simd_and(sequence_f0_90_adv, byte_9c);
            r10000_10ffff_tmp98 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp11);
            r10000_10ffff_tmp99 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp98);
            byte_range_80_b6 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp99);
            carryQ.cq[206] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9c, carryQ.get_carry_in(206), r10000_10ffff_tmp100));
            sequence_f0_90_9c_byte_range_80_b6 = simd_and(r10000_10ffff_tmp100, byte_range_80_b6);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_9c_byte_range_80_b6);
            byte_9d = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp66);
            sequence_f0_90_9d = simd_and(sequence_f0_90_adv, byte_9d);
            byte_range_80_95 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp69);
            carryQ.cq[207] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9d, carryQ.get_carry_in(207), r10000_10ffff_tmp101));
            sequence_f0_90_9d_byte_range_80_95 = simd_and(r10000_10ffff_tmp101, byte_range_80_95);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_9d_byte_range_80_95);
            r10000_10ffff_tmp102 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            byte_a0 = simd_andc(r10000_10ffff_tmp102, tmp7);
            sequence_f0_90_a0 = simd_and(sequence_f0_90_adv, byte_a0);
            r10000_10ffff_tmp103 = simd_andc(r10000_10ffff_tmp41, basis_bits.bit_4);
            byte_range_80_85 = simd_andc(r10000_10ffff_tmp103, r10000_10ffff_tmp32);
            carryQ.cq[208] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a0, carryQ.get_carry_in(208), r10000_10ffff_tmp104));
            sequence_f0_90_a0_byte_range_80_85 = simd_and(r10000_10ffff_tmp104, byte_range_80_85);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_a0_byte_range_80_85);
            byte_a1 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp31);
            sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
            carryQ.cq[209] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(209), r10000_10ffff_tmp105));
            sequence_f0_90_a1_byte_range_80_95 = simd_and(r10000_10ffff_tmp105, byte_range_80_95);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_a1_byte_range_80_95);
            byte_a2 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp38);
            sequence_f0_90_a2 = simd_and(sequence_f0_90_adv, byte_a2);
            r10000_10ffff_tmp106 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp27);
            byte_range_80_9e = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp106);
            carryQ.cq[210] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a2, carryQ.get_carry_in(210), r10000_10ffff_tmp107));
            sequence_f0_90_a2_byte_range_80_9e = simd_and(r10000_10ffff_tmp107, byte_range_80_9e);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_a2_byte_range_80_9e);
            byte_a4 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp89);
            sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
            carryQ.cq[211] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(211), r10000_10ffff_tmp108));
            sequence_f0_90_a4_byte_range_80_95 = simd_and(r10000_10ffff_tmp108, byte_range_80_95);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_a4_byte_range_80_95);
            r10000_10ffff_tmp109 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp37);
            byte_a6 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp109);
            sequence_f0_90_a6 = simd_and(sequence_f0_90_adv, byte_a6);
            r10000_10ffff_tmp110 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp111 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp110);
            byte_range_80_b7 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp111);
            carryQ.cq[212] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a6, carryQ.get_carry_in(212), r10000_10ffff_tmp112));
            sequence_f0_90_a6_byte_range_80_b7 = simd_and(r10000_10ffff_tmp112, byte_range_80_b7);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_a6_byte_range_80_b7);
            byte_a8 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp96);
            sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
            carryQ.cq[213] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(213), r10000_10ffff_tmp113));
            sequence_f0_90_a8_80 = simd_and(r10000_10ffff_tmp113, byte_80);
            r10000_10ffff_tmp114 = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp30);
            byte_a9 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp114);
            sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
            byte_range_a0_bc = simd_andc(r10000_10ffff_tmp58, r10000_10ffff_tmp56);
            carryQ.cq[214] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(214), r10000_10ffff_tmp115));
            sequence_f0_90_a9_byte_range_a0_bc = simd_and(r10000_10ffff_tmp115, byte_range_a0_bc);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_a9_byte_range_a0_bc);
            byte_aa = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp54);
            sequence_f0_90_aa = simd_and(sequence_f0_90_adv, byte_aa);
            byte_range_80_9c = r10000_10ffff_tmp57;
            carryQ.cq[215] = carryout2carry(pablo_blk_Advance(sequence_f0_90_aa, carryQ.get_carry_in(215), r10000_10ffff_tmp116));
            sequence_f0_90_aa_byte_range_80_9c = simd_and(r10000_10ffff_tmp116, byte_range_80_9c);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_aa_byte_range_80_9c);
            byte_ab = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp60);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            byte_range_80_87 = r10000_10ffff_tmp103;
            carryQ.cq[216] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(216), r10000_10ffff_tmp117));
            sequence_f0_90_ab_byte_range_80_87 = simd_and(r10000_10ffff_tmp117, byte_range_80_87);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_ab_byte_range_80_87);
            byte_ac = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp63);
            sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
            r10000_10ffff_tmp118 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp69);
            byte_range_80_b5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp118);
            carryQ.cq[217] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(217), r10000_10ffff_tmp119));
            sequence_f0_90_ac_byte_range_80_b5 = simd_and(r10000_10ffff_tmp119, byte_range_80_b5);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_ac_byte_range_80_b5);
            byte_ad = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp66);
            sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
            carryQ.cq[218] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(218), r10000_10ffff_tmp120));
            sequence_f0_90_ad_byte_range_80_95 = simd_and(r10000_10ffff_tmp120, byte_range_80_95);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_ad_byte_range_80_95);
            byte_ae = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp74);
            sequence_f0_90_ae = simd_and(sequence_f0_90_adv, byte_ae);
            r10000_10ffff_tmp121 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp86);
            byte_range_80_91 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp121);
            carryQ.cq[219] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(219), r10000_10ffff_tmp122));
            sequence_f0_90_ae_byte_range_80_91 = simd_and(r10000_10ffff_tmp122, byte_range_80_91);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_ae_byte_range_80_91);
            r10000_10ffff_tmp123 = simd_and(byte_range_80_bf, r80_10ffff_tmp2);
            byte_b0 = simd_andc(r10000_10ffff_tmp123, tmp7);
            sequence_f0_90_b0 = simd_and(sequence_f0_90_adv, byte_b0);
            carryQ.cq[220] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b0, carryQ.get_carry_in(220), r10000_10ffff_tmp124));
            sequence_f0_90_b0_byte_range_80_bf = simd_and(r10000_10ffff_tmp124, byte_range_80_bf);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_b0_byte_range_80_bf);
            byte_b1 = simd_and(r10000_10ffff_tmp123, r10000_10ffff_tmp31);
            sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
            r10000_10ffff_tmp125 = simd_or(basis_bits.bit_5, tmp6);
            r10000_10ffff_tmp126 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp125);
            byte_range_80_88 = simd_andc(r10000_10ffff_tmp41, r10000_10ffff_tmp126);
            carryQ.cq[221] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b1, carryQ.get_carry_in(221), r10000_10ffff_tmp127));
            sequence_f0_90_b1_byte_range_80_88 = simd_and(r10000_10ffff_tmp127, byte_range_80_88);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_90_b1_byte_range_80_88);
            byte_91 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp31);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            carryQ.cq[222] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(222), r10000_10ffff_tmp128));
            sequence_f0_91_80 = simd_and(r10000_10ffff_tmp128, byte_80);
            sequence_f0_91_adv = r10000_10ffff_tmp128;
            r10000_10ffff_tmp129 = simd_not(r10000_10ffff_tmp110);
            r10000_10ffff_tmp130 = simd_or(tmp5, tmp1);
            r10000_10ffff_tmp131 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp130);
            r10000_10ffff_tmp132 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp129), simd_andc(r10000_10ffff_tmp131, basis_bits.bit_2));
            byte_range_83_b7 = simd_and(byte_range_80_bf, r10000_10ffff_tmp132);
            carryQ.cq[223] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(223), sequence_f0_91_80_adv));
            r10000_10ffff_tmp133 = simd_and(sequence_f0_91_80_adv, byte_range_83_b7);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp133);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            r10000_10ffff_tmp134 = simd_not(basis_bits.bit_3);
            r10000_10ffff_tmp135 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp134), simd_andc(r10000_10ffff_tmp131, basis_bits.bit_2));
            byte_range_83_af = simd_and(byte_range_80_bf, r10000_10ffff_tmp135);
            carryQ.cq[224] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(224), sequence_f0_91_82_adv));
            r10000_10ffff_tmp136 = simd_and(sequence_f0_91_82_adv, byte_range_83_af);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp136);
            sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
            r10000_10ffff_tmp137 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp126);
            r10000_10ffff_tmp138 = simd_not(r10000_10ffff_tmp137);
            r10000_10ffff_tmp139 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp138), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_a8 = simd_and(byte_range_80_bf, r10000_10ffff_tmp139);
            carryQ.cq[225] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(225), sequence_f0_91_83_adv));
            r10000_10ffff_tmp140 = simd_and(sequence_f0_91_83_adv, byte_range_90_a8);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp140);
            byte_84 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp89);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            r10000_10ffff_tmp141 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp13), simd_andc(r10000_10ffff_tmp131, basis_bits.bit_2));
            byte_range_83_a6 = simd_and(byte_range_80_bf, r10000_10ffff_tmp141);
            carryQ.cq[226] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(226), sequence_f0_91_84_adv));
            r10000_10ffff_tmp142 = simd_and(sequence_f0_91_84_adv, byte_range_83_a6);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp142);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            r10000_10ffff_tmp143 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp130);
            r10000_10ffff_tmp144 = simd_not(r10000_10ffff_tmp143);
            r10000_10ffff_tmp145 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp144), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp146 = simd_and(byte_range_80_bf, r10000_10ffff_tmp145);
            r10000_10ffff_tmp147 = simd_and(r10000_10ffff_tmp123, r10000_10ffff_tmp109);
            cc_range_11150_11176_4 = simd_or(r10000_10ffff_tmp146, r10000_10ffff_tmp147);
            carryQ.cq[227] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(227), sequence_f0_91_85_adv));
            r10000_10ffff_tmp148 = simd_and(sequence_f0_91_85_adv, cc_range_11150_11176_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp148);
            byte_86 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp109);
            sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
            r10000_10ffff_tmp149 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp144), simd_andc(r10000_10ffff_tmp131, basis_bits.bit_2));
            byte_range_83_b2 = simd_and(byte_range_80_bf, r10000_10ffff_tmp149);
            carryQ.cq[228] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(228), sequence_f0_91_86_adv));
            r10000_10ffff_tmp150 = simd_and(sequence_f0_91_86_adv, byte_range_83_b2);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp150);
            r10000_10ffff_tmp151 = simd_and(r10000_10ffff_tmp46, tmp1);
            byte_87 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp151);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            r10000_10ffff_tmp152 = simd_xor(basis_bits.bit_5, tmp6);
            r10000_10ffff_tmp153 = simd_and(byte_range_80_87, r10000_10ffff_tmp152);
            r10000_10ffff_tmp154 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp54);
            cc_range_111c1_111da_4 = simd_or(r10000_10ffff_tmp153, r10000_10ffff_tmp154);
            carryQ.cq[229] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(229), sequence_f0_91_87_adv));
            r10000_10ffff_tmp155 = simd_and(sequence_f0_91_87_adv, cc_range_111c1_111da_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp155);
            byte_88 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp96);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            r10000_10ffff_tmp156 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp8);
            r10000_10ffff_tmp157 = simd_not(r10000_10ffff_tmp156);
            r10000_10ffff_tmp158 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp157), simd_andc(r10000_10ffff_tmp143, basis_bits.bit_2));
            r10000_10ffff_tmp159 = simd_and(byte_range_80_bf, r10000_10ffff_tmp158);
            cc_range_11200_11213_4 = simd_or(byte_range_80_91, r10000_10ffff_tmp159);
            carryQ.cq[230] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(230), sequence_f0_91_88_adv));
            r10000_10ffff_tmp160 = simd_and(sequence_f0_91_88_adv, cc_range_11200_11213_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp160);
            sequence_f0_91_8a = simd_and(sequence_f0_91_adv, byte_8a);
            byte_range_b0_bf = r10000_10ffff_tmp123;
            carryQ.cq[231] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8a, carryQ.get_carry_in(231), sequence_f0_91_8a_adv));
            r10000_10ffff_tmp161 = simd_and(sequence_f0_91_8a_adv, byte_range_b0_bf);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp161);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            carryQ.cq[232] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(232), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp162 = simd_and(sequence_f0_91_8b_adv, byte_range_80_9e);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp162);
            sequence_f0_91_8c = simd_and(sequence_f0_91_adv, byte_8c);
            r10000_10ffff_tmp163 = simd_xor(basis_bits.bit_4, r10000_10ffff_tmp48);
            r10000_10ffff_tmp164 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp163);
            r10000_10ffff_tmp165 = simd_not(tmp7);
            r10000_10ffff_tmp166 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp165), simd_andc(r10000_10ffff_tmp27, basis_bits.bit_3));
            r10000_10ffff_tmp167 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp166);
            r10000_10ffff_tmp168 = simd_or(r10000_10ffff_tmp164, r10000_10ffff_tmp167);
            r10000_10ffff_tmp169 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp138), simd_andc(r10000_10ffff_tmp143, basis_bits.bit_2));
            r10000_10ffff_tmp170 = simd_and(byte_range_80_bf, r10000_10ffff_tmp169);
            r10000_10ffff_tmp171 = simd_or(r10000_10ffff_tmp168, r10000_10ffff_tmp170);
            r10000_10ffff_tmp172 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp173 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp172);
            r10000_10ffff_tmp174 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp165), simd_andc(r10000_10ffff_tmp173, basis_bits.bit_3));
            r10000_10ffff_tmp175 = simd_and(r10000_10ffff_tmp58, r10000_10ffff_tmp174);
            r10000_10ffff_tmp176 = simd_or(r10000_10ffff_tmp171, r10000_10ffff_tmp175);
            r10000_10ffff_tmp177 = simd_andc(basis_bits.bit_6, tmp5);
            r10000_10ffff_tmp178 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp177);
            r10000_10ffff_tmp179 = simd_or(r10000_10ffff_tmp176, r10000_10ffff_tmp178);
            r10000_10ffff_tmp180 = simd_not(r10000_10ffff_tmp172);
            r10000_10ffff_tmp181 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp180), simd_andc(r10000_10ffff_tmp48, basis_bits.bit_4));
            r10000_10ffff_tmp182 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp181);
            r10000_10ffff_tmp183 = simd_or(r10000_10ffff_tmp179, r10000_10ffff_tmp182);
            r10000_10ffff_tmp184 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp66);
            cc_range_11305_1133d_4 = simd_or(r10000_10ffff_tmp183, r10000_10ffff_tmp184);
            carryQ.cq[233] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(233), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp185 = simd_and(sequence_f0_91_8c_adv, cc_range_11305_1133d_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp185);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            r10000_10ffff_tmp186 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp86);
            r10000_10ffff_tmp187 = simd_not(r10000_10ffff_tmp186);
            r10000_10ffff_tmp188 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp187), simd_andc(r10000_10ffff_tmp56, basis_bits.bit_2));
            byte_range_9d_a1 = simd_and(byte_range_80_bf, r10000_10ffff_tmp188);
            carryQ.cq[234] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(234), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp189 = simd_and(sequence_f0_91_8d_adv, byte_range_9d_a1);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp189);
            sequence_f0_91_92 = simd_and(sequence_f0_91_adv, byte_92);
            byte_range_80_af = simd_andc(byte_range_80_bf, r80_10ffff_tmp2);
            carryQ.cq[235] = carryout2carry(pablo_blk_Advance(sequence_f0_91_92, carryQ.get_carry_in(235), sequence_f0_91_92_adv));
            r10000_10ffff_tmp190 = simd_and(sequence_f0_91_92_adv, byte_range_80_af);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp190);
            byte_93 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp42);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            r10000_10ffff_tmp191 = simd_andc(basis_bits.bit_6, tmp1);
            r10000_10ffff_tmp192 = simd_andc(r10000_10ffff_tmp46, r10000_10ffff_tmp191);
            cc_range_114c4_114c7_4 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp192);
            carryQ.cq[236] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(236), sequence_f0_91_93_adv));
            r10000_10ffff_tmp193 = simd_and(sequence_f0_91_93_adv, cc_range_114c4_114c7_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp193);
            byte_96 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp109);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            r10000_10ffff_tmp194 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp27);
            r10000_10ffff_tmp195 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp194);
            byte_range_80_ae = simd_andc(byte_range_80_bf, r10000_10ffff_tmp195);
            carryQ.cq[237] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(237), sequence_f0_91_96_adv));
            r10000_10ffff_tmp196 = simd_and(sequence_f0_91_96_adv, byte_range_80_ae);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp196);
            sequence_f0_91_98 = simd_and(sequence_f0_91_adv, byte_98);
            carryQ.cq[238] = carryout2carry(pablo_blk_Advance(sequence_f0_91_98, carryQ.get_carry_in(238), sequence_f0_91_98_adv));
            r10000_10ffff_tmp197 = simd_and(sequence_f0_91_98_adv, byte_range_80_af);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp197);
            byte_99 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp114);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            carryQ.cq[239] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(239), sequence_f0_91_99_adv));
            r10000_10ffff_tmp198 = simd_and(sequence_f0_91_99_adv, byte_84);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp198);
            byte_9a = r10000_10ffff_tmp154;
            sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
            r10000_10ffff_tmp199 = simd_or(basis_bits.bit_3, tmp3);
            r10000_10ffff_tmp200 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp199);
            byte_range_80_aa = simd_andc(byte_range_80_bf, r10000_10ffff_tmp200);
            carryQ.cq[240] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(240), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp201 = simd_and(sequence_f0_91_9a_adv, byte_range_80_aa);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp201);
            sequence_f0_91_a2 = simd_and(sequence_f0_91_adv, byte_a2);
            byte_range_a0_bf = r10000_10ffff_tmp58;
            carryQ.cq[241] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(241), sequence_f0_91_a2_adv));
            r10000_10ffff_tmp202 = simd_and(sequence_f0_91_a2_adv, byte_range_a0_bf);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp202);
            byte_a3 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp42);
            sequence_f0_91_a3 = simd_and(sequence_f0_91_adv, byte_a3);
            r10000_10ffff_tmp203 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp27);
            cc_range_118c0_118ff_4 = simd_or(r10000_10ffff_tmp55, r10000_10ffff_tmp203);
            carryQ.cq[242] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(242), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp204 = simd_and(sequence_f0_91_a3_adv, cc_range_118c0_118ff_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp204);
            sequence_f0_91_ab = simd_and(sequence_f0_91_adv, byte_ab);
            r10000_10ffff_tmp205 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp126);
            r10000_10ffff_tmp206 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp205);
            byte_range_80_b8 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp206);
            carryQ.cq[243] = carryout2carry(pablo_blk_Advance(sequence_f0_91_ab, carryQ.get_carry_in(243), sequence_f0_91_ab_adv));
            r10000_10ffff_tmp207 = simd_and(sequence_f0_91_ab_adv, byte_range_80_b8);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp207);
            sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
            byte_range_80_8d = simd_andc(r10000_10ffff_tmp41, r10000_10ffff_tmp33);
            carryQ.cq[244] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(244), r10000_10ffff_tmp208));
            sequence_f0_92_byte_range_80_8d = simd_and(r10000_10ffff_tmp208, byte_range_80_8d);
            carryQ.cq[245] = carryout2carry(pablo_blk_Advance(sequence_f0_92_byte_range_80_8d, carryQ.get_carry_in(245), r10000_10ffff_tmp209));
            sequence_f0_92_byte_range_80_8d_sfx = simd_and(r10000_10ffff_tmp209, byte_range_80_bf);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_92_byte_range_80_8d_sfx);
            sequence_f0_92_adv = r10000_10ffff_tmp208;
            sequence_f0_92_8e = simd_and(sequence_f0_92_adv, byte_8e);
            byte_range_80_98 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp205);
            carryQ.cq[246] = carryout2carry(pablo_blk_Advance(sequence_f0_92_8e, carryQ.get_carry_in(246), r10000_10ffff_tmp210));
            sequence_f0_92_8e_byte_range_80_98 = simd_and(r10000_10ffff_tmp210, byte_range_80_98);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_92_8e_byte_range_80_98);
            sequence_f0_92_90 = simd_and(sequence_f0_92_adv, byte_90);
            carryQ.cq[247] = carryout2carry(pablo_blk_Advance(sequence_f0_92_90, carryQ.get_carry_in(247), r10000_10ffff_tmp211));
            sequence_f0_92_90_byte_range_80_bf = simd_and(r10000_10ffff_tmp211, byte_range_80_bf);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_92_90_byte_range_80_bf);
            sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
            carryQ.cq[248] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(248), r10000_10ffff_tmp212));
            sequence_f0_92_91_byte_range_80_ae = simd_and(r10000_10ffff_tmp212, byte_range_80_ae);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_92_91_byte_range_80_ae);
            sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
            byte_range_80_8f = r10000_10ffff_tmp41;
            carryQ.cq[249] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(249), r10000_10ffff_tmp213));
            sequence_f0_93_byte_range_80_8f = simd_and(r10000_10ffff_tmp213, byte_range_80_8f);
            carryQ.cq[250] = carryout2carry(pablo_blk_Advance(sequence_f0_93_byte_range_80_8f, carryQ.get_carry_in(250), r10000_10ffff_tmp214));
            sequence_f0_93_byte_range_80_8f_sfx = simd_and(r10000_10ffff_tmp214, byte_range_80_bf);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_93_byte_range_80_8f_sfx);
            sequence_f0_93_adv = r10000_10ffff_tmp213;
            sequence_f0_93_90 = simd_and(sequence_f0_93_adv, byte_90);
            carryQ.cq[251] = carryout2carry(pablo_blk_Advance(sequence_f0_93_90, carryQ.get_carry_in(251), r10000_10ffff_tmp215));
            sequence_f0_93_90_byte_range_80_ae = simd_and(r10000_10ffff_tmp215, byte_range_80_ae);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_93_90_byte_range_80_ae);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            byte_range_a0_a7 = simd_andc(r10000_10ffff_tmp102, basis_bits.bit_4);
            carryQ.cq[252] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(252), r10000_10ffff_tmp216));
            sequence_f0_96_byte_range_a0_a7 = simd_and(r10000_10ffff_tmp216, byte_range_a0_a7);
            carryQ.cq[253] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_a0_a7, carryQ.get_carry_in(253), r10000_10ffff_tmp217));
            sequence_f0_96_byte_range_a0_a7_sfx = simd_and(r10000_10ffff_tmp217, byte_range_80_bf);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_96_byte_range_a0_a7_sfx);
            sequence_f0_96_adv = r10000_10ffff_tmp216;
            sequence_f0_96_a8 = simd_and(sequence_f0_96_adv, byte_a8);
            carryQ.cq[254] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a8, carryQ.get_carry_in(254), r10000_10ffff_tmp218));
            sequence_f0_96_a8_byte_range_80_b8 = simd_and(r10000_10ffff_tmp218, byte_range_80_b8);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_96_a8_byte_range_80_b8);
            sequence_f0_96_a9 = simd_and(sequence_f0_96_adv, byte_a9);
            carryQ.cq[255] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a9, carryQ.get_carry_in(255), r10000_10ffff_tmp219));
            sequence_f0_96_a9_byte_range_80_9e = simd_and(r10000_10ffff_tmp219, byte_range_80_9e);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_96_a9_byte_range_80_9e);
            sequence_f0_96_ab = simd_and(sequence_f0_96_adv, byte_ab);
            r10000_10ffff_tmp220 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp75);
            r10000_10ffff_tmp221 = simd_not(r10000_10ffff_tmp220);
            r10000_10ffff_tmp222 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp221), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ad = simd_and(byte_range_80_bf, r10000_10ffff_tmp222);
            carryQ.cq[256] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(256), r10000_10ffff_tmp223));
            sequence_f0_96_ab_byte_range_90_ad = simd_and(r10000_10ffff_tmp223, byte_range_90_ad);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_96_ab_byte_range_90_ad);
            sequence_f0_96_ac = simd_and(sequence_f0_96_adv, byte_ac);
            carryQ.cq[257] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(257), r10000_10ffff_tmp224));
            sequence_f0_96_ac_byte_range_80_af = simd_and(r10000_10ffff_tmp224, byte_range_80_af);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_96_ac_byte_range_80_af);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            byte_range_80_83 = simd_andc(byte_range_80_8f, tmp5);
            carryQ.cq[258] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(258), r10000_10ffff_tmp225));
            sequence_f0_96_ad_byte_range_80_83 = simd_and(r10000_10ffff_tmp225, byte_range_80_83);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_96_ad_byte_range_80_83);
            sequence_f0_96_ae = simd_and(sequence_f0_96_adv, byte_ae);
            carryQ.cq[259] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ae, carryQ.get_carry_in(259), r10000_10ffff_tmp226));
            sequence_f0_96_ae_byte_range_80_8f = simd_and(r10000_10ffff_tmp226, byte_range_80_8f);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_96_ae_byte_range_80_8f);
            byte_bc = simd_and(byte_range_b0_bf, r10000_10ffff_tmp63);
            sequence_f0_96_bc = simd_and(sequence_f0_96_adv, byte_bc);
            carryQ.cq[260] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bc, carryQ.get_carry_in(260), r10000_10ffff_tmp227));
            sequence_f0_96_bc_byte_range_80_bf = simd_and(r10000_10ffff_tmp227, byte_range_80_bf);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_96_bc_byte_range_80_bf);
            byte_bd = r10000_10ffff_tmp184;
            sequence_f0_96_bd = simd_and(sequence_f0_96_adv, byte_bd);
            r10000_10ffff_tmp228 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
            byte_range_80_84 = simd_andc(r10000_10ffff_tmp228, r10000_10ffff_tmp48);
            carryQ.cq[261] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bd, carryQ.get_carry_in(261), r10000_10ffff_tmp229));
            sequence_f0_96_bd_byte_range_80_84 = simd_and(r10000_10ffff_tmp229, byte_range_80_84);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_96_bd_byte_range_80_84);
            byte_be = simd_and(byte_range_b0_bf, r10000_10ffff_tmp74);
            sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
            r10000_10ffff_tmp230 = simd_or(basis_bits.bit_4, tmp2);
            byte_range_93_9f = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp230);
            carryQ.cq[262] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(262), r10000_10ffff_tmp231));
            sequence_f0_96_be_byte_range_93_9f = simd_and(r10000_10ffff_tmp231, byte_range_93_9f);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_96_be_byte_range_93_9f);
            byte_9b = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp60);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            carryQ.cq[263] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(263), r10000_10ffff_tmp232));
            sequence_f0_9b_80 = simd_and(r10000_10ffff_tmp232, byte_80);
            sequence_f0_9b_adv = r10000_10ffff_tmp232;
            byte_range_80_81 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp86);
            carryQ.cq[264] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_80, carryQ.get_carry_in(264), sequence_f0_9b_80_adv));
            r10000_10ffff_tmp233 = simd_and(sequence_f0_9b_80_adv, byte_range_80_81);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp233);
            sequence_f0_9b_b0 = simd_and(sequence_f0_9b_adv, byte_b0);
            carryQ.cq[265] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b0, carryQ.get_carry_in(265), sequence_f0_9b_b0_adv));
            r10000_10ffff_tmp234 = simd_and(sequence_f0_9b_b0_adv, byte_range_80_bf);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp234);
            sequence_f0_9b_b1 = simd_and(sequence_f0_9b_adv, byte_b1);
            r10000_10ffff_tmp235 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp48);
            r10000_10ffff_tmp236 = simd_andc(byte_range_b0_bf, r10000_10ffff_tmp235);
            cc_range_1bc40_1bc70_4 = simd_or(byte_range_80_aa, r10000_10ffff_tmp236);
            carryQ.cq[266] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b1, carryQ.get_carry_in(266), sequence_f0_9b_b1_adv));
            r10000_10ffff_tmp237 = simd_and(sequence_f0_9b_b1_adv, cc_range_1bc40_1bc70_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp237);
            byte_b2 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp38);
            sequence_f0_9b_b2 = simd_and(sequence_f0_9b_adv, byte_b2);
            r10000_10ffff_tmp238 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp126);
            r10000_10ffff_tmp239 = simd_andc(r10000_10ffff_tmp40, r10000_10ffff_tmp173);
            cc_range_1bc80_1bc90_4 = simd_or(r10000_10ffff_tmp238, r10000_10ffff_tmp239);
            carryQ.cq[267] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(267), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp240 = simd_and(sequence_f0_9b_b2_adv, cc_range_1bc80_1bc90_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp240);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[268] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(268), r10000_10ffff_tmp241));
            sequence_f0_9d_90 = simd_and(r10000_10ffff_tmp241, byte_90);
            sequence_f0_9d_adv = r10000_10ffff_tmp241;
            carryQ.cq[269] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(269), sequence_f0_9d_90_adv));
            r10000_10ffff_tmp242 = simd_and(sequence_f0_9d_90_adv, byte_range_80_bf);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp242);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            r10000_10ffff_tmp243 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp50);
            r10000_10ffff_tmp244 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp69);
            r10000_10ffff_tmp245 = simd_and(byte_range_80_bf, r10000_10ffff_tmp244);
            cc_range_1d440_1d456_4 = simd_or(r10000_10ffff_tmp243, r10000_10ffff_tmp245);
            carryQ.cq[270] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(270), sequence_f0_9d_91_adv));
            r10000_10ffff_tmp246 = simd_and(sequence_f0_9d_91_adv, cc_range_1d440_1d456_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp246);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            r10000_10ffff_tmp247 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp75);
            r10000_10ffff_tmp248 = simd_or(byte_range_80_9c, r10000_10ffff_tmp247);
            r10000_10ffff_tmp249 = simd_or(r10000_10ffff_tmp248, byte_a2);
            r10000_10ffff_tmp250 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp46);
            r10000_10ffff_tmp251 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp252 = simd_and(r10000_10ffff_tmp250, r10000_10ffff_tmp251);
            r10000_10ffff_tmp253 = simd_or(r10000_10ffff_tmp249, r10000_10ffff_tmp252);
            r10000_10ffff_tmp254 = simd_and(r10000_10ffff_tmp102, basis_bits.bit_4);
            r10000_10ffff_tmp255 = simd_and(r10000_10ffff_tmp254, r10000_10ffff_tmp152);
            r10000_10ffff_tmp256 = simd_or(r10000_10ffff_tmp253, r10000_10ffff_tmp255);
            r10000_10ffff_tmp257 = simd_not(r10000_10ffff_tmp173);
            r10000_10ffff_tmp258 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp257), simd_andc(r10000_10ffff_tmp75, basis_bits.bit_3));
            r10000_10ffff_tmp259 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp258);
            r10000_10ffff_tmp260 = simd_or(r10000_10ffff_tmp256, r10000_10ffff_tmp259);
            r10000_10ffff_tmp261 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp60);
            r10000_10ffff_tmp262 = simd_or(r10000_10ffff_tmp260, r10000_10ffff_tmp261);
            r10000_10ffff_tmp263 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp8);
            r10000_10ffff_tmp264 = simd_and(r10000_10ffff_tmp263, tmp6);
            cc_range_1d480_1d4bd_4 = simd_or(r10000_10ffff_tmp262, r10000_10ffff_tmp264);
            carryQ.cq[271] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(271), sequence_f0_9d_92_adv));
            r10000_10ffff_tmp265 = simd_and(sequence_f0_9d_92_adv, cc_range_1d480_1d4bd_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp265);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            r10000_10ffff_tmp266 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp49);
            r10000_10ffff_tmp267 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp266);
            r10000_10ffff_tmp268 = simd_and(byte_range_80_bf, r10000_10ffff_tmp267);
            cc_range_1d4c0_1d4c5_4 = simd_or(byte_range_80_83, r10000_10ffff_tmp268);
            carryQ.cq[272] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(272), sequence_f0_9d_93_adv));
            r10000_10ffff_tmp269 = simd_and(sequence_f0_9d_93_adv, cc_range_1d4c0_1d4c5_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp269);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            r10000_10ffff_tmp270 = simd_andc(r10000_10ffff_tmp228, r10000_10ffff_tmp32);
            r10000_10ffff_tmp271 = simd_not(tmp2);
            r10000_10ffff_tmp272 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp271), simd_andc(r10000_10ffff_tmp10, basis_bits.bit_4));
            r10000_10ffff_tmp273 = simd_and(byte_range_80_8f, r10000_10ffff_tmp272);
            r10000_10ffff_tmp274 = simd_or(r10000_10ffff_tmp270, r10000_10ffff_tmp273);
            r10000_10ffff_tmp275 = simd_not(r10000_10ffff_tmp49);
            r10000_10ffff_tmp276 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp275), simd_andc(r10000_10ffff_tmp14, basis_bits.bit_3));
            r10000_10ffff_tmp277 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp276);
            r10000_10ffff_tmp278 = simd_or(r10000_10ffff_tmp274, r10000_10ffff_tmp277);
            r10000_10ffff_tmp279 = simd_not(r10000_10ffff_tmp48);
            r10000_10ffff_tmp280 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp279), simd_andc(r10000_10ffff_tmp32, basis_bits.bit_4));
            r10000_10ffff_tmp281 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp280);
            r10000_10ffff_tmp282 = simd_or(r10000_10ffff_tmp278, r10000_10ffff_tmp281);
            r10000_10ffff_tmp283 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp173);
            r10000_10ffff_tmp284 = simd_not(r10000_10ffff_tmp283);
            r10000_10ffff_tmp285 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp284), simd_andc(r10000_10ffff_tmp76, basis_bits.bit_2));
            r10000_10ffff_tmp286 = simd_and(byte_range_80_bf, r10000_10ffff_tmp285);
            r10000_10ffff_tmp287 = simd_or(r10000_10ffff_tmp282, r10000_10ffff_tmp286);
            r10000_10ffff_tmp288 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
            r10000_10ffff_tmp289 = simd_xor(basis_bits.bit_5, tmp1);
            r10000_10ffff_tmp290 = simd_and(r10000_10ffff_tmp288, r10000_10ffff_tmp289);
            cc_range_1d500_1d53b_4 = simd_or(r10000_10ffff_tmp287, r10000_10ffff_tmp290);
            carryQ.cq[273] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(273), sequence_f0_9d_94_adv));
            r10000_10ffff_tmp291 = simd_and(sequence_f0_9d_94_adv, cc_range_1d500_1d53b_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp291);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            r10000_10ffff_tmp292 = simd_and(byte_range_80_8f, r10000_10ffff_tmp109);
            r10000_10ffff_tmp293 = simd_or(byte_range_80_84, r10000_10ffff_tmp292);
            r10000_10ffff_tmp294 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp174);
            r10000_10ffff_tmp295 = simd_or(r10000_10ffff_tmp293, r10000_10ffff_tmp294);
            r10000_10ffff_tmp296 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp121);
            r10000_10ffff_tmp297 = simd_and(byte_range_80_bf, r10000_10ffff_tmp296);
            cc_range_1d540_1d552_4 = simd_or(r10000_10ffff_tmp295, r10000_10ffff_tmp297);
            carryQ.cq[274] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(274), sequence_f0_9d_95_adv));
            r10000_10ffff_tmp298 = simd_and(sequence_f0_9d_95_adv, cc_range_1d540_1d552_4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, r10000_10ffff_tmp298);
            r10000_10ffff_tmp299 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp180), simd_andc(r10000_10ffff_tmp32, basis_bits.bit_4));
            byte_range_96_99 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp299);
            sequence_f0_9d_byte_range_96_99 = simd_and(sequence_f0_9d_adv, byte_range_96_99);
            carryQ.cq[275] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_96_99, carryQ.get_carry_in(275), r10000_10ffff_tmp300));
            sequence_f0_9d_byte_range_96_99_sfx = simd_and(r10000_10ffff_tmp300, byte_range_80_bf);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_9d_byte_range_96_99_sfx);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            r10000_10ffff_tmp301 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp68);
            r10000_10ffff_tmp302 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp301);
            byte_range_80_a5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp302);
            carryQ.cq[276] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(276), r10000_10ffff_tmp303));
            sequence_f0_9d_9a_byte_range_80_a5 = simd_and(r10000_10ffff_tmp303, byte_range_80_a5);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_9d_9a_byte_range_80_a5);
            sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
            carryQ.cq[277] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(277), r10000_10ffff_tmp304));
            sequence_f0_9d_9b_80 = simd_and(r10000_10ffff_tmp304, byte_80);
            sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
            byte_range_80_94 = r10000_10ffff_tmp243;
            carryQ.cq[278] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(278), r10000_10ffff_tmp305));
            sequence_f0_9d_9c_byte_range_80_94 = simd_and(r10000_10ffff_tmp305, byte_range_80_94);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_9d_9c_byte_range_80_94);
            sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
            r10000_10ffff_tmp306 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp10);
            byte_range_80_8e = simd_andc(byte_range_80_8f, r10000_10ffff_tmp306);
            carryQ.cq[279] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(279), r10000_10ffff_tmp307));
            sequence_f0_9d_9d_byte_range_80_8e = simd_and(r10000_10ffff_tmp307, byte_range_80_8e);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_9d_9d_byte_range_80_8e);
            byte_9e = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp74);
            sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
            carryQ.cq[280] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(280), r10000_10ffff_tmp308));
            sequence_f0_9d_9e_byte_range_80_88 = simd_and(r10000_10ffff_tmp308, byte_range_80_88);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_9d_9e_byte_range_80_88);
            byte_9f = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp27);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            byte_range_80_82 = simd_andc(byte_range_80_83, tmp1);
            carryQ.cq[281] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(281), r10000_10ffff_tmp309));
            sequence_f0_9d_9f_byte_range_80_82 = simd_and(r10000_10ffff_tmp309, byte_range_80_82);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_9d_9f_byte_range_80_82);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            r10000_10ffff_tmp310 = simd_andc(r10000_10ffff_tmp102, tmp5);
            byte_range_a0_a2 = simd_andc(r10000_10ffff_tmp310, tmp1);
            carryQ.cq[282] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(282), r10000_10ffff_tmp311));
            sequence_f0_9e_byte_range_a0_a2 = simd_and(r10000_10ffff_tmp311, byte_range_a0_a2);
            carryQ.cq[283] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_a0_a2, carryQ.get_carry_in(283), r10000_10ffff_tmp312));
            sequence_f0_9e_byte_range_a0_a2_sfx = simd_and(r10000_10ffff_tmp312, byte_range_80_bf);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_9e_byte_range_a0_a2_sfx);
            sequence_f0_9e_adv = r10000_10ffff_tmp311;
            sequence_f0_9e_a3 = simd_and(sequence_f0_9e_adv, byte_a3);
            carryQ.cq[284] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(284), r10000_10ffff_tmp313));
            sequence_f0_9e_a3_byte_range_80_84 = simd_and(r10000_10ffff_tmp313, byte_range_80_84);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_9e_a3_byte_range_80_84);
            byte_b8 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp96);
            sequence_f0_9e_b8 = simd_and(sequence_f0_9e_adv, byte_b8);
            carryQ.cq[285] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b8, carryQ.get_carry_in(285), r10000_10ffff_tmp314));
            sequence_f0_9e_b8_byte_range_80_83 = simd_and(r10000_10ffff_tmp314, byte_range_80_83);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_9e_b8_byte_range_80_83);
            byte_b9 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp114);
            sequence_f0_9e_b9 = simd_and(sequence_f0_9e_adv, byte_b9);
            carryQ.cq[286] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b9, carryQ.get_carry_in(286), r10000_10ffff_tmp315));
            sequence_f0_9e_b9_82 = simd_and(r10000_10ffff_tmp315, byte_82);
            byte_ba = simd_and(byte_range_b0_bf, r10000_10ffff_tmp54);
            sequence_f0_9e_ba = simd_and(sequence_f0_9e_adv, byte_ba);
            byte_range_80_89 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp173);
            carryQ.cq[287] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_ba, carryQ.get_carry_in(287), r10000_10ffff_tmp316));
            sequence_f0_9e_ba_byte_range_80_89 = simd_and(r10000_10ffff_tmp316, byte_range_80_89);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_9e_ba_byte_range_80_89);
            byte_range_a0_a9 = simd_andc(r10000_10ffff_tmp102, r10000_10ffff_tmp173);
            byte_f0_byte_range_a0_a9 = simd_and(byte_f0_adv, byte_range_a0_a9);
            carryQ.cq[288] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9, carryQ.get_carry_in(288), r10000_10ffff_tmp317));
            byte_f0_byte_range_a0_a9_sfx = simd_and(r10000_10ffff_tmp317, byte_range_80_bf);
            carryQ.cq[289] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9_sfx, carryQ.get_carry_in(289), r10000_10ffff_tmp318));
            byte_f0_byte_range_a0_a9_sfx_sfx = simd_and(r10000_10ffff_tmp318, byte_range_80_bf);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, byte_f0_byte_range_a0_a9_sfx_sfx);
            sequence_f0_aa = simd_and(byte_f0_adv, byte_aa);
            carryQ.cq[290] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(290), sequence_f0_aa_adv));
            sequence_f0_aa_80 = simd_and(sequence_f0_aa_adv, byte_80);
            byte_range_80_96 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp98);
            carryQ.cq[291] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_80, carryQ.get_carry_in(291), r10000_10ffff_tmp319));
            sequence_f0_aa_80_byte_range_80_96 = simd_and(r10000_10ffff_tmp319, byte_range_80_96);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_aa_80_byte_range_80_96);
            sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
            carryQ.cq[292] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(292), sequence_f0_ab_adv));
            sequence_f0_ab_80 = simd_and(sequence_f0_ab_adv, byte_80);
            carryQ.cq[293] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_80, carryQ.get_carry_in(293), r10000_10ffff_tmp320));
            sequence_f0_ab_80_byte_range_80_b4 = simd_and(r10000_10ffff_tmp320, byte_range_80_b4);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_ab_80_byte_range_80_b4);
            byte_af = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp27);
            sequence_f0_af = simd_and(byte_f0_adv, byte_af);
            carryQ.cq[294] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(294), sequence_f0_af_adv));
            sequence_f0_af_a0 = simd_and(sequence_f0_af_adv, byte_a0);
            carryQ.cq[295] = carryout2carry(pablo_blk_Advance(sequence_f0_af_a0, carryQ.get_carry_in(295), r10000_10ffff_tmp321));
            sequence_f0_af_a0_byte_range_80_9d = simd_and(r10000_10ffff_tmp321, byte_range_80_9d);
            struct_ids_Y.cc = simd_or(struct_ids_Y.cc, sequence_f0_af_a0_byte_range_80_9d);
          }
          else {
            carryQ.CarryDequeueEnqueue(188, 108);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 296);
        }
        carryQ.CarryQ_Adjust(296);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<296, 0> carryQ;
  };

  struct Property_ci_Y {
  Property_ci_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_ci_Y & struct_ci_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp21;
		BitBlock tmp22, tmp23, tmp24, tmp25, tmp26, tmp27, cc_range_27_60_1;
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, byte_c2, r80_7ff_tmp4, r80_7ff_tmp5, r80_7ff_tmp6;
		BitBlock r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13, r80_7ff_tmp14;
		BitBlock r80_7ff_tmp15, r80_7ff_tmp16, r80_7ff_tmp17, r80_7ff_tmp18;
		BitBlock r80_7ff_tmp19, r80_7ff_tmp20, r80_7ff_tmp21, cc_range_a8_b7_2;
		BitBlock byte_c2_adv, r80_7ff_tmp22, byte_range_c4_cf, r100_3ff_tmp1;
		BitBlock byte_range_c4_cb, byte_ca, byte_range_b0_bf, r100_2ff_tmp1;
		BitBlock r100_2ff_tmp2, r100_2ff_tmp3, byte_cb, r100_2ff_tmp4, byte_ca_adv;
		BitBlock r2b0_2ff_tmp1, byte_range_80_bf, byte_cb_adv, r2b0_2ff_tmp2;
		BitBlock r100_3ff_tmp2, byte_cc, byte_cd, byte_range_80_af, r100_3ff_tmp3;
		BitBlock r100_3ff_tmp4, r100_3ff_tmp5, byte_cc_adv, r300_36f_tmp1, byte_cd_adv;
		BitBlock r300_36f_tmp2, r100_3ff_tmp6, r100_3ff_tmp7, byte_range_ce_cf;
		BitBlock r100_3ff_tmp8, r370_3ff_tmp1, r370_3ff_tmp2, cc_range_374_37a_2;
		BitBlock r370_3ff_tmp3, byte_ce, r370_3ff_tmp4, r370_3ff_tmp5, r370_3ff_tmp6;
		BitBlock cc_range_384_387_2, byte_ce_adv, r370_3ff_tmp7, r80_7ff_tmp23;
		BitBlock byte_range_d0_d7, byte_range_d0_d3, byte_d2, r400_4ff_tmp1;
		BitBlock r400_4ff_tmp2, r400_4ff_tmp3, r400_4ff_tmp4, r400_4ff_tmp5;
		BitBlock byte_range_83_89, byte_d2_adv, r400_4ff_tmp6, r400_5ff_tmp1;
		BitBlock byte_range_d4_d5, r400_5ff_tmp2, byte_d6, byte_range_80_8f;
		BitBlock r400_5ff_tmp3, r400_5ff_tmp4, r400_5ff_tmp5, byte_d4, r500_58f_tmp1;
		BitBlock r500_58f_tmp2, r500_58f_tmp3, byte_d5, r500_58f_tmp4, r500_58f_tmp5;
		BitBlock r530_58f_tmp1, r530_58f_tmp2, byte_99, byte_d5_adv, r530_58f_tmp3;
		BitBlock byte_range_90_bf, r400_5ff_tmp6, byte_d7, r400_5ff_tmp7;
		BitBlock r590_5ff_tmp1, r590_5ff_tmp2, r590_5ff_tmp3, r590_5ff_tmp4;
		BitBlock r590_5ff_tmp5, r590_5ff_tmp6, r590_5ff_tmp7, cc_range_591_5bf_2;
		BitBlock byte_d6_adv, r590_5ff_tmp8, r590_5ff_tmp9, r590_5ff_tmp10;
		BitBlock r590_5ff_tmp11, r590_5ff_tmp12, r590_5ff_tmp13, r590_5ff_tmp14;
		BitBlock r590_5ff_tmp15, cc_range_5c1_5f4_2, byte_d7_adv, r590_5ff_tmp16;
		BitBlock byte_range_d8_db, byte_d8, r600_6ff_tmp1, r600_6ff_tmp2;
		BitBlock r600_6ff_tmp3, r600_6ff_tmp4, r600_6ff_tmp5, r600_6ff_tmp6;
		BitBlock r600_6ff_tmp7, r600_6ff_tmp8, r600_6ff_tmp9, r600_6ff_tmp10;
		BitBlock r600_6ff_tmp11, cc_range_600_61c_2, byte_d8_adv, r600_6ff_tmp12;
		BitBlock r600_6ff_tmp13, byte_d9, r600_6ff_tmp14, r600_6ff_tmp15;
		BitBlock r600_6ff_tmp16, r600_6ff_tmp17, r600_6ff_tmp18, r600_6ff_tmp19;
		BitBlock cc_range_640_670_2, byte_d9_adv, r600_6ff_tmp20, r600_6ff_tmp21;
		BitBlock byte_db, r600_6ff_tmp22, r600_6ff_tmp23, r600_6ff_tmp24;
		BitBlock r600_6ff_tmp25, r600_6ff_tmp26, r600_6ff_tmp27, r600_6ff_tmp28;
		BitBlock r600_6ff_tmp29, r600_6ff_tmp30, r600_6ff_tmp31, r600_6ff_tmp32;
		BitBlock r600_6ff_tmp33, cc_range_6d6_6ea_2, byte_db_adv, r600_6ff_tmp34;
		BitBlock r80_7ff_tmp24, byte_range_dc_dd, r700_77f_tmp1, byte_dc, byte_dd;
		BitBlock r700_77f_tmp2, r700_77f_tmp3, r700_77f_tmp4, r700_74f_tmp1;
		BitBlock r700_74f_tmp2, r700_74f_tmp3, r700_74f_tmp4, r700_74f_tmp5;
		BitBlock cc_range_70f_730_2, byte_dc_adv, r700_74f_tmp6, r700_74f_tmp7;
		BitBlock r700_74f_tmp8, byte_range_80_8a, byte_dd_adv, r700_74f_tmp9;
		BitBlock r80_7ff_tmp25, byte_range_de_df, byte_de, r780_7bf_tmp1;
		BitBlock r780_7bf_tmp2, r780_7bf_tmp3, r780_7bf_tmp4, r780_7bf_tmp5;
		BitBlock byte_range_a6_b0, byte_de_adv, r780_7bf_tmp6, byte_df, r7c0_7ff_tmp1;
		BitBlock r7c0_7ff_tmp2, r7c0_7ff_tmp3, r7c0_7ff_tmp4, r7c0_7ff_tmp5;
		BitBlock r7c0_7ff_tmp6, r7c0_7ff_tmp7, r7c0_7ff_tmp8, r7c0_7ff_tmp9;
		BitBlock cc_range_7eb_7fa_2, byte_df_adv, r7c0_7ff_tmp10, byte_range_e0_ef;
		BitBlock byte_range_e0_e3, r800_ffff_tmp1, byte_e4, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, byte_range_80_b7, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock byte_e0, r800_fff_tmp1, byte_a0, r800_fff_tmp2, sequence_e0_a0;
		BitBlock byte_e0_adv, r800_fff_tmp3, r800_fff_tmp4, r800_fff_tmp5;
		BitBlock r800_fff_tmp6, r800_fff_tmp7, r800_fff_tmp8, r800_fff_tmp9;
		BitBlock byte_range_96_ad, sequence_e0_a0_adv, r800_fff_tmp10, r800_fff_tmp11;
		BitBlock r800_fff_tmp12, byte_a1, sequence_e0_a1, r800_fff_tmp13;
		BitBlock r800_fff_tmp14, byte_range_99_9b, sequence_e0_a1_adv, r800_fff_tmp15;
		BitBlock r800_fff_tmp16, byte_a3, sequence_e0_a3, r800_fff_tmp17;
		BitBlock r800_fff_tmp18, byte_range_a4_bf, sequence_e0_a3_adv, r800_fff_tmp19;
		BitBlock byte_a4, sequence_e0_a4, r800_fff_tmp20, r800_fff_tmp21;
		BitBlock r800_fff_tmp22, r800_fff_tmp23, r800_fff_tmp24, r800_fff_tmp25;
		BitBlock r800_fff_tmp26, r800_fff_tmp27, r800_fff_tmp28, cc_range_900_93c_3;
		BitBlock sequence_e0_a4_adv, r800_fff_tmp29, r800_fff_tmp30, byte_a5;
		BitBlock sequence_e0_a5, r800_fff_tmp31, r800_fff_tmp32, r800_fff_tmp33;
		BitBlock r800_fff_tmp34, r800_fff_tmp35, r800_fff_tmp36, r800_fff_tmp37;
		BitBlock r800_fff_tmp38, r800_fff_tmp39, r800_fff_tmp40, r800_fff_tmp41;
		BitBlock r800_fff_tmp42, cc_range_941_971_3, sequence_e0_a5_adv;
		BitBlock r800_fff_tmp43, r800_fff_tmp44, byte_a6, sequence_e0_a6;
		BitBlock r800_fff_tmp45, cc_range_981_9bc_3, sequence_e0_a6_adv;
		BitBlock r800_fff_tmp46, byte_a7, sequence_e0_a7, r800_fff_tmp47;
		BitBlock r800_fff_tmp48, r800_fff_tmp49, r800_fff_tmp50, r800_fff_tmp51;
		BitBlock cc_range_9c1_9e2_3, sequence_e0_a7_adv, r800_fff_tmp52;
		BitBlock r800_fff_tmp53, byte_a8, sequence_e0_a8, r800_fff_tmp54;
		BitBlock r800_fff_tmp55, cc_range_a01_a3c_3, sequence_e0_a8_adv;
		BitBlock r800_fff_tmp56, r800_fff_tmp57, byte_a9, sequence_e0_a9;
		BitBlock r800_fff_tmp58, r800_fff_tmp59, r800_fff_tmp60, r800_fff_tmp61;
		BitBlock r800_fff_tmp62, r800_fff_tmp63, r800_fff_tmp64, r800_fff_tmp65;
		BitBlock r800_fff_tmp66, r800_fff_tmp67, r800_fff_tmp68, r800_fff_tmp69;
		BitBlock r800_fff_tmp70, r800_fff_tmp71, r800_fff_tmp72, cc_range_a41_a75_3;
		BitBlock sequence_e0_a9_adv, r800_fff_tmp73, byte_aa, sequence_e0_aa;
		BitBlock cc_range_a81_abc_3, sequence_e0_aa_adv, r800_fff_tmp74;
		BitBlock r800_fff_tmp75, byte_ab, sequence_e0_ab, r800_fff_tmp76;
		BitBlock r800_fff_tmp77, r800_fff_tmp78, r800_fff_tmp79, cc_range_ac1_ae2_3;
		BitBlock sequence_e0_ab_adv, r800_fff_tmp80, byte_ac, sequence_e0_ac;
		BitBlock r800_fff_tmp81, r800_fff_tmp82, cc_range_b01_b3f_3;
		BitBlock sequence_e0_ac_adv, r800_fff_tmp83, byte_ad, sequence_e0_ad;
		BitBlock r800_fff_tmp84, r800_fff_tmp85, cc_range_b41_b62_3;
		BitBlock sequence_e0_ad_adv, r800_fff_tmp86, byte_ae, sequence_e0_ae;
		BitBlock r800_fff_tmp87, byte_82, sequence_e0_ae_adv, r800_fff_tmp88, byte_af;
		BitBlock sequence_e0_af, r800_fff_tmp89, cc_range_bc0_bcd_3;
		BitBlock sequence_e0_af_adv, r800_fff_tmp90, byte_b0, sequence_e0_b0;
		BitBlock r800_fff_tmp91, r800_fff_tmp92, cc_range_c00_c3e_3;
		BitBlock sequence_e0_b0_adv, r800_fff_tmp93, byte_b1, sequence_e0_b1;
		BitBlock r800_fff_tmp94, r800_fff_tmp95, r800_fff_tmp96, r800_fff_tmp97;
		BitBlock r800_fff_tmp98, r800_fff_tmp99, r800_fff_tmp100, r800_fff_tmp101;
		BitBlock r800_fff_tmp102, cc_range_c40_c62_3, sequence_e0_b1_adv;
		BitBlock r800_fff_tmp103, byte_b2, sequence_e0_b2, cc_range_c81_cbf_3;
		BitBlock sequence_e0_b2_adv, r800_fff_tmp104, byte_b3, sequence_e0_b3;
		BitBlock r800_fff_tmp105, r800_fff_tmp106, r800_fff_tmp107, cc_range_cc6_ce2_3;
		BitBlock sequence_e0_b3_adv, r800_fff_tmp108, byte_b4, sequence_e0_b4, byte_81;
		BitBlock sequence_e0_b4_adv, r800_fff_tmp109, byte_b5, sequence_e0_b5;
		BitBlock cc_range_d41_d62_3, sequence_e0_b5_adv, r800_fff_tmp110, byte_b7;
		BitBlock sequence_e0_b7, r800_fff_tmp111, r800_fff_tmp112, r800_fff_tmp113;
		BitBlock r800_fff_tmp114, r800_fff_tmp115, cc_range_dca_dd6_3;
		BitBlock sequence_e0_b7_adv, r800_fff_tmp116, byte_b8, sequence_e0_b8;
		BitBlock r800_fff_tmp117, r800_fff_tmp118, r800_fff_tmp119, r800_fff_tmp120;
		BitBlock cc_range_e31_e34_3, sequence_e0_b8_adv, r800_fff_tmp121, byte_b9;
		BitBlock sequence_e0_b9, r800_fff_tmp122, r800_fff_tmp123, byte_range_86_8e;
		BitBlock sequence_e0_b9_adv, r800_fff_tmp124, byte_ba, sequence_e0_ba;
		BitBlock r800_fff_tmp125, r800_fff_tmp126, r800_fff_tmp127, r800_fff_tmp128;
		BitBlock r800_fff_tmp129, r800_fff_tmp130, r800_fff_tmp131, r800_fff_tmp132;
		BitBlock cc_range_eb1_ebb_3, sequence_e0_ba_adv, r800_fff_tmp133, byte_bb;
		BitBlock sequence_e0_bb, r800_fff_tmp134, r800_fff_tmp135, cc_range_ec6_ec8_3;
		BitBlock sequence_e0_bb_adv, r800_fff_tmp136, byte_bc, sequence_e0_bc;
		BitBlock r800_fff_tmp137, r800_fff_tmp138, r800_fff_tmp139, r800_fff_tmp140;
		BitBlock cc_range_f18_f39_3, sequence_e0_bc_adv, r800_fff_tmp141, byte_bd;
		BitBlock sequence_e0_bd, r800_fff_tmp142, byte_range_b1_be, sequence_e0_bd_adv;
		BitBlock r800_fff_tmp143, byte_be, sequence_e0_be, r800_fff_tmp144;
		BitBlock r800_fff_tmp145, r800_fff_tmp146, r800_fff_tmp147, r800_fff_tmp148;
		BitBlock r800_fff_tmp149, r800_fff_tmp150, r800_fff_tmp151, r800_fff_tmp152;
		BitBlock r800_fff_tmp153, r800_fff_tmp154, r800_fff_tmp155, r800_fff_tmp156;
		BitBlock r800_fff_tmp157, r800_fff_tmp158, r800_fff_tmp159, r800_fff_tmp160;
		BitBlock cc_range_f80_f99_3, sequence_e0_be_adv, r800_fff_tmp161, byte_bf;
		BitBlock sequence_e0_bf, byte_86, sequence_e0_bf_adv, r800_fff_tmp162;
		BitBlock r800_1fff_tmp1, r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1;
		BitBlock r1000_1fff_tmp2, byte_80, r1000_1fff_tmp3, sequence_e1_80;
		BitBlock byte_e1_adv, r1000_1fff_tmp4, r1000_1fff_tmp5, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9, r1000_1fff_tmp10;
		BitBlock r1000_1fff_tmp11, r1000_1fff_tmp12, r1000_1fff_tmp13;
		BitBlock r1000_1fff_tmp14, r1000_1fff_tmp15, r1000_1fff_tmp16;
		BitBlock r1000_1fff_tmp17, r1000_1fff_tmp18, r1000_1fff_tmp19;
		BitBlock cc_range_102d_103d_3, sequence_e1_80_adv, r1000_1fff_tmp20;
		BitBlock sequence_e1_81, r1000_1fff_tmp21, r1000_1fff_tmp22, r1000_1fff_tmp23;
		BitBlock r1000_1fff_tmp24, r1000_1fff_tmp25, r1000_1fff_tmp26;
		BitBlock r1000_1fff_tmp27, r1000_1fff_tmp28, r1000_1fff_tmp29;
		BitBlock r1000_1fff_tmp30, r1000_1fff_tmp31, r1000_1fff_tmp32;
		BitBlock cc_range_1058_1071_3, sequence_e1_81_adv, r1000_1fff_tmp33;
		BitBlock r1000_1fff_tmp34, sequence_e1_82, r1000_1fff_tmp35, r1000_1fff_tmp36;
		BitBlock r1000_1fff_tmp37, r1000_1fff_tmp38, r1000_1fff_tmp39;
		BitBlock r1000_1fff_tmp40, r1000_1fff_tmp41, cc_range_1082_109d_3;
		BitBlock sequence_e1_82_adv, r1000_1fff_tmp42, r1000_1fff_tmp43, byte_83;
		BitBlock sequence_e1_83, r1000_1fff_tmp44, sequence_e1_83_adv;
		BitBlock r1000_1fff_tmp45, byte_8d, sequence_e1_8d, r1000_1fff_tmp46;
		BitBlock byte_range_9d_9f, sequence_e1_8d_adv, r1000_1fff_tmp47, byte_9c;
		BitBlock sequence_e1_9c, r1000_1fff_tmp48, r1000_1fff_tmp49, r1000_1fff_tmp50;
		BitBlock r1000_1fff_tmp51, cc_range_1712_1732_3, sequence_e1_9c_adv;
		BitBlock r1000_1fff_tmp52, byte_9d, sequence_e1_9d, r1000_1fff_tmp53;
		BitBlock cc_range_1752_1772_3, sequence_e1_9d_adv, r1000_1fff_tmp54, byte_9e;
		BitBlock sequence_e1_9e, r1000_1fff_tmp55, r1000_1fff_tmp56, r1000_1fff_tmp57;
		BitBlock r1000_1fff_tmp58, r1000_1fff_tmp59, r1000_1fff_tmp60;
		BitBlock cc_range_17b4_17b7_3, sequence_e1_9e_adv, r1000_1fff_tmp61;
		BitBlock r1000_1fff_tmp62, byte_9f, sequence_e1_9f, r1000_1fff_tmp63;
		BitBlock r1000_1fff_tmp64, r1000_1fff_tmp65, r1000_1fff_tmp66;
		BitBlock r1000_1fff_tmp67, r1000_1fff_tmp68, r1000_1fff_tmp69;
		BitBlock r1000_1fff_tmp70, r1000_1fff_tmp71, r1000_1fff_tmp72;
		BitBlock r1000_1fff_tmp73, cc_range_17c6_17dd_3, sequence_e1_9f_adv;
		BitBlock r1000_1fff_tmp74, r1000_1fff_tmp75, sequence_e1_a0, r1000_1fff_tmp76;
		BitBlock r1000_1fff_tmp77, byte_range_8b_8e, sequence_e1_a0_adv;
		BitBlock r1000_1fff_tmp78, sequence_e1_a1, sequence_e1_a1_adv;
		BitBlock r1000_1fff_tmp79, byte_a2, sequence_e1_a2, r1000_1fff_tmp80;
		BitBlock sequence_e1_a2_adv, r1000_1fff_tmp81, sequence_e1_a4;
		BitBlock r1000_1fff_tmp82, r1000_1fff_tmp83, r1000_1fff_tmp84;
		BitBlock r1000_1fff_tmp85, r1000_1fff_tmp86, r1000_1fff_tmp87;
		BitBlock r1000_1fff_tmp88, r1000_1fff_tmp89, r1000_1fff_tmp90;
		BitBlock cc_range_1920_1939_3, sequence_e1_a4_adv, r1000_1fff_tmp91;
		BitBlock r1000_1fff_tmp92, sequence_e1_a8, r1000_1fff_tmp93, r1000_1fff_tmp94;
		BitBlock cc_range_1a17_1a1b_3, sequence_e1_a8_adv, r1000_1fff_tmp95;
		BitBlock sequence_e1_a9, r1000_1fff_tmp96, r1000_1fff_tmp97, r1000_1fff_tmp98;
		BitBlock r1000_1fff_tmp99, r1000_1fff_tmp100, r1000_1fff_tmp101;
		BitBlock r1000_1fff_tmp102, r1000_1fff_tmp103, r1000_1fff_tmp104;
		BitBlock r1000_1fff_tmp105, r1000_1fff_tmp106, r1000_1fff_tmp107;
		BitBlock r1000_1fff_tmp108, r1000_1fff_tmp109, r1000_1fff_tmp110;
		BitBlock r1000_1fff_tmp111, cc_range_1a56_1a7f_3, sequence_e1_a9_adv;
		BitBlock r1000_1fff_tmp112, sequence_e1_aa, r1000_1fff_tmp113;
		BitBlock r1000_1fff_tmp114, r1000_1fff_tmp115, cc_range_1aa7_1ab0_3;
		BitBlock sequence_e1_aa_adv, r1000_1fff_tmp116, sequence_e1_ac;
		BitBlock r1000_1fff_tmp117, r1000_1fff_tmp118, r1000_1fff_tmp119;
		BitBlock r1000_1fff_tmp120, r1000_1fff_tmp121, r1000_1fff_tmp122;
		BitBlock r1000_1fff_tmp123, cc_range_1b00_1b3c_3, sequence_e1_ac_adv;
		BitBlock r1000_1fff_tmp124, sequence_e1_ad, r1000_1fff_tmp125;
		BitBlock r1000_1fff_tmp126, r1000_1fff_tmp127, cc_range_1b42_1b6b_3;
		BitBlock sequence_e1_ad_adv, r1000_1fff_tmp128, sequence_e1_ae;
		BitBlock r1000_1fff_tmp129, r1000_1fff_tmp130, r1000_1fff_tmp131;
		BitBlock r1000_1fff_tmp132, r1000_1fff_tmp133, r1000_1fff_tmp134;
		BitBlock r1000_1fff_tmp135, r1000_1fff_tmp136, r1000_1fff_tmp137;
		BitBlock r1000_1fff_tmp138, r1000_1fff_tmp139, cc_range_1b80_1bab_3;
		BitBlock sequence_e1_ae_adv, r1000_1fff_tmp140, sequence_e1_af;
		BitBlock r1000_1fff_tmp141, r1000_1fff_tmp142, r1000_1fff_tmp143;
		BitBlock r1000_1fff_tmp144, r1000_1fff_tmp145, r1000_1fff_tmp146;
		BitBlock cc_range_1be6_1bef_3, sequence_e1_af_adv, r1000_1fff_tmp147;
		BitBlock sequence_e1_b0, r1000_1fff_tmp148, r1000_1fff_tmp149;
		BitBlock r1000_1fff_tmp150, r1000_1fff_tmp151, cc_range_1c2c_1c36_3;
		BitBlock sequence_e1_b0_adv, r1000_1fff_tmp152, sequence_e1_b1;
		BitBlock r1000_1fff_tmp153, byte_range_b8_bd, sequence_e1_b1_adv;
		BitBlock r1000_1fff_tmp154, sequence_e1_b3, r1000_1fff_tmp155;
		BitBlock r1000_1fff_tmp156, r1000_1fff_tmp157, r1000_1fff_tmp158;
		BitBlock r1000_1fff_tmp159, r1000_1fff_tmp160, r1000_1fff_tmp161;
		BitBlock r1000_1fff_tmp162, r1000_1fff_tmp163, r1000_1fff_tmp164;
		BitBlock r1000_1fff_tmp165, r1000_1fff_tmp166, cc_range_1cd0_1cf8_3;
		BitBlock sequence_e1_b3_adv, r1000_1fff_tmp167, sequence_e1_b4;
		BitBlock r1000_1fff_tmp168, byte_range_ac_bf, sequence_e1_b4_adv;
		BitBlock r1000_1fff_tmp169, r1000_1fff_tmp170, sequence_e1_b5;
		BitBlock r1000_1fff_tmp171, r1000_1fff_tmp172, r1000_1fff_tmp173;
		BitBlock r1000_1fff_tmp174, cc_range_1d40_1d78_3, sequence_e1_b5_adv;
		BitBlock r1000_1fff_tmp175, byte_b6, sequence_e1_b6, r1000_1fff_tmp176;
		BitBlock r1000_1fff_tmp177, byte_range_9b_bf, sequence_e1_b6_adv;
		BitBlock r1000_1fff_tmp178, sequence_e1_b7, r1000_1fff_tmp179;
		BitBlock r1000_1fff_tmp180, r1000_1fff_tmp181, r1000_1fff_tmp182;
		BitBlock cc_range_1dc0_1dfc_3, sequence_e1_b7_adv, r1000_1fff_tmp183;
		BitBlock sequence_e1_be, r1000_1fff_tmp184, cc_range_1fbd_1fbf_3;
		BitBlock sequence_e1_be_adv, r1000_1fff_tmp185, sequence_e1_bf;
		BitBlock r1000_1fff_tmp186, r1000_1fff_tmp187, r1000_1fff_tmp188;
		BitBlock r1000_1fff_tmp189, r1000_1fff_tmp190, r1000_1fff_tmp191;
		BitBlock r1000_1fff_tmp192, cc_range_1fc0_1ffd_3, sequence_e1_bf_adv;
		BitBlock r1000_1fff_tmp193, r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3;
		BitBlock r2000_4dff_tmp1, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, sequence_e2_80, byte_e2_adv, r2000_2fff_tmp4;
		BitBlock r2000_2fff_tmp5, r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8;
		BitBlock r2000_2fff_tmp9, r2000_2fff_tmp10, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock r2000_2fff_tmp13, r2000_2fff_tmp14, r2000_2fff_tmp15;
		BitBlock r2000_2fff_tmp16, r2000_2fff_tmp17, r2000_2fff_tmp18;
		BitBlock r2000_2fff_tmp19, cc_range_200b_202a_3, sequence_e2_80_adv;
		BitBlock r2000_2fff_tmp20, r2000_2fff_tmp21, r2000_2fff_tmp22, sequence_e2_81;
		BitBlock r2000_2fff_tmp23, r2000_2fff_tmp24, r2000_2fff_tmp25;
		BitBlock r2000_2fff_tmp26, r2000_2fff_tmp27, r2000_2fff_tmp28;
		BitBlock r2000_2fff_tmp29, r2000_2fff_tmp30, r2000_2fff_tmp31;
		BitBlock r2000_2fff_tmp32, r2000_2fff_tmp33, r2000_2fff_tmp34;
		BitBlock cc_range_2060_207f_3, sequence_e2_81_adv, r2000_2fff_tmp35;
		BitBlock sequence_e2_82, r2000_2fff_tmp36, byte_range_90_9c;
		BitBlock sequence_e2_82_adv, r2000_2fff_tmp37, r2000_2fff_tmp38;
		BitBlock sequence_e2_83, r2000_2fff_tmp39, r2000_2fff_tmp40, r2000_2fff_tmp41;
		BitBlock byte_range_90_b0, sequence_e2_83_adv, r2000_2fff_tmp42;
		BitBlock sequence_e2_b1, r2000_2fff_tmp43, byte_range_bc_bd;
		BitBlock sequence_e2_b1_adv, r2000_2fff_tmp44, sequence_e2_b3;
		BitBlock r2000_2fff_tmp45, r2000_2fff_tmp46, r2000_2fff_tmp47;
		BitBlock byte_range_af_b1, sequence_e2_b3_adv, r2000_2fff_tmp48;
		BitBlock r2000_2fff_tmp49, sequence_e2_b5, cc_range_2d6f_2d7f_3;
		BitBlock sequence_e2_b5_adv, r2000_2fff_tmp50, sequence_e2_b7;
		BitBlock byte_range_a0_bf, sequence_e2_b7_adv, r2000_2fff_tmp51;
		BitBlock r2000_2fff_tmp52, sequence_e2_b8, sequence_e2_b8_adv;
		BitBlock r2000_2fff_tmp53, r2000_4dff_tmp2, byte_e3, r2000_4dff_tmp3;
		BitBlock r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3, sequence_e3_80;
		BitBlock byte_e3_adv, r3000_4dff_tmp4, r3000_4dff_tmp5, r3000_4dff_tmp6;
		BitBlock r3000_4dff_tmp7, r3000_4dff_tmp8, r3000_4dff_tmp9, r3000_4dff_tmp10;
		BitBlock r3000_4dff_tmp11, r3000_4dff_tmp12, r3000_4dff_tmp13;
		BitBlock r3000_4dff_tmp14, r3000_4dff_tmp15, r3000_4dff_tmp16;
		BitBlock r3000_4dff_tmp17, r3000_4dff_tmp18, r3000_4dff_tmp19;
		BitBlock cc_range_3005_303b_3, sequence_e3_80_adv, r3000_4dff_tmp20;
		BitBlock sequence_e3_82, r3000_4dff_tmp21, r3000_4dff_tmp22, r3000_4dff_tmp23;
		BitBlock r3000_4dff_tmp24, byte_range_99_9e, sequence_e3_82_adv;
		BitBlock r3000_4dff_tmp25, sequence_e3_83, r3000_4dff_tmp26, byte_range_bc_be;
		BitBlock sequence_e3_83_adv, r3000_4dff_tmp27, r800_ffff_tmp8, r800_ffff_tmp9;
		BitBlock byte_range_ea_ef, byte_ea, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, sequence_ea_80, byte_ea_adv, ra000_ffff_tmp4;
		BitBlock ra000_ffff_tmp5, ra000_ffff_tmp6, byte_95, sequence_ea_80_adv;
		BitBlock ra000_ffff_tmp7, ra000_ffff_tmp8, byte_93, sequence_ea_93;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11;
		BitBlock sequence_ea_93_adv, ra000_ffff_tmp12, ra000_ffff_tmp13, byte_98;
		BitBlock sequence_ea_98, ra000_ffff_tmp14, byte_8c, sequence_ea_98_adv;
		BitBlock ra000_ffff_tmp15, ra000_ffff_tmp16, sequence_ea_99, ra000_ffff_tmp17;
		BitBlock ra000_ffff_tmp18, ra000_ffff_tmp19, ra000_ffff_tmp20;
		BitBlock ra000_ffff_tmp21, ra000_ffff_tmp22, ra000_ffff_tmp23;
		BitBlock ra000_ffff_tmp24, ra000_ffff_tmp25, ra000_ffff_tmp26;
		BitBlock ra000_ffff_tmp27, cc_range_a66f_a67f_3, sequence_ea_99_adv;
		BitBlock ra000_ffff_tmp28, byte_9a, sequence_ea_9a, ra000_ffff_tmp29;
		BitBlock ra000_ffff_tmp30, cc_range_a69c_a69f_3, sequence_ea_9a_adv;
		BitBlock ra000_ffff_tmp31, ra000_ffff_tmp32, byte_9b, sequence_ea_9b;
		BitBlock ra000_ffff_tmp33, byte_range_b0_b1, sequence_ea_9b_adv;
		BitBlock ra000_ffff_tmp34, sequence_ea_9c, ra000_ffff_tmp35, ra000_ffff_tmp36;
		BitBlock byte_range_80_a1, sequence_ea_9c_adv, ra000_ffff_tmp37;
		BitBlock ra000_ffff_tmp38, sequence_ea_9d, sequence_ea_9d_adv;
		BitBlock ra000_ffff_tmp39, sequence_ea_9e, ra000_ffff_tmp40, byte_range_88_8a;
		BitBlock sequence_ea_9e_adv, ra000_ffff_tmp41, sequence_ea_9f;
		BitBlock ra000_ffff_tmp42, byte_range_b8_b9, sequence_ea_9f_adv;
		BitBlock ra000_ffff_tmp43, ra000_ffff_tmp44, sequence_ea_a0, ra000_ffff_tmp45;
		BitBlock ra000_ffff_tmp46, ra000_ffff_tmp47, ra000_ffff_tmp48;
		BitBlock ra000_ffff_tmp49, ra000_ffff_tmp50, ra000_ffff_tmp51;
		BitBlock cc_range_a802_a825_3, sequence_ea_a0_adv, ra000_ffff_tmp52;
		BitBlock sequence_ea_a3, ra000_ffff_tmp53, ra000_ffff_tmp54, ra000_ffff_tmp55;
		BitBlock cc_range_a8c4_a8e0_3, sequence_ea_a3_adv, ra000_ffff_tmp56;
		BitBlock sequence_ea_a4, ra000_ffff_tmp57, byte_range_a6_ad;
		BitBlock sequence_ea_a4_adv, ra000_ffff_tmp58, sequence_ea_a5;
		BitBlock ra000_ffff_tmp59, ra000_ffff_tmp60, ra000_ffff_tmp61;
		BitBlock ra000_ffff_tmp62, ra000_ffff_tmp63, byte_range_87_91;
		BitBlock sequence_ea_a5_adv, ra000_ffff_tmp64, ra000_ffff_tmp65;
		BitBlock sequence_ea_a6, ra000_ffff_tmp66, ra000_ffff_tmp67, ra000_ffff_tmp68;
		BitBlock ra000_ffff_tmp69, ra000_ffff_tmp70, ra000_ffff_tmp71;
		BitBlock ra000_ffff_tmp72, ra000_ffff_tmp73, ra000_ffff_tmp74;
		BitBlock cc_range_a980_a9bc_3, sequence_ea_a6_adv, ra000_ffff_tmp75;
		BitBlock sequence_ea_a7, ra000_ffff_tmp76, cc_range_a9cf_a9e5_3;
		BitBlock sequence_ea_a7_adv, ra000_ffff_tmp77, sequence_ea_a8;
		BitBlock ra000_ffff_tmp78, ra000_ffff_tmp79, ra000_ffff_tmp80;
		BitBlock ra000_ffff_tmp81, ra000_ffff_tmp82, ra000_ffff_tmp83;
		BitBlock ra000_ffff_tmp84, ra000_ffff_tmp85, ra000_ffff_tmp86;
		BitBlock cc_range_aa29_aa35_3, sequence_ea_a8_adv, ra000_ffff_tmp87;
		BitBlock sequence_ea_a9, ra000_ffff_tmp88, ra000_ffff_tmp89, ra000_ffff_tmp90;
		BitBlock cc_range_aa43_aa7c_3, sequence_ea_a9_adv, ra000_ffff_tmp91;
		BitBlock sequence_ea_aa, ra000_ffff_tmp92, ra000_ffff_tmp93, ra000_ffff_tmp94;
		BitBlock ra000_ffff_tmp95, ra000_ffff_tmp96, ra000_ffff_tmp97;
		BitBlock ra000_ffff_tmp98, ra000_ffff_tmp99, ra000_ffff_tmp100;
		BitBlock ra000_ffff_tmp101, ra000_ffff_tmp102, ra000_ffff_tmp103;
		BitBlock cc_range_aab0_aabe_3, sequence_ea_aa_adv, ra000_ffff_tmp104;
		BitBlock sequence_ea_ab, ra000_ffff_tmp105, ra000_ffff_tmp106;
		BitBlock ra000_ffff_tmp107, ra000_ffff_tmp108, ra000_ffff_tmp109;
		BitBlock ra000_ffff_tmp110, ra000_ffff_tmp111, ra000_ffff_tmp112;
		BitBlock ra000_ffff_tmp113, ra000_ffff_tmp114, cc_range_aac1_aaf6_3;
		BitBlock sequence_ea_ab_adv, ra000_ffff_tmp115, sequence_ea_ad;
		BitBlock ra000_ffff_tmp116, ra000_ffff_tmp117, byte_range_9b_9f;
		BitBlock sequence_ea_ad_adv, ra000_ffff_tmp118, sequence_ea_af;
		BitBlock ra000_ffff_tmp119, ra000_ffff_tmp120, cc_range_abe5_abed_3;
		BitBlock sequence_ea_af_adv, ra000_ffff_tmp121, byte_ef, ra000_ffff_tmp122;
		BitBlock sequence_ef_ac, byte_ef_adv, sequence_ef_ac_adv, ra000_ffff_tmp123;
		BitBlock sequence_ef_ae, ra000_ffff_tmp124, byte_range_b2_bf;
		BitBlock sequence_ef_ae_adv, ra000_ffff_tmp125, sequence_ef_af;
		BitBlock byte_range_80_81, sequence_ef_af_adv, ra000_ffff_tmp126;
		BitBlock sequence_ef_b8, ra000_ffff_tmp127, ra000_ffff_tmp128;
		BitBlock ra000_ffff_tmp129, cc_range_fe00_fe20_3, sequence_ef_b8_adv;
		BitBlock ra000_ffff_tmp130, sequence_ef_b9, ra000_ffff_tmp131;
		BitBlock ra000_ffff_tmp132, cc_range_fe52_fe55_3, sequence_ef_b9_adv;
		BitBlock ra000_ffff_tmp133, sequence_ef_bb, sequence_ef_bb_adv;
		BitBlock ra000_ffff_tmp134, sequence_ef_bc, ra000_ffff_tmp135;
		BitBlock ra000_ffff_tmp136, ra000_ffff_tmp137, cc_range_ff07_ff3e_3;
		BitBlock sequence_ef_bc_adv, ra000_ffff_tmp138, sequence_ef_bd;
		BitBlock ra000_ffff_tmp139, ra000_ffff_tmp140, cc_range_ff40_ff70_3;
		BitBlock sequence_ef_bd_adv, ra000_ffff_tmp141, sequence_ef_be;
		BitBlock byte_range_9e_9f, sequence_ef_be_adv, ra000_ffff_tmp142;
		BitBlock sequence_ef_bf, ra000_ffff_tmp143, ra000_ffff_tmp144;
		BitBlock cc_range_ffe3_fff9_3, sequence_ef_bf_adv, ra000_ffff_tmp145;
		BitBlock byte_range_f0_ff, byte_f0, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock byte_90, r10000_10ffff_tmp3, sequence_f0_90, byte_f0_adv;
		BitBlock r10000_10ffff_tmp4, r10000_10ffff_tmp5, byte_87, r10000_10ffff_tmp6;
		BitBlock sequence_f0_90_87, sequence_f0_90_adv, r10000_10ffff_tmp7;
		BitBlock r10000_10ffff_tmp8, r10000_10ffff_tmp9, sequence_f0_90_87_adv;
		BitBlock r10000_10ffff_tmp10, r10000_10ffff_tmp11, byte_8b, sequence_f0_90_8b;
		BitBlock r10000_10ffff_tmp12, sequence_f0_90_8b_adv, r10000_10ffff_tmp13;
		BitBlock sequence_f0_90_8d, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, byte_range_b6_ba;
		BitBlock sequence_f0_90_8d_adv, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock sequence_f0_90_a8, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock r10000_10ffff_tmp22, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock r10000_10ffff_tmp25, r10000_10ffff_tmp26, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, r10000_10ffff_tmp29, r10000_10ffff_tmp30;
		BitBlock r10000_10ffff_tmp31, r10000_10ffff_tmp32, cc_range_10a01_10a3f_4;
		BitBlock sequence_f0_90_a8_adv, r10000_10ffff_tmp33, sequence_f0_90_ab;
		BitBlock r10000_10ffff_tmp34, byte_range_a5_a6, sequence_f0_90_ab_adv;
		BitBlock r10000_10ffff_tmp35, r10000_10ffff_tmp36, byte_91, sequence_f0_91;
		BitBlock r10000_10ffff_tmp37, sequence_f0_91_80, sequence_f0_91_adv;
		BitBlock r10000_10ffff_tmp38, r10000_10ffff_tmp39, cc_range_11001_11038_4;
		BitBlock sequence_f0_91_80_adv, r10000_10ffff_tmp40, sequence_f0_91_81;
		BitBlock r10000_10ffff_tmp41, r10000_10ffff_tmp42, r10000_10ffff_tmp43;
		BitBlock cc_range_11040_1107f_4, sequence_f0_91_81_adv, r10000_10ffff_tmp44;
		BitBlock r10000_10ffff_tmp45, sequence_f0_91_82, r10000_10ffff_tmp46;
		BitBlock r10000_10ffff_tmp47, r10000_10ffff_tmp48, r10000_10ffff_tmp49;
		BitBlock r10000_10ffff_tmp50, r10000_10ffff_tmp51, r10000_10ffff_tmp52;
		BitBlock r10000_10ffff_tmp53, cc_range_11080_110bd_4, sequence_f0_91_82_adv;
		BitBlock r10000_10ffff_tmp54, r10000_10ffff_tmp55, byte_84, sequence_f0_91_84;
		BitBlock r10000_10ffff_tmp56, r10000_10ffff_tmp57, r10000_10ffff_tmp58;
		BitBlock r10000_10ffff_tmp59, r10000_10ffff_tmp60, r10000_10ffff_tmp61;
		BitBlock r10000_10ffff_tmp62, r10000_10ffff_tmp63, r10000_10ffff_tmp64;
		BitBlock r10000_10ffff_tmp65, r10000_10ffff_tmp66, r10000_10ffff_tmp67;
		BitBlock cc_range_11100_1112d_4, sequence_f0_91_84_adv, r10000_10ffff_tmp68;
		BitBlock r10000_10ffff_tmp69, byte_85, sequence_f0_91_85, r10000_10ffff_tmp70;
		BitBlock sequence_f0_91_85_adv, r10000_10ffff_tmp71, r10000_10ffff_tmp72;
		BitBlock sequence_f0_91_86, r10000_10ffff_tmp73, r10000_10ffff_tmp74;
		BitBlock r10000_10ffff_tmp75, cc_range_11180_111b6_4, sequence_f0_91_86_adv;
		BitBlock r10000_10ffff_tmp76, byte_88, sequence_f0_91_88, r10000_10ffff_tmp77;
		BitBlock r10000_10ffff_tmp78, r10000_10ffff_tmp79, r10000_10ffff_tmp80;
		BitBlock r10000_10ffff_tmp81, r10000_10ffff_tmp82, r10000_10ffff_tmp83;
		BitBlock cc_range_1122f_11236_4, sequence_f0_91_88_adv, r10000_10ffff_tmp84;
		BitBlock sequence_f0_91_8b, r10000_10ffff_tmp85, r10000_10ffff_tmp86;
		BitBlock r10000_10ffff_tmp87, cc_range_112df_112e3_4, sequence_f0_91_8b_adv;
		BitBlock r10000_10ffff_tmp88, r10000_10ffff_tmp89, sequence_f0_91_8c;
		BitBlock r10000_10ffff_tmp90, cc_range_11301_1133c_4, sequence_f0_91_8c_adv;
		BitBlock r10000_10ffff_tmp91, sequence_f0_91_8d, r10000_10ffff_tmp92;
		BitBlock r10000_10ffff_tmp93, r10000_10ffff_tmp94, r10000_10ffff_tmp95;
		BitBlock r10000_10ffff_tmp96, cc_range_11340_11370_4, sequence_f0_91_8d_adv;
		BitBlock r10000_10ffff_tmp97, byte_92, sequence_f0_91_92, r10000_10ffff_tmp98;
		BitBlock r10000_10ffff_tmp99, r10000_10ffff_tmp100, r10000_10ffff_tmp101;
		BitBlock r10000_10ffff_tmp102, cc_range_114b3_114bf_4, sequence_f0_91_92_adv;
		BitBlock r10000_10ffff_tmp103, sequence_f0_91_93, r10000_10ffff_tmp104;
		BitBlock r10000_10ffff_tmp105, cc_range_114c0_114c2_4, sequence_f0_91_93_adv;
		BitBlock r10000_10ffff_tmp106, byte_96, sequence_f0_91_96;
		BitBlock r10000_10ffff_tmp107, r10000_10ffff_tmp108, r10000_10ffff_tmp109;
		BitBlock r10000_10ffff_tmp110, r10000_10ffff_tmp111, cc_range_115b2_115bf_4;
		BitBlock sequence_f0_91_96_adv, r10000_10ffff_tmp112, byte_97;
		BitBlock sequence_f0_91_97, sequence_f0_91_97_adv, r10000_10ffff_tmp113;
		BitBlock sequence_f0_91_98, r10000_10ffff_tmp114, r10000_10ffff_tmp115;
		BitBlock cc_range_11633_1163f_4, sequence_f0_91_98_adv, r10000_10ffff_tmp116;
		BitBlock r10000_10ffff_tmp117, sequence_f0_91_99, sequence_f0_91_99_adv;
		BitBlock r10000_10ffff_tmp118, sequence_f0_91_9a, r10000_10ffff_tmp119;
		BitBlock r10000_10ffff_tmp120, r10000_10ffff_tmp121, r10000_10ffff_tmp122;
		BitBlock r10000_10ffff_tmp123, cc_range_116ab_116b7_4, sequence_f0_91_9a_adv;
		BitBlock r10000_10ffff_tmp124, sequence_f0_96, r10000_10ffff_tmp125;
		BitBlock sequence_f0_96_ab, sequence_f0_96_adv, byte_range_b0_b4;
		BitBlock sequence_f0_96_ab_adv, r10000_10ffff_tmp126, sequence_f0_96_ac;
		BitBlock byte_range_b0_b6, sequence_f0_96_ac_adv, r10000_10ffff_tmp127;
		BitBlock sequence_f0_96_ad, byte_range_80_83, sequence_f0_96_ad_adv;
		BitBlock r10000_10ffff_tmp128, sequence_f0_96_be, r10000_10ffff_tmp129;
		BitBlock r10000_10ffff_tmp130, byte_range_8f_9f, sequence_f0_96_be_adv;
		BitBlock r10000_10ffff_tmp131, sequence_f0_9b, r10000_10ffff_tmp132;
		BitBlock sequence_f0_9b_b2, sequence_f0_9b_adv, r10000_10ffff_tmp133;
		BitBlock r10000_10ffff_tmp134, r10000_10ffff_tmp135, cc_range_1bc9d_1bca0_4;
		BitBlock sequence_f0_9b_b2_adv, r10000_10ffff_tmp136, sequence_f0_9d;
		BitBlock r10000_10ffff_tmp137, sequence_f0_9d_85, sequence_f0_9d_adv;
		BitBlock r10000_10ffff_tmp138, r10000_10ffff_tmp139, r10000_10ffff_tmp140;
		BitBlock r10000_10ffff_tmp141, r10000_10ffff_tmp142, r10000_10ffff_tmp143;
		BitBlock cc_range_1d167_1d173_4, sequence_f0_9d_85_adv, r10000_10ffff_tmp144;
		BitBlock sequence_f0_9d_86, r10000_10ffff_tmp145, r10000_10ffff_tmp146;
		BitBlock r10000_10ffff_tmp147, r10000_10ffff_tmp148, r10000_10ffff_tmp149;
		BitBlock r10000_10ffff_tmp150, cc_range_1d180_1d1aa_4, sequence_f0_9d_86_adv;
		BitBlock r10000_10ffff_tmp151, byte_89, sequence_f0_9d_89;
		BitBlock r10000_10ffff_tmp152, r10000_10ffff_tmp153, byte_range_82_84;
		BitBlock sequence_f0_9d_89_adv, r10000_10ffff_tmp154, sequence_f0_9e;
		BitBlock r10000_10ffff_tmp155, sequence_f0_9e_a3, sequence_f0_9e_adv;
		BitBlock r10000_10ffff_tmp156, byte_range_90_96, sequence_f0_9e_a3_adv;
		BitBlock r10000_10ffff_tmp157, byte_f3, r10000_10ffff_tmp158, sequence_f3_a0;
		BitBlock byte_f3_adv, r10000_10ffff_tmp159, sequence_f3_a0_80;
		BitBlock sequence_f3_a0_adv, cc_range_e0001_e0020_4, sequence_f3_a0_80_adv;
		BitBlock r10000_10ffff_tmp160, sequence_f3_a0_81, sequence_f3_a0_81_adv;
		BitBlock r10000_10ffff_tmp161, r10000_10ffff_tmp162, r10000_10ffff_tmp163;
		BitBlock r10000_10ffff_tmp164, byte_range_84_86;
		BitBlock sequence_f3_a0_byte_range_84_86, r10000_10ffff_tmp165;
		BitBlock sequence_f3_a0_byte_range_84_86_sfx, sequence_f3_a0_87;
		BitBlock r10000_10ffff_tmp166, sequence_f3_a0_87_byte_range_80_af;




        struct_ci_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_and(tmp4, tmp5);
        tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_or(tmp6, tmp9);
        tmp11 = simd_and(tmp3, tmp10);
        tmp12 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp13 = simd_andc(tmp12, tmp1);
        tmp14 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp15 = simd_and(tmp14, tmp8);
        tmp16 = simd_and(tmp13, tmp15);
        tmp17 = simd_or(tmp11, tmp16);
        tmp18 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp19 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp20 = simd_and(tmp18, tmp19);
        tmp21 = simd_and(tmp20, tmp9);
        tmp22 = simd_or(tmp17, tmp21);
        tmp23 = simd_and(tmp18, tmp2);
        tmp24 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp25 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp26 = simd_or(tmp24, tmp25);
        tmp27 = simd_andc(tmp23, tmp26);
        cc_range_27_60_1 = simd_or(tmp22, tmp27);
        struct_ci_Y.cc = simd_or(struct_ci_Y.cc, cc_range_27_60_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 172))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 18))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(tmp8, tmp24);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp5 = simd_and(r80_7ff_tmp4, tmp2);
            r80_7ff_tmp6 = simd_andc(tmp14, tmp25);
            r80_7ff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp8 = simd_and(tmp7, r80_7ff_tmp7);
            r80_7ff_tmp9 = simd_or(r80_7ff_tmp6, r80_7ff_tmp8);
            r80_7ff_tmp10 = simd_and(tmp7, tmp5);
            r80_7ff_tmp11 = simd_or(r80_7ff_tmp9, r80_7ff_tmp10);
            r80_7ff_tmp12 = simd_and(r80_7ff_tmp5, r80_7ff_tmp11);
            r80_7ff_tmp13 = simd_and(r80_7ff_tmp4, tmp12);
            r80_7ff_tmp14 = simd_andc(tmp4, tmp25);
            r80_7ff_tmp15 = simd_and(r80_7ff_tmp13, r80_7ff_tmp14);
            r80_7ff_tmp16 = simd_or(r80_7ff_tmp12, r80_7ff_tmp15);
            r80_7ff_tmp17 = simd_or(basis_bits.bit_5, tmp25);
            r80_7ff_tmp18 = simd_not(r80_7ff_tmp17);
            r80_7ff_tmp19 = simd_and(basis_bits.bit_5, tmp5);
            r80_7ff_tmp20 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp18), simd_andc(r80_7ff_tmp19, basis_bits.bit_4));
            r80_7ff_tmp21 = simd_and(r80_7ff_tmp13, r80_7ff_tmp20);
            cc_range_a8_b7_2 = simd_or(r80_7ff_tmp16, r80_7ff_tmp21);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp22 = simd_and(byte_c2_adv, cc_range_a8_b7_2);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r80_7ff_tmp22);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp24);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(1, 5))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(1, 2))) {
                byte_ca = simd_and(r80_7ff_tmp2, tmp15);
                byte_range_b0_bf = r80_7ff_tmp13;
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(1), r100_2ff_tmp1));
                r100_2ff_tmp2 = simd_and(r100_2ff_tmp1, byte_range_b0_bf);
                r100_2ff_tmp3 = simd_and(tmp14, tmp5);
                byte_cb = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_or(r100_2ff_tmp2, byte_cb);
                if ((bitblock::any(r100_2ff_tmp4) || carryQ.CarryTest(2, 1))) {
                  byte_ca_adv = r100_2ff_tmp1;
                  r2b0_2ff_tmp1 = simd_and(byte_ca_adv, byte_range_b0_bf);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r2b0_2ff_tmp1);
                  byte_range_80_bf = r80_7ff_tmp4;
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(2), byte_cb_adv));
                  r2b0_2ff_tmp2 = simd_and(byte_cb_adv, byte_range_80_bf);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r2b0_2ff_tmp2);
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 2);
              }
              r100_3ff_tmp2 = simd_andc(tmp7, tmp25);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp2);
              byte_cd = simd_and(r80_7ff_tmp2, r80_7ff_tmp8);
              byte_range_80_af = simd_andc(r80_7ff_tmp4, tmp12);
              carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(3), r100_3ff_tmp3));
              r100_3ff_tmp4 = simd_and(r100_3ff_tmp3, byte_range_80_af);
              r100_3ff_tmp5 = simd_or(byte_cc, r100_3ff_tmp4);
              if ((bitblock::any(r100_3ff_tmp5) || carryQ.CarryTest(4, 1))) {
                byte_range_80_bf = r80_7ff_tmp4;
                carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_cc, carryQ.get_carry_in(4), byte_cc_adv));
                r300_36f_tmp1 = simd_and(byte_cc_adv, byte_range_80_bf);
                struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r300_36f_tmp1);
                byte_cd_adv = r100_3ff_tmp3;
                r300_36f_tmp2 = simd_and(byte_cd_adv, byte_range_80_af);
                struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r300_36f_tmp2);
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 1);
              }
              byte_range_b0_bf = r80_7ff_tmp13;
              r100_3ff_tmp6 = simd_and(r100_3ff_tmp3, byte_range_b0_bf);
              r100_3ff_tmp7 = simd_and(tmp7, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp7);
              r100_3ff_tmp8 = simd_or(r100_3ff_tmp6, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp8) || carryQ.CarryTest(5, 1))) {
                r370_3ff_tmp1 = simd_andc(tmp4, basis_bits.bit_6);
                r370_3ff_tmp2 = simd_or(r370_3ff_tmp1, tmp15);
                cc_range_374_37a_2 = simd_and(byte_range_b0_bf, r370_3ff_tmp2);
                byte_cd_adv = r100_3ff_tmp3;
                r370_3ff_tmp3 = simd_and(byte_cd_adv, cc_range_374_37a_2);
                struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r370_3ff_tmp3);
                byte_ce = simd_and(r80_7ff_tmp2, tmp9);
                r370_3ff_tmp4 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
                r370_3ff_tmp5 = simd_andc(basis_bits.bit_6, tmp5);
                r370_3ff_tmp6 = simd_andc(tmp4, r370_3ff_tmp5);
                cc_range_384_387_2 = simd_and(r370_3ff_tmp4, r370_3ff_tmp6);
                carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(5), byte_ce_adv));
                r370_3ff_tmp7 = simd_and(byte_ce_adv, cc_range_384_387_2);
                struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r370_3ff_tmp7);
              }
              else {
                carryQ.CarryDequeueEnqueue(5, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 5);
            }
            r80_7ff_tmp23 = simd_and(byte_range_c0_ff, tmp19);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp23, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(6, 5))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp23, tmp24);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(6, 1))) {
                byte_d2 = simd_and(r80_7ff_tmp23, r80_7ff_tmp3);
                r400_4ff_tmp1 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
                r400_4ff_tmp2 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                r400_4ff_tmp3 = simd_not(r400_4ff_tmp2);
                r400_4ff_tmp4 = simd_or(basis_bits.bit_5, tmp5);
                r400_4ff_tmp5 = simd_or(simd_and(basis_bits.bit_4, r400_4ff_tmp3), simd_andc(r400_4ff_tmp4, basis_bits.bit_4));
                byte_range_83_89 = simd_and(r400_4ff_tmp1, r400_4ff_tmp5);
                carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(6), byte_d2_adv));
                r400_4ff_tmp6 = simd_and(byte_d2_adv, byte_range_83_89);
                struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r400_4ff_tmp6);
              }
              else {
                carryQ.CarryDequeueEnqueue(6, 1);
              }
              r400_5ff_tmp1 = simd_andc(tmp4, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp23, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(tmp4, tmp8);
              byte_d6 = simd_and(r80_7ff_tmp23, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(7), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(8, 2))) {
                byte_d4 = simd_and(r80_7ff_tmp23, r80_7ff_tmp14);
                byte_range_b0_bf = r80_7ff_tmp13;
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(8), r500_58f_tmp1));
                r500_58f_tmp2 = simd_and(r500_58f_tmp1, byte_range_b0_bf);
                r500_58f_tmp3 = simd_and(tmp4, r80_7ff_tmp7);
                byte_d5 = simd_and(r80_7ff_tmp23, r500_58f_tmp3);
                r500_58f_tmp4 = simd_or(r500_58f_tmp2, byte_d5);
                r500_58f_tmp5 = simd_or(r500_58f_tmp4, r400_5ff_tmp4);
                if ((bitblock::any(r500_58f_tmp5) || carryQ.CarryTest(9, 1))) {
                  r530_58f_tmp1 = simd_and(r80_7ff_tmp4, tmp19);
                  r530_58f_tmp2 = simd_and(tmp14, r80_7ff_tmp7);
                  byte_99 = simd_and(r530_58f_tmp1, r530_58f_tmp2);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(9), byte_d5_adv));
                  r530_58f_tmp3 = simd_and(byte_d5_adv, byte_99);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r530_58f_tmp3);
                }
                else {
                  carryQ.CarryDequeueEnqueue(9, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 2);
              }
              byte_range_90_bf = simd_and(r80_7ff_tmp4, r80_7ff_tmp1);
              r400_5ff_tmp6 = simd_and(r400_5ff_tmp3, byte_range_90_bf);
              byte_d7 = simd_and(r80_7ff_tmp23, tmp6);
              r400_5ff_tmp7 = simd_or(r400_5ff_tmp6, byte_d7);
              if ((bitblock::any(r400_5ff_tmp7) || carryQ.CarryTest(10, 1))) {
                r590_5ff_tmp1 = simd_and(tmp7, basis_bits.bit_6);
                r590_5ff_tmp2 = simd_and(basis_bits.bit_3, r590_5ff_tmp1);
                r590_5ff_tmp3 = simd_not(r590_5ff_tmp2);
                r590_5ff_tmp4 = simd_and(basis_bits.bit_3, tmp26);
                r590_5ff_tmp5 = simd_or(simd_and(basis_bits.bit_2, r590_5ff_tmp3), simd_andc(r590_5ff_tmp4, basis_bits.bit_2));
                r590_5ff_tmp6 = simd_and(r80_7ff_tmp4, r590_5ff_tmp5);
                r590_5ff_tmp7 = simd_and(r80_7ff_tmp13, r80_7ff_tmp10);
                cc_range_591_5bf_2 = simd_or(r590_5ff_tmp6, r590_5ff_tmp7);
                byte_d6_adv = r400_5ff_tmp3;
                r590_5ff_tmp8 = simd_and(byte_d6_adv, cc_range_591_5bf_2);
                struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r590_5ff_tmp8);
                r590_5ff_tmp9 = simd_andc(byte_range_80_8f, tmp24);
                r590_5ff_tmp10 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                r590_5ff_tmp11 = simd_and(r590_5ff_tmp9, r590_5ff_tmp10);
                r590_5ff_tmp12 = simd_and(byte_range_80_8f, r400_5ff_tmp1);
                r590_5ff_tmp13 = simd_or(r590_5ff_tmp11, r590_5ff_tmp12);
                r590_5ff_tmp14 = simd_and(byte_range_80_8f, tmp6);
                r590_5ff_tmp15 = simd_or(r590_5ff_tmp13, r590_5ff_tmp14);
                cc_range_5c1_5f4_2 = simd_or(r590_5ff_tmp15, r80_7ff_tmp15);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(10), byte_d7_adv));
                r590_5ff_tmp16 = simd_and(byte_d7_adv, cc_range_5c1_5f4_2);
                struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r590_5ff_tmp16);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(6, 5);
            }
            byte_range_d8_db = simd_and(r80_7ff_tmp23, tmp14);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(11, 3))) {
              byte_d8 = simd_and(r80_7ff_tmp23, r80_7ff_tmp6);
              r600_6ff_tmp1 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
              r600_6ff_tmp2 = simd_andc(r600_6ff_tmp1, basis_bits.bit_4);
              r600_6ff_tmp3 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              r600_6ff_tmp4 = simd_andc(r600_6ff_tmp2, r600_6ff_tmp3);
              r600_6ff_tmp5 = simd_and(r80_7ff_tmp4, tmp19);
              r600_6ff_tmp6 = simd_or(basis_bits.bit_5, tmp5);
              r600_6ff_tmp7 = simd_and(basis_bits.bit_4, r600_6ff_tmp6);
              r600_6ff_tmp8 = simd_andc(r600_6ff_tmp5, r600_6ff_tmp7);
              r600_6ff_tmp9 = simd_or(r600_6ff_tmp4, r600_6ff_tmp8);
              r600_6ff_tmp10 = simd_andc(tmp7, tmp25);
              r600_6ff_tmp11 = simd_and(r600_6ff_tmp5, r600_6ff_tmp10);
              cc_range_600_61c_2 = simd_or(r600_6ff_tmp9, r600_6ff_tmp11);
              carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(11), byte_d8_adv));
              r600_6ff_tmp12 = simd_and(byte_d8_adv, cc_range_600_61c_2);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r600_6ff_tmp12);
              r600_6ff_tmp13 = simd_and(tmp14, r80_7ff_tmp7);
              byte_d9 = simd_and(r80_7ff_tmp23, r600_6ff_tmp13);
              r600_6ff_tmp14 = simd_andc(r600_6ff_tmp1, tmp26);
              r600_6ff_tmp15 = simd_andc(r80_7ff_tmp4, basis_bits.bit_2);
              r600_6ff_tmp16 = simd_or(basis_bits.bit_3, r600_6ff_tmp7);
              r600_6ff_tmp17 = simd_and(r600_6ff_tmp15, r600_6ff_tmp16);
              r600_6ff_tmp18 = simd_or(r600_6ff_tmp14, r600_6ff_tmp17);
              r600_6ff_tmp19 = simd_andc(r80_7ff_tmp13, tmp26);
              cc_range_640_670_2 = simd_or(r600_6ff_tmp18, r600_6ff_tmp19);
              carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(12), byte_d9_adv));
              r600_6ff_tmp20 = simd_and(byte_d9_adv, cc_range_640_670_2);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r600_6ff_tmp20);
              r600_6ff_tmp21 = simd_and(tmp14, tmp5);
              byte_db = simd_and(r80_7ff_tmp23, r600_6ff_tmp21);
              r600_6ff_tmp22 = simd_xor(basis_bits.bit_4, r600_6ff_tmp3);
              r600_6ff_tmp23 = simd_and(r600_6ff_tmp5, r600_6ff_tmp22);
              r600_6ff_tmp24 = simd_and(basis_bits.bit_4, r80_7ff_tmp17);
              r600_6ff_tmp25 = simd_or(basis_bits.bit_3, r600_6ff_tmp24);
              r600_6ff_tmp26 = simd_not(r600_6ff_tmp25);
              r600_6ff_tmp27 = simd_and(basis_bits.bit_3, r80_7ff_tmp10);
              r600_6ff_tmp28 = simd_or(simd_and(basis_bits.bit_2, r600_6ff_tmp26), simd_andc(r600_6ff_tmp27, basis_bits.bit_2));
              r600_6ff_tmp29 = simd_and(r80_7ff_tmp4, r600_6ff_tmp28);
              r600_6ff_tmp30 = simd_or(r600_6ff_tmp23, r600_6ff_tmp29);
              r600_6ff_tmp31 = simd_and(r80_7ff_tmp5, basis_bits.bit_4);
              r600_6ff_tmp32 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
              r600_6ff_tmp33 = simd_and(r600_6ff_tmp31, r600_6ff_tmp32);
              cc_range_6d6_6ea_2 = simd_or(r600_6ff_tmp30, r600_6ff_tmp33);
              carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(13), byte_db_adv));
              r600_6ff_tmp34 = simd_and(byte_db_adv, cc_range_6d6_6ea_2);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r600_6ff_tmp34);
            }
            else {
              carryQ.CarryDequeueEnqueue(11, 3);
            }
            r80_7ff_tmp24 = simd_andc(tmp7, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp23, r80_7ff_tmp24);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(14, 2))) {
              r700_77f_tmp1 = simd_andc(tmp7, tmp25);
              byte_dc = simd_and(r80_7ff_tmp23, r700_77f_tmp1);
              byte_dd = simd_and(r80_7ff_tmp23, r80_7ff_tmp8);
              byte_range_80_8f = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
              carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(14), r700_77f_tmp2));
              r700_77f_tmp3 = simd_and(r700_77f_tmp2, byte_range_80_8f);
              r700_77f_tmp4 = simd_or(byte_dc, r700_77f_tmp3);
              if ((bitblock::any(r700_77f_tmp4) || carryQ.CarryTest(15, 1))) {
                r700_74f_tmp1 = simd_and(byte_range_80_8f, r80_7ff_tmp10);
                r700_74f_tmp2 = simd_and(r80_7ff_tmp4, tmp19);
                r700_74f_tmp3 = simd_andc(r80_7ff_tmp7, tmp24);
                r700_74f_tmp4 = simd_and(r700_74f_tmp2, r700_74f_tmp3);
                r700_74f_tmp5 = simd_or(r700_74f_tmp1, r700_74f_tmp4);
                cc_range_70f_730_2 = simd_or(r700_74f_tmp5, r80_7ff_tmp13);
                carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(15), byte_dc_adv));
                r700_74f_tmp6 = simd_and(byte_dc_adv, cc_range_70f_730_2);
                struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r700_74f_tmp6);
                r700_74f_tmp7 = simd_or(basis_bits.bit_5, tmp5);
                r700_74f_tmp8 = simd_and(basis_bits.bit_4, r700_74f_tmp7);
                byte_range_80_8a = simd_andc(byte_range_80_8f, r700_74f_tmp8);
                byte_dd_adv = r700_77f_tmp2;
                r700_74f_tmp9 = simd_and(byte_dd_adv, byte_range_80_8a);
                struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r700_74f_tmp9);
              }
              else {
                carryQ.CarryDequeueEnqueue(15, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(14, 2);
            }
            r80_7ff_tmp25 = simd_and(tmp7, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp23, r80_7ff_tmp25);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(16, 2))) {
              byte_de = simd_and(r80_7ff_tmp23, tmp9);
              if ((bitblock::any(byte_de) || carryQ.CarryTest(16, 1))) {
                r780_7bf_tmp1 = simd_and(r80_7ff_tmp4, basis_bits.bit_2);
                r780_7bf_tmp2 = simd_not(tmp26);
                r780_7bf_tmp3 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r780_7bf_tmp4 = simd_or(basis_bits.bit_4, r780_7bf_tmp3);
                r780_7bf_tmp5 = simd_or(simd_and(basis_bits.bit_3, r780_7bf_tmp2), simd_andc(r780_7bf_tmp4, basis_bits.bit_3));
                byte_range_a6_b0 = simd_and(r780_7bf_tmp1, r780_7bf_tmp5);
                carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(16), byte_de_adv));
                r780_7bf_tmp6 = simd_and(byte_de_adv, byte_range_a6_b0);
                struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r780_7bf_tmp6);
              }
              else {
                carryQ.CarryDequeueEnqueue(16, 1);
              }
              byte_df = simd_and(r80_7ff_tmp23, r80_7ff_tmp10);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(17, 1))) {
                r7c0_7ff_tmp1 = simd_and(r80_7ff_tmp4, basis_bits.bit_2);
                r7c0_7ff_tmp2 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r7c0_7ff_tmp3 = simd_or(basis_bits.bit_4, r7c0_7ff_tmp2);
                r7c0_7ff_tmp4 = simd_not(r7c0_7ff_tmp3);
                r7c0_7ff_tmp5 = simd_or(basis_bits.bit_5, tmp5);
                r7c0_7ff_tmp6 = simd_and(basis_bits.bit_4, r7c0_7ff_tmp5);
                r7c0_7ff_tmp7 = simd_or(simd_and(basis_bits.bit_3, r7c0_7ff_tmp4), simd_andc(r7c0_7ff_tmp6, basis_bits.bit_3));
                r7c0_7ff_tmp8 = simd_and(r7c0_7ff_tmp1, r7c0_7ff_tmp7);
                r7c0_7ff_tmp9 = simd_and(r80_7ff_tmp13, tmp15);
                cc_range_7eb_7fa_2 = simd_or(r7c0_7ff_tmp8, r7c0_7ff_tmp9);
                carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(17), byte_df_adv));
                r7c0_7ff_tmp10 = simd_and(byte_df_adv, cc_range_7eb_7fa_2);
                struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r7c0_7ff_tmp10);
              }
              else {
                carryQ.CarryDequeueEnqueue(17, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(16, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 18);
          }
          byte_range_e0_ef = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(18, 110))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp24);
            r800_ffff_tmp1 = simd_andc(tmp4, tmp25);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp3 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_2, r800_ffff_tmp3);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp4);
            carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(18), r800_ffff_tmp5));
            r800_ffff_tmp6 = simd_and(r800_ffff_tmp5, byte_range_80_b7);
            r800_ffff_tmp7 = simd_or(byte_range_e0_e3, r800_ffff_tmp6);
            if ((bitblock::any(r800_ffff_tmp7) || carryQ.CarryTest(19, 75))) {
              r800_4dff_tmp1 = simd_or(tmp24, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(19, 61))) {
                byte_e0 = simd_andc(byte_range_e0_ef, tmp26);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(19, 31))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp2, tmp2);
                  byte_a0 = simd_andc(r800_fff_tmp1, tmp26);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(19), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_and(tmp7, basis_bits.bit_6);
                  r800_fff_tmp4 = simd_or(basis_bits.bit_3, r800_fff_tmp3);
                  r800_fff_tmp5 = simd_not(r800_fff_tmp4);
                  r800_fff_tmp6 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp7 = simd_or(basis_bits.bit_4, r800_fff_tmp6);
                  r800_fff_tmp8 = simd_and(basis_bits.bit_3, r800_fff_tmp7);
                  r800_fff_tmp9 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp5), simd_andc(r800_fff_tmp8, basis_bits.bit_2));
                  byte_range_96_ad = simd_and(r800_ffff_tmp2, r800_fff_tmp9);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(20), sequence_e0_a0_adv));
                  r800_fff_tmp10 = simd_and(sequence_e0_a0_adv, byte_range_96_ad);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp10);
                  r800_fff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp12 = simd_andc(r800_fff_tmp11, tmp24);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp12);
                  sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
                  r800_fff_tmp13 = simd_and(r800_ffff_tmp2, tmp19);
                  r800_fff_tmp14 = simd_and(r800_fff_tmp13, tmp14);
                  byte_range_99_9b = simd_and(r800_fff_tmp14, tmp25);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(21), sequence_e0_a1_adv));
                  r800_fff_tmp15 = simd_and(sequence_e0_a1_adv, byte_range_99_9b);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp15);
                  r800_fff_tmp16 = simd_andc(tmp5, tmp24);
                  byte_a3 = simd_and(r800_fff_tmp1, r800_fff_tmp16);
                  sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
                  r800_fff_tmp17 = simd_and(r800_ffff_tmp2, basis_bits.bit_2);
                  r800_fff_tmp18 = simd_or(basis_bits.bit_3, tmp24);
                  byte_range_a4_bf = simd_and(r800_fff_tmp17, r800_fff_tmp18);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e0_a3, carryQ.get_carry_in(22), sequence_e0_a3_adv));
                  r800_fff_tmp19 = simd_and(sequence_e0_a3_adv, byte_range_a4_bf);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp19);
                  byte_a4 = simd_and(r800_fff_tmp1, r800_ffff_tmp1);
                  sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
                  r800_fff_tmp20 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp21 = simd_andc(r800_ffff_tmp2, r800_fff_tmp20);
                  r800_fff_tmp22 = simd_andc(r800_fff_tmp21, tmp24);
                  r800_fff_tmp23 = simd_andc(r800_fff_tmp22, tmp5);
                  r800_fff_tmp24 = simd_and(r800_ffff_tmp2, tmp12);
                  r800_fff_tmp25 = simd_and(r800_fff_tmp24, tmp15);
                  r800_fff_tmp26 = simd_or(r800_fff_tmp23, r800_fff_tmp25);
                  r800_fff_tmp27 = simd_andc(tmp7, tmp25);
                  r800_fff_tmp28 = simd_and(r800_fff_tmp24, r800_fff_tmp27);
                  cc_range_900_93c_3 = simd_or(r800_fff_tmp26, r800_fff_tmp28);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(23), sequence_e0_a4_adv));
                  r800_fff_tmp29 = simd_and(sequence_e0_a4_adv, cc_range_900_93c_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp29);
                  r800_fff_tmp30 = simd_and(tmp4, r800_fff_tmp11);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp30);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  r800_fff_tmp31 = simd_or(basis_bits.bit_5, tmp25);
                  r800_fff_tmp32 = simd_xor(basis_bits.bit_4, r800_fff_tmp31);
                  r800_fff_tmp33 = simd_and(tmp7, r800_fff_tmp11);
                  r800_fff_tmp34 = simd_or(r800_fff_tmp32, r800_fff_tmp33);
                  r800_fff_tmp35 = simd_and(r800_fff_tmp21, r800_fff_tmp34);
                  r800_fff_tmp36 = simd_andc(r800_fff_tmp13, basis_bits.bit_4);
                  r800_fff_tmp37 = simd_and(r800_fff_tmp36, r800_fff_tmp31);
                  r800_fff_tmp38 = simd_or(r800_fff_tmp35, r800_fff_tmp37);
                  r800_fff_tmp39 = simd_andc(basis_bits.bit_6, tmp24);
                  r800_fff_tmp40 = simd_and(r800_fff_tmp1, r800_fff_tmp39);
                  r800_fff_tmp41 = simd_or(r800_fff_tmp38, r800_fff_tmp40);
                  r800_fff_tmp42 = simd_and(r800_fff_tmp24, r800_fff_tmp12);
                  cc_range_941_971_3 = simd_or(r800_fff_tmp41, r800_fff_tmp42);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(24), sequence_e0_a5_adv));
                  r800_fff_tmp43 = simd_and(sequence_e0_a5_adv, cc_range_941_971_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp43);
                  r800_fff_tmp44 = simd_and(tmp4, tmp8);
                  byte_a6 = simd_and(r800_fff_tmp1, r800_fff_tmp44);
                  sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
                  r800_fff_tmp45 = simd_and(r800_fff_tmp21, r800_fff_tmp12);
                  cc_range_981_9bc_3 = simd_or(r800_fff_tmp45, r800_fff_tmp28);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(25), sequence_e0_a6_adv));
                  r800_fff_tmp46 = simd_and(sequence_e0_a6_adv, cc_range_981_9bc_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp46);
                  byte_a7 = simd_and(r800_fff_tmp1, tmp6);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  r800_fff_tmp47 = simd_andc(r800_fff_tmp21, basis_bits.bit_4);
                  r800_fff_tmp48 = simd_xor(basis_bits.bit_5, tmp25);
                  r800_fff_tmp49 = simd_and(r800_fff_tmp47, r800_fff_tmp48);
                  r800_fff_tmp50 = simd_and(r800_fff_tmp21, r800_fff_tmp33);
                  r800_fff_tmp51 = simd_or(r800_fff_tmp49, r800_fff_tmp50);
                  cc_range_9c1_9e2_3 = simd_or(r800_fff_tmp51, r800_fff_tmp40);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(26), sequence_e0_a7_adv));
                  r800_fff_tmp52 = simd_and(sequence_e0_a7_adv, cc_range_9c1_9e2_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp52);
                  r800_fff_tmp53 = simd_andc(tmp14, tmp25);
                  byte_a8 = simd_and(r800_fff_tmp1, r800_fff_tmp53);
                  sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
                  r800_fff_tmp54 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp55 = simd_and(r800_fff_tmp22, r800_fff_tmp54);
                  cc_range_a01_a3c_3 = simd_or(r800_fff_tmp55, r800_fff_tmp28);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(27), sequence_e0_a8_adv));
                  r800_fff_tmp56 = simd_and(sequence_e0_a8_adv, cc_range_a01_a3c_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp56);
                  r800_fff_tmp57 = simd_and(tmp14, r800_fff_tmp11);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp57);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  r800_fff_tmp58 = simd_not(r800_fff_tmp31);
                  r800_fff_tmp59 = simd_and(basis_bits.bit_5, tmp5);
                  r800_fff_tmp60 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp58), simd_andc(r800_fff_tmp59, basis_bits.bit_4));
                  r800_fff_tmp61 = simd_and(r800_fff_tmp21, r800_fff_tmp60);
                  r800_fff_tmp62 = simd_or(r800_fff_tmp55, r800_fff_tmp61);
                  r800_fff_tmp63 = simd_and(r800_fff_tmp21, basis_bits.bit_4);
                  r800_fff_tmp64 = simd_not(basis_bits.bit_6);
                  r800_fff_tmp65 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp64), simd_andc(tmp5, basis_bits.bit_5));
                  r800_fff_tmp66 = simd_and(r800_fff_tmp63, r800_fff_tmp65);
                  r800_fff_tmp67 = simd_or(r800_fff_tmp62, r800_fff_tmp66);
                  r800_fff_tmp68 = simd_and(r800_fff_tmp13, r800_fff_tmp12);
                  r800_fff_tmp69 = simd_or(r800_fff_tmp67, r800_fff_tmp68);
                  r800_fff_tmp70 = simd_andc(r800_fff_tmp24, r800_4dff_tmp1);
                  r800_fff_tmp71 = simd_or(r800_fff_tmp69, r800_fff_tmp70);
                  r800_fff_tmp72 = simd_and(r800_fff_tmp24, r800_fff_tmp30);
                  cc_range_a41_a75_3 = simd_or(r800_fff_tmp71, r800_fff_tmp72);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(28), sequence_e0_a9_adv));
                  r800_fff_tmp73 = simd_and(sequence_e0_a9_adv, cc_range_a41_a75_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp73);
                  byte_aa = simd_and(r800_fff_tmp1, tmp15);
                  sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
                  cc_range_a81_abc_3 = cc_range_a01_a3c_3;
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(29), sequence_e0_aa_adv));
                  r800_fff_tmp74 = simd_and(sequence_e0_aa_adv, cc_range_a81_abc_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp74);
                  r800_fff_tmp75 = simd_and(tmp14, tmp5);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp75);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  r800_fff_tmp76 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp64), simd_andc(tmp25, basis_bits.bit_5));
                  r800_fff_tmp77 = simd_and(r800_fff_tmp47, r800_fff_tmp76);
                  r800_fff_tmp78 = simd_or(r800_fff_tmp77, r800_fff_tmp61);
                  r800_fff_tmp79 = simd_or(r800_fff_tmp78, r800_fff_tmp50);
                  cc_range_ac1_ae2_3 = simd_or(r800_fff_tmp79, r800_fff_tmp40);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(30), sequence_e0_ab_adv));
                  r800_fff_tmp80 = simd_and(sequence_e0_ab_adv, cc_range_ac1_ae2_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp80);
                  byte_ac = simd_and(r800_fff_tmp1, r800_fff_tmp27);
                  sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
                  r800_fff_tmp81 = simd_and(tmp7, tmp5);
                  r800_fff_tmp82 = simd_and(r800_fff_tmp24, r800_fff_tmp81);
                  cc_range_b01_b3f_3 = simd_or(cc_range_981_9bc_3, r800_fff_tmp82);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(31), sequence_e0_ac_adv));
                  r800_fff_tmp83 = simd_and(sequence_e0_ac_adv, cc_range_b01_b3f_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp83);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp33);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  r800_fff_tmp84 = simd_and(r800_fff_tmp13, r800_fff_tmp44);
                  r800_fff_tmp85 = simd_or(r800_fff_tmp51, r800_fff_tmp84);
                  cc_range_b41_b62_3 = simd_or(r800_fff_tmp85, r800_fff_tmp40);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(32), sequence_e0_ad_adv));
                  r800_fff_tmp86 = simd_and(sequence_e0_ad_adv, cc_range_b41_b62_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp86);
                  byte_ae = simd_and(r800_fff_tmp1, tmp9);
                  sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
                  r800_fff_tmp87 = simd_andc(tmp8, tmp24);
                  byte_82 = simd_and(r800_fff_tmp21, r800_fff_tmp87);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(33), sequence_e0_ae_adv));
                  r800_fff_tmp88 = simd_and(sequence_e0_ae_adv, byte_82);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp88);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp81);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  r800_fff_tmp89 = simd_andc(tmp26, r800_fff_tmp33);
                  cc_range_bc0_bcd_3 = simd_andc(r800_fff_tmp21, r800_fff_tmp89);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(34), sequence_e0_af_adv));
                  r800_fff_tmp90 = simd_and(sequence_e0_af_adv, cc_range_bc0_bcd_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp90);
                  byte_b0 = simd_andc(r800_fff_tmp24, tmp26);
                  sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
                  r800_fff_tmp91 = simd_andc(r800_fff_tmp21, tmp26);
                  r800_fff_tmp92 = simd_and(r800_fff_tmp24, r800_fff_tmp3);
                  cc_range_c00_c3e_3 = simd_or(r800_fff_tmp91, r800_fff_tmp92);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(35), sequence_e0_b0_adv));
                  r800_fff_tmp93 = simd_and(sequence_e0_b0_adv, cc_range_c00_c3e_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp93);
                  byte_b1 = r800_fff_tmp42;
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  r800_fff_tmp94 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp58), simd_andc(r800_fff_tmp6, basis_bits.bit_4));
                  r800_fff_tmp95 = simd_andc(tmp26, r800_fff_tmp94);
                  r800_fff_tmp96 = simd_andc(r800_fff_tmp21, r800_fff_tmp95);
                  r800_fff_tmp97 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp98 = simd_and(r800_fff_tmp63, r800_fff_tmp97);
                  r800_fff_tmp99 = simd_or(r800_fff_tmp96, r800_fff_tmp98);
                  r800_fff_tmp100 = simd_and(r800_fff_tmp13, tmp4);
                  r800_fff_tmp101 = simd_and(r800_fff_tmp100, r800_fff_tmp54);
                  r800_fff_tmp102 = simd_or(r800_fff_tmp99, r800_fff_tmp101);
                  cc_range_c40_c62_3 = simd_or(r800_fff_tmp102, r800_fff_tmp40);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(36), sequence_e0_b1_adv));
                  r800_fff_tmp103 = simd_and(sequence_e0_b1_adv, cc_range_c40_c62_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp103);
                  byte_b2 = simd_and(r800_fff_tmp24, r800_fff_tmp87);
                  sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
                  cc_range_c81_cbf_3 = cc_range_b01_b3f_3;
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(37), sequence_e0_b2_adv));
                  r800_fff_tmp104 = simd_and(sequence_e0_b2_adv, cc_range_c81_cbf_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp104);
                  byte_b3 = simd_and(r800_fff_tmp24, r800_fff_tmp16);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  r800_fff_tmp105 = simd_andc(tmp7, basis_bits.bit_6);
                  r800_fff_tmp106 = simd_or(r800_fff_tmp44, r800_fff_tmp105);
                  r800_fff_tmp107 = simd_and(r800_fff_tmp21, r800_fff_tmp106);
                  cc_range_cc6_ce2_3 = simd_or(r800_fff_tmp107, r800_fff_tmp40);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(38), sequence_e0_b3_adv));
                  r800_fff_tmp108 = simd_and(sequence_e0_b3_adv, cc_range_cc6_ce2_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp108);
                  byte_b4 = simd_and(r800_fff_tmp24, r800_ffff_tmp1);
                  sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
                  byte_81 = r800_fff_tmp45;
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(39), sequence_e0_b4_adv));
                  r800_fff_tmp109 = simd_and(sequence_e0_b4_adv, byte_81);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp109);
                  byte_b5 = r800_fff_tmp72;
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  cc_range_d41_d62_3 = cc_range_9c1_9e2_3;
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(40), sequence_e0_b5_adv));
                  r800_fff_tmp110 = simd_and(sequence_e0_b5_adv, cc_range_d41_d62_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp110);
                  byte_b7 = simd_and(r800_fff_tmp24, tmp6);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  r800_fff_tmp111 = simd_and(r800_fff_tmp21, tmp15);
                  r800_fff_tmp112 = simd_not(tmp25);
                  r800_fff_tmp113 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp112), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r800_fff_tmp114 = simd_and(r800_fff_tmp36, r800_fff_tmp113);
                  r800_fff_tmp115 = simd_or(r800_fff_tmp111, r800_fff_tmp114);
                  cc_range_dca_dd6_3 = simd_or(r800_fff_tmp115, r800_fff_tmp84);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(41), sequence_e0_b7_adv));
                  r800_fff_tmp116 = simd_and(sequence_e0_b7_adv, cc_range_dca_dd6_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp116);
                  byte_b8 = simd_and(r800_fff_tmp24, r800_fff_tmp53);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  r800_fff_tmp117 = simd_or(basis_bits.bit_5, tmp5);
                  r800_fff_tmp118 = simd_not(r800_fff_tmp117);
                  r800_fff_tmp119 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp118), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  r800_fff_tmp120 = simd_or(r800_fff_tmp12, r800_fff_tmp119);
                  cc_range_e31_e34_3 = simd_and(r800_fff_tmp24, r800_fff_tmp120);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(42), sequence_e0_b8_adv));
                  r800_fff_tmp121 = simd_and(sequence_e0_b8_adv, cc_range_e31_e34_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp121);
                  byte_b9 = simd_and(r800_fff_tmp24, r800_fff_tmp57);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  r800_fff_tmp122 = simd_not(r800_fff_tmp59);
                  r800_fff_tmp123 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp122), simd_andc(r800_fff_tmp6, basis_bits.bit_4));
                  byte_range_86_8e = simd_and(r800_fff_tmp21, r800_fff_tmp123);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(43), sequence_e0_b9_adv));
                  r800_fff_tmp124 = simd_and(sequence_e0_b9_adv, byte_range_86_8e);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp124);
                  byte_ba = r800_fff_tmp25;
                  sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
                  r800_fff_tmp125 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp126 = simd_not(r800_fff_tmp125);
                  r800_fff_tmp127 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp126), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  r800_fff_tmp128 = simd_or(r800_fff_tmp12, r800_fff_tmp127);
                  r800_fff_tmp129 = simd_and(r800_fff_tmp24, r800_fff_tmp128);
                  r800_fff_tmp130 = simd_and(r800_fff_tmp24, basis_bits.bit_4);
                  r800_fff_tmp131 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp112), simd_andc(tmp5, basis_bits.bit_5));
                  r800_fff_tmp132 = simd_and(r800_fff_tmp130, r800_fff_tmp131);
                  cc_range_eb1_ebb_3 = simd_or(r800_fff_tmp129, r800_fff_tmp132);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(44), sequence_e0_ba_adv));
                  r800_fff_tmp133 = simd_and(sequence_e0_ba_adv, cc_range_eb1_ebb_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp133);
                  byte_bb = simd_and(r800_fff_tmp24, r800_fff_tmp75);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  r800_fff_tmp134 = simd_and(r800_fff_tmp21, r800_fff_tmp44);
                  r800_fff_tmp135 = simd_andc(r800_fff_tmp63, r800_fff_tmp6);
                  cc_range_ec6_ec8_3 = simd_or(r800_fff_tmp134, r800_fff_tmp135);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(45), sequence_e0_bb_adv));
                  r800_fff_tmp136 = simd_and(sequence_e0_bb_adv, cc_range_ec6_ec8_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp136);
                  byte_bc = r800_fff_tmp28;
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  r800_fff_tmp137 = simd_andc(tmp14, basis_bits.bit_6);
                  r800_fff_tmp138 = simd_and(r800_fff_tmp13, r800_fff_tmp137);
                  r800_fff_tmp139 = simd_or(r800_fff_tmp138, byte_b5);
                  r800_fff_tmp140 = simd_or(r800_fff_tmp139, byte_b7);
                  cc_range_f18_f39_3 = simd_or(r800_fff_tmp140, byte_b9);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(46), sequence_e0_bc_adv));
                  r800_fff_tmp141 = simd_and(sequence_e0_bc_adv, cc_range_f18_f39_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp141);
                  byte_bd = simd_and(r800_fff_tmp24, r800_fff_tmp33);
                  sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
                  r800_fff_tmp142 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp122), simd_andc(r800_fff_tmp31, basis_bits.bit_4));
                  byte_range_b1_be = simd_and(r800_fff_tmp24, r800_fff_tmp142);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(47), sequence_e0_bd_adv));
                  r800_fff_tmp143 = simd_and(sequence_e0_bd_adv, byte_range_b1_be);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp143);
                  byte_be = simd_and(r800_fff_tmp24, tmp9);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  r800_fff_tmp144 = simd_and(basis_bits.bit_5, tmp25);
                  r800_fff_tmp145 = simd_andc(r800_fff_tmp47, r800_fff_tmp144);
                  r800_fff_tmp146 = simd_and(tmp4, basis_bits.bit_6);
                  r800_fff_tmp147 = simd_and(r800_fff_tmp21, r800_fff_tmp146);
                  r800_fff_tmp148 = simd_or(r800_fff_tmp145, r800_fff_tmp147);
                  r800_fff_tmp149 = simd_andc(r800_ffff_tmp2, basis_bits.bit_2);
                  r800_fff_tmp150 = simd_not(basis_bits.bit_4);
                  r800_fff_tmp151 = simd_and(tmp7, tmp25);
                  r800_fff_tmp152 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp150), simd_andc(r800_fff_tmp151, basis_bits.bit_3));
                  r800_fff_tmp153 = simd_and(r800_fff_tmp149, r800_fff_tmp152);
                  r800_fff_tmp154 = simd_or(r800_fff_tmp148, r800_fff_tmp153);
                  r800_fff_tmp155 = simd_and(basis_bits.bit_3, r800_fff_tmp151);
                  r800_fff_tmp156 = simd_not(r800_fff_tmp155);
                  r800_fff_tmp157 = simd_and(basis_bits.bit_4, r800_fff_tmp31);
                  r800_fff_tmp158 = simd_and(basis_bits.bit_3, r800_fff_tmp157);
                  r800_fff_tmp159 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp156), simd_andc(r800_fff_tmp158, basis_bits.bit_2));
                  r800_fff_tmp160 = simd_and(r800_ffff_tmp2, r800_fff_tmp159);
                  cc_range_f80_f99_3 = simd_or(r800_fff_tmp154, r800_fff_tmp160);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(48), sequence_e0_be_adv));
                  r800_fff_tmp161 = simd_and(sequence_e0_be_adv, cc_range_f80_f99_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp161);
                  byte_bf = r800_fff_tmp82;
                  sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
                  byte_86 = r800_fff_tmp134;
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(49), sequence_e0_bf_adv));
                  r800_fff_tmp162 = simd_and(sequence_e0_bf_adv, byte_86);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r800_fff_tmp162);
                }
                else {
                  carryQ.CarryDequeueEnqueue(19, 31);
                }
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp24);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(50, 30))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp2, r1000_1fff_tmp1);
                  byte_80 = simd_andc(r1000_1fff_tmp2, tmp26);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(50), r1000_1fff_tmp3));
                  sequence_e1_80 = simd_and(r1000_1fff_tmp3, byte_80);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_and(r800_ffff_tmp2, basis_bits.bit_2);
                  r1000_1fff_tmp5 = simd_not(tmp26);
                  r1000_1fff_tmp6 = simd_and(tmp7, tmp25);
                  r1000_1fff_tmp7 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp5), simd_andc(r1000_1fff_tmp6, basis_bits.bit_3));
                  r1000_1fff_tmp8 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp7);
                  r1000_1fff_tmp9 = simd_and(r800_ffff_tmp2, tmp12);
                  r1000_1fff_tmp10 = simd_andc(r1000_1fff_tmp9, basis_bits.bit_4);
                  r1000_1fff_tmp11 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp12 = simd_and(r1000_1fff_tmp10, r1000_1fff_tmp11);
                  r1000_1fff_tmp13 = simd_or(r1000_1fff_tmp8, r1000_1fff_tmp12);
                  r1000_1fff_tmp14 = simd_and(r1000_1fff_tmp9, tmp14);
                  r1000_1fff_tmp15 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp16 = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp15);
                  r1000_1fff_tmp17 = simd_or(r1000_1fff_tmp13, r1000_1fff_tmp16);
                  r1000_1fff_tmp18 = simd_and(r1000_1fff_tmp9, tmp7);
                  r1000_1fff_tmp19 = simd_and(r1000_1fff_tmp18, r1000_1fff_tmp15);
                  cc_range_102d_103d_3 = simd_or(r1000_1fff_tmp17, r1000_1fff_tmp19);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(51), sequence_e1_80_adv));
                  r1000_1fff_tmp20 = simd_and(sequence_e1_80_adv, cc_range_102d_103d_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp20);
                  byte_81 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp2);
                  sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
                  r1000_1fff_tmp21 = simd_and(r800_ffff_tmp2, tmp19);
                  r1000_1fff_tmp22 = simd_andc(tmp14, basis_bits.bit_6);
                  r1000_1fff_tmp23 = simd_and(r1000_1fff_tmp21, r1000_1fff_tmp22);
                  r1000_1fff_tmp24 = simd_or(basis_bits.bit_3, tmp26);
                  r1000_1fff_tmp25 = simd_not(r1000_1fff_tmp24);
                  r1000_1fff_tmp26 = simd_and(tmp7, basis_bits.bit_6);
                  r1000_1fff_tmp27 = simd_and(basis_bits.bit_3, r1000_1fff_tmp26);
                  r1000_1fff_tmp28 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp25), simd_andc(r1000_1fff_tmp27, basis_bits.bit_2));
                  r1000_1fff_tmp29 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp28);
                  r1000_1fff_tmp30 = simd_or(r1000_1fff_tmp23, r1000_1fff_tmp29);
                  r1000_1fff_tmp31 = simd_xor(basis_bits.bit_5, tmp25);
                  r1000_1fff_tmp32 = simd_and(r1000_1fff_tmp10, r1000_1fff_tmp31);
                  cc_range_1058_1071_3 = simd_or(r1000_1fff_tmp30, r1000_1fff_tmp32);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(52), sequence_e1_81_adv));
                  r1000_1fff_tmp33 = simd_and(sequence_e1_81_adv, cc_range_1058_1071_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp33);
                  r1000_1fff_tmp34 = simd_andc(tmp8, tmp24);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp34);
                  sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
                  r1000_1fff_tmp35 = simd_and(r1000_1fff_tmp2, tmp4);
                  r1000_1fff_tmp36 = simd_and(r1000_1fff_tmp35, r1000_1fff_tmp15);
                  r1000_1fff_tmp37 = simd_or(byte_82, r1000_1fff_tmp36);
                  r1000_1fff_tmp38 = simd_and(tmp7, r800_1fff_tmp1);
                  r1000_1fff_tmp39 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp38);
                  r1000_1fff_tmp40 = simd_or(r1000_1fff_tmp37, r1000_1fff_tmp39);
                  r1000_1fff_tmp41 = simd_and(r1000_1fff_tmp21, r1000_1fff_tmp38);
                  cc_range_1082_109d_3 = simd_or(r1000_1fff_tmp40, r1000_1fff_tmp41);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(53), sequence_e1_82_adv));
                  r1000_1fff_tmp42 = simd_and(sequence_e1_82_adv, cc_range_1082_109d_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp42);
                  r1000_1fff_tmp43 = simd_andc(tmp5, tmp24);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp43);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  r1000_1fff_tmp44 = simd_andc(tmp7, tmp25);
                  byte_bc = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp44);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(54), sequence_e1_83_adv));
                  r1000_1fff_tmp45 = simd_and(sequence_e1_83_adv, byte_bc);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp45);
                  byte_8d = r1000_1fff_tmp39;
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  r1000_1fff_tmp46 = simd_and(r1000_1fff_tmp21, tmp7);
                  byte_range_9d_9f = simd_and(r1000_1fff_tmp46, tmp25);
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(55), sequence_e1_8d_adv));
                  r1000_1fff_tmp47 = simd_and(sequence_e1_8d_adv, byte_range_9d_9f);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp47);
                  byte_9c = simd_and(r1000_1fff_tmp21, r1000_1fff_tmp44);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  r1000_1fff_tmp48 = simd_not(tmp25);
                  r1000_1fff_tmp49 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp48), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r1000_1fff_tmp50 = simd_and(r800_ffff_tmp2, basis_bits.bit_3);
                  r1000_1fff_tmp51 = simd_andc(r1000_1fff_tmp50, basis_bits.bit_4);
                  cc_range_1712_1732_3 = simd_and(r1000_1fff_tmp49, r1000_1fff_tmp51);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(56), sequence_e1_9c_adv));
                  r1000_1fff_tmp52 = simd_and(sequence_e1_9c_adv, cc_range_1712_1732_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp52);
                  byte_9d = r1000_1fff_tmp41;
                  sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
                  r1000_1fff_tmp53 = simd_andc(basis_bits.bit_6, tmp24);
                  cc_range_1752_1772_3 = simd_and(r1000_1fff_tmp53, r1000_1fff_tmp50);
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(57), sequence_e1_9d_adv));
                  r1000_1fff_tmp54 = simd_and(sequence_e1_9d_adv, cc_range_1752_1772_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp54);
                  byte_9e = simd_and(r1000_1fff_tmp21, tmp9);
                  sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
                  r1000_1fff_tmp55 = simd_andc(tmp4, basis_bits.bit_6);
                  r1000_1fff_tmp56 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp57 = simd_not(r1000_1fff_tmp56);
                  r1000_1fff_tmp58 = simd_and(basis_bits.bit_5, tmp5);
                  r1000_1fff_tmp59 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp57), simd_andc(r1000_1fff_tmp58, basis_bits.bit_4));
                  r1000_1fff_tmp60 = simd_or(r1000_1fff_tmp55, r1000_1fff_tmp59);
                  cc_range_17b4_17b7_3 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp60);
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(58), sequence_e1_9e_adv));
                  r1000_1fff_tmp61 = simd_and(sequence_e1_9e_adv, cc_range_17b4_17b7_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp61);
                  r1000_1fff_tmp62 = simd_and(tmp7, tmp5);
                  byte_9f = simd_and(r1000_1fff_tmp21, r1000_1fff_tmp62);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  r1000_1fff_tmp63 = simd_and(tmp4, tmp8);
                  r1000_1fff_tmp64 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp63);
                  r1000_1fff_tmp65 = simd_andc(r800_ffff_tmp2, basis_bits.bit_2);
                  r1000_1fff_tmp66 = simd_not(tmp24);
                  r1000_1fff_tmp67 = simd_or(basis_bits.bit_5, tmp25);
                  r1000_1fff_tmp68 = simd_and(basis_bits.bit_4, r1000_1fff_tmp67);
                  r1000_1fff_tmp69 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp66), simd_andc(r1000_1fff_tmp68, basis_bits.bit_3));
                  r1000_1fff_tmp70 = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp69);
                  r1000_1fff_tmp71 = simd_or(r1000_1fff_tmp64, r1000_1fff_tmp70);
                  r1000_1fff_tmp72 = simd_and(r1000_1fff_tmp21, tmp6);
                  r1000_1fff_tmp73 = simd_or(r1000_1fff_tmp71, r1000_1fff_tmp72);
                  cc_range_17c6_17dd_3 = simd_or(r1000_1fff_tmp73, byte_9d);
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(59), sequence_e1_9f_adv));
                  r1000_1fff_tmp74 = simd_and(sequence_e1_9f_adv, cc_range_17c6_17dd_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp74);
                  r1000_1fff_tmp75 = simd_and(r800_ffff_tmp2, tmp2);
                  byte_a0 = simd_andc(r1000_1fff_tmp75, tmp26);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  r1000_1fff_tmp76 = simd_and(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp77 = simd_xor(basis_bits.bit_5, tmp5);
                  byte_range_8b_8e = simd_and(r1000_1fff_tmp76, r1000_1fff_tmp77);
                  carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(60), sequence_e1_a0_adv));
                  r1000_1fff_tmp78 = simd_and(sequence_e1_a0_adv, byte_range_8b_8e);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp78);
                  byte_a1 = simd_and(r1000_1fff_tmp75, r800_1fff_tmp2);
                  sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
                  carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(61), sequence_e1_a1_adv));
                  r1000_1fff_tmp79 = simd_and(sequence_e1_a1_adv, byte_83);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp79);
                  byte_a2 = simd_and(r1000_1fff_tmp75, r1000_1fff_tmp34);
                  sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
                  r1000_1fff_tmp80 = simd_and(tmp14, r800_1fff_tmp1);
                  byte_a9 = simd_and(r1000_1fff_tmp75, r1000_1fff_tmp80);
                  carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(62), sequence_e1_a2_adv));
                  r1000_1fff_tmp81 = simd_and(sequence_e1_a2_adv, byte_a9);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp81);
                  byte_a4 = simd_and(r1000_1fff_tmp75, r800_ffff_tmp1);
                  sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
                  r1000_1fff_tmp82 = simd_andc(r1000_1fff_tmp75, tmp24);
                  r1000_1fff_tmp83 = simd_andc(r1000_1fff_tmp82, tmp5);
                  r1000_1fff_tmp84 = simd_not(r1000_1fff_tmp67);
                  r1000_1fff_tmp85 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp84), simd_andc(r1000_1fff_tmp58, basis_bits.bit_4));
                  r1000_1fff_tmp86 = simd_and(r1000_1fff_tmp75, r1000_1fff_tmp85);
                  r1000_1fff_tmp87 = simd_or(r1000_1fff_tmp83, r1000_1fff_tmp86);
                  r1000_1fff_tmp88 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp34);
                  r1000_1fff_tmp89 = simd_or(r1000_1fff_tmp87, r1000_1fff_tmp88);
                  r1000_1fff_tmp90 = simd_and(r1000_1fff_tmp14, tmp25);
                  cc_range_1920_1939_3 = simd_or(r1000_1fff_tmp89, r1000_1fff_tmp90);
                  carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(63), sequence_e1_a4_adv));
                  r1000_1fff_tmp91 = simd_and(sequence_e1_a4_adv, cc_range_1920_1939_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp91);
                  r1000_1fff_tmp92 = simd_andc(tmp14, tmp25);
                  byte_a8 = simd_and(r1000_1fff_tmp75, r1000_1fff_tmp92);
                  sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
                  r1000_1fff_tmp93 = simd_and(tmp14, tmp5);
                  r1000_1fff_tmp94 = simd_or(r1000_1fff_tmp85, r1000_1fff_tmp93);
                  cc_range_1a17_1a1b_3 = simd_and(r1000_1fff_tmp21, r1000_1fff_tmp94);
                  carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(64), sequence_e1_a8_adv));
                  r1000_1fff_tmp95 = simd_and(sequence_e1_a8_adv, cc_range_1a17_1a1b_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp95);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  r1000_1fff_tmp96 = simd_and(r1000_1fff_tmp21, r1000_1fff_tmp63);
                  r1000_1fff_tmp97 = simd_and(r1000_1fff_tmp21, basis_bits.bit_4);
                  r1000_1fff_tmp98 = simd_andc(r1000_1fff_tmp97, r1000_1fff_tmp58);
                  r1000_1fff_tmp99 = simd_or(r1000_1fff_tmp96, r1000_1fff_tmp98);
                  r1000_1fff_tmp100 = simd_or(r1000_1fff_tmp99, byte_a0);
                  r1000_1fff_tmp101 = simd_or(r1000_1fff_tmp100, byte_a2);
                  r1000_1fff_tmp102 = simd_and(basis_bits.bit_5, tmp25);
                  r1000_1fff_tmp103 = simd_xor(basis_bits.bit_4, r1000_1fff_tmp102);
                  r1000_1fff_tmp104 = simd_and(r1000_1fff_tmp75, r1000_1fff_tmp103);
                  r1000_1fff_tmp105 = simd_or(r1000_1fff_tmp101, r1000_1fff_tmp104);
                  r1000_1fff_tmp106 = simd_not(r1000_1fff_tmp102);
                  r1000_1fff_tmp107 = simd_or(basis_bits.bit_5, tmp5);
                  r1000_1fff_tmp108 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp106), simd_andc(r1000_1fff_tmp107, basis_bits.bit_4));
                  r1000_1fff_tmp109 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp108);
                  r1000_1fff_tmp110 = simd_or(r1000_1fff_tmp105, r1000_1fff_tmp109);
                  r1000_1fff_tmp111 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp62);
                  cc_range_1a56_1a7f_3 = simd_or(r1000_1fff_tmp110, r1000_1fff_tmp111);
                  carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(65), sequence_e1_a9_adv));
                  r1000_1fff_tmp112 = simd_and(sequence_e1_a9_adv, cc_range_1a56_1a7f_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp112);
                  byte_aa = simd_and(r1000_1fff_tmp75, tmp15);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  r1000_1fff_tmp113 = simd_and(r1000_1fff_tmp75, tmp6);
                  r1000_1fff_tmp114 = simd_and(basis_bits.bit_4, r1000_1fff_tmp58);
                  r1000_1fff_tmp115 = simd_andc(r1000_1fff_tmp9, r1000_1fff_tmp114);
                  cc_range_1aa7_1ab0_3 = simd_or(r1000_1fff_tmp113, r1000_1fff_tmp115);
                  carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(66), sequence_e1_aa_adv));
                  r1000_1fff_tmp116 = simd_and(sequence_e1_aa_adv, cc_range_1aa7_1ab0_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp116);
                  byte_ac = simd_and(r1000_1fff_tmp75, r1000_1fff_tmp44);
                  sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
                  r1000_1fff_tmp117 = simd_andc(r1000_1fff_tmp2, tmp24);
                  r1000_1fff_tmp118 = simd_and(r1000_1fff_tmp9, r800_ffff_tmp1);
                  r1000_1fff_tmp119 = simd_or(r1000_1fff_tmp117, r1000_1fff_tmp118);
                  r1000_1fff_tmp120 = simd_not(r1000_1fff_tmp107);
                  r1000_1fff_tmp121 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp120), simd_andc(r1000_1fff_tmp56, basis_bits.bit_4));
                  r1000_1fff_tmp122 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp121);
                  r1000_1fff_tmp123 = simd_or(r1000_1fff_tmp119, r1000_1fff_tmp122);
                  cc_range_1b00_1b3c_3 = simd_or(r1000_1fff_tmp123, byte_bc);
                  carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(67), sequence_e1_ac_adv));
                  r1000_1fff_tmp124 = simd_and(sequence_e1_ac_adv, cc_range_1b00_1b3c_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp124);
                  byte_ad = simd_and(r1000_1fff_tmp75, r1000_1fff_tmp38);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  r1000_1fff_tmp125 = simd_and(basis_bits.bit_4, r1000_1fff_tmp107);
                  r1000_1fff_tmp126 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp66), simd_andc(r1000_1fff_tmp125, basis_bits.bit_3));
                  r1000_1fff_tmp127 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp126);
                  cc_range_1b42_1b6b_3 = simd_or(byte_82, r1000_1fff_tmp127);
                  carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(68), sequence_e1_ad_adv));
                  r1000_1fff_tmp128 = simd_and(sequence_e1_ad_adv, cc_range_1b42_1b6b_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp128);
                  byte_ae = simd_and(r1000_1fff_tmp75, tmp9);
                  sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
                  r1000_1fff_tmp129 = simd_andc(r1000_1fff_tmp2, r800_4dff_tmp1);
                  r1000_1fff_tmp130 = simd_andc(r1000_1fff_tmp75, basis_bits.bit_4);
                  r1000_1fff_tmp131 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp132 = simd_and(r1000_1fff_tmp130, r1000_1fff_tmp131);
                  r1000_1fff_tmp133 = simd_or(r1000_1fff_tmp129, r1000_1fff_tmp132);
                  r1000_1fff_tmp134 = simd_and(r1000_1fff_tmp75, r1000_1fff_tmp22);
                  r1000_1fff_tmp135 = simd_or(r1000_1fff_tmp133, r1000_1fff_tmp134);
                  r1000_1fff_tmp136 = simd_and(r1000_1fff_tmp75, basis_bits.bit_4);
                  r1000_1fff_tmp137 = simd_not(basis_bits.bit_6);
                  r1000_1fff_tmp138 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp137), simd_andc(tmp5, basis_bits.bit_5));
                  r1000_1fff_tmp139 = simd_and(r1000_1fff_tmp136, r1000_1fff_tmp138);
                  cc_range_1b80_1bab_3 = simd_or(r1000_1fff_tmp135, r1000_1fff_tmp139);
                  carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(69), sequence_e1_ae_adv));
                  r1000_1fff_tmp140 = simd_and(sequence_e1_ae_adv, cc_range_1b80_1bab_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp140);
                  byte_af = simd_and(r1000_1fff_tmp75, r1000_1fff_tmp62);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  r1000_1fff_tmp141 = simd_or(r1000_1fff_tmp63, r1000_1fff_tmp22);
                  r1000_1fff_tmp142 = simd_or(r1000_1fff_tmp141, r1000_1fff_tmp38);
                  r1000_1fff_tmp143 = simd_and(r1000_1fff_tmp75, r1000_1fff_tmp142);
                  r1000_1fff_tmp144 = simd_not(r800_4dff_tmp1);
                  r1000_1fff_tmp145 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp144), simd_andc(r1000_1fff_tmp62, basis_bits.bit_3));
                  r1000_1fff_tmp146 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp145);
                  cc_range_1be6_1bef_3 = simd_or(r1000_1fff_tmp143, r1000_1fff_tmp146);
                  carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(70), sequence_e1_af_adv));
                  r1000_1fff_tmp147 = simd_and(sequence_e1_af_adv, cc_range_1be6_1bef_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp147);
                  byte_b0 = simd_andc(r1000_1fff_tmp9, tmp26);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  r1000_1fff_tmp148 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp66), simd_andc(tmp7, basis_bits.bit_3));
                  r1000_1fff_tmp149 = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp148);
                  r1000_1fff_tmp150 = simd_and(tmp4, basis_bits.bit_6);
                  r1000_1fff_tmp151 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp150);
                  cc_range_1c2c_1c36_3 = simd_or(r1000_1fff_tmp149, r1000_1fff_tmp151);
                  carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(71), sequence_e1_b0_adv));
                  r1000_1fff_tmp152 = simd_and(sequence_e1_b0_adv, cc_range_1c2c_1c36_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp152);
                  byte_b1 = simd_and(r1000_1fff_tmp9, r800_1fff_tmp2);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  r1000_1fff_tmp153 = simd_and(r1000_1fff_tmp9, basis_bits.bit_4);
                  byte_range_b8_bd = simd_andc(r1000_1fff_tmp153, r1000_1fff_tmp56);
                  carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(72), sequence_e1_b1_adv));
                  r1000_1fff_tmp154 = simd_and(sequence_e1_b1_adv, byte_range_b8_bd);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp154);
                  byte_b3 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp43);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  r1000_1fff_tmp155 = simd_andc(r1000_1fff_tmp21, tmp24);
                  r1000_1fff_tmp156 = simd_andc(r1000_1fff_tmp155, tmp5);
                  r1000_1fff_tmp157 = simd_and(basis_bits.bit_3, tmp24);
                  r1000_1fff_tmp158 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp25), simd_andc(r1000_1fff_tmp157, basis_bits.bit_2));
                  r1000_1fff_tmp159 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp158);
                  r1000_1fff_tmp160 = simd_or(r1000_1fff_tmp156, r1000_1fff_tmp159);
                  r1000_1fff_tmp161 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp84), simd_andc(r1000_1fff_tmp11, basis_bits.bit_4));
                  r1000_1fff_tmp162 = simd_and(r1000_1fff_tmp75, r1000_1fff_tmp161);
                  r1000_1fff_tmp163 = simd_or(r1000_1fff_tmp160, r1000_1fff_tmp162);
                  r1000_1fff_tmp164 = simd_or(r1000_1fff_tmp163, byte_ad);
                  r1000_1fff_tmp165 = simd_or(r1000_1fff_tmp164, r1000_1fff_tmp118);
                  r1000_1fff_tmp166 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp22);
                  cc_range_1cd0_1cf8_3 = simd_or(r1000_1fff_tmp165, r1000_1fff_tmp166);
                  carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(73), sequence_e1_b3_adv));
                  r1000_1fff_tmp167 = simd_and(sequence_e1_b3_adv, cc_range_1cd0_1cf8_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp167);
                  byte_b4 = r1000_1fff_tmp118;
                  sequence_e1_b4 = simd_and(byte_e1_adv, byte_b4);
                  r1000_1fff_tmp168 = simd_or(basis_bits.bit_3, tmp7);
                  byte_range_ac_bf = simd_and(r1000_1fff_tmp4, r1000_1fff_tmp168);
                  carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e1_b4, carryQ.get_carry_in(74), sequence_e1_b4_adv));
                  r1000_1fff_tmp169 = simd_and(sequence_e1_b4_adv, byte_range_ac_bf);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp169);
                  r1000_1fff_tmp170 = simd_and(tmp4, r800_1fff_tmp1);
                  byte_b5 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp170);
                  sequence_e1_b5 = simd_and(byte_e1_adv, byte_b5);
                  r1000_1fff_tmp171 = simd_or(basis_bits.bit_3, r1000_1fff_tmp125);
                  r1000_1fff_tmp172 = simd_and(basis_bits.bit_2, r1000_1fff_tmp171);
                  r1000_1fff_tmp173 = simd_andc(r800_ffff_tmp2, r1000_1fff_tmp172);
                  r1000_1fff_tmp174 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp92);
                  cc_range_1d40_1d78_3 = simd_or(r1000_1fff_tmp173, r1000_1fff_tmp174);
                  carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e1_b5, carryQ.get_carry_in(75), sequence_e1_b5_adv));
                  r1000_1fff_tmp175 = simd_and(sequence_e1_b5_adv, cc_range_1d40_1d78_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp175);
                  byte_b6 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp63);
                  sequence_e1_b6 = simd_and(byte_e1_adv, byte_b6);
                  r1000_1fff_tmp176 = simd_and(basis_bits.bit_3, r1000_1fff_tmp125);
                  r1000_1fff_tmp177 = simd_or(basis_bits.bit_2, r1000_1fff_tmp176);
                  byte_range_9b_bf = simd_and(r800_ffff_tmp2, r1000_1fff_tmp177);
                  carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e1_b6, carryQ.get_carry_in(76), sequence_e1_b6_adv));
                  r1000_1fff_tmp178 = simd_and(sequence_e1_b6_adv, byte_range_9b_bf);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp178);
                  byte_b7 = simd_and(r1000_1fff_tmp9, tmp6);
                  sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
                  r1000_1fff_tmp179 = simd_or(basis_bits.bit_4, r1000_1fff_tmp56);
                  r1000_1fff_tmp180 = simd_and(basis_bits.bit_3, r1000_1fff_tmp179);
                  r1000_1fff_tmp181 = simd_and(basis_bits.bit_2, r1000_1fff_tmp180);
                  r1000_1fff_tmp182 = simd_andc(r800_ffff_tmp2, r1000_1fff_tmp181);
                  cc_range_1dc0_1dfc_3 = simd_or(r1000_1fff_tmp182, r1000_1fff_tmp18);
                  carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e1_b7, carryQ.get_carry_in(77), sequence_e1_b7_adv));
                  r1000_1fff_tmp183 = simd_and(sequence_e1_b7_adv, cc_range_1dc0_1dfc_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp183);
                  byte_be = simd_and(r1000_1fff_tmp9, tmp9);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  r1000_1fff_tmp184 = simd_and(tmp7, basis_bits.bit_7);
                  cc_range_1fbd_1fbf_3 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp184);
                  carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(78), sequence_e1_be_adv));
                  r1000_1fff_tmp185 = simd_and(sequence_e1_be_adv, cc_range_1fbd_1fbf_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp185);
                  byte_bf = r1000_1fff_tmp111;
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  r1000_1fff_tmp186 = simd_and(r1000_1fff_tmp2, tmp7);
                  r1000_1fff_tmp187 = simd_and(r1000_1fff_tmp186, tmp25);
                  r1000_1fff_tmp188 = simd_or(r1000_1fff_tmp129, r1000_1fff_tmp187);
                  r1000_1fff_tmp189 = simd_or(r1000_1fff_tmp188, byte_range_9d_9f);
                  r1000_1fff_tmp190 = simd_and(r1000_1fff_tmp75, tmp7);
                  r1000_1fff_tmp191 = simd_and(r1000_1fff_tmp190, tmp25);
                  r1000_1fff_tmp192 = simd_or(r1000_1fff_tmp189, r1000_1fff_tmp191);
                  cc_range_1fc0_1ffd_3 = simd_or(r1000_1fff_tmp192, r1000_1fff_tmp19);
                  carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(79), sequence_e1_bf_adv));
                  r1000_1fff_tmp193 = simd_and(sequence_e1_bf_adv, cc_range_1fc0_1ffd_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r1000_1fff_tmp193);
                }
                else {
                  carryQ.CarryDequeueEnqueue(50, 30);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(19, 61);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp24);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp6);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(80, 14))) {
                r2000_4dff_tmp1 = simd_andc(tmp8, tmp24);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp1);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(80, 10))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp2, r2000_2fff_tmp1);
                  byte_80 = simd_andc(r2000_2fff_tmp2, tmp26);
                  carryQ.cq[80] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(80), r2000_2fff_tmp3));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp3, byte_80);
                  byte_e2_adv = r2000_2fff_tmp3;
                  r2000_2fff_tmp4 = simd_and(r2000_2fff_tmp2, basis_bits.bit_4);
                  r2000_2fff_tmp5 = simd_or(basis_bits.bit_5, tmp5);
                  r2000_2fff_tmp6 = simd_and(r2000_2fff_tmp4, r2000_2fff_tmp5);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp2, tmp19);
                  r2000_2fff_tmp8 = simd_andc(tmp14, basis_bits.bit_6);
                  r2000_2fff_tmp9 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp8);
                  r2000_2fff_tmp10 = simd_or(r2000_2fff_tmp6, r2000_2fff_tmp9);
                  r2000_2fff_tmp11 = simd_and(r800_ffff_tmp2, tmp2);
                  r2000_2fff_tmp12 = simd_and(r2000_2fff_tmp11, r800_ffff_tmp1);
                  r2000_2fff_tmp13 = simd_or(r2000_2fff_tmp10, r2000_2fff_tmp12);
                  r2000_2fff_tmp14 = simd_and(r2000_2fff_tmp11, tmp6);
                  r2000_2fff_tmp15 = simd_or(r2000_2fff_tmp13, r2000_2fff_tmp14);
                  r2000_2fff_tmp16 = simd_and(r2000_2fff_tmp11, basis_bits.bit_4);
                  r2000_2fff_tmp17 = simd_not(tmp5);
                  r2000_2fff_tmp18 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp17), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r2000_2fff_tmp19 = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp18);
                  cc_range_200b_202a_3 = simd_or(r2000_2fff_tmp15, r2000_2fff_tmp19);
                  carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(81), sequence_e2_80_adv));
                  r2000_2fff_tmp20 = simd_and(sequence_e2_80_adv, cc_range_200b_202a_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r2000_2fff_tmp20);
                  r2000_2fff_tmp21 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp22 = simd_andc(r2000_2fff_tmp21, tmp24);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp22);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  r2000_2fff_tmp23 = simd_andc(r2000_2fff_tmp11, basis_bits.bit_4);
                  r2000_2fff_tmp24 = simd_and(basis_bits.bit_5, tmp25);
                  r2000_2fff_tmp25 = simd_andc(r2000_2fff_tmp23, r2000_2fff_tmp24);
                  r2000_2fff_tmp26 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp27 = simd_or(basis_bits.bit_4, r2000_2fff_tmp26);
                  r2000_2fff_tmp28 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp27);
                  r2000_2fff_tmp29 = simd_or(r2000_2fff_tmp25, r2000_2fff_tmp28);
                  r2000_2fff_tmp30 = simd_and(r800_ffff_tmp2, tmp12);
                  r2000_2fff_tmp31 = simd_and(r2000_2fff_tmp30, r2000_2fff_tmp22);
                  r2000_2fff_tmp32 = simd_or(r2000_2fff_tmp29, r2000_2fff_tmp31);
                  r2000_2fff_tmp33 = simd_and(tmp7, tmp5);
                  r2000_2fff_tmp34 = simd_and(r2000_2fff_tmp30, r2000_2fff_tmp33);
                  cc_range_2060_207f_3 = simd_or(r2000_2fff_tmp32, r2000_2fff_tmp34);
                  carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(82), sequence_e2_81_adv));
                  r2000_2fff_tmp35 = simd_and(sequence_e2_81_adv, cc_range_2060_207f_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r2000_2fff_tmp35);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp1);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp36 = simd_and(basis_bits.bit_4, r2000_2fff_tmp24);
                  byte_range_90_9c = simd_andc(r2000_2fff_tmp7, r2000_2fff_tmp36);
                  carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(83), sequence_e2_82_adv));
                  r2000_2fff_tmp37 = simd_and(sequence_e2_82_adv, byte_range_90_9c);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r2000_2fff_tmp37);
                  r2000_2fff_tmp38 = simd_andc(tmp5, tmp24);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp38);
                  sequence_e2_83 = simd_and(byte_e2_adv, byte_83);
                  r2000_2fff_tmp39 = simd_and(basis_bits.bit_3, tmp26);
                  r2000_2fff_tmp40 = simd_not(r2000_2fff_tmp39);
                  r2000_2fff_tmp41 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp40), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_b0 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp41);
                  carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(84), sequence_e2_83_adv));
                  r2000_2fff_tmp42 = simd_and(sequence_e2_83_adv, byte_range_90_b0);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r2000_2fff_tmp42);
                  byte_b1 = r2000_2fff_tmp31;
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp43 = simd_andc(tmp7, basis_bits.bit_6);
                  byte_range_bc_bd = simd_and(r2000_2fff_tmp30, r2000_2fff_tmp43);
                  carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(85), sequence_e2_b1_adv));
                  r2000_2fff_tmp44 = simd_and(sequence_e2_b1_adv, byte_range_bc_bd);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r2000_2fff_tmp44);
                  byte_b3 = simd_and(r2000_2fff_tmp30, r2000_2fff_tmp38);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp45 = simd_and(r800_ffff_tmp2, basis_bits.bit_2);
                  r2000_2fff_tmp46 = simd_not(r800_4dff_tmp1);
                  r2000_2fff_tmp47 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp46), simd_andc(r2000_2fff_tmp33, basis_bits.bit_3));
                  byte_range_af_b1 = simd_and(r2000_2fff_tmp45, r2000_2fff_tmp47);
                  carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(86), sequence_e2_b3_adv));
                  r2000_2fff_tmp48 = simd_and(sequence_e2_b3_adv, byte_range_af_b1);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r2000_2fff_tmp48);
                  r2000_2fff_tmp49 = simd_and(tmp4, r2000_2fff_tmp21);
                  byte_b5 = simd_and(r2000_2fff_tmp30, r2000_2fff_tmp49);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  cc_range_2d6f_2d7f_3 = simd_and(r2000_2fff_tmp33, r2000_2fff_tmp45);
                  carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(87), sequence_e2_b5_adv));
                  r2000_2fff_tmp50 = simd_and(sequence_e2_b5_adv, cc_range_2d6f_2d7f_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r2000_2fff_tmp50);
                  byte_b7 = simd_and(r2000_2fff_tmp30, tmp6);
                  sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
                  byte_range_a0_bf = r2000_2fff_tmp45;
                  carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(88), sequence_e2_b7_adv));
                  r2000_2fff_tmp51 = simd_and(sequence_e2_b7_adv, byte_range_a0_bf);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r2000_2fff_tmp51);
                  r2000_2fff_tmp52 = simd_andc(tmp14, tmp25);
                  byte_b8 = simd_and(r2000_2fff_tmp30, r2000_2fff_tmp52);
                  sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
                  byte_af = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp33);
                  carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(89), sequence_e2_b8_adv));
                  r2000_2fff_tmp53 = simd_and(sequence_e2_b8_adv, byte_af);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r2000_2fff_tmp53);
                }
                else {
                  carryQ.CarryDequeueEnqueue(80, 10);
                }
                r2000_4dff_tmp2 = simd_andc(tmp5, tmp24);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                r2000_4dff_tmp3 = simd_or(byte_e3, r800_ffff_tmp6);
                if ((bitblock::any(r2000_4dff_tmp3) || carryQ.CarryTest(90, 4))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp2, r3000_4dff_tmp1);
                  byte_80 = simd_andc(r3000_4dff_tmp2, tmp26);
                  carryQ.cq[90] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(90), r3000_4dff_tmp3));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp3, byte_80);
                  byte_e3_adv = r3000_4dff_tmp3;
                  r3000_4dff_tmp4 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp5 = simd_and(tmp4, r3000_4dff_tmp4);
                  r3000_4dff_tmp6 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp5);
                  r3000_4dff_tmp7 = simd_and(r800_ffff_tmp2, tmp2);
                  r3000_4dff_tmp8 = simd_and(r3000_4dff_tmp7, basis_bits.bit_4);
                  r3000_4dff_tmp9 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp10 = simd_and(r3000_4dff_tmp8, r3000_4dff_tmp9);
                  r3000_4dff_tmp11 = simd_or(r3000_4dff_tmp6, r3000_4dff_tmp10);
                  r3000_4dff_tmp12 = simd_and(r800_ffff_tmp2, tmp12);
                  r3000_4dff_tmp13 = simd_andc(r3000_4dff_tmp12, basis_bits.bit_4);
                  r3000_4dff_tmp14 = simd_not(basis_bits.bit_6);
                  r3000_4dff_tmp15 = simd_or(simd_and(basis_bits.bit_5, r3000_4dff_tmp14), simd_andc(tmp25, basis_bits.bit_5));
                  r3000_4dff_tmp16 = simd_and(r3000_4dff_tmp13, r3000_4dff_tmp15);
                  r3000_4dff_tmp17 = simd_or(r3000_4dff_tmp11, r3000_4dff_tmp16);
                  r3000_4dff_tmp18 = simd_and(tmp14, tmp5);
                  r3000_4dff_tmp19 = simd_and(r3000_4dff_tmp12, r3000_4dff_tmp18);
                  cc_range_3005_303b_3 = simd_or(r3000_4dff_tmp17, r3000_4dff_tmp19);
                  carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(91), sequence_e3_80_adv));
                  r3000_4dff_tmp20 = simd_and(sequence_e3_80_adv, cc_range_3005_303b_3);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r3000_4dff_tmp20);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp1);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp21 = simd_and(r800_ffff_tmp2, tmp19);
                  r3000_4dff_tmp22 = simd_and(r3000_4dff_tmp21, basis_bits.bit_4);
                  r3000_4dff_tmp23 = simd_not(tmp5);
                  r3000_4dff_tmp24 = simd_or(simd_and(basis_bits.bit_5, r3000_4dff_tmp23), simd_andc(tmp25, basis_bits.bit_5));
                  byte_range_99_9e = simd_and(r3000_4dff_tmp22, r3000_4dff_tmp24);
                  carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(92), sequence_e3_82_adv));
                  r3000_4dff_tmp25 = simd_and(sequence_e3_82_adv, byte_range_99_9e);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r3000_4dff_tmp25);
                  byte_83 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
                  r3000_4dff_tmp26 = simd_and(r3000_4dff_tmp12, tmp7);
                  byte_range_bc_be = simd_andc(r3000_4dff_tmp26, tmp5);
                  carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(93), sequence_e3_83_adv));
                  r3000_4dff_tmp27 = simd_and(sequence_e3_83_adv, byte_range_bc_be);
                  struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r3000_4dff_tmp27);
                }
                else {
                  carryQ.CarryDequeueEnqueue(90, 4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(80, 14);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(19, 75);
            }
            r800_ffff_tmp8 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp9 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp8, r800_ffff_tmp9);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(94, 34))) {
              byte_ea = simd_and(byte_range_e0_ef, tmp15);
              ra000_ffff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp2 = simd_andc(r800_ffff_tmp2, ra000_ffff_tmp1);
              byte_80 = simd_andc(ra000_ffff_tmp2, tmp26);
              carryQ.cq[94] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(94), ra000_ffff_tmp3));
              sequence_ea_80 = simd_and(ra000_ffff_tmp3, byte_80);
              byte_ea_adv = ra000_ffff_tmp3;
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp2, tmp19);
              ra000_ffff_tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp6 = simd_and(tmp4, ra000_ffff_tmp5);
              byte_95 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp6);
              carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_ea_80, carryQ.get_carry_in(95), sequence_ea_80_adv));
              ra000_ffff_tmp7 = simd_and(sequence_ea_80_adv, byte_95);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp7);
              ra000_ffff_tmp8 = simd_andc(tmp5, tmp24);
              byte_93 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp8);
              sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
              ra000_ffff_tmp9 = simd_and(r800_ffff_tmp2, tmp12);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp9, basis_bits.bit_4);
              ra000_ffff_tmp11 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              byte_range_b8_bd = simd_andc(ra000_ffff_tmp10, ra000_ffff_tmp11);
              carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(96), sequence_ea_93_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ea_93_adv, byte_range_b8_bd);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp12);
              ra000_ffff_tmp13 = simd_andc(tmp14, tmp25);
              byte_98 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp13);
              sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
              ra000_ffff_tmp14 = simd_andc(tmp7, tmp25);
              byte_8c = simd_and(ra000_ffff_tmp2, ra000_ffff_tmp14);
              carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(97), sequence_ea_98_adv));
              ra000_ffff_tmp15 = simd_and(sequence_ea_98_adv, byte_8c);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp15);
              ra000_ffff_tmp16 = simd_and(tmp14, ra000_ffff_tmp5);
              byte_99 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp16);
              sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
              ra000_ffff_tmp17 = simd_and(r800_ffff_tmp2, basis_bits.bit_2);
              ra000_ffff_tmp18 = simd_or(tmp24, tmp5);
              ra000_ffff_tmp19 = simd_not(ra000_ffff_tmp18);
              ra000_ffff_tmp20 = simd_and(tmp7, tmp5);
              ra000_ffff_tmp21 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp19), simd_andc(ra000_ffff_tmp20, basis_bits.bit_3));
              ra000_ffff_tmp22 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp21);
              ra000_ffff_tmp23 = simd_not(ra000_ffff_tmp11);
              ra000_ffff_tmp24 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp23), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
              ra000_ffff_tmp25 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp24);
              ra000_ffff_tmp26 = simd_or(ra000_ffff_tmp22, ra000_ffff_tmp25);
              ra000_ffff_tmp27 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp20);
              cc_range_a66f_a67f_3 = simd_or(ra000_ffff_tmp26, ra000_ffff_tmp27);
              carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(98), sequence_ea_99_adv));
              ra000_ffff_tmp28 = simd_and(sequence_ea_99_adv, cc_range_a66f_a67f_3);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp28);
              byte_9a = simd_and(ra000_ffff_tmp4, tmp15);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp29 = simd_andc(basis_bits.bit_6, tmp5);
              ra000_ffff_tmp30 = simd_andc(tmp7, ra000_ffff_tmp29);
              cc_range_a69c_a69f_3 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp30);
              carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(99), sequence_ea_9a_adv));
              ra000_ffff_tmp31 = simd_and(sequence_ea_9a_adv, cc_range_a69c_a69f_3);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp31);
              ra000_ffff_tmp32 = simd_and(tmp14, tmp5);
              byte_9b = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp32);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              ra000_ffff_tmp33 = simd_or(tmp24, basis_bits.bit_6);
              byte_range_b0_b1 = simd_andc(ra000_ffff_tmp9, ra000_ffff_tmp33);
              carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(100), sequence_ea_9b_adv));
              ra000_ffff_tmp34 = simd_and(sequence_ea_9b_adv, byte_range_b0_b1);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp34);
              byte_9c = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp14);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              ra000_ffff_tmp35 = simd_or(basis_bits.bit_3, ra000_ffff_tmp33);
              ra000_ffff_tmp36 = simd_and(basis_bits.bit_2, ra000_ffff_tmp35);
              byte_range_80_a1 = simd_andc(r800_ffff_tmp2, ra000_ffff_tmp36);
              carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(101), sequence_ea_9c_adv));
              ra000_ffff_tmp37 = simd_and(sequence_ea_9c_adv, byte_range_80_a1);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp37);
              ra000_ffff_tmp38 = simd_and(tmp7, ra000_ffff_tmp5);
              byte_9d = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp38);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              byte_b0 = simd_andc(ra000_ffff_tmp9, tmp26);
              carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(102), sequence_ea_9d_adv));
              ra000_ffff_tmp39 = simd_and(sequence_ea_9d_adv, byte_b0);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp39);
              byte_9e = simd_and(ra000_ffff_tmp4, tmp9);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp40 = simd_and(ra000_ffff_tmp2, tmp14);
              byte_range_88_8a = simd_andc(ra000_ffff_tmp40, tmp5);
              carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(103), sequence_ea_9e_adv));
              ra000_ffff_tmp41 = simd_and(sequence_ea_9e_adv, byte_range_88_8a);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp41);
              byte_9f = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp20);
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              ra000_ffff_tmp42 = simd_andc(tmp14, basis_bits.bit_6);
              byte_range_b8_b9 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp42);
              carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(104), sequence_ea_9f_adv));
              ra000_ffff_tmp43 = simd_and(sequence_ea_9f_adv, byte_range_b8_b9);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp43);
              ra000_ffff_tmp44 = simd_and(r800_ffff_tmp2, tmp2);
              byte_a0 = simd_andc(ra000_ffff_tmp44, tmp26);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              ra000_ffff_tmp45 = simd_andc(tmp24, tmp4);
              ra000_ffff_tmp46 = simd_andc(tmp8, ra000_ffff_tmp45);
              ra000_ffff_tmp47 = simd_or(ra000_ffff_tmp46, ra000_ffff_tmp32);
              ra000_ffff_tmp48 = simd_and(ra000_ffff_tmp2, ra000_ffff_tmp47);
              ra000_ffff_tmp49 = simd_and(ra000_ffff_tmp44, tmp4);
              ra000_ffff_tmp50 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp51 = simd_and(ra000_ffff_tmp49, ra000_ffff_tmp50);
              cc_range_a802_a825_3 = simd_or(ra000_ffff_tmp48, ra000_ffff_tmp51);
              carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(105), sequence_ea_a0_adv));
              ra000_ffff_tmp52 = simd_and(sequence_ea_a0_adv, cc_range_a802_a825_3);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp52);
              byte_a3 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp8);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              ra000_ffff_tmp53 = simd_and(ra000_ffff_tmp2, r800_ffff_tmp1);
              ra000_ffff_tmp54 = simd_and(basis_bits.bit_3, ra000_ffff_tmp33);
              ra000_ffff_tmp55 = simd_andc(ra000_ffff_tmp17, ra000_ffff_tmp54);
              cc_range_a8c4_a8e0_3 = simd_or(ra000_ffff_tmp53, ra000_ffff_tmp55);
              carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(106), sequence_ea_a3_adv));
              ra000_ffff_tmp56 = simd_and(sequence_ea_a3_adv, cc_range_a8c4_a8e0_3);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp56);
              byte_a4 = simd_and(ra000_ffff_tmp44, r800_ffff_tmp1);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              ra000_ffff_tmp57 = simd_xor(basis_bits.bit_4, ra000_ffff_tmp11);
              byte_range_a6_ad = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp57);
              carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(107), sequence_ea_a4_adv));
              ra000_ffff_tmp58 = simd_and(sequence_ea_a4_adv, byte_range_a6_ad);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp58);
              byte_a5 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp6);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              ra000_ffff_tmp59 = simd_andc(r800_ffff_tmp2, basis_bits.bit_2);
              ra000_ffff_tmp60 = simd_not(ra000_ffff_tmp33);
              ra000_ffff_tmp61 = simd_and(basis_bits.bit_5, tmp5);
              ra000_ffff_tmp62 = simd_or(basis_bits.bit_4, ra000_ffff_tmp61);
              ra000_ffff_tmp63 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp60), simd_andc(ra000_ffff_tmp62, basis_bits.bit_3));
              byte_range_87_91 = simd_and(ra000_ffff_tmp59, ra000_ffff_tmp63);
              carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(108), sequence_ea_a5_adv));
              ra000_ffff_tmp64 = simd_and(sequence_ea_a5_adv, byte_range_87_91);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp64);
              ra000_ffff_tmp65 = simd_and(tmp4, tmp8);
              byte_a6 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp65);
              sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
              ra000_ffff_tmp66 = simd_andc(ra000_ffff_tmp2, tmp24);
              ra000_ffff_tmp67 = simd_andc(ra000_ffff_tmp66, tmp5);
              ra000_ffff_tmp68 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp8);
              ra000_ffff_tmp69 = simd_or(ra000_ffff_tmp67, ra000_ffff_tmp68);
              ra000_ffff_tmp70 = simd_not(r800_ffff_tmp9);
              ra000_ffff_tmp71 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp70), simd_andc(ra000_ffff_tmp11, basis_bits.bit_4));
              ra000_ffff_tmp72 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp71);
              ra000_ffff_tmp73 = simd_or(ra000_ffff_tmp69, ra000_ffff_tmp72);
              ra000_ffff_tmp74 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp14);
              cc_range_a980_a9bc_3 = simd_or(ra000_ffff_tmp73, ra000_ffff_tmp74);
              carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(109), sequence_ea_a6_adv));
              ra000_ffff_tmp75 = simd_and(sequence_ea_a6_adv, cc_range_a980_a9bc_3);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp75);
              byte_a7 = simd_and(ra000_ffff_tmp44, tmp6);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              ra000_ffff_tmp76 = simd_and(ra000_ffff_tmp2, ra000_ffff_tmp20);
              cc_range_a9cf_a9e5_3 = simd_or(ra000_ffff_tmp76, ra000_ffff_tmp51);
              carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(110), sequence_ea_a7_adv));
              ra000_ffff_tmp77 = simd_and(sequence_ea_a7_adv, cc_range_a9cf_a9e5_3);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp77);
              byte_a8 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp13);
              sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
              ra000_ffff_tmp78 = simd_and(ra000_ffff_tmp44, basis_bits.bit_4);
              ra000_ffff_tmp79 = simd_not(tmp5);
              ra000_ffff_tmp80 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp79), simd_andc(tmp25, basis_bits.bit_5));
              ra000_ffff_tmp81 = simd_and(ra000_ffff_tmp78, ra000_ffff_tmp80);
              ra000_ffff_tmp82 = simd_andc(ra000_ffff_tmp9, tmp24);
              ra000_ffff_tmp83 = simd_and(ra000_ffff_tmp82, ra000_ffff_tmp50);
              ra000_ffff_tmp84 = simd_or(ra000_ffff_tmp81, ra000_ffff_tmp83);
              ra000_ffff_tmp85 = simd_and(ra000_ffff_tmp9, tmp4);
              ra000_ffff_tmp86 = simd_and(ra000_ffff_tmp85, ra000_ffff_tmp50);
              cc_range_aa29_aa35_3 = simd_or(ra000_ffff_tmp84, ra000_ffff_tmp86);
              carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(111), sequence_ea_a8_adv));
              ra000_ffff_tmp87 = simd_and(sequence_ea_a8_adv, cc_range_aa29_aa35_3);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp87);
              byte_a9 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp16);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              ra000_ffff_tmp88 = simd_or(ra000_ffff_tmp8, ra000_ffff_tmp14);
              ra000_ffff_tmp89 = simd_and(ra000_ffff_tmp2, ra000_ffff_tmp88);
              ra000_ffff_tmp90 = simd_or(ra000_ffff_tmp89, byte_b0);
              cc_range_aa43_aa7c_3 = simd_or(ra000_ffff_tmp90, ra000_ffff_tmp74);
              carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(112), sequence_ea_a9_adv));
              ra000_ffff_tmp91 = simd_and(sequence_ea_a9_adv, cc_range_aa43_aa7c_3);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp91);
              byte_aa = simd_and(ra000_ffff_tmp44, tmp15);
              sequence_ea_aa = simd_and(byte_ea_adv, byte_aa);
              ra000_ffff_tmp92 = simd_andc(ra000_ffff_tmp9, basis_bits.bit_4);
              ra000_ffff_tmp93 = simd_not(tmp25);
              ra000_ffff_tmp94 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp93), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
              ra000_ffff_tmp95 = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp94);
              ra000_ffff_tmp96 = simd_or(byte_b0, ra000_ffff_tmp95);
              ra000_ffff_tmp97 = simd_or(basis_bits.bit_5, tmp25);
              ra000_ffff_tmp98 = simd_not(ra000_ffff_tmp97);
              ra000_ffff_tmp99 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp98), simd_andc(ra000_ffff_tmp61, basis_bits.bit_4));
              ra000_ffff_tmp100 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp99);
              ra000_ffff_tmp101 = simd_or(ra000_ffff_tmp96, ra000_ffff_tmp100);
              ra000_ffff_tmp102 = simd_and(tmp7, basis_bits.bit_6);
              ra000_ffff_tmp103 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp102);
              cc_range_aab0_aabe_3 = simd_or(ra000_ffff_tmp101, ra000_ffff_tmp103);
              carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_ea_aa, carryQ.get_carry_in(113), sequence_ea_aa_adv));
              ra000_ffff_tmp104 = simd_and(sequence_ea_aa_adv, cc_range_aab0_aabe_3);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp104);
              byte_ab = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp32);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              ra000_ffff_tmp105 = simd_andc(ra000_ffff_tmp5, tmp24);
              ra000_ffff_tmp106 = simd_and(ra000_ffff_tmp2, ra000_ffff_tmp105);
              ra000_ffff_tmp107 = simd_or(ra000_ffff_tmp106, byte_9d);
              ra000_ffff_tmp108 = simd_andc(tmp7, basis_bits.bit_6);
              ra000_ffff_tmp109 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp108);
              ra000_ffff_tmp110 = simd_or(ra000_ffff_tmp107, ra000_ffff_tmp109);
              ra000_ffff_tmp111 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp93), simd_andc(tmp5, basis_bits.bit_5));
              ra000_ffff_tmp112 = simd_and(ra000_ffff_tmp92, ra000_ffff_tmp111);
              ra000_ffff_tmp113 = simd_or(ra000_ffff_tmp110, ra000_ffff_tmp112);
              ra000_ffff_tmp114 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp65);
              cc_range_aac1_aaf6_3 = simd_or(ra000_ffff_tmp113, ra000_ffff_tmp114);
              carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(114), sequence_ea_ab_adv));
              ra000_ffff_tmp115 = simd_and(sequence_ea_ab_adv, cc_range_aac1_aaf6_3);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp115);
              byte_ad = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp38);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              ra000_ffff_tmp116 = simd_and(ra000_ffff_tmp4, basis_bits.bit_4);
              ra000_ffff_tmp117 = simd_or(basis_bits.bit_5, tmp5);
              byte_range_9b_9f = simd_and(ra000_ffff_tmp116, ra000_ffff_tmp117);
              carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(115), sequence_ea_ad_adv));
              ra000_ffff_tmp118 = simd_and(sequence_ea_ad_adv, byte_range_9b_9f);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp118);
              byte_af = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp20);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              ra000_ffff_tmp119 = simd_or(ra000_ffff_tmp6, ra000_ffff_tmp13);
              ra000_ffff_tmp120 = simd_or(ra000_ffff_tmp119, ra000_ffff_tmp38);
              cc_range_abe5_abed_3 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp120);
              carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(116), sequence_ea_af_adv));
              ra000_ffff_tmp121 = simd_and(sequence_ea_af_adv, cc_range_abe5_abed_3);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp121);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp20);
              byte_ac = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp14);
              carryQ.cq[117] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(117), ra000_ffff_tmp122));
              sequence_ef_ac = simd_and(ra000_ffff_tmp122, byte_ac);
              byte_ef_adv = ra000_ffff_tmp122;
              carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(118), sequence_ef_ac_adv));
              ra000_ffff_tmp123 = simd_and(sequence_ef_ac_adv, byte_9e);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp123);
              byte_ae = simd_and(ra000_ffff_tmp44, tmp9);
              sequence_ef_ae = simd_and(byte_ef_adv, byte_ae);
              ra000_ffff_tmp124 = simd_or(basis_bits.bit_4, r800_ffff_tmp9);
              byte_range_b2_bf = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp124);
              carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_ef_ae, carryQ.get_carry_in(119), sequence_ef_ae_adv));
              ra000_ffff_tmp125 = simd_and(sequence_ef_ae_adv, byte_range_b2_bf);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp125);
              sequence_ef_af = simd_and(byte_ef_adv, byte_af);
              byte_range_80_81 = simd_andc(ra000_ffff_tmp2, ra000_ffff_tmp33);
              carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(120), sequence_ef_af_adv));
              ra000_ffff_tmp126 = simd_and(sequence_ef_af_adv, byte_range_80_81);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp126);
              byte_b8 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp13);
              sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
              ra000_ffff_tmp127 = simd_or(ra000_ffff_tmp2, byte_93);
              ra000_ffff_tmp128 = simd_and(basis_bits.bit_4, ra000_ffff_tmp11);
              ra000_ffff_tmp129 = simd_andc(ra000_ffff_tmp44, ra000_ffff_tmp128);
              cc_range_fe00_fe20_3 = simd_or(ra000_ffff_tmp127, ra000_ffff_tmp129);
              carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(121), sequence_ef_b8_adv));
              ra000_ffff_tmp130 = simd_and(sequence_ef_b8_adv, cc_range_fe00_fe20_3);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp130);
              byte_b9 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp16);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              ra000_ffff_tmp131 = simd_andc(tmp8, tmp24);
              ra000_ffff_tmp132 = simd_or(ra000_ffff_tmp131, ra000_ffff_tmp6);
              cc_range_fe52_fe55_3 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp132);
              carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(122), sequence_ef_b9_adv));
              ra000_ffff_tmp133 = simd_and(sequence_ef_b9_adv, cc_range_fe52_fe55_3);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp133);
              byte_bb = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp32);
              sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
              byte_bf = ra000_ffff_tmp27;
              carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(123), sequence_ef_bb_adv));
              ra000_ffff_tmp134 = simd_and(sequence_ef_bb_adv, byte_bf);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp134);
              byte_bc = ra000_ffff_tmp74;
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp135 = simd_and(ra000_ffff_tmp2, tmp10);
              ra000_ffff_tmp136 = simd_or(ra000_ffff_tmp135, byte_9a);
              ra000_ffff_tmp137 = simd_and(ra000_ffff_tmp9, tmp9);
              cc_range_ff07_ff3e_3 = simd_or(ra000_ffff_tmp136, ra000_ffff_tmp137);
              carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(124), sequence_ef_bc_adv));
              ra000_ffff_tmp138 = simd_and(sequence_ef_bc_adv, cc_range_ff07_ff3e_3);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp138);
              byte_bd = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp38);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              ra000_ffff_tmp139 = simd_andc(ra000_ffff_tmp1, tmp12);
              ra000_ffff_tmp140 = simd_andc(r800_ffff_tmp2, ra000_ffff_tmp139);
              cc_range_ff40_ff70_3 = simd_andc(ra000_ffff_tmp140, tmp26);
              carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(125), sequence_ef_bd_adv));
              ra000_ffff_tmp141 = simd_and(sequence_ef_bd_adv, cc_range_ff40_ff70_3);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp141);
              byte_be = ra000_ffff_tmp137;
              sequence_ef_be = simd_and(byte_ef_adv, byte_be);
              byte_range_9e_9f = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp102);
              carryQ.cq[126] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(126), sequence_ef_be_adv));
              ra000_ffff_tmp142 = simd_and(sequence_ef_be_adv, byte_range_9e_9f);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp142);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              ra000_ffff_tmp143 = simd_and(ra000_ffff_tmp9, tmp14);
              ra000_ffff_tmp144 = simd_and(ra000_ffff_tmp143, tmp25);
              cc_range_ffe3_fff9_3 = simd_or(byte_a3, ra000_ffff_tmp144);
              carryQ.cq[127] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(127), sequence_ef_bf_adv));
              ra000_ffff_tmp145 = simd_and(sequence_ef_bf_adv, cc_range_ffe3_fff9_3);
              struct_ci_Y.cc = simd_or(struct_ci_Y.cc, ra000_ffff_tmp145);
            }
            else {
              carryQ.CarryDequeueEnqueue(94, 34);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(18, 110);
          }
          byte_range_f0_ff = simd_and(byte_range_c0_ff, tmp12);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(128, 44))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp26);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_and(r10000_10ffff_tmp1, tmp19);
            byte_90 = simd_andc(r10000_10ffff_tmp2, tmp26);
            carryQ.cq[128] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(128), r10000_10ffff_tmp3));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp3, byte_90);
            byte_f0_adv = r10000_10ffff_tmp3;
            r10000_10ffff_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp5 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp4);
            byte_87 = simd_and(r10000_10ffff_tmp5, tmp6);
            carryQ.cq[129] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(129), r10000_10ffff_tmp6));
            sequence_f0_90_87 = simd_and(r10000_10ffff_tmp6, byte_87);
            sequence_f0_90_adv = r10000_10ffff_tmp6;
            r10000_10ffff_tmp7 = simd_and(r10000_10ffff_tmp1, tmp12);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp9 = simd_and(tmp7, r10000_10ffff_tmp8);
            byte_bd = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp9);
            carryQ.cq[130] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(130), sequence_f0_90_87_adv));
            r10000_10ffff_tmp10 = simd_and(sequence_f0_90_87_adv, byte_bd);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp10);
            r10000_10ffff_tmp11 = simd_and(tmp14, tmp5);
            byte_8b = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp11);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp1, tmp2);
            byte_a0 = simd_andc(r10000_10ffff_tmp12, tmp26);
            carryQ.cq[131] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(131), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp13 = simd_and(sequence_f0_90_8b_adv, byte_a0);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp13);
            byte_8d = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp9);
            sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
            r10000_10ffff_tmp14 = simd_or(basis_bits.bit_5, tmp5);
            r10000_10ffff_tmp15 = simd_not(r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp17 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp15), simd_andc(r10000_10ffff_tmp16, basis_bits.bit_4));
            byte_range_b6_ba = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp17);
            carryQ.cq[132] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(132), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_90_8d_adv, byte_range_b6_ba);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_andc(tmp14, tmp25);
            byte_a8 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp19);
            sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
            r10000_10ffff_tmp20 = simd_andc(r10000_10ffff_tmp5, tmp24);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp20, tmp25);
            r10000_10ffff_tmp22 = simd_and(r10000_10ffff_tmp5, tmp4);
            r10000_10ffff_tmp23 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp24 = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_or(r10000_10ffff_tmp21, r10000_10ffff_tmp24);
            r10000_10ffff_tmp26 = simd_and(r10000_10ffff_tmp5, tmp7);
            r10000_10ffff_tmp27 = simd_or(r10000_10ffff_tmp25, r10000_10ffff_tmp26);
            r10000_10ffff_tmp28 = simd_and(r10000_10ffff_tmp7, tmp14);
            r10000_10ffff_tmp29 = simd_andc(r10000_10ffff_tmp28, tmp5);
            r10000_10ffff_tmp30 = simd_or(r10000_10ffff_tmp27, r10000_10ffff_tmp29);
            r10000_10ffff_tmp31 = simd_and(tmp7, tmp5);
            r10000_10ffff_tmp32 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp31);
            cc_range_10a01_10a3f_4 = simd_or(r10000_10ffff_tmp30, r10000_10ffff_tmp32);
            carryQ.cq[133] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(133), sequence_f0_90_a8_adv));
            r10000_10ffff_tmp33 = simd_and(sequence_f0_90_a8_adv, cc_range_10a01_10a3f_4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp33);
            byte_ab = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp11);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            r10000_10ffff_tmp34 = simd_and(r10000_10ffff_tmp12, tmp4);
            byte_range_a5_a6 = simd_and(r10000_10ffff_tmp34, r10000_10ffff_tmp23);
            carryQ.cq[134] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(134), sequence_f0_90_ab_adv));
            r10000_10ffff_tmp35 = simd_and(sequence_f0_90_ab_adv, byte_range_a5_a6);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp35);
            r10000_10ffff_tmp36 = simd_andc(r10000_10ffff_tmp8, tmp24);
            byte_91 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp36);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            byte_80 = simd_andc(r10000_10ffff_tmp5, tmp26);
            carryQ.cq[135] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(135), r10000_10ffff_tmp37));
            sequence_f0_91_80 = simd_and(r10000_10ffff_tmp37, byte_80);
            sequence_f0_91_adv = r10000_10ffff_tmp37;
            r10000_10ffff_tmp38 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp36);
            r10000_10ffff_tmp39 = simd_and(r10000_10ffff_tmp7, basis_bits.bit_4);
            cc_range_11001_11038_4 = simd_or(r10000_10ffff_tmp38, r10000_10ffff_tmp39);
            carryQ.cq[136] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(136), sequence_f0_91_80_adv));
            r10000_10ffff_tmp40 = simd_and(sequence_f0_91_80_adv, cc_range_11001_11038_4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp40);
            byte_81 = r10000_10ffff_tmp38;
            sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
            r10000_10ffff_tmp41 = simd_andc(r10000_10ffff_tmp5, basis_bits.bit_4);
            r10000_10ffff_tmp42 = simd_and(basis_bits.bit_5, tmp5);
            r10000_10ffff_tmp43 = simd_andc(r10000_10ffff_tmp41, r10000_10ffff_tmp42);
            cc_range_11040_1107f_4 = simd_or(r10000_10ffff_tmp43, r10000_10ffff_tmp32);
            carryQ.cq[137] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(137), sequence_f0_91_81_adv));
            r10000_10ffff_tmp44 = simd_and(sequence_f0_91_81_adv, cc_range_11040_1107f_4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp44);
            r10000_10ffff_tmp45 = simd_andc(tmp8, tmp24);
            byte_82 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp45);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            r10000_10ffff_tmp46 = simd_or(tmp24, basis_bits.bit_6);
            r10000_10ffff_tmp47 = simd_andc(r10000_10ffff_tmp5, r10000_10ffff_tmp46);
            r10000_10ffff_tmp48 = simd_andc(r10000_10ffff_tmp7, basis_bits.bit_4);
            r10000_10ffff_tmp49 = simd_xor(basis_bits.bit_5, tmp5);
            r10000_10ffff_tmp50 = simd_and(r10000_10ffff_tmp48, r10000_10ffff_tmp49);
            r10000_10ffff_tmp51 = simd_or(r10000_10ffff_tmp47, r10000_10ffff_tmp50);
            r10000_10ffff_tmp52 = simd_and(r10000_10ffff_tmp28, r10000_10ffff_tmp23);
            r10000_10ffff_tmp53 = simd_or(r10000_10ffff_tmp51, r10000_10ffff_tmp52);
            cc_range_11080_110bd_4 = simd_or(r10000_10ffff_tmp53, byte_bd);
            carryQ.cq[138] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(138), sequence_f0_91_82_adv));
            r10000_10ffff_tmp54 = simd_and(sequence_f0_91_82_adv, cc_range_11080_110bd_4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp54);
            r10000_10ffff_tmp55 = simd_andc(tmp4, tmp25);
            byte_84 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp55);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            r10000_10ffff_tmp56 = simd_andc(r10000_10ffff_tmp20, tmp5);
            r10000_10ffff_tmp57 = simd_not(basis_bits.bit_5);
            r10000_10ffff_tmp58 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp57), simd_andc(r10000_10ffff_tmp42, basis_bits.bit_4));
            r10000_10ffff_tmp59 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp58);
            r10000_10ffff_tmp60 = simd_or(r10000_10ffff_tmp56, r10000_10ffff_tmp59);
            r10000_10ffff_tmp61 = simd_and(r10000_10ffff_tmp1, basis_bits.bit_2);
            r10000_10ffff_tmp62 = simd_and(basis_bits.bit_5, tmp25);
            r10000_10ffff_tmp63 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp62);
            r10000_10ffff_tmp64 = simd_not(r10000_10ffff_tmp63);
            r10000_10ffff_tmp65 = simd_and(tmp7, tmp25);
            r10000_10ffff_tmp66 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp64), simd_andc(r10000_10ffff_tmp65, basis_bits.bit_3));
            r10000_10ffff_tmp67 = simd_and(r10000_10ffff_tmp61, r10000_10ffff_tmp66);
            cc_range_11100_1112d_4 = simd_or(r10000_10ffff_tmp60, r10000_10ffff_tmp67);
            carryQ.cq[139] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(139), sequence_f0_91_84_adv));
            r10000_10ffff_tmp68 = simd_and(sequence_f0_91_84_adv, cc_range_11100_1112d_4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp68);
            r10000_10ffff_tmp69 = simd_and(tmp4, r10000_10ffff_tmp8);
            byte_85 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp69);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            r10000_10ffff_tmp70 = simd_andc(tmp5, tmp24);
            byte_b3 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp70);
            carryQ.cq[140] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(140), sequence_f0_91_85_adv));
            r10000_10ffff_tmp71 = simd_and(sequence_f0_91_85_adv, byte_b3);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp71);
            r10000_10ffff_tmp72 = simd_and(tmp4, tmp8);
            byte_86 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp72);
            sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
            r10000_10ffff_tmp73 = simd_not(r10000_10ffff_tmp42);
            r10000_10ffff_tmp74 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp73), simd_andc(r10000_10ffff_tmp16, basis_bits.bit_4));
            r10000_10ffff_tmp75 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp74);
            cc_range_11180_111b6_4 = simd_or(r10000_10ffff_tmp47, r10000_10ffff_tmp75);
            carryQ.cq[141] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(141), sequence_f0_91_86_adv));
            r10000_10ffff_tmp76 = simd_and(sequence_f0_91_86_adv, cc_range_11180_111b6_4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp76);
            byte_88 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp19);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            r10000_10ffff_tmp77 = simd_not(r10000_10ffff_tmp46);
            r10000_10ffff_tmp78 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp77), simd_andc(r10000_10ffff_tmp31, basis_bits.bit_3));
            r10000_10ffff_tmp79 = simd_and(r10000_10ffff_tmp61, r10000_10ffff_tmp78);
            r10000_10ffff_tmp80 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp55);
            r10000_10ffff_tmp81 = simd_or(r10000_10ffff_tmp79, r10000_10ffff_tmp80);
            r10000_10ffff_tmp82 = simd_and(tmp4, basis_bits.bit_6);
            r10000_10ffff_tmp83 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp82);
            cc_range_1122f_11236_4 = simd_or(r10000_10ffff_tmp81, r10000_10ffff_tmp83);
            carryQ.cq[142] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(142), sequence_f0_91_88_adv));
            r10000_10ffff_tmp84 = simd_and(sequence_f0_91_88_adv, cc_range_1122f_11236_4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp84);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            r10000_10ffff_tmp85 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp31);
            r10000_10ffff_tmp86 = simd_xor(basis_bits.bit_4, r10000_10ffff_tmp14);
            r10000_10ffff_tmp87 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp86);
            cc_range_112df_112e3_4 = simd_or(r10000_10ffff_tmp85, r10000_10ffff_tmp87);
            carryQ.cq[143] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(143), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp88 = simd_and(sequence_f0_91_8b_adv, cc_range_112df_112e3_4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp88);
            r10000_10ffff_tmp89 = simd_andc(tmp7, tmp25);
            byte_8c = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp89);
            sequence_f0_91_8c = simd_and(sequence_f0_91_adv, byte_8c);
            r10000_10ffff_tmp90 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp89);
            cc_range_11301_1133c_4 = simd_or(byte_81, r10000_10ffff_tmp90);
            carryQ.cq[144] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(144), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp91 = simd_and(sequence_f0_91_8c_adv, cc_range_11301_1133c_4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp91);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            r10000_10ffff_tmp92 = simd_not(r10000_10ffff_tmp62);
            r10000_10ffff_tmp93 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp92), simd_andc(r10000_10ffff_tmp16, basis_bits.bit_4));
            r10000_10ffff_tmp94 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp93);
            r10000_10ffff_tmp95 = simd_or(byte_80, r10000_10ffff_tmp94);
            r10000_10ffff_tmp96 = simd_andc(r10000_10ffff_tmp48, r10000_10ffff_tmp62);
            cc_range_11340_11370_4 = simd_or(r10000_10ffff_tmp95, r10000_10ffff_tmp96);
            carryQ.cq[145] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(145), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp97 = simd_and(sequence_f0_91_8d_adv, cc_range_11340_11370_4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp97);
            byte_92 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp45);
            sequence_f0_91_92 = simd_and(sequence_f0_91_adv, byte_92);
            r10000_10ffff_tmp98 = simd_or(basis_bits.bit_5, tmp25);
            r10000_10ffff_tmp99 = simd_not(r10000_10ffff_tmp98);
            r10000_10ffff_tmp100 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp99), simd_andc(r10000_10ffff_tmp14, basis_bits.bit_4));
            r10000_10ffff_tmp101 = simd_or(r10000_10ffff_tmp100, tmp15);
            r10000_10ffff_tmp102 = simd_or(r10000_10ffff_tmp101, r10000_10ffff_tmp31);
            cc_range_114b3_114bf_4 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp102);
            carryQ.cq[146] = carryout2carry(pablo_blk_Advance(sequence_f0_91_92, carryQ.get_carry_in(146), sequence_f0_91_92_adv));
            r10000_10ffff_tmp103 = simd_and(sequence_f0_91_92_adv, cc_range_114b3_114bf_4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp103);
            byte_93 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp70);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            r10000_10ffff_tmp104 = simd_andc(basis_bits.bit_6, tmp24);
            r10000_10ffff_tmp105 = simd_andc(tmp26, r10000_10ffff_tmp104);
            cc_range_114c0_114c2_4 = simd_andc(r10000_10ffff_tmp5, r10000_10ffff_tmp105);
            carryQ.cq[147] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(147), sequence_f0_91_93_adv));
            r10000_10ffff_tmp106 = simd_and(sequence_f0_91_93_adv, cc_range_114c0_114c2_4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp106);
            byte_96 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp72);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            r10000_10ffff_tmp107 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp108 = simd_and(r10000_10ffff_tmp48, r10000_10ffff_tmp107);
            r10000_10ffff_tmp109 = simd_andc(tmp7, basis_bits.bit_6);
            r10000_10ffff_tmp110 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp109);
            r10000_10ffff_tmp111 = simd_or(r10000_10ffff_tmp108, r10000_10ffff_tmp110);
            cc_range_115b2_115bf_4 = simd_or(r10000_10ffff_tmp111, r10000_10ffff_tmp32);
            carryQ.cq[148] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(148), sequence_f0_91_96_adv));
            r10000_10ffff_tmp112 = simd_and(sequence_f0_91_96_adv, cc_range_115b2_115bf_4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp112);
            byte_97 = simd_and(r10000_10ffff_tmp2, tmp6);
            sequence_f0_91_97 = simd_and(sequence_f0_91_adv, byte_97);
            carryQ.cq[149] = carryout2carry(pablo_blk_Advance(sequence_f0_91_97, carryQ.get_carry_in(149), sequence_f0_91_97_adv));
            r10000_10ffff_tmp113 = simd_and(sequence_f0_91_97_adv, byte_80);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp113);
            byte_98 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp19);
            sequence_f0_91_98 = simd_and(sequence_f0_91_adv, byte_98);
            r10000_10ffff_tmp114 = simd_or(r10000_10ffff_tmp86, r10000_10ffff_tmp9);
            r10000_10ffff_tmp115 = simd_or(r10000_10ffff_tmp114, r10000_10ffff_tmp31);
            cc_range_11633_1163f_4 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp115);
            carryQ.cq[150] = carryout2carry(pablo_blk_Advance(sequence_f0_91_98, carryQ.get_carry_in(150), sequence_f0_91_98_adv));
            r10000_10ffff_tmp116 = simd_and(sequence_f0_91_98_adv, cc_range_11633_1163f_4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp116);
            r10000_10ffff_tmp117 = simd_and(tmp14, r10000_10ffff_tmp8);
            byte_99 = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp117);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            carryQ.cq[151] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(151), sequence_f0_91_99_adv));
            r10000_10ffff_tmp118 = simd_and(sequence_f0_91_99_adv, byte_80);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp118);
            byte_9a = simd_and(r10000_10ffff_tmp2, tmp15);
            sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
            r10000_10ffff_tmp119 = simd_or(r10000_10ffff_tmp11, r10000_10ffff_tmp9);
            r10000_10ffff_tmp120 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp119);
            r10000_10ffff_tmp121 = simd_andc(r10000_10ffff_tmp48, r10000_10ffff_tmp16);
            r10000_10ffff_tmp122 = simd_or(r10000_10ffff_tmp120, r10000_10ffff_tmp121);
            r10000_10ffff_tmp123 = simd_and(r10000_10ffff_tmp7, tmp6);
            cc_range_116ab_116b7_4 = simd_or(r10000_10ffff_tmp122, r10000_10ffff_tmp123);
            carryQ.cq[152] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(152), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp124 = simd_and(sequence_f0_91_9a_adv, cc_range_116ab_116b7_4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp124);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            carryQ.cq[153] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(153), r10000_10ffff_tmp125));
            sequence_f0_96_ab = simd_and(r10000_10ffff_tmp125, byte_ab);
            sequence_f0_96_adv = r10000_10ffff_tmp125;
            byte_range_b0_b4 = r10000_10ffff_tmp96;
            carryQ.cq[154] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(154), sequence_f0_96_ab_adv));
            r10000_10ffff_tmp126 = simd_and(sequence_f0_96_ab_adv, byte_range_b0_b4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp126);
            byte_ac = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp89);
            sequence_f0_96_ac = simd_and(sequence_f0_96_adv, byte_ac);
            byte_range_b0_b6 = simd_andc(r10000_10ffff_tmp48, r10000_10ffff_tmp42);
            carryQ.cq[155] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(155), sequence_f0_96_ac_adv));
            r10000_10ffff_tmp127 = simd_and(sequence_f0_96_ac_adv, byte_range_b0_b6);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp127);
            byte_ad = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp9);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            byte_range_80_83 = r10000_10ffff_tmp20;
            carryQ.cq[156] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(156), sequence_f0_96_ad_adv));
            r10000_10ffff_tmp128 = simd_and(sequence_f0_96_ad_adv, byte_range_80_83);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp128);
            byte_be = simd_and(r10000_10ffff_tmp7, tmp9);
            sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
            r10000_10ffff_tmp129 = simd_andc(r10000_10ffff_tmp1, basis_bits.bit_2);
            r10000_10ffff_tmp130 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp31);
            byte_range_8f_9f = simd_and(r10000_10ffff_tmp129, r10000_10ffff_tmp130);
            carryQ.cq[157] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(157), sequence_f0_96_be_adv));
            r10000_10ffff_tmp131 = simd_and(sequence_f0_96_be_adv, byte_range_8f_9f);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp131);
            byte_9b = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp11);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            byte_b2 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp45);
            carryQ.cq[158] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(158), r10000_10ffff_tmp132));
            sequence_f0_9b_b2 = simd_and(r10000_10ffff_tmp132, byte_b2);
            sequence_f0_9b_adv = r10000_10ffff_tmp132;
            r10000_10ffff_tmp133 = simd_and(r10000_10ffff_tmp2, tmp7);
            r10000_10ffff_tmp134 = simd_and(r10000_10ffff_tmp133, r10000_10ffff_tmp23);
            r10000_10ffff_tmp135 = simd_andc(r10000_10ffff_tmp12, tmp24);
            cc_range_1bc9d_1bca0_4 = simd_or(r10000_10ffff_tmp134, r10000_10ffff_tmp135);
            carryQ.cq[159] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(159), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp136 = simd_and(sequence_f0_9b_b2_adv, cc_range_1bc9d_1bca0_4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp136);
            byte_9d = simd_and(r10000_10ffff_tmp2, r10000_10ffff_tmp9);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[160] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(160), r10000_10ffff_tmp137));
            sequence_f0_9d_85 = simd_and(r10000_10ffff_tmp137, byte_85);
            sequence_f0_9d_adv = r10000_10ffff_tmp137;
            r10000_10ffff_tmp138 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp139 = simd_not(r10000_10ffff_tmp138);
            r10000_10ffff_tmp140 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp139), simd_andc(r10000_10ffff_tmp42, basis_bits.bit_4));
            r10000_10ffff_tmp141 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp140);
            r10000_10ffff_tmp142 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp14);
            r10000_10ffff_tmp143 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp142);
            cc_range_1d167_1d173_4 = simd_or(r10000_10ffff_tmp141, r10000_10ffff_tmp143);
            carryQ.cq[161] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(161), sequence_f0_9d_85_adv));
            r10000_10ffff_tmp144 = simd_and(sequence_f0_9d_85_adv, cc_range_1d167_1d173_4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp144);
            sequence_f0_9d_86 = simd_and(sequence_f0_9d_adv, byte_86);
            r10000_10ffff_tmp145 = simd_andc(byte_range_80_83, tmp5);
            r10000_10ffff_tmp146 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp57), simd_andc(r10000_10ffff_tmp62, basis_bits.bit_4));
            r10000_10ffff_tmp147 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp146);
            r10000_10ffff_tmp148 = simd_or(r10000_10ffff_tmp145, r10000_10ffff_tmp147);
            r10000_10ffff_tmp149 = simd_and(r10000_10ffff_tmp12, basis_bits.bit_4);
            r10000_10ffff_tmp150 = simd_and(r10000_10ffff_tmp149, r10000_10ffff_tmp107);
            cc_range_1d180_1d1aa_4 = simd_or(r10000_10ffff_tmp148, r10000_10ffff_tmp150);
            carryQ.cq[162] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_86, carryQ.get_carry_in(162), sequence_f0_9d_86_adv));
            r10000_10ffff_tmp151 = simd_and(sequence_f0_9d_86_adv, cc_range_1d180_1d1aa_4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp151);
            byte_89 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp117);
            sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
            r10000_10ffff_tmp152 = simd_not(tmp25);
            r10000_10ffff_tmp153 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp152), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
            byte_range_82_84 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp153);
            carryQ.cq[163] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_89, carryQ.get_carry_in(163), sequence_f0_9d_89_adv));
            r10000_10ffff_tmp154 = simd_and(sequence_f0_9d_89_adv, byte_range_82_84);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp154);
            byte_9e = simd_and(r10000_10ffff_tmp2, tmp9);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            byte_a3 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp70);
            carryQ.cq[164] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(164), r10000_10ffff_tmp155));
            sequence_f0_9e_a3 = simd_and(r10000_10ffff_tmp155, byte_a3);
            sequence_f0_9e_adv = r10000_10ffff_tmp155;
            r10000_10ffff_tmp156 = simd_andc(r10000_10ffff_tmp2, basis_bits.bit_4);
            byte_range_90_96 = simd_andc(r10000_10ffff_tmp156, r10000_10ffff_tmp42);
            carryQ.cq[165] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(165), sequence_f0_9e_a3_adv));
            r10000_10ffff_tmp157 = simd_and(sequence_f0_9e_a3_adv, byte_range_90_96);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp157);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp70);
            carryQ.cq[166] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(166), r10000_10ffff_tmp158));
            sequence_f3_a0 = simd_and(r10000_10ffff_tmp158, byte_a0);
            byte_f3_adv = r10000_10ffff_tmp158;
            carryQ.cq[167] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(167), r10000_10ffff_tmp159));
            sequence_f3_a0_80 = simd_and(r10000_10ffff_tmp159, byte_80);
            sequence_f3_a0_adv = r10000_10ffff_tmp159;
            cc_range_e0001_e0020_4 = simd_or(byte_81, r10000_10ffff_tmp61);
            carryQ.cq[168] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_80, carryQ.get_carry_in(168), sequence_f3_a0_80_adv));
            r10000_10ffff_tmp160 = simd_and(sequence_f3_a0_80_adv, cc_range_e0001_e0020_4);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp160);
            sequence_f3_a0_81 = simd_and(sequence_f3_a0_adv, byte_81);
            byte_range_80_bf = r10000_10ffff_tmp1;
            carryQ.cq[169] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_81, carryQ.get_carry_in(169), sequence_f3_a0_81_adv));
            r10000_10ffff_tmp161 = simd_and(sequence_f3_a0_81_adv, byte_range_80_bf);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, r10000_10ffff_tmp161);
            r10000_10ffff_tmp162 = simd_and(byte_range_80_bf, tmp2);
            r10000_10ffff_tmp163 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp4);
            r10000_10ffff_tmp164 = simd_and(r10000_10ffff_tmp163, tmp4);
            byte_range_84_86 = simd_andc(r10000_10ffff_tmp164, tmp5);
            sequence_f3_a0_byte_range_84_86 = simd_and(sequence_f3_a0_adv, byte_range_84_86);
            carryQ.cq[170] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_84_86, carryQ.get_carry_in(170), r10000_10ffff_tmp165));
            sequence_f3_a0_byte_range_84_86_sfx = simd_and(r10000_10ffff_tmp165, byte_range_80_bf);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, sequence_f3_a0_byte_range_84_86_sfx);
            sequence_f3_a0_87 = simd_and(sequence_f3_a0_adv, byte_87);
            byte_range_80_af = simd_andc(byte_range_80_bf, tmp12);
            carryQ.cq[171] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_87, carryQ.get_carry_in(171), r10000_10ffff_tmp166));
            sequence_f3_a0_87_byte_range_80_af = simd_and(r10000_10ffff_tmp166, byte_range_80_af);
            struct_ci_Y.cc = simd_or(struct_ci_Y.cc, sequence_f3_a0_87_byte_range_80_af);
          }
          else {
            carryQ.CarryDequeueEnqueue(128, 44);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 172);
        }
        carryQ.CarryQ_Adjust(172);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<172, 0> carryQ;
  };

  struct Property_cwl_Y {
  Property_cwl_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_cwl_Y & struct_cwl_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10;
		BitBlock byte_range_41_5a, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, byte_c3, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13, cc_range_c0_d8_2;
		BitBlock byte_c3_adv, r80_7ff_tmp14, byte_range_c4_cf, r100_3ff_tmp1;
		BitBlock byte_range_c4_cb, r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3;
		BitBlock byte_range_c4_c8, r100_2ff_tmp4, r100_2ff_tmp5, r100_2ff_tmp6;
		BitBlock byte_c9, byte_range_80_8f, r100_2ff_tmp7, r100_2ff_tmp8;
		BitBlock r100_2ff_tmp9, r100_24f_tmp1, r100_24f_tmp2, byte_range_c4_c5;
		BitBlock r100_17f_tmp1, byte_c4, r100_17f_tmp2, r100_17f_tmp3, r100_17f_tmp4;
		BitBlock r100_17f_tmp5, r100_17f_tmp6, r100_17f_tmp7, r100_17f_tmp8;
		BitBlock r100_17f_tmp9, r100_17f_tmp10, r100_17f_tmp11, r100_17f_tmp12;
		BitBlock r100_17f_tmp13, r100_17f_tmp14, r100_17f_tmp15, r100_17f_tmp16;
		BitBlock r100_17f_tmp17, r100_17f_tmp18, r100_17f_tmp19, r100_17f_tmp20;
		BitBlock r100_17f_tmp21, r100_17f_tmp22, r100_17f_tmp23, r100_17f_tmp24;
		BitBlock r100_17f_tmp25, r100_17f_tmp26, r100_17f_tmp27, r100_17f_tmp28;
		BitBlock r100_17f_tmp29, r100_17f_tmp30, r100_17f_tmp31, r100_17f_tmp32;
		BitBlock r100_17f_tmp33, r100_17f_tmp34, r100_17f_tmp35, r100_17f_tmp36;
		BitBlock r100_17f_tmp37, r100_17f_tmp38, r100_17f_tmp39, r100_17f_tmp40;
		BitBlock r100_17f_tmp41, r100_17f_tmp42, r100_17f_tmp43, r100_17f_tmp44;
		BitBlock r100_17f_tmp45, r100_17f_tmp46, r100_17f_tmp47, r100_17f_tmp48;
		BitBlock r100_17f_tmp49, r100_17f_tmp50, r100_17f_tmp51, r100_17f_tmp52;
		BitBlock r100_17f_tmp53, r100_17f_tmp54, r100_17f_tmp55, r100_17f_tmp56;
		BitBlock r100_17f_tmp57, r100_17f_tmp58, r100_17f_tmp59, r100_17f_tmp60;
		BitBlock r100_17f_tmp61, r100_17f_tmp62, r100_17f_tmp63, r100_17f_tmp64;
		BitBlock r100_17f_tmp65, r100_17f_tmp66, r100_17f_tmp67, r100_17f_tmp68;
		BitBlock r100_17f_tmp69, r100_17f_tmp70, r100_17f_tmp71, cc_range_100_13f_2;
		BitBlock byte_c4_adv, r100_17f_tmp72, r100_17f_tmp73, byte_c5, r100_17f_tmp74;
		BitBlock r100_17f_tmp75, r100_17f_tmp76, r100_17f_tmp77, r100_17f_tmp78;
		BitBlock r100_17f_tmp79, r100_17f_tmp80, r100_17f_tmp81, r100_17f_tmp82;
		BitBlock r100_17f_tmp83, r100_17f_tmp84, r100_17f_tmp85, r100_17f_tmp86;
		BitBlock r100_17f_tmp87, r100_17f_tmp88, r100_17f_tmp89, r100_17f_tmp90;
		BitBlock r100_17f_tmp91, r100_17f_tmp92, r100_17f_tmp93, r100_17f_tmp94;
		BitBlock r100_17f_tmp95, r100_17f_tmp96, r100_17f_tmp97, r100_17f_tmp98;
		BitBlock r100_17f_tmp99, r100_17f_tmp100, r100_17f_tmp101, r100_17f_tmp102;
		BitBlock r100_17f_tmp103, r100_17f_tmp104, r100_17f_tmp105, cc_range_141_17d_2;
		BitBlock byte_c5_adv, r100_17f_tmp106, r100_24f_tmp3, r100_24f_tmp4;
		BitBlock byte_range_c6_c8, r100_24f_tmp5, r180_24f_tmp1, r180_24f_tmp2;
		BitBlock byte_c6, r180_24f_tmp3, r180_24f_tmp4, r180_24f_tmp5, r180_24f_tmp6;
		BitBlock r180_24f_tmp7, r180_24f_tmp8, r180_24f_tmp9, r180_24f_tmp10;
		BitBlock r180_24f_tmp11, r180_24f_tmp12, r180_24f_tmp13, r180_24f_tmp14;
		BitBlock r180_24f_tmp15, r180_24f_tmp16, r180_24f_tmp17, r180_24f_tmp18;
		BitBlock r180_24f_tmp19, r180_24f_tmp20, r180_24f_tmp21, r180_24f_tmp22;
		BitBlock r180_24f_tmp23, r180_24f_tmp24, r180_24f_tmp25, r180_24f_tmp26;
		BitBlock r180_24f_tmp27, r180_24f_tmp28, r180_24f_tmp29, r180_24f_tmp30;
		BitBlock r180_24f_tmp31, r180_24f_tmp32, r180_24f_tmp33, r180_24f_tmp34;
		BitBlock r180_24f_tmp35, r180_24f_tmp36, r180_24f_tmp37, r180_24f_tmp38;
		BitBlock r180_24f_tmp39, r180_24f_tmp40, r180_24f_tmp41, r180_24f_tmp42;
		BitBlock r180_24f_tmp43, r180_24f_tmp44, r180_24f_tmp45, r180_24f_tmp46;
		BitBlock r180_24f_tmp47, r180_24f_tmp48, r180_24f_tmp49, r180_24f_tmp50;
		BitBlock r180_24f_tmp51, r180_24f_tmp52, r180_24f_tmp53, r180_24f_tmp54;
		BitBlock r180_24f_tmp55, r180_24f_tmp56, r180_24f_tmp57, r180_24f_tmp58;
		BitBlock r180_24f_tmp59, r180_24f_tmp60, r180_24f_tmp61, r180_24f_tmp62;
		BitBlock r180_24f_tmp63, r180_24f_tmp64, r180_24f_tmp65, r180_24f_tmp66;
		BitBlock cc_range_181_1bc_2, byte_c6_adv, r180_24f_tmp67, r180_24f_tmp68;
		BitBlock byte_c7, r180_24f_tmp69, r180_24f_tmp70, r180_24f_tmp71;
		BitBlock r180_24f_tmp72, r180_24f_tmp73, r180_24f_tmp74, r180_24f_tmp75;
		BitBlock r180_24f_tmp76, r180_24f_tmp77, r180_24f_tmp78, r180_24f_tmp79;
		BitBlock r180_24f_tmp80, r180_24f_tmp81, r180_24f_tmp82, r180_24f_tmp83;
		BitBlock r180_24f_tmp84, r180_24f_tmp85, r180_24f_tmp86, r180_24f_tmp87;
		BitBlock r180_24f_tmp88, r180_24f_tmp89, r180_24f_tmp90, r180_24f_tmp91;
		BitBlock r180_24f_tmp92, r180_24f_tmp93, r180_24f_tmp94, r180_24f_tmp95;
		BitBlock r180_24f_tmp96, r180_24f_tmp97, r180_24f_tmp98, r180_24f_tmp99;
		BitBlock r180_24f_tmp100, r180_24f_tmp101, r180_24f_tmp102, r180_24f_tmp103;
		BitBlock r180_24f_tmp104, r180_24f_tmp105, r180_24f_tmp106, r180_24f_tmp107;
		BitBlock r180_24f_tmp108, r180_24f_tmp109, r180_24f_tmp110, r180_24f_tmp111;
		BitBlock r180_24f_tmp112, r180_24f_tmp113, r180_24f_tmp114, r180_24f_tmp115;
		BitBlock r180_24f_tmp116, r180_24f_tmp117, cc_range_1c4_1fe_2, byte_c7_adv;
		BitBlock r180_24f_tmp118, byte_c8, r180_24f_tmp119, r180_24f_tmp120;
		BitBlock r180_24f_tmp121, r180_24f_tmp122, r180_24f_tmp123, r180_24f_tmp124;
		BitBlock r180_24f_tmp125, r180_24f_tmp126, r180_24f_tmp127, r180_24f_tmp128;
		BitBlock r180_24f_tmp129, r180_24f_tmp130, r180_24f_tmp131, r180_24f_tmp132;
		BitBlock r180_24f_tmp133, r180_24f_tmp134, r180_24f_tmp135, r180_24f_tmp136;
		BitBlock r180_24f_tmp137, r180_24f_tmp138, r180_24f_tmp139, r180_24f_tmp140;
		BitBlock r180_24f_tmp141, r180_24f_tmp142, r180_24f_tmp143, r180_24f_tmp144;
		BitBlock r180_24f_tmp145, r180_24f_tmp146, r180_24f_tmp147, r180_24f_tmp148;
		BitBlock r180_24f_tmp149, r180_24f_tmp150, r180_24f_tmp151, r180_24f_tmp152;
		BitBlock r180_24f_tmp153, r180_24f_tmp154, r180_24f_tmp155, r180_24f_tmp156;
		BitBlock r180_24f_tmp157, cc_range_200_23d_2, byte_c8_adv, r180_24f_tmp158;
		BitBlock r180_24f_tmp159, r180_24f_tmp160, r180_24f_tmp161, r180_24f_tmp162;
		BitBlock r180_24f_tmp163, r180_24f_tmp164, r180_24f_tmp165, r180_24f_tmp166;
		BitBlock r180_24f_tmp167, r180_24f_tmp168, r180_24f_tmp169, r180_24f_tmp170;
		BitBlock cc_range_241_24e_2, byte_c9_adv, r180_24f_tmp171, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, r100_3ff_tmp4, byte_cd, r100_3ff_tmp5;
		BitBlock byte_range_b0_bf, r100_3ff_tmp6, r100_3ff_tmp7, r100_3ff_tmp8;
		BitBlock byte_range_ce_cf, r100_3ff_tmp9, r370_3ff_tmp1, r370_3ff_tmp2;
		BitBlock r370_3ff_tmp3, r370_3ff_tmp4, r370_3ff_tmp5, r370_3ff_tmp6;
		BitBlock r370_3ff_tmp7, r370_3ff_tmp8, cc_range_370_37f_2, byte_cd_adv;
		BitBlock r370_3ff_tmp9, r370_3ff_tmp10, byte_ce, r370_3ff_tmp11;
		BitBlock r370_3ff_tmp12, r370_3ff_tmp13, r370_3ff_tmp14, r370_3ff_tmp15;
		BitBlock r370_3ff_tmp16, r370_3ff_tmp17, r370_3ff_tmp18, r370_3ff_tmp19;
		BitBlock r370_3ff_tmp20, r370_3ff_tmp21, r370_3ff_tmp22, r370_3ff_tmp23;
		BitBlock r370_3ff_tmp24, r370_3ff_tmp25, r370_3ff_tmp26, r370_3ff_tmp27;
		BitBlock r370_3ff_tmp28, r370_3ff_tmp29, r370_3ff_tmp30, r370_3ff_tmp31;
		BitBlock r370_3ff_tmp32, r370_3ff_tmp33, cc_range_386_3a3_2, byte_ce_adv;
		BitBlock r370_3ff_tmp34, byte_cf, r370_3ff_tmp35, r370_3ff_tmp36;
		BitBlock r370_3ff_tmp37, r370_3ff_tmp38, r370_3ff_tmp39, r370_3ff_tmp40;
		BitBlock r370_3ff_tmp41, r370_3ff_tmp42, r370_3ff_tmp43, r370_3ff_tmp44;
		BitBlock r370_3ff_tmp45, r370_3ff_tmp46, r370_3ff_tmp47, r370_3ff_tmp48;
		BitBlock r370_3ff_tmp49, r370_3ff_tmp50, r370_3ff_tmp51, r370_3ff_tmp52;
		BitBlock r370_3ff_tmp53, r370_3ff_tmp54, r370_3ff_tmp55, r370_3ff_tmp56;
		BitBlock r370_3ff_tmp57, r370_3ff_tmp58, r370_3ff_tmp59, r370_3ff_tmp60;
		BitBlock r370_3ff_tmp61, r370_3ff_tmp62, r370_3ff_tmp63, r370_3ff_tmp64;
		BitBlock r370_3ff_tmp65, r370_3ff_tmp66, r370_3ff_tmp67, r370_3ff_tmp68;
		BitBlock r370_3ff_tmp69, r370_3ff_tmp70, r370_3ff_tmp71, r370_3ff_tmp72;
		BitBlock r370_3ff_tmp73, cc_range_3cf_3fd_2, byte_cf_adv, r370_3ff_tmp74;
		BitBlock r80_7ff_tmp15, byte_range_d0_d7, byte_range_d0_d3, byte_d0;
		BitBlock r400_4ff_tmp1, byte_range_80_af, byte_d0_adv, r400_4ff_tmp2;
		BitBlock r400_4ff_tmp3, r400_4ff_tmp4, byte_d1, r400_4ff_tmp5;
		BitBlock cc_range_460_47e_2, byte_d1_adv, r400_4ff_tmp6, r400_4ff_tmp7;
		BitBlock r400_4ff_tmp8, byte_d2, r400_4ff_tmp9, r400_4ff_tmp10, r400_4ff_tmp11;
		BitBlock r400_4ff_tmp12, r400_4ff_tmp13, r400_4ff_tmp14, r400_4ff_tmp15;
		BitBlock r400_4ff_tmp16, r400_4ff_tmp17, r400_4ff_tmp18, r400_4ff_tmp19;
		BitBlock r400_4ff_tmp20, r400_4ff_tmp21, r400_4ff_tmp22, r400_4ff_tmp23;
		BitBlock r400_4ff_tmp24, r400_4ff_tmp25, r400_4ff_tmp26, r400_4ff_tmp27;
		BitBlock r400_4ff_tmp28, r400_4ff_tmp29, r400_4ff_tmp30, r400_4ff_tmp31;
		BitBlock r400_4ff_tmp32, r400_4ff_tmp33, r400_4ff_tmp34, r400_4ff_tmp35;
		BitBlock r400_4ff_tmp36, r400_4ff_tmp37, r400_4ff_tmp38, r400_4ff_tmp39;
		BitBlock r400_4ff_tmp40, r400_4ff_tmp41, r400_4ff_tmp42, r400_4ff_tmp43;
		BitBlock r400_4ff_tmp44, r400_4ff_tmp45, r400_4ff_tmp46, r400_4ff_tmp47;
		BitBlock r400_4ff_tmp48, r400_4ff_tmp49, r400_4ff_tmp50, r400_4ff_tmp51;
		BitBlock r400_4ff_tmp52, r400_4ff_tmp53, r400_4ff_tmp54, r400_4ff_tmp55;
		BitBlock r400_4ff_tmp56, r400_4ff_tmp57, r400_4ff_tmp58, r400_4ff_tmp59;
		BitBlock r400_4ff_tmp60, r400_4ff_tmp61, r400_4ff_tmp62, r400_4ff_tmp63;
		BitBlock r400_4ff_tmp64, r400_4ff_tmp65, r400_4ff_tmp66, r400_4ff_tmp67;
		BitBlock r400_4ff_tmp68, r400_4ff_tmp69, r400_4ff_tmp70, r400_4ff_tmp71;
		BitBlock r400_4ff_tmp72, cc_range_480_4be_2, byte_d2_adv, r400_4ff_tmp73;
		BitBlock byte_d3, r400_4ff_tmp74, r400_4ff_tmp75, r400_4ff_tmp76;
		BitBlock r400_4ff_tmp77, r400_4ff_tmp78, r400_4ff_tmp79, r400_4ff_tmp80;
		BitBlock r400_4ff_tmp81, r400_4ff_tmp82, r400_4ff_tmp83, r400_4ff_tmp84;
		BitBlock r400_4ff_tmp85, r400_4ff_tmp86, r400_4ff_tmp87, r400_4ff_tmp88;
		BitBlock r400_4ff_tmp89, r400_4ff_tmp90, r400_4ff_tmp91, r400_4ff_tmp92;
		BitBlock r400_4ff_tmp93, r400_4ff_tmp94, r400_4ff_tmp95, r400_4ff_tmp96;
		BitBlock r400_4ff_tmp97, r400_4ff_tmp98, r400_4ff_tmp99, r400_4ff_tmp100;
		BitBlock r400_4ff_tmp101, r400_4ff_tmp102, r400_4ff_tmp103, r400_4ff_tmp104;
		BitBlock r400_4ff_tmp105, r400_4ff_tmp106, r400_4ff_tmp107, r400_4ff_tmp108;
		BitBlock r400_4ff_tmp109, cc_range_4c0_4fe_2, byte_d3_adv, r400_4ff_tmp110;
		BitBlock r400_5ff_tmp1, r400_5ff_tmp2, byte_range_d4_d5, r400_5ff_tmp3;
		BitBlock r400_5ff_tmp4, byte_d6, r400_5ff_tmp5, r400_5ff_tmp6, r400_5ff_tmp7;
		BitBlock r500_58f_tmp1, byte_d4, r500_58f_tmp2, r500_58f_tmp3, r500_58f_tmp4;
		BitBlock cc_range_500_52e_2, byte_d4_adv, r500_52f_tmp1, r500_58f_tmp5;
		BitBlock r500_58f_tmp6, r500_58f_tmp7, byte_d5, r500_58f_tmp8, r500_58f_tmp9;
		BitBlock r530_58f_tmp1, r530_58f_tmp2, byte_range_b1_bf, r530_58f_tmp3;
		BitBlock byte_range_80_96, byte_d5_adv, r530_58f_tmp4, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, byte_range_e0_e3, r800_ffff_tmp1, r800_ffff_tmp2;
		BitBlock byte_e4, r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock byte_range_80_b7, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_82, r1000_1fff_tmp5, sequence_e1_82;
		BitBlock byte_e1_adv, byte_range_a0_bf, sequence_e1_82_adv, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, byte_83, sequence_e1_83, r1000_1fff_tmp8;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, r1000_1fff_tmp14, r1000_1fff_tmp15;
		BitBlock r1000_1fff_tmp16, cc_range_10c0_10cd_3, sequence_e1_83_adv;
		BitBlock r1000_1fff_tmp17, r1000_1fff_tmp18, r1000_1fff_tmp19;
		BitBlock r1000_1fff_tmp20, r1000_1fff_tmp21, byte_b8, sequence_e1_b8;
		BitBlock cc_range_1e00_1e3e_3, sequence_e1_b8_adv, r1000_1fff_tmp22;
		BitBlock r1000_1fff_tmp23, byte_b9, sequence_e1_b9, cc_range_1e40_1e7e_3;
		BitBlock sequence_e1_b9_adv, r1000_1fff_tmp24, r1000_1fff_tmp25, byte_ba;
		BitBlock sequence_e1_ba, r1000_1fff_tmp26, r1000_1fff_tmp27, r1000_1fff_tmp28;
		BitBlock r1000_1fff_tmp29, r1000_1fff_tmp30, r1000_1fff_tmp31;
		BitBlock r1000_1fff_tmp32, r1000_1fff_tmp33, r1000_1fff_tmp34;
		BitBlock r1000_1fff_tmp35, r1000_1fff_tmp36, r1000_1fff_tmp37;
		BitBlock r1000_1fff_tmp38, r1000_1fff_tmp39, r1000_1fff_tmp40;
		BitBlock r1000_1fff_tmp41, r1000_1fff_tmp42, r1000_1fff_tmp43;
		BitBlock r1000_1fff_tmp44, r1000_1fff_tmp45, r1000_1fff_tmp46;
		BitBlock r1000_1fff_tmp47, r1000_1fff_tmp48, r1000_1fff_tmp49;
		BitBlock r1000_1fff_tmp50, r1000_1fff_tmp51, r1000_1fff_tmp52;
		BitBlock r1000_1fff_tmp53, r1000_1fff_tmp54, r1000_1fff_tmp55;
		BitBlock r1000_1fff_tmp56, r1000_1fff_tmp57, r1000_1fff_tmp58;
		BitBlock r1000_1fff_tmp59, r1000_1fff_tmp60, r1000_1fff_tmp61;
		BitBlock r1000_1fff_tmp62, r1000_1fff_tmp63, r1000_1fff_tmp64;
		BitBlock r1000_1fff_tmp65, r1000_1fff_tmp66, r1000_1fff_tmp67;
		BitBlock r1000_1fff_tmp68, r1000_1fff_tmp69, r1000_1fff_tmp70;
		BitBlock r1000_1fff_tmp71, r1000_1fff_tmp72, r1000_1fff_tmp73;
		BitBlock r1000_1fff_tmp74, r1000_1fff_tmp75, r1000_1fff_tmp76;
		BitBlock cc_range_1e80_1ebe_3, sequence_e1_ba_adv, r1000_1fff_tmp77;
		BitBlock r1000_1fff_tmp78, byte_bb, sequence_e1_bb, cc_range_1ec0_1efe_3;
		BitBlock sequence_e1_bb_adv, r1000_1fff_tmp79, byte_bc, sequence_e1_bc;
		BitBlock r1000_1fff_tmp80, r1000_1fff_tmp81, r1000_1fff_tmp82;
		BitBlock r1000_1fff_tmp83, r1000_1fff_tmp84, r1000_1fff_tmp85;
		BitBlock r1000_1fff_tmp86, cc_range_1f08_1f38_3, sequence_e1_bc_adv;
		BitBlock r1000_1fff_tmp87, byte_bd, sequence_e1_bd, r1000_1fff_tmp88;
		BitBlock r1000_1fff_tmp89, r1000_1fff_tmp90, r1000_1fff_tmp91;
		BitBlock r1000_1fff_tmp92, r1000_1fff_tmp93, r1000_1fff_tmp94;
		BitBlock r1000_1fff_tmp95, r1000_1fff_tmp96, r1000_1fff_tmp97;
		BitBlock cc_range_1f48_1f68_3, sequence_e1_bd_adv, r1000_1fff_tmp98, byte_be;
		BitBlock sequence_e1_be, r1000_1fff_tmp99, r1000_1fff_tmp100;
		BitBlock r1000_1fff_tmp101, r1000_1fff_tmp102, r1000_1fff_tmp103;
		BitBlock r1000_1fff_tmp104, cc_range_1f88_1fb8_3, sequence_e1_be_adv;
		BitBlock r1000_1fff_tmp105, byte_bf, sequence_e1_bf, r1000_1fff_tmp106;
		BitBlock r1000_1fff_tmp107, r1000_1fff_tmp108, r1000_1fff_tmp109;
		BitBlock r1000_1fff_tmp110, cc_range_1fc8_1ff8_3, sequence_e1_bf_adv;
		BitBlock r1000_1fff_tmp111, r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3;
		BitBlock r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1;
		BitBlock r2000_2fff_tmp2, byte_84, r2000_2fff_tmp3, sequence_e2_84;
		BitBlock byte_e2_adv, r2000_2fff_tmp4, r2000_2fff_tmp5, r2000_2fff_tmp6;
		BitBlock r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9, r2000_2fff_tmp10;
		BitBlock r2000_2fff_tmp11, r2000_2fff_tmp12, cc_range_2126_2132_3;
		BitBlock sequence_e2_84_adv, r2000_2fff_tmp13, r2000_2fff_tmp14;
		BitBlock r2000_2fff_tmp15, byte_85, sequence_e2_85, byte_range_a0_af;
		BitBlock sequence_e2_85_adv, r2000_2fff_tmp16, byte_86, sequence_e2_86;
		BitBlock r2000_2fff_tmp17, sequence_e2_86_adv, r2000_2fff_tmp18;
		BitBlock r2000_2fff_tmp19, r2000_2fff_tmp20, byte_92, sequence_e2_92;
		BitBlock r2000_2fff_tmp21, r2000_2fff_tmp22, byte_range_b6_bf;
		BitBlock sequence_e2_92_adv, r2000_2fff_tmp23, byte_93, sequence_e2_93;
		BitBlock sequence_e2_93_adv, r2000_2fff_tmp24, byte_b0, sequence_e2_b0;
		BitBlock r2000_2fff_tmp25, r2000_2fff_tmp26, r2000_2fff_tmp27;
		BitBlock r2000_2fff_tmp28, byte_range_80_ae, sequence_e2_b0_adv;
		BitBlock r2000_2fff_tmp29, r2000_2fff_tmp30, byte_b1, sequence_e2_b1;
		BitBlock r2000_2fff_tmp31, r2000_2fff_tmp32, r2000_2fff_tmp33;
		BitBlock r2000_2fff_tmp34, r2000_2fff_tmp35, r2000_2fff_tmp36;
		BitBlock r2000_2fff_tmp37, r2000_2fff_tmp38, r2000_2fff_tmp39;
		BitBlock r2000_2fff_tmp40, r2000_2fff_tmp41, r2000_2fff_tmp42;
		BitBlock r2000_2fff_tmp43, r2000_2fff_tmp44, r2000_2fff_tmp45;
		BitBlock r2000_2fff_tmp46, r2000_2fff_tmp47, r2000_2fff_tmp48;
		BitBlock r2000_2fff_tmp49, r2000_2fff_tmp50, r2000_2fff_tmp51;
		BitBlock r2000_2fff_tmp52, r2000_2fff_tmp53, r2000_2fff_tmp54;
		BitBlock r2000_2fff_tmp55, r2000_2fff_tmp56, cc_range_2c60_2c7e_3;
		BitBlock sequence_e2_b1_adv, r2000_2fff_tmp57, byte_b2, sequence_e2_b2;
		BitBlock cc_range_2c80_2cbe_3, sequence_e2_b2_adv, r2000_2fff_tmp58, byte_b3;
		BitBlock sequence_e2_b3, r2000_2fff_tmp59, r2000_2fff_tmp60, r2000_2fff_tmp61;
		BitBlock r2000_2fff_tmp62, r2000_2fff_tmp63, r2000_2fff_tmp64;
		BitBlock r2000_2fff_tmp65, r2000_2fff_tmp66, r2000_2fff_tmp67;
		BitBlock r2000_2fff_tmp68, r2000_2fff_tmp69, r2000_2fff_tmp70;
		BitBlock r2000_2fff_tmp71, r2000_2fff_tmp72, r2000_2fff_tmp73;
		BitBlock r2000_2fff_tmp74, r2000_2fff_tmp75, r2000_2fff_tmp76;
		BitBlock r2000_2fff_tmp77, r2000_2fff_tmp78, r2000_2fff_tmp79;
		BitBlock r2000_2fff_tmp80, r2000_2fff_tmp81, r2000_2fff_tmp82;
		BitBlock r2000_2fff_tmp83, r2000_2fff_tmp84, r2000_2fff_tmp85;
		BitBlock r2000_2fff_tmp86, r2000_2fff_tmp87, r2000_2fff_tmp88;
		BitBlock r2000_2fff_tmp89, r2000_2fff_tmp90, r2000_2fff_tmp91;
		BitBlock r2000_2fff_tmp92, cc_range_2cc0_2cf2_3, sequence_e2_b3_adv;
		BitBlock r2000_2fff_tmp93, r800_ffff_tmp9, r800_ffff_tmp10, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea;
		BitBlock ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7;
		BitBlock byte_99, ra000_ffff_tmp8, sequence_ea_99, byte_ea_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, cc_range_a640_a66c_3, sequence_ea_99_adv;
		BitBlock ra000_ffff_tmp14, byte_9a, sequence_ea_9a, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, ra000_ffff_tmp17, cc_range_a680_a69a_3;
		BitBlock sequence_ea_9a_adv, ra000_ffff_tmp18, ra000_ffff_tmp19, byte_9c;
		BitBlock sequence_ea_9c, ra000_ffff_tmp20, ra000_ffff_tmp21, ra000_ffff_tmp22;
		BitBlock ra000_ffff_tmp23, ra000_ffff_tmp24, ra000_ffff_tmp25;
		BitBlock ra000_ffff_tmp26, ra000_ffff_tmp27, ra000_ffff_tmp28;
		BitBlock ra000_ffff_tmp29, ra000_ffff_tmp30, ra000_ffff_tmp31;
		BitBlock ra000_ffff_tmp32, ra000_ffff_tmp33, ra000_ffff_tmp34;
		BitBlock ra000_ffff_tmp35, ra000_ffff_tmp36, ra000_ffff_tmp37;
		BitBlock ra000_ffff_tmp38, ra000_ffff_tmp39, ra000_ffff_tmp40;
		BitBlock ra000_ffff_tmp41, ra000_ffff_tmp42, ra000_ffff_tmp43;
		BitBlock ra000_ffff_tmp44, ra000_ffff_tmp45, ra000_ffff_tmp46;
		BitBlock cc_range_a722_a73e_3, sequence_ea_9c_adv, ra000_ffff_tmp47;
		BitBlock ra000_ffff_tmp48, byte_9d, sequence_ea_9d, ra000_ffff_tmp49;
		BitBlock ra000_ffff_tmp50, ra000_ffff_tmp51, ra000_ffff_tmp52;
		BitBlock ra000_ffff_tmp53, ra000_ffff_tmp54, ra000_ffff_tmp55;
		BitBlock ra000_ffff_tmp56, ra000_ffff_tmp57, ra000_ffff_tmp58;
		BitBlock ra000_ffff_tmp59, ra000_ffff_tmp60, ra000_ffff_tmp61;
		BitBlock ra000_ffff_tmp62, ra000_ffff_tmp63, ra000_ffff_tmp64;
		BitBlock ra000_ffff_tmp65, ra000_ffff_tmp66, ra000_ffff_tmp67;
		BitBlock ra000_ffff_tmp68, ra000_ffff_tmp69, ra000_ffff_tmp70;
		BitBlock ra000_ffff_tmp71, ra000_ffff_tmp72, ra000_ffff_tmp73;
		BitBlock ra000_ffff_tmp74, ra000_ffff_tmp75, ra000_ffff_tmp76;
		BitBlock ra000_ffff_tmp77, ra000_ffff_tmp78, ra000_ffff_tmp79;
		BitBlock ra000_ffff_tmp80, ra000_ffff_tmp81, ra000_ffff_tmp82;
		BitBlock ra000_ffff_tmp83, ra000_ffff_tmp84, ra000_ffff_tmp85;
		BitBlock ra000_ffff_tmp86, ra000_ffff_tmp87, ra000_ffff_tmp88;
		BitBlock ra000_ffff_tmp89, ra000_ffff_tmp90, ra000_ffff_tmp91;
		BitBlock ra000_ffff_tmp92, ra000_ffff_tmp93, ra000_ffff_tmp94;
		BitBlock ra000_ffff_tmp95, ra000_ffff_tmp96, cc_range_a740_a77d_3;
		BitBlock sequence_ea_9d_adv, ra000_ffff_tmp97, byte_9e, sequence_ea_9e;
		BitBlock ra000_ffff_tmp98, ra000_ffff_tmp99, ra000_ffff_tmp100;
		BitBlock ra000_ffff_tmp101, ra000_ffff_tmp102, ra000_ffff_tmp103;
		BitBlock ra000_ffff_tmp104, ra000_ffff_tmp105, ra000_ffff_tmp106;
		BitBlock ra000_ffff_tmp107, ra000_ffff_tmp108, ra000_ffff_tmp109;
		BitBlock ra000_ffff_tmp110, ra000_ffff_tmp111, ra000_ffff_tmp112;
		BitBlock ra000_ffff_tmp113, ra000_ffff_tmp114, ra000_ffff_tmp115;
		BitBlock ra000_ffff_tmp116, ra000_ffff_tmp117, ra000_ffff_tmp118;
		BitBlock cc_range_a780_a7b0_3, sequence_ea_9e_adv, ra000_ffff_tmp119;
		BitBlock ra000_ffff_tmp120, byte_ef, ra000_ffff_tmp121, sequence_ef_bc;
		BitBlock byte_ef_adv, ra000_ffff_tmp122, byte_range_a1_ba, sequence_ef_bc_adv;
		BitBlock ra000_ffff_tmp123, r80_10ffff_tmp2, byte_range_f0_ff, byte_f0;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_90;
		BitBlock r10000_10ffff_tmp4, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp5;
		BitBlock sequence_f0_90_90, sequence_f0_90_adv, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, byte_range_80_a7, sequence_f0_90_90_adv;
		BitBlock r10000_10ffff_tmp8, r10000_10ffff_tmp9, r10000_10ffff_tmp10, byte_91;
		BitBlock sequence_f0_91, r10000_10ffff_tmp11, r10000_10ffff_tmp12;
		BitBlock r10000_10ffff_tmp13, byte_a2, r10000_10ffff_tmp14, sequence_f0_91_a2;
		BitBlock sequence_f0_91_adv, sequence_f0_91_a2_adv, r10000_10ffff_tmp15;




        struct_cwl_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_andc(tmp1, basis_bits.bit_2);
        tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp4 = simd_or(basis_bits.bit_5, tmp3);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        tmp6 = simd_not(tmp5);
        tmp7 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp9 = simd_or(tmp7, tmp8);
        tmp10 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(tmp9, basis_bits.bit_3));
        byte_range_41_5a = simd_and(tmp2, tmp10);
        struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, byte_range_41_5a);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 52))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 17))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(tmp3, tmp7);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, basis_bits.bit_2);
            r80_7ff_tmp6 = simd_and(basis_bits.bit_5, tmp3);
            r80_7ff_tmp7 = simd_or(basis_bits.bit_4, r80_7ff_tmp6);
            r80_7ff_tmp8 = simd_and(basis_bits.bit_3, r80_7ff_tmp7);
            r80_7ff_tmp9 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp8);
            r80_7ff_tmp10 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp11 = simd_and(r80_7ff_tmp4, r80_7ff_tmp10);
            r80_7ff_tmp12 = simd_and(r80_7ff_tmp11, basis_bits.bit_4);
            r80_7ff_tmp13 = simd_andc(r80_7ff_tmp12, r80_7ff_tmp6);
            cc_range_c0_d8_2 = simd_or(r80_7ff_tmp9, r80_7ff_tmp13);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(0), byte_c3_adv));
            r80_7ff_tmp14 = simd_and(byte_c3_adv, cc_range_c0_d8_2);
            struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r80_7ff_tmp14);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp7);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(1, 9))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(1, 6))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_5, tmp8);
                r100_2ff_tmp2 = simd_not(r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r100_2ff_tmp6 = simd_and(r100_2ff_tmp4, r100_2ff_tmp5);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp6);
                byte_range_80_8f = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(1), r100_2ff_tmp7));
                r100_2ff_tmp8 = simd_and(r100_2ff_tmp7, byte_range_80_8f);
                r100_2ff_tmp9 = simd_or(byte_range_c4_c8, r100_2ff_tmp8);
                if ((bitblock::any(r100_2ff_tmp9) || carryQ.CarryTest(2, 5))) {
                  r100_24f_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                  r100_24f_tmp2 = simd_andc(r100_24f_tmp1, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp2);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(2, 2))) {
                    r100_17f_tmp1 = simd_andc(r100_24f_tmp1, tmp8);
                    byte_c4 = simd_and(r80_7ff_tmp2, r100_17f_tmp1);
                    r100_17f_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                    r100_17f_tmp3 = simd_andc(r100_17f_tmp2, tmp7);
                    r100_17f_tmp4 = simd_andc(tmp9, r100_17f_tmp3);
                    r100_17f_tmp5 = simd_andc(r100_17f_tmp4, r100_17f_tmp1);
                    r100_17f_tmp6 = simd_and(r100_24f_tmp1, r100_17f_tmp2);
                    r100_17f_tmp7 = simd_andc(r100_17f_tmp5, r100_17f_tmp6);
                    r100_17f_tmp8 = simd_andc(r100_2ff_tmp4, tmp8);
                    r100_17f_tmp9 = simd_andc(r100_17f_tmp7, r100_17f_tmp8);
                    r100_17f_tmp10 = simd_and(r100_2ff_tmp4, r100_17f_tmp2);
                    r100_17f_tmp11 = simd_andc(r100_17f_tmp9, r100_17f_tmp10);
                    r100_17f_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                    r100_17f_tmp13 = simd_andc(r100_17f_tmp12, tmp8);
                    r100_17f_tmp14 = simd_andc(r100_17f_tmp11, r100_17f_tmp13);
                    r100_17f_tmp15 = simd_and(r100_17f_tmp12, r100_17f_tmp2);
                    r100_17f_tmp16 = simd_andc(r100_17f_tmp14, r100_17f_tmp15);
                    r100_17f_tmp17 = simd_andc(byte_range_80_8f, r100_17f_tmp16);
                    r100_17f_tmp18 = simd_andc(r80_7ff_tmp11, tmp9);
                    r100_17f_tmp19 = simd_or(r100_17f_tmp17, r100_17f_tmp18);
                    r100_17f_tmp20 = simd_and(r80_7ff_tmp11, r100_17f_tmp3);
                    r100_17f_tmp21 = simd_or(r100_17f_tmp19, r100_17f_tmp20);
                    r100_17f_tmp22 = simd_and(r80_7ff_tmp11, r100_17f_tmp1);
                    r100_17f_tmp23 = simd_or(r100_17f_tmp21, r100_17f_tmp22);
                    r100_17f_tmp24 = simd_and(r80_7ff_tmp11, r100_17f_tmp6);
                    r100_17f_tmp25 = simd_or(r100_17f_tmp23, r100_17f_tmp24);
                    r100_17f_tmp26 = simd_and(r80_7ff_tmp11, r100_17f_tmp8);
                    r100_17f_tmp27 = simd_or(r100_17f_tmp25, r100_17f_tmp26);
                    r100_17f_tmp28 = simd_and(r80_7ff_tmp11, r100_17f_tmp10);
                    r100_17f_tmp29 = simd_or(r100_17f_tmp27, r100_17f_tmp28);
                    r100_17f_tmp30 = simd_and(r80_7ff_tmp11, r100_17f_tmp13);
                    r100_17f_tmp31 = simd_or(r100_17f_tmp29, r100_17f_tmp30);
                    r100_17f_tmp32 = simd_and(r80_7ff_tmp11, r100_17f_tmp15);
                    r100_17f_tmp33 = simd_or(r100_17f_tmp31, r100_17f_tmp32);
                    r100_17f_tmp34 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                    r100_17f_tmp35 = simd_and(r80_7ff_tmp4, r100_17f_tmp34);
                    r100_17f_tmp36 = simd_andc(r100_17f_tmp35, tmp9);
                    r100_17f_tmp37 = simd_or(r100_17f_tmp33, r100_17f_tmp36);
                    r100_17f_tmp38 = simd_and(r100_17f_tmp35, r100_17f_tmp3);
                    r100_17f_tmp39 = simd_or(r100_17f_tmp37, r100_17f_tmp38);
                    r100_17f_tmp40 = simd_and(r100_17f_tmp35, r100_17f_tmp1);
                    r100_17f_tmp41 = simd_or(r100_17f_tmp39, r100_17f_tmp40);
                    r100_17f_tmp42 = simd_and(r100_17f_tmp35, r100_17f_tmp6);
                    r100_17f_tmp43 = simd_or(r100_17f_tmp41, r100_17f_tmp42);
                    r100_17f_tmp44 = simd_and(r100_17f_tmp35, r100_17f_tmp8);
                    r100_17f_tmp45 = simd_or(r100_17f_tmp43, r100_17f_tmp44);
                    r100_17f_tmp46 = simd_and(r100_17f_tmp35, r100_17f_tmp10);
                    r100_17f_tmp47 = simd_or(r100_17f_tmp45, r100_17f_tmp46);
                    r100_17f_tmp48 = simd_and(r100_17f_tmp35, r100_17f_tmp13);
                    r100_17f_tmp49 = simd_or(r100_17f_tmp47, r100_17f_tmp48);
                    r100_17f_tmp50 = simd_and(r100_17f_tmp35, r100_17f_tmp15);
                    r100_17f_tmp51 = simd_or(r100_17f_tmp49, r100_17f_tmp50);
                    r100_17f_tmp52 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                    r100_17f_tmp53 = simd_and(r80_7ff_tmp4, r100_17f_tmp52);
                    r100_17f_tmp54 = simd_andc(r100_17f_tmp53, tmp9);
                    r100_17f_tmp55 = simd_or(r100_17f_tmp51, r100_17f_tmp54);
                    r100_17f_tmp56 = simd_and(r100_17f_tmp53, r100_17f_tmp3);
                    r100_17f_tmp57 = simd_or(r100_17f_tmp55, r100_17f_tmp56);
                    r100_17f_tmp58 = simd_and(r100_17f_tmp53, r100_17f_tmp1);
                    r100_17f_tmp59 = simd_or(r100_17f_tmp57, r100_17f_tmp58);
                    r100_17f_tmp60 = simd_and(r100_17f_tmp53, r100_17f_tmp6);
                    r100_17f_tmp61 = simd_or(r100_17f_tmp59, r100_17f_tmp60);
                    r100_17f_tmp62 = simd_and(r100_17f_tmp53, r100_2ff_tmp6);
                    r100_17f_tmp63 = simd_or(r100_17f_tmp61, r100_17f_tmp62);
                    r100_17f_tmp64 = simd_and(r100_2ff_tmp4, tmp3);
                    r100_17f_tmp65 = simd_and(r100_17f_tmp53, r100_17f_tmp64);
                    r100_17f_tmp66 = simd_or(r100_17f_tmp63, r100_17f_tmp65);
                    r100_17f_tmp67 = simd_and(r100_17f_tmp12, r100_2ff_tmp5);
                    r100_17f_tmp68 = simd_and(r100_17f_tmp53, r100_17f_tmp67);
                    r100_17f_tmp69 = simd_or(r100_17f_tmp66, r100_17f_tmp68);
                    r100_17f_tmp70 = simd_and(r100_17f_tmp12, tmp3);
                    r100_17f_tmp71 = simd_and(r100_17f_tmp53, r100_17f_tmp70);
                    cc_range_100_13f_2 = simd_or(r100_17f_tmp69, r100_17f_tmp71);
                    carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c4, carryQ.get_carry_in(2), byte_c4_adv));
                    r100_17f_tmp72 = simd_and(byte_c4_adv, cc_range_100_13f_2);
                    struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r100_17f_tmp72);
                    r100_17f_tmp73 = simd_and(r100_24f_tmp1, r100_2ff_tmp5);
                    byte_c5 = simd_and(r80_7ff_tmp2, r100_17f_tmp73);
                    r100_17f_tmp74 = simd_andc(basis_bits.bit_7, tmp7);
                    r100_17f_tmp75 = simd_or(r100_17f_tmp74, r100_17f_tmp73);
                    r100_17f_tmp76 = simd_and(r100_24f_tmp1, tmp3);
                    r100_17f_tmp77 = simd_or(r100_17f_tmp75, r100_17f_tmp76);
                    r100_17f_tmp78 = simd_or(r100_17f_tmp77, r100_17f_tmp10);
                    r100_17f_tmp79 = simd_or(r100_17f_tmp78, r100_17f_tmp13);
                    r100_17f_tmp80 = simd_or(r100_17f_tmp79, r100_17f_tmp15);
                    r100_17f_tmp81 = simd_and(byte_range_80_8f, r100_17f_tmp80);
                    r100_17f_tmp82 = simd_or(r100_17f_tmp81, r100_17f_tmp18);
                    r100_17f_tmp83 = simd_or(r100_17f_tmp82, r100_17f_tmp20);
                    r100_17f_tmp84 = simd_or(r100_17f_tmp83, r100_17f_tmp22);
                    r100_17f_tmp85 = simd_or(r100_17f_tmp84, r100_17f_tmp24);
                    r100_17f_tmp86 = simd_or(r100_17f_tmp85, r100_17f_tmp26);
                    r100_17f_tmp87 = simd_or(r100_17f_tmp86, r100_17f_tmp28);
                    r100_17f_tmp88 = simd_or(r100_17f_tmp87, r100_17f_tmp30);
                    r100_17f_tmp89 = simd_or(r100_17f_tmp88, r100_17f_tmp32);
                    r100_17f_tmp90 = simd_or(r100_17f_tmp89, r100_17f_tmp36);
                    r100_17f_tmp91 = simd_or(r100_17f_tmp90, r100_17f_tmp38);
                    r100_17f_tmp92 = simd_or(r100_17f_tmp91, r100_17f_tmp40);
                    r100_17f_tmp93 = simd_or(r100_17f_tmp92, r100_17f_tmp42);
                    r100_17f_tmp94 = simd_or(r100_17f_tmp93, r100_17f_tmp44);
                    r100_17f_tmp95 = simd_or(r100_17f_tmp94, r100_17f_tmp46);
                    r100_17f_tmp96 = simd_or(r100_17f_tmp95, r100_17f_tmp48);
                    r100_17f_tmp97 = simd_or(r100_17f_tmp96, r100_17f_tmp50);
                    r100_17f_tmp98 = simd_or(r100_17f_tmp97, r100_17f_tmp54);
                    r100_17f_tmp99 = simd_or(r100_17f_tmp98, r100_17f_tmp56);
                    r100_17f_tmp100 = simd_or(r100_17f_tmp99, r100_17f_tmp58);
                    r100_17f_tmp101 = simd_or(r100_17f_tmp100, r100_17f_tmp60);
                    r100_17f_tmp102 = simd_andc(r100_2ff_tmp4, basis_bits.bit_6);
                    r100_17f_tmp103 = simd_and(r100_17f_tmp53, r100_17f_tmp102);
                    r100_17f_tmp104 = simd_or(r100_17f_tmp101, r100_17f_tmp103);
                    r100_17f_tmp105 = simd_or(r100_17f_tmp104, r100_17f_tmp65);
                    cc_range_141_17d_2 = simd_or(r100_17f_tmp105, r100_17f_tmp68);
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_c5, carryQ.get_carry_in(3), byte_c5_adv));
                    r100_17f_tmp106 = simd_and(byte_c5_adv, cc_range_141_17d_2);
                    struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r100_17f_tmp106);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(2, 2);
                  }
                  r100_24f_tmp3 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp4 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r100_24f_tmp3, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp4);
                  r100_24f_tmp5 = simd_or(byte_range_c6_c8, r100_2ff_tmp8);
                  if ((bitblock::any(r100_24f_tmp5) || carryQ.CarryTest(4, 3))) {
                    r180_24f_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                    r180_24f_tmp2 = simd_and(r100_24f_tmp1, r180_24f_tmp1);
                    byte_c6 = simd_and(r80_7ff_tmp2, r180_24f_tmp2);
                    r180_24f_tmp3 = simd_andc(byte_range_80_8f, tmp7);
                    r180_24f_tmp4 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                    r180_24f_tmp5 = simd_and(r180_24f_tmp3, r180_24f_tmp4);
                    r180_24f_tmp6 = simd_andc(r100_24f_tmp1, tmp8);
                    r180_24f_tmp7 = simd_and(byte_range_80_8f, r180_24f_tmp6);
                    r180_24f_tmp8 = simd_or(r180_24f_tmp5, r180_24f_tmp7);
                    r180_24f_tmp9 = simd_and(r100_24f_tmp1, basis_bits.bit_6);
                    r180_24f_tmp10 = simd_and(byte_range_80_8f, r180_24f_tmp9);
                    r180_24f_tmp11 = simd_or(r180_24f_tmp8, r180_24f_tmp10);
                    r180_24f_tmp12 = simd_and(byte_range_80_8f, r100_2ff_tmp4);
                    r180_24f_tmp13 = simd_and(r180_24f_tmp12, tmp8);
                    r180_24f_tmp14 = simd_or(r180_24f_tmp11, r180_24f_tmp13);
                    r180_24f_tmp15 = simd_or(tmp7, basis_bits.bit_6);
                    r180_24f_tmp16 = simd_not(r180_24f_tmp15);
                    r180_24f_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                    r180_24f_tmp18 = simd_and(r180_24f_tmp17, basis_bits.bit_6);
                    r180_24f_tmp19 = simd_or(simd_and(basis_bits.bit_3, r180_24f_tmp16), simd_andc(r180_24f_tmp18, basis_bits.bit_3));
                    r180_24f_tmp20 = simd_and(r80_7ff_tmp5, r180_24f_tmp19);
                    r180_24f_tmp21 = simd_or(r180_24f_tmp14, r180_24f_tmp20);
                    r180_24f_tmp22 = simd_andc(r80_7ff_tmp11, basis_bits.bit_4);
                    r180_24f_tmp23 = simd_not(tmp8);
                    r180_24f_tmp24 = simd_or(simd_and(basis_bits.bit_5, r180_24f_tmp23), simd_andc(tmp3, basis_bits.bit_5));
                    r180_24f_tmp25 = simd_and(r180_24f_tmp22, r180_24f_tmp24);
                    r180_24f_tmp26 = simd_or(r180_24f_tmp21, r180_24f_tmp25);
                    r180_24f_tmp27 = simd_and(r80_7ff_tmp11, r100_24f_tmp4);
                    r180_24f_tmp28 = simd_or(r180_24f_tmp26, r180_24f_tmp27);
                    r180_24f_tmp29 = simd_andc(r180_24f_tmp17, basis_bits.bit_6);
                    r180_24f_tmp30 = simd_and(r80_7ff_tmp11, r180_24f_tmp29);
                    r180_24f_tmp31 = simd_or(r180_24f_tmp28, r180_24f_tmp30);
                    r180_24f_tmp32 = simd_or(basis_bits.bit_3, tmp9);
                    r180_24f_tmp33 = simd_not(r180_24f_tmp32);
                    r180_24f_tmp34 = simd_and(r180_24f_tmp17, tmp3);
                    r180_24f_tmp35 = simd_and(basis_bits.bit_3, r180_24f_tmp34);
                    r180_24f_tmp36 = simd_or(simd_and(basis_bits.bit_2, r180_24f_tmp33), simd_andc(r180_24f_tmp35, basis_bits.bit_2));
                    r180_24f_tmp37 = simd_and(r80_7ff_tmp4, r180_24f_tmp36);
                    r180_24f_tmp38 = simd_or(r180_24f_tmp31, r180_24f_tmp37);
                    r180_24f_tmp39 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                    r180_24f_tmp40 = simd_and(r80_7ff_tmp4, r180_24f_tmp39);
                    r180_24f_tmp41 = simd_andc(r180_24f_tmp1, tmp7);
                    r180_24f_tmp42 = simd_and(r180_24f_tmp40, r180_24f_tmp41);
                    r180_24f_tmp43 = simd_or(r180_24f_tmp38, r180_24f_tmp42);
                    r180_24f_tmp44 = simd_and(r180_24f_tmp40, r180_24f_tmp6);
                    r180_24f_tmp45 = simd_or(r180_24f_tmp43, r180_24f_tmp44);
                    r180_24f_tmp46 = simd_and(r180_24f_tmp40, r180_24f_tmp9);
                    r180_24f_tmp47 = simd_or(r180_24f_tmp45, r180_24f_tmp46);
                    r180_24f_tmp48 = simd_and(r180_24f_tmp40, r100_2ff_tmp6);
                    r180_24f_tmp49 = simd_or(r180_24f_tmp47, r180_24f_tmp48);
                    r180_24f_tmp50 = simd_andc(r180_24f_tmp17, tmp8);
                    r180_24f_tmp51 = simd_and(r180_24f_tmp40, r180_24f_tmp50);
                    r180_24f_tmp52 = simd_or(r180_24f_tmp49, r180_24f_tmp51);
                    r180_24f_tmp53 = simd_and(r180_24f_tmp40, r180_24f_tmp18);
                    r180_24f_tmp54 = simd_or(r180_24f_tmp52, r180_24f_tmp53);
                    r180_24f_tmp55 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                    r180_24f_tmp56 = simd_and(r80_7ff_tmp4, r180_24f_tmp55);
                    r180_24f_tmp57 = simd_andc(r180_24f_tmp56, tmp7);
                    r180_24f_tmp58 = simd_and(r180_24f_tmp57, tmp8);
                    r180_24f_tmp59 = simd_or(r180_24f_tmp54, r180_24f_tmp58);
                    r180_24f_tmp60 = simd_and(r100_24f_tmp1, r100_2ff_tmp5);
                    r180_24f_tmp61 = simd_and(r180_24f_tmp56, r180_24f_tmp60);
                    r180_24f_tmp62 = simd_or(r180_24f_tmp59, r180_24f_tmp61);
                    r180_24f_tmp63 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r80_7ff_tmp6, basis_bits.bit_4));
                    r180_24f_tmp64 = simd_and(r180_24f_tmp56, r180_24f_tmp63);
                    r180_24f_tmp65 = simd_or(r180_24f_tmp62, r180_24f_tmp64);
                    r180_24f_tmp66 = simd_and(r180_24f_tmp56, r180_24f_tmp50);
                    cc_range_181_1bc_2 = simd_or(r180_24f_tmp65, r180_24f_tmp66);
                    carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_c6, carryQ.get_carry_in(4), byte_c6_adv));
                    r180_24f_tmp67 = simd_and(byte_c6_adv, cc_range_181_1bc_2);
                    struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r180_24f_tmp67);
                    r180_24f_tmp68 = simd_and(r100_24f_tmp1, tmp3);
                    byte_c7 = simd_and(r80_7ff_tmp2, r180_24f_tmp68);
                    r180_24f_tmp69 = simd_or(r100_24f_tmp2, r180_24f_tmp63);
                    r180_24f_tmp70 = simd_and(r100_2ff_tmp4, basis_bits.bit_6);
                    r180_24f_tmp71 = simd_or(r180_24f_tmp69, r180_24f_tmp70);
                    r180_24f_tmp72 = simd_and(r180_24f_tmp17, r100_2ff_tmp5);
                    r180_24f_tmp73 = simd_or(r180_24f_tmp71, r180_24f_tmp72);
                    r180_24f_tmp74 = simd_or(r180_24f_tmp73, r180_24f_tmp34);
                    r180_24f_tmp75 = simd_and(byte_range_80_8f, r180_24f_tmp74);
                    r180_24f_tmp76 = simd_andc(r100_2ff_tmp5, tmp7);
                    r180_24f_tmp77 = simd_and(r80_7ff_tmp11, r180_24f_tmp76);
                    r180_24f_tmp78 = simd_or(r180_24f_tmp75, r180_24f_tmp77);
                    r180_24f_tmp79 = simd_and(r80_7ff_tmp11, r80_7ff_tmp3);
                    r180_24f_tmp80 = simd_or(r180_24f_tmp78, r180_24f_tmp79);
                    r180_24f_tmp81 = simd_and(r80_7ff_tmp11, r180_24f_tmp60);
                    r180_24f_tmp82 = simd_or(r180_24f_tmp80, r180_24f_tmp81);
                    r180_24f_tmp83 = simd_and(r80_7ff_tmp11, r180_24f_tmp68);
                    r180_24f_tmp84 = simd_or(r180_24f_tmp82, r180_24f_tmp83);
                    r180_24f_tmp85 = simd_and(r80_7ff_tmp11, r100_2ff_tmp6);
                    r180_24f_tmp86 = simd_or(r180_24f_tmp84, r180_24f_tmp85);
                    r180_24f_tmp87 = simd_and(r100_2ff_tmp4, tmp3);
                    r180_24f_tmp88 = simd_and(r80_7ff_tmp11, r180_24f_tmp87);
                    r180_24f_tmp89 = simd_or(r180_24f_tmp86, r180_24f_tmp88);
                    r180_24f_tmp90 = simd_and(r180_24f_tmp17, r180_24f_tmp1);
                    r180_24f_tmp91 = simd_and(r80_7ff_tmp11, r180_24f_tmp90);
                    r180_24f_tmp92 = simd_or(r180_24f_tmp89, r180_24f_tmp91);
                    r180_24f_tmp93 = simd_andc(r180_24f_tmp40, tmp9);
                    r180_24f_tmp94 = simd_or(r180_24f_tmp92, r180_24f_tmp93);
                    r180_24f_tmp95 = simd_or(r180_24f_tmp94, r180_24f_tmp42);
                    r180_24f_tmp96 = simd_or(r180_24f_tmp95, r180_24f_tmp44);
                    r180_24f_tmp97 = simd_and(r180_24f_tmp40, r180_24f_tmp2);
                    r180_24f_tmp98 = simd_or(r180_24f_tmp96, r180_24f_tmp97);
                    r180_24f_tmp99 = simd_andc(r100_2ff_tmp4, tmp8);
                    r180_24f_tmp100 = simd_and(r180_24f_tmp40, r180_24f_tmp99);
                    r180_24f_tmp101 = simd_or(r180_24f_tmp98, r180_24f_tmp100);
                    r180_24f_tmp102 = simd_and(r100_2ff_tmp4, r180_24f_tmp1);
                    r180_24f_tmp103 = simd_and(r180_24f_tmp40, r180_24f_tmp102);
                    r180_24f_tmp104 = simd_or(r180_24f_tmp101, r180_24f_tmp103);
                    r180_24f_tmp105 = simd_or(r180_24f_tmp104, r180_24f_tmp51);
                    r180_24f_tmp106 = simd_and(r180_24f_tmp40, r180_24f_tmp90);
                    r180_24f_tmp107 = simd_or(r180_24f_tmp105, r180_24f_tmp106);
                    r180_24f_tmp108 = simd_and(r180_24f_tmp57, r180_24f_tmp4);
                    r180_24f_tmp109 = simd_or(r180_24f_tmp107, r180_24f_tmp108);
                    r180_24f_tmp110 = simd_and(r180_24f_tmp56, r180_24f_tmp6);
                    r180_24f_tmp111 = simd_or(r180_24f_tmp109, r180_24f_tmp110);
                    r180_24f_tmp112 = simd_and(r180_24f_tmp56, r100_24f_tmp4);
                    r180_24f_tmp113 = simd_or(r180_24f_tmp111, r180_24f_tmp112);
                    r180_24f_tmp114 = simd_and(r180_24f_tmp56, r180_24f_tmp102);
                    r180_24f_tmp115 = simd_or(r180_24f_tmp113, r180_24f_tmp114);
                    r180_24f_tmp116 = simd_or(r180_24f_tmp115, r180_24f_tmp66);
                    r180_24f_tmp117 = simd_and(r180_24f_tmp56, r180_24f_tmp90);
                    cc_range_1c4_1fe_2 = simd_or(r180_24f_tmp116, r180_24f_tmp117);
                    carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(5), byte_c7_adv));
                    r180_24f_tmp118 = simd_and(byte_c7_adv, cc_range_1c4_1fe_2);
                    struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r180_24f_tmp118);
                    byte_c8 = simd_and(r80_7ff_tmp2, r180_24f_tmp99);
                    r180_24f_tmp119 = simd_andc(tmp9, r180_24f_tmp41);
                    r180_24f_tmp120 = simd_andc(r180_24f_tmp119, r180_24f_tmp6);
                    r180_24f_tmp121 = simd_andc(r180_24f_tmp120, r180_24f_tmp2);
                    r180_24f_tmp122 = simd_andc(r180_24f_tmp121, r180_24f_tmp99);
                    r180_24f_tmp123 = simd_andc(r180_24f_tmp122, r180_24f_tmp102);
                    r180_24f_tmp124 = simd_andc(r180_24f_tmp123, r180_24f_tmp50);
                    r180_24f_tmp125 = simd_andc(r180_24f_tmp124, r180_24f_tmp90);
                    r180_24f_tmp126 = simd_andc(byte_range_80_8f, r180_24f_tmp125);
                    r180_24f_tmp127 = simd_andc(r80_7ff_tmp11, tmp9);
                    r180_24f_tmp128 = simd_or(r180_24f_tmp126, r180_24f_tmp127);
                    r180_24f_tmp129 = simd_and(r80_7ff_tmp11, r180_24f_tmp41);
                    r180_24f_tmp130 = simd_or(r180_24f_tmp128, r180_24f_tmp129);
                    r180_24f_tmp131 = simd_and(r80_7ff_tmp11, r180_24f_tmp6);
                    r180_24f_tmp132 = simd_or(r180_24f_tmp130, r180_24f_tmp131);
                    r180_24f_tmp133 = simd_and(r80_7ff_tmp11, r180_24f_tmp2);
                    r180_24f_tmp134 = simd_or(r180_24f_tmp132, r180_24f_tmp133);
                    r180_24f_tmp135 = simd_and(r80_7ff_tmp11, r180_24f_tmp99);
                    r180_24f_tmp136 = simd_or(r180_24f_tmp134, r180_24f_tmp135);
                    r180_24f_tmp137 = simd_and(r80_7ff_tmp11, r180_24f_tmp102);
                    r180_24f_tmp138 = simd_or(r180_24f_tmp136, r180_24f_tmp137);
                    r180_24f_tmp139 = simd_and(r80_7ff_tmp11, r180_24f_tmp50);
                    r180_24f_tmp140 = simd_or(r180_24f_tmp138, r180_24f_tmp139);
                    r180_24f_tmp141 = simd_or(r180_24f_tmp140, r180_24f_tmp91);
                    r180_24f_tmp142 = simd_or(r180_24f_tmp141, r180_24f_tmp93);
                    r180_24f_tmp143 = simd_or(r180_24f_tmp142, r180_24f_tmp42);
                    r180_24f_tmp144 = simd_or(r180_24f_tmp143, r180_24f_tmp44);
                    r180_24f_tmp145 = simd_or(r180_24f_tmp144, r180_24f_tmp97);
                    r180_24f_tmp146 = simd_or(r180_24f_tmp145, r180_24f_tmp100);
                    r180_24f_tmp147 = simd_or(r180_24f_tmp146, r180_24f_tmp103);
                    r180_24f_tmp148 = simd_or(r180_24f_tmp147, r180_24f_tmp51);
                    r180_24f_tmp149 = simd_or(r180_24f_tmp148, r180_24f_tmp106);
                    r180_24f_tmp150 = simd_andc(r180_24f_tmp56, tmp9);
                    r180_24f_tmp151 = simd_or(r180_24f_tmp149, r180_24f_tmp150);
                    r180_24f_tmp152 = simd_and(r180_24f_tmp56, r180_24f_tmp41);
                    r180_24f_tmp153 = simd_or(r180_24f_tmp151, r180_24f_tmp152);
                    r180_24f_tmp154 = simd_and(r180_24f_tmp56, r180_24f_tmp70);
                    r180_24f_tmp155 = simd_or(r180_24f_tmp153, r180_24f_tmp154);
                    r180_24f_tmp156 = simd_and(r180_24f_tmp56, r180_24f_tmp17);
                    r180_24f_tmp157 = simd_and(r180_24f_tmp156, r180_24f_tmp4);
                    cc_range_200_23d_2 = simd_or(r180_24f_tmp155, r180_24f_tmp157);
                    carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_c8, carryQ.get_carry_in(6), byte_c8_adv));
                    r180_24f_tmp158 = simd_and(byte_c8_adv, cc_range_200_23d_2);
                    struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r180_24f_tmp158);
                    r180_24f_tmp159 = simd_and(byte_range_80_8f, r180_24f_tmp76);
                    r180_24f_tmp160 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                    r180_24f_tmp161 = simd_xor(basis_bits.bit_5, tmp3);
                    r180_24f_tmp162 = simd_and(r180_24f_tmp160, r180_24f_tmp161);
                    r180_24f_tmp163 = simd_or(r180_24f_tmp159, r180_24f_tmp162);
                    r180_24f_tmp164 = simd_and(byte_range_80_8f, r180_24f_tmp99);
                    r180_24f_tmp165 = simd_or(r180_24f_tmp163, r180_24f_tmp164);
                    r180_24f_tmp166 = simd_and(byte_range_80_8f, r180_24f_tmp102);
                    r180_24f_tmp167 = simd_or(r180_24f_tmp165, r180_24f_tmp166);
                    r180_24f_tmp168 = simd_and(byte_range_80_8f, r180_24f_tmp50);
                    r180_24f_tmp169 = simd_or(r180_24f_tmp167, r180_24f_tmp168);
                    r180_24f_tmp170 = simd_and(byte_range_80_8f, r180_24f_tmp90);
                    cc_range_241_24e_2 = simd_or(r180_24f_tmp169, r180_24f_tmp170);
                    byte_c9_adv = r100_2ff_tmp7;
                    r180_24f_tmp171 = simd_and(byte_c9_adv, cc_range_241_24e_2);
                    struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r180_24f_tmp171);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(4, 3);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 5);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 6);
              }
              r100_3ff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp4 = simd_and(r100_3ff_tmp2, r100_3ff_tmp3);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp4);
              r100_3ff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_b0_bf = simd_and(r80_7ff_tmp4, r100_3ff_tmp5);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(7), r100_3ff_tmp6));
              r100_3ff_tmp7 = simd_and(r100_3ff_tmp6, byte_range_b0_bf);
              r100_3ff_tmp8 = simd_and(r100_3ff_tmp2, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp8);
              r100_3ff_tmp9 = simd_or(r100_3ff_tmp7, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp9) || carryQ.CarryTest(8, 2))) {
                r370_3ff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r370_3ff_tmp2 = simd_andc(r370_3ff_tmp1, tmp7);
                r370_3ff_tmp3 = simd_andc(tmp9, r370_3ff_tmp2);
                r370_3ff_tmp4 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                r370_3ff_tmp5 = simd_and(r370_3ff_tmp4, r370_3ff_tmp1);
                r370_3ff_tmp6 = simd_andc(r370_3ff_tmp3, r370_3ff_tmp5);
                r370_3ff_tmp7 = simd_and(r100_3ff_tmp2, tmp3);
                r370_3ff_tmp8 = simd_andc(r370_3ff_tmp6, r370_3ff_tmp7);
                cc_range_370_37f_2 = simd_andc(byte_range_b0_bf, r370_3ff_tmp8);
                byte_cd_adv = r100_3ff_tmp6;
                r370_3ff_tmp9 = simd_and(byte_cd_adv, cc_range_370_37f_2);
                struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r370_3ff_tmp9);
                r370_3ff_tmp10 = simd_and(r100_3ff_tmp2, r370_3ff_tmp1);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp10);
                r370_3ff_tmp11 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
                r370_3ff_tmp12 = simd_and(r370_3ff_tmp11, r370_3ff_tmp5);
                r370_3ff_tmp13 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r370_3ff_tmp14 = simd_and(r370_3ff_tmp11, r370_3ff_tmp13);
                r370_3ff_tmp15 = simd_andc(r370_3ff_tmp14, tmp3);
                r370_3ff_tmp16 = simd_or(r370_3ff_tmp12, r370_3ff_tmp15);
                r370_3ff_tmp17 = simd_andc(r100_3ff_tmp2, tmp8);
                r370_3ff_tmp18 = simd_and(r370_3ff_tmp11, r370_3ff_tmp17);
                r370_3ff_tmp19 = simd_or(r370_3ff_tmp16, r370_3ff_tmp18);
                r370_3ff_tmp20 = simd_and(r370_3ff_tmp11, r100_3ff_tmp8);
                r370_3ff_tmp21 = simd_or(r370_3ff_tmp19, r370_3ff_tmp20);
                r370_3ff_tmp22 = simd_or(tmp7, basis_bits.bit_6);
                r370_3ff_tmp23 = simd_or(basis_bits.bit_3, r370_3ff_tmp22);
                r370_3ff_tmp24 = simd_not(r370_3ff_tmp23);
                r370_3ff_tmp25 = simd_and(basis_bits.bit_3, tmp9);
                r370_3ff_tmp26 = simd_or(simd_and(basis_bits.bit_2, r370_3ff_tmp24), simd_andc(r370_3ff_tmp25, basis_bits.bit_2));
                r370_3ff_tmp27 = simd_and(r80_7ff_tmp4, r370_3ff_tmp26);
                r370_3ff_tmp28 = simd_or(r370_3ff_tmp21, r370_3ff_tmp27);
                r370_3ff_tmp29 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r370_3ff_tmp30 = simd_and(r80_7ff_tmp4, r370_3ff_tmp29);
                r370_3ff_tmp31 = simd_not(basis_bits.bit_5);
                r370_3ff_tmp32 = simd_or(simd_and(basis_bits.bit_4, r370_3ff_tmp31), simd_andc(tmp4, basis_bits.bit_4));
                r370_3ff_tmp33 = simd_and(r370_3ff_tmp30, r370_3ff_tmp32);
                cc_range_386_3a3_2 = simd_or(r370_3ff_tmp28, r370_3ff_tmp33);
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(8), byte_ce_adv));
                r370_3ff_tmp34 = simd_and(byte_ce_adv, cc_range_386_3a3_2);
                struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r370_3ff_tmp34);
                byte_cf = simd_and(r80_7ff_tmp2, r370_3ff_tmp7);
                r370_3ff_tmp35 = simd_and(r370_3ff_tmp11, r370_3ff_tmp7);
                r370_3ff_tmp36 = simd_andc(r370_3ff_tmp13, tmp8);
                r370_3ff_tmp37 = simd_and(r80_7ff_tmp11, r370_3ff_tmp36);
                r370_3ff_tmp38 = simd_or(r370_3ff_tmp35, r370_3ff_tmp37);
                r370_3ff_tmp39 = simd_and(r370_3ff_tmp13, r370_3ff_tmp1);
                r370_3ff_tmp40 = simd_and(r80_7ff_tmp11, r370_3ff_tmp39);
                r370_3ff_tmp41 = simd_or(r370_3ff_tmp38, r370_3ff_tmp40);
                r370_3ff_tmp42 = simd_and(r80_7ff_tmp11, r370_3ff_tmp17);
                r370_3ff_tmp43 = simd_or(r370_3ff_tmp41, r370_3ff_tmp42);
                r370_3ff_tmp44 = simd_and(r80_7ff_tmp11, r370_3ff_tmp10);
                r370_3ff_tmp45 = simd_or(r370_3ff_tmp43, r370_3ff_tmp44);
                r370_3ff_tmp46 = simd_andc(r370_3ff_tmp30, tmp9);
                r370_3ff_tmp47 = simd_or(r370_3ff_tmp45, r370_3ff_tmp46);
                r370_3ff_tmp48 = simd_and(r370_3ff_tmp30, r370_3ff_tmp2);
                r370_3ff_tmp49 = simd_or(r370_3ff_tmp47, r370_3ff_tmp48);
                r370_3ff_tmp50 = simd_andc(r370_3ff_tmp4, tmp8);
                r370_3ff_tmp51 = simd_and(r370_3ff_tmp30, r370_3ff_tmp50);
                r370_3ff_tmp52 = simd_or(r370_3ff_tmp49, r370_3ff_tmp51);
                r370_3ff_tmp53 = simd_and(r370_3ff_tmp30, r370_3ff_tmp5);
                r370_3ff_tmp54 = simd_or(r370_3ff_tmp52, r370_3ff_tmp53);
                r370_3ff_tmp55 = simd_and(r370_3ff_tmp30, r370_3ff_tmp36);
                r370_3ff_tmp56 = simd_or(r370_3ff_tmp54, r370_3ff_tmp55);
                r370_3ff_tmp57 = simd_and(r370_3ff_tmp30, r370_3ff_tmp39);
                r370_3ff_tmp58 = simd_or(r370_3ff_tmp56, r370_3ff_tmp57);
                r370_3ff_tmp59 = simd_and(r370_3ff_tmp30, r370_3ff_tmp17);
                r370_3ff_tmp60 = simd_or(r370_3ff_tmp58, r370_3ff_tmp59);
                r370_3ff_tmp61 = simd_and(r370_3ff_tmp30, r370_3ff_tmp10);
                r370_3ff_tmp62 = simd_or(r370_3ff_tmp60, r370_3ff_tmp61);
                r370_3ff_tmp63 = simd_and(byte_range_b0_bf, r370_3ff_tmp50);
                r370_3ff_tmp64 = simd_or(r370_3ff_tmp62, r370_3ff_tmp63);
                r370_3ff_tmp65 = simd_and(r370_3ff_tmp4, tmp3);
                r370_3ff_tmp66 = simd_and(byte_range_b0_bf, r370_3ff_tmp65);
                r370_3ff_tmp67 = simd_or(r370_3ff_tmp64, r370_3ff_tmp66);
                r370_3ff_tmp68 = simd_and(byte_range_b0_bf, r370_3ff_tmp13);
                r370_3ff_tmp69 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                r370_3ff_tmp70 = simd_and(r370_3ff_tmp68, r370_3ff_tmp69);
                r370_3ff_tmp71 = simd_or(r370_3ff_tmp67, r370_3ff_tmp70);
                r370_3ff_tmp72 = simd_and(byte_range_b0_bf, r100_3ff_tmp2);
                r370_3ff_tmp73 = simd_and(r370_3ff_tmp72, tmp8);
                cc_range_3cf_3fd_2 = simd_or(r370_3ff_tmp71, r370_3ff_tmp73);
                carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(9), byte_cf_adv));
                r370_3ff_tmp74 = simd_and(byte_cf_adv, cc_range_3cf_3fd_2);
                struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r370_3ff_tmp74);
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 9);
            }
            r80_7ff_tmp15 = simd_and(byte_range_c0_ff, r80_7ff_tmp10);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp15, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(10, 7))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp15, tmp7);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(10, 4))) {
                byte_d0 = simd_andc(r80_7ff_tmp15, tmp9);
                r400_4ff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_80_af = simd_andc(r80_7ff_tmp4, r400_4ff_tmp1);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_d0, carryQ.get_carry_in(10), byte_d0_adv));
                r400_4ff_tmp2 = simd_and(byte_d0_adv, byte_range_80_af);
                struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r400_4ff_tmp2);
                r400_4ff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r400_4ff_tmp4 = simd_andc(r400_4ff_tmp3, tmp7);
                byte_d1 = simd_and(r80_7ff_tmp15, r400_4ff_tmp4);
                r400_4ff_tmp5 = simd_and(r80_7ff_tmp4, basis_bits.bit_2);
                cc_range_460_47e_2 = simd_andc(r400_4ff_tmp5, basis_bits.bit_7);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_d1, carryQ.get_carry_in(11), byte_d1_adv));
                r400_4ff_tmp6 = simd_and(byte_d1_adv, cc_range_460_47e_2);
                struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r400_4ff_tmp6);
                r400_4ff_tmp7 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r400_4ff_tmp8 = simd_andc(r400_4ff_tmp7, tmp7);
                byte_d2 = simd_and(r80_7ff_tmp15, r400_4ff_tmp8);
                r400_4ff_tmp9 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
                r400_4ff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r400_4ff_tmp11 = simd_and(r400_4ff_tmp10, r400_4ff_tmp7);
                r400_4ff_tmp12 = simd_andc(tmp9, r400_4ff_tmp11);
                r400_4ff_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                r400_4ff_tmp14 = simd_andc(r400_4ff_tmp13, tmp8);
                r400_4ff_tmp15 = simd_andc(r400_4ff_tmp12, r400_4ff_tmp14);
                r400_4ff_tmp16 = simd_and(r400_4ff_tmp13, r400_4ff_tmp7);
                r400_4ff_tmp17 = simd_andc(r400_4ff_tmp15, r400_4ff_tmp16);
                r400_4ff_tmp18 = simd_andc(r400_4ff_tmp9, r400_4ff_tmp17);
                r400_4ff_tmp19 = simd_andc(r80_7ff_tmp11, tmp9);
                r400_4ff_tmp20 = simd_or(r400_4ff_tmp18, r400_4ff_tmp19);
                r400_4ff_tmp21 = simd_and(r80_7ff_tmp11, r400_4ff_tmp8);
                r400_4ff_tmp22 = simd_or(r400_4ff_tmp20, r400_4ff_tmp21);
                r400_4ff_tmp23 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                r400_4ff_tmp24 = simd_andc(r400_4ff_tmp23, tmp8);
                r400_4ff_tmp25 = simd_and(r80_7ff_tmp11, r400_4ff_tmp24);
                r400_4ff_tmp26 = simd_or(r400_4ff_tmp22, r400_4ff_tmp25);
                r400_4ff_tmp27 = simd_and(r400_4ff_tmp23, r400_4ff_tmp7);
                r400_4ff_tmp28 = simd_and(r80_7ff_tmp11, r400_4ff_tmp27);
                r400_4ff_tmp29 = simd_or(r400_4ff_tmp26, r400_4ff_tmp28);
                r400_4ff_tmp30 = simd_andc(r400_4ff_tmp10, tmp8);
                r400_4ff_tmp31 = simd_and(r80_7ff_tmp11, r400_4ff_tmp30);
                r400_4ff_tmp32 = simd_or(r400_4ff_tmp29, r400_4ff_tmp31);
                r400_4ff_tmp33 = simd_and(r80_7ff_tmp11, r400_4ff_tmp11);
                r400_4ff_tmp34 = simd_or(r400_4ff_tmp32, r400_4ff_tmp33);
                r400_4ff_tmp35 = simd_and(r80_7ff_tmp11, r400_4ff_tmp14);
                r400_4ff_tmp36 = simd_or(r400_4ff_tmp34, r400_4ff_tmp35);
                r400_4ff_tmp37 = simd_and(r80_7ff_tmp11, r400_4ff_tmp16);
                r400_4ff_tmp38 = simd_or(r400_4ff_tmp36, r400_4ff_tmp37);
                r400_4ff_tmp39 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r400_4ff_tmp40 = simd_and(r80_7ff_tmp4, r400_4ff_tmp39);
                r400_4ff_tmp41 = simd_andc(r400_4ff_tmp40, tmp9);
                r400_4ff_tmp42 = simd_or(r400_4ff_tmp38, r400_4ff_tmp41);
                r400_4ff_tmp43 = simd_and(r400_4ff_tmp40, r400_4ff_tmp8);
                r400_4ff_tmp44 = simd_or(r400_4ff_tmp42, r400_4ff_tmp43);
                r400_4ff_tmp45 = simd_and(r400_4ff_tmp40, r400_4ff_tmp24);
                r400_4ff_tmp46 = simd_or(r400_4ff_tmp44, r400_4ff_tmp45);
                r400_4ff_tmp47 = simd_and(r400_4ff_tmp40, r400_4ff_tmp27);
                r400_4ff_tmp48 = simd_or(r400_4ff_tmp46, r400_4ff_tmp47);
                r400_4ff_tmp49 = simd_and(r400_4ff_tmp40, r400_4ff_tmp30);
                r400_4ff_tmp50 = simd_or(r400_4ff_tmp48, r400_4ff_tmp49);
                r400_4ff_tmp51 = simd_and(r400_4ff_tmp40, r400_4ff_tmp11);
                r400_4ff_tmp52 = simd_or(r400_4ff_tmp50, r400_4ff_tmp51);
                r400_4ff_tmp53 = simd_and(r400_4ff_tmp40, r400_4ff_tmp14);
                r400_4ff_tmp54 = simd_or(r400_4ff_tmp52, r400_4ff_tmp53);
                r400_4ff_tmp55 = simd_and(r400_4ff_tmp40, r400_4ff_tmp16);
                r400_4ff_tmp56 = simd_or(r400_4ff_tmp54, r400_4ff_tmp55);
                r400_4ff_tmp57 = simd_and(r80_7ff_tmp4, r400_4ff_tmp1);
                r400_4ff_tmp58 = simd_andc(r400_4ff_tmp57, tmp9);
                r400_4ff_tmp59 = simd_or(r400_4ff_tmp56, r400_4ff_tmp58);
                r400_4ff_tmp60 = simd_and(r400_4ff_tmp57, r400_4ff_tmp8);
                r400_4ff_tmp61 = simd_or(r400_4ff_tmp59, r400_4ff_tmp60);
                r400_4ff_tmp62 = simd_and(r400_4ff_tmp57, r400_4ff_tmp24);
                r400_4ff_tmp63 = simd_or(r400_4ff_tmp61, r400_4ff_tmp62);
                r400_4ff_tmp64 = simd_and(r400_4ff_tmp57, r400_4ff_tmp27);
                r400_4ff_tmp65 = simd_or(r400_4ff_tmp63, r400_4ff_tmp64);
                r400_4ff_tmp66 = simd_and(r400_4ff_tmp57, r400_4ff_tmp30);
                r400_4ff_tmp67 = simd_or(r400_4ff_tmp65, r400_4ff_tmp66);
                r400_4ff_tmp68 = simd_and(r400_4ff_tmp57, r400_4ff_tmp11);
                r400_4ff_tmp69 = simd_or(r400_4ff_tmp67, r400_4ff_tmp68);
                r400_4ff_tmp70 = simd_and(r400_4ff_tmp57, r400_4ff_tmp14);
                r400_4ff_tmp71 = simd_or(r400_4ff_tmp69, r400_4ff_tmp70);
                r400_4ff_tmp72 = simd_and(r400_4ff_tmp57, r400_4ff_tmp16);
                cc_range_480_4be_2 = simd_or(r400_4ff_tmp71, r400_4ff_tmp72);
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(12), byte_d2_adv));
                r400_4ff_tmp73 = simd_and(byte_d2_adv, cc_range_480_4be_2);
                struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r400_4ff_tmp73);
                byte_d3 = simd_and(r80_7ff_tmp15, r80_7ff_tmp3);
                r400_4ff_tmp74 = simd_or(tmp7, basis_bits.bit_6);
                r400_4ff_tmp75 = simd_andc(r400_4ff_tmp74, r80_7ff_tmp3);
                r400_4ff_tmp76 = simd_and(r400_4ff_tmp23, r400_4ff_tmp3);
                r400_4ff_tmp77 = simd_andc(r400_4ff_tmp75, r400_4ff_tmp76);
                r400_4ff_tmp78 = simd_and(r400_4ff_tmp23, tmp3);
                r400_4ff_tmp79 = simd_andc(r400_4ff_tmp77, r400_4ff_tmp78);
                r400_4ff_tmp80 = simd_and(r400_4ff_tmp10, r400_4ff_tmp3);
                r400_4ff_tmp81 = simd_andc(r400_4ff_tmp79, r400_4ff_tmp80);
                r400_4ff_tmp82 = simd_and(r400_4ff_tmp10, tmp3);
                r400_4ff_tmp83 = simd_andc(r400_4ff_tmp81, r400_4ff_tmp82);
                r400_4ff_tmp84 = simd_and(r400_4ff_tmp13, r400_4ff_tmp3);
                r400_4ff_tmp85 = simd_andc(r400_4ff_tmp83, r400_4ff_tmp84);
                r400_4ff_tmp86 = simd_andc(r400_4ff_tmp9, r400_4ff_tmp85);
                r400_4ff_tmp87 = simd_or(r400_4ff_tmp86, r400_4ff_tmp19);
                r400_4ff_tmp88 = simd_or(r400_4ff_tmp87, r400_4ff_tmp21);
                r400_4ff_tmp89 = simd_or(r400_4ff_tmp88, r400_4ff_tmp25);
                r400_4ff_tmp90 = simd_or(r400_4ff_tmp89, r400_4ff_tmp28);
                r400_4ff_tmp91 = simd_or(r400_4ff_tmp90, r400_4ff_tmp31);
                r400_4ff_tmp92 = simd_or(r400_4ff_tmp91, r400_4ff_tmp33);
                r400_4ff_tmp93 = simd_or(r400_4ff_tmp92, r400_4ff_tmp35);
                r400_4ff_tmp94 = simd_or(r400_4ff_tmp93, r400_4ff_tmp37);
                r400_4ff_tmp95 = simd_or(r400_4ff_tmp94, r400_4ff_tmp41);
                r400_4ff_tmp96 = simd_or(r400_4ff_tmp95, r400_4ff_tmp43);
                r400_4ff_tmp97 = simd_or(r400_4ff_tmp96, r400_4ff_tmp45);
                r400_4ff_tmp98 = simd_or(r400_4ff_tmp97, r400_4ff_tmp47);
                r400_4ff_tmp99 = simd_or(r400_4ff_tmp98, r400_4ff_tmp49);
                r400_4ff_tmp100 = simd_or(r400_4ff_tmp99, r400_4ff_tmp51);
                r400_4ff_tmp101 = simd_or(r400_4ff_tmp100, r400_4ff_tmp53);
                r400_4ff_tmp102 = simd_or(r400_4ff_tmp101, r400_4ff_tmp55);
                r400_4ff_tmp103 = simd_or(r400_4ff_tmp102, r400_4ff_tmp58);
                r400_4ff_tmp104 = simd_or(r400_4ff_tmp103, r400_4ff_tmp60);
                r400_4ff_tmp105 = simd_or(r400_4ff_tmp104, r400_4ff_tmp62);
                r400_4ff_tmp106 = simd_or(r400_4ff_tmp105, r400_4ff_tmp64);
                r400_4ff_tmp107 = simd_or(r400_4ff_tmp106, r400_4ff_tmp66);
                r400_4ff_tmp108 = simd_or(r400_4ff_tmp107, r400_4ff_tmp68);
                r400_4ff_tmp109 = simd_or(r400_4ff_tmp108, r400_4ff_tmp70);
                cc_range_4c0_4fe_2 = simd_or(r400_4ff_tmp109, r400_4ff_tmp72);
                carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(13), byte_d3_adv));
                r400_4ff_tmp110 = simd_and(byte_d3_adv, cc_range_4c0_4fe_2);
                struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r400_4ff_tmp110);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 4);
              }
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp15, r400_5ff_tmp2);
              r400_5ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp1, r400_5ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp15, r400_5ff_tmp4);
              byte_range_80_8f = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
              carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(14), r400_5ff_tmp5));
              r400_5ff_tmp6 = simd_and(r400_5ff_tmp5, byte_range_80_8f);
              r400_5ff_tmp7 = simd_or(byte_range_d4_d5, r400_5ff_tmp6);
              if ((bitblock::any(r400_5ff_tmp7) || carryQ.CarryTest(15, 2))) {
                r500_58f_tmp1 = simd_andc(r400_5ff_tmp1, tmp8);
                byte_d4 = simd_and(r80_7ff_tmp15, r500_58f_tmp1);
                r500_58f_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_80_af = simd_andc(r80_7ff_tmp4, r500_58f_tmp2);
                carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(15), r500_58f_tmp3));
                r500_58f_tmp4 = simd_and(r500_58f_tmp3, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp4)) {
                  cc_range_500_52e_2 = simd_andc(byte_range_80_af, basis_bits.bit_7);
                  byte_d4_adv = r500_58f_tmp3;
                  r500_52f_tmp1 = simd_and(byte_d4_adv, cc_range_500_52e_2);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r500_52f_tmp1);
                }
                byte_range_b0_bf = simd_and(r80_7ff_tmp4, r500_58f_tmp2);
                r500_58f_tmp5 = simd_and(r500_58f_tmp3, byte_range_b0_bf);
                r500_58f_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r500_58f_tmp7 = simd_and(r400_5ff_tmp1, r500_58f_tmp6);
                byte_d5 = simd_and(r80_7ff_tmp15, r500_58f_tmp7);
                r500_58f_tmp8 = simd_or(r500_58f_tmp5, byte_d5);
                r500_58f_tmp9 = simd_or(r500_58f_tmp8, r400_5ff_tmp6);
                if ((bitblock::any(r500_58f_tmp9) || carryQ.CarryTest(16, 1))) {
                  r530_58f_tmp1 = simd_or(basis_bits.bit_5, tmp8);
                  r530_58f_tmp2 = simd_or(basis_bits.bit_4, r530_58f_tmp1);
                  byte_range_b1_bf = simd_and(byte_range_b0_bf, r530_58f_tmp2);
                  byte_d4_adv = r500_58f_tmp3;
                  r530_58f_tmp3 = simd_and(byte_d4_adv, byte_range_b1_bf);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r530_58f_tmp3);
                  byte_range_80_96 = r80_7ff_tmp9;
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(16), byte_d5_adv));
                  r530_58f_tmp4 = simd_and(byte_d5_adv, byte_range_80_96);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r530_58f_tmp4);
                }
                else {
                  carryQ.CarryDequeueEnqueue(16, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(15, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(10, 7);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 17);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(17, 30))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp7);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp8);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(17), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(18, 21))) {
              r800_4dff_tmp1 = simd_or(tmp7, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(18, 11))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp7);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(18, 11))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, tmp7);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(18), r1000_1fff_tmp5));
                  sequence_e1_82 = simd_and(r1000_1fff_tmp5, byte_82);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(19), sequence_e1_82_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_82_adv, byte_range_a0_bf);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r1000_1fff_tmp6);
                  r1000_1fff_tmp7 = simd_andc(tmp3, tmp7);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp7);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  r1000_1fff_tmp8 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp10 = simd_andc(r1000_1fff_tmp8, r1000_1fff_tmp9);
                  r1000_1fff_tmp11 = simd_and(r800_ffff_tmp1, tmp3);
                  r1000_1fff_tmp12 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp11);
                  r1000_1fff_tmp13 = simd_or(r1000_1fff_tmp10, r1000_1fff_tmp12);
                  r1000_1fff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp15 = simd_and(r1000_1fff_tmp14, r800_1fff_tmp1);
                  r1000_1fff_tmp16 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp15);
                  cc_range_10c0_10cd_3 = simd_or(r1000_1fff_tmp13, r1000_1fff_tmp16);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(20), sequence_e1_83_adv));
                  r1000_1fff_tmp17 = simd_and(sequence_e1_83_adv, cc_range_10c0_10cd_3);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r1000_1fff_tmp17);
                  r1000_1fff_tmp18 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp19 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp18);
                  r1000_1fff_tmp20 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp21 = simd_andc(r1000_1fff_tmp20, tmp8);
                  byte_b8 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp21);
                  sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
                  cc_range_1e00_1e3e_3 = simd_andc(r800_ffff_tmp3, basis_bits.bit_7);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(21), sequence_e1_b8_adv));
                  r1000_1fff_tmp22 = simd_and(sequence_e1_b8_adv, cc_range_1e00_1e3e_3);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r1000_1fff_tmp22);
                  r1000_1fff_tmp23 = simd_and(r1000_1fff_tmp20, r800_1fff_tmp1);
                  byte_b9 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp23);
                  sequence_e1_b9 = simd_and(byte_e1_adv, byte_b9);
                  cc_range_1e40_1e7e_3 = cc_range_1e00_1e3e_3;
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e1_b9, carryQ.get_carry_in(22), sequence_e1_b9_adv));
                  r1000_1fff_tmp24 = simd_and(sequence_e1_b9_adv, cc_range_1e40_1e7e_3);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r1000_1fff_tmp24);
                  r1000_1fff_tmp25 = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp3);
                  byte_ba = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp25);
                  sequence_e1_ba = simd_and(byte_e1_adv, byte_ba);
                  r1000_1fff_tmp26 = simd_andc(tmp9, r1000_1fff_tmp4);
                  r1000_1fff_tmp27 = simd_andc(r1000_1fff_tmp26, r800_ffff_tmp2);
                  r1000_1fff_tmp28 = simd_and(r800_ffff_tmp1, r1000_1fff_tmp3);
                  r1000_1fff_tmp29 = simd_andc(r1000_1fff_tmp27, r1000_1fff_tmp28);
                  r1000_1fff_tmp30 = simd_andc(r1000_1fff_tmp29, r1000_1fff_tmp21);
                  r1000_1fff_tmp31 = simd_andc(r1000_1fff_tmp30, r1000_1fff_tmp25);
                  r1000_1fff_tmp32 = simd_andc(r1000_1fff_tmp14, tmp8);
                  r1000_1fff_tmp33 = simd_andc(r1000_1fff_tmp31, r1000_1fff_tmp32);
                  r1000_1fff_tmp34 = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp3);
                  r1000_1fff_tmp35 = simd_andc(r1000_1fff_tmp33, r1000_1fff_tmp34);
                  r1000_1fff_tmp36 = simd_andc(r1000_1fff_tmp2, r1000_1fff_tmp35);
                  r1000_1fff_tmp37 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp38 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp37);
                  r1000_1fff_tmp39 = simd_andc(r1000_1fff_tmp38, tmp9);
                  r1000_1fff_tmp40 = simd_or(r1000_1fff_tmp36, r1000_1fff_tmp39);
                  r1000_1fff_tmp41 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp4);
                  r1000_1fff_tmp42 = simd_or(r1000_1fff_tmp40, r1000_1fff_tmp41);
                  r1000_1fff_tmp43 = simd_and(r1000_1fff_tmp38, r800_ffff_tmp2);
                  r1000_1fff_tmp44 = simd_or(r1000_1fff_tmp42, r1000_1fff_tmp43);
                  r1000_1fff_tmp45 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp34);
                  r1000_1fff_tmp46 = simd_or(r1000_1fff_tmp44, r1000_1fff_tmp45);
                  r1000_1fff_tmp47 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r1000_1fff_tmp48 = simd_andc(r1000_1fff_tmp47, tmp9);
                  r1000_1fff_tmp49 = simd_or(r1000_1fff_tmp46, r1000_1fff_tmp48);
                  r1000_1fff_tmp50 = simd_and(r1000_1fff_tmp47, r1000_1fff_tmp4);
                  r1000_1fff_tmp51 = simd_or(r1000_1fff_tmp49, r1000_1fff_tmp50);
                  r1000_1fff_tmp52 = simd_and(r1000_1fff_tmp47, r800_ffff_tmp2);
                  r1000_1fff_tmp53 = simd_or(r1000_1fff_tmp51, r1000_1fff_tmp52);
                  r1000_1fff_tmp54 = simd_and(r1000_1fff_tmp47, r1000_1fff_tmp28);
                  r1000_1fff_tmp55 = simd_or(r1000_1fff_tmp53, r1000_1fff_tmp54);
                  r1000_1fff_tmp56 = simd_and(r1000_1fff_tmp47, r1000_1fff_tmp21);
                  r1000_1fff_tmp57 = simd_or(r1000_1fff_tmp55, r1000_1fff_tmp56);
                  r1000_1fff_tmp58 = simd_and(r1000_1fff_tmp47, r1000_1fff_tmp25);
                  r1000_1fff_tmp59 = simd_or(r1000_1fff_tmp57, r1000_1fff_tmp58);
                  r1000_1fff_tmp60 = simd_and(r1000_1fff_tmp47, r1000_1fff_tmp32);
                  r1000_1fff_tmp61 = simd_or(r1000_1fff_tmp59, r1000_1fff_tmp60);
                  r1000_1fff_tmp62 = simd_and(r1000_1fff_tmp47, r1000_1fff_tmp34);
                  r1000_1fff_tmp63 = simd_or(r1000_1fff_tmp61, r1000_1fff_tmp62);
                  r1000_1fff_tmp64 = simd_andc(r1000_1fff_tmp19, tmp9);
                  r1000_1fff_tmp65 = simd_or(r1000_1fff_tmp63, r1000_1fff_tmp64);
                  r1000_1fff_tmp66 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp4);
                  r1000_1fff_tmp67 = simd_or(r1000_1fff_tmp65, r1000_1fff_tmp66);
                  r1000_1fff_tmp68 = simd_and(r1000_1fff_tmp19, r800_ffff_tmp2);
                  r1000_1fff_tmp69 = simd_or(r1000_1fff_tmp67, r1000_1fff_tmp68);
                  r1000_1fff_tmp70 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp28);
                  r1000_1fff_tmp71 = simd_or(r1000_1fff_tmp69, r1000_1fff_tmp70);
                  r1000_1fff_tmp72 = simd_or(r1000_1fff_tmp71, byte_b8);
                  r1000_1fff_tmp73 = simd_or(r1000_1fff_tmp72, byte_ba);
                  r1000_1fff_tmp74 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp32);
                  r1000_1fff_tmp75 = simd_or(r1000_1fff_tmp73, r1000_1fff_tmp74);
                  r1000_1fff_tmp76 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp34);
                  cc_range_1e80_1ebe_3 = simd_or(r1000_1fff_tmp75, r1000_1fff_tmp76);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e1_ba, carryQ.get_carry_in(23), sequence_e1_ba_adv));
                  r1000_1fff_tmp77 = simd_and(sequence_e1_ba_adv, cc_range_1e80_1ebe_3);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r1000_1fff_tmp77);
                  r1000_1fff_tmp78 = simd_and(r1000_1fff_tmp20, tmp3);
                  byte_bb = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp78);
                  sequence_e1_bb = simd_and(byte_e1_adv, byte_bb);
                  cc_range_1ec0_1efe_3 = cc_range_1e00_1e3e_3;
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e1_bb, carryQ.get_carry_in(24), sequence_e1_bb_adv));
                  r1000_1fff_tmp79 = simd_and(sequence_e1_bb_adv, cc_range_1ec0_1efe_3);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r1000_1fff_tmp79);
                  byte_bc = r1000_1fff_tmp74;
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  r1000_1fff_tmp80 = simd_and(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp81 = simd_and(r1000_1fff_tmp38, basis_bits.bit_4);
                  r1000_1fff_tmp82 = simd_andc(r1000_1fff_tmp81, r1000_1fff_tmp9);
                  r1000_1fff_tmp83 = simd_or(r1000_1fff_tmp80, r1000_1fff_tmp82);
                  r1000_1fff_tmp84 = simd_and(r1000_1fff_tmp47, basis_bits.bit_4);
                  r1000_1fff_tmp85 = simd_or(r1000_1fff_tmp83, r1000_1fff_tmp84);
                  r1000_1fff_tmp86 = simd_and(r1000_1fff_tmp19, basis_bits.bit_4);
                  cc_range_1f08_1f38_3 = simd_or(r1000_1fff_tmp85, r1000_1fff_tmp86);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(25), sequence_e1_bc_adv));
                  r1000_1fff_tmp87 = simd_and(sequence_e1_bc_adv, cc_range_1f08_1f38_3);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r1000_1fff_tmp87);
                  byte_bd = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp15);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  r1000_1fff_tmp88 = simd_andc(r1000_1fff_tmp80, r1000_1fff_tmp9);
                  r1000_1fff_tmp89 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp23);
                  r1000_1fff_tmp90 = simd_or(r1000_1fff_tmp88, r1000_1fff_tmp89);
                  r1000_1fff_tmp91 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp78);
                  r1000_1fff_tmp92 = simd_or(r1000_1fff_tmp90, r1000_1fff_tmp91);
                  r1000_1fff_tmp93 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp15);
                  r1000_1fff_tmp94 = simd_or(r1000_1fff_tmp92, r1000_1fff_tmp93);
                  r1000_1fff_tmp95 = simd_and(r1000_1fff_tmp14, tmp3);
                  r1000_1fff_tmp96 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp95);
                  r1000_1fff_tmp97 = simd_or(r1000_1fff_tmp94, r1000_1fff_tmp96);
                  cc_range_1f48_1f68_3 = simd_or(r1000_1fff_tmp97, r1000_1fff_tmp84);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(26), sequence_e1_bd_adv));
                  r1000_1fff_tmp98 = simd_and(sequence_e1_bd_adv, cc_range_1f48_1f68_3);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r1000_1fff_tmp98);
                  byte_be = r1000_1fff_tmp76;
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  r1000_1fff_tmp99 = simd_andc(r1000_1fff_tmp1, r1000_1fff_tmp37);
                  r1000_1fff_tmp100 = simd_andc(r1000_1fff_tmp99, r80_10ffff_tmp1);
                  r1000_1fff_tmp101 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp100);
                  r1000_1fff_tmp102 = simd_and(basis_bits.bit_4, r1000_1fff_tmp101);
                  r1000_1fff_tmp103 = simd_and(basis_bits.bit_5, tmp8);
                  r1000_1fff_tmp104 = simd_andc(r1000_1fff_tmp86, r1000_1fff_tmp103);
                  cc_range_1f88_1fb8_3 = simd_or(r1000_1fff_tmp102, r1000_1fff_tmp104);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(27), sequence_e1_be_adv));
                  r1000_1fff_tmp105 = simd_and(sequence_e1_be_adv, cc_range_1f88_1fb8_3);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r1000_1fff_tmp105);
                  byte_bf = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp95);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  r1000_1fff_tmp106 = simd_andc(r1000_1fff_tmp80, r1000_1fff_tmp103);
                  r1000_1fff_tmp107 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp20);
                  r1000_1fff_tmp108 = simd_or(r1000_1fff_tmp106, r1000_1fff_tmp107);
                  r1000_1fff_tmp109 = simd_andc(r1000_1fff_tmp84, r1000_1fff_tmp103);
                  r1000_1fff_tmp110 = simd_or(r1000_1fff_tmp108, r1000_1fff_tmp109);
                  cc_range_1fc8_1ff8_3 = simd_or(r1000_1fff_tmp110, r1000_1fff_tmp104);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(28), sequence_e1_bf_adv));
                  r1000_1fff_tmp111 = simd_and(sequence_e1_bf_adv, cc_range_1fc8_1ff8_3);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r1000_1fff_tmp111);
                }
                else {
                  carryQ.CarryDequeueEnqueue(18, 11);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(18, 11);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp7);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(29, 10))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp7);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(29, 10))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp2);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(29), r2000_2fff_tmp3));
                  sequence_e2_84 = simd_and(r2000_2fff_tmp3, byte_84);
                  byte_e2_adv = r2000_2fff_tmp3;
                  r2000_2fff_tmp4 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r2000_2fff_tmp5 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  r2000_2fff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp7 = simd_and(r2000_2fff_tmp6, basis_bits.bit_6);
                  r2000_2fff_tmp8 = simd_or(r2000_2fff_tmp5, r2000_2fff_tmp7);
                  r2000_2fff_tmp9 = simd_and(r2000_2fff_tmp4, r2000_2fff_tmp8);
                  r2000_2fff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp11 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp10);
                  r2000_2fff_tmp12 = simd_and(r2000_2fff_tmp11, r2000_4dff_tmp2);
                  cc_range_2126_2132_3 = simd_or(r2000_2fff_tmp9, r2000_2fff_tmp12);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(30), sequence_e2_84_adv));
                  r2000_2fff_tmp13 = simd_and(sequence_e2_84_adv, cc_range_2126_2132_3);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r2000_2fff_tmp13);
                  r2000_2fff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp15 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp14);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp15);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  byte_range_a0_af = r2000_2fff_tmp4;
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(31), sequence_e2_85_adv));
                  r2000_2fff_tmp16 = simd_and(sequence_e2_85_adv, byte_range_a0_af);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r2000_2fff_tmp16);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp5);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp17 = simd_andc(tmp3, tmp7);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp17);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(32), sequence_e2_86_adv));
                  r2000_2fff_tmp18 = simd_and(sequence_e2_86_adv, byte_83);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r2000_2fff_tmp18);
                  r2000_2fff_tmp19 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp20 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp19);
                  byte_92 = simd_and(r2000_2fff_tmp20, r2000_4dff_tmp2);
                  sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
                  r2000_2fff_tmp21 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp22 = simd_or(basis_bits.bit_4, r2000_2fff_tmp21);
                  byte_range_b6_bf = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp22);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_92, carryQ.get_carry_in(33), sequence_e2_92_adv));
                  r2000_2fff_tmp23 = simd_and(sequence_e2_92_adv, byte_range_b6_bf);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r2000_2fff_tmp23);
                  byte_93 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp17);
                  sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
                  byte_range_80_8f = r2000_2fff_tmp2;
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(34), sequence_e2_93_adv));
                  r2000_2fff_tmp24 = simd_and(sequence_e2_93_adv, byte_range_80_8f);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r2000_2fff_tmp24);
                  byte_b0 = simd_andc(r2000_2fff_tmp11, tmp9);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  r2000_2fff_tmp25 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp26 = simd_and(r2000_2fff_tmp25, tmp3);
                  r2000_2fff_tmp27 = simd_or(basis_bits.bit_3, r2000_2fff_tmp26);
                  r2000_2fff_tmp28 = simd_and(basis_bits.bit_2, r2000_2fff_tmp27);
                  byte_range_80_ae = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp28);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(35), sequence_e2_b0_adv));
                  r2000_2fff_tmp29 = simd_and(sequence_e2_b0_adv, byte_range_80_ae);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r2000_2fff_tmp29);
                  r2000_2fff_tmp30 = simd_andc(r2000_2fff_tmp14, tmp7);
                  byte_b1 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp30);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp31 = simd_andc(byte_range_a0_af, tmp9);
                  r2000_2fff_tmp32 = simd_andc(byte_range_a0_af, basis_bits.bit_4);
                  r2000_2fff_tmp33 = simd_not(tmp8);
                  r2000_2fff_tmp34 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp33), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r2000_2fff_tmp35 = simd_and(r2000_2fff_tmp32, r2000_2fff_tmp34);
                  r2000_2fff_tmp36 = simd_or(r2000_2fff_tmp31, r2000_2fff_tmp35);
                  r2000_2fff_tmp37 = simd_and(r800_ffff_tmp1, tmp3);
                  r2000_2fff_tmp38 = simd_and(byte_range_a0_af, r2000_2fff_tmp37);
                  r2000_2fff_tmp39 = simd_or(r2000_2fff_tmp36, r2000_2fff_tmp38);
                  r2000_2fff_tmp40 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp14);
                  r2000_2fff_tmp41 = simd_and(byte_range_a0_af, r2000_2fff_tmp40);
                  r2000_2fff_tmp42 = simd_or(r2000_2fff_tmp39, r2000_2fff_tmp41);
                  r2000_2fff_tmp43 = simd_and(r2000_2fff_tmp6, tmp3);
                  r2000_2fff_tmp44 = simd_and(byte_range_a0_af, r2000_2fff_tmp43);
                  r2000_2fff_tmp45 = simd_or(r2000_2fff_tmp42, r2000_2fff_tmp44);
                  r2000_2fff_tmp46 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp47 = simd_not(tmp9);
                  r2000_2fff_tmp48 = simd_and(r2000_2fff_tmp25, tmp8);
                  r2000_2fff_tmp49 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp47), simd_andc(r2000_2fff_tmp48, basis_bits.bit_3));
                  r2000_2fff_tmp50 = simd_and(r2000_2fff_tmp46, r2000_2fff_tmp49);
                  r2000_2fff_tmp51 = simd_or(r2000_2fff_tmp45, r2000_2fff_tmp50);
                  r2000_2fff_tmp52 = simd_or(r2000_2fff_tmp51, r2000_2fff_tmp12);
                  r2000_2fff_tmp53 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp15);
                  r2000_2fff_tmp54 = simd_or(r2000_2fff_tmp52, r2000_2fff_tmp53);
                  r2000_2fff_tmp55 = simd_and(r2000_2fff_tmp25, basis_bits.bit_6);
                  r2000_2fff_tmp56 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp55);
                  cc_range_2c60_2c7e_3 = simd_or(r2000_2fff_tmp54, r2000_2fff_tmp56);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(36), sequence_e2_b1_adv));
                  r2000_2fff_tmp57 = simd_and(sequence_e2_b1_adv, cc_range_2c60_2c7e_3);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r2000_2fff_tmp57);
                  byte_b2 = r2000_2fff_tmp12;
                  sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
                  cc_range_2c80_2cbe_3 = simd_andc(r800_ffff_tmp3, basis_bits.bit_7);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(37), sequence_e2_b2_adv));
                  r2000_2fff_tmp58 = simd_and(sequence_e2_b2_adv, cc_range_2c80_2cbe_3);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r2000_2fff_tmp58);
                  byte_b3 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp17);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp59 = simd_andc(tmp9, r2000_4dff_tmp2);
                  r2000_2fff_tmp60 = simd_andc(r2000_2fff_tmp59, r800_ffff_tmp2);
                  r2000_2fff_tmp61 = simd_andc(r2000_2fff_tmp60, r2000_2fff_tmp5);
                  r2000_2fff_tmp62 = simd_andc(r2000_2fff_tmp6, tmp8);
                  r2000_2fff_tmp63 = simd_andc(r2000_2fff_tmp61, r2000_2fff_tmp62);
                  r2000_2fff_tmp64 = simd_and(r2000_2fff_tmp6, r2000_4dff_tmp1);
                  r2000_2fff_tmp65 = simd_andc(r2000_2fff_tmp63, r2000_2fff_tmp64);
                  r2000_2fff_tmp66 = simd_andc(r2000_2fff_tmp25, tmp8);
                  r2000_2fff_tmp67 = simd_andc(r2000_2fff_tmp65, r2000_2fff_tmp66);
                  r2000_2fff_tmp68 = simd_and(r2000_2fff_tmp25, r2000_4dff_tmp1);
                  r2000_2fff_tmp69 = simd_andc(r2000_2fff_tmp67, r2000_2fff_tmp68);
                  r2000_2fff_tmp70 = simd_andc(byte_range_80_8f, r2000_2fff_tmp69);
                  r2000_2fff_tmp71 = simd_andc(r2000_2fff_tmp20, tmp9);
                  r2000_2fff_tmp72 = simd_or(r2000_2fff_tmp70, r2000_2fff_tmp71);
                  r2000_2fff_tmp73 = simd_or(r2000_2fff_tmp72, byte_92);
                  r2000_2fff_tmp74 = simd_and(r2000_2fff_tmp20, r800_ffff_tmp2);
                  r2000_2fff_tmp75 = simd_or(r2000_2fff_tmp73, r2000_2fff_tmp74);
                  r2000_2fff_tmp76 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp5);
                  r2000_2fff_tmp77 = simd_or(r2000_2fff_tmp75, r2000_2fff_tmp76);
                  r2000_2fff_tmp78 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp62);
                  r2000_2fff_tmp79 = simd_or(r2000_2fff_tmp77, r2000_2fff_tmp78);
                  r2000_2fff_tmp80 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp64);
                  r2000_2fff_tmp81 = simd_or(r2000_2fff_tmp79, r2000_2fff_tmp80);
                  r2000_2fff_tmp82 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp66);
                  r2000_2fff_tmp83 = simd_or(r2000_2fff_tmp81, r2000_2fff_tmp82);
                  r2000_2fff_tmp84 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp68);
                  r2000_2fff_tmp85 = simd_or(r2000_2fff_tmp83, r2000_2fff_tmp84);
                  r2000_2fff_tmp86 = simd_or(r2000_2fff_tmp85, r2000_2fff_tmp31);
                  r2000_2fff_tmp87 = simd_and(byte_range_a0_af, r2000_4dff_tmp2);
                  r2000_2fff_tmp88 = simd_or(r2000_2fff_tmp86, r2000_2fff_tmp87);
                  r2000_2fff_tmp89 = simd_or(r2000_2fff_tmp88, r2000_2fff_tmp44);
                  r2000_2fff_tmp90 = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp14);
                  r2000_2fff_tmp91 = simd_and(byte_range_a0_af, r2000_2fff_tmp90);
                  r2000_2fff_tmp92 = simd_or(r2000_2fff_tmp89, r2000_2fff_tmp91);
                  cc_range_2cc0_2cf2_3 = simd_or(r2000_2fff_tmp92, byte_b2);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(38), sequence_e2_b3_adv));
                  r2000_2fff_tmp93 = simd_and(sequence_e2_b3_adv, cc_range_2cc0_2cf2_3);
                  struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r2000_2fff_tmp93);
                }
                else {
                  carryQ.CarryDequeueEnqueue(29, 10);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(29, 10);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(18, 21);
            }
            r800_ffff_tmp9 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp9, r800_ffff_tmp10);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(39, 8))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_99 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[39] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(39), ra000_ffff_tmp8));
              sequence_ea_99 = simd_and(ra000_ffff_tmp8, byte_99);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp9, basis_bits.bit_6);
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_3, ra000_ffff_tmp10);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_2, ra000_ffff_tmp11);
              ra000_ffff_tmp13 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp12);
              cc_range_a640_a66c_3 = simd_andc(ra000_ffff_tmp13, basis_bits.bit_7);
              carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(40), sequence_ea_99_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ea_99_adv, cc_range_a640_a66c_3);
              struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, ra000_ffff_tmp14);
              byte_9a = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp15 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp16 = simd_and(basis_bits.bit_3, ra000_ffff_tmp9);
              ra000_ffff_tmp17 = simd_andc(ra000_ffff_tmp15, ra000_ffff_tmp16);
              cc_range_a680_a69a_3 = simd_andc(ra000_ffff_tmp17, basis_bits.bit_7);
              carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(41), sequence_ea_9a_adv));
              ra000_ffff_tmp18 = simd_and(sequence_ea_9a_adv, cc_range_a680_a69a_3);
              struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, ra000_ffff_tmp18);
              ra000_ffff_tmp19 = simd_andc(ra000_ffff_tmp9, tmp8);
              byte_9c = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp19);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              ra000_ffff_tmp20 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
              ra000_ffff_tmp21 = simd_andc(ra000_ffff_tmp2, tmp7);
              ra000_ffff_tmp22 = simd_or(ra000_ffff_tmp21, r800_ffff_tmp2);
              ra000_ffff_tmp23 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp2);
              ra000_ffff_tmp24 = simd_or(ra000_ffff_tmp22, ra000_ffff_tmp23);
              ra000_ffff_tmp25 = simd_andc(ra000_ffff_tmp1, tmp8);
              ra000_ffff_tmp26 = simd_or(ra000_ffff_tmp24, ra000_ffff_tmp25);
              ra000_ffff_tmp27 = simd_or(ra000_ffff_tmp26, ra000_ffff_tmp3);
              ra000_ffff_tmp28 = simd_or(ra000_ffff_tmp27, ra000_ffff_tmp19);
              ra000_ffff_tmp29 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp2);
              ra000_ffff_tmp30 = simd_or(ra000_ffff_tmp28, ra000_ffff_tmp29);
              ra000_ffff_tmp31 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp30);
              ra000_ffff_tmp32 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp33 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp32);
              ra000_ffff_tmp34 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp21);
              ra000_ffff_tmp35 = simd_or(ra000_ffff_tmp31, ra000_ffff_tmp34);
              ra000_ffff_tmp36 = simd_and(ra000_ffff_tmp33, r800_ffff_tmp2);
              ra000_ffff_tmp37 = simd_or(ra000_ffff_tmp35, ra000_ffff_tmp36);
              ra000_ffff_tmp38 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp23);
              ra000_ffff_tmp39 = simd_or(ra000_ffff_tmp37, ra000_ffff_tmp38);
              ra000_ffff_tmp40 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp25);
              ra000_ffff_tmp41 = simd_or(ra000_ffff_tmp39, ra000_ffff_tmp40);
              ra000_ffff_tmp42 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp3);
              ra000_ffff_tmp43 = simd_or(ra000_ffff_tmp41, ra000_ffff_tmp42);
              ra000_ffff_tmp44 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp19);
              ra000_ffff_tmp45 = simd_or(ra000_ffff_tmp43, ra000_ffff_tmp44);
              ra000_ffff_tmp46 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp29);
              cc_range_a722_a73e_3 = simd_or(ra000_ffff_tmp45, ra000_ffff_tmp46);
              carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(42), sequence_ea_9c_adv));
              ra000_ffff_tmp47 = simd_and(sequence_ea_9c_adv, cc_range_a722_a73e_3);
              struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, ra000_ffff_tmp47);
              ra000_ffff_tmp48 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp6);
              byte_9d = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp48);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              ra000_ffff_tmp49 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp50 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp49);
              ra000_ffff_tmp51 = simd_andc(tmp9, ra000_ffff_tmp21);
              ra000_ffff_tmp52 = simd_andc(ra000_ffff_tmp51, r800_ffff_tmp2);
              ra000_ffff_tmp53 = simd_andc(ra000_ffff_tmp52, ra000_ffff_tmp23);
              ra000_ffff_tmp54 = simd_andc(ra000_ffff_tmp53, ra000_ffff_tmp25);
              ra000_ffff_tmp55 = simd_andc(ra000_ffff_tmp54, ra000_ffff_tmp3);
              ra000_ffff_tmp56 = simd_andc(ra000_ffff_tmp55, ra000_ffff_tmp19);
              ra000_ffff_tmp57 = simd_andc(ra000_ffff_tmp56, ra000_ffff_tmp29);
              ra000_ffff_tmp58 = simd_andc(ra000_ffff_tmp50, ra000_ffff_tmp57);
              ra000_ffff_tmp59 = simd_andc(ra000_ffff_tmp5, tmp9);
              ra000_ffff_tmp60 = simd_or(ra000_ffff_tmp58, ra000_ffff_tmp59);
              ra000_ffff_tmp61 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp21);
              ra000_ffff_tmp62 = simd_or(ra000_ffff_tmp60, ra000_ffff_tmp61);
              ra000_ffff_tmp63 = simd_and(ra000_ffff_tmp5, r800_ffff_tmp2);
              ra000_ffff_tmp64 = simd_or(ra000_ffff_tmp62, ra000_ffff_tmp63);
              ra000_ffff_tmp65 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp23);
              ra000_ffff_tmp66 = simd_or(ra000_ffff_tmp64, ra000_ffff_tmp65);
              ra000_ffff_tmp67 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp25);
              ra000_ffff_tmp68 = simd_or(ra000_ffff_tmp66, ra000_ffff_tmp67);
              ra000_ffff_tmp69 = simd_or(ra000_ffff_tmp68, byte_9a);
              ra000_ffff_tmp70 = simd_or(ra000_ffff_tmp69, byte_9c);
              ra000_ffff_tmp71 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp29);
              ra000_ffff_tmp72 = simd_or(ra000_ffff_tmp70, ra000_ffff_tmp71);
              ra000_ffff_tmp73 = simd_andc(ra000_ffff_tmp20, tmp9);
              ra000_ffff_tmp74 = simd_or(ra000_ffff_tmp72, ra000_ffff_tmp73);
              ra000_ffff_tmp75 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp21);
              ra000_ffff_tmp76 = simd_or(ra000_ffff_tmp74, ra000_ffff_tmp75);
              ra000_ffff_tmp77 = simd_and(ra000_ffff_tmp20, r800_ffff_tmp2);
              ra000_ffff_tmp78 = simd_or(ra000_ffff_tmp76, ra000_ffff_tmp77);
              ra000_ffff_tmp79 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp23);
              ra000_ffff_tmp80 = simd_or(ra000_ffff_tmp78, ra000_ffff_tmp79);
              ra000_ffff_tmp81 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp25);
              ra000_ffff_tmp82 = simd_or(ra000_ffff_tmp80, ra000_ffff_tmp81);
              ra000_ffff_tmp83 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp3);
              ra000_ffff_tmp84 = simd_or(ra000_ffff_tmp82, ra000_ffff_tmp83);
              ra000_ffff_tmp85 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp19);
              ra000_ffff_tmp86 = simd_or(ra000_ffff_tmp84, ra000_ffff_tmp85);
              ra000_ffff_tmp87 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp29);
              ra000_ffff_tmp88 = simd_or(ra000_ffff_tmp86, ra000_ffff_tmp87);
              ra000_ffff_tmp89 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp7);
              ra000_ffff_tmp90 = simd_or(ra000_ffff_tmp88, ra000_ffff_tmp89);
              ra000_ffff_tmp91 = simd_and(ra000_ffff_tmp1, tmp3);
              ra000_ffff_tmp92 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp91);
              ra000_ffff_tmp93 = simd_or(ra000_ffff_tmp90, ra000_ffff_tmp92);
              ra000_ffff_tmp94 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp9);
              ra000_ffff_tmp95 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp96 = simd_and(ra000_ffff_tmp94, ra000_ffff_tmp95);
              cc_range_a740_a77d_3 = simd_or(ra000_ffff_tmp93, ra000_ffff_tmp96);
              carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(43), sequence_ea_9d_adv));
              ra000_ffff_tmp97 = simd_and(sequence_ea_9d_adv, cc_range_a740_a77d_3);
              struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, ra000_ffff_tmp97);
              byte_9e = ra000_ffff_tmp71;
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp98 = simd_andc(ra000_ffff_tmp53, ra000_ffff_tmp91);
              ra000_ffff_tmp99 = simd_andc(ra000_ffff_tmp98, ra000_ffff_tmp48);
              ra000_ffff_tmp100 = simd_andc(ra000_ffff_tmp50, ra000_ffff_tmp99);
              ra000_ffff_tmp101 = simd_or(ra000_ffff_tmp100, ra000_ffff_tmp59);
              ra000_ffff_tmp102 = simd_or(ra000_ffff_tmp101, ra000_ffff_tmp61);
              ra000_ffff_tmp103 = simd_or(ra000_ffff_tmp102, ra000_ffff_tmp65);
              ra000_ffff_tmp104 = simd_or(ra000_ffff_tmp103, ra000_ffff_tmp67);
              ra000_ffff_tmp105 = simd_or(ra000_ffff_tmp104, byte_9a);
              ra000_ffff_tmp106 = simd_or(ra000_ffff_tmp105, byte_9c);
              ra000_ffff_tmp107 = simd_or(ra000_ffff_tmp106, byte_9e);
              ra000_ffff_tmp108 = simd_or(ra000_ffff_tmp107, ra000_ffff_tmp73);
              ra000_ffff_tmp109 = simd_or(ra000_ffff_tmp108, ra000_ffff_tmp75);
              ra000_ffff_tmp110 = simd_or(ra000_ffff_tmp109, ra000_ffff_tmp77);
              ra000_ffff_tmp111 = simd_or(ra000_ffff_tmp110, ra000_ffff_tmp79);
              ra000_ffff_tmp112 = simd_or(ra000_ffff_tmp111, ra000_ffff_tmp81);
              ra000_ffff_tmp113 = simd_and(ra000_ffff_tmp20, basis_bits.bit_4);
              ra000_ffff_tmp114 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp115 = simd_and(ra000_ffff_tmp113, ra000_ffff_tmp114);
              ra000_ffff_tmp116 = simd_or(ra000_ffff_tmp112, ra000_ffff_tmp115);
              ra000_ffff_tmp117 = simd_or(tmp7, basis_bits.bit_6);
              ra000_ffff_tmp118 = simd_andc(ra000_ffff_tmp33, ra000_ffff_tmp117);
              cc_range_a780_a7b0_3 = simd_or(ra000_ffff_tmp116, ra000_ffff_tmp118);
              carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(44), sequence_ea_9e_adv));
              ra000_ffff_tmp119 = simd_and(sequence_ea_9e_adv, cc_range_a780_a7b0_3);
              struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, ra000_ffff_tmp119);
              ra000_ffff_tmp120 = simd_and(ra000_ffff_tmp9, tmp3);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp120);
              byte_bc = ra000_ffff_tmp44;
              carryQ.cq[45] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(45), ra000_ffff_tmp121));
              sequence_ef_bc = simd_and(ra000_ffff_tmp121, byte_bc);
              byte_ef_adv = ra000_ffff_tmp121;
              ra000_ffff_tmp122 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
              byte_range_a1_ba = simd_and(ra000_ffff_tmp122, tmp10);
              carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(46), sequence_ef_bc_adv));
              ra000_ffff_tmp123 = simd_and(sequence_ef_bc_adv, byte_range_a1_ba);
              struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, ra000_ffff_tmp123);
            }
            else {
              carryQ.CarryDequeueEnqueue(39, 8);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(17, 30);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(47, 5))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp9);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp3 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_90 = simd_andc(r10000_10ffff_tmp3, tmp9);
            carryQ.cq[47] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(47), r10000_10ffff_tmp4));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp4, byte_90);
            byte_f0_adv = r10000_10ffff_tmp4;
            carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(48), r10000_10ffff_tmp5));
            sequence_f0_90_90 = simd_and(r10000_10ffff_tmp5, byte_90);
            sequence_f0_90_adv = r10000_10ffff_tmp5;
            r10000_10ffff_tmp6 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp6);
            byte_range_80_a7 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp7);
            carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_f0_90_90, carryQ.get_carry_in(49), sequence_f0_90_90_adv));
            r10000_10ffff_tmp8 = simd_and(sequence_f0_90_90_adv, byte_range_80_a7);
            struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r10000_10ffff_tmp8);
            r10000_10ffff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp10 = simd_andc(r10000_10ffff_tmp9, tmp7);
            byte_91 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp10);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp1, r80_10ffff_tmp1);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, tmp7);
            byte_a2 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(50), r10000_10ffff_tmp14));
            sequence_f0_91_a2 = simd_and(r10000_10ffff_tmp14, byte_a2);
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp1, basis_bits.bit_2);
            carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(51), sequence_f0_91_a2_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_91_a2_adv, byte_range_a0_bf);
            struct_cwl_Y.cc = simd_or(struct_cwl_Y.cc, r10000_10ffff_tmp15);
          }
          else {
            carryQ.CarryDequeueEnqueue(47, 5);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 52);
        }
        carryQ.CarryQ_Adjust(52);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<52, 0> carryQ;
  };

  struct Property_cwcm_Y {
  Property_cwcm_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_cwcm_Y & struct_cwcm_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9;
		BitBlock cc_range_41_61_1, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, byte_c2, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock byte_b5, byte_c2_adv, r80_7ff_tmp11, r80_7ff_tmp12, byte_c3;
		BitBlock r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16;
		BitBlock r80_7ff_tmp17, r80_7ff_tmp18, r80_7ff_tmp19, r80_7ff_tmp20;
		BitBlock r80_7ff_tmp21, r80_7ff_tmp22, r80_7ff_tmp23, cc_range_c0_f8_2;
		BitBlock byte_c3_adv, r80_7ff_tmp24, byte_range_c4_cf, r100_3ff_tmp1;
		BitBlock byte_range_c4_cb, r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3;
		BitBlock byte_range_c4_c8, r100_2ff_tmp4, r100_2ff_tmp5, byte_c9;
		BitBlock byte_range_80_8f, r100_2ff_tmp6, r100_2ff_tmp7, r100_2ff_tmp8;
		BitBlock r100_24f_tmp1, byte_range_c4_c5, r100_17f_tmp1, byte_c4;
		BitBlock r100_17f_tmp2, r100_17f_tmp3, r100_17f_tmp4, cc_range_100_139_2;
		BitBlock byte_c4_adv, r100_17f_tmp5, byte_c5, byte_range_80_bf, byte_c5_adv;
		BitBlock r100_17f_tmp6, r100_24f_tmp2, r100_24f_tmp3, byte_range_c6_c8;
		BitBlock r100_24f_tmp4, r180_24f_tmp1, byte_c6, r180_24f_tmp2, r180_24f_tmp3;
		BitBlock r180_24f_tmp4, r180_24f_tmp5, r180_24f_tmp6, r180_24f_tmp7;
		BitBlock r180_24f_tmp8, r180_24f_tmp9, r180_24f_tmp10, r180_24f_tmp11;
		BitBlock r180_24f_tmp12, r180_24f_tmp13, r180_24f_tmp14, r180_24f_tmp15;
		BitBlock r180_24f_tmp16, r180_24f_tmp17, r180_24f_tmp18, r180_24f_tmp19;
		BitBlock r180_24f_tmp20, r180_24f_tmp21, r180_24f_tmp22, r180_24f_tmp23;
		BitBlock r180_24f_tmp24, r180_24f_tmp25, r180_24f_tmp26, r180_24f_tmp27;
		BitBlock cc_range_180_1bf_2, byte_c6_adv, r180_24f_tmp28, r180_24f_tmp29;
		BitBlock byte_c7, r180_24f_tmp30, r180_24f_tmp31, byte_range_84_bf;
		BitBlock byte_c7_adv, r180_24f_tmp32, r180_24f_tmp33, byte_c8, r180_24f_tmp34;
		BitBlock r180_24f_tmp35, r180_24f_tmp36, r180_24f_tmp37, r180_24f_tmp38;
		BitBlock r180_24f_tmp39, r180_24f_tmp40, r180_24f_tmp41, r180_24f_tmp42;
		BitBlock cc_range_200_23a_2, byte_c8_adv, r180_24f_tmp43, byte_c9_adv;
		BitBlock r180_24f_tmp44, byte_range_90_bf, r100_2ff_tmp9, r100_2ff_tmp10;
		BitBlock byte_ca, byte_range_80_af, r100_2ff_tmp11, r100_2ff_tmp12;
		BitBlock r100_2ff_tmp13, r250_2af_tmp1, r250_2af_tmp2, r250_2af_tmp3;
		BitBlock r250_2af_tmp4, r250_2af_tmp5, r250_2af_tmp6, r250_2af_tmp7;
		BitBlock r250_2af_tmp8, r250_2af_tmp9, r250_2af_tmp10, r250_2af_tmp11;
		BitBlock r250_2af_tmp12, r250_2af_tmp13, r250_2af_tmp14, r250_2af_tmp15;
		BitBlock r250_2af_tmp16, r250_2af_tmp17, r250_2af_tmp18, r250_2af_tmp19;
		BitBlock r250_2af_tmp20, r250_2af_tmp21, r250_2af_tmp22, r250_2af_tmp23;
		BitBlock r250_2af_tmp24, r250_2af_tmp25, r250_2af_tmp26, r250_2af_tmp27;
		BitBlock r250_2af_tmp28, r250_2af_tmp29, r250_2af_tmp30, r250_2af_tmp31;
		BitBlock r250_2af_tmp32, r250_2af_tmp33, r250_2af_tmp34, r250_2af_tmp35;
		BitBlock r250_2af_tmp36, r250_2af_tmp37, r250_2af_tmp38, r250_2af_tmp39;
		BitBlock r250_2af_tmp40, r250_2af_tmp41, r250_2af_tmp42, cc_range_250_27d_2;
		BitBlock r250_2af_tmp43, r250_2af_tmp44, r250_2af_tmp45, r250_2af_tmp46;
		BitBlock r250_2af_tmp47, r250_2af_tmp48, r250_2af_tmp49, r250_2af_tmp50;
		BitBlock r250_2af_tmp51, r250_2af_tmp52, cc_range_280_29e_2, byte_ca_adv;
		BitBlock r250_2af_tmp53, r100_3ff_tmp2, r100_3ff_tmp3, byte_cc, r100_3ff_tmp4;
		BitBlock byte_cd, r100_3ff_tmp5, r100_3ff_tmp6, r100_3ff_tmp7, r300_36f_tmp1;
		BitBlock byte_85, byte_cd_adv, r300_36f_tmp2, byte_range_b0_bf, r100_3ff_tmp8;
		BitBlock r100_3ff_tmp9, byte_range_ce_cf, r100_3ff_tmp10, r370_3ff_tmp1;
		BitBlock r370_3ff_tmp2, r370_3ff_tmp3, r370_3ff_tmp4, r370_3ff_tmp5;
		BitBlock r370_3ff_tmp6, r370_3ff_tmp7, r370_3ff_tmp8, r370_3ff_tmp9;
		BitBlock r370_3ff_tmp10, cc_range_370_37f_2, r370_3ff_tmp11, r370_3ff_tmp12;
		BitBlock byte_ce, r370_3ff_tmp13, r370_3ff_tmp14, r370_3ff_tmp15;
		BitBlock r370_3ff_tmp16, r370_3ff_tmp17, r370_3ff_tmp18, r370_3ff_tmp19;
		BitBlock r370_3ff_tmp20, r370_3ff_tmp21, r370_3ff_tmp22, r370_3ff_tmp23;
		BitBlock r370_3ff_tmp24, r370_3ff_tmp25, r370_3ff_tmp26, r370_3ff_tmp27;
		BitBlock r370_3ff_tmp28, r370_3ff_tmp29, r370_3ff_tmp30, r370_3ff_tmp31;
		BitBlock r370_3ff_tmp32, cc_range_386_3a3_2, byte_ce_adv, r370_3ff_tmp33;
		BitBlock byte_cf, r370_3ff_tmp34, r370_3ff_tmp35, r370_3ff_tmp36;
		BitBlock r370_3ff_tmp37, r370_3ff_tmp38, r370_3ff_tmp39, r370_3ff_tmp40;
		BitBlock r370_3ff_tmp41, r370_3ff_tmp42, r370_3ff_tmp43, r370_3ff_tmp44;
		BitBlock r370_3ff_tmp45, r370_3ff_tmp46, r370_3ff_tmp47, r370_3ff_tmp48;
		BitBlock r370_3ff_tmp49, r370_3ff_tmp50, r370_3ff_tmp51, cc_range_3c0_3fd_2;
		BitBlock byte_cf_adv, r370_3ff_tmp52, r80_7ff_tmp25, r80_7ff_tmp26;
		BitBlock byte_range_d0_d7, byte_range_d0_d3, r400_4ff_tmp1, byte_range_d0_d1;
		BitBlock r400_4ff_tmp2, byte_range_d0_d1_sfx, byte_d2, r400_4ff_tmp3;
		BitBlock byte_range_80_81, r400_4ff_tmp4, byte_d2_byte_range_80_81, byte_d3;
		BitBlock r400_4ff_tmp5, byte_d3_byte_range_80_bf, r400_5ff_tmp1;
		BitBlock byte_range_d4_d5, r400_5ff_tmp2, byte_d6, r400_5ff_tmp3;
		BitBlock r400_5ff_tmp4, r400_5ff_tmp5, r500_58f_tmp1, byte_d4, r500_58f_tmp2;
		BitBlock r500_58f_tmp3, byte_d4_adv, r500_52f_tmp1, r500_58f_tmp4, byte_d5;
		BitBlock r500_58f_tmp5, r500_58f_tmp6, r530_58f_tmp1, r530_58f_tmp2;
		BitBlock byte_range_b1_bf, r530_58f_tmp3, r530_58f_tmp4, r530_58f_tmp5;
		BitBlock r530_58f_tmp6, cc_range_540_561_2, byte_d5_adv, r530_58f_tmp7;
		BitBlock byte_range_80_87, byte_d6_adv, r530_58f_tmp8, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, byte_range_e0_e3, r800_ffff_tmp1, r800_ffff_tmp2;
		BitBlock byte_e4, r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock byte_range_80_b7, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_82, r1000_1fff_tmp5, sequence_e1_82;
		BitBlock byte_e1_adv, byte_range_a0_bf, sequence_e1_82_adv, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, byte_83, sequence_e1_83, r1000_1fff_tmp8;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, r1000_1fff_tmp14, r1000_1fff_tmp15;
		BitBlock r1000_1fff_tmp16, cc_range_10c0_10cd_3, sequence_e1_83_adv;
		BitBlock r1000_1fff_tmp17, r1000_1fff_tmp18, r1000_1fff_tmp19;
		BitBlock r1000_1fff_tmp20, sequence_e1_b5, r1000_1fff_tmp21;
		BitBlock cc_range_1d79_1d7d_3, sequence_e1_b5_adv, r1000_1fff_tmp22;
		BitBlock r1000_1fff_tmp23, r1000_1fff_tmp24, byte_range_b8_b9;
		BitBlock byte_e1_byte_range_b8_b9, r1000_1fff_tmp25;
		BitBlock byte_e1_byte_range_b8_b9_sfx, r1000_1fff_tmp26, r1000_1fff_tmp27;
		BitBlock byte_ba, sequence_e1_ba, r1000_1fff_tmp28, r1000_1fff_tmp29;
		BitBlock byte_range_80_9b, r1000_1fff_tmp30, sequence_e1_ba_byte_range_80_9b;
		BitBlock r1000_1fff_tmp31, byte_bb, sequence_e1_bb, r1000_1fff_tmp32;
		BitBlock sequence_e1_bb_byte_range_80_bf, r1000_1fff_tmp33, byte_bc;
		BitBlock sequence_e1_bc, r1000_1fff_tmp34, r1000_1fff_tmp35, byte_range_80_95;
		BitBlock r1000_1fff_tmp36, sequence_e1_bc_byte_range_80_95, byte_bd;
		BitBlock sequence_e1_bd, r1000_1fff_tmp37, r1000_1fff_tmp38, byte_range_80_85;
		BitBlock r1000_1fff_tmp39, sequence_e1_bd_byte_range_80_85, r1000_1fff_tmp40;
		BitBlock byte_be, sequence_e1_be, r1000_1fff_tmp41, r1000_1fff_tmp42;
		BitBlock r1000_1fff_tmp43, r1000_1fff_tmp44, byte_range_80_b4;
		BitBlock r1000_1fff_tmp45, sequence_e1_be_byte_range_80_b4, r1000_1fff_tmp46;
		BitBlock byte_bf, sequence_e1_bf, r1000_1fff_tmp47, r1000_1fff_tmp48;
		BitBlock byte_range_82_84, r1000_1fff_tmp49, sequence_e1_bf_byte_range_82_84;
		BitBlock r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, byte_84;
		BitBlock r2000_2fff_tmp3, sequence_e2_84, byte_e2_adv, r2000_2fff_tmp4;
		BitBlock r2000_2fff_tmp5, r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8;
		BitBlock r2000_2fff_tmp9, r2000_2fff_tmp10, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock cc_range_2126_2132_3, sequence_e2_84_adv, r2000_2fff_tmp13;
		BitBlock r2000_2fff_tmp14, r2000_2fff_tmp15, sequence_e2_85, r2000_2fff_tmp16;
		BitBlock r2000_2fff_tmp17, r2000_2fff_tmp18, r2000_2fff_tmp19;
		BitBlock cc_range_214e_2160_3, sequence_e2_85_adv, r2000_2fff_tmp20, byte_86;
		BitBlock sequence_e2_86, r2000_2fff_tmp21, r2000_2fff_tmp22, r2000_2fff_tmp23;
		BitBlock byte_range_83_84, sequence_e2_86_adv, r2000_2fff_tmp24;
		BitBlock r2000_2fff_tmp25, r2000_2fff_tmp26, byte_92, sequence_e2_92;
		BitBlock r2000_2fff_tmp27, r2000_2fff_tmp28, byte_range_b6_bf;
		BitBlock sequence_e2_92_adv, r2000_2fff_tmp29, r2000_2fff_tmp30, byte_93;
		BitBlock sequence_e2_93, r2000_2fff_tmp31, r2000_2fff_tmp32, r2000_2fff_tmp33;
		BitBlock r2000_2fff_tmp34, byte_range_80_a9, sequence_e2_93_adv;
		BitBlock r2000_2fff_tmp35, byte_b0, sequence_e2_b0, r2000_2fff_tmp36;
		BitBlock r2000_2fff_tmp37, r2000_2fff_tmp38, r2000_2fff_tmp39;
		BitBlock cc_range_2c00_2c30_3, sequence_e2_b0_adv, r2000_2fff_tmp40;
		BitBlock r2000_2fff_tmp41, byte_b1, sequence_e2_b1, r2000_2fff_tmp42;
		BitBlock r2000_2fff_tmp43, r2000_2fff_tmp44, r2000_2fff_tmp45;
		BitBlock r2000_2fff_tmp46, r2000_2fff_tmp47, r2000_2fff_tmp48;
		BitBlock r2000_2fff_tmp49, r2000_2fff_tmp50, r2000_2fff_tmp51;
		BitBlock r2000_2fff_tmp52, r2000_2fff_tmp53, r2000_2fff_tmp54;
		BitBlock r2000_2fff_tmp55, cc_range_2c40_2c7e_3, sequence_e2_b1_adv;
		BitBlock r2000_2fff_tmp56, byte_b2, sequence_e2_b2, sequence_e2_b2_adv;
		BitBlock r2000_2fff_tmp57, r2000_2fff_tmp58, byte_b3, sequence_e2_b3;
		BitBlock r2000_2fff_tmp59, r2000_2fff_tmp60, r2000_2fff_tmp61;
		BitBlock r2000_2fff_tmp62, r2000_2fff_tmp63, r2000_2fff_tmp64;
		BitBlock r2000_2fff_tmp65, r2000_2fff_tmp66, r2000_2fff_tmp67;
		BitBlock cc_range_2cc0_2cf2_3, sequence_e2_b3_adv, r2000_2fff_tmp68, byte_b4;
		BitBlock sequence_e2_b4, r2000_2fff_tmp69, r2000_2fff_tmp70, r2000_2fff_tmp71;
		BitBlock r2000_2fff_tmp72, r2000_2fff_tmp73, r2000_2fff_tmp74;
		BitBlock r2000_2fff_tmp75, r2000_2fff_tmp76, cc_range_2d00_2d2d_3;
		BitBlock sequence_e2_b4_adv, r2000_2fff_tmp77, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6;
		BitBlock ra000_ffff_tmp7, byte_99, ra000_ffff_tmp8, sequence_ea_99;
		BitBlock byte_ea_adv, ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, byte_range_80_ad, sequence_ea_99_adv;
		BitBlock ra000_ffff_tmp13, byte_9a, sequence_ea_9a, ra000_ffff_tmp14;
		BitBlock ra000_ffff_tmp15, sequence_ea_9a_adv, ra000_ffff_tmp16;
		BitBlock ra000_ffff_tmp17, byte_9c, sequence_ea_9c, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, cc_range_a722_a732_3, sequence_ea_9c_adv;
		BitBlock ra000_ffff_tmp20, ra000_ffff_tmp21, byte_9d, sequence_ea_9d;
		BitBlock ra000_ffff_tmp22, ra000_ffff_tmp23, ra000_ffff_tmp24;
		BitBlock ra000_ffff_tmp25, ra000_ffff_tmp26, ra000_ffff_tmp27;
		BitBlock cc_range_a740_a779_3, sequence_ea_9d_adv, ra000_ffff_tmp28;
		BitBlock ra000_ffff_tmp29, byte_9e, sequence_ea_9e, ra000_ffff_tmp30;
		BitBlock ra000_ffff_tmp31, ra000_ffff_tmp32, ra000_ffff_tmp33;
		BitBlock ra000_ffff_tmp34, ra000_ffff_tmp35, ra000_ffff_tmp36;
		BitBlock ra000_ffff_tmp37, ra000_ffff_tmp38, ra000_ffff_tmp39;
		BitBlock ra000_ffff_tmp40, ra000_ffff_tmp41, ra000_ffff_tmp42;
		BitBlock ra000_ffff_tmp43, ra000_ffff_tmp44, ra000_ffff_tmp45;
		BitBlock ra000_ffff_tmp46, ra000_ffff_tmp47, ra000_ffff_tmp48;
		BitBlock cc_range_a780_a7b0_3, sequence_ea_9e_adv, ra000_ffff_tmp49;
		BitBlock ra000_ffff_tmp50, byte_ef, ra000_ffff_tmp51, byte_ac;
		BitBlock ra000_ffff_tmp52, sequence_ef_ac, byte_ef_adv, ra000_ffff_tmp53;
		BitBlock ra000_ffff_tmp54, ra000_ffff_tmp55, ra000_ffff_tmp56;
		BitBlock cc_range_fb00_fb13_3, sequence_ef_ac_adv, ra000_ffff_tmp57;
		BitBlock sequence_ef_bc, byte_range_a1_ba, sequence_ef_bc_adv;
		BitBlock ra000_ffff_tmp58, sequence_ef_bd, byte_range_81_9a;
		BitBlock sequence_ef_bd_adv, ra000_ffff_tmp59, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, byte_f0, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_90, r10000_10ffff_tmp4, sequence_f0_90;
		BitBlock byte_f0_adv, r10000_10ffff_tmp5, sequence_f0_90_90;
		BitBlock sequence_f0_90_adv, sequence_f0_90_90_adv, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_91;
		BitBlock sequence_f0_90_91, r10000_10ffff_tmp10, sequence_f0_90_91_adv;
		BitBlock r10000_10ffff_tmp11, sequence_f0_91, r10000_10ffff_tmp12;
		BitBlock r10000_10ffff_tmp13, r10000_10ffff_tmp14, byte_a2;
		BitBlock r10000_10ffff_tmp15, sequence_f0_91_a2, sequence_f0_91_adv;
		BitBlock sequence_f0_91_a2_adv, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock byte_a3, sequence_f0_91_a3, byte_range_80_9f, sequence_f0_91_a3_adv;
		BitBlock r10000_10ffff_tmp18;




        struct_cwcm_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp2 = simd_or(basis_bits.bit_5, tmp1);
        tmp3 = simd_and(basis_bits.bit_4, tmp2);
        tmp4 = simd_not(tmp3);
        tmp5 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp7 = simd_or(tmp5, tmp6);
        tmp8 = simd_or(simd_and(basis_bits.bit_3, tmp4), simd_andc(tmp7, basis_bits.bit_3));
        tmp9 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        cc_range_41_61_1 = simd_and(tmp8, tmp9);
        struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, cc_range_41_61_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 58))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 18))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, tmp5);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp10 = simd_and(r80_7ff_tmp8, r80_7ff_tmp9);
            byte_b5 = simd_and(r80_7ff_tmp7, r80_7ff_tmp10);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp11 = simd_and(byte_c2_adv, byte_b5);
            struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r80_7ff_tmp11);
            r80_7ff_tmp12 = simd_andc(tmp1, tmp5);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp12);
            r80_7ff_tmp13 = simd_andc(r80_7ff_tmp5, basis_bits.bit_2);
            r80_7ff_tmp14 = simd_and(basis_bits.bit_5, tmp1);
            r80_7ff_tmp15 = simd_or(basis_bits.bit_4, r80_7ff_tmp14);
            r80_7ff_tmp16 = simd_and(basis_bits.bit_3, r80_7ff_tmp15);
            r80_7ff_tmp17 = simd_andc(r80_7ff_tmp13, r80_7ff_tmp16);
            r80_7ff_tmp18 = simd_not(r80_7ff_tmp16);
            r80_7ff_tmp19 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r80_7ff_tmp20 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp18), simd_andc(r80_7ff_tmp19, basis_bits.bit_2));
            r80_7ff_tmp21 = simd_and(r80_7ff_tmp5, r80_7ff_tmp20);
            r80_7ff_tmp22 = simd_or(r80_7ff_tmp17, r80_7ff_tmp21);
            r80_7ff_tmp23 = simd_and(r80_7ff_tmp7, basis_bits.bit_4);
            cc_range_c0_f8_2 = simd_or(r80_7ff_tmp22, r80_7ff_tmp23);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp24 = simd_and(byte_c3_adv, cc_range_c0_f8_2);
            struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r80_7ff_tmp24);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp5);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 10))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(2, 7))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_5, tmp6);
                r100_2ff_tmp2 = simd_not(r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp5 = simd_and(r100_2ff_tmp4, r80_7ff_tmp9);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp5);
                byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(2), r100_2ff_tmp6));
                r100_2ff_tmp7 = simd_and(r100_2ff_tmp6, byte_range_80_8f);
                r100_2ff_tmp8 = simd_or(byte_range_c4_c8, r100_2ff_tmp7);
                if ((bitblock::any(r100_2ff_tmp8) || carryQ.CarryTest(3, 5))) {
                  r100_24f_tmp1 = simd_andc(r80_7ff_tmp8, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp1);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(3, 2))) {
                    r100_17f_tmp1 = simd_andc(r80_7ff_tmp8, tmp6);
                    byte_c4 = simd_and(r80_7ff_tmp2, r100_17f_tmp1);
                    r100_17f_tmp2 = simd_and(basis_bits.bit_2, r80_7ff_tmp19);
                    r100_17f_tmp3 = simd_andc(r80_7ff_tmp5, r100_17f_tmp2);
                    r100_17f_tmp4 = simd_and(r80_7ff_tmp23, r100_2ff_tmp1);
                    cc_range_100_139_2 = simd_or(r100_17f_tmp3, r100_17f_tmp4);
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_c4, carryQ.get_carry_in(3), byte_c4_adv));
                    r100_17f_tmp5 = simd_and(byte_c4_adv, cc_range_100_139_2);
                    struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r100_17f_tmp5);
                    byte_c5 = simd_and(r80_7ff_tmp2, r80_7ff_tmp10);
                    byte_range_80_bf = r80_7ff_tmp5;
                    carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_c5, carryQ.get_carry_in(4), byte_c5_adv));
                    r100_17f_tmp6 = simd_and(byte_c5_adv, byte_range_80_bf);
                    struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r100_17f_tmp6);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(3, 2);
                  }
                  r100_24f_tmp2 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r100_24f_tmp2, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp3);
                  r100_24f_tmp4 = simd_or(byte_range_c6_c8, r100_2ff_tmp7);
                  if ((bitblock::any(r100_24f_tmp4) || carryQ.CarryTest(5, 3))) {
                    r180_24f_tmp1 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
                    byte_c6 = simd_and(r80_7ff_tmp2, r180_24f_tmp1);
                    r180_24f_tmp2 = simd_and(basis_bits.bit_5, tmp6);
                    r180_24f_tmp3 = simd_and(basis_bits.bit_4, r180_24f_tmp2);
                    r180_24f_tmp4 = simd_andc(byte_range_80_8f, r180_24f_tmp3);
                    r180_24f_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                    r180_24f_tmp6 = simd_and(r180_24f_tmp5, basis_bits.bit_6);
                    r180_24f_tmp7 = simd_or(simd_and(basis_bits.bit_3, tmp4), simd_andc(r180_24f_tmp6, basis_bits.bit_3));
                    r180_24f_tmp8 = simd_and(r80_7ff_tmp13, r180_24f_tmp7);
                    r180_24f_tmp9 = simd_or(r180_24f_tmp4, r180_24f_tmp8);
                    r180_24f_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                    r180_24f_tmp11 = simd_and(basis_bits.bit_4, r180_24f_tmp10);
                    r180_24f_tmp12 = simd_or(basis_bits.bit_3, r180_24f_tmp11);
                    r180_24f_tmp13 = simd_not(r180_24f_tmp12);
                    r180_24f_tmp14 = simd_and(basis_bits.bit_3, r180_24f_tmp5);
                    r180_24f_tmp15 = simd_or(simd_and(basis_bits.bit_2, r180_24f_tmp13), simd_andc(r180_24f_tmp14, basis_bits.bit_2));
                    r180_24f_tmp16 = simd_and(r80_7ff_tmp5, r180_24f_tmp15);
                    r180_24f_tmp17 = simd_or(r180_24f_tmp9, r180_24f_tmp16);
                    r180_24f_tmp18 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                    r180_24f_tmp19 = simd_not(r180_24f_tmp11);
                    r180_24f_tmp20 = simd_or(simd_and(basis_bits.bit_3, r180_24f_tmp19), simd_andc(r180_24f_tmp5, basis_bits.bit_3));
                    r180_24f_tmp21 = simd_and(r180_24f_tmp18, r180_24f_tmp20);
                    r180_24f_tmp22 = simd_or(r180_24f_tmp17, r180_24f_tmp21);
                    r180_24f_tmp23 = simd_andc(r180_24f_tmp5, basis_bits.bit_6);
                    r180_24f_tmp24 = simd_and(r80_7ff_tmp7, r180_24f_tmp23);
                    r180_24f_tmp25 = simd_or(r180_24f_tmp22, r180_24f_tmp24);
                    r180_24f_tmp26 = simd_and(r180_24f_tmp5, tmp1);
                    r180_24f_tmp27 = simd_and(r80_7ff_tmp7, r180_24f_tmp26);
                    cc_range_180_1bf_2 = simd_or(r180_24f_tmp25, r180_24f_tmp27);
                    carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_c6, carryQ.get_carry_in(5), byte_c6_adv));
                    r180_24f_tmp28 = simd_and(byte_c6_adv, cc_range_180_1bf_2);
                    struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r180_24f_tmp28);
                    r180_24f_tmp29 = simd_and(r80_7ff_tmp8, tmp1);
                    byte_c7 = simd_and(r80_7ff_tmp2, r180_24f_tmp29);
                    r180_24f_tmp30 = simd_or(basis_bits.bit_3, tmp5);
                    r180_24f_tmp31 = simd_or(basis_bits.bit_2, r180_24f_tmp30);
                    byte_range_84_bf = simd_and(r80_7ff_tmp5, r180_24f_tmp31);
                    carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(6), byte_c7_adv));
                    r180_24f_tmp32 = simd_and(byte_c7_adv, byte_range_84_bf);
                    struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r180_24f_tmp32);
                    r180_24f_tmp33 = simd_andc(r100_2ff_tmp4, tmp6);
                    byte_c8 = simd_and(r80_7ff_tmp2, r180_24f_tmp33);
                    r180_24f_tmp34 = simd_or(basis_bits.bit_3, tmp7);
                    r180_24f_tmp35 = simd_and(basis_bits.bit_2, r180_24f_tmp34);
                    r180_24f_tmp36 = simd_andc(r80_7ff_tmp5, r180_24f_tmp35);
                    r180_24f_tmp37 = simd_not(tmp5);
                    r180_24f_tmp38 = simd_or(tmp5, basis_bits.bit_6);
                    r180_24f_tmp39 = simd_or(simd_and(basis_bits.bit_3, r180_24f_tmp37), simd_andc(r180_24f_tmp38, basis_bits.bit_3));
                    r180_24f_tmp40 = simd_and(r180_24f_tmp18, r180_24f_tmp39);
                    r180_24f_tmp41 = simd_or(r180_24f_tmp36, r180_24f_tmp40);
                    r180_24f_tmp42 = simd_and(r80_7ff_tmp23, r180_24f_tmp10);
                    cc_range_200_23a_2 = simd_or(r180_24f_tmp41, r180_24f_tmp42);
                    carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_c8, carryQ.get_carry_in(7), byte_c8_adv));
                    r180_24f_tmp43 = simd_and(byte_c8_adv, cc_range_200_23a_2);
                    struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r180_24f_tmp43);
                    byte_c9_adv = r100_2ff_tmp6;
                    r180_24f_tmp44 = simd_and(byte_c9_adv, byte_range_80_8f);
                    struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r180_24f_tmp44);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(5, 3);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 5);
                }
                byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
                r100_2ff_tmp9 = simd_and(r100_2ff_tmp6, byte_range_90_bf);
                r100_2ff_tmp10 = simd_and(r100_2ff_tmp4, r80_7ff_tmp3);
                byte_ca = simd_and(r80_7ff_tmp2, r100_2ff_tmp10);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp6);
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(8), r100_2ff_tmp11));
                r100_2ff_tmp12 = simd_and(r100_2ff_tmp11, byte_range_80_af);
                r100_2ff_tmp13 = simd_or(r100_2ff_tmp9, r100_2ff_tmp12);
                if (bitblock::any(r100_2ff_tmp13)) {
                  r250_2af_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r250_2af_tmp2 = simd_and(r80_7ff_tmp5, r250_2af_tmp1);
                  r250_2af_tmp3 = simd_andc(r250_2af_tmp2, basis_bits.bit_4);
                  r250_2af_tmp4 = simd_and(basis_bits.bit_5, tmp6);
                  r250_2af_tmp5 = simd_andc(r250_2af_tmp3, r250_2af_tmp4);
                  r250_2af_tmp6 = simd_and(r80_7ff_tmp8, basis_bits.bit_6);
                  r250_2af_tmp7 = simd_and(r250_2af_tmp2, r250_2af_tmp6);
                  r250_2af_tmp8 = simd_or(r250_2af_tmp5, r250_2af_tmp7);
                  r250_2af_tmp9 = simd_and(r250_2af_tmp2, r100_2ff_tmp5);
                  r250_2af_tmp10 = simd_or(r250_2af_tmp8, r250_2af_tmp9);
                  r250_2af_tmp11 = simd_and(r250_2af_tmp2, basis_bits.bit_4);
                  r250_2af_tmp12 = simd_not(tmp6);
                  r250_2af_tmp13 = simd_or(simd_and(basis_bits.bit_5, r250_2af_tmp12), simd_andc(tmp1, basis_bits.bit_5));
                  r250_2af_tmp14 = simd_and(r250_2af_tmp11, r250_2af_tmp13);
                  r250_2af_tmp15 = simd_or(r250_2af_tmp10, r250_2af_tmp14);
                  r250_2af_tmp16 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                  r250_2af_tmp17 = simd_and(r80_7ff_tmp5, r250_2af_tmp16);
                  r250_2af_tmp18 = simd_or(tmp5, basis_bits.bit_6);
                  r250_2af_tmp19 = simd_andc(r250_2af_tmp17, r250_2af_tmp18);
                  r250_2af_tmp20 = simd_or(r250_2af_tmp15, r250_2af_tmp19);
                  r250_2af_tmp21 = simd_and(r250_2af_tmp17, r80_7ff_tmp12);
                  r250_2af_tmp22 = simd_or(r250_2af_tmp20, r250_2af_tmp21);
                  r250_2af_tmp23 = simd_and(r250_2af_tmp17, r80_7ff_tmp8);
                  r250_2af_tmp24 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r250_2af_tmp25 = simd_and(r250_2af_tmp23, r250_2af_tmp24);
                  r250_2af_tmp26 = simd_or(r250_2af_tmp22, r250_2af_tmp25);
                  r250_2af_tmp27 = simd_andc(r100_2ff_tmp4, basis_bits.bit_6);
                  r250_2af_tmp28 = simd_and(r250_2af_tmp17, r250_2af_tmp27);
                  r250_2af_tmp29 = simd_or(r250_2af_tmp26, r250_2af_tmp28);
                  r250_2af_tmp30 = simd_and(r250_2af_tmp17, basis_bits.bit_4);
                  r250_2af_tmp31 = simd_and(r250_2af_tmp30, r250_2af_tmp13);
                  r250_2af_tmp32 = simd_or(r250_2af_tmp29, r250_2af_tmp31);
                  r250_2af_tmp33 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r250_2af_tmp34 = simd_and(r250_2af_tmp33, tmp1);
                  r250_2af_tmp35 = simd_and(r250_2af_tmp17, r250_2af_tmp34);
                  r250_2af_tmp36 = simd_or(r250_2af_tmp32, r250_2af_tmp35);
                  r250_2af_tmp37 = simd_andc(r80_7ff_tmp7, tmp5);
                  r250_2af_tmp38 = simd_and(r250_2af_tmp37, r250_2af_tmp24);
                  r250_2af_tmp39 = simd_or(r250_2af_tmp36, r250_2af_tmp38);
                  r250_2af_tmp40 = simd_or(r250_2af_tmp39, byte_b5);
                  r250_2af_tmp41 = simd_and(r250_2af_tmp33, r80_7ff_tmp9);
                  r250_2af_tmp42 = simd_and(r80_7ff_tmp7, r250_2af_tmp41);
                  cc_range_250_27d_2 = simd_or(r250_2af_tmp40, r250_2af_tmp42);
                  byte_c9_adv = r100_2ff_tmp6;
                  r250_2af_tmp43 = simd_and(byte_c9_adv, cc_range_250_27d_2);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r250_2af_tmp43);
                  r250_2af_tmp44 = simd_andc(tmp7, r80_7ff_tmp12);
                  r250_2af_tmp45 = simd_not(r250_2af_tmp4);
                  r250_2af_tmp46 = simd_or(simd_and(basis_bits.bit_4, r250_2af_tmp45), simd_andc(r80_7ff_tmp14, basis_bits.bit_4));
                  r250_2af_tmp47 = simd_andc(r250_2af_tmp44, r250_2af_tmp46);
                  r250_2af_tmp48 = simd_andc(byte_range_80_8f, r250_2af_tmp47);
                  r250_2af_tmp49 = simd_and(r250_2af_tmp2, r80_7ff_tmp4);
                  r250_2af_tmp50 = simd_or(r250_2af_tmp48, r250_2af_tmp49);
                  r250_2af_tmp51 = simd_and(r250_2af_tmp33, r80_7ff_tmp3);
                  r250_2af_tmp52 = simd_and(r250_2af_tmp2, r250_2af_tmp51);
                  cc_range_280_29e_2 = simd_or(r250_2af_tmp50, r250_2af_tmp52);
                  byte_ca_adv = r100_2ff_tmp11;
                  r250_2af_tmp53 = simd_and(byte_ca_adv, cc_range_280_29e_2);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r250_2af_tmp53);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 7);
              }
              r100_3ff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp3 = simd_andc(r100_3ff_tmp2, tmp6);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              r100_3ff_tmp4 = simd_and(r100_3ff_tmp2, r80_7ff_tmp9);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp4);
              byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp6);
              carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(9), r100_3ff_tmp5));
              r100_3ff_tmp6 = simd_and(r100_3ff_tmp5, byte_range_80_af);
              r100_3ff_tmp7 = simd_or(byte_cc, r100_3ff_tmp6);
              if (bitblock::any(r100_3ff_tmp7)) {
                r300_36f_tmp1 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                byte_85 = simd_and(r300_36f_tmp1, r80_7ff_tmp10);
                byte_cd_adv = r100_3ff_tmp5;
                r300_36f_tmp2 = simd_and(byte_cd_adv, byte_85);
                struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r300_36f_tmp2);
              }
              byte_range_b0_bf = r80_7ff_tmp7;
              r100_3ff_tmp8 = simd_and(r100_3ff_tmp5, byte_range_b0_bf);
              r100_3ff_tmp9 = simd_and(r100_3ff_tmp2, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp9);
              r100_3ff_tmp10 = simd_or(r100_3ff_tmp8, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp10) || carryQ.CarryTest(10, 2))) {
                r370_3ff_tmp1 = simd_and(r80_7ff_tmp8, basis_bits.bit_6);
                r370_3ff_tmp2 = simd_andc(tmp5, r370_3ff_tmp1);
                r370_3ff_tmp3 = simd_andc(byte_range_b0_bf, r370_3ff_tmp2);
                r370_3ff_tmp4 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp5 = simd_not(basis_bits.bit_6);
                r370_3ff_tmp6 = simd_or(simd_and(basis_bits.bit_5, r370_3ff_tmp5), simd_andc(tmp1, basis_bits.bit_5));
                r370_3ff_tmp7 = simd_and(r370_3ff_tmp4, r370_3ff_tmp6);
                r370_3ff_tmp8 = simd_or(r370_3ff_tmp3, r370_3ff_tmp7);
                r370_3ff_tmp9 = simd_and(r100_3ff_tmp2, tmp1);
                r370_3ff_tmp10 = simd_and(byte_range_b0_bf, r370_3ff_tmp9);
                cc_range_370_37f_2 = simd_or(r370_3ff_tmp8, r370_3ff_tmp10);
                byte_cd_adv = r100_3ff_tmp5;
                r370_3ff_tmp11 = simd_and(byte_cd_adv, cc_range_370_37f_2);
                struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r370_3ff_tmp11);
                r370_3ff_tmp12 = simd_and(r100_3ff_tmp2, r80_7ff_tmp3);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp12);
                r370_3ff_tmp13 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                r370_3ff_tmp14 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
                r370_3ff_tmp15 = simd_and(r370_3ff_tmp13, r370_3ff_tmp14);
                r370_3ff_tmp16 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r370_3ff_tmp17 = simd_and(r370_3ff_tmp13, r370_3ff_tmp16);
                r370_3ff_tmp18 = simd_andc(r370_3ff_tmp17, tmp1);
                r370_3ff_tmp19 = simd_or(r370_3ff_tmp15, r370_3ff_tmp18);
                r370_3ff_tmp20 = simd_and(r370_3ff_tmp13, r100_3ff_tmp3);
                r370_3ff_tmp21 = simd_or(r370_3ff_tmp19, r370_3ff_tmp20);
                r370_3ff_tmp22 = simd_or(tmp5, basis_bits.bit_6);
                r370_3ff_tmp23 = simd_or(basis_bits.bit_3, r370_3ff_tmp22);
                r370_3ff_tmp24 = simd_not(r370_3ff_tmp23);
                r370_3ff_tmp25 = simd_or(basis_bits.bit_3, r100_3ff_tmp9);
                r370_3ff_tmp26 = simd_or(simd_and(basis_bits.bit_2, r370_3ff_tmp24), simd_andc(r370_3ff_tmp25, basis_bits.bit_2));
                r370_3ff_tmp27 = simd_and(r80_7ff_tmp5, r370_3ff_tmp26);
                r370_3ff_tmp28 = simd_or(r370_3ff_tmp21, r370_3ff_tmp27);
                r370_3ff_tmp29 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                r370_3ff_tmp30 = simd_or(tmp5, tmp1);
                r370_3ff_tmp31 = simd_or(basis_bits.bit_3, r370_3ff_tmp30);
                r370_3ff_tmp32 = simd_and(r370_3ff_tmp29, r370_3ff_tmp31);
                cc_range_386_3a3_2 = simd_or(r370_3ff_tmp28, r370_3ff_tmp32);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(10), byte_ce_adv));
                r370_3ff_tmp33 = simd_and(byte_ce_adv, cc_range_386_3a3_2);
                struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r370_3ff_tmp33);
                byte_cf = simd_and(r80_7ff_tmp2, r370_3ff_tmp9);
                r370_3ff_tmp34 = simd_and(basis_bits.bit_3, r370_3ff_tmp22);
                r370_3ff_tmp35 = simd_andc(r80_7ff_tmp13, r370_3ff_tmp34);
                r370_3ff_tmp36 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r370_3ff_tmp37 = simd_or(basis_bits.bit_4, r370_3ff_tmp36);
                r370_3ff_tmp38 = simd_and(basis_bits.bit_3, r370_3ff_tmp37);
                r370_3ff_tmp39 = simd_not(r370_3ff_tmp38);
                r370_3ff_tmp40 = simd_and(basis_bits.bit_5, tmp6);
                r370_3ff_tmp41 = simd_or(basis_bits.bit_4, r370_3ff_tmp40);
                r370_3ff_tmp42 = simd_and(basis_bits.bit_3, r370_3ff_tmp41);
                r370_3ff_tmp43 = simd_or(simd_and(basis_bits.bit_2, r370_3ff_tmp39), simd_andc(r370_3ff_tmp42, basis_bits.bit_2));
                r370_3ff_tmp44 = simd_and(r80_7ff_tmp5, r370_3ff_tmp43);
                r370_3ff_tmp45 = simd_or(r370_3ff_tmp35, r370_3ff_tmp44);
                r370_3ff_tmp46 = simd_not(basis_bits.bit_5);
                r370_3ff_tmp47 = simd_or(simd_and(basis_bits.bit_4, r370_3ff_tmp46), simd_andc(r80_7ff_tmp14, basis_bits.bit_4));
                r370_3ff_tmp48 = simd_and(byte_range_b0_bf, r370_3ff_tmp47);
                r370_3ff_tmp49 = simd_or(r370_3ff_tmp45, r370_3ff_tmp48);
                r370_3ff_tmp50 = simd_and(byte_range_b0_bf, r100_3ff_tmp2);
                r370_3ff_tmp51 = simd_and(r370_3ff_tmp50, tmp6);
                cc_range_3c0_3fd_2 = simd_or(r370_3ff_tmp49, r370_3ff_tmp51);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(11), byte_cf_adv));
                r370_3ff_tmp52 = simd_and(byte_cf_adv, cc_range_3c0_3fd_2);
                struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r370_3ff_tmp52);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 10);
            }
            r80_7ff_tmp25 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp26 = simd_and(byte_range_c0_ff, r80_7ff_tmp25);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp26, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(12, 6))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp26, tmp5);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(12, 3))) {
                r400_4ff_tmp1 = simd_or(tmp5, basis_bits.bit_6);
                byte_range_d0_d1 = simd_andc(r80_7ff_tmp26, r400_4ff_tmp1);
                byte_range_80_bf = r80_7ff_tmp5;
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_range_d0_d1, carryQ.get_carry_in(12), r400_4ff_tmp2));
                byte_range_d0_d1_sfx = simd_and(r400_4ff_tmp2, byte_range_80_bf);
                struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, byte_range_d0_d1_sfx);
                byte_d2 = simd_and(r80_7ff_tmp26, r80_7ff_tmp4);
                r400_4ff_tmp3 = simd_andc(byte_range_80_bf, r80_7ff_tmp1);
                byte_range_80_81 = simd_andc(r400_4ff_tmp3, r400_4ff_tmp1);
                carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(13), r400_4ff_tmp4));
                byte_d2_byte_range_80_81 = simd_and(r400_4ff_tmp4, byte_range_80_81);
                struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, byte_d2_byte_range_80_81);
                byte_d3 = simd_and(r80_7ff_tmp26, r80_7ff_tmp12);
                carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(14), r400_4ff_tmp5));
                byte_d3_byte_range_80_bf = simd_and(r400_4ff_tmp5, byte_range_80_bf);
                struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, byte_d3_byte_range_80_bf);
              }
              else {
                carryQ.CarryDequeueEnqueue(12, 3);
              }
              r400_5ff_tmp1 = simd_andc(r80_7ff_tmp8, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp26, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp26, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(15), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(16, 2))) {
                r500_58f_tmp1 = simd_andc(r80_7ff_tmp8, tmp6);
                byte_d4 = simd_and(r80_7ff_tmp26, r500_58f_tmp1);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp6);
                carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(16), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp3)) {
                  byte_d4_adv = r500_58f_tmp2;
                  r500_52f_tmp1 = simd_and(byte_d4_adv, byte_range_80_af);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r500_52f_tmp1);
                }
                byte_range_b0_bf = r80_7ff_tmp7;
                r500_58f_tmp4 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                byte_d5 = simd_and(r80_7ff_tmp26, r80_7ff_tmp10);
                r500_58f_tmp5 = simd_or(r500_58f_tmp4, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp4);
                if ((bitblock::any(r500_58f_tmp6) || carryQ.CarryTest(17, 1))) {
                  r530_58f_tmp1 = simd_or(basis_bits.bit_5, tmp6);
                  r530_58f_tmp2 = simd_or(basis_bits.bit_4, r530_58f_tmp1);
                  byte_range_b1_bf = simd_and(byte_range_b0_bf, r530_58f_tmp2);
                  byte_d4_adv = r500_58f_tmp2;
                  r530_58f_tmp3 = simd_and(byte_d4_adv, byte_range_b1_bf);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r530_58f_tmp3);
                  r530_58f_tmp4 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                  r530_58f_tmp5 = simd_or(basis_bits.bit_3, tmp7);
                  r530_58f_tmp6 = simd_and(r530_58f_tmp4, r530_58f_tmp5);
                  cc_range_540_561_2 = simd_or(r80_7ff_tmp17, r530_58f_tmp6);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(17), byte_d5_adv));
                  r530_58f_tmp7 = simd_and(byte_d5_adv, cc_range_540_561_2);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r530_58f_tmp7);
                  byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_d6_adv = r400_5ff_tmp3;
                  r530_58f_tmp8 = simd_and(byte_d6_adv, byte_range_80_87);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r530_58f_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(17, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(16, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(12, 6);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 18);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(18, 33))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp5);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp6);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(18), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(19, 22))) {
              r800_4dff_tmp1 = simd_or(tmp5, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(19, 11))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp5);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(19, 11))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, tmp5);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(19), r1000_1fff_tmp5));
                  sequence_e1_82 = simd_and(r1000_1fff_tmp5, byte_82);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(20), sequence_e1_82_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_82_adv, byte_range_a0_bf);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r1000_1fff_tmp6);
                  r1000_1fff_tmp7 = simd_andc(tmp1, tmp5);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp7);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  r1000_1fff_tmp8 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp10 = simd_andc(r1000_1fff_tmp8, r1000_1fff_tmp9);
                  r1000_1fff_tmp11 = simd_and(r800_ffff_tmp1, tmp1);
                  r1000_1fff_tmp12 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp11);
                  r1000_1fff_tmp13 = simd_or(r1000_1fff_tmp10, r1000_1fff_tmp12);
                  r1000_1fff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp15 = simd_and(r1000_1fff_tmp14, r800_1fff_tmp1);
                  r1000_1fff_tmp16 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp15);
                  cc_range_10c0_10cd_3 = simd_or(r1000_1fff_tmp13, r1000_1fff_tmp16);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(21), sequence_e1_83_adv));
                  r1000_1fff_tmp17 = simd_and(sequence_e1_83_adv, cc_range_10c0_10cd_3);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r1000_1fff_tmp17);
                  r1000_1fff_tmp18 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp19 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp18);
                  r1000_1fff_tmp20 = simd_and(r800_ffff_tmp1, r800_1fff_tmp1);
                  byte_b5 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp20);
                  sequence_e1_b5 = simd_and(byte_e1_adv, byte_b5);
                  r1000_1fff_tmp21 = simd_and(r800_1fff_tmp1, basis_bits.bit_4);
                  cc_range_1d79_1d7d_3 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp21);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e1_b5, carryQ.get_carry_in(22), sequence_e1_b5_adv));
                  r1000_1fff_tmp22 = simd_and(sequence_e1_b5_adv, cc_range_1d79_1d7d_3);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r1000_1fff_tmp22);
                  r1000_1fff_tmp23 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp24 = simd_andc(r1000_1fff_tmp23, basis_bits.bit_6);
                  byte_range_b8_b9 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp24);
                  byte_e1_byte_range_b8_b9 = simd_and(byte_e1_adv, byte_range_b8_b9);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_b8_b9, carryQ.get_carry_in(23), r1000_1fff_tmp25));
                  byte_e1_byte_range_b8_b9_sfx = simd_and(r1000_1fff_tmp25, byte_range_80_bf);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, byte_e1_byte_range_b8_b9_sfx);
                  r1000_1fff_tmp26 = simd_and(byte_range_80_bf, r1000_1fff_tmp18);
                  r1000_1fff_tmp27 = simd_and(r1000_1fff_tmp23, r1000_1fff_tmp3);
                  byte_ba = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp27);
                  sequence_e1_ba = simd_and(byte_e1_adv, byte_ba);
                  r1000_1fff_tmp28 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r1000_1fff_tmp29 = simd_and(basis_bits.bit_3, r1000_1fff_tmp14);
                  byte_range_80_9b = simd_andc(r1000_1fff_tmp28, r1000_1fff_tmp29);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e1_ba, carryQ.get_carry_in(24), r1000_1fff_tmp30));
                  sequence_e1_ba_byte_range_80_9b = simd_and(r1000_1fff_tmp30, byte_range_80_9b);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, sequence_e1_ba_byte_range_80_9b);
                  r1000_1fff_tmp31 = simd_and(r1000_1fff_tmp23, tmp1);
                  byte_bb = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp31);
                  sequence_e1_bb = simd_and(byte_e1_adv, byte_bb);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e1_bb, carryQ.get_carry_in(25), r1000_1fff_tmp32));
                  sequence_e1_bb_byte_range_80_bf = simd_and(r1000_1fff_tmp32, byte_range_80_bf);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, sequence_e1_bb_byte_range_80_bf);
                  r1000_1fff_tmp33 = simd_andc(r1000_1fff_tmp14, tmp6);
                  byte_bc = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp33);
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  r1000_1fff_tmp34 = simd_or(basis_bits.bit_4, r1000_1fff_tmp9);
                  r1000_1fff_tmp35 = simd_and(basis_bits.bit_3, r1000_1fff_tmp34);
                  byte_range_80_95 = simd_andc(r1000_1fff_tmp28, r1000_1fff_tmp35);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(26), r1000_1fff_tmp36));
                  sequence_e1_bc_byte_range_80_95 = simd_and(r1000_1fff_tmp36, byte_range_80_95);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, sequence_e1_bc_byte_range_80_95);
                  byte_bd = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp15);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  r1000_1fff_tmp37 = simd_andc(byte_range_80_bf, r1000_1fff_tmp1);
                  r1000_1fff_tmp38 = simd_andc(r1000_1fff_tmp37, basis_bits.bit_4);
                  byte_range_80_85 = simd_andc(r1000_1fff_tmp38, r1000_1fff_tmp9);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(27), r1000_1fff_tmp39));
                  sequence_e1_bd_byte_range_80_85 = simd_and(r1000_1fff_tmp39, byte_range_80_85);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, sequence_e1_bd_byte_range_80_85);
                  r1000_1fff_tmp40 = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp3);
                  byte_be = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp40);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  r1000_1fff_tmp41 = simd_and(basis_bits.bit_5, tmp6);
                  r1000_1fff_tmp42 = simd_or(basis_bits.bit_4, r1000_1fff_tmp41);
                  r1000_1fff_tmp43 = simd_and(basis_bits.bit_3, r1000_1fff_tmp42);
                  r1000_1fff_tmp44 = simd_and(basis_bits.bit_2, r1000_1fff_tmp43);
                  byte_range_80_b4 = simd_andc(byte_range_80_bf, r1000_1fff_tmp44);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(28), r1000_1fff_tmp45));
                  sequence_e1_be_byte_range_80_b4 = simd_and(r1000_1fff_tmp45, byte_range_80_b4);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, sequence_e1_be_byte_range_80_b4);
                  r1000_1fff_tmp46 = simd_and(r1000_1fff_tmp14, tmp1);
                  byte_bf = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp46);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  r1000_1fff_tmp47 = simd_not(tmp6);
                  r1000_1fff_tmp48 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp47), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_82_84 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp48);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(29), r1000_1fff_tmp49));
                  sequence_e1_bf_byte_range_82_84 = simd_and(r1000_1fff_tmp49, byte_range_82_84);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, sequence_e1_bf_byte_range_82_84);
                }
                else {
                  carryQ.CarryDequeueEnqueue(19, 11);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(19, 11);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp5);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(30, 11))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp5);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(30, 11))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp2);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(30), r2000_2fff_tmp3));
                  sequence_e2_84 = simd_and(r2000_2fff_tmp3, byte_84);
                  byte_e2_adv = r2000_2fff_tmp3;
                  r2000_2fff_tmp4 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r2000_2fff_tmp5 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  r2000_2fff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp7 = simd_and(r2000_2fff_tmp6, basis_bits.bit_6);
                  r2000_2fff_tmp8 = simd_or(r2000_2fff_tmp5, r2000_2fff_tmp7);
                  r2000_2fff_tmp9 = simd_and(r2000_2fff_tmp4, r2000_2fff_tmp8);
                  r2000_2fff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp11 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp10);
                  r2000_2fff_tmp12 = simd_and(r2000_2fff_tmp11, r2000_4dff_tmp2);
                  cc_range_2126_2132_3 = simd_or(r2000_2fff_tmp9, r2000_2fff_tmp12);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(31), sequence_e2_84_adv));
                  r2000_2fff_tmp13 = simd_and(sequence_e2_84_adv, cc_range_2126_2132_3);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r2000_2fff_tmp13);
                  r2000_2fff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp15 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp14);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp15);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp16 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp17 = simd_and(r2000_2fff_tmp16, r2000_4dff_tmp1);
                  r2000_2fff_tmp18 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp17);
                  r2000_2fff_tmp19 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  cc_range_214e_2160_3 = simd_or(r2000_2fff_tmp18, r2000_2fff_tmp19);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(32), sequence_e2_85_adv));
                  r2000_2fff_tmp20 = simd_and(sequence_e2_85_adv, cc_range_214e_2160_3);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r2000_2fff_tmp20);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp5);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp21 = simd_andc(r2000_2fff_tmp2, basis_bits.bit_4);
                  r2000_2fff_tmp22 = simd_not(tmp6);
                  r2000_2fff_tmp23 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp22), simd_andc(tmp1, basis_bits.bit_5));
                  byte_range_83_84 = simd_and(r2000_2fff_tmp21, r2000_2fff_tmp23);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(33), sequence_e2_86_adv));
                  r2000_2fff_tmp24 = simd_and(sequence_e2_86_adv, byte_range_83_84);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r2000_2fff_tmp24);
                  r2000_2fff_tmp25 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp26 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp25);
                  byte_92 = simd_and(r2000_2fff_tmp26, r2000_4dff_tmp2);
                  sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
                  r2000_2fff_tmp27 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp28 = simd_or(basis_bits.bit_4, r2000_2fff_tmp27);
                  byte_range_b6_bf = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp28);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_92, carryQ.get_carry_in(34), sequence_e2_92_adv));
                  r2000_2fff_tmp29 = simd_and(sequence_e2_92_adv, byte_range_b6_bf);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r2000_2fff_tmp29);
                  r2000_2fff_tmp30 = simd_andc(tmp1, tmp5);
                  byte_93 = simd_and(r2000_2fff_tmp26, r2000_2fff_tmp30);
                  sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
                  r2000_2fff_tmp31 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp32 = simd_and(basis_bits.bit_4, r2000_2fff_tmp31);
                  r2000_2fff_tmp33 = simd_or(basis_bits.bit_3, r2000_2fff_tmp32);
                  r2000_2fff_tmp34 = simd_and(basis_bits.bit_2, r2000_2fff_tmp33);
                  byte_range_80_a9 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp34);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(35), sequence_e2_93_adv));
                  r2000_2fff_tmp35 = simd_and(sequence_e2_93_adv, byte_range_80_a9);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r2000_2fff_tmp35);
                  byte_b0 = simd_andc(r2000_2fff_tmp11, tmp7);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  r2000_2fff_tmp36 = simd_and(r2000_2fff_tmp16, tmp1);
                  r2000_2fff_tmp37 = simd_or(basis_bits.bit_3, r2000_2fff_tmp36);
                  r2000_2fff_tmp38 = simd_and(basis_bits.bit_2, r2000_2fff_tmp37);
                  r2000_2fff_tmp39 = simd_andc(r2000_2fff_tmp38, r2000_2fff_tmp10);
                  cc_range_2c00_2c30_3 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp39);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(36), sequence_e2_b0_adv));
                  r2000_2fff_tmp40 = simd_and(sequence_e2_b0_adv, cc_range_2c00_2c30_3);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r2000_2fff_tmp40);
                  r2000_2fff_tmp41 = simd_andc(r2000_2fff_tmp14, tmp5);
                  byte_b1 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp41);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp42 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp43 = simd_and(basis_bits.bit_3, r2000_2fff_tmp36);
                  r2000_2fff_tmp44 = simd_andc(r2000_2fff_tmp42, r2000_2fff_tmp43);
                  r2000_2fff_tmp45 = simd_and(basis_bits.bit_3, tmp7);
                  r2000_2fff_tmp46 = simd_andc(r2000_2fff_tmp19, r2000_2fff_tmp45);
                  r2000_2fff_tmp47 = simd_or(r2000_2fff_tmp44, r2000_2fff_tmp46);
                  r2000_2fff_tmp48 = simd_and(r2000_2fff_tmp11, r800_4dff_tmp2);
                  r2000_2fff_tmp49 = simd_or(r2000_2fff_tmp47, r2000_2fff_tmp48);
                  r2000_2fff_tmp50 = simd_and(r2000_2fff_tmp11, r800_ffff_tmp1);
                  r2000_2fff_tmp51 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp52 = simd_and(r2000_2fff_tmp50, r2000_2fff_tmp51);
                  r2000_2fff_tmp53 = simd_or(r2000_2fff_tmp49, r2000_2fff_tmp52);
                  r2000_2fff_tmp54 = simd_and(r2000_2fff_tmp16, basis_bits.bit_6);
                  r2000_2fff_tmp55 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp54);
                  cc_range_2c40_2c7e_3 = simd_or(r2000_2fff_tmp53, r2000_2fff_tmp55);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(37), sequence_e2_b1_adv));
                  r2000_2fff_tmp56 = simd_and(sequence_e2_b1_adv, cc_range_2c40_2c7e_3);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r2000_2fff_tmp56);
                  byte_b2 = r2000_2fff_tmp12;
                  sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(38), sequence_e2_b2_adv));
                  r2000_2fff_tmp57 = simd_and(sequence_e2_b2_adv, byte_range_80_bf);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r2000_2fff_tmp57);
                  r2000_2fff_tmp58 = simd_and(byte_range_80_bf, r2000_2fff_tmp10);
                  byte_b3 = simd_and(r2000_2fff_tmp58, r2000_2fff_tmp30);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp59 = simd_or(basis_bits.bit_3, tmp5);
                  r2000_2fff_tmp60 = simd_and(basis_bits.bit_2, r2000_2fff_tmp59);
                  r2000_2fff_tmp61 = simd_andc(byte_range_80_bf, r2000_2fff_tmp60);
                  r2000_2fff_tmp62 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r2000_2fff_tmp63 = simd_and(r2000_2fff_tmp62, basis_bits.bit_4);
                  r2000_2fff_tmp64 = simd_xor(basis_bits.bit_5, tmp1);
                  r2000_2fff_tmp65 = simd_and(r2000_2fff_tmp63, r2000_2fff_tmp64);
                  r2000_2fff_tmp66 = simd_or(r2000_2fff_tmp61, r2000_2fff_tmp65);
                  r2000_2fff_tmp67 = simd_and(r2000_2fff_tmp58, r800_4dff_tmp2);
                  cc_range_2cc0_2cf2_3 = simd_or(r2000_2fff_tmp66, r2000_2fff_tmp67);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(39), sequence_e2_b3_adv));
                  r2000_2fff_tmp68 = simd_and(sequence_e2_b3_adv, cc_range_2cc0_2cf2_3);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r2000_2fff_tmp68);
                  byte_b4 = simd_and(r2000_2fff_tmp58, r800_ffff_tmp2);
                  sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
                  r2000_2fff_tmp69 = simd_or(basis_bits.bit_3, r2000_2fff_tmp28);
                  r2000_2fff_tmp70 = simd_and(basis_bits.bit_2, r2000_2fff_tmp69);
                  r2000_2fff_tmp71 = simd_andc(byte_range_80_bf, r2000_2fff_tmp70);
                  r2000_2fff_tmp72 = simd_and(r800_ffff_tmp1, tmp1);
                  r2000_2fff_tmp73 = simd_and(r2000_2fff_tmp62, r2000_2fff_tmp72);
                  r2000_2fff_tmp74 = simd_or(r2000_2fff_tmp71, r2000_2fff_tmp73);
                  r2000_2fff_tmp75 = simd_and(r2000_2fff_tmp16, r2000_2fff_tmp14);
                  r2000_2fff_tmp76 = simd_and(r2000_2fff_tmp62, r2000_2fff_tmp75);
                  cc_range_2d00_2d2d_3 = simd_or(r2000_2fff_tmp74, r2000_2fff_tmp76);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(40), sequence_e2_b4_adv));
                  r2000_2fff_tmp77 = simd_and(sequence_e2_b4_adv, cc_range_2d00_2d2d_3);
                  struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r2000_2fff_tmp77);
                }
                else {
                  carryQ.CarryDequeueEnqueue(30, 11);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(30, 11);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(19, 22);
            }
            r800_ffff_tmp9 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp9, r800_ffff_tmp10);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(41, 10))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_99 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[41] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(41), ra000_ffff_tmp8));
              sequence_ea_99 = simd_and(ra000_ffff_tmp8, byte_99);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp9, basis_bits.bit_6);
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_3, ra000_ffff_tmp10);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_2, ra000_ffff_tmp11);
              byte_range_80_ad = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp12);
              carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(42), sequence_ea_99_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ea_99_adv, byte_range_80_ad);
              struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, ra000_ffff_tmp13);
              byte_9a = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp14 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp15 = simd_and(basis_bits.bit_3, ra000_ffff_tmp9);
              byte_range_80_9b = simd_andc(ra000_ffff_tmp14, ra000_ffff_tmp15);
              carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(43), sequence_ea_9a_adv));
              ra000_ffff_tmp16 = simd_and(sequence_ea_9a_adv, byte_range_80_9b);
              struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, ra000_ffff_tmp16);
              ra000_ffff_tmp17 = simd_andc(ra000_ffff_tmp9, tmp6);
              byte_9c = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp17);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              ra000_ffff_tmp18 = simd_or(basis_bits.bit_4, r800_ffff_tmp10);
              ra000_ffff_tmp19 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
              cc_range_a722_a732_3 = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp19);
              carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(44), sequence_ea_9c_adv));
              ra000_ffff_tmp20 = simd_and(sequence_ea_9c_adv, cc_range_a722_a732_3);
              struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, ra000_ffff_tmp20);
              ra000_ffff_tmp21 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp6);
              byte_9d = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp21);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              ra000_ffff_tmp22 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp23 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp22);
              ra000_ffff_tmp24 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp22);
              ra000_ffff_tmp25 = simd_and(ra000_ffff_tmp24, basis_bits.bit_4);
              ra000_ffff_tmp26 = simd_or(basis_bits.bit_5, tmp6);
              ra000_ffff_tmp27 = simd_and(ra000_ffff_tmp25, ra000_ffff_tmp26);
              cc_range_a740_a779_3 = simd_or(ra000_ffff_tmp23, ra000_ffff_tmp27);
              carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(45), sequence_ea_9d_adv));
              ra000_ffff_tmp28 = simd_and(sequence_ea_9d_adv, cc_range_a740_a779_3);
              struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, ra000_ffff_tmp28);
              ra000_ffff_tmp29 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp29);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp30 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp31 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp30);
              ra000_ffff_tmp32 = simd_andc(ra000_ffff_tmp31, basis_bits.bit_4);
              ra000_ffff_tmp33 = simd_and(ra000_ffff_tmp31, basis_bits.bit_4);
              ra000_ffff_tmp34 = simd_not(basis_bits.bit_6);
              ra000_ffff_tmp35 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp34), simd_andc(tmp1, basis_bits.bit_5));
              ra000_ffff_tmp36 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp35);
              ra000_ffff_tmp37 = simd_or(ra000_ffff_tmp32, ra000_ffff_tmp36);
              ra000_ffff_tmp38 = simd_andc(ra000_ffff_tmp5, tmp5);
              ra000_ffff_tmp39 = simd_or(ra000_ffff_tmp37, ra000_ffff_tmp38);
              ra000_ffff_tmp40 = simd_not(ra000_ffff_tmp11);
              ra000_ffff_tmp41 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp42 = simd_or(basis_bits.bit_4, ra000_ffff_tmp41);
              ra000_ffff_tmp43 = simd_and(basis_bits.bit_3, ra000_ffff_tmp42);
              ra000_ffff_tmp44 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp40), simd_andc(ra000_ffff_tmp43, basis_bits.bit_2));
              ra000_ffff_tmp45 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp44);
              ra000_ffff_tmp46 = simd_or(ra000_ffff_tmp39, ra000_ffff_tmp45);
              ra000_ffff_tmp47 = simd_or(tmp5, basis_bits.bit_6);
              ra000_ffff_tmp48 = simd_andc(ra000_ffff_tmp24, ra000_ffff_tmp47);
              cc_range_a780_a7b0_3 = simd_or(ra000_ffff_tmp46, ra000_ffff_tmp48);
              carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(46), sequence_ea_9e_adv));
              ra000_ffff_tmp49 = simd_and(sequence_ea_9e_adv, cc_range_a780_a7b0_3);
              struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, ra000_ffff_tmp49);
              ra000_ffff_tmp50 = simd_and(ra000_ffff_tmp9, tmp1);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp50);
              ra000_ffff_tmp51 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
              byte_ac = simd_and(ra000_ffff_tmp51, ra000_ffff_tmp17);
              carryQ.cq[47] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(47), ra000_ffff_tmp52));
              sequence_ef_ac = simd_and(ra000_ffff_tmp52, byte_ac);
              byte_ef_adv = ra000_ffff_tmp52;
              ra000_ffff_tmp53 = simd_and(basis_bits.bit_5, tmp1);
              ra000_ffff_tmp54 = simd_andc(ra000_ffff_tmp32, ra000_ffff_tmp53);
              ra000_ffff_tmp55 = simd_andc(ra000_ffff_tmp5, basis_bits.bit_4);
              ra000_ffff_tmp56 = simd_and(ra000_ffff_tmp55, tmp2);
              cc_range_fb00_fb13_3 = simd_or(ra000_ffff_tmp54, ra000_ffff_tmp56);
              carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(48), sequence_ef_ac_adv));
              ra000_ffff_tmp57 = simd_and(sequence_ef_ac_adv, cc_range_fb00_fb13_3);
              struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, ra000_ffff_tmp57);
              byte_bc = simd_and(ra000_ffff_tmp24, ra000_ffff_tmp17);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              byte_range_a1_ba = simd_and(ra000_ffff_tmp19, tmp8);
              carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(49), sequence_ef_bc_adv));
              ra000_ffff_tmp58 = simd_and(sequence_ef_bc_adv, byte_range_a1_ba);
              struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, ra000_ffff_tmp58);
              byte_bd = simd_and(ra000_ffff_tmp24, ra000_ffff_tmp21);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_range_81_9a = simd_and(ra000_ffff_tmp14, tmp8);
              carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(50), sequence_ef_bd_adv));
              ra000_ffff_tmp59 = simd_and(sequence_ef_bd_adv, byte_range_81_9a);
              struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, ra000_ffff_tmp59);
            }
            else {
              carryQ.CarryDequeueEnqueue(41, 10);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(18, 33);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(51, 7))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp7);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp3 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_90 = simd_andc(r10000_10ffff_tmp3, tmp7);
            carryQ.cq[51] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(51), r10000_10ffff_tmp4));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp4, byte_90);
            byte_f0_adv = r10000_10ffff_tmp4;
            carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(52), r10000_10ffff_tmp5));
            sequence_f0_90_90 = simd_and(r10000_10ffff_tmp5, byte_90);
            sequence_f0_90_adv = r10000_10ffff_tmp5;
            byte_range_80_bf = r10000_10ffff_tmp1;
            carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_f0_90_90, carryQ.get_carry_in(53), sequence_f0_90_90_adv));
            r10000_10ffff_tmp6 = simd_and(sequence_f0_90_90_adv, byte_range_80_bf);
            struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r10000_10ffff_tmp6);
            r10000_10ffff_tmp7 = simd_and(byte_range_80_bf, r10000_10ffff_tmp2);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp8, tmp5);
            byte_91 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp9);
            sequence_f0_90_91 = simd_and(sequence_f0_90_adv, byte_91);
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_80_8f = simd_andc(byte_range_80_bf, r10000_10ffff_tmp10);
            carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_f0_90_91, carryQ.get_carry_in(54), sequence_f0_90_91_adv));
            r10000_10ffff_tmp11 = simd_and(sequence_f0_90_91_adv, byte_range_80_8f);
            struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r10000_10ffff_tmp11);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            r10000_10ffff_tmp12 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp14 = simd_andc(r10000_10ffff_tmp13, tmp5);
            byte_a2 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp14);
            carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(55), r10000_10ffff_tmp15));
            sequence_f0_91_a2 = simd_and(r10000_10ffff_tmp15, byte_a2);
            sequence_f0_91_adv = r10000_10ffff_tmp15;
            byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(56), sequence_f0_91_a2_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_91_a2_adv, byte_range_a0_bf);
            struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_andc(tmp1, tmp5);
            byte_a3 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp17);
            sequence_f0_91_a3 = simd_and(sequence_f0_91_adv, byte_a3);
            byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(57), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_91_a3_adv, byte_range_80_9f);
            struct_cwcm_Y.cc = simd_or(struct_cwcm_Y.cc, r10000_10ffff_tmp18);
          }
          else {
            carryQ.CarryDequeueEnqueue(51, 7);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 58);
        }
        carryQ.CarryQ_Adjust(58);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<58, 0> carryQ;
  };

  struct Property_cwcf_Y {
  Property_cwcf_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_cwcf_Y & struct_cwcf_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10;
		BitBlock byte_range_41_5a, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, byte_c2, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock byte_b5, byte_c2_adv, r80_7ff_tmp11, r80_7ff_tmp12, byte_c3;
		BitBlock r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16;
		BitBlock r80_7ff_tmp17, r80_7ff_tmp18, r80_7ff_tmp19, r80_7ff_tmp20;
		BitBlock cc_range_c0_d8_2, byte_c3_adv, r80_7ff_tmp21, byte_range_c4_cf;
		BitBlock r100_3ff_tmp1, byte_range_c4_cb, r100_2ff_tmp1, r100_2ff_tmp2;
		BitBlock r100_2ff_tmp3, byte_range_c4_c8, r100_2ff_tmp4, r100_2ff_tmp5;
		BitBlock byte_c9, byte_range_80_8f, r100_2ff_tmp6, r100_2ff_tmp7;
		BitBlock r100_2ff_tmp8, r100_24f_tmp1, byte_range_c4_c5, r100_17f_tmp1;
		BitBlock byte_c4, r100_17f_tmp2, r100_17f_tmp3, r100_17f_tmp4, r100_17f_tmp5;
		BitBlock r100_17f_tmp6, r100_17f_tmp7, r100_17f_tmp8, r100_17f_tmp9;
		BitBlock r100_17f_tmp10, r100_17f_tmp11, r100_17f_tmp12, r100_17f_tmp13;
		BitBlock r100_17f_tmp14, r100_17f_tmp15, r100_17f_tmp16, r100_17f_tmp17;
		BitBlock r100_17f_tmp18, r100_17f_tmp19, r100_17f_tmp20, r100_17f_tmp21;
		BitBlock r100_17f_tmp22, r100_17f_tmp23, r100_17f_tmp24, r100_17f_tmp25;
		BitBlock r100_17f_tmp26, r100_17f_tmp27, r100_17f_tmp28, r100_17f_tmp29;
		BitBlock r100_17f_tmp30, r100_17f_tmp31, r100_17f_tmp32, r100_17f_tmp33;
		BitBlock r100_17f_tmp34, r100_17f_tmp35, r100_17f_tmp36, r100_17f_tmp37;
		BitBlock r100_17f_tmp38, r100_17f_tmp39, r100_17f_tmp40, r100_17f_tmp41;
		BitBlock r100_17f_tmp42, r100_17f_tmp43, r100_17f_tmp44, r100_17f_tmp45;
		BitBlock r100_17f_tmp46, r100_17f_tmp47, r100_17f_tmp48, r100_17f_tmp49;
		BitBlock r100_17f_tmp50, r100_17f_tmp51, r100_17f_tmp52, r100_17f_tmp53;
		BitBlock r100_17f_tmp54, r100_17f_tmp55, r100_17f_tmp56, r100_17f_tmp57;
		BitBlock r100_17f_tmp58, r100_17f_tmp59, r100_17f_tmp60, r100_17f_tmp61;
		BitBlock r100_17f_tmp62, r100_17f_tmp63, r100_17f_tmp64, r100_17f_tmp65;
		BitBlock r100_17f_tmp66, r100_17f_tmp67, cc_range_100_13f_2, byte_c4_adv;
		BitBlock r100_17f_tmp68, byte_c5, r100_17f_tmp69, r100_17f_tmp70;
		BitBlock r100_17f_tmp71, r100_17f_tmp72, r100_17f_tmp73, r100_17f_tmp74;
		BitBlock r100_17f_tmp75, r100_17f_tmp76, r100_17f_tmp77, r100_17f_tmp78;
		BitBlock r100_17f_tmp79, r100_17f_tmp80, r100_17f_tmp81, r100_17f_tmp82;
		BitBlock r100_17f_tmp83, r100_17f_tmp84, r100_17f_tmp85, r100_17f_tmp86;
		BitBlock r100_17f_tmp87, r100_17f_tmp88, r100_17f_tmp89, r100_17f_tmp90;
		BitBlock r100_17f_tmp91, r100_17f_tmp92, r100_17f_tmp93, r100_17f_tmp94;
		BitBlock r100_17f_tmp95, r100_17f_tmp96, r100_17f_tmp97, r100_17f_tmp98;
		BitBlock r100_17f_tmp99, r100_17f_tmp100, r100_17f_tmp101, r100_17f_tmp102;
		BitBlock r100_17f_tmp103, r100_17f_tmp104, r100_17f_tmp105, r100_17f_tmp106;
		BitBlock cc_range_141_17f_2, byte_c5_adv, r100_17f_tmp107, r100_24f_tmp2;
		BitBlock r100_24f_tmp3, byte_range_c6_c8, r100_24f_tmp4, r180_24f_tmp1;
		BitBlock byte_c6, r180_24f_tmp2, r180_24f_tmp3, r180_24f_tmp4, r180_24f_tmp5;
		BitBlock r180_24f_tmp6, r180_24f_tmp7, r180_24f_tmp8, r180_24f_tmp9;
		BitBlock r180_24f_tmp10, r180_24f_tmp11, r180_24f_tmp12, r180_24f_tmp13;
		BitBlock r180_24f_tmp14, r180_24f_tmp15, r180_24f_tmp16, r180_24f_tmp17;
		BitBlock r180_24f_tmp18, r180_24f_tmp19, r180_24f_tmp20, r180_24f_tmp21;
		BitBlock r180_24f_tmp22, r180_24f_tmp23, r180_24f_tmp24, r180_24f_tmp25;
		BitBlock r180_24f_tmp26, r180_24f_tmp27, r180_24f_tmp28, r180_24f_tmp29;
		BitBlock r180_24f_tmp30, r180_24f_tmp31, r180_24f_tmp32, r180_24f_tmp33;
		BitBlock r180_24f_tmp34, r180_24f_tmp35, r180_24f_tmp36, r180_24f_tmp37;
		BitBlock r180_24f_tmp38, r180_24f_tmp39, r180_24f_tmp40, r180_24f_tmp41;
		BitBlock r180_24f_tmp42, r180_24f_tmp43, r180_24f_tmp44, r180_24f_tmp45;
		BitBlock r180_24f_tmp46, r180_24f_tmp47, r180_24f_tmp48, r180_24f_tmp49;
		BitBlock r180_24f_tmp50, r180_24f_tmp51, r180_24f_tmp52, r180_24f_tmp53;
		BitBlock r180_24f_tmp54, r180_24f_tmp55, r180_24f_tmp56, r180_24f_tmp57;
		BitBlock r180_24f_tmp58, r180_24f_tmp59, r180_24f_tmp60, cc_range_181_1bc_2;
		BitBlock byte_c6_adv, r180_24f_tmp61, r180_24f_tmp62, byte_c7, r180_24f_tmp63;
		BitBlock r180_24f_tmp64, r180_24f_tmp65, r180_24f_tmp66, r180_24f_tmp67;
		BitBlock r180_24f_tmp68, r180_24f_tmp69, r180_24f_tmp70, r180_24f_tmp71;
		BitBlock r180_24f_tmp72, r180_24f_tmp73, r180_24f_tmp74, r180_24f_tmp75;
		BitBlock r180_24f_tmp76, r180_24f_tmp77, r180_24f_tmp78, r180_24f_tmp79;
		BitBlock r180_24f_tmp80, r180_24f_tmp81, r180_24f_tmp82, r180_24f_tmp83;
		BitBlock r180_24f_tmp84, r180_24f_tmp85, r180_24f_tmp86, r180_24f_tmp87;
		BitBlock r180_24f_tmp88, r180_24f_tmp89, r180_24f_tmp90, r180_24f_tmp91;
		BitBlock r180_24f_tmp92, r180_24f_tmp93, r180_24f_tmp94, r180_24f_tmp95;
		BitBlock r180_24f_tmp96, r180_24f_tmp97, r180_24f_tmp98, r180_24f_tmp99;
		BitBlock r180_24f_tmp100, r180_24f_tmp101, r180_24f_tmp102, r180_24f_tmp103;
		BitBlock r180_24f_tmp104, r180_24f_tmp105, r180_24f_tmp106, r180_24f_tmp107;
		BitBlock r180_24f_tmp108, r180_24f_tmp109, r180_24f_tmp110, r180_24f_tmp111;
		BitBlock cc_range_1c4_1fe_2, byte_c7_adv, r180_24f_tmp112, byte_c8;
		BitBlock r180_24f_tmp113, r180_24f_tmp114, r180_24f_tmp115, r180_24f_tmp116;
		BitBlock r180_24f_tmp117, r180_24f_tmp118, r180_24f_tmp119, r180_24f_tmp120;
		BitBlock r180_24f_tmp121, r180_24f_tmp122, r180_24f_tmp123, r180_24f_tmp124;
		BitBlock r180_24f_tmp125, r180_24f_tmp126, r180_24f_tmp127, r180_24f_tmp128;
		BitBlock r180_24f_tmp129, r180_24f_tmp130, r180_24f_tmp131, r180_24f_tmp132;
		BitBlock r180_24f_tmp133, r180_24f_tmp134, r180_24f_tmp135, r180_24f_tmp136;
		BitBlock r180_24f_tmp137, r180_24f_tmp138, r180_24f_tmp139, r180_24f_tmp140;
		BitBlock r180_24f_tmp141, r180_24f_tmp142, r180_24f_tmp143, r180_24f_tmp144;
		BitBlock r180_24f_tmp145, r180_24f_tmp146, r180_24f_tmp147, r180_24f_tmp148;
		BitBlock r180_24f_tmp149, r180_24f_tmp150, r180_24f_tmp151, cc_range_200_23d_2;
		BitBlock byte_c8_adv, r180_24f_tmp152, r180_24f_tmp153, r180_24f_tmp154;
		BitBlock r180_24f_tmp155, r180_24f_tmp156, r180_24f_tmp157, r180_24f_tmp158;
		BitBlock r180_24f_tmp159, r180_24f_tmp160, r180_24f_tmp161, r180_24f_tmp162;
		BitBlock r180_24f_tmp163, r180_24f_tmp164, cc_range_241_24e_2, byte_c9_adv;
		BitBlock r180_24f_tmp165, r100_3ff_tmp2, r100_3ff_tmp3, byte_cc, r100_3ff_tmp4;
		BitBlock byte_cd, byte_range_80_af, r100_3ff_tmp5, r100_3ff_tmp6;
		BitBlock r100_3ff_tmp7, r300_36f_tmp1, byte_85, byte_cd_adv, r300_36f_tmp2;
		BitBlock byte_range_b0_bf, r100_3ff_tmp8, r100_3ff_tmp9, byte_range_ce_cf;
		BitBlock r100_3ff_tmp10, r370_3ff_tmp1, r370_3ff_tmp2, r370_3ff_tmp3;
		BitBlock r370_3ff_tmp4, r370_3ff_tmp5, cc_range_370_37f_2, r370_3ff_tmp6;
		BitBlock r370_3ff_tmp7, byte_ce, r370_3ff_tmp8, r370_3ff_tmp9, r370_3ff_tmp10;
		BitBlock r370_3ff_tmp11, r370_3ff_tmp12, r370_3ff_tmp13, r370_3ff_tmp14;
		BitBlock r370_3ff_tmp15, r370_3ff_tmp16, r370_3ff_tmp17, r370_3ff_tmp18;
		BitBlock r370_3ff_tmp19, r370_3ff_tmp20, r370_3ff_tmp21, r370_3ff_tmp22;
		BitBlock r370_3ff_tmp23, r370_3ff_tmp24, r370_3ff_tmp25, r370_3ff_tmp26;
		BitBlock r370_3ff_tmp27, r370_3ff_tmp28, r370_3ff_tmp29, cc_range_386_3a3_2;
		BitBlock byte_ce_adv, r370_3ff_tmp30, byte_cf, r370_3ff_tmp31, r370_3ff_tmp32;
		BitBlock r370_3ff_tmp33, r370_3ff_tmp34, r370_3ff_tmp35, r370_3ff_tmp36;
		BitBlock r370_3ff_tmp37, r370_3ff_tmp38, r370_3ff_tmp39, r370_3ff_tmp40;
		BitBlock r370_3ff_tmp41, r370_3ff_tmp42, r370_3ff_tmp43, r370_3ff_tmp44;
		BitBlock r370_3ff_tmp45, r370_3ff_tmp46, r370_3ff_tmp47, r370_3ff_tmp48;
		BitBlock r370_3ff_tmp49, r370_3ff_tmp50, r370_3ff_tmp51, r370_3ff_tmp52;
		BitBlock r370_3ff_tmp53, r370_3ff_tmp54, r370_3ff_tmp55, r370_3ff_tmp56;
		BitBlock r370_3ff_tmp57, r370_3ff_tmp58, r370_3ff_tmp59, r370_3ff_tmp60;
		BitBlock r370_3ff_tmp61, r370_3ff_tmp62, r370_3ff_tmp63, r370_3ff_tmp64;
		BitBlock r370_3ff_tmp65, r370_3ff_tmp66, r370_3ff_tmp67, r370_3ff_tmp68;
		BitBlock r370_3ff_tmp69, r370_3ff_tmp70, r370_3ff_tmp71, r370_3ff_tmp72;
		BitBlock r370_3ff_tmp73, r370_3ff_tmp74, r370_3ff_tmp75, r370_3ff_tmp76;
		BitBlock r370_3ff_tmp77, r370_3ff_tmp78, r370_3ff_tmp79, cc_range_3c2_3fd_2;
		BitBlock byte_cf_adv, r370_3ff_tmp80, r80_7ff_tmp22, byte_range_d0_d7;
		BitBlock byte_range_d0_d3, byte_d0, byte_d0_adv, r400_4ff_tmp1, r400_4ff_tmp2;
		BitBlock byte_d1, r400_4ff_tmp3, cc_range_460_47e_2, byte_d1_adv;
		BitBlock r400_4ff_tmp4, byte_d2, r400_4ff_tmp5, r400_4ff_tmp6, r400_4ff_tmp7;
		BitBlock r400_4ff_tmp8, r400_4ff_tmp9, r400_4ff_tmp10, r400_4ff_tmp11;
		BitBlock r400_4ff_tmp12, r400_4ff_tmp13, r400_4ff_tmp14, r400_4ff_tmp15;
		BitBlock r400_4ff_tmp16, r400_4ff_tmp17, r400_4ff_tmp18, r400_4ff_tmp19;
		BitBlock r400_4ff_tmp20, r400_4ff_tmp21, r400_4ff_tmp22, r400_4ff_tmp23;
		BitBlock r400_4ff_tmp24, r400_4ff_tmp25, r400_4ff_tmp26, r400_4ff_tmp27;
		BitBlock r400_4ff_tmp28, r400_4ff_tmp29, r400_4ff_tmp30, r400_4ff_tmp31;
		BitBlock r400_4ff_tmp32, r400_4ff_tmp33, r400_4ff_tmp34, r400_4ff_tmp35;
		BitBlock r400_4ff_tmp36, r400_4ff_tmp37, r400_4ff_tmp38, r400_4ff_tmp39;
		BitBlock r400_4ff_tmp40, r400_4ff_tmp41, r400_4ff_tmp42, r400_4ff_tmp43;
		BitBlock r400_4ff_tmp44, r400_4ff_tmp45, r400_4ff_tmp46, r400_4ff_tmp47;
		BitBlock r400_4ff_tmp48, r400_4ff_tmp49, r400_4ff_tmp50, r400_4ff_tmp51;
		BitBlock r400_4ff_tmp52, r400_4ff_tmp53, r400_4ff_tmp54, r400_4ff_tmp55;
		BitBlock r400_4ff_tmp56, r400_4ff_tmp57, r400_4ff_tmp58, r400_4ff_tmp59;
		BitBlock r400_4ff_tmp60, r400_4ff_tmp61, r400_4ff_tmp62, r400_4ff_tmp63;
		BitBlock r400_4ff_tmp64, r400_4ff_tmp65, r400_4ff_tmp66, cc_range_480_4be_2;
		BitBlock byte_d2_adv, r400_4ff_tmp67, byte_d3, r400_4ff_tmp68, r400_4ff_tmp69;
		BitBlock r400_4ff_tmp70, r400_4ff_tmp71, r400_4ff_tmp72, r400_4ff_tmp73;
		BitBlock r400_4ff_tmp74, r400_4ff_tmp75, r400_4ff_tmp76, r400_4ff_tmp77;
		BitBlock r400_4ff_tmp78, r400_4ff_tmp79, r400_4ff_tmp80, r400_4ff_tmp81;
		BitBlock r400_4ff_tmp82, r400_4ff_tmp83, r400_4ff_tmp84, r400_4ff_tmp85;
		BitBlock r400_4ff_tmp86, r400_4ff_tmp87, r400_4ff_tmp88, r400_4ff_tmp89;
		BitBlock r400_4ff_tmp90, r400_4ff_tmp91, r400_4ff_tmp92, r400_4ff_tmp93;
		BitBlock r400_4ff_tmp94, r400_4ff_tmp95, r400_4ff_tmp96, r400_4ff_tmp97;
		BitBlock r400_4ff_tmp98, r400_4ff_tmp99, r400_4ff_tmp100, r400_4ff_tmp101;
		BitBlock r400_4ff_tmp102, cc_range_4c0_4fe_2, byte_d3_adv, r400_4ff_tmp103;
		BitBlock r400_5ff_tmp1, byte_range_d4_d5, r400_5ff_tmp2, byte_d6;
		BitBlock r400_5ff_tmp3, r400_5ff_tmp4, r400_5ff_tmp5, r500_58f_tmp1, byte_d4;
		BitBlock r500_58f_tmp2, r500_58f_tmp3, cc_range_500_52e_2, byte_d4_adv;
		BitBlock r500_52f_tmp1, r500_58f_tmp4, byte_d5, r500_58f_tmp5, r500_58f_tmp6;
		BitBlock r530_58f_tmp1, r530_58f_tmp2, byte_range_b1_bf, r530_58f_tmp3;
		BitBlock byte_range_80_96, byte_d5_adv, r530_58f_tmp4, r530_58f_tmp5, byte_87;
		BitBlock byte_d6_adv, r530_58f_tmp6, r80_10ffff_tmp1, byte_range_e0_ef;
		BitBlock byte_range_e0_e3, r800_ffff_tmp1, r800_ffff_tmp2, byte_e4;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5, byte_range_80_b7;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8, r800_4dff_tmp1;
		BitBlock byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2, byte_e1;
		BitBlock r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, r1000_1fff_tmp4;
		BitBlock byte_82, r1000_1fff_tmp5, sequence_e1_82, byte_e1_adv;
		BitBlock byte_range_a0_bf, sequence_e1_82_adv, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, byte_83, sequence_e1_83, r1000_1fff_tmp8;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, r1000_1fff_tmp14, r1000_1fff_tmp15;
		BitBlock r1000_1fff_tmp16, cc_range_10c0_10cd_3, sequence_e1_83_adv;
		BitBlock r1000_1fff_tmp17, r1000_1fff_tmp18, r1000_1fff_tmp19;
		BitBlock r1000_1fff_tmp20, r1000_1fff_tmp21, byte_b8, sequence_e1_b8;
		BitBlock cc_range_1e00_1e3e_3, sequence_e1_b8_adv, r1000_1fff_tmp22;
		BitBlock r1000_1fff_tmp23, byte_b9, sequence_e1_b9, cc_range_1e40_1e7e_3;
		BitBlock sequence_e1_b9_adv, r1000_1fff_tmp24, r1000_1fff_tmp25, byte_ba;
		BitBlock sequence_e1_ba, r1000_1fff_tmp26, r1000_1fff_tmp27, r1000_1fff_tmp28;
		BitBlock r1000_1fff_tmp29, r1000_1fff_tmp30, r1000_1fff_tmp31;
		BitBlock r1000_1fff_tmp32, r1000_1fff_tmp33, r1000_1fff_tmp34;
		BitBlock r1000_1fff_tmp35, r1000_1fff_tmp36, r1000_1fff_tmp37;
		BitBlock r1000_1fff_tmp38, r1000_1fff_tmp39, r1000_1fff_tmp40;
		BitBlock r1000_1fff_tmp41, r1000_1fff_tmp42, r1000_1fff_tmp43;
		BitBlock r1000_1fff_tmp44, r1000_1fff_tmp45, r1000_1fff_tmp46;
		BitBlock r1000_1fff_tmp47, r1000_1fff_tmp48, r1000_1fff_tmp49;
		BitBlock r1000_1fff_tmp50, r1000_1fff_tmp51, r1000_1fff_tmp52;
		BitBlock r1000_1fff_tmp53, r1000_1fff_tmp54, r1000_1fff_tmp55;
		BitBlock r1000_1fff_tmp56, r1000_1fff_tmp57, r1000_1fff_tmp58;
		BitBlock r1000_1fff_tmp59, r1000_1fff_tmp60, r1000_1fff_tmp61;
		BitBlock r1000_1fff_tmp62, r1000_1fff_tmp63, r1000_1fff_tmp64;
		BitBlock r1000_1fff_tmp65, r1000_1fff_tmp66, r1000_1fff_tmp67;
		BitBlock r1000_1fff_tmp68, r1000_1fff_tmp69, r1000_1fff_tmp70;
		BitBlock r1000_1fff_tmp71, r1000_1fff_tmp72, r1000_1fff_tmp73;
		BitBlock r1000_1fff_tmp74, r1000_1fff_tmp75, r1000_1fff_tmp76;
		BitBlock r1000_1fff_tmp77, r1000_1fff_tmp78, r1000_1fff_tmp79;
		BitBlock cc_range_1e80_1ebe_3, sequence_e1_ba_adv, r1000_1fff_tmp80;
		BitBlock r1000_1fff_tmp81, byte_bb, sequence_e1_bb, cc_range_1ec0_1efe_3;
		BitBlock sequence_e1_bb_adv, r1000_1fff_tmp82, byte_bc, sequence_e1_bc;
		BitBlock r1000_1fff_tmp83, r1000_1fff_tmp84, r1000_1fff_tmp85;
		BitBlock r1000_1fff_tmp86, r1000_1fff_tmp87, r1000_1fff_tmp88;
		BitBlock r1000_1fff_tmp89, cc_range_1f08_1f38_3, sequence_e1_bc_adv;
		BitBlock r1000_1fff_tmp90, byte_bd, sequence_e1_bd, r1000_1fff_tmp91;
		BitBlock r1000_1fff_tmp92, r1000_1fff_tmp93, r1000_1fff_tmp94;
		BitBlock r1000_1fff_tmp95, r1000_1fff_tmp96, r1000_1fff_tmp97;
		BitBlock r1000_1fff_tmp98, r1000_1fff_tmp99, r1000_1fff_tmp100;
		BitBlock cc_range_1f48_1f68_3, sequence_e1_bd_adv, r1000_1fff_tmp101, byte_be;
		BitBlock sequence_e1_be, r1000_1fff_tmp102, r1000_1fff_tmp103;
		BitBlock r1000_1fff_tmp104, r1000_1fff_tmp105, r1000_1fff_tmp106;
		BitBlock r1000_1fff_tmp107, r1000_1fff_tmp108, r1000_1fff_tmp109;
		BitBlock r1000_1fff_tmp110, r1000_1fff_tmp111, r1000_1fff_tmp112;
		BitBlock cc_range_1f80_1fb7_3, sequence_e1_be_adv, r1000_1fff_tmp113, byte_bf;
		BitBlock sequence_e1_bf, r1000_1fff_tmp114, r1000_1fff_tmp115;
		BitBlock r1000_1fff_tmp116, r1000_1fff_tmp117, r1000_1fff_tmp118;
		BitBlock r1000_1fff_tmp119, r1000_1fff_tmp120, r1000_1fff_tmp121;
		BitBlock cc_range_1fc2_1ff7_3, sequence_e1_bf_adv, r1000_1fff_tmp122;
		BitBlock r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, byte_84;
		BitBlock r2000_2fff_tmp3, sequence_e2_84, byte_e2_adv, r2000_2fff_tmp4;
		BitBlock r2000_2fff_tmp5, r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8;
		BitBlock r2000_2fff_tmp9, r2000_2fff_tmp10, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock cc_range_2126_2132_3, sequence_e2_84_adv, r2000_2fff_tmp13;
		BitBlock r2000_2fff_tmp14, r2000_2fff_tmp15, sequence_e2_85, byte_range_a0_af;
		BitBlock sequence_e2_85_adv, r2000_2fff_tmp16, byte_86, sequence_e2_86;
		BitBlock r2000_2fff_tmp17, sequence_e2_86_adv, r2000_2fff_tmp18;
		BitBlock r2000_2fff_tmp19, r2000_2fff_tmp20, byte_92, sequence_e2_92;
		BitBlock r2000_2fff_tmp21, r2000_2fff_tmp22, byte_range_b6_bf;
		BitBlock sequence_e2_92_adv, r2000_2fff_tmp23, byte_93, sequence_e2_93;
		BitBlock sequence_e2_93_adv, r2000_2fff_tmp24, byte_b0, sequence_e2_b0;
		BitBlock r2000_2fff_tmp25, r2000_2fff_tmp26, r2000_2fff_tmp27;
		BitBlock r2000_2fff_tmp28, byte_range_80_ae, sequence_e2_b0_adv;
		BitBlock r2000_2fff_tmp29, r2000_2fff_tmp30, byte_b1, sequence_e2_b1;
		BitBlock r2000_2fff_tmp31, r2000_2fff_tmp32, r2000_2fff_tmp33;
		BitBlock r2000_2fff_tmp34, r2000_2fff_tmp35, r2000_2fff_tmp36;
		BitBlock r2000_2fff_tmp37, r2000_2fff_tmp38, r2000_2fff_tmp39;
		BitBlock r2000_2fff_tmp40, r2000_2fff_tmp41, r2000_2fff_tmp42;
		BitBlock r2000_2fff_tmp43, r2000_2fff_tmp44, r2000_2fff_tmp45;
		BitBlock r2000_2fff_tmp46, r2000_2fff_tmp47, r2000_2fff_tmp48;
		BitBlock r2000_2fff_tmp49, r2000_2fff_tmp50, r2000_2fff_tmp51;
		BitBlock r2000_2fff_tmp52, r2000_2fff_tmp53, r2000_2fff_tmp54;
		BitBlock r2000_2fff_tmp55, r2000_2fff_tmp56, cc_range_2c60_2c7e_3;
		BitBlock sequence_e2_b1_adv, r2000_2fff_tmp57, byte_b2, sequence_e2_b2;
		BitBlock cc_range_2c80_2cbe_3, sequence_e2_b2_adv, r2000_2fff_tmp58, byte_b3;
		BitBlock sequence_e2_b3, r2000_2fff_tmp59, r2000_2fff_tmp60, r2000_2fff_tmp61;
		BitBlock r2000_2fff_tmp62, r2000_2fff_tmp63, r2000_2fff_tmp64;
		BitBlock r2000_2fff_tmp65, r2000_2fff_tmp66, r2000_2fff_tmp67;
		BitBlock r2000_2fff_tmp68, r2000_2fff_tmp69, r2000_2fff_tmp70;
		BitBlock r2000_2fff_tmp71, r2000_2fff_tmp72, r2000_2fff_tmp73;
		BitBlock r2000_2fff_tmp74, r2000_2fff_tmp75, r2000_2fff_tmp76;
		BitBlock r2000_2fff_tmp77, r2000_2fff_tmp78, r2000_2fff_tmp79;
		BitBlock r2000_2fff_tmp80, r2000_2fff_tmp81, r2000_2fff_tmp82;
		BitBlock r2000_2fff_tmp83, r2000_2fff_tmp84, r2000_2fff_tmp85;
		BitBlock r2000_2fff_tmp86, r2000_2fff_tmp87, r2000_2fff_tmp88;
		BitBlock r2000_2fff_tmp89, r2000_2fff_tmp90, r2000_2fff_tmp91;
		BitBlock r2000_2fff_tmp92, cc_range_2cc0_2cf2_3, sequence_e2_b3_adv;
		BitBlock r2000_2fff_tmp93, r800_ffff_tmp9, r800_ffff_tmp10, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea;
		BitBlock ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7;
		BitBlock byte_99, ra000_ffff_tmp8, sequence_ea_99, byte_ea_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, cc_range_a640_a66c_3, sequence_ea_99_adv;
		BitBlock ra000_ffff_tmp14, byte_9a, sequence_ea_9a, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, ra000_ffff_tmp17, cc_range_a680_a69a_3;
		BitBlock sequence_ea_9a_adv, ra000_ffff_tmp18, ra000_ffff_tmp19, byte_9c;
		BitBlock sequence_ea_9c, ra000_ffff_tmp20, ra000_ffff_tmp21, ra000_ffff_tmp22;
		BitBlock ra000_ffff_tmp23, ra000_ffff_tmp24, ra000_ffff_tmp25;
		BitBlock ra000_ffff_tmp26, ra000_ffff_tmp27, ra000_ffff_tmp28;
		BitBlock ra000_ffff_tmp29, ra000_ffff_tmp30, ra000_ffff_tmp31;
		BitBlock ra000_ffff_tmp32, ra000_ffff_tmp33, ra000_ffff_tmp34;
		BitBlock ra000_ffff_tmp35, ra000_ffff_tmp36, ra000_ffff_tmp37;
		BitBlock ra000_ffff_tmp38, ra000_ffff_tmp39, ra000_ffff_tmp40;
		BitBlock ra000_ffff_tmp41, ra000_ffff_tmp42, ra000_ffff_tmp43;
		BitBlock ra000_ffff_tmp44, ra000_ffff_tmp45, ra000_ffff_tmp46;
		BitBlock cc_range_a722_a73e_3, sequence_ea_9c_adv, ra000_ffff_tmp47;
		BitBlock ra000_ffff_tmp48, byte_9d, sequence_ea_9d, ra000_ffff_tmp49;
		BitBlock ra000_ffff_tmp50, ra000_ffff_tmp51, ra000_ffff_tmp52;
		BitBlock ra000_ffff_tmp53, ra000_ffff_tmp54, ra000_ffff_tmp55;
		BitBlock ra000_ffff_tmp56, ra000_ffff_tmp57, ra000_ffff_tmp58;
		BitBlock ra000_ffff_tmp59, ra000_ffff_tmp60, ra000_ffff_tmp61;
		BitBlock ra000_ffff_tmp62, ra000_ffff_tmp63, ra000_ffff_tmp64;
		BitBlock ra000_ffff_tmp65, ra000_ffff_tmp66, ra000_ffff_tmp67;
		BitBlock ra000_ffff_tmp68, ra000_ffff_tmp69, ra000_ffff_tmp70;
		BitBlock ra000_ffff_tmp71, ra000_ffff_tmp72, ra000_ffff_tmp73;
		BitBlock ra000_ffff_tmp74, ra000_ffff_tmp75, ra000_ffff_tmp76;
		BitBlock ra000_ffff_tmp77, ra000_ffff_tmp78, ra000_ffff_tmp79;
		BitBlock ra000_ffff_tmp80, ra000_ffff_tmp81, ra000_ffff_tmp82;
		BitBlock ra000_ffff_tmp83, ra000_ffff_tmp84, ra000_ffff_tmp85;
		BitBlock ra000_ffff_tmp86, ra000_ffff_tmp87, ra000_ffff_tmp88;
		BitBlock ra000_ffff_tmp89, ra000_ffff_tmp90, ra000_ffff_tmp91;
		BitBlock ra000_ffff_tmp92, ra000_ffff_tmp93, ra000_ffff_tmp94;
		BitBlock ra000_ffff_tmp95, ra000_ffff_tmp96, cc_range_a740_a77d_3;
		BitBlock sequence_ea_9d_adv, ra000_ffff_tmp97, byte_9e, sequence_ea_9e;
		BitBlock ra000_ffff_tmp98, ra000_ffff_tmp99, ra000_ffff_tmp100;
		BitBlock ra000_ffff_tmp101, ra000_ffff_tmp102, ra000_ffff_tmp103;
		BitBlock ra000_ffff_tmp104, ra000_ffff_tmp105, ra000_ffff_tmp106;
		BitBlock ra000_ffff_tmp107, ra000_ffff_tmp108, ra000_ffff_tmp109;
		BitBlock ra000_ffff_tmp110, ra000_ffff_tmp111, ra000_ffff_tmp112;
		BitBlock ra000_ffff_tmp113, ra000_ffff_tmp114, ra000_ffff_tmp115;
		BitBlock ra000_ffff_tmp116, ra000_ffff_tmp117, ra000_ffff_tmp118;
		BitBlock cc_range_a780_a7b0_3, sequence_ea_9e_adv, ra000_ffff_tmp119;
		BitBlock ra000_ffff_tmp120, byte_ef, byte_ac, ra000_ffff_tmp121;
		BitBlock sequence_ef_ac, byte_ef_adv, ra000_ffff_tmp122, ra000_ffff_tmp123;
		BitBlock ra000_ffff_tmp124, ra000_ffff_tmp125, ra000_ffff_tmp126;
		BitBlock cc_range_fb00_fb13_3, sequence_ef_ac_adv, ra000_ffff_tmp127;
		BitBlock sequence_ef_bc, ra000_ffff_tmp128, byte_range_a1_ba;
		BitBlock sequence_ef_bc_adv, ra000_ffff_tmp129, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, byte_f0, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_90, r10000_10ffff_tmp4, sequence_f0_90;
		BitBlock byte_f0_adv, r10000_10ffff_tmp5, sequence_f0_90_90;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp6, r10000_10ffff_tmp7;
		BitBlock byte_range_80_a7, sequence_f0_90_90_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, byte_91, sequence_f0_91;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, r10000_10ffff_tmp13;
		BitBlock byte_a2, r10000_10ffff_tmp14, sequence_f0_91_a2, sequence_f0_91_adv;
		BitBlock sequence_f0_91_a2_adv, r10000_10ffff_tmp15;




        struct_cwcf_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_andc(tmp1, basis_bits.bit_2);
        tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp4 = simd_or(basis_bits.bit_5, tmp3);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        tmp6 = simd_not(tmp5);
        tmp7 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp9 = simd_or(tmp7, tmp8);
        tmp10 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(tmp9, basis_bits.bit_3));
        byte_range_41_5a = simd_and(tmp2, tmp10);
        struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, byte_range_41_5a);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 54))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 18))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, tmp7);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp10 = simd_and(r80_7ff_tmp8, r80_7ff_tmp9);
            byte_b5 = simd_and(r80_7ff_tmp7, r80_7ff_tmp10);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp11 = simd_and(byte_c2_adv, byte_b5);
            struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r80_7ff_tmp11);
            r80_7ff_tmp12 = simd_andc(tmp3, tmp7);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp12);
            r80_7ff_tmp13 = simd_andc(r80_7ff_tmp5, basis_bits.bit_2);
            r80_7ff_tmp14 = simd_and(basis_bits.bit_5, tmp3);
            r80_7ff_tmp15 = simd_or(basis_bits.bit_4, r80_7ff_tmp14);
            r80_7ff_tmp16 = simd_and(basis_bits.bit_3, r80_7ff_tmp15);
            r80_7ff_tmp17 = simd_andc(r80_7ff_tmp13, r80_7ff_tmp16);
            r80_7ff_tmp18 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp19 = simd_and(r80_7ff_tmp5, r80_7ff_tmp18);
            r80_7ff_tmp20 = simd_and(r80_7ff_tmp19, basis_bits.bit_4);
            cc_range_c0_d8_2 = simd_or(r80_7ff_tmp17, r80_7ff_tmp20);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp21 = simd_and(byte_c3_adv, cc_range_c0_d8_2);
            struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r80_7ff_tmp21);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp7);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 9))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(2, 6))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_5, tmp8);
                r100_2ff_tmp2 = simd_not(r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp5 = simd_and(r100_2ff_tmp4, r80_7ff_tmp9);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp5);
                byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(2), r100_2ff_tmp6));
                r100_2ff_tmp7 = simd_and(r100_2ff_tmp6, byte_range_80_8f);
                r100_2ff_tmp8 = simd_or(byte_range_c4_c8, r100_2ff_tmp7);
                if ((bitblock::any(r100_2ff_tmp8) || carryQ.CarryTest(3, 5))) {
                  r100_24f_tmp1 = simd_andc(r80_7ff_tmp8, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp1);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(3, 2))) {
                    r100_17f_tmp1 = simd_andc(r80_7ff_tmp8, tmp8);
                    byte_c4 = simd_and(r80_7ff_tmp2, r100_17f_tmp1);
                    r100_17f_tmp2 = simd_andc(tmp9, r80_7ff_tmp4);
                    r100_17f_tmp3 = simd_andc(r100_17f_tmp2, r100_17f_tmp1);
                    r100_17f_tmp4 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
                    r100_17f_tmp5 = simd_andc(r100_17f_tmp3, r100_17f_tmp4);
                    r100_17f_tmp6 = simd_andc(r100_2ff_tmp4, tmp8);
                    r100_17f_tmp7 = simd_andc(r100_17f_tmp5, r100_17f_tmp6);
                    r100_17f_tmp8 = simd_and(r100_2ff_tmp4, r80_7ff_tmp3);
                    r100_17f_tmp9 = simd_andc(r100_17f_tmp7, r100_17f_tmp8);
                    r100_17f_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                    r100_17f_tmp11 = simd_andc(r100_17f_tmp10, tmp8);
                    r100_17f_tmp12 = simd_andc(r100_17f_tmp9, r100_17f_tmp11);
                    r100_17f_tmp13 = simd_and(r100_17f_tmp10, r80_7ff_tmp3);
                    r100_17f_tmp14 = simd_andc(r100_17f_tmp12, r100_17f_tmp13);
                    r100_17f_tmp15 = simd_andc(byte_range_80_8f, r100_17f_tmp14);
                    r100_17f_tmp16 = simd_andc(r80_7ff_tmp19, tmp9);
                    r100_17f_tmp17 = simd_or(r100_17f_tmp15, r100_17f_tmp16);
                    r100_17f_tmp18 = simd_and(r80_7ff_tmp19, r80_7ff_tmp4);
                    r100_17f_tmp19 = simd_or(r100_17f_tmp17, r100_17f_tmp18);
                    r100_17f_tmp20 = simd_and(r80_7ff_tmp19, r100_17f_tmp1);
                    r100_17f_tmp21 = simd_or(r100_17f_tmp19, r100_17f_tmp20);
                    r100_17f_tmp22 = simd_and(r80_7ff_tmp19, r100_17f_tmp4);
                    r100_17f_tmp23 = simd_or(r100_17f_tmp21, r100_17f_tmp22);
                    r100_17f_tmp24 = simd_and(r80_7ff_tmp19, r100_17f_tmp6);
                    r100_17f_tmp25 = simd_or(r100_17f_tmp23, r100_17f_tmp24);
                    r100_17f_tmp26 = simd_and(r80_7ff_tmp19, r100_17f_tmp8);
                    r100_17f_tmp27 = simd_or(r100_17f_tmp25, r100_17f_tmp26);
                    r100_17f_tmp28 = simd_and(r80_7ff_tmp19, r100_17f_tmp11);
                    r100_17f_tmp29 = simd_or(r100_17f_tmp27, r100_17f_tmp28);
                    r100_17f_tmp30 = simd_and(r80_7ff_tmp19, r100_17f_tmp13);
                    r100_17f_tmp31 = simd_or(r100_17f_tmp29, r100_17f_tmp30);
                    r100_17f_tmp32 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                    r100_17f_tmp33 = simd_and(r80_7ff_tmp5, r100_17f_tmp32);
                    r100_17f_tmp34 = simd_andc(r100_17f_tmp33, tmp9);
                    r100_17f_tmp35 = simd_or(r100_17f_tmp31, r100_17f_tmp34);
                    r100_17f_tmp36 = simd_and(r100_17f_tmp33, r80_7ff_tmp4);
                    r100_17f_tmp37 = simd_or(r100_17f_tmp35, r100_17f_tmp36);
                    r100_17f_tmp38 = simd_and(r100_17f_tmp33, r100_17f_tmp1);
                    r100_17f_tmp39 = simd_or(r100_17f_tmp37, r100_17f_tmp38);
                    r100_17f_tmp40 = simd_and(r100_17f_tmp33, r100_17f_tmp4);
                    r100_17f_tmp41 = simd_or(r100_17f_tmp39, r100_17f_tmp40);
                    r100_17f_tmp42 = simd_and(r100_17f_tmp33, r100_17f_tmp6);
                    r100_17f_tmp43 = simd_or(r100_17f_tmp41, r100_17f_tmp42);
                    r100_17f_tmp44 = simd_and(r100_17f_tmp33, r100_17f_tmp8);
                    r100_17f_tmp45 = simd_or(r100_17f_tmp43, r100_17f_tmp44);
                    r100_17f_tmp46 = simd_and(r100_17f_tmp33, r100_17f_tmp11);
                    r100_17f_tmp47 = simd_or(r100_17f_tmp45, r100_17f_tmp46);
                    r100_17f_tmp48 = simd_and(r100_17f_tmp33, r100_17f_tmp13);
                    r100_17f_tmp49 = simd_or(r100_17f_tmp47, r100_17f_tmp48);
                    r100_17f_tmp50 = simd_andc(r80_7ff_tmp7, tmp9);
                    r100_17f_tmp51 = simd_or(r100_17f_tmp49, r100_17f_tmp50);
                    r100_17f_tmp52 = simd_and(r80_7ff_tmp7, r80_7ff_tmp4);
                    r100_17f_tmp53 = simd_or(r100_17f_tmp51, r100_17f_tmp52);
                    r100_17f_tmp54 = simd_and(r80_7ff_tmp7, r100_17f_tmp1);
                    r100_17f_tmp55 = simd_or(r100_17f_tmp53, r100_17f_tmp54);
                    r100_17f_tmp56 = simd_and(r80_7ff_tmp7, r100_17f_tmp4);
                    r100_17f_tmp57 = simd_or(r100_17f_tmp55, r100_17f_tmp56);
                    r100_17f_tmp58 = simd_and(r80_7ff_tmp7, r100_2ff_tmp5);
                    r100_17f_tmp59 = simd_or(r100_17f_tmp57, r100_17f_tmp58);
                    r100_17f_tmp60 = simd_and(r100_2ff_tmp4, tmp3);
                    r100_17f_tmp61 = simd_and(r80_7ff_tmp7, r100_17f_tmp60);
                    r100_17f_tmp62 = simd_or(r100_17f_tmp59, r100_17f_tmp61);
                    r100_17f_tmp63 = simd_and(r100_17f_tmp10, r80_7ff_tmp9);
                    r100_17f_tmp64 = simd_and(r80_7ff_tmp7, r100_17f_tmp63);
                    r100_17f_tmp65 = simd_or(r100_17f_tmp62, r100_17f_tmp64);
                    r100_17f_tmp66 = simd_and(r100_17f_tmp10, tmp3);
                    r100_17f_tmp67 = simd_and(r80_7ff_tmp7, r100_17f_tmp66);
                    cc_range_100_13f_2 = simd_or(r100_17f_tmp65, r100_17f_tmp67);
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_c4, carryQ.get_carry_in(3), byte_c4_adv));
                    r100_17f_tmp68 = simd_and(byte_c4_adv, cc_range_100_13f_2);
                    struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r100_17f_tmp68);
                    byte_c5 = simd_and(r80_7ff_tmp2, r80_7ff_tmp10);
                    r100_17f_tmp69 = simd_andc(basis_bits.bit_7, tmp7);
                    r100_17f_tmp70 = simd_or(r100_17f_tmp69, r80_7ff_tmp10);
                    r100_17f_tmp71 = simd_and(r80_7ff_tmp8, tmp3);
                    r100_17f_tmp72 = simd_or(r100_17f_tmp70, r100_17f_tmp71);
                    r100_17f_tmp73 = simd_and(byte_range_80_8f, r100_17f_tmp72);
                    r100_17f_tmp74 = simd_and(byte_range_80_8f, r100_2ff_tmp4);
                    r100_17f_tmp75 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                    r100_17f_tmp76 = simd_and(r100_17f_tmp74, r100_17f_tmp75);
                    r100_17f_tmp77 = simd_or(r100_17f_tmp73, r100_17f_tmp76);
                    r100_17f_tmp78 = simd_and(byte_range_80_8f, r100_17f_tmp11);
                    r100_17f_tmp79 = simd_or(r100_17f_tmp77, r100_17f_tmp78);
                    r100_17f_tmp80 = simd_and(byte_range_80_8f, r100_17f_tmp13);
                    r100_17f_tmp81 = simd_or(r100_17f_tmp79, r100_17f_tmp80);
                    r100_17f_tmp82 = simd_or(r100_17f_tmp81, r100_17f_tmp16);
                    r100_17f_tmp83 = simd_or(r100_17f_tmp82, r100_17f_tmp18);
                    r100_17f_tmp84 = simd_or(r100_17f_tmp83, r100_17f_tmp20);
                    r100_17f_tmp85 = simd_or(r100_17f_tmp84, r100_17f_tmp22);
                    r100_17f_tmp86 = simd_or(r100_17f_tmp85, r100_17f_tmp24);
                    r100_17f_tmp87 = simd_or(r100_17f_tmp86, r100_17f_tmp26);
                    r100_17f_tmp88 = simd_or(r100_17f_tmp87, r100_17f_tmp28);
                    r100_17f_tmp89 = simd_or(r100_17f_tmp88, r100_17f_tmp30);
                    r100_17f_tmp90 = simd_or(r100_17f_tmp89, r100_17f_tmp34);
                    r100_17f_tmp91 = simd_or(r100_17f_tmp90, r100_17f_tmp36);
                    r100_17f_tmp92 = simd_or(r100_17f_tmp91, r100_17f_tmp38);
                    r100_17f_tmp93 = simd_or(r100_17f_tmp92, r100_17f_tmp40);
                    r100_17f_tmp94 = simd_or(r100_17f_tmp93, r100_17f_tmp42);
                    r100_17f_tmp95 = simd_or(r100_17f_tmp94, r100_17f_tmp44);
                    r100_17f_tmp96 = simd_or(r100_17f_tmp95, r100_17f_tmp46);
                    r100_17f_tmp97 = simd_or(r100_17f_tmp96, r100_17f_tmp48);
                    r100_17f_tmp98 = simd_or(r100_17f_tmp97, r100_17f_tmp50);
                    r100_17f_tmp99 = simd_or(r100_17f_tmp98, r100_17f_tmp52);
                    r100_17f_tmp100 = simd_or(r100_17f_tmp99, r100_17f_tmp54);
                    r100_17f_tmp101 = simd_or(r100_17f_tmp100, r100_17f_tmp56);
                    r100_17f_tmp102 = simd_andc(r100_2ff_tmp4, basis_bits.bit_6);
                    r100_17f_tmp103 = simd_and(r80_7ff_tmp7, r100_17f_tmp102);
                    r100_17f_tmp104 = simd_or(r100_17f_tmp101, r100_17f_tmp103);
                    r100_17f_tmp105 = simd_or(r100_17f_tmp104, r100_17f_tmp61);
                    r100_17f_tmp106 = simd_or(r100_17f_tmp105, r100_17f_tmp64);
                    cc_range_141_17f_2 = simd_or(r100_17f_tmp106, r100_17f_tmp67);
                    carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_c5, carryQ.get_carry_in(4), byte_c5_adv));
                    r100_17f_tmp107 = simd_and(byte_c5_adv, cc_range_141_17f_2);
                    struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r100_17f_tmp107);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(3, 2);
                  }
                  r100_24f_tmp2 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r100_24f_tmp2, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp3);
                  r100_24f_tmp4 = simd_or(byte_range_c6_c8, r100_2ff_tmp7);
                  if ((bitblock::any(r100_24f_tmp4) || carryQ.CarryTest(5, 3))) {
                    r180_24f_tmp1 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
                    byte_c6 = simd_and(r80_7ff_tmp2, r180_24f_tmp1);
                    r180_24f_tmp2 = simd_andc(byte_range_80_8f, tmp7);
                    r180_24f_tmp3 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                    r180_24f_tmp4 = simd_and(r180_24f_tmp2, r180_24f_tmp3);
                    r180_24f_tmp5 = simd_andc(r80_7ff_tmp8, tmp8);
                    r180_24f_tmp6 = simd_and(byte_range_80_8f, r180_24f_tmp5);
                    r180_24f_tmp7 = simd_or(r180_24f_tmp4, r180_24f_tmp6);
                    r180_24f_tmp8 = simd_and(r80_7ff_tmp8, basis_bits.bit_6);
                    r180_24f_tmp9 = simd_and(byte_range_80_8f, r180_24f_tmp8);
                    r180_24f_tmp10 = simd_or(r180_24f_tmp7, r180_24f_tmp9);
                    r180_24f_tmp11 = simd_and(byte_range_80_8f, r100_2ff_tmp4);
                    r180_24f_tmp12 = simd_and(r180_24f_tmp11, tmp8);
                    r180_24f_tmp13 = simd_or(r180_24f_tmp10, r180_24f_tmp12);
                    r180_24f_tmp14 = simd_or(tmp7, basis_bits.bit_6);
                    r180_24f_tmp15 = simd_not(r180_24f_tmp14);
                    r180_24f_tmp16 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                    r180_24f_tmp17 = simd_and(r180_24f_tmp16, basis_bits.bit_6);
                    r180_24f_tmp18 = simd_or(simd_and(basis_bits.bit_3, r180_24f_tmp15), simd_andc(r180_24f_tmp17, basis_bits.bit_3));
                    r180_24f_tmp19 = simd_and(r80_7ff_tmp13, r180_24f_tmp18);
                    r180_24f_tmp20 = simd_or(r180_24f_tmp13, r180_24f_tmp19);
                    r180_24f_tmp21 = simd_andc(r80_7ff_tmp19, basis_bits.bit_4);
                    r180_24f_tmp22 = simd_not(tmp8);
                    r180_24f_tmp23 = simd_or(simd_and(basis_bits.bit_5, r180_24f_tmp22), simd_andc(tmp3, basis_bits.bit_5));
                    r180_24f_tmp24 = simd_and(r180_24f_tmp21, r180_24f_tmp23);
                    r180_24f_tmp25 = simd_or(r180_24f_tmp20, r180_24f_tmp24);
                    r180_24f_tmp26 = simd_and(r80_7ff_tmp19, r100_24f_tmp3);
                    r180_24f_tmp27 = simd_or(r180_24f_tmp25, r180_24f_tmp26);
                    r180_24f_tmp28 = simd_andc(r180_24f_tmp16, basis_bits.bit_6);
                    r180_24f_tmp29 = simd_and(r80_7ff_tmp19, r180_24f_tmp28);
                    r180_24f_tmp30 = simd_or(r180_24f_tmp27, r180_24f_tmp29);
                    r180_24f_tmp31 = simd_or(basis_bits.bit_3, tmp9);
                    r180_24f_tmp32 = simd_not(r180_24f_tmp31);
                    r180_24f_tmp33 = simd_and(r180_24f_tmp16, tmp3);
                    r180_24f_tmp34 = simd_and(basis_bits.bit_3, r180_24f_tmp33);
                    r180_24f_tmp35 = simd_or(simd_and(basis_bits.bit_2, r180_24f_tmp32), simd_andc(r180_24f_tmp34, basis_bits.bit_2));
                    r180_24f_tmp36 = simd_and(r80_7ff_tmp5, r180_24f_tmp35);
                    r180_24f_tmp37 = simd_or(r180_24f_tmp30, r180_24f_tmp36);
                    r180_24f_tmp38 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                    r180_24f_tmp39 = simd_and(r80_7ff_tmp5, r180_24f_tmp38);
                    r180_24f_tmp40 = simd_and(r180_24f_tmp39, r80_7ff_tmp4);
                    r180_24f_tmp41 = simd_or(r180_24f_tmp37, r180_24f_tmp40);
                    r180_24f_tmp42 = simd_and(r180_24f_tmp39, r180_24f_tmp5);
                    r180_24f_tmp43 = simd_or(r180_24f_tmp41, r180_24f_tmp42);
                    r180_24f_tmp44 = simd_and(r180_24f_tmp39, r180_24f_tmp8);
                    r180_24f_tmp45 = simd_or(r180_24f_tmp43, r180_24f_tmp44);
                    r180_24f_tmp46 = simd_and(r180_24f_tmp39, r100_2ff_tmp5);
                    r180_24f_tmp47 = simd_or(r180_24f_tmp45, r180_24f_tmp46);
                    r180_24f_tmp48 = simd_andc(r180_24f_tmp16, tmp8);
                    r180_24f_tmp49 = simd_and(r180_24f_tmp39, r180_24f_tmp48);
                    r180_24f_tmp50 = simd_or(r180_24f_tmp47, r180_24f_tmp49);
                    r180_24f_tmp51 = simd_and(r180_24f_tmp39, r180_24f_tmp17);
                    r180_24f_tmp52 = simd_or(r180_24f_tmp50, r180_24f_tmp51);
                    r180_24f_tmp53 = simd_andc(r80_7ff_tmp7, tmp7);
                    r180_24f_tmp54 = simd_and(r180_24f_tmp53, tmp8);
                    r180_24f_tmp55 = simd_or(r180_24f_tmp52, r180_24f_tmp54);
                    r180_24f_tmp56 = simd_or(r180_24f_tmp55, byte_b5);
                    r180_24f_tmp57 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r80_7ff_tmp14, basis_bits.bit_4));
                    r180_24f_tmp58 = simd_and(r80_7ff_tmp7, r180_24f_tmp57);
                    r180_24f_tmp59 = simd_or(r180_24f_tmp56, r180_24f_tmp58);
                    r180_24f_tmp60 = simd_and(r80_7ff_tmp7, r180_24f_tmp48);
                    cc_range_181_1bc_2 = simd_or(r180_24f_tmp59, r180_24f_tmp60);
                    carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_c6, carryQ.get_carry_in(5), byte_c6_adv));
                    r180_24f_tmp61 = simd_and(byte_c6_adv, cc_range_181_1bc_2);
                    struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r180_24f_tmp61);
                    r180_24f_tmp62 = simd_and(r80_7ff_tmp8, tmp3);
                    byte_c7 = simd_and(r80_7ff_tmp2, r180_24f_tmp62);
                    r180_24f_tmp63 = simd_or(r100_24f_tmp1, r180_24f_tmp57);
                    r180_24f_tmp64 = simd_and(r100_2ff_tmp4, basis_bits.bit_6);
                    r180_24f_tmp65 = simd_or(r180_24f_tmp63, r180_24f_tmp64);
                    r180_24f_tmp66 = simd_and(r180_24f_tmp16, r80_7ff_tmp9);
                    r180_24f_tmp67 = simd_or(r180_24f_tmp65, r180_24f_tmp66);
                    r180_24f_tmp68 = simd_or(r180_24f_tmp67, r180_24f_tmp33);
                    r180_24f_tmp69 = simd_and(byte_range_80_8f, r180_24f_tmp68);
                    r180_24f_tmp70 = simd_andc(r80_7ff_tmp9, tmp7);
                    r180_24f_tmp71 = simd_and(r80_7ff_tmp19, r180_24f_tmp70);
                    r180_24f_tmp72 = simd_or(r180_24f_tmp69, r180_24f_tmp71);
                    r180_24f_tmp73 = simd_and(r80_7ff_tmp19, r80_7ff_tmp12);
                    r180_24f_tmp74 = simd_or(r180_24f_tmp72, r180_24f_tmp73);
                    r180_24f_tmp75 = simd_and(r80_7ff_tmp19, r80_7ff_tmp10);
                    r180_24f_tmp76 = simd_or(r180_24f_tmp74, r180_24f_tmp75);
                    r180_24f_tmp77 = simd_and(r80_7ff_tmp19, r180_24f_tmp62);
                    r180_24f_tmp78 = simd_or(r180_24f_tmp76, r180_24f_tmp77);
                    r180_24f_tmp79 = simd_and(r80_7ff_tmp19, r100_2ff_tmp5);
                    r180_24f_tmp80 = simd_or(r180_24f_tmp78, r180_24f_tmp79);
                    r180_24f_tmp81 = simd_and(r100_2ff_tmp4, tmp3);
                    r180_24f_tmp82 = simd_and(r80_7ff_tmp19, r180_24f_tmp81);
                    r180_24f_tmp83 = simd_or(r180_24f_tmp80, r180_24f_tmp82);
                    r180_24f_tmp84 = simd_and(r180_24f_tmp16, r80_7ff_tmp3);
                    r180_24f_tmp85 = simd_and(r80_7ff_tmp19, r180_24f_tmp84);
                    r180_24f_tmp86 = simd_or(r180_24f_tmp83, r180_24f_tmp85);
                    r180_24f_tmp87 = simd_andc(r180_24f_tmp39, tmp9);
                    r180_24f_tmp88 = simd_or(r180_24f_tmp86, r180_24f_tmp87);
                    r180_24f_tmp89 = simd_or(r180_24f_tmp88, r180_24f_tmp40);
                    r180_24f_tmp90 = simd_or(r180_24f_tmp89, r180_24f_tmp42);
                    r180_24f_tmp91 = simd_and(r180_24f_tmp39, r180_24f_tmp1);
                    r180_24f_tmp92 = simd_or(r180_24f_tmp90, r180_24f_tmp91);
                    r180_24f_tmp93 = simd_andc(r100_2ff_tmp4, tmp8);
                    r180_24f_tmp94 = simd_and(r180_24f_tmp39, r180_24f_tmp93);
                    r180_24f_tmp95 = simd_or(r180_24f_tmp92, r180_24f_tmp94);
                    r180_24f_tmp96 = simd_and(r100_2ff_tmp4, r80_7ff_tmp3);
                    r180_24f_tmp97 = simd_and(r180_24f_tmp39, r180_24f_tmp96);
                    r180_24f_tmp98 = simd_or(r180_24f_tmp95, r180_24f_tmp97);
                    r180_24f_tmp99 = simd_or(r180_24f_tmp98, r180_24f_tmp49);
                    r180_24f_tmp100 = simd_and(r180_24f_tmp39, r180_24f_tmp84);
                    r180_24f_tmp101 = simd_or(r180_24f_tmp99, r180_24f_tmp100);
                    r180_24f_tmp102 = simd_and(r180_24f_tmp53, r180_24f_tmp3);
                    r180_24f_tmp103 = simd_or(r180_24f_tmp101, r180_24f_tmp102);
                    r180_24f_tmp104 = simd_and(r80_7ff_tmp7, r180_24f_tmp5);
                    r180_24f_tmp105 = simd_or(r180_24f_tmp103, r180_24f_tmp104);
                    r180_24f_tmp106 = simd_and(r80_7ff_tmp7, r100_24f_tmp3);
                    r180_24f_tmp107 = simd_or(r180_24f_tmp105, r180_24f_tmp106);
                    r180_24f_tmp108 = simd_and(r80_7ff_tmp7, r180_24f_tmp96);
                    r180_24f_tmp109 = simd_or(r180_24f_tmp107, r180_24f_tmp108);
                    r180_24f_tmp110 = simd_or(r180_24f_tmp109, r180_24f_tmp60);
                    r180_24f_tmp111 = simd_and(r80_7ff_tmp7, r180_24f_tmp84);
                    cc_range_1c4_1fe_2 = simd_or(r180_24f_tmp110, r180_24f_tmp111);
                    carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(6), byte_c7_adv));
                    r180_24f_tmp112 = simd_and(byte_c7_adv, cc_range_1c4_1fe_2);
                    struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r180_24f_tmp112);
                    byte_c8 = simd_and(r80_7ff_tmp2, r180_24f_tmp93);
                    r180_24f_tmp113 = simd_andc(tmp9, r80_7ff_tmp4);
                    r180_24f_tmp114 = simd_andc(r180_24f_tmp113, r180_24f_tmp5);
                    r180_24f_tmp115 = simd_andc(r180_24f_tmp114, r180_24f_tmp1);
                    r180_24f_tmp116 = simd_andc(r180_24f_tmp115, r180_24f_tmp93);
                    r180_24f_tmp117 = simd_andc(r180_24f_tmp116, r180_24f_tmp96);
                    r180_24f_tmp118 = simd_andc(r180_24f_tmp117, r180_24f_tmp48);
                    r180_24f_tmp119 = simd_andc(r180_24f_tmp118, r180_24f_tmp84);
                    r180_24f_tmp120 = simd_andc(byte_range_80_8f, r180_24f_tmp119);
                    r180_24f_tmp121 = simd_andc(r80_7ff_tmp19, tmp9);
                    r180_24f_tmp122 = simd_or(r180_24f_tmp120, r180_24f_tmp121);
                    r180_24f_tmp123 = simd_and(r80_7ff_tmp19, r80_7ff_tmp4);
                    r180_24f_tmp124 = simd_or(r180_24f_tmp122, r180_24f_tmp123);
                    r180_24f_tmp125 = simd_and(r80_7ff_tmp19, r180_24f_tmp5);
                    r180_24f_tmp126 = simd_or(r180_24f_tmp124, r180_24f_tmp125);
                    r180_24f_tmp127 = simd_and(r80_7ff_tmp19, r180_24f_tmp1);
                    r180_24f_tmp128 = simd_or(r180_24f_tmp126, r180_24f_tmp127);
                    r180_24f_tmp129 = simd_and(r80_7ff_tmp19, r180_24f_tmp93);
                    r180_24f_tmp130 = simd_or(r180_24f_tmp128, r180_24f_tmp129);
                    r180_24f_tmp131 = simd_and(r80_7ff_tmp19, r180_24f_tmp96);
                    r180_24f_tmp132 = simd_or(r180_24f_tmp130, r180_24f_tmp131);
                    r180_24f_tmp133 = simd_and(r80_7ff_tmp19, r180_24f_tmp48);
                    r180_24f_tmp134 = simd_or(r180_24f_tmp132, r180_24f_tmp133);
                    r180_24f_tmp135 = simd_or(r180_24f_tmp134, r180_24f_tmp85);
                    r180_24f_tmp136 = simd_or(r180_24f_tmp135, r180_24f_tmp87);
                    r180_24f_tmp137 = simd_or(r180_24f_tmp136, r180_24f_tmp40);
                    r180_24f_tmp138 = simd_or(r180_24f_tmp137, r180_24f_tmp42);
                    r180_24f_tmp139 = simd_or(r180_24f_tmp138, r180_24f_tmp91);
                    r180_24f_tmp140 = simd_or(r180_24f_tmp139, r180_24f_tmp94);
                    r180_24f_tmp141 = simd_or(r180_24f_tmp140, r180_24f_tmp97);
                    r180_24f_tmp142 = simd_or(r180_24f_tmp141, r180_24f_tmp49);
                    r180_24f_tmp143 = simd_or(r180_24f_tmp142, r180_24f_tmp100);
                    r180_24f_tmp144 = simd_andc(r80_7ff_tmp7, tmp9);
                    r180_24f_tmp145 = simd_or(r180_24f_tmp143, r180_24f_tmp144);
                    r180_24f_tmp146 = simd_and(r80_7ff_tmp7, r80_7ff_tmp4);
                    r180_24f_tmp147 = simd_or(r180_24f_tmp145, r180_24f_tmp146);
                    r180_24f_tmp148 = simd_and(r80_7ff_tmp7, r180_24f_tmp64);
                    r180_24f_tmp149 = simd_or(r180_24f_tmp147, r180_24f_tmp148);
                    r180_24f_tmp150 = simd_and(r80_7ff_tmp7, r180_24f_tmp16);
                    r180_24f_tmp151 = simd_and(r180_24f_tmp150, r180_24f_tmp3);
                    cc_range_200_23d_2 = simd_or(r180_24f_tmp149, r180_24f_tmp151);
                    carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_c8, carryQ.get_carry_in(7), byte_c8_adv));
                    r180_24f_tmp152 = simd_and(byte_c8_adv, cc_range_200_23d_2);
                    struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r180_24f_tmp152);
                    r180_24f_tmp153 = simd_and(byte_range_80_8f, r180_24f_tmp70);
                    r180_24f_tmp154 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                    r180_24f_tmp155 = simd_xor(basis_bits.bit_5, tmp3);
                    r180_24f_tmp156 = simd_and(r180_24f_tmp154, r180_24f_tmp155);
                    r180_24f_tmp157 = simd_or(r180_24f_tmp153, r180_24f_tmp156);
                    r180_24f_tmp158 = simd_and(byte_range_80_8f, r180_24f_tmp93);
                    r180_24f_tmp159 = simd_or(r180_24f_tmp157, r180_24f_tmp158);
                    r180_24f_tmp160 = simd_and(byte_range_80_8f, r180_24f_tmp96);
                    r180_24f_tmp161 = simd_or(r180_24f_tmp159, r180_24f_tmp160);
                    r180_24f_tmp162 = simd_and(byte_range_80_8f, r180_24f_tmp48);
                    r180_24f_tmp163 = simd_or(r180_24f_tmp161, r180_24f_tmp162);
                    r180_24f_tmp164 = simd_and(byte_range_80_8f, r180_24f_tmp84);
                    cc_range_241_24e_2 = simd_or(r180_24f_tmp163, r180_24f_tmp164);
                    byte_c9_adv = r100_2ff_tmp6;
                    r180_24f_tmp165 = simd_and(byte_c9_adv, cc_range_241_24e_2);
                    struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r180_24f_tmp165);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(5, 3);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 5);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 6);
              }
              r100_3ff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp3 = simd_andc(r100_3ff_tmp2, tmp8);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              r100_3ff_tmp4 = simd_and(r100_3ff_tmp2, r80_7ff_tmp9);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp4);
              byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp6);
              carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(8), r100_3ff_tmp5));
              r100_3ff_tmp6 = simd_and(r100_3ff_tmp5, byte_range_80_af);
              r100_3ff_tmp7 = simd_or(byte_cc, r100_3ff_tmp6);
              if (bitblock::any(r100_3ff_tmp7)) {
                r300_36f_tmp1 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                byte_85 = simd_and(r300_36f_tmp1, r80_7ff_tmp10);
                byte_cd_adv = r100_3ff_tmp5;
                r300_36f_tmp2 = simd_and(byte_cd_adv, byte_85);
                struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r300_36f_tmp2);
              }
              byte_range_b0_bf = r80_7ff_tmp7;
              r100_3ff_tmp8 = simd_and(r100_3ff_tmp5, byte_range_b0_bf);
              r100_3ff_tmp9 = simd_and(r100_3ff_tmp2, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp9);
              r100_3ff_tmp10 = simd_or(r100_3ff_tmp8, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp10) || carryQ.CarryTest(9, 2))) {
                r370_3ff_tmp1 = simd_andc(tmp9, r80_7ff_tmp4);
                r370_3ff_tmp2 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
                r370_3ff_tmp3 = simd_andc(r370_3ff_tmp1, r370_3ff_tmp2);
                r370_3ff_tmp4 = simd_and(r100_3ff_tmp2, tmp3);
                r370_3ff_tmp5 = simd_andc(r370_3ff_tmp3, r370_3ff_tmp4);
                cc_range_370_37f_2 = simd_andc(byte_range_b0_bf, r370_3ff_tmp5);
                byte_cd_adv = r100_3ff_tmp5;
                r370_3ff_tmp6 = simd_and(byte_cd_adv, cc_range_370_37f_2);
                struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r370_3ff_tmp6);
                r370_3ff_tmp7 = simd_and(r100_3ff_tmp2, r80_7ff_tmp3);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp7);
                r370_3ff_tmp8 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                r370_3ff_tmp9 = simd_and(r370_3ff_tmp8, r370_3ff_tmp2);
                r370_3ff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r370_3ff_tmp11 = simd_and(r370_3ff_tmp8, r370_3ff_tmp10);
                r370_3ff_tmp12 = simd_andc(r370_3ff_tmp11, tmp3);
                r370_3ff_tmp13 = simd_or(r370_3ff_tmp9, r370_3ff_tmp12);
                r370_3ff_tmp14 = simd_and(r370_3ff_tmp8, r100_3ff_tmp3);
                r370_3ff_tmp15 = simd_or(r370_3ff_tmp13, r370_3ff_tmp14);
                r370_3ff_tmp16 = simd_and(r370_3ff_tmp8, r100_3ff_tmp9);
                r370_3ff_tmp17 = simd_or(r370_3ff_tmp15, r370_3ff_tmp16);
                r370_3ff_tmp18 = simd_or(tmp7, basis_bits.bit_6);
                r370_3ff_tmp19 = simd_or(basis_bits.bit_3, r370_3ff_tmp18);
                r370_3ff_tmp20 = simd_not(r370_3ff_tmp19);
                r370_3ff_tmp21 = simd_and(basis_bits.bit_3, tmp9);
                r370_3ff_tmp22 = simd_or(simd_and(basis_bits.bit_2, r370_3ff_tmp20), simd_andc(r370_3ff_tmp21, basis_bits.bit_2));
                r370_3ff_tmp23 = simd_and(r80_7ff_tmp5, r370_3ff_tmp22);
                r370_3ff_tmp24 = simd_or(r370_3ff_tmp17, r370_3ff_tmp23);
                r370_3ff_tmp25 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r370_3ff_tmp26 = simd_and(r80_7ff_tmp5, r370_3ff_tmp25);
                r370_3ff_tmp27 = simd_not(basis_bits.bit_5);
                r370_3ff_tmp28 = simd_or(simd_and(basis_bits.bit_4, r370_3ff_tmp27), simd_andc(tmp4, basis_bits.bit_4));
                r370_3ff_tmp29 = simd_and(r370_3ff_tmp26, r370_3ff_tmp28);
                cc_range_386_3a3_2 = simd_or(r370_3ff_tmp24, r370_3ff_tmp29);
                carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(9), byte_ce_adv));
                r370_3ff_tmp30 = simd_and(byte_ce_adv, cc_range_386_3a3_2);
                struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r370_3ff_tmp30);
                byte_cf = simd_and(r80_7ff_tmp2, r370_3ff_tmp4);
                r370_3ff_tmp31 = simd_and(r370_3ff_tmp8, r80_7ff_tmp4);
                r370_3ff_tmp32 = simd_not(r370_3ff_tmp18);
                r370_3ff_tmp33 = simd_or(simd_and(basis_bits.bit_3, r370_3ff_tmp32), simd_andc(r370_3ff_tmp4, basis_bits.bit_3));
                r370_3ff_tmp34 = simd_and(r80_7ff_tmp13, r370_3ff_tmp33);
                r370_3ff_tmp35 = simd_or(r370_3ff_tmp31, r370_3ff_tmp34);
                r370_3ff_tmp36 = simd_and(r80_7ff_tmp19, r80_7ff_tmp8);
                r370_3ff_tmp37 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                r370_3ff_tmp38 = simd_and(r370_3ff_tmp36, r370_3ff_tmp37);
                r370_3ff_tmp39 = simd_or(r370_3ff_tmp35, r370_3ff_tmp38);
                r370_3ff_tmp40 = simd_andc(r370_3ff_tmp10, tmp8);
                r370_3ff_tmp41 = simd_and(r80_7ff_tmp19, r370_3ff_tmp40);
                r370_3ff_tmp42 = simd_or(r370_3ff_tmp39, r370_3ff_tmp41);
                r370_3ff_tmp43 = simd_and(r370_3ff_tmp10, r80_7ff_tmp3);
                r370_3ff_tmp44 = simd_and(r80_7ff_tmp19, r370_3ff_tmp43);
                r370_3ff_tmp45 = simd_or(r370_3ff_tmp42, r370_3ff_tmp44);
                r370_3ff_tmp46 = simd_and(r80_7ff_tmp19, r100_3ff_tmp3);
                r370_3ff_tmp47 = simd_or(r370_3ff_tmp45, r370_3ff_tmp46);
                r370_3ff_tmp48 = simd_and(r80_7ff_tmp19, r370_3ff_tmp7);
                r370_3ff_tmp49 = simd_or(r370_3ff_tmp47, r370_3ff_tmp48);
                r370_3ff_tmp50 = simd_andc(r370_3ff_tmp26, tmp9);
                r370_3ff_tmp51 = simd_or(r370_3ff_tmp49, r370_3ff_tmp50);
                r370_3ff_tmp52 = simd_and(r370_3ff_tmp26, r80_7ff_tmp4);
                r370_3ff_tmp53 = simd_or(r370_3ff_tmp51, r370_3ff_tmp52);
                r370_3ff_tmp54 = simd_andc(r80_7ff_tmp8, tmp8);
                r370_3ff_tmp55 = simd_and(r370_3ff_tmp26, r370_3ff_tmp54);
                r370_3ff_tmp56 = simd_or(r370_3ff_tmp53, r370_3ff_tmp55);
                r370_3ff_tmp57 = simd_and(r370_3ff_tmp26, r370_3ff_tmp2);
                r370_3ff_tmp58 = simd_or(r370_3ff_tmp56, r370_3ff_tmp57);
                r370_3ff_tmp59 = simd_and(r370_3ff_tmp26, r370_3ff_tmp40);
                r370_3ff_tmp60 = simd_or(r370_3ff_tmp58, r370_3ff_tmp59);
                r370_3ff_tmp61 = simd_and(r370_3ff_tmp26, r370_3ff_tmp43);
                r370_3ff_tmp62 = simd_or(r370_3ff_tmp60, r370_3ff_tmp61);
                r370_3ff_tmp63 = simd_and(r370_3ff_tmp26, r100_3ff_tmp3);
                r370_3ff_tmp64 = simd_or(r370_3ff_tmp62, r370_3ff_tmp63);
                r370_3ff_tmp65 = simd_and(r370_3ff_tmp26, r370_3ff_tmp7);
                r370_3ff_tmp66 = simd_or(r370_3ff_tmp64, r370_3ff_tmp65);
                r370_3ff_tmp67 = simd_andc(byte_range_b0_bf, r370_3ff_tmp18);
                r370_3ff_tmp68 = simd_or(r370_3ff_tmp66, r370_3ff_tmp67);
                r370_3ff_tmp69 = simd_andc(r80_7ff_tmp8, basis_bits.bit_6);
                r370_3ff_tmp70 = simd_and(byte_range_b0_bf, r370_3ff_tmp69);
                r370_3ff_tmp71 = simd_or(r370_3ff_tmp68, r370_3ff_tmp70);
                r370_3ff_tmp72 = simd_and(r80_7ff_tmp8, tmp3);
                r370_3ff_tmp73 = simd_and(byte_range_b0_bf, r370_3ff_tmp72);
                r370_3ff_tmp74 = simd_or(r370_3ff_tmp71, r370_3ff_tmp73);
                r370_3ff_tmp75 = simd_and(byte_range_b0_bf, r370_3ff_tmp10);
                r370_3ff_tmp76 = simd_and(r370_3ff_tmp75, r370_3ff_tmp37);
                r370_3ff_tmp77 = simd_or(r370_3ff_tmp74, r370_3ff_tmp76);
                r370_3ff_tmp78 = simd_and(byte_range_b0_bf, r100_3ff_tmp2);
                r370_3ff_tmp79 = simd_and(r370_3ff_tmp78, tmp8);
                cc_range_3c2_3fd_2 = simd_or(r370_3ff_tmp77, r370_3ff_tmp79);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(10), byte_cf_adv));
                r370_3ff_tmp80 = simd_and(byte_cf_adv, cc_range_3c2_3fd_2);
                struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r370_3ff_tmp80);
              }
              else {
                carryQ.CarryDequeueEnqueue(9, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 9);
            }
            r80_7ff_tmp22 = simd_and(byte_range_c0_ff, r80_7ff_tmp18);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp22, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(11, 7))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp22, tmp7);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(11, 4))) {
                byte_d0 = simd_andc(r80_7ff_tmp22, tmp9);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp6);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_d0, carryQ.get_carry_in(11), byte_d0_adv));
                r400_4ff_tmp1 = simd_and(byte_d0_adv, byte_range_80_af);
                struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r400_4ff_tmp1);
                r400_4ff_tmp2 = simd_andc(r80_7ff_tmp9, tmp7);
                byte_d1 = simd_and(r80_7ff_tmp22, r400_4ff_tmp2);
                r400_4ff_tmp3 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                cc_range_460_47e_2 = simd_andc(r400_4ff_tmp3, basis_bits.bit_7);
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_d1, carryQ.get_carry_in(12), byte_d1_adv));
                r400_4ff_tmp4 = simd_and(byte_d1_adv, cc_range_460_47e_2);
                struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r400_4ff_tmp4);
                byte_d2 = simd_and(r80_7ff_tmp22, r80_7ff_tmp4);
                r400_4ff_tmp5 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                r400_4ff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r400_4ff_tmp7 = simd_and(r400_4ff_tmp6, r80_7ff_tmp3);
                r400_4ff_tmp8 = simd_andc(tmp9, r400_4ff_tmp7);
                r400_4ff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                r400_4ff_tmp10 = simd_andc(r400_4ff_tmp9, tmp8);
                r400_4ff_tmp11 = simd_andc(r400_4ff_tmp8, r400_4ff_tmp10);
                r400_4ff_tmp12 = simd_and(r400_4ff_tmp9, r80_7ff_tmp3);
                r400_4ff_tmp13 = simd_andc(r400_4ff_tmp11, r400_4ff_tmp12);
                r400_4ff_tmp14 = simd_andc(r400_4ff_tmp5, r400_4ff_tmp13);
                r400_4ff_tmp15 = simd_andc(r80_7ff_tmp19, tmp9);
                r400_4ff_tmp16 = simd_or(r400_4ff_tmp14, r400_4ff_tmp15);
                r400_4ff_tmp17 = simd_and(r80_7ff_tmp19, r80_7ff_tmp4);
                r400_4ff_tmp18 = simd_or(r400_4ff_tmp16, r400_4ff_tmp17);
                r400_4ff_tmp19 = simd_andc(r80_7ff_tmp8, tmp8);
                r400_4ff_tmp20 = simd_and(r80_7ff_tmp19, r400_4ff_tmp19);
                r400_4ff_tmp21 = simd_or(r400_4ff_tmp18, r400_4ff_tmp20);
                r400_4ff_tmp22 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
                r400_4ff_tmp23 = simd_and(r80_7ff_tmp19, r400_4ff_tmp22);
                r400_4ff_tmp24 = simd_or(r400_4ff_tmp21, r400_4ff_tmp23);
                r400_4ff_tmp25 = simd_andc(r400_4ff_tmp6, tmp8);
                r400_4ff_tmp26 = simd_and(r80_7ff_tmp19, r400_4ff_tmp25);
                r400_4ff_tmp27 = simd_or(r400_4ff_tmp24, r400_4ff_tmp26);
                r400_4ff_tmp28 = simd_and(r80_7ff_tmp19, r400_4ff_tmp7);
                r400_4ff_tmp29 = simd_or(r400_4ff_tmp27, r400_4ff_tmp28);
                r400_4ff_tmp30 = simd_and(r80_7ff_tmp19, r400_4ff_tmp10);
                r400_4ff_tmp31 = simd_or(r400_4ff_tmp29, r400_4ff_tmp30);
                r400_4ff_tmp32 = simd_and(r80_7ff_tmp19, r400_4ff_tmp12);
                r400_4ff_tmp33 = simd_or(r400_4ff_tmp31, r400_4ff_tmp32);
                r400_4ff_tmp34 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r400_4ff_tmp35 = simd_and(r80_7ff_tmp5, r400_4ff_tmp34);
                r400_4ff_tmp36 = simd_andc(r400_4ff_tmp35, tmp9);
                r400_4ff_tmp37 = simd_or(r400_4ff_tmp33, r400_4ff_tmp36);
                r400_4ff_tmp38 = simd_and(r400_4ff_tmp35, r80_7ff_tmp4);
                r400_4ff_tmp39 = simd_or(r400_4ff_tmp37, r400_4ff_tmp38);
                r400_4ff_tmp40 = simd_and(r400_4ff_tmp35, r400_4ff_tmp19);
                r400_4ff_tmp41 = simd_or(r400_4ff_tmp39, r400_4ff_tmp40);
                r400_4ff_tmp42 = simd_and(r400_4ff_tmp35, r400_4ff_tmp22);
                r400_4ff_tmp43 = simd_or(r400_4ff_tmp41, r400_4ff_tmp42);
                r400_4ff_tmp44 = simd_and(r400_4ff_tmp35, r400_4ff_tmp25);
                r400_4ff_tmp45 = simd_or(r400_4ff_tmp43, r400_4ff_tmp44);
                r400_4ff_tmp46 = simd_and(r400_4ff_tmp35, r400_4ff_tmp7);
                r400_4ff_tmp47 = simd_or(r400_4ff_tmp45, r400_4ff_tmp46);
                r400_4ff_tmp48 = simd_and(r400_4ff_tmp35, r400_4ff_tmp10);
                r400_4ff_tmp49 = simd_or(r400_4ff_tmp47, r400_4ff_tmp48);
                r400_4ff_tmp50 = simd_and(r400_4ff_tmp35, r400_4ff_tmp12);
                r400_4ff_tmp51 = simd_or(r400_4ff_tmp49, r400_4ff_tmp50);
                r400_4ff_tmp52 = simd_andc(r80_7ff_tmp7, tmp9);
                r400_4ff_tmp53 = simd_or(r400_4ff_tmp51, r400_4ff_tmp52);
                r400_4ff_tmp54 = simd_and(r80_7ff_tmp7, r80_7ff_tmp4);
                r400_4ff_tmp55 = simd_or(r400_4ff_tmp53, r400_4ff_tmp54);
                r400_4ff_tmp56 = simd_and(r80_7ff_tmp7, r400_4ff_tmp19);
                r400_4ff_tmp57 = simd_or(r400_4ff_tmp55, r400_4ff_tmp56);
                r400_4ff_tmp58 = simd_and(r80_7ff_tmp7, r400_4ff_tmp22);
                r400_4ff_tmp59 = simd_or(r400_4ff_tmp57, r400_4ff_tmp58);
                r400_4ff_tmp60 = simd_and(r80_7ff_tmp7, r400_4ff_tmp25);
                r400_4ff_tmp61 = simd_or(r400_4ff_tmp59, r400_4ff_tmp60);
                r400_4ff_tmp62 = simd_and(r80_7ff_tmp7, r400_4ff_tmp7);
                r400_4ff_tmp63 = simd_or(r400_4ff_tmp61, r400_4ff_tmp62);
                r400_4ff_tmp64 = simd_and(r80_7ff_tmp7, r400_4ff_tmp10);
                r400_4ff_tmp65 = simd_or(r400_4ff_tmp63, r400_4ff_tmp64);
                r400_4ff_tmp66 = simd_and(r80_7ff_tmp7, r400_4ff_tmp12);
                cc_range_480_4be_2 = simd_or(r400_4ff_tmp65, r400_4ff_tmp66);
                carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(13), byte_d2_adv));
                r400_4ff_tmp67 = simd_and(byte_d2_adv, cc_range_480_4be_2);
                struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r400_4ff_tmp67);
                byte_d3 = simd_and(r80_7ff_tmp22, r80_7ff_tmp12);
                r400_4ff_tmp68 = simd_or(tmp7, basis_bits.bit_6);
                r400_4ff_tmp69 = simd_andc(r400_4ff_tmp68, r80_7ff_tmp12);
                r400_4ff_tmp70 = simd_andc(r400_4ff_tmp69, r80_7ff_tmp10);
                r400_4ff_tmp71 = simd_and(r80_7ff_tmp8, tmp3);
                r400_4ff_tmp72 = simd_andc(r400_4ff_tmp70, r400_4ff_tmp71);
                r400_4ff_tmp73 = simd_and(r400_4ff_tmp6, r80_7ff_tmp9);
                r400_4ff_tmp74 = simd_andc(r400_4ff_tmp72, r400_4ff_tmp73);
                r400_4ff_tmp75 = simd_and(r400_4ff_tmp6, tmp3);
                r400_4ff_tmp76 = simd_andc(r400_4ff_tmp74, r400_4ff_tmp75);
                r400_4ff_tmp77 = simd_and(r400_4ff_tmp9, r80_7ff_tmp9);
                r400_4ff_tmp78 = simd_andc(r400_4ff_tmp76, r400_4ff_tmp77);
                r400_4ff_tmp79 = simd_andc(r400_4ff_tmp5, r400_4ff_tmp78);
                r400_4ff_tmp80 = simd_or(r400_4ff_tmp79, r400_4ff_tmp15);
                r400_4ff_tmp81 = simd_or(r400_4ff_tmp80, r400_4ff_tmp17);
                r400_4ff_tmp82 = simd_or(r400_4ff_tmp81, r400_4ff_tmp20);
                r400_4ff_tmp83 = simd_or(r400_4ff_tmp82, r400_4ff_tmp23);
                r400_4ff_tmp84 = simd_or(r400_4ff_tmp83, r400_4ff_tmp26);
                r400_4ff_tmp85 = simd_or(r400_4ff_tmp84, r400_4ff_tmp28);
                r400_4ff_tmp86 = simd_or(r400_4ff_tmp85, r400_4ff_tmp30);
                r400_4ff_tmp87 = simd_or(r400_4ff_tmp86, r400_4ff_tmp32);
                r400_4ff_tmp88 = simd_or(r400_4ff_tmp87, r400_4ff_tmp36);
                r400_4ff_tmp89 = simd_or(r400_4ff_tmp88, r400_4ff_tmp38);
                r400_4ff_tmp90 = simd_or(r400_4ff_tmp89, r400_4ff_tmp40);
                r400_4ff_tmp91 = simd_or(r400_4ff_tmp90, r400_4ff_tmp42);
                r400_4ff_tmp92 = simd_or(r400_4ff_tmp91, r400_4ff_tmp44);
                r400_4ff_tmp93 = simd_or(r400_4ff_tmp92, r400_4ff_tmp46);
                r400_4ff_tmp94 = simd_or(r400_4ff_tmp93, r400_4ff_tmp48);
                r400_4ff_tmp95 = simd_or(r400_4ff_tmp94, r400_4ff_tmp50);
                r400_4ff_tmp96 = simd_or(r400_4ff_tmp95, r400_4ff_tmp52);
                r400_4ff_tmp97 = simd_or(r400_4ff_tmp96, r400_4ff_tmp54);
                r400_4ff_tmp98 = simd_or(r400_4ff_tmp97, r400_4ff_tmp56);
                r400_4ff_tmp99 = simd_or(r400_4ff_tmp98, r400_4ff_tmp58);
                r400_4ff_tmp100 = simd_or(r400_4ff_tmp99, r400_4ff_tmp60);
                r400_4ff_tmp101 = simd_or(r400_4ff_tmp100, r400_4ff_tmp62);
                r400_4ff_tmp102 = simd_or(r400_4ff_tmp101, r400_4ff_tmp64);
                cc_range_4c0_4fe_2 = simd_or(r400_4ff_tmp102, r400_4ff_tmp66);
                carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(14), byte_d3_adv));
                r400_4ff_tmp103 = simd_and(byte_d3_adv, cc_range_4c0_4fe_2);
                struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r400_4ff_tmp103);
              }
              else {
                carryQ.CarryDequeueEnqueue(11, 4);
              }
              r400_5ff_tmp1 = simd_andc(r80_7ff_tmp8, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp22, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp22, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(15), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(16, 2))) {
                r500_58f_tmp1 = simd_andc(r80_7ff_tmp8, tmp8);
                byte_d4 = simd_and(r80_7ff_tmp22, r500_58f_tmp1);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp6);
                carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(16), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp3)) {
                  cc_range_500_52e_2 = simd_andc(byte_range_80_af, basis_bits.bit_7);
                  byte_d4_adv = r500_58f_tmp2;
                  r500_52f_tmp1 = simd_and(byte_d4_adv, cc_range_500_52e_2);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r500_52f_tmp1);
                }
                byte_range_b0_bf = r80_7ff_tmp7;
                r500_58f_tmp4 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                byte_d5 = simd_and(r80_7ff_tmp22, r80_7ff_tmp10);
                r500_58f_tmp5 = simd_or(r500_58f_tmp4, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp4);
                if ((bitblock::any(r500_58f_tmp6) || carryQ.CarryTest(17, 1))) {
                  r530_58f_tmp1 = simd_or(basis_bits.bit_5, tmp8);
                  r530_58f_tmp2 = simd_or(basis_bits.bit_4, r530_58f_tmp1);
                  byte_range_b1_bf = simd_and(byte_range_b0_bf, r530_58f_tmp2);
                  byte_d4_adv = r500_58f_tmp2;
                  r530_58f_tmp3 = simd_and(byte_d4_adv, byte_range_b1_bf);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r530_58f_tmp3);
                  byte_range_80_96 = r80_7ff_tmp17;
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(17), byte_d5_adv));
                  r530_58f_tmp4 = simd_and(byte_d5_adv, byte_range_80_96);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r530_58f_tmp4);
                  r530_58f_tmp5 = simd_and(r80_7ff_tmp8, tmp3);
                  byte_87 = simd_and(byte_range_80_8f, r530_58f_tmp5);
                  byte_d6_adv = r400_5ff_tmp3;
                  r530_58f_tmp6 = simd_and(byte_d6_adv, byte_87);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r530_58f_tmp6);
                }
                else {
                  carryQ.CarryDequeueEnqueue(17, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(16, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(11, 7);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 18);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(18, 31))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp7);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp8);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(18), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(19, 21))) {
              r800_4dff_tmp1 = simd_or(tmp7, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(19, 11))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp7);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(19, 11))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, tmp7);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(19), r1000_1fff_tmp5));
                  sequence_e1_82 = simd_and(r1000_1fff_tmp5, byte_82);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(20), sequence_e1_82_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_82_adv, byte_range_a0_bf);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r1000_1fff_tmp6);
                  r1000_1fff_tmp7 = simd_andc(tmp3, tmp7);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp7);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  r1000_1fff_tmp8 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp10 = simd_andc(r1000_1fff_tmp8, r1000_1fff_tmp9);
                  r1000_1fff_tmp11 = simd_and(r800_ffff_tmp1, tmp3);
                  r1000_1fff_tmp12 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp11);
                  r1000_1fff_tmp13 = simd_or(r1000_1fff_tmp10, r1000_1fff_tmp12);
                  r1000_1fff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp15 = simd_and(r1000_1fff_tmp14, r800_1fff_tmp1);
                  r1000_1fff_tmp16 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp15);
                  cc_range_10c0_10cd_3 = simd_or(r1000_1fff_tmp13, r1000_1fff_tmp16);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(21), sequence_e1_83_adv));
                  r1000_1fff_tmp17 = simd_and(sequence_e1_83_adv, cc_range_10c0_10cd_3);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r1000_1fff_tmp17);
                  r1000_1fff_tmp18 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp19 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp18);
                  r1000_1fff_tmp20 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp21 = simd_andc(r1000_1fff_tmp20, tmp8);
                  byte_b8 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp21);
                  sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
                  cc_range_1e00_1e3e_3 = simd_andc(r800_ffff_tmp3, basis_bits.bit_7);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(22), sequence_e1_b8_adv));
                  r1000_1fff_tmp22 = simd_and(sequence_e1_b8_adv, cc_range_1e00_1e3e_3);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r1000_1fff_tmp22);
                  r1000_1fff_tmp23 = simd_and(r1000_1fff_tmp20, r800_1fff_tmp1);
                  byte_b9 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp23);
                  sequence_e1_b9 = simd_and(byte_e1_adv, byte_b9);
                  cc_range_1e40_1e7e_3 = cc_range_1e00_1e3e_3;
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e1_b9, carryQ.get_carry_in(23), sequence_e1_b9_adv));
                  r1000_1fff_tmp24 = simd_and(sequence_e1_b9_adv, cc_range_1e40_1e7e_3);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r1000_1fff_tmp24);
                  r1000_1fff_tmp25 = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp3);
                  byte_ba = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp25);
                  sequence_e1_ba = simd_and(byte_e1_adv, byte_ba);
                  r1000_1fff_tmp26 = simd_andc(tmp9, r1000_1fff_tmp4);
                  r1000_1fff_tmp27 = simd_andc(r1000_1fff_tmp26, r800_ffff_tmp2);
                  r1000_1fff_tmp28 = simd_and(r800_ffff_tmp1, r1000_1fff_tmp3);
                  r1000_1fff_tmp29 = simd_andc(r1000_1fff_tmp27, r1000_1fff_tmp28);
                  r1000_1fff_tmp30 = simd_andc(r1000_1fff_tmp29, r1000_1fff_tmp21);
                  r1000_1fff_tmp31 = simd_andc(r1000_1fff_tmp30, r1000_1fff_tmp25);
                  r1000_1fff_tmp32 = simd_andc(r1000_1fff_tmp14, tmp8);
                  r1000_1fff_tmp33 = simd_andc(r1000_1fff_tmp31, r1000_1fff_tmp32);
                  r1000_1fff_tmp34 = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp3);
                  r1000_1fff_tmp35 = simd_andc(r1000_1fff_tmp33, r1000_1fff_tmp34);
                  r1000_1fff_tmp36 = simd_andc(r1000_1fff_tmp2, r1000_1fff_tmp35);
                  r1000_1fff_tmp37 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp38 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp37);
                  r1000_1fff_tmp39 = simd_andc(r1000_1fff_tmp38, tmp9);
                  r1000_1fff_tmp40 = simd_or(r1000_1fff_tmp36, r1000_1fff_tmp39);
                  r1000_1fff_tmp41 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp4);
                  r1000_1fff_tmp42 = simd_or(r1000_1fff_tmp40, r1000_1fff_tmp41);
                  r1000_1fff_tmp43 = simd_and(r1000_1fff_tmp38, r800_ffff_tmp2);
                  r1000_1fff_tmp44 = simd_or(r1000_1fff_tmp42, r1000_1fff_tmp43);
                  r1000_1fff_tmp45 = simd_and(r1000_1fff_tmp20, basis_bits.bit_6);
                  r1000_1fff_tmp46 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp45);
                  r1000_1fff_tmp47 = simd_or(r1000_1fff_tmp44, r1000_1fff_tmp46);
                  r1000_1fff_tmp48 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp34);
                  r1000_1fff_tmp49 = simd_or(r1000_1fff_tmp47, r1000_1fff_tmp48);
                  r1000_1fff_tmp50 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r1000_1fff_tmp51 = simd_andc(r1000_1fff_tmp50, tmp9);
                  r1000_1fff_tmp52 = simd_or(r1000_1fff_tmp49, r1000_1fff_tmp51);
                  r1000_1fff_tmp53 = simd_and(r1000_1fff_tmp50, r1000_1fff_tmp4);
                  r1000_1fff_tmp54 = simd_or(r1000_1fff_tmp52, r1000_1fff_tmp53);
                  r1000_1fff_tmp55 = simd_and(r1000_1fff_tmp50, r800_ffff_tmp2);
                  r1000_1fff_tmp56 = simd_or(r1000_1fff_tmp54, r1000_1fff_tmp55);
                  r1000_1fff_tmp57 = simd_and(r1000_1fff_tmp50, r1000_1fff_tmp28);
                  r1000_1fff_tmp58 = simd_or(r1000_1fff_tmp56, r1000_1fff_tmp57);
                  r1000_1fff_tmp59 = simd_and(r1000_1fff_tmp50, r1000_1fff_tmp21);
                  r1000_1fff_tmp60 = simd_or(r1000_1fff_tmp58, r1000_1fff_tmp59);
                  r1000_1fff_tmp61 = simd_and(r1000_1fff_tmp50, r1000_1fff_tmp25);
                  r1000_1fff_tmp62 = simd_or(r1000_1fff_tmp60, r1000_1fff_tmp61);
                  r1000_1fff_tmp63 = simd_and(r1000_1fff_tmp50, r1000_1fff_tmp32);
                  r1000_1fff_tmp64 = simd_or(r1000_1fff_tmp62, r1000_1fff_tmp63);
                  r1000_1fff_tmp65 = simd_and(r1000_1fff_tmp50, r1000_1fff_tmp34);
                  r1000_1fff_tmp66 = simd_or(r1000_1fff_tmp64, r1000_1fff_tmp65);
                  r1000_1fff_tmp67 = simd_andc(r1000_1fff_tmp19, tmp9);
                  r1000_1fff_tmp68 = simd_or(r1000_1fff_tmp66, r1000_1fff_tmp67);
                  r1000_1fff_tmp69 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp4);
                  r1000_1fff_tmp70 = simd_or(r1000_1fff_tmp68, r1000_1fff_tmp69);
                  r1000_1fff_tmp71 = simd_and(r1000_1fff_tmp19, r800_ffff_tmp2);
                  r1000_1fff_tmp72 = simd_or(r1000_1fff_tmp70, r1000_1fff_tmp71);
                  r1000_1fff_tmp73 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp28);
                  r1000_1fff_tmp74 = simd_or(r1000_1fff_tmp72, r1000_1fff_tmp73);
                  r1000_1fff_tmp75 = simd_or(r1000_1fff_tmp74, byte_b8);
                  r1000_1fff_tmp76 = simd_or(r1000_1fff_tmp75, byte_ba);
                  r1000_1fff_tmp77 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp32);
                  r1000_1fff_tmp78 = simd_or(r1000_1fff_tmp76, r1000_1fff_tmp77);
                  r1000_1fff_tmp79 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp34);
                  cc_range_1e80_1ebe_3 = simd_or(r1000_1fff_tmp78, r1000_1fff_tmp79);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e1_ba, carryQ.get_carry_in(24), sequence_e1_ba_adv));
                  r1000_1fff_tmp80 = simd_and(sequence_e1_ba_adv, cc_range_1e80_1ebe_3);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r1000_1fff_tmp80);
                  r1000_1fff_tmp81 = simd_and(r1000_1fff_tmp20, tmp3);
                  byte_bb = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp81);
                  sequence_e1_bb = simd_and(byte_e1_adv, byte_bb);
                  cc_range_1ec0_1efe_3 = cc_range_1e00_1e3e_3;
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e1_bb, carryQ.get_carry_in(25), sequence_e1_bb_adv));
                  r1000_1fff_tmp82 = simd_and(sequence_e1_bb_adv, cc_range_1ec0_1efe_3);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r1000_1fff_tmp82);
                  byte_bc = r1000_1fff_tmp77;
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  r1000_1fff_tmp83 = simd_and(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp84 = simd_and(r1000_1fff_tmp38, basis_bits.bit_4);
                  r1000_1fff_tmp85 = simd_andc(r1000_1fff_tmp84, r1000_1fff_tmp9);
                  r1000_1fff_tmp86 = simd_or(r1000_1fff_tmp83, r1000_1fff_tmp85);
                  r1000_1fff_tmp87 = simd_and(r1000_1fff_tmp50, basis_bits.bit_4);
                  r1000_1fff_tmp88 = simd_or(r1000_1fff_tmp86, r1000_1fff_tmp87);
                  r1000_1fff_tmp89 = simd_and(r1000_1fff_tmp19, basis_bits.bit_4);
                  cc_range_1f08_1f38_3 = simd_or(r1000_1fff_tmp88, r1000_1fff_tmp89);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(26), sequence_e1_bc_adv));
                  r1000_1fff_tmp90 = simd_and(sequence_e1_bc_adv, cc_range_1f08_1f38_3);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r1000_1fff_tmp90);
                  byte_bd = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp15);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  r1000_1fff_tmp91 = simd_andc(r1000_1fff_tmp83, r1000_1fff_tmp9);
                  r1000_1fff_tmp92 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp23);
                  r1000_1fff_tmp93 = simd_or(r1000_1fff_tmp91, r1000_1fff_tmp92);
                  r1000_1fff_tmp94 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp81);
                  r1000_1fff_tmp95 = simd_or(r1000_1fff_tmp93, r1000_1fff_tmp94);
                  r1000_1fff_tmp96 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp15);
                  r1000_1fff_tmp97 = simd_or(r1000_1fff_tmp95, r1000_1fff_tmp96);
                  r1000_1fff_tmp98 = simd_and(r1000_1fff_tmp14, tmp3);
                  r1000_1fff_tmp99 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp98);
                  r1000_1fff_tmp100 = simd_or(r1000_1fff_tmp97, r1000_1fff_tmp99);
                  cc_range_1f48_1f68_3 = simd_or(r1000_1fff_tmp100, r1000_1fff_tmp87);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(27), sequence_e1_bd_adv));
                  r1000_1fff_tmp101 = simd_and(sequence_e1_bd_adv, cc_range_1f48_1f68_3);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r1000_1fff_tmp101);
                  byte_be = r1000_1fff_tmp79;
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  r1000_1fff_tmp102 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp18);
                  r1000_1fff_tmp103 = simd_andc(r1000_1fff_tmp19, basis_bits.bit_4);
                  r1000_1fff_tmp104 = simd_not(tmp8);
                  r1000_1fff_tmp105 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp104), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r1000_1fff_tmp106 = simd_and(r1000_1fff_tmp103, r1000_1fff_tmp105);
                  r1000_1fff_tmp107 = simd_or(r1000_1fff_tmp102, r1000_1fff_tmp106);
                  r1000_1fff_tmp108 = simd_and(basis_bits.bit_5, tmp8);
                  r1000_1fff_tmp109 = simd_not(r1000_1fff_tmp108);
                  r1000_1fff_tmp110 = simd_and(basis_bits.bit_5, tmp3);
                  r1000_1fff_tmp111 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp109), simd_andc(r1000_1fff_tmp110, basis_bits.bit_4));
                  r1000_1fff_tmp112 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp111);
                  cc_range_1f80_1fb7_3 = simd_or(r1000_1fff_tmp107, r1000_1fff_tmp112);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(28), sequence_e1_be_adv));
                  r1000_1fff_tmp113 = simd_and(sequence_e1_be_adv, cc_range_1f80_1fb7_3);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r1000_1fff_tmp113);
                  byte_bf = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp98);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  r1000_1fff_tmp114 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp105);
                  r1000_1fff_tmp115 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp111);
                  r1000_1fff_tmp116 = simd_or(r1000_1fff_tmp114, r1000_1fff_tmp115);
                  r1000_1fff_tmp117 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp20);
                  r1000_1fff_tmp118 = simd_or(r1000_1fff_tmp116, r1000_1fff_tmp117);
                  r1000_1fff_tmp119 = simd_andc(r1000_1fff_tmp87, r1000_1fff_tmp108);
                  r1000_1fff_tmp120 = simd_or(r1000_1fff_tmp118, r1000_1fff_tmp119);
                  r1000_1fff_tmp121 = simd_or(r1000_1fff_tmp120, r1000_1fff_tmp106);
                  cc_range_1fc2_1ff7_3 = simd_or(r1000_1fff_tmp121, r1000_1fff_tmp112);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(29), sequence_e1_bf_adv));
                  r1000_1fff_tmp122 = simd_and(sequence_e1_bf_adv, cc_range_1fc2_1ff7_3);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r1000_1fff_tmp122);
                }
                else {
                  carryQ.CarryDequeueEnqueue(19, 11);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(19, 11);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp7);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(30, 10))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp7);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(30, 10))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp2);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(30), r2000_2fff_tmp3));
                  sequence_e2_84 = simd_and(r2000_2fff_tmp3, byte_84);
                  byte_e2_adv = r2000_2fff_tmp3;
                  r2000_2fff_tmp4 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r2000_2fff_tmp5 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  r2000_2fff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp7 = simd_and(r2000_2fff_tmp6, basis_bits.bit_6);
                  r2000_2fff_tmp8 = simd_or(r2000_2fff_tmp5, r2000_2fff_tmp7);
                  r2000_2fff_tmp9 = simd_and(r2000_2fff_tmp4, r2000_2fff_tmp8);
                  r2000_2fff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp11 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp10);
                  r2000_2fff_tmp12 = simd_and(r2000_2fff_tmp11, r2000_4dff_tmp2);
                  cc_range_2126_2132_3 = simd_or(r2000_2fff_tmp9, r2000_2fff_tmp12);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(31), sequence_e2_84_adv));
                  r2000_2fff_tmp13 = simd_and(sequence_e2_84_adv, cc_range_2126_2132_3);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r2000_2fff_tmp13);
                  r2000_2fff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp15 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp14);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp15);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  byte_range_a0_af = r2000_2fff_tmp4;
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(32), sequence_e2_85_adv));
                  r2000_2fff_tmp16 = simd_and(sequence_e2_85_adv, byte_range_a0_af);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r2000_2fff_tmp16);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp5);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp17 = simd_andc(tmp3, tmp7);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp17);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(33), sequence_e2_86_adv));
                  r2000_2fff_tmp18 = simd_and(sequence_e2_86_adv, byte_83);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r2000_2fff_tmp18);
                  r2000_2fff_tmp19 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp20 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp19);
                  byte_92 = simd_and(r2000_2fff_tmp20, r2000_4dff_tmp2);
                  sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
                  r2000_2fff_tmp21 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp22 = simd_or(basis_bits.bit_4, r2000_2fff_tmp21);
                  byte_range_b6_bf = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp22);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_92, carryQ.get_carry_in(34), sequence_e2_92_adv));
                  r2000_2fff_tmp23 = simd_and(sequence_e2_92_adv, byte_range_b6_bf);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r2000_2fff_tmp23);
                  byte_93 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp17);
                  sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
                  byte_range_80_8f = r2000_2fff_tmp2;
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(35), sequence_e2_93_adv));
                  r2000_2fff_tmp24 = simd_and(sequence_e2_93_adv, byte_range_80_8f);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r2000_2fff_tmp24);
                  byte_b0 = simd_andc(r2000_2fff_tmp11, tmp9);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  r2000_2fff_tmp25 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp26 = simd_and(r2000_2fff_tmp25, tmp3);
                  r2000_2fff_tmp27 = simd_or(basis_bits.bit_3, r2000_2fff_tmp26);
                  r2000_2fff_tmp28 = simd_and(basis_bits.bit_2, r2000_2fff_tmp27);
                  byte_range_80_ae = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp28);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(36), sequence_e2_b0_adv));
                  r2000_2fff_tmp29 = simd_and(sequence_e2_b0_adv, byte_range_80_ae);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r2000_2fff_tmp29);
                  r2000_2fff_tmp30 = simd_andc(r2000_2fff_tmp14, tmp7);
                  byte_b1 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp30);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp31 = simd_andc(byte_range_a0_af, tmp9);
                  r2000_2fff_tmp32 = simd_andc(byte_range_a0_af, basis_bits.bit_4);
                  r2000_2fff_tmp33 = simd_not(tmp8);
                  r2000_2fff_tmp34 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp33), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r2000_2fff_tmp35 = simd_and(r2000_2fff_tmp32, r2000_2fff_tmp34);
                  r2000_2fff_tmp36 = simd_or(r2000_2fff_tmp31, r2000_2fff_tmp35);
                  r2000_2fff_tmp37 = simd_and(r800_ffff_tmp1, tmp3);
                  r2000_2fff_tmp38 = simd_and(byte_range_a0_af, r2000_2fff_tmp37);
                  r2000_2fff_tmp39 = simd_or(r2000_2fff_tmp36, r2000_2fff_tmp38);
                  r2000_2fff_tmp40 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp14);
                  r2000_2fff_tmp41 = simd_and(byte_range_a0_af, r2000_2fff_tmp40);
                  r2000_2fff_tmp42 = simd_or(r2000_2fff_tmp39, r2000_2fff_tmp41);
                  r2000_2fff_tmp43 = simd_and(r2000_2fff_tmp6, tmp3);
                  r2000_2fff_tmp44 = simd_and(byte_range_a0_af, r2000_2fff_tmp43);
                  r2000_2fff_tmp45 = simd_or(r2000_2fff_tmp42, r2000_2fff_tmp44);
                  r2000_2fff_tmp46 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp47 = simd_not(tmp9);
                  r2000_2fff_tmp48 = simd_and(r2000_2fff_tmp25, tmp8);
                  r2000_2fff_tmp49 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp47), simd_andc(r2000_2fff_tmp48, basis_bits.bit_3));
                  r2000_2fff_tmp50 = simd_and(r2000_2fff_tmp46, r2000_2fff_tmp49);
                  r2000_2fff_tmp51 = simd_or(r2000_2fff_tmp45, r2000_2fff_tmp50);
                  r2000_2fff_tmp52 = simd_or(r2000_2fff_tmp51, r2000_2fff_tmp12);
                  r2000_2fff_tmp53 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp15);
                  r2000_2fff_tmp54 = simd_or(r2000_2fff_tmp52, r2000_2fff_tmp53);
                  r2000_2fff_tmp55 = simd_and(r2000_2fff_tmp25, basis_bits.bit_6);
                  r2000_2fff_tmp56 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp55);
                  cc_range_2c60_2c7e_3 = simd_or(r2000_2fff_tmp54, r2000_2fff_tmp56);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(37), sequence_e2_b1_adv));
                  r2000_2fff_tmp57 = simd_and(sequence_e2_b1_adv, cc_range_2c60_2c7e_3);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r2000_2fff_tmp57);
                  byte_b2 = r2000_2fff_tmp12;
                  sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
                  cc_range_2c80_2cbe_3 = simd_andc(r800_ffff_tmp3, basis_bits.bit_7);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(38), sequence_e2_b2_adv));
                  r2000_2fff_tmp58 = simd_and(sequence_e2_b2_adv, cc_range_2c80_2cbe_3);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r2000_2fff_tmp58);
                  byte_b3 = simd_and(r2000_2fff_tmp11, r2000_2fff_tmp17);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp59 = simd_andc(tmp9, r2000_4dff_tmp2);
                  r2000_2fff_tmp60 = simd_andc(r2000_2fff_tmp59, r800_ffff_tmp2);
                  r2000_2fff_tmp61 = simd_andc(r2000_2fff_tmp60, r2000_2fff_tmp5);
                  r2000_2fff_tmp62 = simd_andc(r2000_2fff_tmp6, tmp8);
                  r2000_2fff_tmp63 = simd_andc(r2000_2fff_tmp61, r2000_2fff_tmp62);
                  r2000_2fff_tmp64 = simd_and(r2000_2fff_tmp6, r2000_4dff_tmp1);
                  r2000_2fff_tmp65 = simd_andc(r2000_2fff_tmp63, r2000_2fff_tmp64);
                  r2000_2fff_tmp66 = simd_andc(r2000_2fff_tmp25, tmp8);
                  r2000_2fff_tmp67 = simd_andc(r2000_2fff_tmp65, r2000_2fff_tmp66);
                  r2000_2fff_tmp68 = simd_and(r2000_2fff_tmp25, r2000_4dff_tmp1);
                  r2000_2fff_tmp69 = simd_andc(r2000_2fff_tmp67, r2000_2fff_tmp68);
                  r2000_2fff_tmp70 = simd_andc(byte_range_80_8f, r2000_2fff_tmp69);
                  r2000_2fff_tmp71 = simd_andc(r2000_2fff_tmp20, tmp9);
                  r2000_2fff_tmp72 = simd_or(r2000_2fff_tmp70, r2000_2fff_tmp71);
                  r2000_2fff_tmp73 = simd_or(r2000_2fff_tmp72, byte_92);
                  r2000_2fff_tmp74 = simd_and(r2000_2fff_tmp20, r800_ffff_tmp2);
                  r2000_2fff_tmp75 = simd_or(r2000_2fff_tmp73, r2000_2fff_tmp74);
                  r2000_2fff_tmp76 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp5);
                  r2000_2fff_tmp77 = simd_or(r2000_2fff_tmp75, r2000_2fff_tmp76);
                  r2000_2fff_tmp78 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp62);
                  r2000_2fff_tmp79 = simd_or(r2000_2fff_tmp77, r2000_2fff_tmp78);
                  r2000_2fff_tmp80 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp64);
                  r2000_2fff_tmp81 = simd_or(r2000_2fff_tmp79, r2000_2fff_tmp80);
                  r2000_2fff_tmp82 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp66);
                  r2000_2fff_tmp83 = simd_or(r2000_2fff_tmp81, r2000_2fff_tmp82);
                  r2000_2fff_tmp84 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp68);
                  r2000_2fff_tmp85 = simd_or(r2000_2fff_tmp83, r2000_2fff_tmp84);
                  r2000_2fff_tmp86 = simd_or(r2000_2fff_tmp85, r2000_2fff_tmp31);
                  r2000_2fff_tmp87 = simd_and(byte_range_a0_af, r2000_4dff_tmp2);
                  r2000_2fff_tmp88 = simd_or(r2000_2fff_tmp86, r2000_2fff_tmp87);
                  r2000_2fff_tmp89 = simd_or(r2000_2fff_tmp88, r2000_2fff_tmp44);
                  r2000_2fff_tmp90 = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp14);
                  r2000_2fff_tmp91 = simd_and(byte_range_a0_af, r2000_2fff_tmp90);
                  r2000_2fff_tmp92 = simd_or(r2000_2fff_tmp89, r2000_2fff_tmp91);
                  cc_range_2cc0_2cf2_3 = simd_or(r2000_2fff_tmp92, byte_b2);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(39), sequence_e2_b3_adv));
                  r2000_2fff_tmp93 = simd_and(sequence_e2_b3_adv, cc_range_2cc0_2cf2_3);
                  struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r2000_2fff_tmp93);
                }
                else {
                  carryQ.CarryDequeueEnqueue(30, 10);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(30, 10);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(19, 21);
            }
            r800_ffff_tmp9 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp9, r800_ffff_tmp10);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(40, 9))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_99 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[40] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(40), ra000_ffff_tmp8));
              sequence_ea_99 = simd_and(ra000_ffff_tmp8, byte_99);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp9, basis_bits.bit_6);
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_3, ra000_ffff_tmp10);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_2, ra000_ffff_tmp11);
              ra000_ffff_tmp13 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp12);
              cc_range_a640_a66c_3 = simd_andc(ra000_ffff_tmp13, basis_bits.bit_7);
              carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(41), sequence_ea_99_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ea_99_adv, cc_range_a640_a66c_3);
              struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, ra000_ffff_tmp14);
              byte_9a = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp15 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp16 = simd_and(basis_bits.bit_3, ra000_ffff_tmp9);
              ra000_ffff_tmp17 = simd_andc(ra000_ffff_tmp15, ra000_ffff_tmp16);
              cc_range_a680_a69a_3 = simd_andc(ra000_ffff_tmp17, basis_bits.bit_7);
              carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(42), sequence_ea_9a_adv));
              ra000_ffff_tmp18 = simd_and(sequence_ea_9a_adv, cc_range_a680_a69a_3);
              struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, ra000_ffff_tmp18);
              ra000_ffff_tmp19 = simd_andc(ra000_ffff_tmp9, tmp8);
              byte_9c = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp19);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              ra000_ffff_tmp20 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
              ra000_ffff_tmp21 = simd_andc(ra000_ffff_tmp2, tmp7);
              ra000_ffff_tmp22 = simd_or(ra000_ffff_tmp21, r800_ffff_tmp2);
              ra000_ffff_tmp23 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp2);
              ra000_ffff_tmp24 = simd_or(ra000_ffff_tmp22, ra000_ffff_tmp23);
              ra000_ffff_tmp25 = simd_andc(ra000_ffff_tmp1, tmp8);
              ra000_ffff_tmp26 = simd_or(ra000_ffff_tmp24, ra000_ffff_tmp25);
              ra000_ffff_tmp27 = simd_or(ra000_ffff_tmp26, ra000_ffff_tmp3);
              ra000_ffff_tmp28 = simd_or(ra000_ffff_tmp27, ra000_ffff_tmp19);
              ra000_ffff_tmp29 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp2);
              ra000_ffff_tmp30 = simd_or(ra000_ffff_tmp28, ra000_ffff_tmp29);
              ra000_ffff_tmp31 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp30);
              ra000_ffff_tmp32 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp33 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp32);
              ra000_ffff_tmp34 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp21);
              ra000_ffff_tmp35 = simd_or(ra000_ffff_tmp31, ra000_ffff_tmp34);
              ra000_ffff_tmp36 = simd_and(ra000_ffff_tmp33, r800_ffff_tmp2);
              ra000_ffff_tmp37 = simd_or(ra000_ffff_tmp35, ra000_ffff_tmp36);
              ra000_ffff_tmp38 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp23);
              ra000_ffff_tmp39 = simd_or(ra000_ffff_tmp37, ra000_ffff_tmp38);
              ra000_ffff_tmp40 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp25);
              ra000_ffff_tmp41 = simd_or(ra000_ffff_tmp39, ra000_ffff_tmp40);
              ra000_ffff_tmp42 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp3);
              ra000_ffff_tmp43 = simd_or(ra000_ffff_tmp41, ra000_ffff_tmp42);
              ra000_ffff_tmp44 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp19);
              ra000_ffff_tmp45 = simd_or(ra000_ffff_tmp43, ra000_ffff_tmp44);
              ra000_ffff_tmp46 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp29);
              cc_range_a722_a73e_3 = simd_or(ra000_ffff_tmp45, ra000_ffff_tmp46);
              carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(43), sequence_ea_9c_adv));
              ra000_ffff_tmp47 = simd_and(sequence_ea_9c_adv, cc_range_a722_a73e_3);
              struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, ra000_ffff_tmp47);
              ra000_ffff_tmp48 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp6);
              byte_9d = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp48);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              ra000_ffff_tmp49 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp50 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp49);
              ra000_ffff_tmp51 = simd_andc(tmp9, ra000_ffff_tmp21);
              ra000_ffff_tmp52 = simd_andc(ra000_ffff_tmp51, r800_ffff_tmp2);
              ra000_ffff_tmp53 = simd_andc(ra000_ffff_tmp52, ra000_ffff_tmp23);
              ra000_ffff_tmp54 = simd_andc(ra000_ffff_tmp53, ra000_ffff_tmp25);
              ra000_ffff_tmp55 = simd_andc(ra000_ffff_tmp54, ra000_ffff_tmp3);
              ra000_ffff_tmp56 = simd_andc(ra000_ffff_tmp55, ra000_ffff_tmp19);
              ra000_ffff_tmp57 = simd_andc(ra000_ffff_tmp56, ra000_ffff_tmp29);
              ra000_ffff_tmp58 = simd_andc(ra000_ffff_tmp50, ra000_ffff_tmp57);
              ra000_ffff_tmp59 = simd_andc(ra000_ffff_tmp5, tmp9);
              ra000_ffff_tmp60 = simd_or(ra000_ffff_tmp58, ra000_ffff_tmp59);
              ra000_ffff_tmp61 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp21);
              ra000_ffff_tmp62 = simd_or(ra000_ffff_tmp60, ra000_ffff_tmp61);
              ra000_ffff_tmp63 = simd_and(ra000_ffff_tmp5, r800_ffff_tmp2);
              ra000_ffff_tmp64 = simd_or(ra000_ffff_tmp62, ra000_ffff_tmp63);
              ra000_ffff_tmp65 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp23);
              ra000_ffff_tmp66 = simd_or(ra000_ffff_tmp64, ra000_ffff_tmp65);
              ra000_ffff_tmp67 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp25);
              ra000_ffff_tmp68 = simd_or(ra000_ffff_tmp66, ra000_ffff_tmp67);
              ra000_ffff_tmp69 = simd_or(ra000_ffff_tmp68, byte_9a);
              ra000_ffff_tmp70 = simd_or(ra000_ffff_tmp69, byte_9c);
              ra000_ffff_tmp71 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp29);
              ra000_ffff_tmp72 = simd_or(ra000_ffff_tmp70, ra000_ffff_tmp71);
              ra000_ffff_tmp73 = simd_andc(ra000_ffff_tmp20, tmp9);
              ra000_ffff_tmp74 = simd_or(ra000_ffff_tmp72, ra000_ffff_tmp73);
              ra000_ffff_tmp75 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp21);
              ra000_ffff_tmp76 = simd_or(ra000_ffff_tmp74, ra000_ffff_tmp75);
              ra000_ffff_tmp77 = simd_and(ra000_ffff_tmp20, r800_ffff_tmp2);
              ra000_ffff_tmp78 = simd_or(ra000_ffff_tmp76, ra000_ffff_tmp77);
              ra000_ffff_tmp79 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp23);
              ra000_ffff_tmp80 = simd_or(ra000_ffff_tmp78, ra000_ffff_tmp79);
              ra000_ffff_tmp81 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp25);
              ra000_ffff_tmp82 = simd_or(ra000_ffff_tmp80, ra000_ffff_tmp81);
              ra000_ffff_tmp83 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp3);
              ra000_ffff_tmp84 = simd_or(ra000_ffff_tmp82, ra000_ffff_tmp83);
              ra000_ffff_tmp85 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp19);
              ra000_ffff_tmp86 = simd_or(ra000_ffff_tmp84, ra000_ffff_tmp85);
              ra000_ffff_tmp87 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp29);
              ra000_ffff_tmp88 = simd_or(ra000_ffff_tmp86, ra000_ffff_tmp87);
              ra000_ffff_tmp89 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp7);
              ra000_ffff_tmp90 = simd_or(ra000_ffff_tmp88, ra000_ffff_tmp89);
              ra000_ffff_tmp91 = simd_and(ra000_ffff_tmp1, tmp3);
              ra000_ffff_tmp92 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp91);
              ra000_ffff_tmp93 = simd_or(ra000_ffff_tmp90, ra000_ffff_tmp92);
              ra000_ffff_tmp94 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp9);
              ra000_ffff_tmp95 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp96 = simd_and(ra000_ffff_tmp94, ra000_ffff_tmp95);
              cc_range_a740_a77d_3 = simd_or(ra000_ffff_tmp93, ra000_ffff_tmp96);
              carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(44), sequence_ea_9d_adv));
              ra000_ffff_tmp97 = simd_and(sequence_ea_9d_adv, cc_range_a740_a77d_3);
              struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, ra000_ffff_tmp97);
              byte_9e = ra000_ffff_tmp71;
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp98 = simd_andc(ra000_ffff_tmp53, ra000_ffff_tmp91);
              ra000_ffff_tmp99 = simd_andc(ra000_ffff_tmp98, ra000_ffff_tmp48);
              ra000_ffff_tmp100 = simd_andc(ra000_ffff_tmp50, ra000_ffff_tmp99);
              ra000_ffff_tmp101 = simd_or(ra000_ffff_tmp100, ra000_ffff_tmp59);
              ra000_ffff_tmp102 = simd_or(ra000_ffff_tmp101, ra000_ffff_tmp61);
              ra000_ffff_tmp103 = simd_or(ra000_ffff_tmp102, ra000_ffff_tmp65);
              ra000_ffff_tmp104 = simd_or(ra000_ffff_tmp103, ra000_ffff_tmp67);
              ra000_ffff_tmp105 = simd_or(ra000_ffff_tmp104, byte_9a);
              ra000_ffff_tmp106 = simd_or(ra000_ffff_tmp105, byte_9c);
              ra000_ffff_tmp107 = simd_or(ra000_ffff_tmp106, byte_9e);
              ra000_ffff_tmp108 = simd_or(ra000_ffff_tmp107, ra000_ffff_tmp73);
              ra000_ffff_tmp109 = simd_or(ra000_ffff_tmp108, ra000_ffff_tmp75);
              ra000_ffff_tmp110 = simd_or(ra000_ffff_tmp109, ra000_ffff_tmp77);
              ra000_ffff_tmp111 = simd_or(ra000_ffff_tmp110, ra000_ffff_tmp79);
              ra000_ffff_tmp112 = simd_or(ra000_ffff_tmp111, ra000_ffff_tmp81);
              ra000_ffff_tmp113 = simd_and(ra000_ffff_tmp20, basis_bits.bit_4);
              ra000_ffff_tmp114 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp115 = simd_and(ra000_ffff_tmp113, ra000_ffff_tmp114);
              ra000_ffff_tmp116 = simd_or(ra000_ffff_tmp112, ra000_ffff_tmp115);
              ra000_ffff_tmp117 = simd_or(tmp7, basis_bits.bit_6);
              ra000_ffff_tmp118 = simd_andc(ra000_ffff_tmp33, ra000_ffff_tmp117);
              cc_range_a780_a7b0_3 = simd_or(ra000_ffff_tmp116, ra000_ffff_tmp118);
              carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(45), sequence_ea_9e_adv));
              ra000_ffff_tmp119 = simd_and(sequence_ea_9e_adv, cc_range_a780_a7b0_3);
              struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, ra000_ffff_tmp119);
              ra000_ffff_tmp120 = simd_and(ra000_ffff_tmp9, tmp3);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp120);
              byte_ac = ra000_ffff_tmp85;
              carryQ.cq[46] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(46), ra000_ffff_tmp121));
              sequence_ef_ac = simd_and(ra000_ffff_tmp121, byte_ac);
              byte_ef_adv = ra000_ffff_tmp121;
              ra000_ffff_tmp122 = simd_andc(ra000_ffff_tmp50, basis_bits.bit_4);
              ra000_ffff_tmp123 = simd_and(basis_bits.bit_5, tmp3);
              ra000_ffff_tmp124 = simd_andc(ra000_ffff_tmp122, ra000_ffff_tmp123);
              ra000_ffff_tmp125 = simd_andc(ra000_ffff_tmp5, basis_bits.bit_4);
              ra000_ffff_tmp126 = simd_and(ra000_ffff_tmp125, tmp4);
              cc_range_fb00_fb13_3 = simd_or(ra000_ffff_tmp124, ra000_ffff_tmp126);
              carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(47), sequence_ef_ac_adv));
              ra000_ffff_tmp127 = simd_and(sequence_ef_ac_adv, cc_range_fb00_fb13_3);
              struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, ra000_ffff_tmp127);
              byte_bc = ra000_ffff_tmp44;
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp128 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
              byte_range_a1_ba = simd_and(ra000_ffff_tmp128, tmp10);
              carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(48), sequence_ef_bc_adv));
              ra000_ffff_tmp129 = simd_and(sequence_ef_bc_adv, byte_range_a1_ba);
              struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, ra000_ffff_tmp129);
            }
            else {
              carryQ.CarryDequeueEnqueue(40, 9);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(18, 31);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(49, 5))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp9);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp3 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_90 = simd_andc(r10000_10ffff_tmp3, tmp9);
            carryQ.cq[49] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(49), r10000_10ffff_tmp4));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp4, byte_90);
            byte_f0_adv = r10000_10ffff_tmp4;
            carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(50), r10000_10ffff_tmp5));
            sequence_f0_90_90 = simd_and(r10000_10ffff_tmp5, byte_90);
            sequence_f0_90_adv = r10000_10ffff_tmp5;
            r10000_10ffff_tmp6 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp6);
            byte_range_80_a7 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp7);
            carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_f0_90_90, carryQ.get_carry_in(51), sequence_f0_90_90_adv));
            r10000_10ffff_tmp8 = simd_and(sequence_f0_90_90_adv, byte_range_80_a7);
            struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r10000_10ffff_tmp8);
            r10000_10ffff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp10 = simd_andc(r10000_10ffff_tmp9, tmp7);
            byte_91 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp10);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp1, r80_10ffff_tmp1);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, tmp7);
            byte_a2 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(52), r10000_10ffff_tmp14));
            sequence_f0_91_a2 = simd_and(r10000_10ffff_tmp14, byte_a2);
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp1, basis_bits.bit_2);
            carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(53), sequence_f0_91_a2_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_91_a2_adv, byte_range_a0_bf);
            struct_cwcf_Y.cc = simd_or(struct_cwcf_Y.cc, r10000_10ffff_tmp15);
          }
          else {
            carryQ.CarryDequeueEnqueue(49, 5);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 54);
        }
        carryQ.CarryQ_Adjust(54);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<54, 0> carryQ;
  };

  struct Property_di_Y {
  Property_di_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_di_Y & struct_di_Y) {
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6;
		BitBlock r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, byte_ad, byte_c2_adv, r80_7ff_tmp12, byte_range_c4_cf;
		BitBlock r100_3ff_tmp1, r100_3ff_tmp2, byte_cc, byte_cd, r100_3ff_tmp3;
		BitBlock byte_range_80_af, r100_3ff_tmp4, r100_3ff_tmp5, r100_3ff_tmp6;
		BitBlock r300_36f_tmp1, r300_36f_tmp2, r300_36f_tmp3, byte_8f, byte_cd_adv;
		BitBlock r300_36f_tmp4, r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15;
		BitBlock byte_range_d8_db, r600_6ff_tmp1, r600_6ff_tmp2, byte_d8;
		BitBlock r600_6ff_tmp3, r600_6ff_tmp4, byte_9c, byte_d8_adv, r600_6ff_tmp5;
		BitBlock r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4, byte_e4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7;
		BitBlock r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1;
		BitBlock byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2, byte_e1;
		BitBlock r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3, byte_85;
		BitBlock r1000_1fff_tmp4, sequence_e1_85, byte_e1_adv, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9;
		BitBlock r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock byte_range_9f_a0, sequence_e1_85_adv, r1000_1fff_tmp13;
		BitBlock r1000_1fff_tmp14, r1000_1fff_tmp15, r1000_1fff_tmp16;
		BitBlock r1000_1fff_tmp17, byte_9e, sequence_e1_9e, r1000_1fff_tmp18;
		BitBlock r1000_1fff_tmp19, r1000_1fff_tmp20, byte_range_b4_b5;
		BitBlock sequence_e1_9e_adv, r1000_1fff_tmp21, r1000_1fff_tmp22, byte_a0;
		BitBlock sequence_e1_a0, r1000_1fff_tmp23, r1000_1fff_tmp24, byte_range_8b_8e;
		BitBlock sequence_e1_a0_adv, r1000_1fff_tmp25, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3, byte_80;
		BitBlock r2000_2fff_tmp4, sequence_e2_80, byte_e2_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock r2000_2fff_tmp13, cc_range_200b_202a_3, sequence_e2_80_adv;
		BitBlock r2000_2fff_tmp14, r2000_2fff_tmp15, r2000_2fff_tmp16, byte_81;
		BitBlock sequence_e2_81, byte_range_a0_af, sequence_e2_81_adv;
		BitBlock r2000_2fff_tmp17, r2000_4dff_tmp3, r2000_4dff_tmp4, byte_e3;
		BitBlock r2000_4dff_tmp5, r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3;
		BitBlock r3000_4dff_tmp4, r3000_4dff_tmp5, sequence_e3_85, byte_e3_adv;
		BitBlock r3000_4dff_tmp6, byte_a4, sequence_e3_85_adv, r3000_4dff_tmp7;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, byte_range_ea_ef, ra000_ffff_tmp1;
		BitBlock ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ef, ra000_ffff_tmp4;
		BitBlock ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7, byte_b8;
		BitBlock ra000_ffff_tmp8, sequence_ef_b8, byte_ef_adv, ra000_ffff_tmp9;
		BitBlock byte_range_80_8f, sequence_ef_b8_adv, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, byte_bb, sequence_ef_bb, byte_bf;
		BitBlock sequence_ef_bb_adv, ra000_ffff_tmp12, ra000_ffff_tmp13;
		BitBlock ra000_ffff_tmp14, byte_be, sequence_ef_be, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, sequence_ef_be_adv, ra000_ffff_tmp17;
		BitBlock sequence_ef_bf, ra000_ffff_tmp18, ra000_ffff_tmp19, byte_range_b0_b8;
		BitBlock sequence_ef_bf_adv, ra000_ffff_tmp20, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, r10000_10ffff_tmp7, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, byte_9b, r10000_10ffff_tmp10, sequence_f0_9b;
		BitBlock byte_f0_adv, r10000_10ffff_tmp11, r10000_10ffff_tmp12;
		BitBlock r10000_10ffff_tmp13, byte_b2, r10000_10ffff_tmp14, sequence_f0_9b_b2;
		BitBlock sequence_f0_9b_adv, r10000_10ffff_tmp15, byte_range_a0_a3;
		BitBlock sequence_f0_9b_b2_adv, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, byte_9d, sequence_f0_9d;
		BitBlock r10000_10ffff_tmp20, r10000_10ffff_tmp21, r10000_10ffff_tmp22;
		BitBlock r10000_10ffff_tmp23, r10000_10ffff_tmp24, sequence_f0_9d_85;
		BitBlock sequence_f0_9d_adv, r10000_10ffff_tmp25, r10000_10ffff_tmp26;
		BitBlock byte_range_b3_ba, sequence_f0_9d_85_adv, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, byte_f3, r10000_10ffff_tmp29, sequence_f3_a0;
		BitBlock byte_f3_adv, byte_range_80_bf, r10000_10ffff_tmp30;
		BitBlock sequence_f3_a0_byte_range_80_bf, r10000_10ffff_tmp31;
		BitBlock sequence_f3_a0_byte_range_80_bf_sfx;




        struct_di_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 26))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 3))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp7 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp8 = simd_and(r80_7ff_tmp6, r80_7ff_tmp7);
            r80_7ff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp11 = simd_and(r80_7ff_tmp9, r80_7ff_tmp10);
            byte_ad = simd_and(r80_7ff_tmp8, r80_7ff_tmp11);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp12 = simd_and(byte_c2_adv, byte_ad);
            struct_di_Y.cc = simd_or(struct_di_Y.cc, r80_7ff_tmp12);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(1, 1))) {
              r100_3ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r100_3ff_tmp2 = simd_andc(r80_7ff_tmp9, r100_3ff_tmp1);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp2);
              byte_cd = simd_and(r80_7ff_tmp2, r80_7ff_tmp11);
              r100_3ff_tmp3 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_af = simd_andc(r80_7ff_tmp6, r100_3ff_tmp3);
              carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(1), r100_3ff_tmp4));
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp4, byte_range_80_af);
              r100_3ff_tmp6 = simd_or(byte_cc, r100_3ff_tmp5);
              if (bitblock::any(r100_3ff_tmp6)) {
                r300_36f_tmp1 = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
                r300_36f_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r300_36f_tmp3 = simd_and(r80_7ff_tmp9, r300_36f_tmp2);
                byte_8f = simd_and(r300_36f_tmp1, r300_36f_tmp3);
                byte_cd_adv = r100_3ff_tmp4;
                r300_36f_tmp4 = simd_and(byte_cd_adv, byte_8f);
                struct_di_Y.cc = simd_or(struct_di_Y.cc, r300_36f_tmp4);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 1);
            }
            r80_7ff_tmp13 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp14 = simd_and(byte_range_c0_ff, r80_7ff_tmp13);
            r80_7ff_tmp15 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp14, r80_7ff_tmp15);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(2, 1))) {
              r600_6ff_tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp2 = simd_andc(r80_7ff_tmp15, r600_6ff_tmp1);
              byte_d8 = simd_and(r80_7ff_tmp14, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_and(r80_7ff_tmp6, r80_7ff_tmp13);
              r600_6ff_tmp4 = simd_andc(r80_7ff_tmp9, r600_6ff_tmp1);
              byte_9c = simd_and(r600_6ff_tmp3, r600_6ff_tmp4);
              carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(2), byte_d8_adv));
              r600_6ff_tmp5 = simd_and(byte_d8_adv, byte_9c);
              struct_di_Y.cc = simd_or(struct_di_Y.cc, r600_6ff_tmp5);
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 1);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 3);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(3, 15))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(3), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(4, 9))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(4, 4))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(4, 4))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(r800_ffff_tmp2, r800_1fff_tmp1);
                  byte_85 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(4), r1000_1fff_tmp4));
                  sequence_e1_85 = simd_and(r1000_1fff_tmp4, byte_85);
                  byte_e1_adv = r1000_1fff_tmp4;
                  r1000_1fff_tmp5 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  r1000_1fff_tmp6 = simd_or(basis_bits.bit_3, r1000_1fff_tmp5);
                  r1000_1fff_tmp7 = simd_not(r1000_1fff_tmp6);
                  r1000_1fff_tmp8 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp10 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp9);
                  r1000_1fff_tmp11 = simd_and(basis_bits.bit_3, r1000_1fff_tmp10);
                  r1000_1fff_tmp12 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp7), simd_andc(r1000_1fff_tmp11, basis_bits.bit_2));
                  byte_range_9f_a0 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp12);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e1_85, carryQ.get_carry_in(5), sequence_e1_85_adv));
                  r1000_1fff_tmp13 = simd_and(sequence_e1_85_adv, byte_range_9f_a0);
                  struct_di_Y.cc = simd_or(struct_di_Y.cc, r1000_1fff_tmp13);
                  r1000_1fff_tmp14 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp15 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp14);
                  r1000_1fff_tmp16 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp17 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp16);
                  byte_9e = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp17);
                  sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
                  r1000_1fff_tmp18 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp19 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp18);
                  r1000_1fff_tmp20 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_b4_b5 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp20);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(6), sequence_e1_9e_adv));
                  r1000_1fff_tmp21 = simd_and(sequence_e1_9e_adv, byte_range_b4_b5);
                  struct_di_Y.cc = simd_or(struct_di_Y.cc, r1000_1fff_tmp21);
                  r1000_1fff_tmp22 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r1000_1fff_tmp22, r1000_1fff_tmp5);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  r1000_1fff_tmp23 = simd_and(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp24 = simd_xor(basis_bits.bit_5, r1000_1fff_tmp9);
                  byte_range_8b_8e = simd_and(r1000_1fff_tmp23, r1000_1fff_tmp24);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(7), sequence_e1_a0_adv));
                  r1000_1fff_tmp25 = simd_and(sequence_e1_a0_adv, byte_range_8b_8e);
                  struct_di_Y.cc = simd_or(struct_di_Y.cc, r1000_1fff_tmp25);
                }
                else {
                  carryQ.CarryDequeueEnqueue(4, 4);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(4, 4);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(8, 5))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(8, 3))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(8), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_and(r2000_2fff_tmp2, basis_bits.bit_4);
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp7 = simd_or(basis_bits.bit_5, r2000_2fff_tmp6);
                  r2000_2fff_tmp8 = simd_and(r2000_2fff_tmp5, r2000_2fff_tmp7);
                  r2000_2fff_tmp9 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r2000_2fff_tmp10 = simd_and(r2000_2fff_tmp9, basis_bits.bit_4);
                  r2000_2fff_tmp11 = simd_not(r2000_2fff_tmp6);
                  r2000_2fff_tmp12 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp11), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r2000_2fff_tmp13 = simd_and(r2000_2fff_tmp10, r2000_2fff_tmp12);
                  cc_range_200b_202a_3 = simd_or(r2000_2fff_tmp8, r2000_2fff_tmp13);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(9), sequence_e2_80_adv));
                  r2000_2fff_tmp14 = simd_and(sequence_e2_80_adv, cc_range_200b_202a_3);
                  struct_di_Y.cc = simd_or(struct_di_Y.cc, r2000_2fff_tmp14);
                  r2000_2fff_tmp15 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp16 = simd_andc(r2000_2fff_tmp15, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp16);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  byte_range_a0_af = r2000_2fff_tmp9;
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(10), sequence_e2_81_adv));
                  r2000_2fff_tmp17 = simd_and(sequence_e2_81_adv, byte_range_a0_af);
                  struct_di_Y.cc = simd_or(struct_di_Y.cc, r2000_2fff_tmp17);
                }
                else {
                  carryQ.CarryDequeueEnqueue(8, 3);
                }
                r2000_4dff_tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp4 = simd_andc(r2000_4dff_tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp4);
                r2000_4dff_tmp5 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp5) || carryQ.CarryTest(11, 2))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp4 = simd_and(r800_ffff_tmp2, r3000_4dff_tmp3);
                  byte_85 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp4);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(11), r3000_4dff_tmp5));
                  sequence_e3_85 = simd_and(r3000_4dff_tmp5, byte_85);
                  byte_e3_adv = r3000_4dff_tmp5;
                  r3000_4dff_tmp6 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a4 = simd_and(r3000_4dff_tmp6, r800_ffff_tmp4);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e3_85, carryQ.get_carry_in(12), sequence_e3_85_adv));
                  r3000_4dff_tmp7 = simd_and(sequence_e3_85_adv, byte_a4);
                  struct_di_Y.cc = simd_or(struct_di_Y.cc, r3000_4dff_tmp7);
                }
                else {
                  carryQ.CarryDequeueEnqueue(11, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 5);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(4, 9);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(13, 5))) {
              ra000_ffff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp7 = simd_andc(ra000_ffff_tmp6, r800_ffff_tmp3);
              byte_b8 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(13), ra000_ffff_tmp8));
              sequence_ef_b8 = simd_and(ra000_ffff_tmp8, byte_b8);
              byte_ef_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_80_8f = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp9);
              carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(14), sequence_ef_b8_adv));
              ra000_ffff_tmp10 = simd_and(sequence_ef_b8_adv, byte_range_80_8f);
              struct_di_Y.cc = simd_or(struct_di_Y.cc, ra000_ffff_tmp10);
              ra000_ffff_tmp11 = simd_and(ra000_ffff_tmp6, ra000_ffff_tmp2);
              byte_bb = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp11);
              sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
              byte_bf = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(15), sequence_ef_bb_adv));
              ra000_ffff_tmp12 = simd_and(sequence_ef_bb_adv, byte_bf);
              struct_di_Y.cc = simd_or(struct_di_Y.cc, ra000_ffff_tmp12);
              ra000_ffff_tmp13 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp14 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp13);
              byte_be = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp14);
              sequence_ef_be = simd_and(byte_ef_adv, byte_be);
              ra000_ffff_tmp15 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp16 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_a0 = simd_andc(ra000_ffff_tmp15, ra000_ffff_tmp16);
              carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(16), sequence_ef_be_adv));
              ra000_ffff_tmp17 = simd_and(sequence_ef_be_adv, byte_a0);
              struct_di_Y.cc = simd_or(struct_di_Y.cc, ra000_ffff_tmp17);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              ra000_ffff_tmp18 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
              ra000_ffff_tmp19 = simd_and(basis_bits.bit_4, ra000_ffff_tmp18);
              byte_range_b0_b8 = simd_andc(ra000_ffff_tmp5, ra000_ffff_tmp19);
              carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(17), sequence_ef_bf_adv));
              ra000_ffff_tmp20 = simd_and(sequence_ef_bf_adv, byte_range_b0_b8);
              struct_di_Y.cc = simd_or(struct_di_Y.cc, ra000_ffff_tmp20);
            }
            else {
              carryQ.CarryDequeueEnqueue(13, 5);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(3, 15);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(18, 8))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            r10000_10ffff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp9 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp8);
            byte_9b = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp9);
            carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(18), r10000_10ffff_tmp10));
            sequence_f0_9b = simd_and(r10000_10ffff_tmp10, byte_9b);
            byte_f0_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, r10000_10ffff_tmp1);
            byte_b2 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(19), r10000_10ffff_tmp14));
            sequence_f0_9b_b2 = simd_and(r10000_10ffff_tmp14, byte_b2);
            sequence_f0_9b_adv = r10000_10ffff_tmp14;
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            byte_range_a0_a3 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp1);
            carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(20), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_9b_b2_adv, byte_range_a0_a3);
            struct_di_Y.cc = simd_or(struct_di_Y.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp18 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp18);
            byte_9d = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp19);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            r10000_10ffff_tmp20 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp21 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp20);
            r10000_10ffff_tmp22 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp23 = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp18);
            byte_85 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp23);
            carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(21), r10000_10ffff_tmp24));
            sequence_f0_9d_85 = simd_and(r10000_10ffff_tmp24, byte_85);
            sequence_f0_9d_adv = r10000_10ffff_tmp24;
            r10000_10ffff_tmp25 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp8);
            r10000_10ffff_tmp26 = simd_xor(basis_bits.bit_4, r10000_10ffff_tmp25);
            byte_range_b3_ba = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp26);
            carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(22), sequence_f0_9d_85_adv));
            r10000_10ffff_tmp27 = simd_and(sequence_f0_9d_85_adv, byte_range_b3_ba);
            struct_di_Y.cc = simd_or(struct_di_Y.cc, r10000_10ffff_tmp27);
            r10000_10ffff_tmp28 = simd_andc(r10000_10ffff_tmp8, r10000_10ffff_tmp1);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp28);
            byte_a0 = simd_andc(r10000_10ffff_tmp15, r10000_10ffff_tmp3);
            carryQ.cq[23] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(23), r10000_10ffff_tmp29));
            sequence_f3_a0 = simd_and(r10000_10ffff_tmp29, byte_a0);
            byte_f3_adv = r10000_10ffff_tmp29;
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(24), r10000_10ffff_tmp30));
            sequence_f3_a0_byte_range_80_bf = simd_and(r10000_10ffff_tmp30, byte_range_80_bf);
            carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_80_bf, carryQ.get_carry_in(25), r10000_10ffff_tmp31));
            sequence_f3_a0_byte_range_80_bf_sfx = simd_and(r10000_10ffff_tmp31, byte_range_80_bf);
            struct_di_Y.cc = simd_or(struct_di_Y.cc, sequence_f3_a0_byte_range_80_bf_sfx);
          }
          else {
            carryQ.CarryDequeueEnqueue(18, 8);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 26);
        }
        carryQ.CarryQ_Adjust(26);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<26, 0> carryQ;
  };

  struct Property_upper_Y {
  Property_upper_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_upper_Y & struct_upper_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10;
		BitBlock byte_range_41_5a, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, byte_c3, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13, cc_range_c0_d8_2;
		BitBlock byte_c3_adv, r80_7ff_tmp14, byte_range_c4_cf, r100_3ff_tmp1;
		BitBlock byte_range_c4_cb, r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3;
		BitBlock byte_range_c4_c8, r100_2ff_tmp4, r100_2ff_tmp5, r100_2ff_tmp6;
		BitBlock byte_c9, byte_range_80_8f, r100_2ff_tmp7, r100_2ff_tmp8;
		BitBlock r100_2ff_tmp9, r100_24f_tmp1, r100_24f_tmp2, byte_range_c4_c5;
		BitBlock r100_17f_tmp1, byte_c4, r100_17f_tmp2, r100_17f_tmp3, r100_17f_tmp4;
		BitBlock r100_17f_tmp5, r100_17f_tmp6, r100_17f_tmp7, r100_17f_tmp8;
		BitBlock r100_17f_tmp9, r100_17f_tmp10, r100_17f_tmp11, r100_17f_tmp12;
		BitBlock r100_17f_tmp13, r100_17f_tmp14, r100_17f_tmp15, r100_17f_tmp16;
		BitBlock r100_17f_tmp17, r100_17f_tmp18, r100_17f_tmp19, r100_17f_tmp20;
		BitBlock r100_17f_tmp21, r100_17f_tmp22, r100_17f_tmp23, r100_17f_tmp24;
		BitBlock r100_17f_tmp25, r100_17f_tmp26, r100_17f_tmp27, r100_17f_tmp28;
		BitBlock r100_17f_tmp29, r100_17f_tmp30, r100_17f_tmp31, r100_17f_tmp32;
		BitBlock r100_17f_tmp33, r100_17f_tmp34, r100_17f_tmp35, r100_17f_tmp36;
		BitBlock r100_17f_tmp37, r100_17f_tmp38, r100_17f_tmp39, r100_17f_tmp40;
		BitBlock r100_17f_tmp41, r100_17f_tmp42, r100_17f_tmp43, r100_17f_tmp44;
		BitBlock r100_17f_tmp45, r100_17f_tmp46, r100_17f_tmp47, r100_17f_tmp48;
		BitBlock r100_17f_tmp49, r100_17f_tmp50, r100_17f_tmp51, r100_17f_tmp52;
		BitBlock r100_17f_tmp53, r100_17f_tmp54, r100_17f_tmp55, r100_17f_tmp56;
		BitBlock r100_17f_tmp57, r100_17f_tmp58, r100_17f_tmp59, r100_17f_tmp60;
		BitBlock r100_17f_tmp61, r100_17f_tmp62, r100_17f_tmp63, r100_17f_tmp64;
		BitBlock r100_17f_tmp65, r100_17f_tmp66, r100_17f_tmp67, r100_17f_tmp68;
		BitBlock r100_17f_tmp69, r100_17f_tmp70, r100_17f_tmp71, cc_range_100_13f_2;
		BitBlock byte_c4_adv, r100_17f_tmp72, r100_17f_tmp73, byte_c5, r100_17f_tmp74;
		BitBlock r100_17f_tmp75, r100_17f_tmp76, r100_17f_tmp77, r100_17f_tmp78;
		BitBlock r100_17f_tmp79, r100_17f_tmp80, r100_17f_tmp81, r100_17f_tmp82;
		BitBlock r100_17f_tmp83, r100_17f_tmp84, r100_17f_tmp85, r100_17f_tmp86;
		BitBlock r100_17f_tmp87, r100_17f_tmp88, r100_17f_tmp89, r100_17f_tmp90;
		BitBlock r100_17f_tmp91, r100_17f_tmp92, r100_17f_tmp93, r100_17f_tmp94;
		BitBlock r100_17f_tmp95, r100_17f_tmp96, r100_17f_tmp97, r100_17f_tmp98;
		BitBlock r100_17f_tmp99, r100_17f_tmp100, r100_17f_tmp101, r100_17f_tmp102;
		BitBlock r100_17f_tmp103, r100_17f_tmp104, r100_17f_tmp105, cc_range_141_17d_2;
		BitBlock byte_c5_adv, r100_17f_tmp106, r100_24f_tmp3, r100_24f_tmp4;
		BitBlock byte_range_c6_c8, r100_24f_tmp5, r180_24f_tmp1, r180_24f_tmp2;
		BitBlock byte_c6, r180_24f_tmp3, r180_24f_tmp4, r180_24f_tmp5, r180_24f_tmp6;
		BitBlock r180_24f_tmp7, r180_24f_tmp8, r180_24f_tmp9, r180_24f_tmp10;
		BitBlock r180_24f_tmp11, r180_24f_tmp12, r180_24f_tmp13, r180_24f_tmp14;
		BitBlock r180_24f_tmp15, r180_24f_tmp16, r180_24f_tmp17, r180_24f_tmp18;
		BitBlock r180_24f_tmp19, r180_24f_tmp20, r180_24f_tmp21, r180_24f_tmp22;
		BitBlock r180_24f_tmp23, r180_24f_tmp24, r180_24f_tmp25, r180_24f_tmp26;
		BitBlock r180_24f_tmp27, r180_24f_tmp28, r180_24f_tmp29, r180_24f_tmp30;
		BitBlock r180_24f_tmp31, r180_24f_tmp32, r180_24f_tmp33, r180_24f_tmp34;
		BitBlock r180_24f_tmp35, r180_24f_tmp36, r180_24f_tmp37, r180_24f_tmp38;
		BitBlock r180_24f_tmp39, r180_24f_tmp40, r180_24f_tmp41, r180_24f_tmp42;
		BitBlock r180_24f_tmp43, r180_24f_tmp44, r180_24f_tmp45, r180_24f_tmp46;
		BitBlock r180_24f_tmp47, r180_24f_tmp48, r180_24f_tmp49, r180_24f_tmp50;
		BitBlock r180_24f_tmp51, r180_24f_tmp52, r180_24f_tmp53, r180_24f_tmp54;
		BitBlock r180_24f_tmp55, r180_24f_tmp56, r180_24f_tmp57, r180_24f_tmp58;
		BitBlock r180_24f_tmp59, r180_24f_tmp60, r180_24f_tmp61, r180_24f_tmp62;
		BitBlock r180_24f_tmp63, r180_24f_tmp64, r180_24f_tmp65, r180_24f_tmp66;
		BitBlock cc_range_181_1bc_2, byte_c6_adv, r180_24f_tmp67, r180_24f_tmp68;
		BitBlock byte_c7, r180_24f_tmp69, r180_24f_tmp70, r180_24f_tmp71;
		BitBlock r180_24f_tmp72, r180_24f_tmp73, r180_24f_tmp74, r180_24f_tmp75;
		BitBlock r180_24f_tmp76, r180_24f_tmp77, r180_24f_tmp78, r180_24f_tmp79;
		BitBlock r180_24f_tmp80, r180_24f_tmp81, r180_24f_tmp82, r180_24f_tmp83;
		BitBlock r180_24f_tmp84, r180_24f_tmp85, r180_24f_tmp86, r180_24f_tmp87;
		BitBlock r180_24f_tmp88, r180_24f_tmp89, r180_24f_tmp90, r180_24f_tmp91;
		BitBlock r180_24f_tmp92, r180_24f_tmp93, r180_24f_tmp94, r180_24f_tmp95;
		BitBlock r180_24f_tmp96, r180_24f_tmp97, r180_24f_tmp98, r180_24f_tmp99;
		BitBlock r180_24f_tmp100, r180_24f_tmp101, r180_24f_tmp102, r180_24f_tmp103;
		BitBlock r180_24f_tmp104, r180_24f_tmp105, r180_24f_tmp106, r180_24f_tmp107;
		BitBlock r180_24f_tmp108, r180_24f_tmp109, r180_24f_tmp110, r180_24f_tmp111;
		BitBlock r180_24f_tmp112, r180_24f_tmp113, r180_24f_tmp114, r180_24f_tmp115;
		BitBlock r180_24f_tmp116, r180_24f_tmp117, cc_range_1c4_1fe_2, byte_c7_adv;
		BitBlock r180_24f_tmp118, byte_c8, r180_24f_tmp119, r180_24f_tmp120;
		BitBlock r180_24f_tmp121, r180_24f_tmp122, r180_24f_tmp123, r180_24f_tmp124;
		BitBlock r180_24f_tmp125, r180_24f_tmp126, r180_24f_tmp127, r180_24f_tmp128;
		BitBlock r180_24f_tmp129, r180_24f_tmp130, r180_24f_tmp131, r180_24f_tmp132;
		BitBlock r180_24f_tmp133, r180_24f_tmp134, r180_24f_tmp135, r180_24f_tmp136;
		BitBlock r180_24f_tmp137, r180_24f_tmp138, r180_24f_tmp139, r180_24f_tmp140;
		BitBlock r180_24f_tmp141, r180_24f_tmp142, r180_24f_tmp143, r180_24f_tmp144;
		BitBlock r180_24f_tmp145, r180_24f_tmp146, r180_24f_tmp147, r180_24f_tmp148;
		BitBlock r180_24f_tmp149, r180_24f_tmp150, r180_24f_tmp151, r180_24f_tmp152;
		BitBlock r180_24f_tmp153, r180_24f_tmp154, r180_24f_tmp155, r180_24f_tmp156;
		BitBlock r180_24f_tmp157, r180_24f_tmp158, cc_range_200_23d_2, byte_c8_adv;
		BitBlock r180_24f_tmp159, r180_24f_tmp160, r180_24f_tmp161, r180_24f_tmp162;
		BitBlock r180_24f_tmp163, r180_24f_tmp164, r180_24f_tmp165, r180_24f_tmp166;
		BitBlock r180_24f_tmp167, r180_24f_tmp168, r180_24f_tmp169, r180_24f_tmp170;
		BitBlock r180_24f_tmp171, cc_range_241_24e_2, byte_c9_adv, r180_24f_tmp172;
		BitBlock r100_3ff_tmp2, r100_3ff_tmp3, r100_3ff_tmp4, byte_cd, r100_3ff_tmp5;
		BitBlock byte_range_b0_bf, r100_3ff_tmp6, r100_3ff_tmp7, r100_3ff_tmp8;
		BitBlock byte_range_ce_cf, r100_3ff_tmp9, r370_3ff_tmp1, r370_3ff_tmp2;
		BitBlock r370_3ff_tmp3, r370_3ff_tmp4, r370_3ff_tmp5, r370_3ff_tmp6;
		BitBlock r370_3ff_tmp7, r370_3ff_tmp8, cc_range_370_37f_2, byte_cd_adv;
		BitBlock r370_3ff_tmp9, r370_3ff_tmp10, byte_ce, r370_3ff_tmp11;
		BitBlock r370_3ff_tmp12, r370_3ff_tmp13, r370_3ff_tmp14, r370_3ff_tmp15;
		BitBlock r370_3ff_tmp16, r370_3ff_tmp17, r370_3ff_tmp18, r370_3ff_tmp19;
		BitBlock r370_3ff_tmp20, r370_3ff_tmp21, r370_3ff_tmp22, r370_3ff_tmp23;
		BitBlock r370_3ff_tmp24, r370_3ff_tmp25, r370_3ff_tmp26, r370_3ff_tmp27;
		BitBlock r370_3ff_tmp28, r370_3ff_tmp29, r370_3ff_tmp30, r370_3ff_tmp31;
		BitBlock r370_3ff_tmp32, r370_3ff_tmp33, cc_range_386_3a3_2, byte_ce_adv;
		BitBlock r370_3ff_tmp34, byte_cf, r370_3ff_tmp35, r370_3ff_tmp36;
		BitBlock r370_3ff_tmp37, r370_3ff_tmp38, r370_3ff_tmp39, r370_3ff_tmp40;
		BitBlock r370_3ff_tmp41, r370_3ff_tmp42, r370_3ff_tmp43, r370_3ff_tmp44;
		BitBlock r370_3ff_tmp45, r370_3ff_tmp46, r370_3ff_tmp47, r370_3ff_tmp48;
		BitBlock r370_3ff_tmp49, r370_3ff_tmp50, r370_3ff_tmp51, r370_3ff_tmp52;
		BitBlock r370_3ff_tmp53, r370_3ff_tmp54, r370_3ff_tmp55, r370_3ff_tmp56;
		BitBlock r370_3ff_tmp57, r370_3ff_tmp58, r370_3ff_tmp59, r370_3ff_tmp60;
		BitBlock r370_3ff_tmp61, r370_3ff_tmp62, r370_3ff_tmp63, r370_3ff_tmp64;
		BitBlock r370_3ff_tmp65, r370_3ff_tmp66, r370_3ff_tmp67, r370_3ff_tmp68;
		BitBlock r370_3ff_tmp69, r370_3ff_tmp70, r370_3ff_tmp71, r370_3ff_tmp72;
		BitBlock r370_3ff_tmp73, r370_3ff_tmp74, r370_3ff_tmp75, r370_3ff_tmp76;
		BitBlock r370_3ff_tmp77, r370_3ff_tmp78, cc_range_3cf_3fd_2, byte_cf_adv;
		BitBlock r370_3ff_tmp79, r80_7ff_tmp15, byte_range_d0_d7, byte_range_d0_d3;
		BitBlock byte_d0, r400_4ff_tmp1, byte_range_80_af, byte_d0_adv, r400_4ff_tmp2;
		BitBlock r400_4ff_tmp3, r400_4ff_tmp4, byte_d1, r400_4ff_tmp5;
		BitBlock cc_range_460_47e_2, byte_d1_adv, r400_4ff_tmp6, r400_4ff_tmp7;
		BitBlock r400_4ff_tmp8, byte_d2, r400_4ff_tmp9, r400_4ff_tmp10, r400_4ff_tmp11;
		BitBlock r400_4ff_tmp12, r400_4ff_tmp13, r400_4ff_tmp14, r400_4ff_tmp15;
		BitBlock r400_4ff_tmp16, r400_4ff_tmp17, r400_4ff_tmp18, r400_4ff_tmp19;
		BitBlock r400_4ff_tmp20, r400_4ff_tmp21, r400_4ff_tmp22, r400_4ff_tmp23;
		BitBlock r400_4ff_tmp24, r400_4ff_tmp25, r400_4ff_tmp26, r400_4ff_tmp27;
		BitBlock r400_4ff_tmp28, r400_4ff_tmp29, r400_4ff_tmp30, r400_4ff_tmp31;
		BitBlock r400_4ff_tmp32, r400_4ff_tmp33, r400_4ff_tmp34, r400_4ff_tmp35;
		BitBlock r400_4ff_tmp36, r400_4ff_tmp37, r400_4ff_tmp38, r400_4ff_tmp39;
		BitBlock r400_4ff_tmp40, r400_4ff_tmp41, r400_4ff_tmp42, r400_4ff_tmp43;
		BitBlock r400_4ff_tmp44, r400_4ff_tmp45, r400_4ff_tmp46, r400_4ff_tmp47;
		BitBlock r400_4ff_tmp48, r400_4ff_tmp49, r400_4ff_tmp50, r400_4ff_tmp51;
		BitBlock r400_4ff_tmp52, r400_4ff_tmp53, r400_4ff_tmp54, r400_4ff_tmp55;
		BitBlock r400_4ff_tmp56, r400_4ff_tmp57, r400_4ff_tmp58, r400_4ff_tmp59;
		BitBlock r400_4ff_tmp60, r400_4ff_tmp61, r400_4ff_tmp62, r400_4ff_tmp63;
		BitBlock r400_4ff_tmp64, r400_4ff_tmp65, r400_4ff_tmp66, r400_4ff_tmp67;
		BitBlock r400_4ff_tmp68, r400_4ff_tmp69, r400_4ff_tmp70, r400_4ff_tmp71;
		BitBlock r400_4ff_tmp72, cc_range_480_4be_2, byte_d2_adv, r400_4ff_tmp73;
		BitBlock byte_d3, r400_4ff_tmp74, r400_4ff_tmp75, r400_4ff_tmp76;
		BitBlock r400_4ff_tmp77, r400_4ff_tmp78, r400_4ff_tmp79, r400_4ff_tmp80;
		BitBlock r400_4ff_tmp81, r400_4ff_tmp82, r400_4ff_tmp83, r400_4ff_tmp84;
		BitBlock r400_4ff_tmp85, r400_4ff_tmp86, r400_4ff_tmp87, r400_4ff_tmp88;
		BitBlock r400_4ff_tmp89, r400_4ff_tmp90, r400_4ff_tmp91, r400_4ff_tmp92;
		BitBlock r400_4ff_tmp93, r400_4ff_tmp94, r400_4ff_tmp95, r400_4ff_tmp96;
		BitBlock r400_4ff_tmp97, r400_4ff_tmp98, r400_4ff_tmp99, r400_4ff_tmp100;
		BitBlock r400_4ff_tmp101, r400_4ff_tmp102, r400_4ff_tmp103, r400_4ff_tmp104;
		BitBlock r400_4ff_tmp105, r400_4ff_tmp106, r400_4ff_tmp107, r400_4ff_tmp108;
		BitBlock r400_4ff_tmp109, cc_range_4c0_4fe_2, byte_d3_adv, r400_4ff_tmp110;
		BitBlock r400_5ff_tmp1, r400_5ff_tmp2, byte_range_d4_d5, r400_5ff_tmp3;
		BitBlock r400_5ff_tmp4, byte_d6, r400_5ff_tmp5, r400_5ff_tmp6, r400_5ff_tmp7;
		BitBlock r500_58f_tmp1, byte_d4, r500_58f_tmp2, r500_58f_tmp3, r500_58f_tmp4;
		BitBlock cc_range_500_52e_2, byte_d4_adv, r500_52f_tmp1, r500_58f_tmp5;
		BitBlock r500_58f_tmp6, r500_58f_tmp7, byte_d5, r500_58f_tmp8, r500_58f_tmp9;
		BitBlock r530_58f_tmp1, r530_58f_tmp2, byte_range_b1_bf, r530_58f_tmp3;
		BitBlock byte_range_80_96, byte_d5_adv, r530_58f_tmp4, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, byte_range_e0_e3, r800_ffff_tmp1, r800_ffff_tmp2;
		BitBlock byte_e4, r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock byte_range_80_b7, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, r800_1fff_tmp2;
		BitBlock byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2, r1000_1fff_tmp3;
		BitBlock r1000_1fff_tmp4, byte_82, r1000_1fff_tmp5, sequence_e1_82;
		BitBlock byte_e1_adv, byte_range_a0_bf, sequence_e1_82_adv, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, byte_83, sequence_e1_83, r1000_1fff_tmp8;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, r1000_1fff_tmp11, r1000_1fff_tmp12;
		BitBlock r1000_1fff_tmp13, r1000_1fff_tmp14, r1000_1fff_tmp15;
		BitBlock r1000_1fff_tmp16, cc_range_10c0_10cd_3, sequence_e1_83_adv;
		BitBlock r1000_1fff_tmp17, r1000_1fff_tmp18, r1000_1fff_tmp19;
		BitBlock r1000_1fff_tmp20, r1000_1fff_tmp21, byte_b8, sequence_e1_b8;
		BitBlock cc_range_1e00_1e3e_3, sequence_e1_b8_adv, r1000_1fff_tmp22;
		BitBlock r1000_1fff_tmp23, byte_b9, sequence_e1_b9, cc_range_1e40_1e7e_3;
		BitBlock sequence_e1_b9_adv, r1000_1fff_tmp24, r1000_1fff_tmp25, byte_ba;
		BitBlock sequence_e1_ba, r1000_1fff_tmp26, r1000_1fff_tmp27, r1000_1fff_tmp28;
		BitBlock r1000_1fff_tmp29, r1000_1fff_tmp30, r1000_1fff_tmp31;
		BitBlock r1000_1fff_tmp32, r1000_1fff_tmp33, r1000_1fff_tmp34;
		BitBlock r1000_1fff_tmp35, r1000_1fff_tmp36, r1000_1fff_tmp37;
		BitBlock r1000_1fff_tmp38, r1000_1fff_tmp39, r1000_1fff_tmp40;
		BitBlock r1000_1fff_tmp41, r1000_1fff_tmp42, r1000_1fff_tmp43;
		BitBlock r1000_1fff_tmp44, r1000_1fff_tmp45, r1000_1fff_tmp46;
		BitBlock r1000_1fff_tmp47, r1000_1fff_tmp48, r1000_1fff_tmp49;
		BitBlock r1000_1fff_tmp50, r1000_1fff_tmp51, r1000_1fff_tmp52;
		BitBlock r1000_1fff_tmp53, r1000_1fff_tmp54, r1000_1fff_tmp55;
		BitBlock r1000_1fff_tmp56, r1000_1fff_tmp57, r1000_1fff_tmp58;
		BitBlock r1000_1fff_tmp59, r1000_1fff_tmp60, r1000_1fff_tmp61;
		BitBlock r1000_1fff_tmp62, r1000_1fff_tmp63, r1000_1fff_tmp64;
		BitBlock r1000_1fff_tmp65, r1000_1fff_tmp66, r1000_1fff_tmp67;
		BitBlock r1000_1fff_tmp68, r1000_1fff_tmp69, r1000_1fff_tmp70;
		BitBlock r1000_1fff_tmp71, r1000_1fff_tmp72, r1000_1fff_tmp73;
		BitBlock r1000_1fff_tmp74, r1000_1fff_tmp75, r1000_1fff_tmp76;
		BitBlock cc_range_1e80_1ebe_3, sequence_e1_ba_adv, r1000_1fff_tmp77;
		BitBlock r1000_1fff_tmp78, byte_bb, sequence_e1_bb, cc_range_1ec0_1efe_3;
		BitBlock sequence_e1_bb_adv, r1000_1fff_tmp79, byte_bc, sequence_e1_bc;
		BitBlock r1000_1fff_tmp80, r1000_1fff_tmp81, r1000_1fff_tmp82;
		BitBlock r1000_1fff_tmp83, r1000_1fff_tmp84, r1000_1fff_tmp85;
		BitBlock r1000_1fff_tmp86, cc_range_1f08_1f38_3, sequence_e1_bc_adv;
		BitBlock r1000_1fff_tmp87, byte_bd, sequence_e1_bd, r1000_1fff_tmp88;
		BitBlock r1000_1fff_tmp89, r1000_1fff_tmp90, r1000_1fff_tmp91;
		BitBlock r1000_1fff_tmp92, r1000_1fff_tmp93, r1000_1fff_tmp94;
		BitBlock r1000_1fff_tmp95, r1000_1fff_tmp96, r1000_1fff_tmp97;
		BitBlock cc_range_1f48_1f68_3, sequence_e1_bd_adv, r1000_1fff_tmp98, byte_be;
		BitBlock sequence_e1_be, byte_range_b8_bb, sequence_e1_be_adv;
		BitBlock r1000_1fff_tmp99, byte_bf, sequence_e1_bf, r1000_1fff_tmp100;
		BitBlock r1000_1fff_tmp101, r1000_1fff_tmp102, r1000_1fff_tmp103;
		BitBlock r1000_1fff_tmp104, r1000_1fff_tmp105, cc_range_1fc8_1ff8_3;
		BitBlock sequence_e1_bf_adv, r1000_1fff_tmp106, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, byte_84, r2000_2fff_tmp3;
		BitBlock sequence_e2_84, byte_e2_adv, r2000_2fff_tmp4, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock r2000_2fff_tmp13, r2000_2fff_tmp14, r2000_2fff_tmp15;
		BitBlock r2000_2fff_tmp16, r2000_2fff_tmp17, r2000_2fff_tmp18;
		BitBlock r2000_2fff_tmp19, r2000_2fff_tmp20, r2000_2fff_tmp21;
		BitBlock r2000_2fff_tmp22, r2000_2fff_tmp23, r2000_2fff_tmp24;
		BitBlock r2000_2fff_tmp25, r2000_2fff_tmp26, r2000_2fff_tmp27;
		BitBlock r2000_2fff_tmp28, r2000_2fff_tmp29, r2000_2fff_tmp30;
		BitBlock r2000_2fff_tmp31, r2000_2fff_tmp32, r2000_2fff_tmp33;
		BitBlock r2000_2fff_tmp34, r2000_2fff_tmp35, r2000_2fff_tmp36;
		BitBlock r2000_2fff_tmp37, r2000_2fff_tmp38, r2000_2fff_tmp39;
		BitBlock r2000_2fff_tmp40, r2000_2fff_tmp41, r2000_2fff_tmp42;
		BitBlock r2000_2fff_tmp43, r2000_2fff_tmp44, r2000_2fff_tmp45;
		BitBlock cc_range_2102_213e_3, sequence_e2_84_adv, r2000_2fff_tmp46, byte_85;
		BitBlock sequence_e2_85, cc_range_2145_2160_3, sequence_e2_85_adv;
		BitBlock r2000_2fff_tmp47, byte_86, sequence_e2_86, r2000_2fff_tmp48;
		BitBlock sequence_e2_86_adv, r2000_2fff_tmp49, byte_92, sequence_e2_92;
		BitBlock r2000_2fff_tmp50, r2000_2fff_tmp51, byte_range_b6_bf;
		BitBlock sequence_e2_92_adv, r2000_2fff_tmp52, byte_93, sequence_e2_93;
		BitBlock sequence_e2_93_adv, r2000_2fff_tmp53, byte_b0, sequence_e2_b0;
		BitBlock r2000_2fff_tmp54, r2000_2fff_tmp55, r2000_2fff_tmp56;
		BitBlock byte_range_80_ae, sequence_e2_b0_adv, r2000_2fff_tmp57;
		BitBlock r2000_2fff_tmp58, byte_b1, sequence_e2_b1, r2000_2fff_tmp59;
		BitBlock r2000_2fff_tmp60, r2000_2fff_tmp61, r2000_2fff_tmp62;
		BitBlock r2000_2fff_tmp63, r2000_2fff_tmp64, r2000_2fff_tmp65;
		BitBlock r2000_2fff_tmp66, r2000_2fff_tmp67, r2000_2fff_tmp68;
		BitBlock r2000_2fff_tmp69, r2000_2fff_tmp70, r2000_2fff_tmp71;
		BitBlock r2000_2fff_tmp72, r2000_2fff_tmp73, r2000_2fff_tmp74;
		BitBlock r2000_2fff_tmp75, r2000_2fff_tmp76, r2000_2fff_tmp77;
		BitBlock r2000_2fff_tmp78, r2000_2fff_tmp79, r2000_2fff_tmp80;
		BitBlock r2000_2fff_tmp81, r2000_2fff_tmp82, cc_range_2c60_2c7e_3;
		BitBlock sequence_e2_b1_adv, r2000_2fff_tmp83, byte_b2, sequence_e2_b2;
		BitBlock cc_range_2c80_2cbe_3, sequence_e2_b2_adv, r2000_2fff_tmp84, byte_b3;
		BitBlock sequence_e2_b3, r2000_2fff_tmp85, r2000_2fff_tmp86, r2000_2fff_tmp87;
		BitBlock r2000_2fff_tmp88, r2000_2fff_tmp89, r2000_2fff_tmp90;
		BitBlock r2000_2fff_tmp91, r2000_2fff_tmp92, r2000_2fff_tmp93;
		BitBlock r2000_2fff_tmp94, r2000_2fff_tmp95, r2000_2fff_tmp96;
		BitBlock r2000_2fff_tmp97, r2000_2fff_tmp98, r2000_2fff_tmp99;
		BitBlock r2000_2fff_tmp100, r2000_2fff_tmp101, r2000_2fff_tmp102;
		BitBlock r2000_2fff_tmp103, r2000_2fff_tmp104, r2000_2fff_tmp105;
		BitBlock r2000_2fff_tmp106, r2000_2fff_tmp107, r2000_2fff_tmp108;
		BitBlock r2000_2fff_tmp109, r2000_2fff_tmp110, r2000_2fff_tmp111;
		BitBlock r2000_2fff_tmp112, r2000_2fff_tmp113, r2000_2fff_tmp114;
		BitBlock r2000_2fff_tmp115, r2000_2fff_tmp116, r2000_2fff_tmp117;
		BitBlock cc_range_2cc0_2cf2_3, sequence_e2_b3_adv, r2000_2fff_tmp118;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, byte_range_ea_ef, ra000_ffff_tmp1;
		BitBlock ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4;
		BitBlock ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7, byte_99;
		BitBlock ra000_ffff_tmp8, sequence_ea_99, byte_ea_adv, ra000_ffff_tmp9;
		BitBlock ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, cc_range_a640_a66c_3, sequence_ea_99_adv;
		BitBlock ra000_ffff_tmp14, byte_9a, sequence_ea_9a, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, ra000_ffff_tmp17, cc_range_a680_a69a_3;
		BitBlock sequence_ea_9a_adv, ra000_ffff_tmp18, ra000_ffff_tmp19, byte_9c;
		BitBlock sequence_ea_9c, ra000_ffff_tmp20, ra000_ffff_tmp21, ra000_ffff_tmp22;
		BitBlock ra000_ffff_tmp23, ra000_ffff_tmp24, ra000_ffff_tmp25;
		BitBlock ra000_ffff_tmp26, ra000_ffff_tmp27, ra000_ffff_tmp28;
		BitBlock ra000_ffff_tmp29, ra000_ffff_tmp30, ra000_ffff_tmp31;
		BitBlock ra000_ffff_tmp32, ra000_ffff_tmp33, ra000_ffff_tmp34;
		BitBlock ra000_ffff_tmp35, ra000_ffff_tmp36, ra000_ffff_tmp37;
		BitBlock ra000_ffff_tmp38, ra000_ffff_tmp39, ra000_ffff_tmp40;
		BitBlock ra000_ffff_tmp41, ra000_ffff_tmp42, ra000_ffff_tmp43;
		BitBlock ra000_ffff_tmp44, ra000_ffff_tmp45, ra000_ffff_tmp46;
		BitBlock cc_range_a722_a73e_3, sequence_ea_9c_adv, ra000_ffff_tmp47;
		BitBlock ra000_ffff_tmp48, byte_9d, sequence_ea_9d, ra000_ffff_tmp49;
		BitBlock ra000_ffff_tmp50, ra000_ffff_tmp51, ra000_ffff_tmp52;
		BitBlock ra000_ffff_tmp53, ra000_ffff_tmp54, ra000_ffff_tmp55;
		BitBlock ra000_ffff_tmp56, ra000_ffff_tmp57, ra000_ffff_tmp58;
		BitBlock ra000_ffff_tmp59, ra000_ffff_tmp60, ra000_ffff_tmp61;
		BitBlock ra000_ffff_tmp62, ra000_ffff_tmp63, ra000_ffff_tmp64;
		BitBlock ra000_ffff_tmp65, ra000_ffff_tmp66, ra000_ffff_tmp67;
		BitBlock ra000_ffff_tmp68, ra000_ffff_tmp69, ra000_ffff_tmp70;
		BitBlock ra000_ffff_tmp71, ra000_ffff_tmp72, ra000_ffff_tmp73;
		BitBlock ra000_ffff_tmp74, ra000_ffff_tmp75, ra000_ffff_tmp76;
		BitBlock ra000_ffff_tmp77, ra000_ffff_tmp78, ra000_ffff_tmp79;
		BitBlock ra000_ffff_tmp80, ra000_ffff_tmp81, ra000_ffff_tmp82;
		BitBlock ra000_ffff_tmp83, ra000_ffff_tmp84, ra000_ffff_tmp85;
		BitBlock ra000_ffff_tmp86, ra000_ffff_tmp87, ra000_ffff_tmp88;
		BitBlock ra000_ffff_tmp89, ra000_ffff_tmp90, ra000_ffff_tmp91;
		BitBlock ra000_ffff_tmp92, ra000_ffff_tmp93, ra000_ffff_tmp94;
		BitBlock ra000_ffff_tmp95, ra000_ffff_tmp96, cc_range_a740_a77d_3;
		BitBlock sequence_ea_9d_adv, ra000_ffff_tmp97, byte_9e, sequence_ea_9e;
		BitBlock ra000_ffff_tmp98, ra000_ffff_tmp99, ra000_ffff_tmp100;
		BitBlock ra000_ffff_tmp101, ra000_ffff_tmp102, ra000_ffff_tmp103;
		BitBlock ra000_ffff_tmp104, ra000_ffff_tmp105, ra000_ffff_tmp106;
		BitBlock ra000_ffff_tmp107, ra000_ffff_tmp108, ra000_ffff_tmp109;
		BitBlock ra000_ffff_tmp110, ra000_ffff_tmp111, ra000_ffff_tmp112;
		BitBlock ra000_ffff_tmp113, ra000_ffff_tmp114, ra000_ffff_tmp115;
		BitBlock ra000_ffff_tmp116, ra000_ffff_tmp117, ra000_ffff_tmp118;
		BitBlock cc_range_a780_a7b0_3, sequence_ea_9e_adv, ra000_ffff_tmp119;
		BitBlock ra000_ffff_tmp120, byte_ef, ra000_ffff_tmp121, sequence_ef_bc;
		BitBlock byte_ef_adv, ra000_ffff_tmp122, byte_range_a1_ba, sequence_ef_bc_adv;
		BitBlock ra000_ffff_tmp123, r80_10ffff_tmp2, byte_range_f0_ff, byte_f0;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_90;
		BitBlock r10000_10ffff_tmp4, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp5;
		BitBlock sequence_f0_90_90, sequence_f0_90_adv, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, byte_range_80_a7, sequence_f0_90_90_adv;
		BitBlock r10000_10ffff_tmp8, r10000_10ffff_tmp9, r10000_10ffff_tmp10, byte_91;
		BitBlock sequence_f0_91, r10000_10ffff_tmp11, r10000_10ffff_tmp12;
		BitBlock r10000_10ffff_tmp13, byte_a2, r10000_10ffff_tmp14, sequence_f0_91_a2;
		BitBlock sequence_f0_91_adv, sequence_f0_91_a2_adv, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, sequence_f0_9d;
		BitBlock r10000_10ffff_tmp18, sequence_f0_9d_90, sequence_f0_9d_adv;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock r10000_10ffff_tmp22, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock r10000_10ffff_tmp25, cc_range_1d400_1d434_4, sequence_f0_9d_90_adv;
		BitBlock r10000_10ffff_tmp26, sequence_f0_9d_91, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, r10000_10ffff_tmp29, r10000_10ffff_tmp30;
		BitBlock r10000_10ffff_tmp31, r10000_10ffff_tmp32, cc_range_1d440_1d468_4;
		BitBlock sequence_f0_9d_91_adv, r10000_10ffff_tmp33, sequence_f0_9d_92;
		BitBlock r10000_10ffff_tmp34, r10000_10ffff_tmp35, r10000_10ffff_tmp36;
		BitBlock r10000_10ffff_tmp37, r10000_10ffff_tmp38, r10000_10ffff_tmp39;
		BitBlock r10000_10ffff_tmp40, r10000_10ffff_tmp41, r10000_10ffff_tmp42;
		BitBlock r10000_10ffff_tmp43, r10000_10ffff_tmp44, r10000_10ffff_tmp45;
		BitBlock r10000_10ffff_tmp46, r10000_10ffff_tmp47, r10000_10ffff_tmp48;
		BitBlock r10000_10ffff_tmp49, r10000_10ffff_tmp50, r10000_10ffff_tmp51;
		BitBlock r10000_10ffff_tmp52, r10000_10ffff_tmp53, r10000_10ffff_tmp54;
		BitBlock r10000_10ffff_tmp55, cc_range_1d480_1d4ae_4, sequence_f0_9d_92_adv;
		BitBlock r10000_10ffff_tmp56, r10000_10ffff_tmp57, sequence_f0_9d_93;
		BitBlock r10000_10ffff_tmp58, r10000_10ffff_tmp59, r10000_10ffff_tmp60;
		BitBlock byte_range_90_a9, sequence_f0_9d_93_adv, r10000_10ffff_tmp61;
		BitBlock r10000_10ffff_tmp62, byte_94, sequence_f0_9d_94, r10000_10ffff_tmp63;
		BitBlock r10000_10ffff_tmp64, r10000_10ffff_tmp65, r10000_10ffff_tmp66;
		BitBlock r10000_10ffff_tmp67, r10000_10ffff_tmp68, r10000_10ffff_tmp69;
		BitBlock r10000_10ffff_tmp70, r10000_10ffff_tmp71, r10000_10ffff_tmp72;
		BitBlock r10000_10ffff_tmp73, r10000_10ffff_tmp74, r10000_10ffff_tmp75;
		BitBlock r10000_10ffff_tmp76, r10000_10ffff_tmp77, r10000_10ffff_tmp78;
		BitBlock r10000_10ffff_tmp79, r10000_10ffff_tmp80, r10000_10ffff_tmp81;
		BitBlock r10000_10ffff_tmp82, r10000_10ffff_tmp83, r10000_10ffff_tmp84;
		BitBlock r10000_10ffff_tmp85, r10000_10ffff_tmp86, cc_range_1d504_1d53b_4;
		BitBlock sequence_f0_9d_94_adv, r10000_10ffff_tmp87, r10000_10ffff_tmp88;
		BitBlock byte_95, sequence_f0_9d_95, r10000_10ffff_tmp89, r10000_10ffff_tmp90;
		BitBlock r10000_10ffff_tmp91, r10000_10ffff_tmp92, r10000_10ffff_tmp93;
		BitBlock r10000_10ffff_tmp94, r10000_10ffff_tmp95, r10000_10ffff_tmp96;
		BitBlock r10000_10ffff_tmp97, r10000_10ffff_tmp98, r10000_10ffff_tmp99;
		BitBlock cc_range_1d540_1d56c_4, sequence_f0_9d_95_adv, r10000_10ffff_tmp100;
		BitBlock byte_96, sequence_f0_9d_96, r10000_10ffff_tmp101;
		BitBlock r10000_10ffff_tmp102, cc_range_1d580_1d5a0_4, sequence_f0_9d_96_adv;
		BitBlock r10000_10ffff_tmp103, r10000_10ffff_tmp104, byte_97;
		BitBlock sequence_f0_9d_97, r10000_10ffff_tmp105, r10000_10ffff_tmp106;
		BitBlock r10000_10ffff_tmp107, r10000_10ffff_tmp108, byte_range_94_ad;
		BitBlock sequence_f0_9d_97_adv, r10000_10ffff_tmp109, r10000_10ffff_tmp110;
		BitBlock byte_98, sequence_f0_9d_98, r10000_10ffff_tmp111;
		BitBlock r10000_10ffff_tmp112, r10000_10ffff_tmp113, r10000_10ffff_tmp114;
		BitBlock r10000_10ffff_tmp115, cc_range_1d608_1d63c_4, sequence_f0_9d_98_adv;
		BitBlock r10000_10ffff_tmp116, r10000_10ffff_tmp117, sequence_f0_9d_99;
		BitBlock r10000_10ffff_tmp118, r10000_10ffff_tmp119, cc_range_1d640_1d670_4;
		BitBlock sequence_f0_9d_99_adv, r10000_10ffff_tmp120, r10000_10ffff_tmp121;
		BitBlock sequence_f0_9d_9a, r10000_10ffff_tmp122, cc_range_1d680_1d6a8_4;
		BitBlock sequence_f0_9d_9a_adv, r10000_10ffff_tmp123, r10000_10ffff_tmp124;
		BitBlock byte_9b, sequence_f0_9d_9b, r10000_10ffff_tmp125;
		BitBlock r10000_10ffff_tmp126, r10000_10ffff_tmp127, cc_range_1d6c0_1d6e2_4;
		BitBlock sequence_f0_9d_9b_adv, r10000_10ffff_tmp128, sequence_f0_9d_9c;
		BitBlock r10000_10ffff_tmp129, r10000_10ffff_tmp130, r10000_10ffff_tmp131;
		BitBlock r10000_10ffff_tmp132, byte_range_9c_b4, sequence_f0_9d_9c_adv;
		BitBlock r10000_10ffff_tmp133, sequence_f0_9d_9d, r10000_10ffff_tmp134;
		BitBlock r10000_10ffff_tmp135, r10000_10ffff_tmp136, r10000_10ffff_tmp137;
		BitBlock byte_range_96_ae, sequence_f0_9d_9d_adv, r10000_10ffff_tmp138;
		BitBlock r10000_10ffff_tmp139, sequence_f0_9d_9e, r10000_10ffff_tmp140;
		BitBlock r10000_10ffff_tmp141, r10000_10ffff_tmp142, r10000_10ffff_tmp143;
		BitBlock r10000_10ffff_tmp144, byte_range_90_a8, sequence_f0_9d_9e_adv;
		BitBlock r10000_10ffff_tmp145, byte_9f, sequence_f0_9d_9f, byte_8a;
		BitBlock sequence_f0_9d_9f_adv, r10000_10ffff_tmp146, sequence_f0_9f;
		BitBlock r10000_10ffff_tmp147, sequence_f0_9f_84, sequence_f0_9f_adv;
		BitBlock sequence_f0_9f_84_adv, r10000_10ffff_tmp148, sequence_f0_9f_85;
		BitBlock r10000_10ffff_tmp149, cc_range_1f140_1f170_4, sequence_f0_9f_85_adv;
		BitBlock r10000_10ffff_tmp150, sequence_f0_9f_86, byte_range_80_89;
		BitBlock sequence_f0_9f_86_adv, r10000_10ffff_tmp151;




        struct_upper_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_andc(tmp1, basis_bits.bit_2);
        tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp4 = simd_or(basis_bits.bit_5, tmp3);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        tmp6 = simd_not(tmp5);
        tmp7 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp9 = simd_or(tmp7, tmp8);
        tmp10 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(tmp9, basis_bits.bit_3));
        byte_range_41_5a = simd_and(tmp2, tmp10);
        struct_upper_Y.cc = simd_or(struct_upper_Y.cc, byte_range_41_5a);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 73))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 17))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(tmp3, tmp7);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, basis_bits.bit_2);
            r80_7ff_tmp6 = simd_and(basis_bits.bit_5, tmp3);
            r80_7ff_tmp7 = simd_or(basis_bits.bit_4, r80_7ff_tmp6);
            r80_7ff_tmp8 = simd_and(basis_bits.bit_3, r80_7ff_tmp7);
            r80_7ff_tmp9 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp8);
            r80_7ff_tmp10 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp11 = simd_and(r80_7ff_tmp4, r80_7ff_tmp10);
            r80_7ff_tmp12 = simd_and(r80_7ff_tmp11, basis_bits.bit_4);
            r80_7ff_tmp13 = simd_andc(r80_7ff_tmp12, r80_7ff_tmp6);
            cc_range_c0_d8_2 = simd_or(r80_7ff_tmp9, r80_7ff_tmp13);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(0), byte_c3_adv));
            r80_7ff_tmp14 = simd_and(byte_c3_adv, cc_range_c0_d8_2);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r80_7ff_tmp14);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp7);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(1, 9))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(1, 6))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_5, tmp8);
                r100_2ff_tmp2 = simd_not(r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r100_2ff_tmp6 = simd_and(r100_2ff_tmp4, r100_2ff_tmp5);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp6);
                byte_range_80_8f = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
                carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(1), r100_2ff_tmp7));
                r100_2ff_tmp8 = simd_and(r100_2ff_tmp7, byte_range_80_8f);
                r100_2ff_tmp9 = simd_or(byte_range_c4_c8, r100_2ff_tmp8);
                if ((bitblock::any(r100_2ff_tmp9) || carryQ.CarryTest(2, 5))) {
                  r100_24f_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                  r100_24f_tmp2 = simd_andc(r100_24f_tmp1, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp2);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(2, 2))) {
                    r100_17f_tmp1 = simd_andc(r100_24f_tmp1, tmp8);
                    byte_c4 = simd_and(r80_7ff_tmp2, r100_17f_tmp1);
                    r100_17f_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                    r100_17f_tmp3 = simd_andc(r100_17f_tmp2, tmp7);
                    r100_17f_tmp4 = simd_andc(tmp9, r100_17f_tmp3);
                    r100_17f_tmp5 = simd_andc(r100_17f_tmp4, r100_17f_tmp1);
                    r100_17f_tmp6 = simd_and(r100_24f_tmp1, r100_17f_tmp2);
                    r100_17f_tmp7 = simd_andc(r100_17f_tmp5, r100_17f_tmp6);
                    r100_17f_tmp8 = simd_andc(r100_2ff_tmp4, tmp8);
                    r100_17f_tmp9 = simd_andc(r100_17f_tmp7, r100_17f_tmp8);
                    r100_17f_tmp10 = simd_and(r100_2ff_tmp4, r100_17f_tmp2);
                    r100_17f_tmp11 = simd_andc(r100_17f_tmp9, r100_17f_tmp10);
                    r100_17f_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                    r100_17f_tmp13 = simd_andc(r100_17f_tmp12, tmp8);
                    r100_17f_tmp14 = simd_andc(r100_17f_tmp11, r100_17f_tmp13);
                    r100_17f_tmp15 = simd_and(r100_17f_tmp12, r100_17f_tmp2);
                    r100_17f_tmp16 = simd_andc(r100_17f_tmp14, r100_17f_tmp15);
                    r100_17f_tmp17 = simd_andc(byte_range_80_8f, r100_17f_tmp16);
                    r100_17f_tmp18 = simd_andc(r80_7ff_tmp11, tmp9);
                    r100_17f_tmp19 = simd_or(r100_17f_tmp17, r100_17f_tmp18);
                    r100_17f_tmp20 = simd_and(r80_7ff_tmp11, r100_17f_tmp3);
                    r100_17f_tmp21 = simd_or(r100_17f_tmp19, r100_17f_tmp20);
                    r100_17f_tmp22 = simd_and(r80_7ff_tmp11, r100_17f_tmp1);
                    r100_17f_tmp23 = simd_or(r100_17f_tmp21, r100_17f_tmp22);
                    r100_17f_tmp24 = simd_and(r80_7ff_tmp11, r100_17f_tmp6);
                    r100_17f_tmp25 = simd_or(r100_17f_tmp23, r100_17f_tmp24);
                    r100_17f_tmp26 = simd_and(r80_7ff_tmp11, r100_17f_tmp8);
                    r100_17f_tmp27 = simd_or(r100_17f_tmp25, r100_17f_tmp26);
                    r100_17f_tmp28 = simd_and(r80_7ff_tmp11, r100_17f_tmp10);
                    r100_17f_tmp29 = simd_or(r100_17f_tmp27, r100_17f_tmp28);
                    r100_17f_tmp30 = simd_and(r80_7ff_tmp11, r100_17f_tmp13);
                    r100_17f_tmp31 = simd_or(r100_17f_tmp29, r100_17f_tmp30);
                    r100_17f_tmp32 = simd_and(r80_7ff_tmp11, r100_17f_tmp15);
                    r100_17f_tmp33 = simd_or(r100_17f_tmp31, r100_17f_tmp32);
                    r100_17f_tmp34 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                    r100_17f_tmp35 = simd_and(r80_7ff_tmp4, r100_17f_tmp34);
                    r100_17f_tmp36 = simd_andc(r100_17f_tmp35, tmp9);
                    r100_17f_tmp37 = simd_or(r100_17f_tmp33, r100_17f_tmp36);
                    r100_17f_tmp38 = simd_and(r100_17f_tmp35, r100_17f_tmp3);
                    r100_17f_tmp39 = simd_or(r100_17f_tmp37, r100_17f_tmp38);
                    r100_17f_tmp40 = simd_and(r100_17f_tmp35, r100_17f_tmp1);
                    r100_17f_tmp41 = simd_or(r100_17f_tmp39, r100_17f_tmp40);
                    r100_17f_tmp42 = simd_and(r100_17f_tmp35, r100_17f_tmp6);
                    r100_17f_tmp43 = simd_or(r100_17f_tmp41, r100_17f_tmp42);
                    r100_17f_tmp44 = simd_and(r100_17f_tmp35, r100_17f_tmp8);
                    r100_17f_tmp45 = simd_or(r100_17f_tmp43, r100_17f_tmp44);
                    r100_17f_tmp46 = simd_and(r100_17f_tmp35, r100_17f_tmp10);
                    r100_17f_tmp47 = simd_or(r100_17f_tmp45, r100_17f_tmp46);
                    r100_17f_tmp48 = simd_and(r100_17f_tmp35, r100_17f_tmp13);
                    r100_17f_tmp49 = simd_or(r100_17f_tmp47, r100_17f_tmp48);
                    r100_17f_tmp50 = simd_and(r100_17f_tmp35, r100_17f_tmp15);
                    r100_17f_tmp51 = simd_or(r100_17f_tmp49, r100_17f_tmp50);
                    r100_17f_tmp52 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                    r100_17f_tmp53 = simd_and(r80_7ff_tmp4, r100_17f_tmp52);
                    r100_17f_tmp54 = simd_andc(r100_17f_tmp53, tmp9);
                    r100_17f_tmp55 = simd_or(r100_17f_tmp51, r100_17f_tmp54);
                    r100_17f_tmp56 = simd_and(r100_17f_tmp53, r100_17f_tmp3);
                    r100_17f_tmp57 = simd_or(r100_17f_tmp55, r100_17f_tmp56);
                    r100_17f_tmp58 = simd_and(r100_17f_tmp53, r100_17f_tmp1);
                    r100_17f_tmp59 = simd_or(r100_17f_tmp57, r100_17f_tmp58);
                    r100_17f_tmp60 = simd_and(r100_17f_tmp53, r100_17f_tmp6);
                    r100_17f_tmp61 = simd_or(r100_17f_tmp59, r100_17f_tmp60);
                    r100_17f_tmp62 = simd_and(r100_17f_tmp53, r100_2ff_tmp6);
                    r100_17f_tmp63 = simd_or(r100_17f_tmp61, r100_17f_tmp62);
                    r100_17f_tmp64 = simd_and(r100_2ff_tmp4, tmp3);
                    r100_17f_tmp65 = simd_and(r100_17f_tmp53, r100_17f_tmp64);
                    r100_17f_tmp66 = simd_or(r100_17f_tmp63, r100_17f_tmp65);
                    r100_17f_tmp67 = simd_and(r100_17f_tmp12, r100_2ff_tmp5);
                    r100_17f_tmp68 = simd_and(r100_17f_tmp53, r100_17f_tmp67);
                    r100_17f_tmp69 = simd_or(r100_17f_tmp66, r100_17f_tmp68);
                    r100_17f_tmp70 = simd_and(r100_17f_tmp12, tmp3);
                    r100_17f_tmp71 = simd_and(r100_17f_tmp53, r100_17f_tmp70);
                    cc_range_100_13f_2 = simd_or(r100_17f_tmp69, r100_17f_tmp71);
                    carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c4, carryQ.get_carry_in(2), byte_c4_adv));
                    r100_17f_tmp72 = simd_and(byte_c4_adv, cc_range_100_13f_2);
                    struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r100_17f_tmp72);
                    r100_17f_tmp73 = simd_and(r100_24f_tmp1, r100_2ff_tmp5);
                    byte_c5 = simd_and(r80_7ff_tmp2, r100_17f_tmp73);
                    r100_17f_tmp74 = simd_andc(basis_bits.bit_7, tmp7);
                    r100_17f_tmp75 = simd_or(r100_17f_tmp74, r100_17f_tmp73);
                    r100_17f_tmp76 = simd_and(r100_24f_tmp1, tmp3);
                    r100_17f_tmp77 = simd_or(r100_17f_tmp75, r100_17f_tmp76);
                    r100_17f_tmp78 = simd_or(r100_17f_tmp77, r100_17f_tmp10);
                    r100_17f_tmp79 = simd_or(r100_17f_tmp78, r100_17f_tmp13);
                    r100_17f_tmp80 = simd_or(r100_17f_tmp79, r100_17f_tmp15);
                    r100_17f_tmp81 = simd_and(byte_range_80_8f, r100_17f_tmp80);
                    r100_17f_tmp82 = simd_or(r100_17f_tmp81, r100_17f_tmp18);
                    r100_17f_tmp83 = simd_or(r100_17f_tmp82, r100_17f_tmp20);
                    r100_17f_tmp84 = simd_or(r100_17f_tmp83, r100_17f_tmp22);
                    r100_17f_tmp85 = simd_or(r100_17f_tmp84, r100_17f_tmp24);
                    r100_17f_tmp86 = simd_or(r100_17f_tmp85, r100_17f_tmp26);
                    r100_17f_tmp87 = simd_or(r100_17f_tmp86, r100_17f_tmp28);
                    r100_17f_tmp88 = simd_or(r100_17f_tmp87, r100_17f_tmp30);
                    r100_17f_tmp89 = simd_or(r100_17f_tmp88, r100_17f_tmp32);
                    r100_17f_tmp90 = simd_or(r100_17f_tmp89, r100_17f_tmp36);
                    r100_17f_tmp91 = simd_or(r100_17f_tmp90, r100_17f_tmp38);
                    r100_17f_tmp92 = simd_or(r100_17f_tmp91, r100_17f_tmp40);
                    r100_17f_tmp93 = simd_or(r100_17f_tmp92, r100_17f_tmp42);
                    r100_17f_tmp94 = simd_or(r100_17f_tmp93, r100_17f_tmp44);
                    r100_17f_tmp95 = simd_or(r100_17f_tmp94, r100_17f_tmp46);
                    r100_17f_tmp96 = simd_or(r100_17f_tmp95, r100_17f_tmp48);
                    r100_17f_tmp97 = simd_or(r100_17f_tmp96, r100_17f_tmp50);
                    r100_17f_tmp98 = simd_or(r100_17f_tmp97, r100_17f_tmp54);
                    r100_17f_tmp99 = simd_or(r100_17f_tmp98, r100_17f_tmp56);
                    r100_17f_tmp100 = simd_or(r100_17f_tmp99, r100_17f_tmp58);
                    r100_17f_tmp101 = simd_or(r100_17f_tmp100, r100_17f_tmp60);
                    r100_17f_tmp102 = simd_andc(r100_2ff_tmp4, basis_bits.bit_6);
                    r100_17f_tmp103 = simd_and(r100_17f_tmp53, r100_17f_tmp102);
                    r100_17f_tmp104 = simd_or(r100_17f_tmp101, r100_17f_tmp103);
                    r100_17f_tmp105 = simd_or(r100_17f_tmp104, r100_17f_tmp65);
                    cc_range_141_17d_2 = simd_or(r100_17f_tmp105, r100_17f_tmp68);
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_c5, carryQ.get_carry_in(3), byte_c5_adv));
                    r100_17f_tmp106 = simd_and(byte_c5_adv, cc_range_141_17d_2);
                    struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r100_17f_tmp106);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(2, 2);
                  }
                  r100_24f_tmp3 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp4 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r100_24f_tmp3, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp4);
                  r100_24f_tmp5 = simd_or(byte_range_c6_c8, r100_2ff_tmp8);
                  if ((bitblock::any(r100_24f_tmp5) || carryQ.CarryTest(4, 3))) {
                    r180_24f_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                    r180_24f_tmp2 = simd_and(r100_24f_tmp1, r180_24f_tmp1);
                    byte_c6 = simd_and(r80_7ff_tmp2, r180_24f_tmp2);
                    r180_24f_tmp3 = simd_andc(byte_range_80_8f, tmp7);
                    r180_24f_tmp4 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                    r180_24f_tmp5 = simd_and(r180_24f_tmp3, r180_24f_tmp4);
                    r180_24f_tmp6 = simd_andc(r100_24f_tmp1, tmp8);
                    r180_24f_tmp7 = simd_and(byte_range_80_8f, r180_24f_tmp6);
                    r180_24f_tmp8 = simd_or(r180_24f_tmp5, r180_24f_tmp7);
                    r180_24f_tmp9 = simd_and(r100_24f_tmp1, basis_bits.bit_6);
                    r180_24f_tmp10 = simd_and(byte_range_80_8f, r180_24f_tmp9);
                    r180_24f_tmp11 = simd_or(r180_24f_tmp8, r180_24f_tmp10);
                    r180_24f_tmp12 = simd_and(byte_range_80_8f, r100_2ff_tmp4);
                    r180_24f_tmp13 = simd_and(r180_24f_tmp12, tmp8);
                    r180_24f_tmp14 = simd_or(r180_24f_tmp11, r180_24f_tmp13);
                    r180_24f_tmp15 = simd_or(tmp7, basis_bits.bit_6);
                    r180_24f_tmp16 = simd_not(r180_24f_tmp15);
                    r180_24f_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                    r180_24f_tmp18 = simd_and(r180_24f_tmp17, basis_bits.bit_6);
                    r180_24f_tmp19 = simd_or(simd_and(basis_bits.bit_3, r180_24f_tmp16), simd_andc(r180_24f_tmp18, basis_bits.bit_3));
                    r180_24f_tmp20 = simd_and(r80_7ff_tmp5, r180_24f_tmp19);
                    r180_24f_tmp21 = simd_or(r180_24f_tmp14, r180_24f_tmp20);
                    r180_24f_tmp22 = simd_andc(r80_7ff_tmp11, basis_bits.bit_4);
                    r180_24f_tmp23 = simd_not(tmp8);
                    r180_24f_tmp24 = simd_or(simd_and(basis_bits.bit_5, r180_24f_tmp23), simd_andc(tmp3, basis_bits.bit_5));
                    r180_24f_tmp25 = simd_and(r180_24f_tmp22, r180_24f_tmp24);
                    r180_24f_tmp26 = simd_or(r180_24f_tmp21, r180_24f_tmp25);
                    r180_24f_tmp27 = simd_and(r80_7ff_tmp11, r100_24f_tmp4);
                    r180_24f_tmp28 = simd_or(r180_24f_tmp26, r180_24f_tmp27);
                    r180_24f_tmp29 = simd_andc(r180_24f_tmp17, basis_bits.bit_6);
                    r180_24f_tmp30 = simd_and(r80_7ff_tmp11, r180_24f_tmp29);
                    r180_24f_tmp31 = simd_or(r180_24f_tmp28, r180_24f_tmp30);
                    r180_24f_tmp32 = simd_or(basis_bits.bit_3, tmp9);
                    r180_24f_tmp33 = simd_not(r180_24f_tmp32);
                    r180_24f_tmp34 = simd_and(r180_24f_tmp17, tmp3);
                    r180_24f_tmp35 = simd_and(basis_bits.bit_3, r180_24f_tmp34);
                    r180_24f_tmp36 = simd_or(simd_and(basis_bits.bit_2, r180_24f_tmp33), simd_andc(r180_24f_tmp35, basis_bits.bit_2));
                    r180_24f_tmp37 = simd_and(r80_7ff_tmp4, r180_24f_tmp36);
                    r180_24f_tmp38 = simd_or(r180_24f_tmp31, r180_24f_tmp37);
                    r180_24f_tmp39 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                    r180_24f_tmp40 = simd_and(r80_7ff_tmp4, r180_24f_tmp39);
                    r180_24f_tmp41 = simd_andc(r180_24f_tmp1, tmp7);
                    r180_24f_tmp42 = simd_and(r180_24f_tmp40, r180_24f_tmp41);
                    r180_24f_tmp43 = simd_or(r180_24f_tmp38, r180_24f_tmp42);
                    r180_24f_tmp44 = simd_and(r180_24f_tmp40, r180_24f_tmp6);
                    r180_24f_tmp45 = simd_or(r180_24f_tmp43, r180_24f_tmp44);
                    r180_24f_tmp46 = simd_and(r180_24f_tmp40, r180_24f_tmp9);
                    r180_24f_tmp47 = simd_or(r180_24f_tmp45, r180_24f_tmp46);
                    r180_24f_tmp48 = simd_and(r180_24f_tmp40, r100_2ff_tmp6);
                    r180_24f_tmp49 = simd_or(r180_24f_tmp47, r180_24f_tmp48);
                    r180_24f_tmp50 = simd_andc(r180_24f_tmp17, tmp8);
                    r180_24f_tmp51 = simd_and(r180_24f_tmp40, r180_24f_tmp50);
                    r180_24f_tmp52 = simd_or(r180_24f_tmp49, r180_24f_tmp51);
                    r180_24f_tmp53 = simd_and(r180_24f_tmp40, r180_24f_tmp18);
                    r180_24f_tmp54 = simd_or(r180_24f_tmp52, r180_24f_tmp53);
                    r180_24f_tmp55 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                    r180_24f_tmp56 = simd_and(r80_7ff_tmp4, r180_24f_tmp55);
                    r180_24f_tmp57 = simd_andc(r180_24f_tmp56, tmp7);
                    r180_24f_tmp58 = simd_and(r180_24f_tmp57, tmp8);
                    r180_24f_tmp59 = simd_or(r180_24f_tmp54, r180_24f_tmp58);
                    r180_24f_tmp60 = simd_and(r100_24f_tmp1, r100_2ff_tmp5);
                    r180_24f_tmp61 = simd_and(r180_24f_tmp56, r180_24f_tmp60);
                    r180_24f_tmp62 = simd_or(r180_24f_tmp59, r180_24f_tmp61);
                    r180_24f_tmp63 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r80_7ff_tmp6, basis_bits.bit_4));
                    r180_24f_tmp64 = simd_and(r180_24f_tmp56, r180_24f_tmp63);
                    r180_24f_tmp65 = simd_or(r180_24f_tmp62, r180_24f_tmp64);
                    r180_24f_tmp66 = simd_and(r180_24f_tmp56, r180_24f_tmp50);
                    cc_range_181_1bc_2 = simd_or(r180_24f_tmp65, r180_24f_tmp66);
                    carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_c6, carryQ.get_carry_in(4), byte_c6_adv));
                    r180_24f_tmp67 = simd_and(byte_c6_adv, cc_range_181_1bc_2);
                    struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r180_24f_tmp67);
                    r180_24f_tmp68 = simd_and(r100_24f_tmp1, tmp3);
                    byte_c7 = simd_and(r80_7ff_tmp2, r180_24f_tmp68);
                    r180_24f_tmp69 = simd_andc(tmp8, tmp3);
                    r180_24f_tmp70 = simd_andc(r100_24f_tmp1, r180_24f_tmp69);
                    r180_24f_tmp71 = simd_and(r100_2ff_tmp4, r180_24f_tmp1);
                    r180_24f_tmp72 = simd_or(r180_24f_tmp70, r180_24f_tmp71);
                    r180_24f_tmp73 = simd_and(r180_24f_tmp17, r100_2ff_tmp5);
                    r180_24f_tmp74 = simd_or(r180_24f_tmp72, r180_24f_tmp73);
                    r180_24f_tmp75 = simd_or(r180_24f_tmp74, r180_24f_tmp34);
                    r180_24f_tmp76 = simd_and(byte_range_80_8f, r180_24f_tmp75);
                    r180_24f_tmp77 = simd_andc(r100_2ff_tmp5, tmp7);
                    r180_24f_tmp78 = simd_and(r80_7ff_tmp11, r180_24f_tmp77);
                    r180_24f_tmp79 = simd_or(r180_24f_tmp76, r180_24f_tmp78);
                    r180_24f_tmp80 = simd_and(r80_7ff_tmp11, r80_7ff_tmp3);
                    r180_24f_tmp81 = simd_or(r180_24f_tmp79, r180_24f_tmp80);
                    r180_24f_tmp82 = simd_and(r80_7ff_tmp11, r180_24f_tmp60);
                    r180_24f_tmp83 = simd_or(r180_24f_tmp81, r180_24f_tmp82);
                    r180_24f_tmp84 = simd_and(r80_7ff_tmp11, r180_24f_tmp68);
                    r180_24f_tmp85 = simd_or(r180_24f_tmp83, r180_24f_tmp84);
                    r180_24f_tmp86 = simd_and(r80_7ff_tmp11, r100_2ff_tmp6);
                    r180_24f_tmp87 = simd_or(r180_24f_tmp85, r180_24f_tmp86);
                    r180_24f_tmp88 = simd_and(r100_2ff_tmp4, tmp3);
                    r180_24f_tmp89 = simd_and(r80_7ff_tmp11, r180_24f_tmp88);
                    r180_24f_tmp90 = simd_or(r180_24f_tmp87, r180_24f_tmp89);
                    r180_24f_tmp91 = simd_and(r180_24f_tmp17, r180_24f_tmp1);
                    r180_24f_tmp92 = simd_and(r80_7ff_tmp11, r180_24f_tmp91);
                    r180_24f_tmp93 = simd_or(r180_24f_tmp90, r180_24f_tmp92);
                    r180_24f_tmp94 = simd_andc(r180_24f_tmp40, tmp9);
                    r180_24f_tmp95 = simd_or(r180_24f_tmp93, r180_24f_tmp94);
                    r180_24f_tmp96 = simd_or(r180_24f_tmp95, r180_24f_tmp42);
                    r180_24f_tmp97 = simd_or(r180_24f_tmp96, r180_24f_tmp44);
                    r180_24f_tmp98 = simd_and(r180_24f_tmp40, r180_24f_tmp2);
                    r180_24f_tmp99 = simd_or(r180_24f_tmp97, r180_24f_tmp98);
                    r180_24f_tmp100 = simd_andc(r100_2ff_tmp4, tmp8);
                    r180_24f_tmp101 = simd_and(r180_24f_tmp40, r180_24f_tmp100);
                    r180_24f_tmp102 = simd_or(r180_24f_tmp99, r180_24f_tmp101);
                    r180_24f_tmp103 = simd_and(r180_24f_tmp40, r180_24f_tmp71);
                    r180_24f_tmp104 = simd_or(r180_24f_tmp102, r180_24f_tmp103);
                    r180_24f_tmp105 = simd_or(r180_24f_tmp104, r180_24f_tmp51);
                    r180_24f_tmp106 = simd_and(r180_24f_tmp40, r180_24f_tmp91);
                    r180_24f_tmp107 = simd_or(r180_24f_tmp105, r180_24f_tmp106);
                    r180_24f_tmp108 = simd_and(r180_24f_tmp56, r180_24f_tmp77);
                    r180_24f_tmp109 = simd_or(r180_24f_tmp107, r180_24f_tmp108);
                    r180_24f_tmp110 = simd_and(r180_24f_tmp56, r180_24f_tmp6);
                    r180_24f_tmp111 = simd_or(r180_24f_tmp109, r180_24f_tmp110);
                    r180_24f_tmp112 = simd_and(r180_24f_tmp56, r100_24f_tmp4);
                    r180_24f_tmp113 = simd_or(r180_24f_tmp111, r180_24f_tmp112);
                    r180_24f_tmp114 = simd_and(r180_24f_tmp56, r180_24f_tmp71);
                    r180_24f_tmp115 = simd_or(r180_24f_tmp113, r180_24f_tmp114);
                    r180_24f_tmp116 = simd_or(r180_24f_tmp115, r180_24f_tmp66);
                    r180_24f_tmp117 = simd_and(r180_24f_tmp56, r180_24f_tmp91);
                    cc_range_1c4_1fe_2 = simd_or(r180_24f_tmp116, r180_24f_tmp117);
                    carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(5), byte_c7_adv));
                    r180_24f_tmp118 = simd_and(byte_c7_adv, cc_range_1c4_1fe_2);
                    struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r180_24f_tmp118);
                    byte_c8 = simd_and(r80_7ff_tmp2, r180_24f_tmp100);
                    r180_24f_tmp119 = simd_andc(tmp9, r180_24f_tmp41);
                    r180_24f_tmp120 = simd_andc(r180_24f_tmp119, r180_24f_tmp6);
                    r180_24f_tmp121 = simd_andc(r180_24f_tmp120, r180_24f_tmp2);
                    r180_24f_tmp122 = simd_andc(r180_24f_tmp121, r180_24f_tmp100);
                    r180_24f_tmp123 = simd_andc(r180_24f_tmp122, r180_24f_tmp71);
                    r180_24f_tmp124 = simd_andc(r180_24f_tmp123, r180_24f_tmp50);
                    r180_24f_tmp125 = simd_andc(r180_24f_tmp124, r180_24f_tmp91);
                    r180_24f_tmp126 = simd_andc(byte_range_80_8f, r180_24f_tmp125);
                    r180_24f_tmp127 = simd_andc(r80_7ff_tmp11, tmp9);
                    r180_24f_tmp128 = simd_or(r180_24f_tmp126, r180_24f_tmp127);
                    r180_24f_tmp129 = simd_and(r80_7ff_tmp11, r180_24f_tmp41);
                    r180_24f_tmp130 = simd_or(r180_24f_tmp128, r180_24f_tmp129);
                    r180_24f_tmp131 = simd_and(r80_7ff_tmp11, r180_24f_tmp6);
                    r180_24f_tmp132 = simd_or(r180_24f_tmp130, r180_24f_tmp131);
                    r180_24f_tmp133 = simd_and(r80_7ff_tmp11, r180_24f_tmp2);
                    r180_24f_tmp134 = simd_or(r180_24f_tmp132, r180_24f_tmp133);
                    r180_24f_tmp135 = simd_and(r80_7ff_tmp11, r180_24f_tmp100);
                    r180_24f_tmp136 = simd_or(r180_24f_tmp134, r180_24f_tmp135);
                    r180_24f_tmp137 = simd_and(r80_7ff_tmp11, r180_24f_tmp71);
                    r180_24f_tmp138 = simd_or(r180_24f_tmp136, r180_24f_tmp137);
                    r180_24f_tmp139 = simd_and(r80_7ff_tmp11, r180_24f_tmp50);
                    r180_24f_tmp140 = simd_or(r180_24f_tmp138, r180_24f_tmp139);
                    r180_24f_tmp141 = simd_or(r180_24f_tmp140, r180_24f_tmp92);
                    r180_24f_tmp142 = simd_or(r180_24f_tmp141, r180_24f_tmp94);
                    r180_24f_tmp143 = simd_or(r180_24f_tmp142, r180_24f_tmp42);
                    r180_24f_tmp144 = simd_or(r180_24f_tmp143, r180_24f_tmp44);
                    r180_24f_tmp145 = simd_or(r180_24f_tmp144, r180_24f_tmp98);
                    r180_24f_tmp146 = simd_or(r180_24f_tmp145, r180_24f_tmp101);
                    r180_24f_tmp147 = simd_or(r180_24f_tmp146, r180_24f_tmp103);
                    r180_24f_tmp148 = simd_or(r180_24f_tmp147, r180_24f_tmp51);
                    r180_24f_tmp149 = simd_or(r180_24f_tmp148, r180_24f_tmp106);
                    r180_24f_tmp150 = simd_andc(r180_24f_tmp56, tmp9);
                    r180_24f_tmp151 = simd_or(r180_24f_tmp149, r180_24f_tmp150);
                    r180_24f_tmp152 = simd_and(r180_24f_tmp56, r180_24f_tmp41);
                    r180_24f_tmp153 = simd_or(r180_24f_tmp151, r180_24f_tmp152);
                    r180_24f_tmp154 = simd_and(r100_2ff_tmp4, basis_bits.bit_6);
                    r180_24f_tmp155 = simd_and(r180_24f_tmp56, r180_24f_tmp154);
                    r180_24f_tmp156 = simd_or(r180_24f_tmp153, r180_24f_tmp155);
                    r180_24f_tmp157 = simd_and(r180_24f_tmp56, r180_24f_tmp17);
                    r180_24f_tmp158 = simd_and(r180_24f_tmp157, r180_24f_tmp4);
                    cc_range_200_23d_2 = simd_or(r180_24f_tmp156, r180_24f_tmp158);
                    carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_c8, carryQ.get_carry_in(6), byte_c8_adv));
                    r180_24f_tmp159 = simd_and(byte_c8_adv, cc_range_200_23d_2);
                    struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r180_24f_tmp159);
                    r180_24f_tmp160 = simd_and(byte_range_80_8f, r180_24f_tmp77);
                    r180_24f_tmp161 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                    r180_24f_tmp162 = simd_xor(basis_bits.bit_5, tmp3);
                    r180_24f_tmp163 = simd_and(r180_24f_tmp161, r180_24f_tmp162);
                    r180_24f_tmp164 = simd_or(r180_24f_tmp160, r180_24f_tmp163);
                    r180_24f_tmp165 = simd_and(byte_range_80_8f, r180_24f_tmp100);
                    r180_24f_tmp166 = simd_or(r180_24f_tmp164, r180_24f_tmp165);
                    r180_24f_tmp167 = simd_and(byte_range_80_8f, r180_24f_tmp71);
                    r180_24f_tmp168 = simd_or(r180_24f_tmp166, r180_24f_tmp167);
                    r180_24f_tmp169 = simd_and(byte_range_80_8f, r180_24f_tmp50);
                    r180_24f_tmp170 = simd_or(r180_24f_tmp168, r180_24f_tmp169);
                    r180_24f_tmp171 = simd_and(byte_range_80_8f, r180_24f_tmp91);
                    cc_range_241_24e_2 = simd_or(r180_24f_tmp170, r180_24f_tmp171);
                    byte_c9_adv = r100_2ff_tmp7;
                    r180_24f_tmp172 = simd_and(byte_c9_adv, cc_range_241_24e_2);
                    struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r180_24f_tmp172);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(4, 3);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(2, 5);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 6);
              }
              r100_3ff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp4 = simd_and(r100_3ff_tmp2, r100_3ff_tmp3);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp4);
              r100_3ff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              byte_range_b0_bf = simd_and(r80_7ff_tmp4, r100_3ff_tmp5);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(7), r100_3ff_tmp6));
              r100_3ff_tmp7 = simd_and(r100_3ff_tmp6, byte_range_b0_bf);
              r100_3ff_tmp8 = simd_and(r100_3ff_tmp2, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp8);
              r100_3ff_tmp9 = simd_or(r100_3ff_tmp7, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp9) || carryQ.CarryTest(8, 2))) {
                r370_3ff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r370_3ff_tmp2 = simd_andc(r370_3ff_tmp1, tmp7);
                r370_3ff_tmp3 = simd_andc(tmp9, r370_3ff_tmp2);
                r370_3ff_tmp4 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                r370_3ff_tmp5 = simd_and(r370_3ff_tmp4, r370_3ff_tmp1);
                r370_3ff_tmp6 = simd_andc(r370_3ff_tmp3, r370_3ff_tmp5);
                r370_3ff_tmp7 = simd_and(r100_3ff_tmp2, tmp3);
                r370_3ff_tmp8 = simd_andc(r370_3ff_tmp6, r370_3ff_tmp7);
                cc_range_370_37f_2 = simd_andc(byte_range_b0_bf, r370_3ff_tmp8);
                byte_cd_adv = r100_3ff_tmp6;
                r370_3ff_tmp9 = simd_and(byte_cd_adv, cc_range_370_37f_2);
                struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r370_3ff_tmp9);
                r370_3ff_tmp10 = simd_and(r100_3ff_tmp2, r370_3ff_tmp1);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp10);
                r370_3ff_tmp11 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
                r370_3ff_tmp12 = simd_and(r370_3ff_tmp11, r370_3ff_tmp5);
                r370_3ff_tmp13 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r370_3ff_tmp14 = simd_and(r370_3ff_tmp11, r370_3ff_tmp13);
                r370_3ff_tmp15 = simd_andc(r370_3ff_tmp14, tmp3);
                r370_3ff_tmp16 = simd_or(r370_3ff_tmp12, r370_3ff_tmp15);
                r370_3ff_tmp17 = simd_andc(r100_3ff_tmp2, tmp8);
                r370_3ff_tmp18 = simd_and(r370_3ff_tmp11, r370_3ff_tmp17);
                r370_3ff_tmp19 = simd_or(r370_3ff_tmp16, r370_3ff_tmp18);
                r370_3ff_tmp20 = simd_and(r370_3ff_tmp11, r100_3ff_tmp8);
                r370_3ff_tmp21 = simd_or(r370_3ff_tmp19, r370_3ff_tmp20);
                r370_3ff_tmp22 = simd_or(tmp7, basis_bits.bit_6);
                r370_3ff_tmp23 = simd_or(basis_bits.bit_3, r370_3ff_tmp22);
                r370_3ff_tmp24 = simd_not(r370_3ff_tmp23);
                r370_3ff_tmp25 = simd_and(basis_bits.bit_3, tmp9);
                r370_3ff_tmp26 = simd_or(simd_and(basis_bits.bit_2, r370_3ff_tmp24), simd_andc(r370_3ff_tmp25, basis_bits.bit_2));
                r370_3ff_tmp27 = simd_and(r80_7ff_tmp4, r370_3ff_tmp26);
                r370_3ff_tmp28 = simd_or(r370_3ff_tmp21, r370_3ff_tmp27);
                r370_3ff_tmp29 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r370_3ff_tmp30 = simd_and(r80_7ff_tmp4, r370_3ff_tmp29);
                r370_3ff_tmp31 = simd_not(basis_bits.bit_5);
                r370_3ff_tmp32 = simd_or(simd_and(basis_bits.bit_4, r370_3ff_tmp31), simd_andc(tmp4, basis_bits.bit_4));
                r370_3ff_tmp33 = simd_and(r370_3ff_tmp30, r370_3ff_tmp32);
                cc_range_386_3a3_2 = simd_or(r370_3ff_tmp28, r370_3ff_tmp33);
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(8), byte_ce_adv));
                r370_3ff_tmp34 = simd_and(byte_ce_adv, cc_range_386_3a3_2);
                struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r370_3ff_tmp34);
                byte_cf = simd_and(r80_7ff_tmp2, r370_3ff_tmp7);
                r370_3ff_tmp35 = simd_and(r370_3ff_tmp11, r370_3ff_tmp7);
                r370_3ff_tmp36 = simd_andc(r80_7ff_tmp11, basis_bits.bit_4);
                r370_3ff_tmp37 = simd_not(tmp8);
                r370_3ff_tmp38 = simd_or(simd_and(basis_bits.bit_5, r370_3ff_tmp37), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                r370_3ff_tmp39 = simd_and(r370_3ff_tmp36, r370_3ff_tmp38);
                r370_3ff_tmp40 = simd_or(r370_3ff_tmp35, r370_3ff_tmp39);
                r370_3ff_tmp41 = simd_andc(r370_3ff_tmp13, tmp8);
                r370_3ff_tmp42 = simd_and(r80_7ff_tmp11, r370_3ff_tmp41);
                r370_3ff_tmp43 = simd_or(r370_3ff_tmp40, r370_3ff_tmp42);
                r370_3ff_tmp44 = simd_and(r370_3ff_tmp13, r370_3ff_tmp1);
                r370_3ff_tmp45 = simd_and(r80_7ff_tmp11, r370_3ff_tmp44);
                r370_3ff_tmp46 = simd_or(r370_3ff_tmp43, r370_3ff_tmp45);
                r370_3ff_tmp47 = simd_and(r80_7ff_tmp11, r370_3ff_tmp17);
                r370_3ff_tmp48 = simd_or(r370_3ff_tmp46, r370_3ff_tmp47);
                r370_3ff_tmp49 = simd_and(r80_7ff_tmp11, r370_3ff_tmp10);
                r370_3ff_tmp50 = simd_or(r370_3ff_tmp48, r370_3ff_tmp49);
                r370_3ff_tmp51 = simd_andc(r370_3ff_tmp30, tmp9);
                r370_3ff_tmp52 = simd_or(r370_3ff_tmp50, r370_3ff_tmp51);
                r370_3ff_tmp53 = simd_and(r370_3ff_tmp30, r370_3ff_tmp2);
                r370_3ff_tmp54 = simd_or(r370_3ff_tmp52, r370_3ff_tmp53);
                r370_3ff_tmp55 = simd_andc(r370_3ff_tmp4, tmp8);
                r370_3ff_tmp56 = simd_and(r370_3ff_tmp30, r370_3ff_tmp55);
                r370_3ff_tmp57 = simd_or(r370_3ff_tmp54, r370_3ff_tmp56);
                r370_3ff_tmp58 = simd_and(r370_3ff_tmp30, r370_3ff_tmp5);
                r370_3ff_tmp59 = simd_or(r370_3ff_tmp57, r370_3ff_tmp58);
                r370_3ff_tmp60 = simd_and(r370_3ff_tmp30, r370_3ff_tmp41);
                r370_3ff_tmp61 = simd_or(r370_3ff_tmp59, r370_3ff_tmp60);
                r370_3ff_tmp62 = simd_and(r370_3ff_tmp30, r370_3ff_tmp44);
                r370_3ff_tmp63 = simd_or(r370_3ff_tmp61, r370_3ff_tmp62);
                r370_3ff_tmp64 = simd_and(r370_3ff_tmp30, r370_3ff_tmp17);
                r370_3ff_tmp65 = simd_or(r370_3ff_tmp63, r370_3ff_tmp64);
                r370_3ff_tmp66 = simd_and(r370_3ff_tmp30, r370_3ff_tmp10);
                r370_3ff_tmp67 = simd_or(r370_3ff_tmp65, r370_3ff_tmp66);
                r370_3ff_tmp68 = simd_and(byte_range_b0_bf, r370_3ff_tmp55);
                r370_3ff_tmp69 = simd_or(r370_3ff_tmp67, r370_3ff_tmp68);
                r370_3ff_tmp70 = simd_and(r370_3ff_tmp4, tmp3);
                r370_3ff_tmp71 = simd_and(byte_range_b0_bf, r370_3ff_tmp70);
                r370_3ff_tmp72 = simd_or(r370_3ff_tmp69, r370_3ff_tmp71);
                r370_3ff_tmp73 = simd_and(byte_range_b0_bf, r370_3ff_tmp13);
                r370_3ff_tmp74 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                r370_3ff_tmp75 = simd_and(r370_3ff_tmp73, r370_3ff_tmp74);
                r370_3ff_tmp76 = simd_or(r370_3ff_tmp72, r370_3ff_tmp75);
                r370_3ff_tmp77 = simd_and(byte_range_b0_bf, r100_3ff_tmp2);
                r370_3ff_tmp78 = simd_and(r370_3ff_tmp77, tmp8);
                cc_range_3cf_3fd_2 = simd_or(r370_3ff_tmp76, r370_3ff_tmp78);
                carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(9), byte_cf_adv));
                r370_3ff_tmp79 = simd_and(byte_cf_adv, cc_range_3cf_3fd_2);
                struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r370_3ff_tmp79);
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 9);
            }
            r80_7ff_tmp15 = simd_and(byte_range_c0_ff, r80_7ff_tmp10);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp15, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(10, 7))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp15, tmp7);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(10, 4))) {
                byte_d0 = simd_andc(r80_7ff_tmp15, tmp9);
                r400_4ff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_80_af = simd_andc(r80_7ff_tmp4, r400_4ff_tmp1);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_d0, carryQ.get_carry_in(10), byte_d0_adv));
                r400_4ff_tmp2 = simd_and(byte_d0_adv, byte_range_80_af);
                struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r400_4ff_tmp2);
                r400_4ff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r400_4ff_tmp4 = simd_andc(r400_4ff_tmp3, tmp7);
                byte_d1 = simd_and(r80_7ff_tmp15, r400_4ff_tmp4);
                r400_4ff_tmp5 = simd_and(r80_7ff_tmp4, basis_bits.bit_2);
                cc_range_460_47e_2 = simd_andc(r400_4ff_tmp5, basis_bits.bit_7);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_d1, carryQ.get_carry_in(11), byte_d1_adv));
                r400_4ff_tmp6 = simd_and(byte_d1_adv, cc_range_460_47e_2);
                struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r400_4ff_tmp6);
                r400_4ff_tmp7 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r400_4ff_tmp8 = simd_andc(r400_4ff_tmp7, tmp7);
                byte_d2 = simd_and(r80_7ff_tmp15, r400_4ff_tmp8);
                r400_4ff_tmp9 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
                r400_4ff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r400_4ff_tmp11 = simd_and(r400_4ff_tmp10, r400_4ff_tmp7);
                r400_4ff_tmp12 = simd_andc(tmp9, r400_4ff_tmp11);
                r400_4ff_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                r400_4ff_tmp14 = simd_andc(r400_4ff_tmp13, tmp8);
                r400_4ff_tmp15 = simd_andc(r400_4ff_tmp12, r400_4ff_tmp14);
                r400_4ff_tmp16 = simd_and(r400_4ff_tmp13, r400_4ff_tmp7);
                r400_4ff_tmp17 = simd_andc(r400_4ff_tmp15, r400_4ff_tmp16);
                r400_4ff_tmp18 = simd_andc(r400_4ff_tmp9, r400_4ff_tmp17);
                r400_4ff_tmp19 = simd_andc(r80_7ff_tmp11, tmp9);
                r400_4ff_tmp20 = simd_or(r400_4ff_tmp18, r400_4ff_tmp19);
                r400_4ff_tmp21 = simd_and(r80_7ff_tmp11, r400_4ff_tmp8);
                r400_4ff_tmp22 = simd_or(r400_4ff_tmp20, r400_4ff_tmp21);
                r400_4ff_tmp23 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                r400_4ff_tmp24 = simd_andc(r400_4ff_tmp23, tmp8);
                r400_4ff_tmp25 = simd_and(r80_7ff_tmp11, r400_4ff_tmp24);
                r400_4ff_tmp26 = simd_or(r400_4ff_tmp22, r400_4ff_tmp25);
                r400_4ff_tmp27 = simd_and(r400_4ff_tmp23, r400_4ff_tmp7);
                r400_4ff_tmp28 = simd_and(r80_7ff_tmp11, r400_4ff_tmp27);
                r400_4ff_tmp29 = simd_or(r400_4ff_tmp26, r400_4ff_tmp28);
                r400_4ff_tmp30 = simd_andc(r400_4ff_tmp10, tmp8);
                r400_4ff_tmp31 = simd_and(r80_7ff_tmp11, r400_4ff_tmp30);
                r400_4ff_tmp32 = simd_or(r400_4ff_tmp29, r400_4ff_tmp31);
                r400_4ff_tmp33 = simd_and(r80_7ff_tmp11, r400_4ff_tmp11);
                r400_4ff_tmp34 = simd_or(r400_4ff_tmp32, r400_4ff_tmp33);
                r400_4ff_tmp35 = simd_and(r80_7ff_tmp11, r400_4ff_tmp14);
                r400_4ff_tmp36 = simd_or(r400_4ff_tmp34, r400_4ff_tmp35);
                r400_4ff_tmp37 = simd_and(r80_7ff_tmp11, r400_4ff_tmp16);
                r400_4ff_tmp38 = simd_or(r400_4ff_tmp36, r400_4ff_tmp37);
                r400_4ff_tmp39 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r400_4ff_tmp40 = simd_and(r80_7ff_tmp4, r400_4ff_tmp39);
                r400_4ff_tmp41 = simd_andc(r400_4ff_tmp40, tmp9);
                r400_4ff_tmp42 = simd_or(r400_4ff_tmp38, r400_4ff_tmp41);
                r400_4ff_tmp43 = simd_and(r400_4ff_tmp40, r400_4ff_tmp8);
                r400_4ff_tmp44 = simd_or(r400_4ff_tmp42, r400_4ff_tmp43);
                r400_4ff_tmp45 = simd_and(r400_4ff_tmp40, r400_4ff_tmp24);
                r400_4ff_tmp46 = simd_or(r400_4ff_tmp44, r400_4ff_tmp45);
                r400_4ff_tmp47 = simd_and(r400_4ff_tmp40, r400_4ff_tmp27);
                r400_4ff_tmp48 = simd_or(r400_4ff_tmp46, r400_4ff_tmp47);
                r400_4ff_tmp49 = simd_and(r400_4ff_tmp40, r400_4ff_tmp30);
                r400_4ff_tmp50 = simd_or(r400_4ff_tmp48, r400_4ff_tmp49);
                r400_4ff_tmp51 = simd_and(r400_4ff_tmp40, r400_4ff_tmp11);
                r400_4ff_tmp52 = simd_or(r400_4ff_tmp50, r400_4ff_tmp51);
                r400_4ff_tmp53 = simd_and(r400_4ff_tmp40, r400_4ff_tmp14);
                r400_4ff_tmp54 = simd_or(r400_4ff_tmp52, r400_4ff_tmp53);
                r400_4ff_tmp55 = simd_and(r400_4ff_tmp40, r400_4ff_tmp16);
                r400_4ff_tmp56 = simd_or(r400_4ff_tmp54, r400_4ff_tmp55);
                r400_4ff_tmp57 = simd_and(r80_7ff_tmp4, r400_4ff_tmp1);
                r400_4ff_tmp58 = simd_andc(r400_4ff_tmp57, tmp9);
                r400_4ff_tmp59 = simd_or(r400_4ff_tmp56, r400_4ff_tmp58);
                r400_4ff_tmp60 = simd_and(r400_4ff_tmp57, r400_4ff_tmp8);
                r400_4ff_tmp61 = simd_or(r400_4ff_tmp59, r400_4ff_tmp60);
                r400_4ff_tmp62 = simd_and(r400_4ff_tmp57, r400_4ff_tmp24);
                r400_4ff_tmp63 = simd_or(r400_4ff_tmp61, r400_4ff_tmp62);
                r400_4ff_tmp64 = simd_and(r400_4ff_tmp57, r400_4ff_tmp27);
                r400_4ff_tmp65 = simd_or(r400_4ff_tmp63, r400_4ff_tmp64);
                r400_4ff_tmp66 = simd_and(r400_4ff_tmp57, r400_4ff_tmp30);
                r400_4ff_tmp67 = simd_or(r400_4ff_tmp65, r400_4ff_tmp66);
                r400_4ff_tmp68 = simd_and(r400_4ff_tmp57, r400_4ff_tmp11);
                r400_4ff_tmp69 = simd_or(r400_4ff_tmp67, r400_4ff_tmp68);
                r400_4ff_tmp70 = simd_and(r400_4ff_tmp57, r400_4ff_tmp14);
                r400_4ff_tmp71 = simd_or(r400_4ff_tmp69, r400_4ff_tmp70);
                r400_4ff_tmp72 = simd_and(r400_4ff_tmp57, r400_4ff_tmp16);
                cc_range_480_4be_2 = simd_or(r400_4ff_tmp71, r400_4ff_tmp72);
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(12), byte_d2_adv));
                r400_4ff_tmp73 = simd_and(byte_d2_adv, cc_range_480_4be_2);
                struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r400_4ff_tmp73);
                byte_d3 = simd_and(r80_7ff_tmp15, r80_7ff_tmp3);
                r400_4ff_tmp74 = simd_or(tmp7, basis_bits.bit_6);
                r400_4ff_tmp75 = simd_andc(r400_4ff_tmp74, r80_7ff_tmp3);
                r400_4ff_tmp76 = simd_and(r400_4ff_tmp23, r400_4ff_tmp3);
                r400_4ff_tmp77 = simd_andc(r400_4ff_tmp75, r400_4ff_tmp76);
                r400_4ff_tmp78 = simd_and(r400_4ff_tmp23, tmp3);
                r400_4ff_tmp79 = simd_andc(r400_4ff_tmp77, r400_4ff_tmp78);
                r400_4ff_tmp80 = simd_and(r400_4ff_tmp10, r400_4ff_tmp3);
                r400_4ff_tmp81 = simd_andc(r400_4ff_tmp79, r400_4ff_tmp80);
                r400_4ff_tmp82 = simd_and(r400_4ff_tmp10, tmp3);
                r400_4ff_tmp83 = simd_andc(r400_4ff_tmp81, r400_4ff_tmp82);
                r400_4ff_tmp84 = simd_and(r400_4ff_tmp13, r400_4ff_tmp3);
                r400_4ff_tmp85 = simd_andc(r400_4ff_tmp83, r400_4ff_tmp84);
                r400_4ff_tmp86 = simd_andc(r400_4ff_tmp9, r400_4ff_tmp85);
                r400_4ff_tmp87 = simd_or(r400_4ff_tmp86, r400_4ff_tmp19);
                r400_4ff_tmp88 = simd_or(r400_4ff_tmp87, r400_4ff_tmp21);
                r400_4ff_tmp89 = simd_or(r400_4ff_tmp88, r400_4ff_tmp25);
                r400_4ff_tmp90 = simd_or(r400_4ff_tmp89, r400_4ff_tmp28);
                r400_4ff_tmp91 = simd_or(r400_4ff_tmp90, r400_4ff_tmp31);
                r400_4ff_tmp92 = simd_or(r400_4ff_tmp91, r400_4ff_tmp33);
                r400_4ff_tmp93 = simd_or(r400_4ff_tmp92, r400_4ff_tmp35);
                r400_4ff_tmp94 = simd_or(r400_4ff_tmp93, r400_4ff_tmp37);
                r400_4ff_tmp95 = simd_or(r400_4ff_tmp94, r400_4ff_tmp41);
                r400_4ff_tmp96 = simd_or(r400_4ff_tmp95, r400_4ff_tmp43);
                r400_4ff_tmp97 = simd_or(r400_4ff_tmp96, r400_4ff_tmp45);
                r400_4ff_tmp98 = simd_or(r400_4ff_tmp97, r400_4ff_tmp47);
                r400_4ff_tmp99 = simd_or(r400_4ff_tmp98, r400_4ff_tmp49);
                r400_4ff_tmp100 = simd_or(r400_4ff_tmp99, r400_4ff_tmp51);
                r400_4ff_tmp101 = simd_or(r400_4ff_tmp100, r400_4ff_tmp53);
                r400_4ff_tmp102 = simd_or(r400_4ff_tmp101, r400_4ff_tmp55);
                r400_4ff_tmp103 = simd_or(r400_4ff_tmp102, r400_4ff_tmp58);
                r400_4ff_tmp104 = simd_or(r400_4ff_tmp103, r400_4ff_tmp60);
                r400_4ff_tmp105 = simd_or(r400_4ff_tmp104, r400_4ff_tmp62);
                r400_4ff_tmp106 = simd_or(r400_4ff_tmp105, r400_4ff_tmp64);
                r400_4ff_tmp107 = simd_or(r400_4ff_tmp106, r400_4ff_tmp66);
                r400_4ff_tmp108 = simd_or(r400_4ff_tmp107, r400_4ff_tmp68);
                r400_4ff_tmp109 = simd_or(r400_4ff_tmp108, r400_4ff_tmp70);
                cc_range_4c0_4fe_2 = simd_or(r400_4ff_tmp109, r400_4ff_tmp72);
                carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(13), byte_d3_adv));
                r400_4ff_tmp110 = simd_and(byte_d3_adv, cc_range_4c0_4fe_2);
                struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r400_4ff_tmp110);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 4);
              }
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp15, r400_5ff_tmp2);
              r400_5ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp1, r400_5ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp15, r400_5ff_tmp4);
              byte_range_80_8f = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
              carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(14), r400_5ff_tmp5));
              r400_5ff_tmp6 = simd_and(r400_5ff_tmp5, byte_range_80_8f);
              r400_5ff_tmp7 = simd_or(byte_range_d4_d5, r400_5ff_tmp6);
              if ((bitblock::any(r400_5ff_tmp7) || carryQ.CarryTest(15, 2))) {
                r500_58f_tmp1 = simd_andc(r400_5ff_tmp1, tmp8);
                byte_d4 = simd_and(r80_7ff_tmp15, r500_58f_tmp1);
                r500_58f_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                byte_range_80_af = simd_andc(r80_7ff_tmp4, r500_58f_tmp2);
                carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(15), r500_58f_tmp3));
                r500_58f_tmp4 = simd_and(r500_58f_tmp3, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp4)) {
                  cc_range_500_52e_2 = simd_andc(byte_range_80_af, basis_bits.bit_7);
                  byte_d4_adv = r500_58f_tmp3;
                  r500_52f_tmp1 = simd_and(byte_d4_adv, cc_range_500_52e_2);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r500_52f_tmp1);
                }
                byte_range_b0_bf = simd_and(r80_7ff_tmp4, r500_58f_tmp2);
                r500_58f_tmp5 = simd_and(r500_58f_tmp3, byte_range_b0_bf);
                r500_58f_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r500_58f_tmp7 = simd_and(r400_5ff_tmp1, r500_58f_tmp6);
                byte_d5 = simd_and(r80_7ff_tmp15, r500_58f_tmp7);
                r500_58f_tmp8 = simd_or(r500_58f_tmp5, byte_d5);
                r500_58f_tmp9 = simd_or(r500_58f_tmp8, r400_5ff_tmp6);
                if ((bitblock::any(r500_58f_tmp9) || carryQ.CarryTest(16, 1))) {
                  r530_58f_tmp1 = simd_or(basis_bits.bit_5, tmp8);
                  r530_58f_tmp2 = simd_or(basis_bits.bit_4, r530_58f_tmp1);
                  byte_range_b1_bf = simd_and(byte_range_b0_bf, r530_58f_tmp2);
                  byte_d4_adv = r500_58f_tmp3;
                  r530_58f_tmp3 = simd_and(byte_d4_adv, byte_range_b1_bf);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r530_58f_tmp3);
                  byte_range_80_96 = r80_7ff_tmp9;
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(16), byte_d5_adv));
                  r530_58f_tmp4 = simd_and(byte_d5_adv, byte_range_80_96);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r530_58f_tmp4);
                }
                else {
                  carryQ.CarryDequeueEnqueue(16, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(15, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(10, 7);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 17);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(17, 30))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp7);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp8);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(17), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(18, 21))) {
              r800_4dff_tmp1 = simd_or(tmp7, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(18, 11))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp7);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(18, 11))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, tmp7);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(18), r1000_1fff_tmp5));
                  sequence_e1_82 = simd_and(r1000_1fff_tmp5, byte_82);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(19), sequence_e1_82_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_82_adv, byte_range_a0_bf);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r1000_1fff_tmp6);
                  r1000_1fff_tmp7 = simd_andc(tmp3, tmp7);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp7);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  r1000_1fff_tmp8 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp10 = simd_andc(r1000_1fff_tmp8, r1000_1fff_tmp9);
                  r1000_1fff_tmp11 = simd_and(r800_ffff_tmp1, tmp3);
                  r1000_1fff_tmp12 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp11);
                  r1000_1fff_tmp13 = simd_or(r1000_1fff_tmp10, r1000_1fff_tmp12);
                  r1000_1fff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp15 = simd_and(r1000_1fff_tmp14, r800_1fff_tmp1);
                  r1000_1fff_tmp16 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp15);
                  cc_range_10c0_10cd_3 = simd_or(r1000_1fff_tmp13, r1000_1fff_tmp16);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(20), sequence_e1_83_adv));
                  r1000_1fff_tmp17 = simd_and(sequence_e1_83_adv, cc_range_10c0_10cd_3);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r1000_1fff_tmp17);
                  r1000_1fff_tmp18 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp19 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp18);
                  r1000_1fff_tmp20 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp21 = simd_andc(r1000_1fff_tmp20, tmp8);
                  byte_b8 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp21);
                  sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
                  cc_range_1e00_1e3e_3 = simd_andc(r800_ffff_tmp3, basis_bits.bit_7);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(21), sequence_e1_b8_adv));
                  r1000_1fff_tmp22 = simd_and(sequence_e1_b8_adv, cc_range_1e00_1e3e_3);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r1000_1fff_tmp22);
                  r1000_1fff_tmp23 = simd_and(r1000_1fff_tmp20, r800_1fff_tmp1);
                  byte_b9 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp23);
                  sequence_e1_b9 = simd_and(byte_e1_adv, byte_b9);
                  cc_range_1e40_1e7e_3 = cc_range_1e00_1e3e_3;
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e1_b9, carryQ.get_carry_in(22), sequence_e1_b9_adv));
                  r1000_1fff_tmp24 = simd_and(sequence_e1_b9_adv, cc_range_1e40_1e7e_3);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r1000_1fff_tmp24);
                  r1000_1fff_tmp25 = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp3);
                  byte_ba = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp25);
                  sequence_e1_ba = simd_and(byte_e1_adv, byte_ba);
                  r1000_1fff_tmp26 = simd_andc(tmp9, r1000_1fff_tmp4);
                  r1000_1fff_tmp27 = simd_andc(r1000_1fff_tmp26, r800_ffff_tmp2);
                  r1000_1fff_tmp28 = simd_and(r800_ffff_tmp1, r1000_1fff_tmp3);
                  r1000_1fff_tmp29 = simd_andc(r1000_1fff_tmp27, r1000_1fff_tmp28);
                  r1000_1fff_tmp30 = simd_andc(r1000_1fff_tmp29, r1000_1fff_tmp21);
                  r1000_1fff_tmp31 = simd_andc(r1000_1fff_tmp30, r1000_1fff_tmp25);
                  r1000_1fff_tmp32 = simd_andc(r1000_1fff_tmp14, tmp8);
                  r1000_1fff_tmp33 = simd_andc(r1000_1fff_tmp31, r1000_1fff_tmp32);
                  r1000_1fff_tmp34 = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp3);
                  r1000_1fff_tmp35 = simd_andc(r1000_1fff_tmp33, r1000_1fff_tmp34);
                  r1000_1fff_tmp36 = simd_andc(r1000_1fff_tmp2, r1000_1fff_tmp35);
                  r1000_1fff_tmp37 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp38 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp37);
                  r1000_1fff_tmp39 = simd_andc(r1000_1fff_tmp38, tmp9);
                  r1000_1fff_tmp40 = simd_or(r1000_1fff_tmp36, r1000_1fff_tmp39);
                  r1000_1fff_tmp41 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp4);
                  r1000_1fff_tmp42 = simd_or(r1000_1fff_tmp40, r1000_1fff_tmp41);
                  r1000_1fff_tmp43 = simd_and(r1000_1fff_tmp38, r800_ffff_tmp2);
                  r1000_1fff_tmp44 = simd_or(r1000_1fff_tmp42, r1000_1fff_tmp43);
                  r1000_1fff_tmp45 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp34);
                  r1000_1fff_tmp46 = simd_or(r1000_1fff_tmp44, r1000_1fff_tmp45);
                  r1000_1fff_tmp47 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r1000_1fff_tmp48 = simd_andc(r1000_1fff_tmp47, tmp9);
                  r1000_1fff_tmp49 = simd_or(r1000_1fff_tmp46, r1000_1fff_tmp48);
                  r1000_1fff_tmp50 = simd_and(r1000_1fff_tmp47, r1000_1fff_tmp4);
                  r1000_1fff_tmp51 = simd_or(r1000_1fff_tmp49, r1000_1fff_tmp50);
                  r1000_1fff_tmp52 = simd_and(r1000_1fff_tmp47, r800_ffff_tmp2);
                  r1000_1fff_tmp53 = simd_or(r1000_1fff_tmp51, r1000_1fff_tmp52);
                  r1000_1fff_tmp54 = simd_and(r1000_1fff_tmp47, r1000_1fff_tmp28);
                  r1000_1fff_tmp55 = simd_or(r1000_1fff_tmp53, r1000_1fff_tmp54);
                  r1000_1fff_tmp56 = simd_and(r1000_1fff_tmp47, r1000_1fff_tmp21);
                  r1000_1fff_tmp57 = simd_or(r1000_1fff_tmp55, r1000_1fff_tmp56);
                  r1000_1fff_tmp58 = simd_and(r1000_1fff_tmp47, r1000_1fff_tmp25);
                  r1000_1fff_tmp59 = simd_or(r1000_1fff_tmp57, r1000_1fff_tmp58);
                  r1000_1fff_tmp60 = simd_and(r1000_1fff_tmp47, r1000_1fff_tmp32);
                  r1000_1fff_tmp61 = simd_or(r1000_1fff_tmp59, r1000_1fff_tmp60);
                  r1000_1fff_tmp62 = simd_and(r1000_1fff_tmp47, r1000_1fff_tmp34);
                  r1000_1fff_tmp63 = simd_or(r1000_1fff_tmp61, r1000_1fff_tmp62);
                  r1000_1fff_tmp64 = simd_andc(r1000_1fff_tmp19, tmp9);
                  r1000_1fff_tmp65 = simd_or(r1000_1fff_tmp63, r1000_1fff_tmp64);
                  r1000_1fff_tmp66 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp4);
                  r1000_1fff_tmp67 = simd_or(r1000_1fff_tmp65, r1000_1fff_tmp66);
                  r1000_1fff_tmp68 = simd_and(r1000_1fff_tmp19, r800_ffff_tmp2);
                  r1000_1fff_tmp69 = simd_or(r1000_1fff_tmp67, r1000_1fff_tmp68);
                  r1000_1fff_tmp70 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp28);
                  r1000_1fff_tmp71 = simd_or(r1000_1fff_tmp69, r1000_1fff_tmp70);
                  r1000_1fff_tmp72 = simd_or(r1000_1fff_tmp71, byte_b8);
                  r1000_1fff_tmp73 = simd_or(r1000_1fff_tmp72, byte_ba);
                  r1000_1fff_tmp74 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp32);
                  r1000_1fff_tmp75 = simd_or(r1000_1fff_tmp73, r1000_1fff_tmp74);
                  r1000_1fff_tmp76 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp34);
                  cc_range_1e80_1ebe_3 = simd_or(r1000_1fff_tmp75, r1000_1fff_tmp76);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e1_ba, carryQ.get_carry_in(23), sequence_e1_ba_adv));
                  r1000_1fff_tmp77 = simd_and(sequence_e1_ba_adv, cc_range_1e80_1ebe_3);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r1000_1fff_tmp77);
                  r1000_1fff_tmp78 = simd_and(r1000_1fff_tmp20, tmp3);
                  byte_bb = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp78);
                  sequence_e1_bb = simd_and(byte_e1_adv, byte_bb);
                  cc_range_1ec0_1efe_3 = cc_range_1e00_1e3e_3;
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e1_bb, carryQ.get_carry_in(24), sequence_e1_bb_adv));
                  r1000_1fff_tmp79 = simd_and(sequence_e1_bb_adv, cc_range_1ec0_1efe_3);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r1000_1fff_tmp79);
                  byte_bc = r1000_1fff_tmp74;
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  r1000_1fff_tmp80 = simd_and(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp81 = simd_and(r1000_1fff_tmp38, basis_bits.bit_4);
                  r1000_1fff_tmp82 = simd_andc(r1000_1fff_tmp81, r1000_1fff_tmp9);
                  r1000_1fff_tmp83 = simd_or(r1000_1fff_tmp80, r1000_1fff_tmp82);
                  r1000_1fff_tmp84 = simd_and(r1000_1fff_tmp47, basis_bits.bit_4);
                  r1000_1fff_tmp85 = simd_or(r1000_1fff_tmp83, r1000_1fff_tmp84);
                  r1000_1fff_tmp86 = simd_and(r1000_1fff_tmp19, basis_bits.bit_4);
                  cc_range_1f08_1f38_3 = simd_or(r1000_1fff_tmp85, r1000_1fff_tmp86);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(25), sequence_e1_bc_adv));
                  r1000_1fff_tmp87 = simd_and(sequence_e1_bc_adv, cc_range_1f08_1f38_3);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r1000_1fff_tmp87);
                  byte_bd = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp15);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  r1000_1fff_tmp88 = simd_andc(r1000_1fff_tmp80, r1000_1fff_tmp9);
                  r1000_1fff_tmp89 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp23);
                  r1000_1fff_tmp90 = simd_or(r1000_1fff_tmp88, r1000_1fff_tmp89);
                  r1000_1fff_tmp91 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp78);
                  r1000_1fff_tmp92 = simd_or(r1000_1fff_tmp90, r1000_1fff_tmp91);
                  r1000_1fff_tmp93 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp15);
                  r1000_1fff_tmp94 = simd_or(r1000_1fff_tmp92, r1000_1fff_tmp93);
                  r1000_1fff_tmp95 = simd_and(r1000_1fff_tmp14, tmp3);
                  r1000_1fff_tmp96 = simd_and(r1000_1fff_tmp38, r1000_1fff_tmp95);
                  r1000_1fff_tmp97 = simd_or(r1000_1fff_tmp94, r1000_1fff_tmp96);
                  cc_range_1f48_1f68_3 = simd_or(r1000_1fff_tmp97, r1000_1fff_tmp84);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(26), sequence_e1_bd_adv));
                  r1000_1fff_tmp98 = simd_and(sequence_e1_bd_adv, cc_range_1f48_1f68_3);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r1000_1fff_tmp98);
                  byte_be = r1000_1fff_tmp76;
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  byte_range_b8_bb = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp20);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(27), sequence_e1_be_adv));
                  r1000_1fff_tmp99 = simd_and(sequence_e1_be_adv, byte_range_b8_bb);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r1000_1fff_tmp99);
                  byte_bf = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp95);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  r1000_1fff_tmp100 = simd_andc(r1000_1fff_tmp1, r1000_1fff_tmp37);
                  r1000_1fff_tmp101 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp100);
                  r1000_1fff_tmp102 = simd_and(r1000_1fff_tmp20, r1000_1fff_tmp101);
                  r1000_1fff_tmp103 = simd_and(basis_bits.bit_5, tmp8);
                  r1000_1fff_tmp104 = simd_andc(r1000_1fff_tmp84, r1000_1fff_tmp103);
                  r1000_1fff_tmp105 = simd_or(r1000_1fff_tmp102, r1000_1fff_tmp104);
                  cc_range_1fc8_1ff8_3 = simd_or(r1000_1fff_tmp105, byte_range_b8_bb);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(28), sequence_e1_bf_adv));
                  r1000_1fff_tmp106 = simd_and(sequence_e1_bf_adv, cc_range_1fc8_1ff8_3);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r1000_1fff_tmp106);
                }
                else {
                  carryQ.CarryDequeueEnqueue(18, 11);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(18, 11);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp7);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(29, 10))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp7);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(29, 10))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp2);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(29), r2000_2fff_tmp3));
                  sequence_e2_84 = simd_and(r2000_2fff_tmp3, byte_84);
                  byte_e2_adv = r2000_2fff_tmp3;
                  r2000_2fff_tmp4 = simd_and(r800_ffff_tmp1, tmp3);
                  r2000_2fff_tmp5 = simd_or(r2000_4dff_tmp2, r2000_2fff_tmp4);
                  r2000_2fff_tmp6 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp5);
                  r2000_2fff_tmp7 = simd_and(r2000_2fff_tmp2, basis_bits.bit_4);
                  r2000_2fff_tmp8 = simd_not(basis_bits.bit_6);
                  r2000_2fff_tmp9 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp8), simd_andc(tmp3, basis_bits.bit_5));
                  r2000_2fff_tmp10 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp9);
                  r2000_2fff_tmp11 = simd_or(r2000_2fff_tmp6, r2000_2fff_tmp10);
                  r2000_2fff_tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp13 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp12);
                  r2000_2fff_tmp14 = simd_andc(r2000_2fff_tmp13, tmp7);
                  r2000_2fff_tmp15 = simd_andc(r2000_2fff_tmp14, tmp3);
                  r2000_2fff_tmp16 = simd_or(r2000_2fff_tmp11, r2000_2fff_tmp15);
                  r2000_2fff_tmp17 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp18 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp17);
                  r2000_2fff_tmp19 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp18);
                  r2000_2fff_tmp20 = simd_or(r2000_2fff_tmp16, r2000_2fff_tmp19);
                  r2000_2fff_tmp21 = simd_and(r2000_2fff_tmp13, basis_bits.bit_4);
                  r2000_2fff_tmp22 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp8), simd_andc(tmp8, basis_bits.bit_5));
                  r2000_2fff_tmp23 = simd_and(r2000_2fff_tmp21, r2000_2fff_tmp22);
                  r2000_2fff_tmp24 = simd_or(r2000_2fff_tmp20, r2000_2fff_tmp23);
                  r2000_2fff_tmp25 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r2000_2fff_tmp26 = simd_and(r2000_2fff_tmp25, r800_ffff_tmp2);
                  r2000_2fff_tmp27 = simd_or(r2000_2fff_tmp24, r2000_2fff_tmp26);
                  r2000_2fff_tmp28 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  r2000_2fff_tmp29 = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp28);
                  r2000_2fff_tmp30 = simd_or(r2000_2fff_tmp27, r2000_2fff_tmp29);
                  r2000_2fff_tmp31 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp32 = simd_andc(r2000_2fff_tmp31, tmp8);
                  r2000_2fff_tmp33 = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp32);
                  r2000_2fff_tmp34 = simd_or(r2000_2fff_tmp30, r2000_2fff_tmp33);
                  r2000_2fff_tmp35 = simd_and(r2000_2fff_tmp25, basis_bits.bit_4);
                  r2000_2fff_tmp36 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp37 = simd_and(r2000_2fff_tmp35, r2000_2fff_tmp36);
                  r2000_2fff_tmp38 = simd_or(r2000_2fff_tmp34, r2000_2fff_tmp37);
                  r2000_2fff_tmp39 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp40 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp39);
                  r2000_2fff_tmp41 = simd_andc(r2000_2fff_tmp40, tmp7);
                  r2000_2fff_tmp42 = simd_or(r2000_2fff_tmp38, r2000_2fff_tmp41);
                  r2000_2fff_tmp43 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp44 = simd_and(r2000_2fff_tmp43, basis_bits.bit_6);
                  r2000_2fff_tmp45 = simd_and(r2000_2fff_tmp40, r2000_2fff_tmp44);
                  cc_range_2102_213e_3 = simd_or(r2000_2fff_tmp42, r2000_2fff_tmp45);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(30), sequence_e2_84_adv));
                  r2000_2fff_tmp46 = simd_and(sequence_e2_84_adv, cc_range_2102_213e_3);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r2000_2fff_tmp46);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp18);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  cc_range_2145_2160_3 = simd_or(byte_85, r2000_2fff_tmp25);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(31), sequence_e2_85_adv));
                  r2000_2fff_tmp47 = simd_and(sequence_e2_85_adv, cc_range_2145_2160_3);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r2000_2fff_tmp47);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp28);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp48 = simd_andc(tmp3, tmp7);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp48);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(32), sequence_e2_86_adv));
                  r2000_2fff_tmp49 = simd_and(sequence_e2_86_adv, byte_83);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r2000_2fff_tmp49);
                  byte_92 = simd_and(r2000_2fff_tmp13, r2000_4dff_tmp2);
                  sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
                  r2000_2fff_tmp50 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp51 = simd_or(basis_bits.bit_4, r2000_2fff_tmp50);
                  byte_range_b6_bf = simd_and(r2000_2fff_tmp40, r2000_2fff_tmp51);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_92, carryQ.get_carry_in(33), sequence_e2_92_adv));
                  r2000_2fff_tmp52 = simd_and(sequence_e2_92_adv, byte_range_b6_bf);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r2000_2fff_tmp52);
                  byte_93 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp48);
                  sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
                  byte_range_80_8f = r2000_2fff_tmp2;
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(34), sequence_e2_93_adv));
                  r2000_2fff_tmp53 = simd_and(sequence_e2_93_adv, byte_range_80_8f);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r2000_2fff_tmp53);
                  byte_b0 = simd_andc(r2000_2fff_tmp40, tmp9);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  r2000_2fff_tmp54 = simd_and(r2000_2fff_tmp43, tmp3);
                  r2000_2fff_tmp55 = simd_or(basis_bits.bit_3, r2000_2fff_tmp54);
                  r2000_2fff_tmp56 = simd_and(basis_bits.bit_2, r2000_2fff_tmp55);
                  byte_range_80_ae = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp56);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(35), sequence_e2_b0_adv));
                  r2000_2fff_tmp57 = simd_and(sequence_e2_b0_adv, byte_range_80_ae);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r2000_2fff_tmp57);
                  r2000_2fff_tmp58 = simd_andc(r2000_2fff_tmp17, tmp7);
                  byte_b1 = simd_and(r2000_2fff_tmp40, r2000_2fff_tmp58);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp59 = simd_andc(r2000_2fff_tmp25, tmp9);
                  r2000_2fff_tmp60 = simd_andc(r2000_2fff_tmp25, basis_bits.bit_4);
                  r2000_2fff_tmp61 = simd_not(tmp8);
                  r2000_2fff_tmp62 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp61), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r2000_2fff_tmp63 = simd_and(r2000_2fff_tmp60, r2000_2fff_tmp62);
                  r2000_2fff_tmp64 = simd_or(r2000_2fff_tmp59, r2000_2fff_tmp63);
                  r2000_2fff_tmp65 = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp4);
                  r2000_2fff_tmp66 = simd_or(r2000_2fff_tmp64, r2000_2fff_tmp65);
                  r2000_2fff_tmp67 = simd_and(r2000_2fff_tmp31, r2000_2fff_tmp17);
                  r2000_2fff_tmp68 = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp67);
                  r2000_2fff_tmp69 = simd_or(r2000_2fff_tmp66, r2000_2fff_tmp68);
                  r2000_2fff_tmp70 = simd_and(r2000_2fff_tmp31, tmp3);
                  r2000_2fff_tmp71 = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp70);
                  r2000_2fff_tmp72 = simd_or(r2000_2fff_tmp69, r2000_2fff_tmp71);
                  r2000_2fff_tmp73 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp74 = simd_not(tmp9);
                  r2000_2fff_tmp75 = simd_and(r2000_2fff_tmp43, tmp8);
                  r2000_2fff_tmp76 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp74), simd_andc(r2000_2fff_tmp75, basis_bits.bit_3));
                  r2000_2fff_tmp77 = simd_and(r2000_2fff_tmp73, r2000_2fff_tmp76);
                  r2000_2fff_tmp78 = simd_or(r2000_2fff_tmp72, r2000_2fff_tmp77);
                  r2000_2fff_tmp79 = simd_and(r2000_2fff_tmp40, r2000_4dff_tmp2);
                  r2000_2fff_tmp80 = simd_or(r2000_2fff_tmp78, r2000_2fff_tmp79);
                  r2000_2fff_tmp81 = simd_and(r2000_2fff_tmp40, r2000_2fff_tmp18);
                  r2000_2fff_tmp82 = simd_or(r2000_2fff_tmp80, r2000_2fff_tmp81);
                  cc_range_2c60_2c7e_3 = simd_or(r2000_2fff_tmp82, r2000_2fff_tmp45);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(36), sequence_e2_b1_adv));
                  r2000_2fff_tmp83 = simd_and(sequence_e2_b1_adv, cc_range_2c60_2c7e_3);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r2000_2fff_tmp83);
                  byte_b2 = r2000_2fff_tmp79;
                  sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
                  cc_range_2c80_2cbe_3 = simd_andc(r800_ffff_tmp3, basis_bits.bit_7);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(37), sequence_e2_b2_adv));
                  r2000_2fff_tmp84 = simd_and(sequence_e2_b2_adv, cc_range_2c80_2cbe_3);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r2000_2fff_tmp84);
                  byte_b3 = simd_and(r2000_2fff_tmp40, r2000_2fff_tmp48);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp85 = simd_andc(tmp9, r2000_4dff_tmp2);
                  r2000_2fff_tmp86 = simd_andc(r2000_2fff_tmp85, r800_ffff_tmp2);
                  r2000_2fff_tmp87 = simd_andc(r2000_2fff_tmp86, r2000_2fff_tmp28);
                  r2000_2fff_tmp88 = simd_andc(r2000_2fff_tmp87, r2000_2fff_tmp32);
                  r2000_2fff_tmp89 = simd_and(r2000_2fff_tmp31, r2000_4dff_tmp1);
                  r2000_2fff_tmp90 = simd_andc(r2000_2fff_tmp88, r2000_2fff_tmp89);
                  r2000_2fff_tmp91 = simd_andc(r2000_2fff_tmp43, tmp8);
                  r2000_2fff_tmp92 = simd_andc(r2000_2fff_tmp90, r2000_2fff_tmp91);
                  r2000_2fff_tmp93 = simd_and(r2000_2fff_tmp43, r2000_4dff_tmp1);
                  r2000_2fff_tmp94 = simd_andc(r2000_2fff_tmp92, r2000_2fff_tmp93);
                  r2000_2fff_tmp95 = simd_andc(byte_range_80_8f, r2000_2fff_tmp94);
                  r2000_2fff_tmp96 = simd_andc(r2000_2fff_tmp13, tmp9);
                  r2000_2fff_tmp97 = simd_or(r2000_2fff_tmp95, r2000_2fff_tmp96);
                  r2000_2fff_tmp98 = simd_or(r2000_2fff_tmp97, byte_92);
                  r2000_2fff_tmp99 = simd_and(r2000_2fff_tmp13, r800_ffff_tmp2);
                  r2000_2fff_tmp100 = simd_or(r2000_2fff_tmp98, r2000_2fff_tmp99);
                  r2000_2fff_tmp101 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp28);
                  r2000_2fff_tmp102 = simd_or(r2000_2fff_tmp100, r2000_2fff_tmp101);
                  r2000_2fff_tmp103 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp32);
                  r2000_2fff_tmp104 = simd_or(r2000_2fff_tmp102, r2000_2fff_tmp103);
                  r2000_2fff_tmp105 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp89);
                  r2000_2fff_tmp106 = simd_or(r2000_2fff_tmp104, r2000_2fff_tmp105);
                  r2000_2fff_tmp107 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp91);
                  r2000_2fff_tmp108 = simd_or(r2000_2fff_tmp106, r2000_2fff_tmp107);
                  r2000_2fff_tmp109 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp93);
                  r2000_2fff_tmp110 = simd_or(r2000_2fff_tmp108, r2000_2fff_tmp109);
                  r2000_2fff_tmp111 = simd_or(r2000_2fff_tmp110, r2000_2fff_tmp59);
                  r2000_2fff_tmp112 = simd_and(r2000_2fff_tmp25, r2000_4dff_tmp2);
                  r2000_2fff_tmp113 = simd_or(r2000_2fff_tmp111, r2000_2fff_tmp112);
                  r2000_2fff_tmp114 = simd_or(r2000_2fff_tmp113, r2000_2fff_tmp71);
                  r2000_2fff_tmp115 = simd_and(r2000_2fff_tmp43, r2000_2fff_tmp17);
                  r2000_2fff_tmp116 = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp115);
                  r2000_2fff_tmp117 = simd_or(r2000_2fff_tmp114, r2000_2fff_tmp116);
                  cc_range_2cc0_2cf2_3 = simd_or(r2000_2fff_tmp117, byte_b2);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(38), sequence_e2_b3_adv));
                  r2000_2fff_tmp118 = simd_and(sequence_e2_b3_adv, cc_range_2cc0_2cf2_3);
                  struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r2000_2fff_tmp118);
                }
                else {
                  carryQ.CarryDequeueEnqueue(29, 10);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(29, 10);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(18, 21);
            }
            r800_ffff_tmp9 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp9, r800_ffff_tmp10);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(39, 8))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_99 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[39] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(39), ra000_ffff_tmp8));
              sequence_ea_99 = simd_and(ra000_ffff_tmp8, byte_99);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp9, basis_bits.bit_6);
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_3, ra000_ffff_tmp10);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_2, ra000_ffff_tmp11);
              ra000_ffff_tmp13 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp12);
              cc_range_a640_a66c_3 = simd_andc(ra000_ffff_tmp13, basis_bits.bit_7);
              carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(40), sequence_ea_99_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ea_99_adv, cc_range_a640_a66c_3);
              struct_upper_Y.cc = simd_or(struct_upper_Y.cc, ra000_ffff_tmp14);
              byte_9a = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp15 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp16 = simd_and(basis_bits.bit_3, ra000_ffff_tmp9);
              ra000_ffff_tmp17 = simd_andc(ra000_ffff_tmp15, ra000_ffff_tmp16);
              cc_range_a680_a69a_3 = simd_andc(ra000_ffff_tmp17, basis_bits.bit_7);
              carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(41), sequence_ea_9a_adv));
              ra000_ffff_tmp18 = simd_and(sequence_ea_9a_adv, cc_range_a680_a69a_3);
              struct_upper_Y.cc = simd_or(struct_upper_Y.cc, ra000_ffff_tmp18);
              ra000_ffff_tmp19 = simd_andc(ra000_ffff_tmp9, tmp8);
              byte_9c = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp19);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              ra000_ffff_tmp20 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
              ra000_ffff_tmp21 = simd_andc(ra000_ffff_tmp2, tmp7);
              ra000_ffff_tmp22 = simd_or(ra000_ffff_tmp21, r800_ffff_tmp2);
              ra000_ffff_tmp23 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp2);
              ra000_ffff_tmp24 = simd_or(ra000_ffff_tmp22, ra000_ffff_tmp23);
              ra000_ffff_tmp25 = simd_andc(ra000_ffff_tmp1, tmp8);
              ra000_ffff_tmp26 = simd_or(ra000_ffff_tmp24, ra000_ffff_tmp25);
              ra000_ffff_tmp27 = simd_or(ra000_ffff_tmp26, ra000_ffff_tmp3);
              ra000_ffff_tmp28 = simd_or(ra000_ffff_tmp27, ra000_ffff_tmp19);
              ra000_ffff_tmp29 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp2);
              ra000_ffff_tmp30 = simd_or(ra000_ffff_tmp28, ra000_ffff_tmp29);
              ra000_ffff_tmp31 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp30);
              ra000_ffff_tmp32 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp33 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp32);
              ra000_ffff_tmp34 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp21);
              ra000_ffff_tmp35 = simd_or(ra000_ffff_tmp31, ra000_ffff_tmp34);
              ra000_ffff_tmp36 = simd_and(ra000_ffff_tmp33, r800_ffff_tmp2);
              ra000_ffff_tmp37 = simd_or(ra000_ffff_tmp35, ra000_ffff_tmp36);
              ra000_ffff_tmp38 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp23);
              ra000_ffff_tmp39 = simd_or(ra000_ffff_tmp37, ra000_ffff_tmp38);
              ra000_ffff_tmp40 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp25);
              ra000_ffff_tmp41 = simd_or(ra000_ffff_tmp39, ra000_ffff_tmp40);
              ra000_ffff_tmp42 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp3);
              ra000_ffff_tmp43 = simd_or(ra000_ffff_tmp41, ra000_ffff_tmp42);
              ra000_ffff_tmp44 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp19);
              ra000_ffff_tmp45 = simd_or(ra000_ffff_tmp43, ra000_ffff_tmp44);
              ra000_ffff_tmp46 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp29);
              cc_range_a722_a73e_3 = simd_or(ra000_ffff_tmp45, ra000_ffff_tmp46);
              carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(42), sequence_ea_9c_adv));
              ra000_ffff_tmp47 = simd_and(sequence_ea_9c_adv, cc_range_a722_a73e_3);
              struct_upper_Y.cc = simd_or(struct_upper_Y.cc, ra000_ffff_tmp47);
              ra000_ffff_tmp48 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp6);
              byte_9d = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp48);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              ra000_ffff_tmp49 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp50 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp49);
              ra000_ffff_tmp51 = simd_andc(tmp9, ra000_ffff_tmp21);
              ra000_ffff_tmp52 = simd_andc(ra000_ffff_tmp51, r800_ffff_tmp2);
              ra000_ffff_tmp53 = simd_andc(ra000_ffff_tmp52, ra000_ffff_tmp23);
              ra000_ffff_tmp54 = simd_andc(ra000_ffff_tmp53, ra000_ffff_tmp25);
              ra000_ffff_tmp55 = simd_andc(ra000_ffff_tmp54, ra000_ffff_tmp3);
              ra000_ffff_tmp56 = simd_andc(ra000_ffff_tmp55, ra000_ffff_tmp19);
              ra000_ffff_tmp57 = simd_andc(ra000_ffff_tmp56, ra000_ffff_tmp29);
              ra000_ffff_tmp58 = simd_andc(ra000_ffff_tmp50, ra000_ffff_tmp57);
              ra000_ffff_tmp59 = simd_andc(ra000_ffff_tmp5, tmp9);
              ra000_ffff_tmp60 = simd_or(ra000_ffff_tmp58, ra000_ffff_tmp59);
              ra000_ffff_tmp61 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp21);
              ra000_ffff_tmp62 = simd_or(ra000_ffff_tmp60, ra000_ffff_tmp61);
              ra000_ffff_tmp63 = simd_and(ra000_ffff_tmp5, r800_ffff_tmp2);
              ra000_ffff_tmp64 = simd_or(ra000_ffff_tmp62, ra000_ffff_tmp63);
              ra000_ffff_tmp65 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp23);
              ra000_ffff_tmp66 = simd_or(ra000_ffff_tmp64, ra000_ffff_tmp65);
              ra000_ffff_tmp67 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp25);
              ra000_ffff_tmp68 = simd_or(ra000_ffff_tmp66, ra000_ffff_tmp67);
              ra000_ffff_tmp69 = simd_or(ra000_ffff_tmp68, byte_9a);
              ra000_ffff_tmp70 = simd_or(ra000_ffff_tmp69, byte_9c);
              ra000_ffff_tmp71 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp29);
              ra000_ffff_tmp72 = simd_or(ra000_ffff_tmp70, ra000_ffff_tmp71);
              ra000_ffff_tmp73 = simd_andc(ra000_ffff_tmp20, tmp9);
              ra000_ffff_tmp74 = simd_or(ra000_ffff_tmp72, ra000_ffff_tmp73);
              ra000_ffff_tmp75 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp21);
              ra000_ffff_tmp76 = simd_or(ra000_ffff_tmp74, ra000_ffff_tmp75);
              ra000_ffff_tmp77 = simd_and(ra000_ffff_tmp20, r800_ffff_tmp2);
              ra000_ffff_tmp78 = simd_or(ra000_ffff_tmp76, ra000_ffff_tmp77);
              ra000_ffff_tmp79 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp23);
              ra000_ffff_tmp80 = simd_or(ra000_ffff_tmp78, ra000_ffff_tmp79);
              ra000_ffff_tmp81 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp25);
              ra000_ffff_tmp82 = simd_or(ra000_ffff_tmp80, ra000_ffff_tmp81);
              ra000_ffff_tmp83 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp3);
              ra000_ffff_tmp84 = simd_or(ra000_ffff_tmp82, ra000_ffff_tmp83);
              ra000_ffff_tmp85 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp19);
              ra000_ffff_tmp86 = simd_or(ra000_ffff_tmp84, ra000_ffff_tmp85);
              ra000_ffff_tmp87 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp29);
              ra000_ffff_tmp88 = simd_or(ra000_ffff_tmp86, ra000_ffff_tmp87);
              ra000_ffff_tmp89 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp7);
              ra000_ffff_tmp90 = simd_or(ra000_ffff_tmp88, ra000_ffff_tmp89);
              ra000_ffff_tmp91 = simd_and(ra000_ffff_tmp1, tmp3);
              ra000_ffff_tmp92 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp91);
              ra000_ffff_tmp93 = simd_or(ra000_ffff_tmp90, ra000_ffff_tmp92);
              ra000_ffff_tmp94 = simd_and(ra000_ffff_tmp33, ra000_ffff_tmp9);
              ra000_ffff_tmp95 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp96 = simd_and(ra000_ffff_tmp94, ra000_ffff_tmp95);
              cc_range_a740_a77d_3 = simd_or(ra000_ffff_tmp93, ra000_ffff_tmp96);
              carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(43), sequence_ea_9d_adv));
              ra000_ffff_tmp97 = simd_and(sequence_ea_9d_adv, cc_range_a740_a77d_3);
              struct_upper_Y.cc = simd_or(struct_upper_Y.cc, ra000_ffff_tmp97);
              byte_9e = ra000_ffff_tmp71;
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp98 = simd_andc(ra000_ffff_tmp53, ra000_ffff_tmp91);
              ra000_ffff_tmp99 = simd_andc(ra000_ffff_tmp98, ra000_ffff_tmp48);
              ra000_ffff_tmp100 = simd_andc(ra000_ffff_tmp50, ra000_ffff_tmp99);
              ra000_ffff_tmp101 = simd_or(ra000_ffff_tmp100, ra000_ffff_tmp59);
              ra000_ffff_tmp102 = simd_or(ra000_ffff_tmp101, ra000_ffff_tmp61);
              ra000_ffff_tmp103 = simd_or(ra000_ffff_tmp102, ra000_ffff_tmp65);
              ra000_ffff_tmp104 = simd_or(ra000_ffff_tmp103, ra000_ffff_tmp67);
              ra000_ffff_tmp105 = simd_or(ra000_ffff_tmp104, byte_9a);
              ra000_ffff_tmp106 = simd_or(ra000_ffff_tmp105, byte_9c);
              ra000_ffff_tmp107 = simd_or(ra000_ffff_tmp106, byte_9e);
              ra000_ffff_tmp108 = simd_or(ra000_ffff_tmp107, ra000_ffff_tmp73);
              ra000_ffff_tmp109 = simd_or(ra000_ffff_tmp108, ra000_ffff_tmp75);
              ra000_ffff_tmp110 = simd_or(ra000_ffff_tmp109, ra000_ffff_tmp77);
              ra000_ffff_tmp111 = simd_or(ra000_ffff_tmp110, ra000_ffff_tmp79);
              ra000_ffff_tmp112 = simd_or(ra000_ffff_tmp111, ra000_ffff_tmp81);
              ra000_ffff_tmp113 = simd_and(ra000_ffff_tmp20, basis_bits.bit_4);
              ra000_ffff_tmp114 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp115 = simd_and(ra000_ffff_tmp113, ra000_ffff_tmp114);
              ra000_ffff_tmp116 = simd_or(ra000_ffff_tmp112, ra000_ffff_tmp115);
              ra000_ffff_tmp117 = simd_or(tmp7, basis_bits.bit_6);
              ra000_ffff_tmp118 = simd_andc(ra000_ffff_tmp33, ra000_ffff_tmp117);
              cc_range_a780_a7b0_3 = simd_or(ra000_ffff_tmp116, ra000_ffff_tmp118);
              carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(44), sequence_ea_9e_adv));
              ra000_ffff_tmp119 = simd_and(sequence_ea_9e_adv, cc_range_a780_a7b0_3);
              struct_upper_Y.cc = simd_or(struct_upper_Y.cc, ra000_ffff_tmp119);
              ra000_ffff_tmp120 = simd_and(ra000_ffff_tmp9, tmp3);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp120);
              byte_bc = ra000_ffff_tmp44;
              carryQ.cq[45] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(45), ra000_ffff_tmp121));
              sequence_ef_bc = simd_and(ra000_ffff_tmp121, byte_bc);
              byte_ef_adv = ra000_ffff_tmp121;
              ra000_ffff_tmp122 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
              byte_range_a1_ba = simd_and(ra000_ffff_tmp122, tmp10);
              carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(46), sequence_ef_bc_adv));
              ra000_ffff_tmp123 = simd_and(sequence_ef_bc_adv, byte_range_a1_ba);
              struct_upper_Y.cc = simd_or(struct_upper_Y.cc, ra000_ffff_tmp123);
            }
            else {
              carryQ.CarryDequeueEnqueue(39, 8);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(17, 30);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(47, 26))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp9);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp3 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_90 = simd_andc(r10000_10ffff_tmp3, tmp9);
            carryQ.cq[47] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(47), r10000_10ffff_tmp4));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp4, byte_90);
            byte_f0_adv = r10000_10ffff_tmp4;
            carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(48), r10000_10ffff_tmp5));
            sequence_f0_90_90 = simd_and(r10000_10ffff_tmp5, byte_90);
            sequence_f0_90_adv = r10000_10ffff_tmp5;
            r10000_10ffff_tmp6 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp7 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp6);
            byte_range_80_a7 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp7);
            carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_f0_90_90, carryQ.get_carry_in(49), sequence_f0_90_90_adv));
            r10000_10ffff_tmp8 = simd_and(sequence_f0_90_90_adv, byte_range_80_a7);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp8);
            r10000_10ffff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp10 = simd_andc(r10000_10ffff_tmp9, tmp7);
            byte_91 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp10);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            r10000_10ffff_tmp11 = simd_and(r10000_10ffff_tmp1, r80_10ffff_tmp1);
            r10000_10ffff_tmp12 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp13 = simd_andc(r10000_10ffff_tmp12, tmp7);
            byte_a2 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp13);
            carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(50), r10000_10ffff_tmp14));
            sequence_f0_91_a2 = simd_and(r10000_10ffff_tmp14, byte_a2);
            sequence_f0_91_adv = r10000_10ffff_tmp14;
            byte_range_a0_bf = simd_and(r10000_10ffff_tmp1, basis_bits.bit_2);
            carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(51), sequence_f0_91_a2_adv));
            r10000_10ffff_tmp15 = simd_and(sequence_f0_91_a2_adv, byte_range_a0_bf);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp15);
            r10000_10ffff_tmp16 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp9);
            byte_9d = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp17);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(52), r10000_10ffff_tmp18));
            sequence_f0_9d_90 = simd_and(r10000_10ffff_tmp18, byte_90);
            sequence_f0_9d_adv = r10000_10ffff_tmp18;
            r10000_10ffff_tmp19 = simd_andc(r10000_10ffff_tmp1, basis_bits.bit_2);
            r10000_10ffff_tmp20 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp21 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp20);
            r10000_10ffff_tmp22 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp21);
            r10000_10ffff_tmp23 = simd_andc(r10000_10ffff_tmp19, r10000_10ffff_tmp22);
            r10000_10ffff_tmp24 = simd_and(r10000_10ffff_tmp1, r80_10ffff_tmp2);
            r10000_10ffff_tmp25 = simd_and(r10000_10ffff_tmp24, tmp7);
            cc_range_1d400_1d434_4 = simd_or(r10000_10ffff_tmp23, r10000_10ffff_tmp25);
            carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(53), sequence_f0_9d_90_adv));
            r10000_10ffff_tmp26 = simd_and(sequence_f0_9d_90_adv, cc_range_1d400_1d434_4);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp26);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            r10000_10ffff_tmp27 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp28 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp27);
            r10000_10ffff_tmp29 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp30 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp29);
            r10000_10ffff_tmp31 = simd_andc(r10000_10ffff_tmp28, r10000_10ffff_tmp30);
            r10000_10ffff_tmp32 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp6);
            cc_range_1d440_1d468_4 = simd_or(r10000_10ffff_tmp31, r10000_10ffff_tmp32);
            carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(54), sequence_f0_9d_91_adv));
            r10000_10ffff_tmp33 = simd_and(sequence_f0_9d_91_adv, cc_range_1d440_1d468_4);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp33);
            byte_92 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp13);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            r10000_10ffff_tmp34 = simd_or(tmp7, basis_bits.bit_6);
            r10000_10ffff_tmp35 = simd_andc(r10000_10ffff_tmp28, r10000_10ffff_tmp34);
            r10000_10ffff_tmp36 = simd_andc(r10000_10ffff_tmp16, tmp8);
            r10000_10ffff_tmp37 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp36);
            r10000_10ffff_tmp38 = simd_or(r10000_10ffff_tmp35, r10000_10ffff_tmp37);
            r10000_10ffff_tmp39 = simd_and(r10000_10ffff_tmp16, basis_bits.bit_6);
            r10000_10ffff_tmp40 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp39);
            r10000_10ffff_tmp41 = simd_or(r10000_10ffff_tmp38, r10000_10ffff_tmp40);
            r10000_10ffff_tmp42 = simd_or(r10000_10ffff_tmp41, byte_a2);
            r10000_10ffff_tmp43 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp44 = simd_and(r10000_10ffff_tmp11, r10000_10ffff_tmp43);
            r10000_10ffff_tmp45 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp46 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp45);
            r10000_10ffff_tmp47 = simd_or(r10000_10ffff_tmp42, r10000_10ffff_tmp46);
            r10000_10ffff_tmp48 = simd_and(r10000_10ffff_tmp11, basis_bits.bit_4);
            r10000_10ffff_tmp49 = simd_xor(basis_bits.bit_5, tmp8);
            r10000_10ffff_tmp50 = simd_and(r10000_10ffff_tmp48, r10000_10ffff_tmp49);
            r10000_10ffff_tmp51 = simd_or(r10000_10ffff_tmp47, r10000_10ffff_tmp50);
            r10000_10ffff_tmp52 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp29);
            r10000_10ffff_tmp53 = simd_not(r10000_10ffff_tmp52);
            r10000_10ffff_tmp54 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp53), simd_andc(r10000_10ffff_tmp39, basis_bits.bit_3));
            r10000_10ffff_tmp55 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp54);
            cc_range_1d480_1d4ae_4 = simd_or(r10000_10ffff_tmp51, r10000_10ffff_tmp55);
            carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(55), sequence_f0_9d_92_adv));
            r10000_10ffff_tmp56 = simd_and(sequence_f0_9d_92_adv, cc_range_1d480_1d4ae_4);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp56);
            r10000_10ffff_tmp57 = simd_andc(tmp3, tmp7);
            byte_93 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp57);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            r10000_10ffff_tmp58 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp21);
            r10000_10ffff_tmp59 = simd_not(r10000_10ffff_tmp58);
            r10000_10ffff_tmp60 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp59), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_a9 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp60);
            carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(56), sequence_f0_9d_93_adv));
            r10000_10ffff_tmp61 = simd_and(sequence_f0_9d_93_adv, byte_range_90_a9);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp61);
            r10000_10ffff_tmp62 = simd_andc(r10000_10ffff_tmp43, tmp8);
            byte_94 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp62);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            r10000_10ffff_tmp63 = simd_andc(r10000_10ffff_tmp43, basis_bits.bit_6);
            r10000_10ffff_tmp64 = simd_not(tmp4);
            r10000_10ffff_tmp65 = simd_and(basis_bits.bit_5, tmp3);
            r10000_10ffff_tmp66 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp64), simd_andc(r10000_10ffff_tmp65, basis_bits.bit_4));
            r10000_10ffff_tmp67 = simd_or(r10000_10ffff_tmp63, r10000_10ffff_tmp66);
            r10000_10ffff_tmp68 = simd_and(r10000_10ffff_tmp28, r10000_10ffff_tmp67);
            r10000_10ffff_tmp69 = simd_and(basis_bits.bit_5, tmp8);
            r10000_10ffff_tmp70 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp69);
            r10000_10ffff_tmp71 = simd_not(r10000_10ffff_tmp70);
            r10000_10ffff_tmp72 = simd_and(r10000_10ffff_tmp16, tmp8);
            r10000_10ffff_tmp73 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp71), simd_andc(r10000_10ffff_tmp72, basis_bits.bit_3));
            r10000_10ffff_tmp74 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp73);
            r10000_10ffff_tmp75 = simd_or(r10000_10ffff_tmp68, r10000_10ffff_tmp74);
            r10000_10ffff_tmp76 = simd_not(r10000_10ffff_tmp69);
            r10000_10ffff_tmp77 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp76), simd_andc(r10000_10ffff_tmp29, basis_bits.bit_4));
            r10000_10ffff_tmp78 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp77);
            r10000_10ffff_tmp79 = simd_or(r10000_10ffff_tmp75, r10000_10ffff_tmp78);
            r10000_10ffff_tmp80 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp81 = simd_andc(r10000_10ffff_tmp80, basis_bits.bit_6);
            r10000_10ffff_tmp82 = simd_and(r10000_10ffff_tmp24, r10000_10ffff_tmp81);
            r10000_10ffff_tmp83 = simd_or(r10000_10ffff_tmp79, r10000_10ffff_tmp82);
            r10000_10ffff_tmp84 = simd_and(r10000_10ffff_tmp24, basis_bits.bit_4);
            r10000_10ffff_tmp85 = simd_xor(basis_bits.bit_5, tmp3);
            r10000_10ffff_tmp86 = simd_and(r10000_10ffff_tmp84, r10000_10ffff_tmp85);
            cc_range_1d504_1d53b_4 = simd_or(r10000_10ffff_tmp83, r10000_10ffff_tmp86);
            carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(57), sequence_f0_9d_94_adv));
            r10000_10ffff_tmp87 = simd_and(sequence_f0_9d_94_adv, cc_range_1d504_1d53b_4);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp87);
            r10000_10ffff_tmp88 = simd_and(r10000_10ffff_tmp43, r10000_10ffff_tmp9);
            byte_95 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp88);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            r10000_10ffff_tmp89 = simd_andc(r10000_10ffff_tmp28, basis_bits.bit_4);
            r10000_10ffff_tmp90 = simd_andc(r10000_10ffff_tmp89, r10000_10ffff_tmp69);
            r10000_10ffff_tmp91 = simd_and(r10000_10ffff_tmp43, r10000_10ffff_tmp12);
            r10000_10ffff_tmp92 = simd_and(r10000_10ffff_tmp28, r10000_10ffff_tmp91);
            r10000_10ffff_tmp93 = simd_or(r10000_10ffff_tmp90, r10000_10ffff_tmp92);
            r10000_10ffff_tmp94 = simd_not(tmp9);
            r10000_10ffff_tmp95 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp94), simd_andc(r10000_10ffff_tmp21, basis_bits.bit_3));
            r10000_10ffff_tmp96 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp95);
            r10000_10ffff_tmp97 = simd_or(r10000_10ffff_tmp93, r10000_10ffff_tmp96);
            r10000_10ffff_tmp98 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp16);
            r10000_10ffff_tmp99 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp98);
            cc_range_1d540_1d56c_4 = simd_or(r10000_10ffff_tmp97, r10000_10ffff_tmp99);
            carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(58), sequence_f0_9d_95_adv));
            r10000_10ffff_tmp100 = simd_and(sequence_f0_9d_95_adv, cc_range_1d540_1d56c_4);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp100);
            byte_96 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp91);
            sequence_f0_9d_96 = simd_and(sequence_f0_9d_adv, byte_96);
            r10000_10ffff_tmp101 = simd_andc(r10000_10ffff_tmp89, r10000_10ffff_tmp29);
            r10000_10ffff_tmp102 = simd_andc(byte_range_a0_bf, r10000_10ffff_tmp22);
            cc_range_1d580_1d5a0_4 = simd_or(r10000_10ffff_tmp101, r10000_10ffff_tmp102);
            carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_96, carryQ.get_carry_in(59), sequence_f0_9d_96_adv));
            r10000_10ffff_tmp103 = simd_and(sequence_f0_9d_96_adv, cc_range_1d580_1d5a0_4);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp103);
            r10000_10ffff_tmp104 = simd_and(r10000_10ffff_tmp43, tmp3);
            byte_97 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp104);
            sequence_f0_9d_97 = simd_and(sequence_f0_9d_adv, byte_97);
            r10000_10ffff_tmp105 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp39);
            r10000_10ffff_tmp106 = simd_not(r10000_10ffff_tmp105);
            r10000_10ffff_tmp107 = simd_and(basis_bits.bit_3, tmp7);
            r10000_10ffff_tmp108 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp106), simd_andc(r10000_10ffff_tmp107, basis_bits.bit_2));
            byte_range_94_ad = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp108);
            carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_97, carryQ.get_carry_in(60), sequence_f0_9d_97_adv));
            r10000_10ffff_tmp109 = simd_and(sequence_f0_9d_97_adv, byte_range_94_ad);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp109);
            r10000_10ffff_tmp110 = simd_andc(r10000_10ffff_tmp80, tmp8);
            byte_98 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp110);
            sequence_f0_9d_98 = simd_and(sequence_f0_9d_adv, byte_98);
            r10000_10ffff_tmp111 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp34);
            r10000_10ffff_tmp112 = simd_not(r10000_10ffff_tmp111);
            r10000_10ffff_tmp113 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp112), simd_andc(r10000_10ffff_tmp6, basis_bits.bit_2));
            r10000_10ffff_tmp114 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp113);
            r10000_10ffff_tmp115 = simd_and(r10000_10ffff_tmp24, r10000_10ffff_tmp16);
            cc_range_1d608_1d63c_4 = simd_or(r10000_10ffff_tmp114, r10000_10ffff_tmp115);
            carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_98, carryQ.get_carry_in(61), sequence_f0_9d_98_adv));
            r10000_10ffff_tmp116 = simd_and(sequence_f0_9d_98_adv, cc_range_1d608_1d63c_4);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp116);
            r10000_10ffff_tmp117 = simd_and(r10000_10ffff_tmp80, r10000_10ffff_tmp9);
            byte_99 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp117);
            sequence_f0_9d_99 = simd_and(sequence_f0_9d_adv, byte_99);
            r10000_10ffff_tmp118 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp52);
            r10000_10ffff_tmp119 = simd_andc(r10000_10ffff_tmp19, r10000_10ffff_tmp118);
            cc_range_1d640_1d670_4 = simd_or(r10000_10ffff_tmp119, r10000_10ffff_tmp24);
            carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_99, carryQ.get_carry_in(62), sequence_f0_9d_99_adv));
            r10000_10ffff_tmp120 = simd_and(sequence_f0_9d_99_adv, cc_range_1d640_1d670_4);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp120);
            r10000_10ffff_tmp121 = simd_and(r10000_10ffff_tmp80, r10000_10ffff_tmp12);
            byte_9a = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp121);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            r10000_10ffff_tmp122 = simd_andc(r10000_10ffff_tmp28, r10000_10ffff_tmp21);
            cc_range_1d680_1d6a8_4 = simd_or(r10000_10ffff_tmp122, r10000_10ffff_tmp32);
            carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(63), sequence_f0_9d_9a_adv));
            r10000_10ffff_tmp123 = simd_and(sequence_f0_9d_9a_adv, cc_range_1d680_1d6a8_4);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp123);
            r10000_10ffff_tmp124 = simd_and(r10000_10ffff_tmp80, tmp3);
            byte_9b = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp124);
            sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
            r10000_10ffff_tmp125 = simd_andc(r10000_10ffff_tmp28, tmp9);
            r10000_10ffff_tmp126 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(r10000_10ffff_tmp34, basis_bits.bit_3));
            r10000_10ffff_tmp127 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp126);
            cc_range_1d6c0_1d6e2_4 = simd_or(r10000_10ffff_tmp125, r10000_10ffff_tmp127);
            carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(64), sequence_f0_9d_9b_adv));
            r10000_10ffff_tmp128 = simd_and(sequence_f0_9d_9b_adv, cc_range_1d6c0_1d6e2_4);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp128);
            byte_9c = r10000_10ffff_tmp37;
            sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
            r10000_10ffff_tmp129 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp70);
            r10000_10ffff_tmp130 = simd_not(r10000_10ffff_tmp129);
            r10000_10ffff_tmp131 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp16);
            r10000_10ffff_tmp132 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp130), simd_andc(r10000_10ffff_tmp131, basis_bits.bit_2));
            byte_range_9c_b4 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp132);
            carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(65), sequence_f0_9d_9c_adv));
            r10000_10ffff_tmp133 = simd_and(sequence_f0_9d_9c_adv, byte_range_9c_b4);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp133);
            sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
            r10000_10ffff_tmp134 = simd_and(r10000_10ffff_tmp16, tmp3);
            r10000_10ffff_tmp135 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp134);
            r10000_10ffff_tmp136 = simd_not(r10000_10ffff_tmp135);
            r10000_10ffff_tmp137 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp136), simd_andc(r10000_10ffff_tmp118, basis_bits.bit_2));
            byte_range_96_ae = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp137);
            carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(66), sequence_f0_9d_9d_adv));
            r10000_10ffff_tmp138 = simd_and(sequence_f0_9d_9d_adv, byte_range_96_ae);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp138);
            r10000_10ffff_tmp139 = simd_and(r10000_10ffff_tmp16, r10000_10ffff_tmp12);
            byte_9e = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp139);
            sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
            r10000_10ffff_tmp140 = simd_or(basis_bits.bit_5, tmp8);
            r10000_10ffff_tmp141 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp140);
            r10000_10ffff_tmp142 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp141);
            r10000_10ffff_tmp143 = simd_not(r10000_10ffff_tmp142);
            r10000_10ffff_tmp144 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp143), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_a8 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp144);
            carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(67), sequence_f0_9d_9e_adv));
            r10000_10ffff_tmp145 = simd_and(sequence_f0_9d_9e_adv, byte_range_90_a8);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp145);
            byte_9f = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp134);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            byte_8a = simd_and(r10000_10ffff_tmp28, r10000_10ffff_tmp121);
            carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(68), sequence_f0_9d_9f_adv));
            r10000_10ffff_tmp146 = simd_and(sequence_f0_9d_9f_adv, byte_8a);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp146);
            sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
            byte_84 = simd_and(r10000_10ffff_tmp28, r10000_10ffff_tmp62);
            carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(69), r10000_10ffff_tmp147));
            sequence_f0_9f_84 = simd_and(r10000_10ffff_tmp147, byte_84);
            sequence_f0_9f_adv = r10000_10ffff_tmp147;
            byte_range_b0_bf = r10000_10ffff_tmp24;
            carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_84, carryQ.get_carry_in(70), sequence_f0_9f_84_adv));
            r10000_10ffff_tmp148 = simd_and(sequence_f0_9f_84_adv, byte_range_b0_bf);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp148);
            byte_85 = simd_and(r10000_10ffff_tmp28, r10000_10ffff_tmp88);
            sequence_f0_9f_85 = simd_and(sequence_f0_9f_adv, byte_85);
            r10000_10ffff_tmp149 = simd_or(r10000_10ffff_tmp122, byte_range_90_a9);
            cc_range_1f140_1f170_4 = simd_or(r10000_10ffff_tmp149, byte_range_b0_bf);
            carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_85, carryQ.get_carry_in(71), sequence_f0_9f_85_adv));
            r10000_10ffff_tmp150 = simd_and(sequence_f0_9f_85_adv, cc_range_1f140_1f170_4);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp150);
            byte_86 = r10000_10ffff_tmp92;
            sequence_f0_9f_86 = simd_and(sequence_f0_9f_adv, byte_86);
            byte_range_80_89 = r10000_10ffff_tmp122;
            carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_86, carryQ.get_carry_in(72), sequence_f0_9f_86_adv));
            r10000_10ffff_tmp151 = simd_and(sequence_f0_9f_86_adv, byte_range_80_89);
            struct_upper_Y.cc = simd_or(struct_upper_Y.cc, r10000_10ffff_tmp151);
          }
          else {
            carryQ.CarryDequeueEnqueue(47, 26);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 73);
        }
        carryQ.CarryQ_Adjust(73);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<73, 0> carryQ;
  };

  struct Property_cased_Y {
  Property_cased_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_cased_Y & struct_cased_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9;
		BitBlock cc_range_41_61_1, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, byte_c2, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13, r80_7ff_tmp14;
		BitBlock r80_7ff_tmp15, r80_7ff_tmp16, r80_7ff_tmp17, r80_7ff_tmp18;
		BitBlock cc_range_aa_ba_2, byte_c2_adv, r80_7ff_tmp19, r80_7ff_tmp20, byte_c3;
		BitBlock r80_7ff_tmp21, r80_7ff_tmp22, r80_7ff_tmp23, r80_7ff_tmp24;
		BitBlock r80_7ff_tmp25, r80_7ff_tmp26, r80_7ff_tmp27, r80_7ff_tmp28;
		BitBlock r80_7ff_tmp29, r80_7ff_tmp30, r80_7ff_tmp31, cc_range_c0_f8_2;
		BitBlock byte_c3_adv, r80_7ff_tmp32, byte_range_c4_cf, r100_3ff_tmp1;
		BitBlock byte_range_c4_cb, r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3;
		BitBlock byte_range_c4_c8, r100_2ff_tmp4, byte_c9, byte_range_80_8f;
		BitBlock r100_2ff_tmp5, r100_2ff_tmp6, r100_2ff_tmp7, r100_24f_tmp1;
		BitBlock byte_range_c4_c5, byte_range_80_bf, r100_17f_tmp1;
		BitBlock byte_range_c4_c5_sfx, r100_24f_tmp2, r100_24f_tmp3, byte_range_c6_c8;
		BitBlock r100_24f_tmp4, r180_24f_tmp1, byte_c6, r180_24f_tmp2, r180_24f_tmp3;
		BitBlock r180_24f_tmp4, r180_24f_tmp5, r180_24f_tmp6, cc_range_180_1bc_2;
		BitBlock byte_c6_adv, r180_24f_tmp7, r180_24f_tmp8, byte_c7, r180_24f_tmp9;
		BitBlock r180_24f_tmp10, byte_range_84_bf, byte_c7_adv, r180_24f_tmp11;
		BitBlock r180_24f_tmp12, byte_c8, byte_c8_adv, r180_24f_tmp13, byte_c9_adv;
		BitBlock r180_24f_tmp14, byte_range_90_bf, r100_2ff_tmp8, byte_ca;
		BitBlock byte_range_80_af, r100_2ff_tmp9, r100_2ff_tmp10, r100_2ff_tmp11;
		BitBlock r250_2af_tmp1, r250_2af_tmp2, r250_2af_tmp3, r250_2af_tmp4;
		BitBlock r250_2af_tmp5, r250_2af_tmp6, r250_2af_tmp7, r250_2af_tmp8;
		BitBlock r250_2af_tmp9, cc_range_280_295_2, byte_ca_adv, r250_2af_tmp10;
		BitBlock byte_range_b0_bf, r100_2ff_tmp12, r100_2ff_tmp13, byte_cb;
		BitBlock r100_2ff_tmp14, r2b0_2ff_tmp1, byte_range_b0_b8, r2b0_2ff_tmp2;
		BitBlock r2b0_2ff_tmp3, r2b0_2ff_tmp4, r2b0_2ff_tmp5, r2b0_2ff_tmp6;
		BitBlock r2b0_2ff_tmp7, cc_range_2c0_2e0_2, byte_cb_adv, r2b0_2ff_tmp8;
		BitBlock r100_3ff_tmp2, r100_3ff_tmp3, byte_cc, r100_3ff_tmp4, byte_cd;
		BitBlock r100_3ff_tmp5, r100_3ff_tmp6, r100_3ff_tmp7, r300_36f_tmp1, byte_85;
		BitBlock byte_cd_adv, r300_36f_tmp2, r100_3ff_tmp8, r100_3ff_tmp9;
		BitBlock byte_range_ce_cf, r100_3ff_tmp10, r370_3ff_tmp1, r370_3ff_tmp2;
		BitBlock r370_3ff_tmp3, r370_3ff_tmp4, r370_3ff_tmp5, r370_3ff_tmp6;
		BitBlock r370_3ff_tmp7, r370_3ff_tmp8, r370_3ff_tmp9, cc_range_370_37f_2;
		BitBlock r370_3ff_tmp10, r370_3ff_tmp11, byte_ce, r370_3ff_tmp12;
		BitBlock r370_3ff_tmp13, r370_3ff_tmp14, r370_3ff_tmp15, r370_3ff_tmp16;
		BitBlock r370_3ff_tmp17, r370_3ff_tmp18, r370_3ff_tmp19, r370_3ff_tmp20;
		BitBlock r370_3ff_tmp21, r370_3ff_tmp22, r370_3ff_tmp23, r370_3ff_tmp24;
		BitBlock r370_3ff_tmp25, r370_3ff_tmp26, r370_3ff_tmp27, r370_3ff_tmp28;
		BitBlock r370_3ff_tmp29, r370_3ff_tmp30, cc_range_386_3a3_2, byte_ce_adv;
		BitBlock r370_3ff_tmp31, byte_cf, r370_3ff_tmp32, r370_3ff_tmp33;
		BitBlock r370_3ff_tmp34, r370_3ff_tmp35, r370_3ff_tmp36, r370_3ff_tmp37;
		BitBlock cc_range_3c0_3f7_2, byte_cf_adv, r370_3ff_tmp38, r80_7ff_tmp33;
		BitBlock r80_7ff_tmp34, byte_range_d0_d7, byte_range_d0_d3, r400_4ff_tmp1;
		BitBlock byte_range_d0_d1, r400_4ff_tmp2, byte_range_d0_d1_sfx, byte_d2;
		BitBlock r400_4ff_tmp3, byte_range_80_81, r400_4ff_tmp4;
		BitBlock byte_d2_byte_range_80_81, byte_d3, r400_4ff_tmp5;
		BitBlock byte_d3_byte_range_80_bf, r400_5ff_tmp1, byte_range_d4_d5;
		BitBlock r400_5ff_tmp2, byte_d6, r400_5ff_tmp3, r400_5ff_tmp4, r400_5ff_tmp5;
		BitBlock r500_58f_tmp1, byte_d4, r500_58f_tmp2, r500_58f_tmp3, byte_d4_adv;
		BitBlock r500_52f_tmp1, r500_58f_tmp4, byte_d5, r500_58f_tmp5, r500_58f_tmp6;
		BitBlock r530_58f_tmp1, r530_58f_tmp2, byte_range_b1_bf, r530_58f_tmp3;
		BitBlock r530_58f_tmp4, r530_58f_tmp5, r530_58f_tmp6, cc_range_540_561_2;
		BitBlock byte_d5_adv, r530_58f_tmp7, byte_range_80_87, byte_d6_adv;
		BitBlock r530_58f_tmp8, r80_10ffff_tmp1, byte_range_e0_ef, byte_range_e0_e3;
		BitBlock r800_ffff_tmp1, r800_ffff_tmp2, byte_e4, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, r800_ffff_tmp5, byte_range_80_b7, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, r800_ffff_tmp8, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock r800_1fff_tmp1, r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1;
		BitBlock r1000_1fff_tmp2, r1000_1fff_tmp3, r1000_1fff_tmp4, byte_82;
		BitBlock r1000_1fff_tmp5, sequence_e1_82, byte_e1_adv, byte_range_a0_bf;
		BitBlock sequence_e1_82_adv, r1000_1fff_tmp6, r1000_1fff_tmp7, byte_83;
		BitBlock sequence_e1_83, r1000_1fff_tmp8, r1000_1fff_tmp9, r1000_1fff_tmp10;
		BitBlock r1000_1fff_tmp11, r1000_1fff_tmp12, r1000_1fff_tmp13;
		BitBlock r1000_1fff_tmp14, r1000_1fff_tmp15, r1000_1fff_tmp16;
		BitBlock cc_range_10c0_10cd_3, sequence_e1_83_adv, r1000_1fff_tmp17;
		BitBlock r1000_1fff_tmp18, r1000_1fff_tmp19, r1000_1fff_tmp20;
		BitBlock byte_range_b4_b6, byte_e1_byte_range_b4_b6, r1000_1fff_tmp21;
		BitBlock byte_e1_byte_range_b4_b6_sfx, r1000_1fff_tmp22, r1000_1fff_tmp23;
		BitBlock r1000_1fff_tmp24, byte_b8, sequence_e1_b8, r1000_1fff_tmp25;
		BitBlock sequence_e1_b8_byte_range_80_bf, r1000_1fff_tmp26, byte_bc;
		BitBlock sequence_e1_bc, r1000_1fff_tmp27, r1000_1fff_tmp28, r1000_1fff_tmp29;
		BitBlock byte_range_80_95, r1000_1fff_tmp30, sequence_e1_bc_byte_range_80_95;
		BitBlock byte_bd, sequence_e1_bd, r1000_1fff_tmp31, r1000_1fff_tmp32;
		BitBlock byte_range_80_85, r1000_1fff_tmp33, sequence_e1_bd_byte_range_80_85;
		BitBlock r1000_1fff_tmp34, byte_be, sequence_e1_be, r1000_1fff_tmp35;
		BitBlock r1000_1fff_tmp36, r1000_1fff_tmp37, r1000_1fff_tmp38;
		BitBlock byte_range_80_b4, r1000_1fff_tmp39, sequence_e1_be_byte_range_80_b4;
		BitBlock r1000_1fff_tmp40, byte_bf, sequence_e1_bf, r1000_1fff_tmp41;
		BitBlock r1000_1fff_tmp42, byte_range_82_84, r1000_1fff_tmp43;
		BitBlock sequence_e1_bf_byte_range_82_84, r800_4dff_tmp2, byte_range_e2_e3;
		BitBlock r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2;
		BitBlock r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3, r2000_2fff_tmp4;
		BitBlock byte_81, r2000_2fff_tmp5, sequence_e2_81, byte_e2_adv;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, cc_range_2071_207f_3, sequence_e2_81_adv;
		BitBlock r2000_2fff_tmp11, sequence_e2_82, r2000_2fff_tmp12, r2000_2fff_tmp13;
		BitBlock r2000_2fff_tmp14, r2000_2fff_tmp15, byte_range_90_9c;
		BitBlock sequence_e2_82_adv, r2000_2fff_tmp16, byte_84, sequence_e2_84;
		BitBlock r2000_2fff_tmp17, r2000_2fff_tmp18, r2000_2fff_tmp19;
		BitBlock r2000_2fff_tmp20, r2000_2fff_tmp21, r2000_2fff_tmp22;
		BitBlock r2000_2fff_tmp23, r2000_2fff_tmp24, r2000_2fff_tmp25;
		BitBlock r2000_2fff_tmp26, r2000_2fff_tmp27, r2000_2fff_tmp28;
		BitBlock r2000_2fff_tmp29, r2000_2fff_tmp30, r2000_2fff_tmp31;
		BitBlock r2000_2fff_tmp32, r2000_2fff_tmp33, r2000_2fff_tmp34;
		BitBlock r2000_2fff_tmp35, r2000_2fff_tmp36, r2000_2fff_tmp37;
		BitBlock r2000_2fff_tmp38, r2000_2fff_tmp39, r2000_2fff_tmp40;
		BitBlock r2000_2fff_tmp41, r2000_2fff_tmp42, r2000_2fff_tmp43;
		BitBlock r2000_2fff_tmp44, r2000_2fff_tmp45, r2000_2fff_tmp46;
		BitBlock r2000_2fff_tmp47, r2000_2fff_tmp48, r2000_2fff_tmp49;
		BitBlock r2000_2fff_tmp50, r2000_2fff_tmp51, r2000_2fff_tmp52;
		BitBlock r2000_2fff_tmp53, r2000_2fff_tmp54, r2000_2fff_tmp55;
		BitBlock r2000_2fff_tmp56, r2000_2fff_tmp57, r2000_2fff_tmp58;
		BitBlock cc_range_2102_213c_3, sequence_e2_84_adv, r2000_2fff_tmp59;
		BitBlock sequence_e2_85, r2000_2fff_tmp60, r2000_2fff_tmp61, r2000_2fff_tmp62;
		BitBlock r2000_2fff_tmp63, r2000_2fff_tmp64, cc_range_2145_2160_3;
		BitBlock sequence_e2_85_adv, r2000_2fff_tmp65, byte_86, sequence_e2_86;
		BitBlock r2000_2fff_tmp66, r2000_2fff_tmp67, r2000_2fff_tmp68;
		BitBlock byte_range_83_84, sequence_e2_86_adv, r2000_2fff_tmp69, byte_92;
		BitBlock sequence_e2_92, r2000_2fff_tmp70, r2000_2fff_tmp71, byte_range_b6_bf;
		BitBlock sequence_e2_92_adv, r2000_2fff_tmp72, r2000_2fff_tmp73, byte_93;
		BitBlock sequence_e2_93, r2000_2fff_tmp74, r2000_2fff_tmp75, byte_range_80_a9;
		BitBlock sequence_e2_93_adv, r2000_2fff_tmp76, byte_b0, sequence_e2_b0;
		BitBlock r2000_2fff_tmp77, r2000_2fff_tmp78, r2000_2fff_tmp79;
		BitBlock cc_range_2c00_2c30_3, sequence_e2_b0_adv, r2000_2fff_tmp80, byte_b1;
		BitBlock sequence_e2_b1, r2000_2fff_tmp81, r2000_2fff_tmp82;
		BitBlock cc_range_2c40_2c60_3, sequence_e2_b1_adv, r2000_2fff_tmp83, byte_b2;
		BitBlock sequence_e2_b2, sequence_e2_b2_adv, r2000_2fff_tmp84;
		BitBlock r2000_2fff_tmp85, byte_b3, sequence_e2_b3, r2000_2fff_tmp86;
		BitBlock r2000_2fff_tmp87, r2000_2fff_tmp88, r2000_2fff_tmp89;
		BitBlock r2000_2fff_tmp90, r2000_2fff_tmp91, r2000_2fff_tmp92;
		BitBlock r2000_2fff_tmp93, r2000_2fff_tmp94, cc_range_2cc0_2cf2_3;
		BitBlock sequence_e2_b3_adv, r2000_2fff_tmp95, byte_b4, sequence_e2_b4;
		BitBlock r2000_2fff_tmp96, r2000_2fff_tmp97, r2000_2fff_tmp98;
		BitBlock r2000_2fff_tmp99, r2000_2fff_tmp100, r2000_2fff_tmp101;
		BitBlock r2000_2fff_tmp102, cc_range_2d00_2d2d_3, sequence_e2_b4_adv;
		BitBlock r2000_2fff_tmp103, r800_ffff_tmp9, r800_ffff_tmp10, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea;
		BitBlock ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7;
		BitBlock byte_99, ra000_ffff_tmp8, sequence_ea_99, byte_ea_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock byte_range_80_ad, sequence_ea_99_adv, ra000_ffff_tmp13, byte_9a;
		BitBlock sequence_ea_9a, ra000_ffff_tmp14, ra000_ffff_tmp15, byte_range_80_9d;
		BitBlock sequence_ea_9a_adv, ra000_ffff_tmp16, ra000_ffff_tmp17, byte_9c;
		BitBlock sequence_ea_9c, ra000_ffff_tmp18, ra000_ffff_tmp19, ra000_ffff_tmp20;
		BitBlock byte_range_a2_bf, sequence_ea_9c_adv, ra000_ffff_tmp21;
		BitBlock ra000_ffff_tmp22, byte_9d, sequence_ea_9d, sequence_ea_9d_adv;
		BitBlock ra000_ffff_tmp23, ra000_ffff_tmp24, ra000_ffff_tmp25, byte_9e;
		BitBlock sequence_ea_9e, ra000_ffff_tmp26, ra000_ffff_tmp27, ra000_ffff_tmp28;
		BitBlock ra000_ffff_tmp29, ra000_ffff_tmp30, ra000_ffff_tmp31;
		BitBlock ra000_ffff_tmp32, ra000_ffff_tmp33, ra000_ffff_tmp34;
		BitBlock ra000_ffff_tmp35, ra000_ffff_tmp36, ra000_ffff_tmp37;
		BitBlock ra000_ffff_tmp38, ra000_ffff_tmp39, cc_range_a780_a7b0_3;
		BitBlock sequence_ea_9e_adv, ra000_ffff_tmp40, ra000_ffff_tmp41, byte_9f;
		BitBlock sequence_ea_9f, ra000_ffff_tmp42, byte_range_b8_ba;
		BitBlock sequence_ea_9f_adv, ra000_ffff_tmp43, ra000_ffff_tmp44, byte_ac;
		BitBlock sequence_ea_ac, sequence_ea_ac_adv, ra000_ffff_tmp45, byte_ad;
		BitBlock sequence_ea_ad, ra000_ffff_tmp46, ra000_ffff_tmp47, ra000_ffff_tmp48;
		BitBlock ra000_ffff_tmp49, ra000_ffff_tmp50, ra000_ffff_tmp51;
		BitBlock ra000_ffff_tmp52, cc_range_ab40_ab64_3, sequence_ea_ad_adv;
		BitBlock ra000_ffff_tmp53, byte_ef, ra000_ffff_tmp54, sequence_ef_ac;
		BitBlock byte_ef_adv, ra000_ffff_tmp55, ra000_ffff_tmp56, ra000_ffff_tmp57;
		BitBlock ra000_ffff_tmp58, cc_range_fb00_fb13_3, sequence_ef_ac_adv;
		BitBlock ra000_ffff_tmp59, sequence_ef_bc, ra000_ffff_tmp60, byte_range_a1_ba;
		BitBlock sequence_ef_bc_adv, ra000_ffff_tmp61, sequence_ef_bd;
		BitBlock byte_range_81_9a, sequence_ef_bd_adv, ra000_ffff_tmp62;
		BitBlock r80_10ffff_tmp2, byte_range_f0_ff, byte_f0, r10000_10ffff_tmp1;
		BitBlock r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_90, r10000_10ffff_tmp4;
		BitBlock sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp5, sequence_f0_90_90;
		BitBlock sequence_f0_90_adv, sequence_f0_90_90_adv, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9, byte_91;
		BitBlock sequence_f0_90_91, r10000_10ffff_tmp10, sequence_f0_90_91_adv;
		BitBlock r10000_10ffff_tmp11, sequence_f0_91, r10000_10ffff_tmp12;
		BitBlock r10000_10ffff_tmp13, r10000_10ffff_tmp14, byte_a2;
		BitBlock r10000_10ffff_tmp15, sequence_f0_91_a2, sequence_f0_91_adv;
		BitBlock sequence_f0_91_a2_adv, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock byte_a3, sequence_f0_91_a3, byte_range_80_9f, sequence_f0_91_a3_adv;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock sequence_f0_9d, r10000_10ffff_tmp21, sequence_f0_9d_90;
		BitBlock sequence_f0_9d_adv, sequence_f0_9d_90_adv, r10000_10ffff_tmp22;
		BitBlock sequence_f0_9d_91, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock r10000_10ffff_tmp25, r10000_10ffff_tmp26, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, r10000_10ffff_tmp29, r10000_10ffff_tmp30;
		BitBlock r10000_10ffff_tmp31, cc_range_1d440_1d456_4, sequence_f0_9d_91_adv;
		BitBlock r10000_10ffff_tmp32, sequence_f0_9d_92, r10000_10ffff_tmp33;
		BitBlock r10000_10ffff_tmp34, r10000_10ffff_tmp35, r10000_10ffff_tmp36;
		BitBlock r10000_10ffff_tmp37, r10000_10ffff_tmp38, r10000_10ffff_tmp39;
		BitBlock r10000_10ffff_tmp40, r10000_10ffff_tmp41, r10000_10ffff_tmp42;
		BitBlock r10000_10ffff_tmp43, r10000_10ffff_tmp44, r10000_10ffff_tmp45;
		BitBlock r10000_10ffff_tmp46, r10000_10ffff_tmp47, r10000_10ffff_tmp48;
		BitBlock r10000_10ffff_tmp49, r10000_10ffff_tmp50, r10000_10ffff_tmp51;
		BitBlock r10000_10ffff_tmp52, r10000_10ffff_tmp53, r10000_10ffff_tmp54;
		BitBlock r10000_10ffff_tmp55, r10000_10ffff_tmp56, r10000_10ffff_tmp57;
		BitBlock r10000_10ffff_tmp58, r10000_10ffff_tmp59, r10000_10ffff_tmp60;
		BitBlock r10000_10ffff_tmp61, cc_range_1d480_1d4bd_4, sequence_f0_9d_92_adv;
		BitBlock r10000_10ffff_tmp62, sequence_f0_9d_93, r10000_10ffff_tmp63;
		BitBlock r10000_10ffff_tmp64, r10000_10ffff_tmp65, r10000_10ffff_tmp66;
		BitBlock cc_range_1d4c0_1d4c5_4, sequence_f0_9d_93_adv, r10000_10ffff_tmp67;
		BitBlock r10000_10ffff_tmp68, byte_94, sequence_f0_9d_94, r10000_10ffff_tmp69;
		BitBlock r10000_10ffff_tmp70, r10000_10ffff_tmp71, r10000_10ffff_tmp72;
		BitBlock r10000_10ffff_tmp73, r10000_10ffff_tmp74, r10000_10ffff_tmp75;
		BitBlock r10000_10ffff_tmp76, r10000_10ffff_tmp77, r10000_10ffff_tmp78;
		BitBlock r10000_10ffff_tmp79, r10000_10ffff_tmp80, r10000_10ffff_tmp81;
		BitBlock r10000_10ffff_tmp82, r10000_10ffff_tmp83, r10000_10ffff_tmp84;
		BitBlock r10000_10ffff_tmp85, r10000_10ffff_tmp86, r10000_10ffff_tmp87;
		BitBlock r10000_10ffff_tmp88, r10000_10ffff_tmp89, r10000_10ffff_tmp90;
		BitBlock r10000_10ffff_tmp91, r10000_10ffff_tmp92, cc_range_1d500_1d53b_4;
		BitBlock sequence_f0_9d_94_adv, r10000_10ffff_tmp93, r10000_10ffff_tmp94;
		BitBlock byte_95, sequence_f0_9d_95, r10000_10ffff_tmp95, r10000_10ffff_tmp96;
		BitBlock r10000_10ffff_tmp97, r10000_10ffff_tmp98, r10000_10ffff_tmp99;
		BitBlock r10000_10ffff_tmp100, r10000_10ffff_tmp101, r10000_10ffff_tmp102;
		BitBlock r10000_10ffff_tmp103, r10000_10ffff_tmp104, r10000_10ffff_tmp105;
		BitBlock r10000_10ffff_tmp106, cc_range_1d540_1d552_4, sequence_f0_9d_95_adv;
		BitBlock r10000_10ffff_tmp107, r10000_10ffff_tmp108, r10000_10ffff_tmp109;
		BitBlock byte_range_96_99, sequence_f0_9d_byte_range_96_99;
		BitBlock r10000_10ffff_tmp110, sequence_f0_9d_byte_range_96_99_sfx;
		BitBlock r10000_10ffff_tmp111, sequence_f0_9d_9a, r10000_10ffff_tmp112;
		BitBlock r10000_10ffff_tmp113, byte_range_80_a5, r10000_10ffff_tmp114;
		BitBlock sequence_f0_9d_9a_byte_range_80_a5, byte_9b, sequence_f0_9d_9b;
		BitBlock byte_80, r10000_10ffff_tmp115, sequence_f0_9d_9b_80;
		BitBlock r10000_10ffff_tmp116, sequence_f0_9d_9c, byte_range_80_94;
		BitBlock r10000_10ffff_tmp117, sequence_f0_9d_9c_byte_range_80_94;
		BitBlock sequence_f0_9d_9d, r10000_10ffff_tmp118, byte_range_80_8e;
		BitBlock r10000_10ffff_tmp119, sequence_f0_9d_9d_byte_range_80_8e;
		BitBlock r10000_10ffff_tmp120, sequence_f0_9d_9e, r10000_10ffff_tmp121;
		BitBlock r10000_10ffff_tmp122, byte_range_80_88, r10000_10ffff_tmp123;
		BitBlock sequence_f0_9d_9e_byte_range_80_88, r10000_10ffff_tmp124;
		BitBlock sequence_f0_9d_9f, byte_range_80_82, r10000_10ffff_tmp125;
		BitBlock sequence_f0_9d_9f_byte_range_80_82, sequence_f0_9f;
		BitBlock r10000_10ffff_tmp126, sequence_f0_9f_84, sequence_f0_9f_adv;
		BitBlock sequence_f0_9f_84_adv, r10000_10ffff_tmp127, sequence_f0_9f_85;
		BitBlock r10000_10ffff_tmp128, r10000_10ffff_tmp129, r10000_10ffff_tmp130;
		BitBlock r10000_10ffff_tmp131, r10000_10ffff_tmp132, r10000_10ffff_tmp133;
		BitBlock cc_range_1f140_1f170_4, sequence_f0_9f_85_adv, r10000_10ffff_tmp134;
		BitBlock sequence_f0_9f_86, byte_range_80_89, sequence_f0_9f_86_adv;
		BitBlock r10000_10ffff_tmp135;




        struct_cased_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp2 = simd_or(basis_bits.bit_5, tmp1);
        tmp3 = simd_and(basis_bits.bit_4, tmp2);
        tmp4 = simd_not(tmp3);
        tmp5 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp7 = simd_or(tmp5, tmp6);
        tmp8 = simd_or(simd_and(basis_bits.bit_3, tmp4), simd_andc(tmp7, basis_bits.bit_3));
        tmp9 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        cc_range_41_61_1 = simd_and(tmp8, tmp9);
        struct_cased_Y.cc = simd_or(struct_cased_Y.cc, cc_range_41_61_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 79))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 18))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, tmp5);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp9 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
            r80_7ff_tmp10 = simd_and(r80_7ff_tmp7, r80_7ff_tmp9);
            r80_7ff_tmp11 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp12 = simd_and(r80_7ff_tmp5, r80_7ff_tmp11);
            r80_7ff_tmp13 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp15 = simd_and(r80_7ff_tmp13, r80_7ff_tmp14);
            r80_7ff_tmp16 = simd_and(r80_7ff_tmp12, r80_7ff_tmp15);
            r80_7ff_tmp17 = simd_or(r80_7ff_tmp10, r80_7ff_tmp16);
            r80_7ff_tmp18 = simd_and(r80_7ff_tmp12, r80_7ff_tmp9);
            cc_range_aa_ba_2 = simd_or(r80_7ff_tmp17, r80_7ff_tmp18);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp19 = simd_and(byte_c2_adv, cc_range_aa_ba_2);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r80_7ff_tmp19);
            r80_7ff_tmp20 = simd_andc(tmp1, tmp5);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp20);
            r80_7ff_tmp21 = simd_andc(r80_7ff_tmp5, basis_bits.bit_2);
            r80_7ff_tmp22 = simd_and(basis_bits.bit_5, tmp1);
            r80_7ff_tmp23 = simd_or(basis_bits.bit_4, r80_7ff_tmp22);
            r80_7ff_tmp24 = simd_and(basis_bits.bit_3, r80_7ff_tmp23);
            r80_7ff_tmp25 = simd_andc(r80_7ff_tmp21, r80_7ff_tmp24);
            r80_7ff_tmp26 = simd_not(r80_7ff_tmp24);
            r80_7ff_tmp27 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r80_7ff_tmp28 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp26), simd_andc(r80_7ff_tmp27, basis_bits.bit_2));
            r80_7ff_tmp29 = simd_and(r80_7ff_tmp5, r80_7ff_tmp28);
            r80_7ff_tmp30 = simd_or(r80_7ff_tmp25, r80_7ff_tmp29);
            r80_7ff_tmp31 = simd_and(r80_7ff_tmp12, basis_bits.bit_4);
            cc_range_c0_f8_2 = simd_or(r80_7ff_tmp30, r80_7ff_tmp31);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp32 = simd_and(byte_c3_adv, cc_range_c0_f8_2);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r80_7ff_tmp32);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp5);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 10))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(2, 7))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_5, tmp6);
                r100_2ff_tmp2 = simd_not(r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_and(r80_7ff_tmp8, r80_7ff_tmp14);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp4);
                byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(2), r100_2ff_tmp5));
                r100_2ff_tmp6 = simd_and(r100_2ff_tmp5, byte_range_80_8f);
                r100_2ff_tmp7 = simd_or(byte_range_c4_c8, r100_2ff_tmp6);
                if ((bitblock::any(r100_2ff_tmp7) || carryQ.CarryTest(3, 4))) {
                  r100_24f_tmp1 = simd_andc(r80_7ff_tmp13, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp1);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(3, 1))) {
                    byte_range_80_bf = r80_7ff_tmp5;
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_range_c4_c5, carryQ.get_carry_in(3), r100_17f_tmp1));
                    byte_range_c4_c5_sfx = simd_and(r100_17f_tmp1, byte_range_80_bf);
                    struct_cased_Y.cc = simd_or(struct_cased_Y.cc, byte_range_c4_c5_sfx);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(3, 1);
                  }
                  r100_24f_tmp2 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r100_24f_tmp2, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp3);
                  r100_24f_tmp4 = simd_or(byte_range_c6_c8, r100_2ff_tmp6);
                  if ((bitblock::any(r100_24f_tmp4) || carryQ.CarryTest(4, 3))) {
                    r180_24f_tmp1 = simd_and(r80_7ff_tmp13, r80_7ff_tmp3);
                    byte_c6 = simd_and(r80_7ff_tmp2, r180_24f_tmp1);
                    r180_24f_tmp2 = simd_and(basis_bits.bit_3, tmp3);
                    r180_24f_tmp3 = simd_and(basis_bits.bit_2, r180_24f_tmp2);
                    r180_24f_tmp4 = simd_andc(r80_7ff_tmp5, r180_24f_tmp3);
                    r180_24f_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                    r180_24f_tmp6 = simd_and(r80_7ff_tmp12, r180_24f_tmp5);
                    cc_range_180_1bc_2 = simd_or(r180_24f_tmp4, r180_24f_tmp6);
                    carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_c6, carryQ.get_carry_in(4), byte_c6_adv));
                    r180_24f_tmp7 = simd_and(byte_c6_adv, cc_range_180_1bc_2);
                    struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r180_24f_tmp7);
                    r180_24f_tmp8 = simd_and(r80_7ff_tmp13, tmp1);
                    byte_c7 = simd_and(r80_7ff_tmp2, r180_24f_tmp8);
                    r180_24f_tmp9 = simd_or(basis_bits.bit_3, tmp5);
                    r180_24f_tmp10 = simd_or(basis_bits.bit_2, r180_24f_tmp9);
                    byte_range_84_bf = simd_and(r80_7ff_tmp5, r180_24f_tmp10);
                    carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(5), byte_c7_adv));
                    r180_24f_tmp11 = simd_and(byte_c7_adv, byte_range_84_bf);
                    struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r180_24f_tmp11);
                    r180_24f_tmp12 = simd_andc(r80_7ff_tmp8, tmp6);
                    byte_c8 = simd_and(r80_7ff_tmp2, r180_24f_tmp12);
                    byte_range_80_bf = r80_7ff_tmp5;
                    carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_c8, carryQ.get_carry_in(6), byte_c8_adv));
                    r180_24f_tmp13 = simd_and(byte_c8_adv, byte_range_80_bf);
                    struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r180_24f_tmp13);
                    byte_c9_adv = r100_2ff_tmp5;
                    r180_24f_tmp14 = simd_and(byte_c9_adv, byte_range_80_8f);
                    struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r180_24f_tmp14);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(4, 3);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 4);
                }
                byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
                r100_2ff_tmp8 = simd_and(r100_2ff_tmp5, byte_range_90_bf);
                byte_ca = simd_and(r80_7ff_tmp2, r80_7ff_tmp9);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp11);
                carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(7), r100_2ff_tmp9));
                r100_2ff_tmp10 = simd_and(r100_2ff_tmp9, byte_range_80_af);
                r100_2ff_tmp11 = simd_or(r100_2ff_tmp8, r100_2ff_tmp10);
                if (bitblock::any(r100_2ff_tmp11)) {
                  byte_c9_adv = r100_2ff_tmp5;
                  r250_2af_tmp1 = simd_and(byte_c9_adv, byte_range_90_bf);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r250_2af_tmp1);
                  r250_2af_tmp2 = simd_and(basis_bits.bit_3, tmp5);
                  r250_2af_tmp3 = simd_andc(r80_7ff_tmp21, r250_2af_tmp2);
                  r250_2af_tmp4 = simd_not(basis_bits.bit_3);
                  r250_2af_tmp5 = simd_and(basis_bits.bit_5, tmp6);
                  r250_2af_tmp6 = simd_or(basis_bits.bit_4, r250_2af_tmp5);
                  r250_2af_tmp7 = simd_and(basis_bits.bit_3, r250_2af_tmp6);
                  r250_2af_tmp8 = simd_or(simd_and(basis_bits.bit_2, r250_2af_tmp4), simd_andc(r250_2af_tmp7, basis_bits.bit_2));
                  r250_2af_tmp9 = simd_and(r80_7ff_tmp5, r250_2af_tmp8);
                  cc_range_280_295_2 = simd_or(r250_2af_tmp3, r250_2af_tmp9);
                  byte_ca_adv = r100_2ff_tmp9;
                  r250_2af_tmp10 = simd_and(byte_ca_adv, cc_range_280_295_2);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r250_2af_tmp10);
                }
                byte_range_b0_bf = r80_7ff_tmp12;
                r100_2ff_tmp12 = simd_and(r100_2ff_tmp9, byte_range_b0_bf);
                r100_2ff_tmp13 = simd_and(r80_7ff_tmp8, tmp1);
                byte_cb = simd_and(r80_7ff_tmp2, r100_2ff_tmp13);
                r100_2ff_tmp14 = simd_or(r100_2ff_tmp12, byte_cb);
                if ((bitblock::any(r100_2ff_tmp14) || carryQ.CarryTest(8, 1))) {
                  r2b0_2ff_tmp1 = simd_and(basis_bits.bit_4, r100_2ff_tmp1);
                  byte_range_b0_b8 = simd_andc(byte_range_b0_bf, r2b0_2ff_tmp1);
                  byte_ca_adv = r100_2ff_tmp9;
                  r2b0_2ff_tmp2 = simd_and(byte_ca_adv, byte_range_b0_b8);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r2b0_2ff_tmp2);
                  r2b0_2ff_tmp3 = simd_or(tmp5, basis_bits.bit_6);
                  r2b0_2ff_tmp4 = simd_andc(byte_range_80_8f, r2b0_2ff_tmp3);
                  r2b0_2ff_tmp5 = simd_andc(r80_7ff_tmp7, basis_bits.bit_4);
                  r2b0_2ff_tmp6 = simd_and(basis_bits.bit_5, tmp6);
                  r2b0_2ff_tmp7 = simd_andc(r2b0_2ff_tmp5, r2b0_2ff_tmp6);
                  cc_range_2c0_2e0_2 = simd_or(r2b0_2ff_tmp4, r2b0_2ff_tmp7);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(8), byte_cb_adv));
                  r2b0_2ff_tmp8 = simd_and(byte_cb_adv, cc_range_2c0_2e0_2);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r2b0_2ff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(8, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 7);
              }
              r100_3ff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp3 = simd_andc(r100_3ff_tmp2, tmp6);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              r100_3ff_tmp4 = simd_and(r100_3ff_tmp2, r80_7ff_tmp14);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp4);
              byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp11);
              carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(9), r100_3ff_tmp5));
              r100_3ff_tmp6 = simd_and(r100_3ff_tmp5, byte_range_80_af);
              r100_3ff_tmp7 = simd_or(byte_cc, r100_3ff_tmp6);
              if (bitblock::any(r100_3ff_tmp7)) {
                r300_36f_tmp1 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                byte_85 = simd_and(r300_36f_tmp1, r80_7ff_tmp15);
                byte_cd_adv = r100_3ff_tmp5;
                r300_36f_tmp2 = simd_and(byte_cd_adv, byte_85);
                struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r300_36f_tmp2);
              }
              byte_range_b0_bf = r80_7ff_tmp12;
              r100_3ff_tmp8 = simd_and(r100_3ff_tmp5, byte_range_b0_bf);
              r100_3ff_tmp9 = simd_and(r100_3ff_tmp2, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp9);
              r100_3ff_tmp10 = simd_or(r100_3ff_tmp8, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp10) || carryQ.CarryTest(10, 2))) {
                r370_3ff_tmp1 = simd_and(r80_7ff_tmp13, basis_bits.bit_6);
                r370_3ff_tmp2 = simd_andc(tmp5, r370_3ff_tmp1);
                r370_3ff_tmp3 = simd_andc(byte_range_b0_bf, r370_3ff_tmp2);
                r370_3ff_tmp4 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp5 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                r370_3ff_tmp6 = simd_and(r370_3ff_tmp4, r370_3ff_tmp5);
                r370_3ff_tmp7 = simd_or(r370_3ff_tmp3, r370_3ff_tmp6);
                r370_3ff_tmp8 = simd_and(r100_3ff_tmp2, tmp1);
                r370_3ff_tmp9 = simd_and(byte_range_b0_bf, r370_3ff_tmp8);
                cc_range_370_37f_2 = simd_or(r370_3ff_tmp7, r370_3ff_tmp9);
                byte_cd_adv = r100_3ff_tmp5;
                r370_3ff_tmp10 = simd_and(byte_cd_adv, cc_range_370_37f_2);
                struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r370_3ff_tmp10);
                r370_3ff_tmp11 = simd_and(r100_3ff_tmp2, r80_7ff_tmp3);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp11);
                r370_3ff_tmp12 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                r370_3ff_tmp13 = simd_and(r80_7ff_tmp13, r80_7ff_tmp3);
                r370_3ff_tmp14 = simd_and(r370_3ff_tmp12, r370_3ff_tmp13);
                r370_3ff_tmp15 = simd_and(r370_3ff_tmp12, r80_7ff_tmp8);
                r370_3ff_tmp16 = simd_andc(r370_3ff_tmp15, tmp1);
                r370_3ff_tmp17 = simd_or(r370_3ff_tmp14, r370_3ff_tmp16);
                r370_3ff_tmp18 = simd_and(r370_3ff_tmp12, r100_3ff_tmp3);
                r370_3ff_tmp19 = simd_or(r370_3ff_tmp17, r370_3ff_tmp18);
                r370_3ff_tmp20 = simd_or(tmp5, basis_bits.bit_6);
                r370_3ff_tmp21 = simd_or(basis_bits.bit_3, r370_3ff_tmp20);
                r370_3ff_tmp22 = simd_not(r370_3ff_tmp21);
                r370_3ff_tmp23 = simd_or(basis_bits.bit_3, r100_3ff_tmp9);
                r370_3ff_tmp24 = simd_or(simd_and(basis_bits.bit_2, r370_3ff_tmp22), simd_andc(r370_3ff_tmp23, basis_bits.bit_2));
                r370_3ff_tmp25 = simd_and(r80_7ff_tmp5, r370_3ff_tmp24);
                r370_3ff_tmp26 = simd_or(r370_3ff_tmp19, r370_3ff_tmp25);
                r370_3ff_tmp27 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                r370_3ff_tmp28 = simd_or(tmp5, tmp1);
                r370_3ff_tmp29 = simd_or(basis_bits.bit_3, r370_3ff_tmp28);
                r370_3ff_tmp30 = simd_and(r370_3ff_tmp27, r370_3ff_tmp29);
                cc_range_386_3a3_2 = simd_or(r370_3ff_tmp26, r370_3ff_tmp30);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(10), byte_ce_adv));
                r370_3ff_tmp31 = simd_and(byte_ce_adv, cc_range_386_3a3_2);
                struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r370_3ff_tmp31);
                byte_cf = simd_and(r80_7ff_tmp2, r370_3ff_tmp8);
                r370_3ff_tmp32 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r370_3ff_tmp33 = simd_or(basis_bits.bit_4, r370_3ff_tmp32);
                r370_3ff_tmp34 = simd_and(basis_bits.bit_3, r370_3ff_tmp33);
                r370_3ff_tmp35 = simd_and(basis_bits.bit_2, r370_3ff_tmp34);
                r370_3ff_tmp36 = simd_andc(r80_7ff_tmp5, r370_3ff_tmp35);
                r370_3ff_tmp37 = simd_and(byte_range_b0_bf, r80_7ff_tmp23);
                cc_range_3c0_3f7_2 = simd_or(r370_3ff_tmp36, r370_3ff_tmp37);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(11), byte_cf_adv));
                r370_3ff_tmp38 = simd_and(byte_cf_adv, cc_range_3c0_3f7_2);
                struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r370_3ff_tmp38);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 10);
            }
            r80_7ff_tmp33 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp34 = simd_and(byte_range_c0_ff, r80_7ff_tmp33);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp34, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(12, 6))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp34, tmp5);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(12, 3))) {
                r400_4ff_tmp1 = simd_or(tmp5, basis_bits.bit_6);
                byte_range_d0_d1 = simd_andc(r80_7ff_tmp34, r400_4ff_tmp1);
                byte_range_80_bf = r80_7ff_tmp5;
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_range_d0_d1, carryQ.get_carry_in(12), r400_4ff_tmp2));
                byte_range_d0_d1_sfx = simd_and(r400_4ff_tmp2, byte_range_80_bf);
                struct_cased_Y.cc = simd_or(struct_cased_Y.cc, byte_range_d0_d1_sfx);
                byte_d2 = simd_and(r80_7ff_tmp34, r80_7ff_tmp4);
                r400_4ff_tmp3 = simd_andc(byte_range_80_bf, r80_7ff_tmp1);
                byte_range_80_81 = simd_andc(r400_4ff_tmp3, r400_4ff_tmp1);
                carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(13), r400_4ff_tmp4));
                byte_d2_byte_range_80_81 = simd_and(r400_4ff_tmp4, byte_range_80_81);
                struct_cased_Y.cc = simd_or(struct_cased_Y.cc, byte_d2_byte_range_80_81);
                byte_d3 = simd_and(r80_7ff_tmp34, r80_7ff_tmp20);
                carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(14), r400_4ff_tmp5));
                byte_d3_byte_range_80_bf = simd_and(r400_4ff_tmp5, byte_range_80_bf);
                struct_cased_Y.cc = simd_or(struct_cased_Y.cc, byte_d3_byte_range_80_bf);
              }
              else {
                carryQ.CarryDequeueEnqueue(12, 3);
              }
              r400_5ff_tmp1 = simd_andc(r80_7ff_tmp13, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp34, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(r80_7ff_tmp13, r80_7ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp34, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(15), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(16, 2))) {
                r500_58f_tmp1 = simd_andc(r80_7ff_tmp13, tmp6);
                byte_d4 = simd_and(r80_7ff_tmp34, r500_58f_tmp1);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp11);
                carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(16), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp3)) {
                  byte_d4_adv = r500_58f_tmp2;
                  r500_52f_tmp1 = simd_and(byte_d4_adv, byte_range_80_af);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r500_52f_tmp1);
                }
                byte_range_b0_bf = r80_7ff_tmp12;
                r500_58f_tmp4 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                byte_d5 = simd_and(r80_7ff_tmp34, r80_7ff_tmp15);
                r500_58f_tmp5 = simd_or(r500_58f_tmp4, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp4);
                if ((bitblock::any(r500_58f_tmp6) || carryQ.CarryTest(17, 1))) {
                  r530_58f_tmp1 = simd_or(basis_bits.bit_5, tmp6);
                  r530_58f_tmp2 = simd_or(basis_bits.bit_4, r530_58f_tmp1);
                  byte_range_b1_bf = simd_and(byte_range_b0_bf, r530_58f_tmp2);
                  byte_d4_adv = r500_58f_tmp2;
                  r530_58f_tmp3 = simd_and(byte_d4_adv, byte_range_b1_bf);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r530_58f_tmp3);
                  r530_58f_tmp4 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                  r530_58f_tmp5 = simd_or(basis_bits.bit_3, tmp7);
                  r530_58f_tmp6 = simd_and(r530_58f_tmp4, r530_58f_tmp5);
                  cc_range_540_561_2 = simd_or(r80_7ff_tmp25, r530_58f_tmp6);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(17), byte_d5_adv));
                  r530_58f_tmp7 = simd_and(byte_d5_adv, cc_range_540_561_2);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r530_58f_tmp7);
                  byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_d6_adv = r400_5ff_tmp3;
                  r530_58f_tmp8 = simd_and(byte_d6_adv, byte_range_80_87);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r530_58f_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(17, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(16, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(12, 6);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 18);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(18, 36))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp5);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp6);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(18), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(19, 22))) {
              r800_4dff_tmp1 = simd_or(tmp5, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(19, 9))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp5);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(19, 9))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp4 = simd_andc(r1000_1fff_tmp3, tmp5);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp4);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(19), r1000_1fff_tmp5));
                  sequence_e1_82 = simd_and(r1000_1fff_tmp5, byte_82);
                  byte_e1_adv = r1000_1fff_tmp5;
                  byte_range_a0_bf = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(20), sequence_e1_82_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_82_adv, byte_range_a0_bf);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r1000_1fff_tmp6);
                  r1000_1fff_tmp7 = simd_andc(tmp1, tmp5);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp7);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  r1000_1fff_tmp8 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp10 = simd_andc(r1000_1fff_tmp8, r1000_1fff_tmp9);
                  r1000_1fff_tmp11 = simd_and(r800_ffff_tmp1, tmp1);
                  r1000_1fff_tmp12 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp11);
                  r1000_1fff_tmp13 = simd_or(r1000_1fff_tmp10, r1000_1fff_tmp12);
                  r1000_1fff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp15 = simd_and(r1000_1fff_tmp14, r800_1fff_tmp1);
                  r1000_1fff_tmp16 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp15);
                  cc_range_10c0_10cd_3 = simd_or(r1000_1fff_tmp13, r1000_1fff_tmp16);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(21), sequence_e1_83_adv));
                  r1000_1fff_tmp17 = simd_and(sequence_e1_83_adv, cc_range_10c0_10cd_3);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r1000_1fff_tmp17);
                  r1000_1fff_tmp18 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp19 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp18);
                  r1000_1fff_tmp20 = simd_and(r1000_1fff_tmp19, r800_ffff_tmp1);
                  byte_range_b4_b6 = simd_andc(r1000_1fff_tmp20, tmp1);
                  byte_e1_byte_range_b4_b6 = simd_and(byte_e1_adv, byte_range_b4_b6);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_b4_b6, carryQ.get_carry_in(22), r1000_1fff_tmp21));
                  byte_e1_byte_range_b4_b6_sfx = simd_and(r1000_1fff_tmp21, byte_range_80_bf);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, byte_e1_byte_range_b4_b6_sfx);
                  r1000_1fff_tmp22 = simd_and(byte_range_80_bf, r1000_1fff_tmp18);
                  r1000_1fff_tmp23 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp24 = simd_andc(r1000_1fff_tmp23, tmp6);
                  byte_b8 = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp24);
                  sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(23), r1000_1fff_tmp25));
                  sequence_e1_b8_byte_range_80_bf = simd_and(r1000_1fff_tmp25, byte_range_80_bf);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, sequence_e1_b8_byte_range_80_bf);
                  r1000_1fff_tmp26 = simd_andc(r1000_1fff_tmp14, tmp6);
                  byte_bc = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp26);
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  r1000_1fff_tmp27 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r1000_1fff_tmp28 = simd_or(basis_bits.bit_4, r1000_1fff_tmp9);
                  r1000_1fff_tmp29 = simd_and(basis_bits.bit_3, r1000_1fff_tmp28);
                  byte_range_80_95 = simd_andc(r1000_1fff_tmp27, r1000_1fff_tmp29);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(24), r1000_1fff_tmp30));
                  sequence_e1_bc_byte_range_80_95 = simd_and(r1000_1fff_tmp30, byte_range_80_95);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, sequence_e1_bc_byte_range_80_95);
                  byte_bd = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp15);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  r1000_1fff_tmp31 = simd_andc(byte_range_80_bf, r1000_1fff_tmp1);
                  r1000_1fff_tmp32 = simd_andc(r1000_1fff_tmp31, basis_bits.bit_4);
                  byte_range_80_85 = simd_andc(r1000_1fff_tmp32, r1000_1fff_tmp9);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(25), r1000_1fff_tmp33));
                  sequence_e1_bd_byte_range_80_85 = simd_and(r1000_1fff_tmp33, byte_range_80_85);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, sequence_e1_bd_byte_range_80_85);
                  r1000_1fff_tmp34 = simd_and(r1000_1fff_tmp14, r1000_1fff_tmp3);
                  byte_be = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp34);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  r1000_1fff_tmp35 = simd_and(basis_bits.bit_5, tmp6);
                  r1000_1fff_tmp36 = simd_or(basis_bits.bit_4, r1000_1fff_tmp35);
                  r1000_1fff_tmp37 = simd_and(basis_bits.bit_3, r1000_1fff_tmp36);
                  r1000_1fff_tmp38 = simd_and(basis_bits.bit_2, r1000_1fff_tmp37);
                  byte_range_80_b4 = simd_andc(byte_range_80_bf, r1000_1fff_tmp38);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(26), r1000_1fff_tmp39));
                  sequence_e1_be_byte_range_80_b4 = simd_and(r1000_1fff_tmp39, byte_range_80_b4);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, sequence_e1_be_byte_range_80_b4);
                  r1000_1fff_tmp40 = simd_and(r1000_1fff_tmp14, tmp1);
                  byte_bf = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp40);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  r1000_1fff_tmp41 = simd_not(tmp6);
                  r1000_1fff_tmp42 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp41), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_82_84 = simd_and(r1000_1fff_tmp32, r1000_1fff_tmp42);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(27), r1000_1fff_tmp43));
                  sequence_e1_bf_byte_range_82_84 = simd_and(r1000_1fff_tmp43, byte_range_82_84);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, sequence_e1_bf_byte_range_82_84);
                }
                else {
                  carryQ.CarryDequeueEnqueue(19, 9);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(19, 9);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp5);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(28, 13))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp5);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(28, 13))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, tmp5);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(28), r2000_2fff_tmp5));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp5, byte_81);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp6);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp9 = simd_and(r2000_2fff_tmp8, tmp1);
                  r2000_2fff_tmp10 = simd_or(r2000_2fff_tmp4, r2000_2fff_tmp9);
                  cc_range_2071_207f_3 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp10);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(29), sequence_e2_81_adv));
                  r2000_2fff_tmp11 = simd_and(sequence_e2_81_adv, cc_range_2071_207f_3);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r2000_2fff_tmp11);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp13 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp12);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_5, tmp6);
                  r2000_2fff_tmp15 = simd_and(basis_bits.bit_4, r2000_2fff_tmp14);
                  byte_range_90_9c = simd_andc(r2000_2fff_tmp13, r2000_2fff_tmp15);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(30), sequence_e2_82_adv));
                  r2000_2fff_tmp16 = simd_and(sequence_e2_82_adv, byte_range_90_9c);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r2000_2fff_tmp16);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp2);
                  sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
                  r2000_2fff_tmp17 = simd_and(r800_ffff_tmp1, tmp1);
                  r2000_2fff_tmp18 = simd_or(r2000_4dff_tmp2, r2000_2fff_tmp17);
                  r2000_2fff_tmp19 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp18);
                  r2000_2fff_tmp20 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp21 = simd_not(tmp5);
                  r2000_2fff_tmp22 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp23 = simd_and(basis_bits.bit_4, r2000_2fff_tmp22);
                  r2000_2fff_tmp24 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp21), simd_andc(r2000_2fff_tmp23, basis_bits.bit_3));
                  r2000_2fff_tmp25 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp24);
                  r2000_2fff_tmp26 = simd_or(r2000_2fff_tmp19, r2000_2fff_tmp25);
                  r2000_2fff_tmp27 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp3);
                  r2000_2fff_tmp28 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp27);
                  r2000_2fff_tmp29 = simd_or(r2000_2fff_tmp26, r2000_2fff_tmp28);
                  r2000_2fff_tmp30 = simd_and(r2000_2fff_tmp13, basis_bits.bit_4);
                  r2000_2fff_tmp31 = simd_not(basis_bits.bit_6);
                  r2000_2fff_tmp32 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp31), simd_andc(tmp6, basis_bits.bit_5));
                  r2000_2fff_tmp33 = simd_and(r2000_2fff_tmp30, r2000_2fff_tmp32);
                  r2000_2fff_tmp34 = simd_or(r2000_2fff_tmp29, r2000_2fff_tmp33);
                  r2000_2fff_tmp35 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r2000_2fff_tmp36 = simd_and(r2000_2fff_tmp35, r800_ffff_tmp2);
                  r2000_2fff_tmp37 = simd_or(r2000_2fff_tmp34, r2000_2fff_tmp36);
                  r2000_2fff_tmp38 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  r2000_2fff_tmp39 = simd_and(r2000_2fff_tmp35, r2000_2fff_tmp38);
                  r2000_2fff_tmp40 = simd_or(r2000_2fff_tmp37, r2000_2fff_tmp39);
                  r2000_2fff_tmp41 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp42 = simd_andc(r2000_2fff_tmp41, tmp6);
                  r2000_2fff_tmp43 = simd_and(r2000_2fff_tmp35, r2000_2fff_tmp42);
                  r2000_2fff_tmp44 = simd_or(r2000_2fff_tmp40, r2000_2fff_tmp43);
                  r2000_2fff_tmp45 = simd_and(r2000_2fff_tmp35, basis_bits.bit_4);
                  r2000_2fff_tmp46 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp47 = simd_and(r2000_2fff_tmp45, r2000_2fff_tmp46);
                  r2000_2fff_tmp48 = simd_or(r2000_2fff_tmp44, r2000_2fff_tmp47);
                  r2000_2fff_tmp49 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp50 = simd_or(basis_bits.bit_4, r2000_2fff_tmp14);
                  r2000_2fff_tmp51 = simd_not(r2000_2fff_tmp50);
                  r2000_2fff_tmp52 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp51), simd_andc(r2000_2fff_tmp9, basis_bits.bit_3));
                  r2000_2fff_tmp53 = simd_and(r2000_2fff_tmp49, r2000_2fff_tmp52);
                  r2000_2fff_tmp54 = simd_or(r2000_2fff_tmp48, r2000_2fff_tmp53);
                  r2000_2fff_tmp55 = simd_and(r2000_2fff_tmp41, r2000_2fff_tmp3);
                  r2000_2fff_tmp56 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp55);
                  r2000_2fff_tmp57 = simd_or(r2000_2fff_tmp54, r2000_2fff_tmp56);
                  r2000_2fff_tmp58 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp8);
                  cc_range_2102_213c_3 = simd_or(r2000_2fff_tmp57, r2000_2fff_tmp58);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(31), sequence_e2_84_adv));
                  r2000_2fff_tmp59 = simd_and(sequence_e2_84_adv, cc_range_2102_213c_3);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r2000_2fff_tmp59);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp27);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp60 = simd_not(r2000_2fff_tmp22);
                  r2000_2fff_tmp61 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp60), simd_andc(r2000_2fff_tmp14, basis_bits.bit_4));
                  r2000_2fff_tmp62 = simd_and(r2000_2fff_tmp8, r2000_4dff_tmp1);
                  r2000_2fff_tmp63 = simd_or(r2000_2fff_tmp61, r2000_2fff_tmp62);
                  r2000_2fff_tmp64 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp63);
                  cc_range_2145_2160_3 = simd_or(r2000_2fff_tmp64, r2000_2fff_tmp49);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(32), sequence_e2_85_adv));
                  r2000_2fff_tmp65 = simd_and(sequence_e2_85_adv, cc_range_2145_2160_3);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r2000_2fff_tmp65);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp38);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp66 = simd_andc(r2000_2fff_tmp2, basis_bits.bit_4);
                  r2000_2fff_tmp67 = simd_not(tmp6);
                  r2000_2fff_tmp68 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp67), simd_andc(tmp1, basis_bits.bit_5));
                  byte_range_83_84 = simd_and(r2000_2fff_tmp66, r2000_2fff_tmp68);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(33), sequence_e2_86_adv));
                  r2000_2fff_tmp69 = simd_and(sequence_e2_86_adv, byte_range_83_84);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r2000_2fff_tmp69);
                  byte_92 = simd_and(r2000_2fff_tmp13, r2000_4dff_tmp2);
                  sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
                  r2000_2fff_tmp70 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp71 = simd_or(basis_bits.bit_4, r2000_2fff_tmp70);
                  byte_range_b6_bf = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp71);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_92, carryQ.get_carry_in(34), sequence_e2_92_adv));
                  r2000_2fff_tmp72 = simd_and(sequence_e2_92_adv, byte_range_b6_bf);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r2000_2fff_tmp72);
                  r2000_2fff_tmp73 = simd_andc(tmp1, tmp5);
                  byte_93 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp73);
                  sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
                  r2000_2fff_tmp74 = simd_or(basis_bits.bit_3, r2000_2fff_tmp23);
                  r2000_2fff_tmp75 = simd_and(basis_bits.bit_2, r2000_2fff_tmp74);
                  byte_range_80_a9 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp75);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(35), sequence_e2_93_adv));
                  r2000_2fff_tmp76 = simd_and(sequence_e2_93_adv, byte_range_80_a9);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r2000_2fff_tmp76);
                  byte_b0 = simd_andc(r2000_2fff_tmp7, tmp7);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  r2000_2fff_tmp77 = simd_or(basis_bits.bit_3, r2000_2fff_tmp9);
                  r2000_2fff_tmp78 = simd_and(basis_bits.bit_2, r2000_2fff_tmp77);
                  r2000_2fff_tmp79 = simd_andc(r2000_2fff_tmp78, r2000_2fff_tmp6);
                  cc_range_2c00_2c30_3 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp79);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(36), sequence_e2_b0_adv));
                  r2000_2fff_tmp80 = simd_and(sequence_e2_b0_adv, cc_range_2c00_2c30_3);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r2000_2fff_tmp80);
                  byte_b1 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp4);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp81 = simd_and(basis_bits.bit_3, r2000_2fff_tmp9);
                  r2000_2fff_tmp82 = simd_andc(r2000_2fff_tmp20, r2000_2fff_tmp81);
                  cc_range_2c40_2c60_3 = simd_or(r2000_2fff_tmp82, r2000_2fff_tmp49);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(37), sequence_e2_b1_adv));
                  r2000_2fff_tmp83 = simd_and(sequence_e2_b1_adv, cc_range_2c40_2c60_3);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r2000_2fff_tmp83);
                  byte_b2 = simd_and(r2000_2fff_tmp7, r2000_4dff_tmp2);
                  sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(38), sequence_e2_b2_adv));
                  r2000_2fff_tmp84 = simd_and(sequence_e2_b2_adv, byte_range_80_bf);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r2000_2fff_tmp84);
                  r2000_2fff_tmp85 = simd_and(byte_range_80_bf, r2000_2fff_tmp6);
                  byte_b3 = simd_and(r2000_2fff_tmp85, r2000_2fff_tmp73);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp86 = simd_or(basis_bits.bit_3, r2000_2fff_tmp50);
                  r2000_2fff_tmp87 = simd_and(basis_bits.bit_2, r2000_2fff_tmp86);
                  r2000_2fff_tmp88 = simd_andc(byte_range_80_bf, r2000_2fff_tmp87);
                  r2000_2fff_tmp89 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r2000_2fff_tmp90 = simd_and(r2000_2fff_tmp89, basis_bits.bit_4);
                  r2000_2fff_tmp91 = simd_xor(basis_bits.bit_5, tmp1);
                  r2000_2fff_tmp92 = simd_and(r2000_2fff_tmp90, r2000_2fff_tmp91);
                  r2000_2fff_tmp93 = simd_or(r2000_2fff_tmp88, r2000_2fff_tmp92);
                  r2000_2fff_tmp94 = simd_and(r2000_2fff_tmp85, r800_4dff_tmp2);
                  cc_range_2cc0_2cf2_3 = simd_or(r2000_2fff_tmp93, r2000_2fff_tmp94);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(39), sequence_e2_b3_adv));
                  r2000_2fff_tmp95 = simd_and(sequence_e2_b3_adv, cc_range_2cc0_2cf2_3);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r2000_2fff_tmp95);
                  byte_b4 = simd_and(r2000_2fff_tmp85, r800_ffff_tmp2);
                  sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
                  r2000_2fff_tmp96 = simd_or(basis_bits.bit_3, r2000_2fff_tmp71);
                  r2000_2fff_tmp97 = simd_and(basis_bits.bit_2, r2000_2fff_tmp96);
                  r2000_2fff_tmp98 = simd_andc(byte_range_80_bf, r2000_2fff_tmp97);
                  r2000_2fff_tmp99 = simd_and(r2000_2fff_tmp89, r2000_2fff_tmp17);
                  r2000_2fff_tmp100 = simd_or(r2000_2fff_tmp98, r2000_2fff_tmp99);
                  r2000_2fff_tmp101 = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp3);
                  r2000_2fff_tmp102 = simd_and(r2000_2fff_tmp89, r2000_2fff_tmp101);
                  cc_range_2d00_2d2d_3 = simd_or(r2000_2fff_tmp100, r2000_2fff_tmp102);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(40), sequence_e2_b4_adv));
                  r2000_2fff_tmp103 = simd_and(sequence_e2_b4_adv, cc_range_2d00_2d2d_3);
                  struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r2000_2fff_tmp103);
                }
                else {
                  carryQ.CarryDequeueEnqueue(28, 13);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(28, 13);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(19, 22);
            }
            r800_ffff_tmp9 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp9, r800_ffff_tmp10);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(41, 13))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_99 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[41] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(41), ra000_ffff_tmp8));
              sequence_ea_99 = simd_and(ra000_ffff_tmp8, byte_99);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp9, basis_bits.bit_6);
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_3, ra000_ffff_tmp10);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_2, ra000_ffff_tmp11);
              byte_range_80_ad = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp12);
              carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(42), sequence_ea_99_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ea_99_adv, byte_range_80_ad);
              struct_cased_Y.cc = simd_or(struct_cased_Y.cc, ra000_ffff_tmp13);
              byte_9a = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp14 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp15 = simd_and(basis_bits.bit_3, ra000_ffff_tmp10);
              byte_range_80_9d = simd_andc(ra000_ffff_tmp14, ra000_ffff_tmp15);
              carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(43), sequence_ea_9a_adv));
              ra000_ffff_tmp16 = simd_and(sequence_ea_9a_adv, byte_range_80_9d);
              struct_cased_Y.cc = simd_or(struct_cased_Y.cc, ra000_ffff_tmp16);
              ra000_ffff_tmp17 = simd_andc(ra000_ffff_tmp9, tmp6);
              byte_9c = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp17);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              ra000_ffff_tmp18 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp19 = simd_or(tmp5, basis_bits.bit_6);
              ra000_ffff_tmp20 = simd_or(basis_bits.bit_3, ra000_ffff_tmp19);
              byte_range_a2_bf = simd_and(ra000_ffff_tmp18, ra000_ffff_tmp20);
              carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(44), sequence_ea_9c_adv));
              ra000_ffff_tmp21 = simd_and(sequence_ea_9c_adv, byte_range_a2_bf);
              struct_cased_Y.cc = simd_or(struct_cased_Y.cc, ra000_ffff_tmp21);
              ra000_ffff_tmp22 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp6);
              byte_9d = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp22);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              byte_range_80_bf = r800_ffff_tmp3;
              carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(45), sequence_ea_9d_adv));
              ra000_ffff_tmp23 = simd_and(sequence_ea_9d_adv, byte_range_80_bf);
              struct_cased_Y.cc = simd_or(struct_cased_Y.cc, ra000_ffff_tmp23);
              ra000_ffff_tmp24 = simd_and(byte_range_80_bf, ra000_ffff_tmp4);
              ra000_ffff_tmp25 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp24, ra000_ffff_tmp25);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp26 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp27 = simd_andc(byte_range_80_bf, ra000_ffff_tmp26);
              ra000_ffff_tmp28 = simd_andc(ra000_ffff_tmp27, basis_bits.bit_4);
              ra000_ffff_tmp29 = simd_and(ra000_ffff_tmp27, basis_bits.bit_4);
              ra000_ffff_tmp30 = simd_xor(basis_bits.bit_5, tmp1);
              ra000_ffff_tmp31 = simd_and(ra000_ffff_tmp29, ra000_ffff_tmp30);
              ra000_ffff_tmp32 = simd_or(ra000_ffff_tmp28, ra000_ffff_tmp31);
              ra000_ffff_tmp33 = simd_not(ra000_ffff_tmp11);
              ra000_ffff_tmp34 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp33), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
              ra000_ffff_tmp35 = simd_and(byte_range_80_bf, ra000_ffff_tmp34);
              ra000_ffff_tmp36 = simd_or(ra000_ffff_tmp32, ra000_ffff_tmp35);
              ra000_ffff_tmp37 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp38 = simd_and(byte_range_80_bf, ra000_ffff_tmp37);
              ra000_ffff_tmp39 = simd_andc(ra000_ffff_tmp38, ra000_ffff_tmp19);
              cc_range_a780_a7b0_3 = simd_or(ra000_ffff_tmp36, ra000_ffff_tmp39);
              carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(46), sequence_ea_9e_adv));
              ra000_ffff_tmp40 = simd_and(sequence_ea_9e_adv, cc_range_a780_a7b0_3);
              struct_cased_Y.cc = simd_or(struct_cased_Y.cc, ra000_ffff_tmp40);
              ra000_ffff_tmp41 = simd_and(ra000_ffff_tmp9, tmp1);
              byte_9f = simd_and(ra000_ffff_tmp24, ra000_ffff_tmp41);
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              ra000_ffff_tmp42 = simd_and(ra000_ffff_tmp38, ra000_ffff_tmp1);
              byte_range_b8_ba = simd_andc(ra000_ffff_tmp42, tmp1);
              carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(47), sequence_ea_9f_adv));
              ra000_ffff_tmp43 = simd_and(sequence_ea_9f_adv, byte_range_b8_ba);
              struct_cased_Y.cc = simd_or(struct_cased_Y.cc, ra000_ffff_tmp43);
              ra000_ffff_tmp44 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              byte_ac = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp17);
              sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
              byte_range_b0_bf = ra000_ffff_tmp38;
              carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(48), sequence_ea_ac_adv));
              ra000_ffff_tmp45 = simd_and(sequence_ea_ac_adv, byte_range_b0_bf);
              struct_cased_Y.cc = simd_or(struct_cased_Y.cc, ra000_ffff_tmp45);
              byte_ad = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp22);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              ra000_ffff_tmp46 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              ra000_ffff_tmp47 = simd_and(basis_bits.bit_3, tmp3);
              ra000_ffff_tmp48 = simd_andc(ra000_ffff_tmp46, ra000_ffff_tmp47);
              ra000_ffff_tmp49 = simd_and(ra000_ffff_tmp24, ra000_ffff_tmp9);
              ra000_ffff_tmp50 = simd_or(ra000_ffff_tmp48, ra000_ffff_tmp49);
              ra000_ffff_tmp51 = simd_andc(r800_ffff_tmp1, basis_bits.bit_6);
              ra000_ffff_tmp52 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp51);
              cc_range_ab40_ab64_3 = simd_or(ra000_ffff_tmp50, ra000_ffff_tmp52);
              carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(49), sequence_ea_ad_adv));
              ra000_ffff_tmp53 = simd_and(sequence_ea_ad_adv, cc_range_ab40_ab64_3);
              struct_cased_Y.cc = simd_or(struct_cased_Y.cc, ra000_ffff_tmp53);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp41);
              carryQ.cq[50] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(50), ra000_ffff_tmp54));
              sequence_ef_ac = simd_and(ra000_ffff_tmp54, byte_ac);
              byte_ef_adv = ra000_ffff_tmp54;
              ra000_ffff_tmp55 = simd_and(basis_bits.bit_5, tmp1);
              ra000_ffff_tmp56 = simd_andc(ra000_ffff_tmp28, ra000_ffff_tmp55);
              ra000_ffff_tmp57 = simd_andc(ra000_ffff_tmp24, basis_bits.bit_4);
              ra000_ffff_tmp58 = simd_and(ra000_ffff_tmp57, tmp2);
              cc_range_fb00_fb13_3 = simd_or(ra000_ffff_tmp56, ra000_ffff_tmp58);
              carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(51), sequence_ef_ac_adv));
              ra000_ffff_tmp59 = simd_and(sequence_ef_ac_adv, cc_range_fb00_fb13_3);
              struct_cased_Y.cc = simd_or(struct_cased_Y.cc, ra000_ffff_tmp59);
              byte_bc = simd_and(byte_range_b0_bf, ra000_ffff_tmp17);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp60 = simd_and(byte_range_80_bf, basis_bits.bit_2);
              byte_range_a1_ba = simd_and(ra000_ffff_tmp60, tmp8);
              carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(52), sequence_ef_bc_adv));
              ra000_ffff_tmp61 = simd_and(sequence_ef_bc_adv, byte_range_a1_ba);
              struct_cased_Y.cc = simd_or(struct_cased_Y.cc, ra000_ffff_tmp61);
              byte_bd = simd_and(byte_range_b0_bf, ra000_ffff_tmp22);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_range_81_9a = simd_and(ra000_ffff_tmp46, tmp8);
              carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(53), sequence_ef_bd_adv));
              ra000_ffff_tmp62 = simd_and(sequence_ef_bd_adv, byte_range_81_9a);
              struct_cased_Y.cc = simd_or(struct_cased_Y.cc, ra000_ffff_tmp62);
            }
            else {
              carryQ.CarryDequeueEnqueue(41, 13);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(18, 36);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(54, 25))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp7);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp3 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_90 = simd_andc(r10000_10ffff_tmp3, tmp7);
            carryQ.cq[54] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(54), r10000_10ffff_tmp4));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp4, byte_90);
            byte_f0_adv = r10000_10ffff_tmp4;
            carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(55), r10000_10ffff_tmp5));
            sequence_f0_90_90 = simd_and(r10000_10ffff_tmp5, byte_90);
            sequence_f0_90_adv = r10000_10ffff_tmp5;
            byte_range_80_bf = r10000_10ffff_tmp1;
            carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_f0_90_90, carryQ.get_carry_in(56), sequence_f0_90_90_adv));
            r10000_10ffff_tmp6 = simd_and(sequence_f0_90_90_adv, byte_range_80_bf);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r10000_10ffff_tmp6);
            r10000_10ffff_tmp7 = simd_and(byte_range_80_bf, r10000_10ffff_tmp2);
            r10000_10ffff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp8, tmp5);
            byte_91 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp9);
            sequence_f0_90_91 = simd_and(sequence_f0_90_adv, byte_91);
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_80_8f = simd_andc(byte_range_80_bf, r10000_10ffff_tmp10);
            carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_f0_90_91, carryQ.get_carry_in(57), sequence_f0_90_91_adv));
            r10000_10ffff_tmp11 = simd_and(sequence_f0_90_91_adv, byte_range_80_8f);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r10000_10ffff_tmp11);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            r10000_10ffff_tmp12 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp13 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp14 = simd_andc(r10000_10ffff_tmp13, tmp5);
            byte_a2 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp14);
            carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(58), r10000_10ffff_tmp15));
            sequence_f0_91_a2 = simd_and(r10000_10ffff_tmp15, byte_a2);
            sequence_f0_91_adv = r10000_10ffff_tmp15;
            byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(59), sequence_f0_91_a2_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_91_a2_adv, byte_range_a0_bf);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_andc(tmp1, tmp5);
            byte_a3 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp17);
            sequence_f0_91_a3 = simd_and(sequence_f0_91_adv, byte_a3);
            byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(60), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp18 = simd_and(sequence_f0_91_a3_adv, byte_range_80_9f);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r10000_10ffff_tmp18);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp20 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp8);
            byte_9d = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp20);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(61), r10000_10ffff_tmp21));
            sequence_f0_9d_90 = simd_and(r10000_10ffff_tmp21, byte_90);
            sequence_f0_9d_adv = r10000_10ffff_tmp21;
            carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(62), sequence_f0_9d_90_adv));
            r10000_10ffff_tmp22 = simd_and(sequence_f0_9d_90_adv, byte_range_80_bf);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r10000_10ffff_tmp22);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            r10000_10ffff_tmp23 = simd_and(basis_bits.bit_5, tmp6);
            r10000_10ffff_tmp24 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp24);
            r10000_10ffff_tmp26 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp25);
            r10000_10ffff_tmp27 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp28 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp27);
            r10000_10ffff_tmp29 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp28);
            r10000_10ffff_tmp30 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp29);
            r10000_10ffff_tmp31 = simd_and(byte_range_80_bf, r10000_10ffff_tmp30);
            cc_range_1d440_1d456_4 = simd_or(r10000_10ffff_tmp26, r10000_10ffff_tmp31);
            carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(63), sequence_f0_9d_91_adv));
            r10000_10ffff_tmp32 = simd_and(sequence_f0_9d_91_adv, cc_range_1d440_1d456_4);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r10000_10ffff_tmp32);
            byte_92 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp14);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            r10000_10ffff_tmp33 = simd_and(r10000_10ffff_tmp19, tmp6);
            r10000_10ffff_tmp34 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp33);
            r10000_10ffff_tmp35 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp34);
            r10000_10ffff_tmp36 = simd_and(r10000_10ffff_tmp19, basis_bits.bit_6);
            r10000_10ffff_tmp37 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp36);
            r10000_10ffff_tmp38 = simd_or(r10000_10ffff_tmp35, r10000_10ffff_tmp37);
            r10000_10ffff_tmp39 = simd_or(r10000_10ffff_tmp38, byte_a2);
            r10000_10ffff_tmp40 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp41 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp40);
            r10000_10ffff_tmp42 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp43 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp42);
            r10000_10ffff_tmp44 = simd_or(r10000_10ffff_tmp39, r10000_10ffff_tmp43);
            r10000_10ffff_tmp45 = simd_and(r10000_10ffff_tmp12, basis_bits.bit_4);
            r10000_10ffff_tmp46 = simd_xor(basis_bits.bit_5, tmp6);
            r10000_10ffff_tmp47 = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp46);
            r10000_10ffff_tmp48 = simd_or(r10000_10ffff_tmp44, r10000_10ffff_tmp47);
            r10000_10ffff_tmp49 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp50 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp49);
            r10000_10ffff_tmp51 = simd_not(r10000_10ffff_tmp50);
            r10000_10ffff_tmp52 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp51), simd_andc(r10000_10ffff_tmp36, basis_bits.bit_3));
            r10000_10ffff_tmp53 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp52);
            r10000_10ffff_tmp54 = simd_or(r10000_10ffff_tmp48, r10000_10ffff_tmp53);
            r10000_10ffff_tmp55 = simd_and(byte_range_80_bf, r80_10ffff_tmp2);
            r10000_10ffff_tmp56 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp57 = simd_and(r10000_10ffff_tmp56, tmp1);
            r10000_10ffff_tmp58 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp57);
            r10000_10ffff_tmp59 = simd_or(r10000_10ffff_tmp54, r10000_10ffff_tmp58);
            r10000_10ffff_tmp60 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp19);
            r10000_10ffff_tmp61 = simd_and(r10000_10ffff_tmp60, tmp6);
            cc_range_1d480_1d4bd_4 = simd_or(r10000_10ffff_tmp59, r10000_10ffff_tmp61);
            carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(64), sequence_f0_9d_92_adv));
            r10000_10ffff_tmp62 = simd_and(sequence_f0_9d_92_adv, cc_range_1d480_1d4bd_4);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r10000_10ffff_tmp62);
            byte_93 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp17);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            r10000_10ffff_tmp63 = simd_andc(byte_range_80_8f, tmp5);
            r10000_10ffff_tmp64 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp24);
            r10000_10ffff_tmp65 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp64);
            r10000_10ffff_tmp66 = simd_and(byte_range_80_bf, r10000_10ffff_tmp65);
            cc_range_1d4c0_1d4c5_4 = simd_or(r10000_10ffff_tmp63, r10000_10ffff_tmp66);
            carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(65), sequence_f0_9d_93_adv));
            r10000_10ffff_tmp67 = simd_and(sequence_f0_9d_93_adv, cc_range_1d4c0_1d4c5_4);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r10000_10ffff_tmp67);
            r10000_10ffff_tmp68 = simd_andc(r10000_10ffff_tmp40, tmp6);
            byte_94 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp68);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            r10000_10ffff_tmp69 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
            r10000_10ffff_tmp70 = simd_andc(r10000_10ffff_tmp69, r10000_10ffff_tmp27);
            r10000_10ffff_tmp71 = simd_not(tmp2);
            r10000_10ffff_tmp72 = simd_and(basis_bits.bit_5, tmp1);
            r10000_10ffff_tmp73 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp71), simd_andc(r10000_10ffff_tmp72, basis_bits.bit_4));
            r10000_10ffff_tmp74 = simd_and(byte_range_80_8f, r10000_10ffff_tmp73);
            r10000_10ffff_tmp75 = simd_or(r10000_10ffff_tmp70, r10000_10ffff_tmp74);
            r10000_10ffff_tmp76 = simd_not(r10000_10ffff_tmp24);
            r10000_10ffff_tmp77 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp76), simd_andc(r10000_10ffff_tmp33, basis_bits.bit_3));
            r10000_10ffff_tmp78 = simd_and(byte_range_80_9f, r10000_10ffff_tmp77);
            r10000_10ffff_tmp79 = simd_or(r10000_10ffff_tmp75, r10000_10ffff_tmp78);
            r10000_10ffff_tmp80 = simd_not(r10000_10ffff_tmp23);
            r10000_10ffff_tmp81 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp80), simd_andc(r10000_10ffff_tmp27, basis_bits.bit_4));
            r10000_10ffff_tmp82 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp81);
            r10000_10ffff_tmp83 = simd_or(r10000_10ffff_tmp79, r10000_10ffff_tmp82);
            r10000_10ffff_tmp84 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp50);
            r10000_10ffff_tmp85 = simd_not(r10000_10ffff_tmp84);
            r10000_10ffff_tmp86 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp36);
            r10000_10ffff_tmp87 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp85), simd_andc(r10000_10ffff_tmp86, basis_bits.bit_2));
            r10000_10ffff_tmp88 = simd_and(byte_range_80_bf, r10000_10ffff_tmp87);
            r10000_10ffff_tmp89 = simd_or(r10000_10ffff_tmp83, r10000_10ffff_tmp88);
            r10000_10ffff_tmp90 = simd_and(r10000_10ffff_tmp55, basis_bits.bit_4);
            r10000_10ffff_tmp91 = simd_xor(basis_bits.bit_5, tmp1);
            r10000_10ffff_tmp92 = simd_and(r10000_10ffff_tmp90, r10000_10ffff_tmp91);
            cc_range_1d500_1d53b_4 = simd_or(r10000_10ffff_tmp89, r10000_10ffff_tmp92);
            carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(66), sequence_f0_9d_94_adv));
            r10000_10ffff_tmp93 = simd_and(sequence_f0_9d_94_adv, cc_range_1d500_1d53b_4);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r10000_10ffff_tmp93);
            r10000_10ffff_tmp94 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp8);
            byte_95 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp94);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            r10000_10ffff_tmp95 = simd_andc(r10000_10ffff_tmp69, r10000_10ffff_tmp23);
            r10000_10ffff_tmp96 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp13);
            r10000_10ffff_tmp97 = simd_and(byte_range_80_8f, r10000_10ffff_tmp96);
            r10000_10ffff_tmp98 = simd_or(r10000_10ffff_tmp95, r10000_10ffff_tmp97);
            r10000_10ffff_tmp99 = simd_not(tmp7);
            r10000_10ffff_tmp100 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp99), simd_andc(r10000_10ffff_tmp50, basis_bits.bit_3));
            r10000_10ffff_tmp101 = simd_and(byte_range_80_9f, r10000_10ffff_tmp100);
            r10000_10ffff_tmp102 = simd_or(r10000_10ffff_tmp98, r10000_10ffff_tmp101);
            r10000_10ffff_tmp103 = simd_or(tmp5, basis_bits.bit_6);
            r10000_10ffff_tmp104 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp103);
            r10000_10ffff_tmp105 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp104);
            r10000_10ffff_tmp106 = simd_and(byte_range_80_bf, r10000_10ffff_tmp105);
            cc_range_1d540_1d552_4 = simd_or(r10000_10ffff_tmp102, r10000_10ffff_tmp106);
            carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(67), sequence_f0_9d_95_adv));
            r10000_10ffff_tmp107 = simd_and(sequence_f0_9d_95_adv, cc_range_1d540_1d552_4);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r10000_10ffff_tmp107);
            r10000_10ffff_tmp108 = simd_not(r10000_10ffff_tmp49);
            r10000_10ffff_tmp109 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp108), simd_andc(r10000_10ffff_tmp27, basis_bits.bit_4));
            byte_range_96_99 = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp109);
            sequence_f0_9d_byte_range_96_99 = simd_and(sequence_f0_9d_adv, byte_range_96_99);
            carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_96_99, carryQ.get_carry_in(68), r10000_10ffff_tmp110));
            sequence_f0_9d_byte_range_96_99_sfx = simd_and(r10000_10ffff_tmp110, byte_range_80_bf);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, sequence_f0_9d_byte_range_96_99_sfx);
            r10000_10ffff_tmp111 = simd_and(r10000_10ffff_tmp56, r10000_10ffff_tmp13);
            byte_9a = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp111);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            r10000_10ffff_tmp112 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp28);
            r10000_10ffff_tmp113 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp112);
            byte_range_80_a5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp113);
            carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(69), r10000_10ffff_tmp114));
            sequence_f0_9d_9a_byte_range_80_a5 = simd_and(r10000_10ffff_tmp114, byte_range_80_a5);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, sequence_f0_9d_9a_byte_range_80_a5);
            byte_9b = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp57);
            sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
            byte_80 = simd_andc(byte_range_80_8f, tmp7);
            carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(70), r10000_10ffff_tmp115));
            sequence_f0_9d_9b_80 = simd_and(r10000_10ffff_tmp115, byte_80);
            r10000_10ffff_tmp116 = simd_andc(r10000_10ffff_tmp19, tmp6);
            byte_9c = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp116);
            sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
            byte_range_80_94 = r10000_10ffff_tmp26;
            carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(71), r10000_10ffff_tmp117));
            sequence_f0_9d_9c_byte_range_80_94 = simd_and(r10000_10ffff_tmp117, byte_range_80_94);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, sequence_f0_9d_9c_byte_range_80_94);
            sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
            r10000_10ffff_tmp118 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp72);
            byte_range_80_8e = simd_andc(byte_range_80_8f, r10000_10ffff_tmp118);
            carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(72), r10000_10ffff_tmp119));
            sequence_f0_9d_9d_byte_range_80_8e = simd_and(r10000_10ffff_tmp119, byte_range_80_8e);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, sequence_f0_9d_9d_byte_range_80_8e);
            r10000_10ffff_tmp120 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp13);
            byte_9e = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp120);
            sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
            r10000_10ffff_tmp121 = simd_or(basis_bits.bit_5, tmp6);
            r10000_10ffff_tmp122 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp121);
            byte_range_80_88 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp122);
            carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(73), r10000_10ffff_tmp123));
            sequence_f0_9d_9e_byte_range_80_88 = simd_and(r10000_10ffff_tmp123, byte_range_80_88);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, sequence_f0_9d_9e_byte_range_80_88);
            r10000_10ffff_tmp124 = simd_and(r10000_10ffff_tmp19, tmp1);
            byte_9f = simd_and(r10000_10ffff_tmp7, r10000_10ffff_tmp124);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            byte_range_80_82 = simd_andc(r10000_10ffff_tmp63, tmp1);
            carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(74), r10000_10ffff_tmp125));
            sequence_f0_9d_9f_byte_range_80_82 = simd_and(r10000_10ffff_tmp125, byte_range_80_82);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, sequence_f0_9d_9f_byte_range_80_82);
            sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
            byte_84 = simd_and(byte_range_80_8f, r10000_10ffff_tmp68);
            carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(75), r10000_10ffff_tmp126));
            sequence_f0_9f_84 = simd_and(r10000_10ffff_tmp126, byte_84);
            sequence_f0_9f_adv = r10000_10ffff_tmp126;
            byte_range_b0_bf = r10000_10ffff_tmp55;
            carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_84, carryQ.get_carry_in(76), sequence_f0_9f_84_adv));
            r10000_10ffff_tmp127 = simd_and(sequence_f0_9f_84_adv, byte_range_b0_bf);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r10000_10ffff_tmp127);
            byte_85 = simd_and(byte_range_80_8f, r10000_10ffff_tmp94);
            sequence_f0_9f_85 = simd_and(sequence_f0_9f_adv, byte_85);
            r10000_10ffff_tmp128 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp50);
            r10000_10ffff_tmp129 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp50);
            r10000_10ffff_tmp130 = simd_not(r10000_10ffff_tmp129);
            r10000_10ffff_tmp131 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp130), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp132 = simd_and(byte_range_80_bf, r10000_10ffff_tmp131);
            r10000_10ffff_tmp133 = simd_or(r10000_10ffff_tmp128, r10000_10ffff_tmp132);
            cc_range_1f140_1f170_4 = simd_or(r10000_10ffff_tmp133, byte_range_b0_bf);
            carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_85, carryQ.get_carry_in(77), sequence_f0_9f_85_adv));
            r10000_10ffff_tmp134 = simd_and(sequence_f0_9f_85_adv, cc_range_1f140_1f170_4);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r10000_10ffff_tmp134);
            byte_86 = r10000_10ffff_tmp97;
            sequence_f0_9f_86 = simd_and(sequence_f0_9f_adv, byte_86);
            byte_range_80_89 = r10000_10ffff_tmp128;
            carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_86, carryQ.get_carry_in(78), sequence_f0_9f_86_adv));
            r10000_10ffff_tmp135 = simd_and(sequence_f0_9f_86_adv, byte_range_80_89);
            struct_cased_Y.cc = simd_or(struct_cased_Y.cc, r10000_10ffff_tmp135);
          }
          else {
            carryQ.CarryDequeueEnqueue(54, 25);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 79);
        }
        carryQ.CarryQ_Adjust(79);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<79, 0> carryQ;
  };

  struct Property_cwt_Y {
  Property_cwt_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_cwt_Y & struct_cwt_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10;
		BitBlock byte_range_61_7a, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, byte_c2, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock byte_b5, byte_c2_adv, r80_7ff_tmp11, r80_7ff_tmp12, byte_c3;
		BitBlock r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16;
		BitBlock r80_7ff_tmp17, r80_7ff_tmp18, r80_7ff_tmp19, r80_7ff_tmp20;
		BitBlock r80_7ff_tmp21, r80_7ff_tmp22, cc_range_df_f8_2, byte_c3_adv;
		BitBlock r80_7ff_tmp23, byte_range_c4_cf, r100_3ff_tmp1, byte_range_c4_cb;
		BitBlock r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3, byte_range_c4_c8;
		BitBlock r100_2ff_tmp4, r100_2ff_tmp5, byte_c9, byte_range_80_8f;
		BitBlock r100_2ff_tmp6, r100_2ff_tmp7, r100_2ff_tmp8, r100_24f_tmp1;
		BitBlock byte_range_c4_c5, r100_17f_tmp1, byte_c4, r100_17f_tmp2;
		BitBlock r100_17f_tmp3, r100_17f_tmp4, r100_17f_tmp5, r100_17f_tmp6;
		BitBlock r100_17f_tmp7, r100_17f_tmp8, r100_17f_tmp9, r100_17f_tmp10;
		BitBlock r100_17f_tmp11, r100_17f_tmp12, r100_17f_tmp13, r100_17f_tmp14;
		BitBlock r100_17f_tmp15, r100_17f_tmp16, r100_17f_tmp17, r100_17f_tmp18;
		BitBlock r100_17f_tmp19, r100_17f_tmp20, r100_17f_tmp21, r100_17f_tmp22;
		BitBlock r100_17f_tmp23, r100_17f_tmp24, r100_17f_tmp25, r100_17f_tmp26;
		BitBlock r100_17f_tmp27, r100_17f_tmp28, r100_17f_tmp29, r100_17f_tmp30;
		BitBlock r100_17f_tmp31, r100_17f_tmp32, r100_17f_tmp33, r100_17f_tmp34;
		BitBlock r100_17f_tmp35, r100_17f_tmp36, r100_17f_tmp37, r100_17f_tmp38;
		BitBlock r100_17f_tmp39, r100_17f_tmp40, r100_17f_tmp41, r100_17f_tmp42;
		BitBlock r100_17f_tmp43, r100_17f_tmp44, r100_17f_tmp45, r100_17f_tmp46;
		BitBlock r100_17f_tmp47, r100_17f_tmp48, r100_17f_tmp49, r100_17f_tmp50;
		BitBlock r100_17f_tmp51, r100_17f_tmp52, r100_17f_tmp53, r100_17f_tmp54;
		BitBlock r100_17f_tmp55, r100_17f_tmp56, r100_17f_tmp57, r100_17f_tmp58;
		BitBlock r100_17f_tmp59, r100_17f_tmp60, r100_17f_tmp61, r100_17f_tmp62;
		BitBlock r100_17f_tmp63, r100_17f_tmp64, cc_range_101_13e_2, byte_c4_adv;
		BitBlock r100_17f_tmp65, byte_c5, r100_17f_tmp66, r100_17f_tmp67;
		BitBlock r100_17f_tmp68, r100_17f_tmp69, r100_17f_tmp70, r100_17f_tmp71;
		BitBlock r100_17f_tmp72, r100_17f_tmp73, r100_17f_tmp74, r100_17f_tmp75;
		BitBlock r100_17f_tmp76, r100_17f_tmp77, r100_17f_tmp78, r100_17f_tmp79;
		BitBlock r100_17f_tmp80, r100_17f_tmp81, r100_17f_tmp82, r100_17f_tmp83;
		BitBlock r100_17f_tmp84, r100_17f_tmp85, r100_17f_tmp86, r100_17f_tmp87;
		BitBlock r100_17f_tmp88, r100_17f_tmp89, r100_17f_tmp90, r100_17f_tmp91;
		BitBlock r100_17f_tmp92, r100_17f_tmp93, r100_17f_tmp94, r100_17f_tmp95;
		BitBlock r100_17f_tmp96, r100_17f_tmp97, r100_17f_tmp98, r100_17f_tmp99;
		BitBlock cc_range_140_17e_2, byte_c5_adv, r100_17f_tmp100, r100_24f_tmp2;
		BitBlock r100_24f_tmp3, byte_range_c6_c8, r100_24f_tmp4, r180_24f_tmp1;
		BitBlock byte_c6, r180_24f_tmp2, r180_24f_tmp3, r180_24f_tmp4, r180_24f_tmp5;
		BitBlock r180_24f_tmp6, r180_24f_tmp7, r180_24f_tmp8, r180_24f_tmp9;
		BitBlock r180_24f_tmp10, r180_24f_tmp11, r180_24f_tmp12, r180_24f_tmp13;
		BitBlock r180_24f_tmp14, r180_24f_tmp15, r180_24f_tmp16, r180_24f_tmp17;
		BitBlock r180_24f_tmp18, r180_24f_tmp19, r180_24f_tmp20, r180_24f_tmp21;
		BitBlock r180_24f_tmp22, r180_24f_tmp23, r180_24f_tmp24, r180_24f_tmp25;
		BitBlock r180_24f_tmp26, r180_24f_tmp27, r180_24f_tmp28, r180_24f_tmp29;
		BitBlock r180_24f_tmp30, r180_24f_tmp31, r180_24f_tmp32, r180_24f_tmp33;
		BitBlock r180_24f_tmp34, r180_24f_tmp35, r180_24f_tmp36, r180_24f_tmp37;
		BitBlock r180_24f_tmp38, r180_24f_tmp39, r180_24f_tmp40, r180_24f_tmp41;
		BitBlock r180_24f_tmp42, r180_24f_tmp43, r180_24f_tmp44, r180_24f_tmp45;
		BitBlock r180_24f_tmp46, r180_24f_tmp47, cc_range_180_1bf_2, byte_c6_adv;
		BitBlock r180_24f_tmp48, r180_24f_tmp49, byte_c7, r180_24f_tmp50;
		BitBlock r180_24f_tmp51, r180_24f_tmp52, r180_24f_tmp53, r180_24f_tmp54;
		BitBlock r180_24f_tmp55, r180_24f_tmp56, r180_24f_tmp57, r180_24f_tmp58;
		BitBlock r180_24f_tmp59, r180_24f_tmp60, r180_24f_tmp61, r180_24f_tmp62;
		BitBlock r180_24f_tmp63, r180_24f_tmp64, r180_24f_tmp65, r180_24f_tmp66;
		BitBlock r180_24f_tmp67, r180_24f_tmp68, r180_24f_tmp69, r180_24f_tmp70;
		BitBlock r180_24f_tmp71, r180_24f_tmp72, r180_24f_tmp73, r180_24f_tmp74;
		BitBlock r180_24f_tmp75, r180_24f_tmp76, r180_24f_tmp77, r180_24f_tmp78;
		BitBlock r180_24f_tmp79, r180_24f_tmp80, r180_24f_tmp81, r180_24f_tmp82;
		BitBlock r180_24f_tmp83, r180_24f_tmp84, r180_24f_tmp85, r180_24f_tmp86;
		BitBlock r180_24f_tmp87, r180_24f_tmp88, r180_24f_tmp89, r180_24f_tmp90;
		BitBlock r180_24f_tmp91, r180_24f_tmp92, r180_24f_tmp93, r180_24f_tmp94;
		BitBlock r180_24f_tmp95, r180_24f_tmp96, r180_24f_tmp97, r180_24f_tmp98;
		BitBlock r180_24f_tmp99, r180_24f_tmp100, cc_range_1c4_1ff_2, byte_c7_adv;
		BitBlock r180_24f_tmp101, byte_c8, r180_24f_tmp102, r180_24f_tmp103;
		BitBlock r180_24f_tmp104, r180_24f_tmp105, r180_24f_tmp106, r180_24f_tmp107;
		BitBlock r180_24f_tmp108, r180_24f_tmp109, r180_24f_tmp110, r180_24f_tmp111;
		BitBlock r180_24f_tmp112, r180_24f_tmp113, r180_24f_tmp114, r180_24f_tmp115;
		BitBlock r180_24f_tmp116, r180_24f_tmp117, r180_24f_tmp118, r180_24f_tmp119;
		BitBlock r180_24f_tmp120, r180_24f_tmp121, r180_24f_tmp122, r180_24f_tmp123;
		BitBlock r180_24f_tmp124, r180_24f_tmp125, r180_24f_tmp126, r180_24f_tmp127;
		BitBlock r180_24f_tmp128, r180_24f_tmp129, r180_24f_tmp130, r180_24f_tmp131;
		BitBlock r180_24f_tmp132, r180_24f_tmp133, r180_24f_tmp134, r180_24f_tmp135;
		BitBlock r180_24f_tmp136, cc_range_201_23f_2, byte_c8_adv, r180_24f_tmp137;
		BitBlock r180_24f_tmp138, r180_24f_tmp139, r180_24f_tmp140, r180_24f_tmp141;
		BitBlock r180_24f_tmp142, r180_24f_tmp143, cc_range_240_24f_2, byte_c9_adv;
		BitBlock r180_24f_tmp144, byte_range_90_bf, r100_2ff_tmp9, r100_2ff_tmp10;
		BitBlock byte_ca, byte_range_80_af, r100_2ff_tmp11, r100_2ff_tmp12;
		BitBlock r100_2ff_tmp13, r250_2af_tmp1, r250_2af_tmp2, r250_2af_tmp3;
		BitBlock r250_2af_tmp4, r250_2af_tmp5, r250_2af_tmp6, r250_2af_tmp7;
		BitBlock r250_2af_tmp8, r250_2af_tmp9, r250_2af_tmp10, r250_2af_tmp11;
		BitBlock r250_2af_tmp12, r250_2af_tmp13, r250_2af_tmp14, r250_2af_tmp15;
		BitBlock r250_2af_tmp16, r250_2af_tmp17, r250_2af_tmp18, r250_2af_tmp19;
		BitBlock r250_2af_tmp20, r250_2af_tmp21, r250_2af_tmp22, r250_2af_tmp23;
		BitBlock r250_2af_tmp24, r250_2af_tmp25, r250_2af_tmp26, r250_2af_tmp27;
		BitBlock r250_2af_tmp28, r250_2af_tmp29, r250_2af_tmp30, r250_2af_tmp31;
		BitBlock r250_2af_tmp32, r250_2af_tmp33, r250_2af_tmp34, r250_2af_tmp35;
		BitBlock r250_2af_tmp36, r250_2af_tmp37, r250_2af_tmp38, r250_2af_tmp39;
		BitBlock r250_2af_tmp40, cc_range_250_27d_2, r250_2af_tmp41, r250_2af_tmp42;
		BitBlock r250_2af_tmp43, r250_2af_tmp44, r250_2af_tmp45, r250_2af_tmp46;
		BitBlock r250_2af_tmp47, r250_2af_tmp48, r250_2af_tmp49, r250_2af_tmp50;
		BitBlock cc_range_280_29e_2, byte_ca_adv, r250_2af_tmp51, r100_3ff_tmp2;
		BitBlock byte_cc, r100_3ff_tmp3, byte_cd, r100_3ff_tmp4, r100_3ff_tmp5;
		BitBlock r100_3ff_tmp6, r300_36f_tmp1, byte_85, byte_cd_adv, r300_36f_tmp2;
		BitBlock byte_range_b0_bf, r100_3ff_tmp7, r100_3ff_tmp8, byte_range_ce_cf;
		BitBlock r100_3ff_tmp9, r370_3ff_tmp1, r370_3ff_tmp2, r370_3ff_tmp3;
		BitBlock r370_3ff_tmp4, r370_3ff_tmp5, r370_3ff_tmp6, r370_3ff_tmp7;
		BitBlock r370_3ff_tmp8, cc_range_371_37b_2, r370_3ff_tmp9, r370_3ff_tmp10;
		BitBlock byte_ce, r370_3ff_tmp11, r370_3ff_tmp12, r370_3ff_tmp13;
		BitBlock r370_3ff_tmp14, r370_3ff_tmp15, r370_3ff_tmp16, cc_range_390_3ac_2;
		BitBlock byte_ce_adv, r370_3ff_tmp17, byte_cf, r370_3ff_tmp18, r370_3ff_tmp19;
		BitBlock r370_3ff_tmp20, r370_3ff_tmp21, r370_3ff_tmp22, r370_3ff_tmp23;
		BitBlock r370_3ff_tmp24, r370_3ff_tmp25, r370_3ff_tmp26, r370_3ff_tmp27;
		BitBlock r370_3ff_tmp28, r370_3ff_tmp29, r370_3ff_tmp30, r370_3ff_tmp31;
		BitBlock r370_3ff_tmp32, r370_3ff_tmp33, r370_3ff_tmp34, r370_3ff_tmp35;
		BitBlock r370_3ff_tmp36, r370_3ff_tmp37, r370_3ff_tmp38, r370_3ff_tmp39;
		BitBlock r370_3ff_tmp40, r370_3ff_tmp41, r370_3ff_tmp42, r370_3ff_tmp43;
		BitBlock r370_3ff_tmp44, r370_3ff_tmp45, r370_3ff_tmp46, r370_3ff_tmp47;
		BitBlock r370_3ff_tmp48, r370_3ff_tmp49, r370_3ff_tmp50, r370_3ff_tmp51;
		BitBlock r370_3ff_tmp52, r370_3ff_tmp53, r370_3ff_tmp54, r370_3ff_tmp55;
		BitBlock r370_3ff_tmp56, r370_3ff_tmp57, r370_3ff_tmp58, r370_3ff_tmp59;
		BitBlock r370_3ff_tmp60, r370_3ff_tmp61, r370_3ff_tmp62, r370_3ff_tmp63;
		BitBlock r370_3ff_tmp64, cc_range_3c0_3fb_2, byte_cf_adv, r370_3ff_tmp65;
		BitBlock r80_7ff_tmp24, r80_7ff_tmp25, byte_range_d0_d7, byte_range_d0_d3;
		BitBlock byte_d0, byte_d0_adv, r400_4ff_tmp1, r400_4ff_tmp2, byte_d1;
		BitBlock r400_4ff_tmp3, r400_4ff_tmp4, r400_4ff_tmp5, r400_4ff_tmp6;
		BitBlock r400_4ff_tmp7, r400_4ff_tmp8, r400_4ff_tmp9, r400_4ff_tmp10;
		BitBlock r400_4ff_tmp11, r400_4ff_tmp12, r400_4ff_tmp13, r400_4ff_tmp14;
		BitBlock r400_4ff_tmp15, r400_4ff_tmp16, r400_4ff_tmp17, r400_4ff_tmp18;
		BitBlock r400_4ff_tmp19, r400_4ff_tmp20, r400_4ff_tmp21, r400_4ff_tmp22;
		BitBlock r400_4ff_tmp23, r400_4ff_tmp24, r400_4ff_tmp25, r400_4ff_tmp26;
		BitBlock r400_4ff_tmp27, r400_4ff_tmp28, r400_4ff_tmp29, r400_4ff_tmp30;
		BitBlock r400_4ff_tmp31, r400_4ff_tmp32, r400_4ff_tmp33, r400_4ff_tmp34;
		BitBlock r400_4ff_tmp35, r400_4ff_tmp36, r400_4ff_tmp37, r400_4ff_tmp38;
		BitBlock r400_4ff_tmp39, r400_4ff_tmp40, r400_4ff_tmp41, cc_range_440_47f_2;
		BitBlock byte_d1_adv, r400_4ff_tmp42, byte_d2, r400_4ff_tmp43, r400_4ff_tmp44;
		BitBlock r400_4ff_tmp45, r400_4ff_tmp46, r400_4ff_tmp47, r400_4ff_tmp48;
		BitBlock r400_4ff_tmp49, r400_4ff_tmp50, r400_4ff_tmp51, r400_4ff_tmp52;
		BitBlock r400_4ff_tmp53, r400_4ff_tmp54, r400_4ff_tmp55, r400_4ff_tmp56;
		BitBlock r400_4ff_tmp57, r400_4ff_tmp58, r400_4ff_tmp59, r400_4ff_tmp60;
		BitBlock r400_4ff_tmp61, r400_4ff_tmp62, r400_4ff_tmp63, r400_4ff_tmp64;
		BitBlock r400_4ff_tmp65, r400_4ff_tmp66, r400_4ff_tmp67, r400_4ff_tmp68;
		BitBlock r400_4ff_tmp69, r400_4ff_tmp70, r400_4ff_tmp71, r400_4ff_tmp72;
		BitBlock r400_4ff_tmp73, r400_4ff_tmp74, r400_4ff_tmp75, r400_4ff_tmp76;
		BitBlock r400_4ff_tmp77, r400_4ff_tmp78, r400_4ff_tmp79, cc_range_481_4bf_2;
		BitBlock byte_d2_adv, r400_4ff_tmp80, byte_d3, r400_4ff_tmp81, r400_4ff_tmp82;
		BitBlock r400_4ff_tmp83, r400_4ff_tmp84, r400_4ff_tmp85, r400_4ff_tmp86;
		BitBlock r400_4ff_tmp87, r400_4ff_tmp88, r400_4ff_tmp89, r400_4ff_tmp90;
		BitBlock r400_4ff_tmp91, r400_4ff_tmp92, r400_4ff_tmp93, r400_4ff_tmp94;
		BitBlock r400_4ff_tmp95, r400_4ff_tmp96, r400_4ff_tmp97, r400_4ff_tmp98;
		BitBlock r400_4ff_tmp99, r400_4ff_tmp100, r400_4ff_tmp101, r400_4ff_tmp102;
		BitBlock r400_4ff_tmp103, r400_4ff_tmp104, r400_4ff_tmp105, r400_4ff_tmp106;
		BitBlock r400_4ff_tmp107, r400_4ff_tmp108, r400_4ff_tmp109, r400_4ff_tmp110;
		BitBlock r400_4ff_tmp111, r400_4ff_tmp112, r400_4ff_tmp113, r400_4ff_tmp114;
		BitBlock r400_4ff_tmp115, r400_4ff_tmp116, cc_range_4c2_4ff_2, byte_d3_adv;
		BitBlock r400_4ff_tmp117, r400_5ff_tmp1, byte_range_d4_d5, r400_5ff_tmp2;
		BitBlock byte_d6, r400_5ff_tmp3, r400_5ff_tmp4, r400_5ff_tmp5, r500_58f_tmp1;
		BitBlock byte_d4, r500_58f_tmp2, r500_58f_tmp3, cc_range_501_52f_2;
		BitBlock byte_d4_adv, r500_52f_tmp1, r500_58f_tmp4, byte_d5, r500_58f_tmp5;
		BitBlock r500_58f_tmp6, r530_58f_tmp1, r530_58f_tmp2, byte_range_a1_bf;
		BitBlock byte_d5_adv, r530_58f_tmp3, byte_range_80_87, byte_d6_adv;
		BitBlock r530_58f_tmp4, r80_10ffff_tmp1, byte_range_e0_ef, byte_range_e0_e3;
		BitBlock r800_ffff_tmp1, r800_ffff_tmp2, byte_e4, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, r800_ffff_tmp5, byte_range_80_b7, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, r800_ffff_tmp8, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock r800_1fff_tmp1, r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1;
		BitBlock r1000_1fff_tmp2, r1000_1fff_tmp3, r1000_1fff_tmp4, sequence_e1_b5;
		BitBlock byte_e1_adv, r1000_1fff_tmp5, cc_range_1d79_1d7d_3;
		BitBlock sequence_e1_b5_adv, r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8;
		BitBlock byte_b8, sequence_e1_b8, cc_range_1e01_1e3f_3, sequence_e1_b8_adv;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, byte_b9, sequence_e1_b9;
		BitBlock cc_range_1e41_1e7f_3, sequence_e1_b9_adv, r1000_1fff_tmp11;
		BitBlock r1000_1fff_tmp12, r1000_1fff_tmp13, byte_ba, sequence_e1_ba;
		BitBlock r1000_1fff_tmp14, r1000_1fff_tmp15, r1000_1fff_tmp16;
		BitBlock r1000_1fff_tmp17, r1000_1fff_tmp18, r1000_1fff_tmp19;
		BitBlock r1000_1fff_tmp20, r1000_1fff_tmp21, r1000_1fff_tmp22;
		BitBlock r1000_1fff_tmp23, r1000_1fff_tmp24, r1000_1fff_tmp25;
		BitBlock r1000_1fff_tmp26, r1000_1fff_tmp27, r1000_1fff_tmp28;
		BitBlock r1000_1fff_tmp29, r1000_1fff_tmp30, r1000_1fff_tmp31;
		BitBlock r1000_1fff_tmp32, r1000_1fff_tmp33, r1000_1fff_tmp34;
		BitBlock r1000_1fff_tmp35, r1000_1fff_tmp36, r1000_1fff_tmp37;
		BitBlock r1000_1fff_tmp38, r1000_1fff_tmp39, r1000_1fff_tmp40;
		BitBlock r1000_1fff_tmp41, r1000_1fff_tmp42, r1000_1fff_tmp43;
		BitBlock r1000_1fff_tmp44, r1000_1fff_tmp45, r1000_1fff_tmp46;
		BitBlock r1000_1fff_tmp47, r1000_1fff_tmp48, r1000_1fff_tmp49;
		BitBlock r1000_1fff_tmp50, r1000_1fff_tmp51, r1000_1fff_tmp52;
		BitBlock r1000_1fff_tmp53, r1000_1fff_tmp54, r1000_1fff_tmp55;
		BitBlock r1000_1fff_tmp56, r1000_1fff_tmp57, r1000_1fff_tmp58;
		BitBlock r1000_1fff_tmp59, r1000_1fff_tmp60, r1000_1fff_tmp61;
		BitBlock r1000_1fff_tmp62, r1000_1fff_tmp63, r1000_1fff_tmp64;
		BitBlock r1000_1fff_tmp65, r1000_1fff_tmp66, r1000_1fff_tmp67;
		BitBlock r1000_1fff_tmp68, r1000_1fff_tmp69, r1000_1fff_tmp70;
		BitBlock cc_range_1e81_1ebf_3, sequence_e1_ba_adv, r1000_1fff_tmp71, byte_bb;
		BitBlock sequence_e1_bb, cc_range_1ec1_1eff_3, sequence_e1_bb_adv;
		BitBlock r1000_1fff_tmp72, r1000_1fff_tmp73, byte_bc, sequence_e1_bc;
		BitBlock r1000_1fff_tmp74, r1000_1fff_tmp75, r1000_1fff_tmp76;
		BitBlock r1000_1fff_tmp77, r1000_1fff_tmp78, r1000_1fff_tmp79;
		BitBlock r1000_1fff_tmp80, r1000_1fff_tmp81, cc_range_1f00_1f30_3;
		BitBlock sequence_e1_bc_adv, r1000_1fff_tmp82, byte_bd, sequence_e1_bd;
		BitBlock r1000_1fff_tmp83, r1000_1fff_tmp84, r1000_1fff_tmp85;
		BitBlock r1000_1fff_tmp86, r1000_1fff_tmp87, cc_range_1f40_1f70_3;
		BitBlock sequence_e1_bd_adv, r1000_1fff_tmp88, r1000_1fff_tmp89, byte_be;
		BitBlock sequence_e1_be, r1000_1fff_tmp90, r1000_1fff_tmp91, r1000_1fff_tmp92;
		BitBlock r1000_1fff_tmp93, r1000_1fff_tmp94, r1000_1fff_tmp95;
		BitBlock r1000_1fff_tmp96, r1000_1fff_tmp97, r1000_1fff_tmp98;
		BitBlock cc_range_1f80_1fbe_3, sequence_e1_be_adv, r1000_1fff_tmp99, byte_bf;
		BitBlock sequence_e1_bf, r1000_1fff_tmp100, r1000_1fff_tmp101;
		BitBlock r1000_1fff_tmp102, r1000_1fff_tmp103, r1000_1fff_tmp104;
		BitBlock r1000_1fff_tmp105, r1000_1fff_tmp106, r1000_1fff_tmp107;
		BitBlock r1000_1fff_tmp108, r1000_1fff_tmp109, r1000_1fff_tmp110;
		BitBlock r1000_1fff_tmp111, cc_range_1fc2_1ff6_3, sequence_e1_bf_adv;
		BitBlock r1000_1fff_tmp112, r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3;
		BitBlock r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1;
		BitBlock r2000_2fff_tmp2, r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5;
		BitBlock sequence_e2_85, byte_e2_adv, r2000_2fff_tmp6, r2000_2fff_tmp7;
		BitBlock r2000_2fff_tmp8, r2000_2fff_tmp9, r2000_2fff_tmp10;
		BitBlock cc_range_214e_2170_3, sequence_e2_85_adv, r2000_2fff_tmp11;
		BitBlock r2000_2fff_tmp12, byte_86, sequence_e2_86, byte_84;
		BitBlock sequence_e2_86_adv, r2000_2fff_tmp13, r2000_2fff_tmp14;
		BitBlock r2000_2fff_tmp15, r2000_2fff_tmp16, byte_93, sequence_e2_93;
		BitBlock r2000_2fff_tmp17, r2000_2fff_tmp18, r2000_2fff_tmp19;
		BitBlock r2000_2fff_tmp20, r2000_2fff_tmp21, byte_range_90_a9;
		BitBlock sequence_e2_93_adv, r2000_2fff_tmp22, byte_b0, sequence_e2_b0;
		BitBlock sequence_e2_b0_adv, r2000_2fff_tmp23, r2000_2fff_tmp24, byte_b1;
		BitBlock sequence_e2_b1, r2000_2fff_tmp25, r2000_2fff_tmp26, r2000_2fff_tmp27;
		BitBlock r2000_2fff_tmp28, r2000_2fff_tmp29, r2000_2fff_tmp30;
		BitBlock r2000_2fff_tmp31, r2000_2fff_tmp32, r2000_2fff_tmp33;
		BitBlock r2000_2fff_tmp34, r2000_2fff_tmp35, r2000_2fff_tmp36;
		BitBlock r2000_2fff_tmp37, r2000_2fff_tmp38, r2000_2fff_tmp39;
		BitBlock r2000_2fff_tmp40, r2000_2fff_tmp41, r2000_2fff_tmp42;
		BitBlock r2000_2fff_tmp43, r2000_2fff_tmp44, r2000_2fff_tmp45;
		BitBlock r2000_2fff_tmp46, r2000_2fff_tmp47, r2000_2fff_tmp48;
		BitBlock cc_range_2c40_2c76_3, sequence_e2_b1_adv, r2000_2fff_tmp49, byte_b2;
		BitBlock sequence_e2_b2, cc_range_2c81_2cbf_3, sequence_e2_b2_adv;
		BitBlock r2000_2fff_tmp50, byte_b3, sequence_e2_b3, r2000_2fff_tmp51;
		BitBlock r2000_2fff_tmp52, r2000_2fff_tmp53, r2000_2fff_tmp54;
		BitBlock r2000_2fff_tmp55, r2000_2fff_tmp56, r2000_2fff_tmp57;
		BitBlock r2000_2fff_tmp58, r2000_2fff_tmp59, r2000_2fff_tmp60;
		BitBlock r2000_2fff_tmp61, r2000_2fff_tmp62, r2000_2fff_tmp63;
		BitBlock r2000_2fff_tmp64, r2000_2fff_tmp65, r2000_2fff_tmp66;
		BitBlock r2000_2fff_tmp67, r2000_2fff_tmp68, r2000_2fff_tmp69;
		BitBlock r2000_2fff_tmp70, r2000_2fff_tmp71, r2000_2fff_tmp72;
		BitBlock r2000_2fff_tmp73, r2000_2fff_tmp74, r2000_2fff_tmp75;
		BitBlock r2000_2fff_tmp76, r2000_2fff_tmp77, r2000_2fff_tmp78;
		BitBlock r2000_2fff_tmp79, r2000_2fff_tmp80, r2000_2fff_tmp81;
		BitBlock r2000_2fff_tmp82, r2000_2fff_tmp83, cc_range_2cc1_2cf3_3;
		BitBlock sequence_e2_b3_adv, r2000_2fff_tmp84, byte_b4, sequence_e2_b4;
		BitBlock r2000_2fff_tmp85, r2000_2fff_tmp86, r2000_2fff_tmp87;
		BitBlock r2000_2fff_tmp88, r2000_2fff_tmp89, r2000_2fff_tmp90;
		BitBlock r2000_2fff_tmp91, r2000_2fff_tmp92, cc_range_2d00_2d2d_3;
		BitBlock sequence_e2_b4_adv, r2000_2fff_tmp93, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6;
		BitBlock ra000_ffff_tmp7, byte_99, ra000_ffff_tmp8, sequence_ea_99;
		BitBlock byte_ea_adv, ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, cc_range_a641_a66d_3;
		BitBlock sequence_ea_99_adv, ra000_ffff_tmp14, byte_9a, sequence_ea_9a;
		BitBlock ra000_ffff_tmp15, ra000_ffff_tmp16, ra000_ffff_tmp17;
		BitBlock cc_range_a681_a69b_3, sequence_ea_9a_adv, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, byte_9c, sequence_ea_9c, ra000_ffff_tmp20;
		BitBlock ra000_ffff_tmp21, ra000_ffff_tmp22, ra000_ffff_tmp23;
		BitBlock ra000_ffff_tmp24, ra000_ffff_tmp25, ra000_ffff_tmp26;
		BitBlock ra000_ffff_tmp27, ra000_ffff_tmp28, ra000_ffff_tmp29;
		BitBlock ra000_ffff_tmp30, ra000_ffff_tmp31, ra000_ffff_tmp32;
		BitBlock ra000_ffff_tmp33, ra000_ffff_tmp34, ra000_ffff_tmp35;
		BitBlock ra000_ffff_tmp36, ra000_ffff_tmp37, ra000_ffff_tmp38;
		BitBlock ra000_ffff_tmp39, ra000_ffff_tmp40, ra000_ffff_tmp41;
		BitBlock ra000_ffff_tmp42, ra000_ffff_tmp43, ra000_ffff_tmp44;
		BitBlock ra000_ffff_tmp45, ra000_ffff_tmp46, ra000_ffff_tmp47;
		BitBlock ra000_ffff_tmp48, cc_range_a723_a73f_3, sequence_ea_9c_adv;
		BitBlock ra000_ffff_tmp49, byte_9d, sequence_ea_9d, ra000_ffff_tmp50;
		BitBlock ra000_ffff_tmp51, ra000_ffff_tmp52, ra000_ffff_tmp53;
		BitBlock ra000_ffff_tmp54, ra000_ffff_tmp55, ra000_ffff_tmp56;
		BitBlock ra000_ffff_tmp57, ra000_ffff_tmp58, ra000_ffff_tmp59;
		BitBlock ra000_ffff_tmp60, ra000_ffff_tmp61, ra000_ffff_tmp62;
		BitBlock ra000_ffff_tmp63, ra000_ffff_tmp64, ra000_ffff_tmp65;
		BitBlock ra000_ffff_tmp66, ra000_ffff_tmp67, ra000_ffff_tmp68;
		BitBlock ra000_ffff_tmp69, ra000_ffff_tmp70, ra000_ffff_tmp71;
		BitBlock ra000_ffff_tmp72, ra000_ffff_tmp73, ra000_ffff_tmp74;
		BitBlock ra000_ffff_tmp75, ra000_ffff_tmp76, ra000_ffff_tmp77;
		BitBlock ra000_ffff_tmp78, ra000_ffff_tmp79, ra000_ffff_tmp80;
		BitBlock ra000_ffff_tmp81, ra000_ffff_tmp82, ra000_ffff_tmp83;
		BitBlock ra000_ffff_tmp84, ra000_ffff_tmp85, ra000_ffff_tmp86;
		BitBlock ra000_ffff_tmp87, ra000_ffff_tmp88, ra000_ffff_tmp89;
		BitBlock ra000_ffff_tmp90, ra000_ffff_tmp91, ra000_ffff_tmp92;
		BitBlock ra000_ffff_tmp93, ra000_ffff_tmp94, cc_range_a741_a77f_3;
		BitBlock sequence_ea_9d_adv, ra000_ffff_tmp95, ra000_ffff_tmp96, byte_9e;
		BitBlock sequence_ea_9e, ra000_ffff_tmp97, ra000_ffff_tmp98, ra000_ffff_tmp99;
		BitBlock ra000_ffff_tmp100, ra000_ffff_tmp101, ra000_ffff_tmp102;
		BitBlock ra000_ffff_tmp103, ra000_ffff_tmp104, ra000_ffff_tmp105;
		BitBlock ra000_ffff_tmp106, ra000_ffff_tmp107, ra000_ffff_tmp108;
		BitBlock ra000_ffff_tmp109, cc_range_a781_a7a9_3, sequence_ea_9e_adv;
		BitBlock ra000_ffff_tmp110, byte_ef, byte_ac, ra000_ffff_tmp111;
		BitBlock sequence_ef_ac, byte_ef_adv, ra000_ffff_tmp112, ra000_ffff_tmp113;
		BitBlock ra000_ffff_tmp114, ra000_ffff_tmp115, ra000_ffff_tmp116;
		BitBlock cc_range_fb00_fb13_3, sequence_ef_ac_adv, ra000_ffff_tmp117;
		BitBlock sequence_ef_bd, byte_range_81_9a, sequence_ef_bd_adv;
		BitBlock ra000_ffff_tmp118, r80_10ffff_tmp2, byte_range_f0_ff, byte_f0;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_90;
		BitBlock r10000_10ffff_tmp4, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp5;
		BitBlock sequence_f0_90_90, sequence_f0_90_adv, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, byte_range_a8_bf, sequence_f0_90_90_adv;
		BitBlock r10000_10ffff_tmp8, r10000_10ffff_tmp9, r10000_10ffff_tmp10, byte_91;
		BitBlock sequence_f0_90_91, r10000_10ffff_tmp11, sequence_f0_90_91_adv;
		BitBlock r10000_10ffff_tmp12, sequence_f0_91, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, byte_a3, r10000_10ffff_tmp15, sequence_f0_91_a3;
		BitBlock sequence_f0_91_adv, byte_range_80_9f, sequence_f0_91_a3_adv;
		BitBlock r10000_10ffff_tmp16;




        struct_cwt_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_and(tmp1, basis_bits.bit_2);
        tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp4 = simd_or(basis_bits.bit_5, tmp3);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        tmp6 = simd_not(tmp5);
        tmp7 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp9 = simd_or(tmp7, tmp8);
        tmp10 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(tmp9, basis_bits.bit_3));
        byte_range_61_7a = simd_and(tmp2, tmp10);
        struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, byte_range_61_7a);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 54))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 19))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, tmp7);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp10 = simd_and(r80_7ff_tmp8, r80_7ff_tmp9);
            byte_b5 = simd_and(r80_7ff_tmp7, r80_7ff_tmp10);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp11 = simd_and(byte_c2_adv, byte_b5);
            struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r80_7ff_tmp11);
            r80_7ff_tmp12 = simd_andc(tmp3, tmp7);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp12);
            r80_7ff_tmp13 = simd_and(basis_bits.bit_5, tmp3);
            r80_7ff_tmp14 = simd_or(basis_bits.bit_4, r80_7ff_tmp13);
            r80_7ff_tmp15 = simd_and(basis_bits.bit_3, r80_7ff_tmp14);
            r80_7ff_tmp16 = simd_not(r80_7ff_tmp15);
            r80_7ff_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp18 = simd_and(r80_7ff_tmp17, tmp3);
            r80_7ff_tmp19 = simd_and(basis_bits.bit_3, r80_7ff_tmp18);
            r80_7ff_tmp20 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp16), simd_andc(r80_7ff_tmp19, basis_bits.bit_2));
            r80_7ff_tmp21 = simd_and(r80_7ff_tmp5, r80_7ff_tmp20);
            r80_7ff_tmp22 = simd_and(r80_7ff_tmp7, basis_bits.bit_4);
            cc_range_df_f8_2 = simd_or(r80_7ff_tmp21, r80_7ff_tmp22);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp23 = simd_and(byte_c3_adv, cc_range_df_f8_2);
            struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r80_7ff_tmp23);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp7);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 10))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(2, 7))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_5, tmp8);
                r100_2ff_tmp2 = simd_not(r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp5 = simd_and(r100_2ff_tmp4, r80_7ff_tmp9);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp5);
                byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(2), r100_2ff_tmp6));
                r100_2ff_tmp7 = simd_and(r100_2ff_tmp6, byte_range_80_8f);
                r100_2ff_tmp8 = simd_or(byte_range_c4_c8, r100_2ff_tmp7);
                if ((bitblock::any(r100_2ff_tmp8) || carryQ.CarryTest(3, 5))) {
                  r100_24f_tmp1 = simd_andc(r80_7ff_tmp8, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp1);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(3, 2))) {
                    r100_17f_tmp1 = simd_andc(r80_7ff_tmp8, tmp8);
                    byte_c4 = simd_and(r80_7ff_tmp2, r100_17f_tmp1);
                    r100_17f_tmp2 = simd_andc(basis_bits.bit_7, tmp7);
                    r100_17f_tmp3 = simd_or(r100_17f_tmp2, r80_7ff_tmp10);
                    r100_17f_tmp4 = simd_and(r80_7ff_tmp8, tmp3);
                    r100_17f_tmp5 = simd_or(r100_17f_tmp3, r100_17f_tmp4);
                    r100_17f_tmp6 = simd_or(r100_17f_tmp5, r100_2ff_tmp5);
                    r100_17f_tmp7 = simd_and(r100_2ff_tmp4, tmp3);
                    r100_17f_tmp8 = simd_or(r100_17f_tmp6, r100_17f_tmp7);
                    r100_17f_tmp9 = simd_and(r80_7ff_tmp17, r80_7ff_tmp9);
                    r100_17f_tmp10 = simd_or(r100_17f_tmp8, r100_17f_tmp9);
                    r100_17f_tmp11 = simd_or(r100_17f_tmp10, r80_7ff_tmp18);
                    r100_17f_tmp12 = simd_and(byte_range_80_8f, r100_17f_tmp11);
                    r100_17f_tmp13 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                    r100_17f_tmp14 = simd_and(r80_7ff_tmp5, r100_17f_tmp13);
                    r100_17f_tmp15 = simd_andc(r80_7ff_tmp9, tmp7);
                    r100_17f_tmp16 = simd_and(r100_17f_tmp14, r100_17f_tmp15);
                    r100_17f_tmp17 = simd_or(r100_17f_tmp12, r100_17f_tmp16);
                    r100_17f_tmp18 = simd_and(r100_17f_tmp14, r80_7ff_tmp12);
                    r100_17f_tmp19 = simd_or(r100_17f_tmp17, r100_17f_tmp18);
                    r100_17f_tmp20 = simd_and(r100_17f_tmp14, r80_7ff_tmp10);
                    r100_17f_tmp21 = simd_or(r100_17f_tmp19, r100_17f_tmp20);
                    r100_17f_tmp22 = simd_and(r100_17f_tmp14, r100_17f_tmp4);
                    r100_17f_tmp23 = simd_or(r100_17f_tmp21, r100_17f_tmp22);
                    r100_17f_tmp24 = simd_and(r100_17f_tmp14, r100_2ff_tmp5);
                    r100_17f_tmp25 = simd_or(r100_17f_tmp23, r100_17f_tmp24);
                    r100_17f_tmp26 = simd_and(r100_17f_tmp14, r100_17f_tmp7);
                    r100_17f_tmp27 = simd_or(r100_17f_tmp25, r100_17f_tmp26);
                    r100_17f_tmp28 = simd_and(r100_17f_tmp14, r100_17f_tmp9);
                    r100_17f_tmp29 = simd_or(r100_17f_tmp27, r100_17f_tmp28);
                    r100_17f_tmp30 = simd_and(r100_17f_tmp14, r80_7ff_tmp18);
                    r100_17f_tmp31 = simd_or(r100_17f_tmp29, r100_17f_tmp30);
                    r100_17f_tmp32 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                    r100_17f_tmp33 = simd_and(r80_7ff_tmp5, r100_17f_tmp32);
                    r100_17f_tmp34 = simd_and(r100_17f_tmp33, r100_17f_tmp15);
                    r100_17f_tmp35 = simd_or(r100_17f_tmp31, r100_17f_tmp34);
                    r100_17f_tmp36 = simd_and(r100_17f_tmp33, r80_7ff_tmp12);
                    r100_17f_tmp37 = simd_or(r100_17f_tmp35, r100_17f_tmp36);
                    r100_17f_tmp38 = simd_and(r100_17f_tmp33, r80_7ff_tmp10);
                    r100_17f_tmp39 = simd_or(r100_17f_tmp37, r100_17f_tmp38);
                    r100_17f_tmp40 = simd_and(r100_17f_tmp33, r100_17f_tmp4);
                    r100_17f_tmp41 = simd_or(r100_17f_tmp39, r100_17f_tmp40);
                    r100_17f_tmp42 = simd_and(r100_17f_tmp33, r100_2ff_tmp5);
                    r100_17f_tmp43 = simd_or(r100_17f_tmp41, r100_17f_tmp42);
                    r100_17f_tmp44 = simd_and(r100_17f_tmp33, r100_17f_tmp7);
                    r100_17f_tmp45 = simd_or(r100_17f_tmp43, r100_17f_tmp44);
                    r100_17f_tmp46 = simd_and(r100_17f_tmp33, r100_17f_tmp9);
                    r100_17f_tmp47 = simd_or(r100_17f_tmp45, r100_17f_tmp46);
                    r100_17f_tmp48 = simd_and(r100_17f_tmp33, r80_7ff_tmp18);
                    r100_17f_tmp49 = simd_or(r100_17f_tmp47, r100_17f_tmp48);
                    r100_17f_tmp50 = simd_and(r80_7ff_tmp7, r100_17f_tmp15);
                    r100_17f_tmp51 = simd_or(r100_17f_tmp49, r100_17f_tmp50);
                    r100_17f_tmp52 = simd_and(r80_7ff_tmp7, r80_7ff_tmp12);
                    r100_17f_tmp53 = simd_or(r100_17f_tmp51, r100_17f_tmp52);
                    r100_17f_tmp54 = simd_or(r100_17f_tmp53, byte_b5);
                    r100_17f_tmp55 = simd_and(r80_7ff_tmp7, r100_17f_tmp4);
                    r100_17f_tmp56 = simd_or(r100_17f_tmp54, r100_17f_tmp55);
                    r100_17f_tmp57 = simd_and(r100_2ff_tmp4, r80_7ff_tmp3);
                    r100_17f_tmp58 = simd_and(r80_7ff_tmp7, r100_17f_tmp57);
                    r100_17f_tmp59 = simd_or(r100_17f_tmp56, r100_17f_tmp58);
                    r100_17f_tmp60 = simd_andc(r80_7ff_tmp17, tmp8);
                    r100_17f_tmp61 = simd_and(r80_7ff_tmp7, r100_17f_tmp60);
                    r100_17f_tmp62 = simd_or(r100_17f_tmp59, r100_17f_tmp61);
                    r100_17f_tmp63 = simd_and(r80_7ff_tmp17, r80_7ff_tmp3);
                    r100_17f_tmp64 = simd_and(r80_7ff_tmp7, r100_17f_tmp63);
                    cc_range_101_13e_2 = simd_or(r100_17f_tmp62, r100_17f_tmp64);
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_c4, carryQ.get_carry_in(3), byte_c4_adv));
                    r100_17f_tmp65 = simd_and(byte_c4_adv, cc_range_101_13e_2);
                    struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r100_17f_tmp65);
                    byte_c5 = simd_and(r80_7ff_tmp2, r80_7ff_tmp10);
                    r100_17f_tmp66 = simd_andc(tmp9, r80_7ff_tmp4);
                    r100_17f_tmp67 = simd_andc(r100_17f_tmp66, r100_17f_tmp1);
                    r100_17f_tmp68 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
                    r100_17f_tmp69 = simd_andc(r100_17f_tmp67, r100_17f_tmp68);
                    r100_17f_tmp70 = simd_andc(r100_2ff_tmp4, basis_bits.bit_6);
                    r100_17f_tmp71 = simd_andc(r100_17f_tmp69, r100_17f_tmp70);
                    r100_17f_tmp72 = simd_andc(r100_17f_tmp71, r100_17f_tmp7);
                    r100_17f_tmp73 = simd_andc(r100_17f_tmp72, r100_17f_tmp9);
                    r100_17f_tmp74 = simd_andc(r100_17f_tmp73, r80_7ff_tmp18);
                    r100_17f_tmp75 = simd_andc(byte_range_80_8f, r100_17f_tmp74);
                    r100_17f_tmp76 = simd_or(r100_17f_tmp75, r100_17f_tmp16);
                    r100_17f_tmp77 = simd_or(r100_17f_tmp76, r100_17f_tmp18);
                    r100_17f_tmp78 = simd_or(r100_17f_tmp77, r100_17f_tmp20);
                    r100_17f_tmp79 = simd_or(r100_17f_tmp78, r100_17f_tmp22);
                    r100_17f_tmp80 = simd_or(r100_17f_tmp79, r100_17f_tmp24);
                    r100_17f_tmp81 = simd_or(r100_17f_tmp80, r100_17f_tmp26);
                    r100_17f_tmp82 = simd_or(r100_17f_tmp81, r100_17f_tmp28);
                    r100_17f_tmp83 = simd_or(r100_17f_tmp82, r100_17f_tmp30);
                    r100_17f_tmp84 = simd_or(r100_17f_tmp83, r100_17f_tmp34);
                    r100_17f_tmp85 = simd_or(r100_17f_tmp84, r100_17f_tmp36);
                    r100_17f_tmp86 = simd_or(r100_17f_tmp85, r100_17f_tmp38);
                    r100_17f_tmp87 = simd_or(r100_17f_tmp86, r100_17f_tmp40);
                    r100_17f_tmp88 = simd_or(r100_17f_tmp87, r100_17f_tmp42);
                    r100_17f_tmp89 = simd_or(r100_17f_tmp88, r100_17f_tmp44);
                    r100_17f_tmp90 = simd_or(r100_17f_tmp89, r100_17f_tmp46);
                    r100_17f_tmp91 = simd_or(r100_17f_tmp90, r100_17f_tmp48);
                    r100_17f_tmp92 = simd_or(r100_17f_tmp91, r100_17f_tmp50);
                    r100_17f_tmp93 = simd_or(r100_17f_tmp92, r100_17f_tmp52);
                    r100_17f_tmp94 = simd_or(r100_17f_tmp93, byte_b5);
                    r100_17f_tmp95 = simd_or(r100_17f_tmp94, r100_17f_tmp55);
                    r100_17f_tmp96 = simd_or(r100_17f_tmp95, r100_17f_tmp58);
                    r100_17f_tmp97 = simd_or(r100_17f_tmp96, r100_17f_tmp61);
                    r100_17f_tmp98 = simd_and(r80_7ff_tmp17, basis_bits.bit_6);
                    r100_17f_tmp99 = simd_and(r80_7ff_tmp7, r100_17f_tmp98);
                    cc_range_140_17e_2 = simd_or(r100_17f_tmp97, r100_17f_tmp99);
                    carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_c5, carryQ.get_carry_in(4), byte_c5_adv));
                    r100_17f_tmp100 = simd_and(byte_c5_adv, cc_range_140_17e_2);
                    struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r100_17f_tmp100);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(3, 2);
                  }
                  r100_24f_tmp2 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r100_24f_tmp2, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp3);
                  r100_24f_tmp4 = simd_or(byte_range_c6_c8, r100_2ff_tmp7);
                  if ((bitblock::any(r100_24f_tmp4) || carryQ.CarryTest(5, 3))) {
                    r180_24f_tmp1 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
                    byte_c6 = simd_and(r80_7ff_tmp2, r180_24f_tmp1);
                    r180_24f_tmp2 = simd_andc(tmp9, r80_7ff_tmp12);
                    r180_24f_tmp3 = simd_andc(r180_24f_tmp2, r80_7ff_tmp10);
                    r180_24f_tmp4 = simd_andc(r100_2ff_tmp4, tmp8);
                    r180_24f_tmp5 = simd_andc(r180_24f_tmp3, r180_24f_tmp4);
                    r180_24f_tmp6 = simd_andc(r80_7ff_tmp17, tmp8);
                    r180_24f_tmp7 = simd_andc(r180_24f_tmp5, r180_24f_tmp6);
                    r180_24f_tmp8 = simd_andc(byte_range_80_8f, r180_24f_tmp7);
                    r180_24f_tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                    r180_24f_tmp10 = simd_and(r80_7ff_tmp5, r180_24f_tmp9);
                    r180_24f_tmp11 = simd_and(r180_24f_tmp10, r80_7ff_tmp4);
                    r180_24f_tmp12 = simd_or(r180_24f_tmp8, r180_24f_tmp11);
                    r180_24f_tmp13 = simd_and(r180_24f_tmp10, r80_7ff_tmp10);
                    r180_24f_tmp14 = simd_or(r180_24f_tmp12, r180_24f_tmp13);
                    r180_24f_tmp15 = simd_and(r180_24f_tmp10, r100_2ff_tmp4);
                    r180_24f_tmp16 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                    r180_24f_tmp17 = simd_and(r180_24f_tmp15, r180_24f_tmp16);
                    r180_24f_tmp18 = simd_or(r180_24f_tmp14, r180_24f_tmp17);
                    r180_24f_tmp19 = simd_and(r80_7ff_tmp17, r80_7ff_tmp3);
                    r180_24f_tmp20 = simd_and(r180_24f_tmp10, r180_24f_tmp19);
                    r180_24f_tmp21 = simd_or(r180_24f_tmp18, r180_24f_tmp20);
                    r180_24f_tmp22 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                    r180_24f_tmp23 = simd_and(r80_7ff_tmp5, r180_24f_tmp22);
                    r180_24f_tmp24 = simd_andc(r80_7ff_tmp9, tmp7);
                    r180_24f_tmp25 = simd_and(r180_24f_tmp23, r180_24f_tmp24);
                    r180_24f_tmp26 = simd_or(r180_24f_tmp21, r180_24f_tmp25);
                    r180_24f_tmp27 = simd_and(r180_24f_tmp23, r80_7ff_tmp12);
                    r180_24f_tmp28 = simd_or(r180_24f_tmp26, r180_24f_tmp27);
                    r180_24f_tmp29 = simd_and(r180_24f_tmp23, r80_7ff_tmp10);
                    r180_24f_tmp30 = simd_or(r180_24f_tmp28, r180_24f_tmp29);
                    r180_24f_tmp31 = simd_and(r180_24f_tmp23, r180_24f_tmp4);
                    r180_24f_tmp32 = simd_or(r180_24f_tmp30, r180_24f_tmp31);
                    r180_24f_tmp33 = simd_and(r80_7ff_tmp17, r80_7ff_tmp9);
                    r180_24f_tmp34 = simd_and(r180_24f_tmp23, r180_24f_tmp33);
                    r180_24f_tmp35 = simd_or(r180_24f_tmp32, r180_24f_tmp34);
                    r180_24f_tmp36 = simd_andc(r80_7ff_tmp7, tmp9);
                    r180_24f_tmp37 = simd_or(r180_24f_tmp35, r180_24f_tmp36);
                    r180_24f_tmp38 = simd_andc(r80_7ff_tmp8, tmp8);
                    r180_24f_tmp39 = simd_and(r80_7ff_tmp7, r180_24f_tmp38);
                    r180_24f_tmp40 = simd_or(r180_24f_tmp37, r180_24f_tmp39);
                    r180_24f_tmp41 = simd_and(r80_7ff_tmp7, r180_24f_tmp1);
                    r180_24f_tmp42 = simd_or(r180_24f_tmp40, r180_24f_tmp41);
                    r180_24f_tmp43 = simd_and(r80_7ff_tmp7, r100_2ff_tmp5);
                    r180_24f_tmp44 = simd_or(r180_24f_tmp42, r180_24f_tmp43);
                    r180_24f_tmp45 = simd_and(r80_7ff_tmp7, r180_24f_tmp33);
                    r180_24f_tmp46 = simd_or(r180_24f_tmp44, r180_24f_tmp45);
                    r180_24f_tmp47 = simd_and(r80_7ff_tmp7, r80_7ff_tmp18);
                    cc_range_180_1bf_2 = simd_or(r180_24f_tmp46, r180_24f_tmp47);
                    carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_c6, carryQ.get_carry_in(5), byte_c6_adv));
                    r180_24f_tmp48 = simd_and(byte_c6_adv, cc_range_180_1bf_2);
                    struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r180_24f_tmp48);
                    r180_24f_tmp49 = simd_and(r80_7ff_tmp8, tmp3);
                    byte_c7 = simd_and(r80_7ff_tmp2, r180_24f_tmp49);
                    r180_24f_tmp50 = simd_andc(tmp8, basis_bits.bit_6);
                    r180_24f_tmp51 = simd_andc(r80_7ff_tmp8, r180_24f_tmp50);
                    r180_24f_tmp52 = simd_and(byte_range_80_8f, r180_24f_tmp51);
                    r180_24f_tmp53 = simd_and(byte_range_80_8f, r100_2ff_tmp4);
                    r180_24f_tmp54 = simd_and(r180_24f_tmp53, r180_24f_tmp16);
                    r180_24f_tmp55 = simd_or(r180_24f_tmp52, r180_24f_tmp54);
                    r180_24f_tmp56 = simd_and(byte_range_80_8f, r180_24f_tmp6);
                    r180_24f_tmp57 = simd_or(r180_24f_tmp55, r180_24f_tmp56);
                    r180_24f_tmp58 = simd_and(byte_range_80_8f, r180_24f_tmp19);
                    r180_24f_tmp59 = simd_or(r180_24f_tmp57, r180_24f_tmp58);
                    r180_24f_tmp60 = simd_andc(r180_24f_tmp10, tmp9);
                    r180_24f_tmp61 = simd_or(r180_24f_tmp59, r180_24f_tmp60);
                    r180_24f_tmp62 = simd_or(r180_24f_tmp61, r180_24f_tmp11);
                    r180_24f_tmp63 = simd_and(r180_24f_tmp10, r180_24f_tmp38);
                    r180_24f_tmp64 = simd_or(r180_24f_tmp62, r180_24f_tmp63);
                    r180_24f_tmp65 = simd_and(r180_24f_tmp10, r180_24f_tmp1);
                    r180_24f_tmp66 = simd_or(r180_24f_tmp64, r180_24f_tmp65);
                    r180_24f_tmp67 = simd_and(r180_24f_tmp10, r180_24f_tmp4);
                    r180_24f_tmp68 = simd_or(r180_24f_tmp66, r180_24f_tmp67);
                    r180_24f_tmp69 = simd_and(r100_2ff_tmp4, r80_7ff_tmp3);
                    r180_24f_tmp70 = simd_and(r180_24f_tmp10, r180_24f_tmp69);
                    r180_24f_tmp71 = simd_or(r180_24f_tmp68, r180_24f_tmp70);
                    r180_24f_tmp72 = simd_andc(r80_7ff_tmp17, basis_bits.bit_6);
                    r180_24f_tmp73 = simd_and(r180_24f_tmp10, r180_24f_tmp72);
                    r180_24f_tmp74 = simd_or(r180_24f_tmp71, r180_24f_tmp73);
                    r180_24f_tmp75 = simd_and(r180_24f_tmp10, r80_7ff_tmp18);
                    r180_24f_tmp76 = simd_or(r180_24f_tmp74, r180_24f_tmp75);
                    r180_24f_tmp77 = simd_or(r180_24f_tmp76, r180_24f_tmp25);
                    r180_24f_tmp78 = simd_or(r180_24f_tmp77, r180_24f_tmp27);
                    r180_24f_tmp79 = simd_or(r180_24f_tmp78, r180_24f_tmp29);
                    r180_24f_tmp80 = simd_and(r180_24f_tmp23, r180_24f_tmp49);
                    r180_24f_tmp81 = simd_or(r180_24f_tmp79, r180_24f_tmp80);
                    r180_24f_tmp82 = simd_and(r180_24f_tmp23, r100_2ff_tmp5);
                    r180_24f_tmp83 = simd_or(r180_24f_tmp81, r180_24f_tmp82);
                    r180_24f_tmp84 = simd_and(r100_2ff_tmp4, tmp3);
                    r180_24f_tmp85 = simd_and(r180_24f_tmp23, r180_24f_tmp84);
                    r180_24f_tmp86 = simd_or(r180_24f_tmp83, r180_24f_tmp85);
                    r180_24f_tmp87 = simd_or(r180_24f_tmp86, r180_24f_tmp34);
                    r180_24f_tmp88 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                    r180_24f_tmp89 = simd_or(tmp7, basis_bits.bit_6);
                    r180_24f_tmp90 = simd_not(r180_24f_tmp89);
                    r180_24f_tmp91 = simd_or(simd_and(basis_bits.bit_3, r180_24f_tmp90), simd_andc(r80_7ff_tmp18, basis_bits.bit_3));
                    r180_24f_tmp92 = simd_and(r180_24f_tmp88, r180_24f_tmp91);
                    r180_24f_tmp93 = simd_or(r180_24f_tmp87, r180_24f_tmp92);
                    r180_24f_tmp94 = simd_and(r80_7ff_tmp7, r80_7ff_tmp12);
                    r180_24f_tmp95 = simd_or(r180_24f_tmp93, r180_24f_tmp94);
                    r180_24f_tmp96 = simd_or(r180_24f_tmp95, byte_b5);
                    r180_24f_tmp97 = simd_or(r180_24f_tmp96, r180_24f_tmp43);
                    r180_24f_tmp98 = simd_and(r80_7ff_tmp7, r180_24f_tmp84);
                    r180_24f_tmp99 = simd_or(r180_24f_tmp97, r180_24f_tmp98);
                    r180_24f_tmp100 = simd_or(r180_24f_tmp99, r180_24f_tmp45);
                    cc_range_1c4_1ff_2 = simd_or(r180_24f_tmp100, r180_24f_tmp47);
                    carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(6), byte_c7_adv));
                    r180_24f_tmp101 = simd_and(byte_c7_adv, cc_range_1c4_1ff_2);
                    struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r180_24f_tmp101);
                    byte_c8 = simd_and(r80_7ff_tmp2, r180_24f_tmp4);
                    r180_24f_tmp102 = simd_andc(basis_bits.bit_7, tmp7);
                    r180_24f_tmp103 = simd_or(r180_24f_tmp102, r80_7ff_tmp10);
                    r180_24f_tmp104 = simd_or(r180_24f_tmp103, r180_24f_tmp49);
                    r180_24f_tmp105 = simd_or(r180_24f_tmp104, r100_2ff_tmp5);
                    r180_24f_tmp106 = simd_or(r180_24f_tmp105, r180_24f_tmp84);
                    r180_24f_tmp107 = simd_or(r180_24f_tmp106, r180_24f_tmp33);
                    r180_24f_tmp108 = simd_or(r180_24f_tmp107, r80_7ff_tmp18);
                    r180_24f_tmp109 = simd_and(byte_range_80_8f, r180_24f_tmp108);
                    r180_24f_tmp110 = simd_and(r180_24f_tmp10, r180_24f_tmp24);
                    r180_24f_tmp111 = simd_or(r180_24f_tmp109, r180_24f_tmp110);
                    r180_24f_tmp112 = simd_and(r180_24f_tmp10, r80_7ff_tmp12);
                    r180_24f_tmp113 = simd_or(r180_24f_tmp111, r180_24f_tmp112);
                    r180_24f_tmp114 = simd_or(r180_24f_tmp113, r180_24f_tmp13);
                    r180_24f_tmp115 = simd_and(r180_24f_tmp10, r180_24f_tmp49);
                    r180_24f_tmp116 = simd_or(r180_24f_tmp114, r180_24f_tmp115);
                    r180_24f_tmp117 = simd_and(r180_24f_tmp10, r100_2ff_tmp5);
                    r180_24f_tmp118 = simd_or(r180_24f_tmp116, r180_24f_tmp117);
                    r180_24f_tmp119 = simd_and(r180_24f_tmp10, r180_24f_tmp84);
                    r180_24f_tmp120 = simd_or(r180_24f_tmp118, r180_24f_tmp119);
                    r180_24f_tmp121 = simd_and(r180_24f_tmp10, r180_24f_tmp33);
                    r180_24f_tmp122 = simd_or(r180_24f_tmp120, r180_24f_tmp121);
                    r180_24f_tmp123 = simd_or(r180_24f_tmp122, r180_24f_tmp75);
                    r180_24f_tmp124 = simd_or(r180_24f_tmp123, r180_24f_tmp27);
                    r180_24f_tmp125 = simd_or(r180_24f_tmp124, r180_24f_tmp29);
                    r180_24f_tmp126 = simd_or(r180_24f_tmp125, r180_24f_tmp80);
                    r180_24f_tmp127 = simd_or(r180_24f_tmp126, r180_24f_tmp82);
                    r180_24f_tmp128 = simd_or(r180_24f_tmp127, r180_24f_tmp85);
                    r180_24f_tmp129 = simd_or(r180_24f_tmp128, r180_24f_tmp34);
                    r180_24f_tmp130 = simd_and(r180_24f_tmp23, r80_7ff_tmp18);
                    r180_24f_tmp131 = simd_or(r180_24f_tmp129, r180_24f_tmp130);
                    r180_24f_tmp132 = simd_and(r80_7ff_tmp7, r180_24f_tmp24);
                    r180_24f_tmp133 = simd_or(r180_24f_tmp131, r180_24f_tmp132);
                    r180_24f_tmp134 = simd_or(r180_24f_tmp133, r180_24f_tmp94);
                    r180_24f_tmp135 = simd_and(r80_7ff_tmp7, r180_24f_tmp6);
                    r180_24f_tmp136 = simd_or(r180_24f_tmp134, r180_24f_tmp135);
                    cc_range_201_23f_2 = simd_or(r180_24f_tmp136, r180_24f_tmp47);
                    carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_c8, carryQ.get_carry_in(7), byte_c8_adv));
                    r180_24f_tmp137 = simd_and(byte_c8_adv, cc_range_201_23f_2);
                    struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r180_24f_tmp137);
                    r180_24f_tmp138 = simd_andc(tmp9, r80_7ff_tmp4);
                    r180_24f_tmp139 = simd_andc(r180_24f_tmp138, r180_24f_tmp49);
                    r180_24f_tmp140 = simd_andc(r180_24f_tmp139, r100_2ff_tmp5);
                    r180_24f_tmp141 = simd_andc(r180_24f_tmp140, r180_24f_tmp84);
                    r180_24f_tmp142 = simd_andc(r180_24f_tmp141, r180_24f_tmp33);
                    r180_24f_tmp143 = simd_andc(r180_24f_tmp142, r80_7ff_tmp18);
                    cc_range_240_24f_2 = simd_andc(byte_range_80_8f, r180_24f_tmp143);
                    byte_c9_adv = r100_2ff_tmp6;
                    r180_24f_tmp144 = simd_and(byte_c9_adv, cc_range_240_24f_2);
                    struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r180_24f_tmp144);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(5, 3);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 5);
                }
                byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
                r100_2ff_tmp9 = simd_and(r100_2ff_tmp6, byte_range_90_bf);
                r100_2ff_tmp10 = simd_and(r100_2ff_tmp4, r80_7ff_tmp3);
                byte_ca = simd_and(r80_7ff_tmp2, r100_2ff_tmp10);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp6);
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(8), r100_2ff_tmp11));
                r100_2ff_tmp12 = simd_and(r100_2ff_tmp11, byte_range_80_af);
                r100_2ff_tmp13 = simd_or(r100_2ff_tmp9, r100_2ff_tmp12);
                if (bitblock::any(r100_2ff_tmp13)) {
                  r250_2af_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r250_2af_tmp2 = simd_and(r80_7ff_tmp5, r250_2af_tmp1);
                  r250_2af_tmp3 = simd_andc(r250_2af_tmp2, basis_bits.bit_4);
                  r250_2af_tmp4 = simd_and(basis_bits.bit_5, tmp8);
                  r250_2af_tmp5 = simd_andc(r250_2af_tmp3, r250_2af_tmp4);
                  r250_2af_tmp6 = simd_and(r80_7ff_tmp8, basis_bits.bit_6);
                  r250_2af_tmp7 = simd_and(r250_2af_tmp2, r250_2af_tmp6);
                  r250_2af_tmp8 = simd_or(r250_2af_tmp5, r250_2af_tmp7);
                  r250_2af_tmp9 = simd_and(r250_2af_tmp2, r100_2ff_tmp5);
                  r250_2af_tmp10 = simd_or(r250_2af_tmp8, r250_2af_tmp9);
                  r250_2af_tmp11 = simd_and(r250_2af_tmp2, basis_bits.bit_4);
                  r250_2af_tmp12 = simd_not(tmp8);
                  r250_2af_tmp13 = simd_or(simd_and(basis_bits.bit_5, r250_2af_tmp12), simd_andc(tmp3, basis_bits.bit_5));
                  r250_2af_tmp14 = simd_and(r250_2af_tmp11, r250_2af_tmp13);
                  r250_2af_tmp15 = simd_or(r250_2af_tmp10, r250_2af_tmp14);
                  r250_2af_tmp16 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                  r250_2af_tmp17 = simd_and(r80_7ff_tmp5, r250_2af_tmp16);
                  r250_2af_tmp18 = simd_or(tmp7, basis_bits.bit_6);
                  r250_2af_tmp19 = simd_andc(r250_2af_tmp17, r250_2af_tmp18);
                  r250_2af_tmp20 = simd_or(r250_2af_tmp15, r250_2af_tmp19);
                  r250_2af_tmp21 = simd_and(r250_2af_tmp17, r80_7ff_tmp12);
                  r250_2af_tmp22 = simd_or(r250_2af_tmp20, r250_2af_tmp21);
                  r250_2af_tmp23 = simd_and(r250_2af_tmp17, r80_7ff_tmp8);
                  r250_2af_tmp24 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r250_2af_tmp25 = simd_and(r250_2af_tmp23, r250_2af_tmp24);
                  r250_2af_tmp26 = simd_or(r250_2af_tmp22, r250_2af_tmp25);
                  r250_2af_tmp27 = simd_andc(r100_2ff_tmp4, basis_bits.bit_6);
                  r250_2af_tmp28 = simd_and(r250_2af_tmp17, r250_2af_tmp27);
                  r250_2af_tmp29 = simd_or(r250_2af_tmp26, r250_2af_tmp28);
                  r250_2af_tmp30 = simd_and(r250_2af_tmp17, basis_bits.bit_4);
                  r250_2af_tmp31 = simd_and(r250_2af_tmp30, r250_2af_tmp13);
                  r250_2af_tmp32 = simd_or(r250_2af_tmp29, r250_2af_tmp31);
                  r250_2af_tmp33 = simd_and(r250_2af_tmp17, r80_7ff_tmp18);
                  r250_2af_tmp34 = simd_or(r250_2af_tmp32, r250_2af_tmp33);
                  r250_2af_tmp35 = simd_andc(r80_7ff_tmp7, tmp7);
                  r250_2af_tmp36 = simd_and(r250_2af_tmp35, r250_2af_tmp24);
                  r250_2af_tmp37 = simd_or(r250_2af_tmp34, r250_2af_tmp36);
                  r250_2af_tmp38 = simd_or(r250_2af_tmp37, byte_b5);
                  r250_2af_tmp39 = simd_and(r80_7ff_tmp17, r80_7ff_tmp9);
                  r250_2af_tmp40 = simd_and(r80_7ff_tmp7, r250_2af_tmp39);
                  cc_range_250_27d_2 = simd_or(r250_2af_tmp38, r250_2af_tmp40);
                  byte_c9_adv = r100_2ff_tmp6;
                  r250_2af_tmp41 = simd_and(byte_c9_adv, cc_range_250_27d_2);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r250_2af_tmp41);
                  r250_2af_tmp42 = simd_andc(tmp9, r80_7ff_tmp12);
                  r250_2af_tmp43 = simd_not(r250_2af_tmp4);
                  r250_2af_tmp44 = simd_or(simd_and(basis_bits.bit_4, r250_2af_tmp43), simd_andc(r80_7ff_tmp13, basis_bits.bit_4));
                  r250_2af_tmp45 = simd_andc(r250_2af_tmp42, r250_2af_tmp44);
                  r250_2af_tmp46 = simd_andc(byte_range_80_8f, r250_2af_tmp45);
                  r250_2af_tmp47 = simd_and(r250_2af_tmp2, r80_7ff_tmp4);
                  r250_2af_tmp48 = simd_or(r250_2af_tmp46, r250_2af_tmp47);
                  r250_2af_tmp49 = simd_and(r80_7ff_tmp17, r80_7ff_tmp3);
                  r250_2af_tmp50 = simd_and(r250_2af_tmp2, r250_2af_tmp49);
                  cc_range_280_29e_2 = simd_or(r250_2af_tmp48, r250_2af_tmp50);
                  byte_ca_adv = r100_2ff_tmp11;
                  r250_2af_tmp51 = simd_and(byte_ca_adv, cc_range_280_29e_2);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r250_2af_tmp51);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 7);
              }
              r100_3ff_tmp2 = simd_andc(r80_7ff_tmp17, tmp8);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp2);
              r100_3ff_tmp3 = simd_and(r80_7ff_tmp17, r80_7ff_tmp9);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp6);
              carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(9), r100_3ff_tmp4));
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp4, byte_range_80_af);
              r100_3ff_tmp6 = simd_or(byte_cc, r100_3ff_tmp5);
              if (bitblock::any(r100_3ff_tmp6)) {
                r300_36f_tmp1 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                byte_85 = simd_and(r300_36f_tmp1, r80_7ff_tmp10);
                byte_cd_adv = r100_3ff_tmp4;
                r300_36f_tmp2 = simd_and(byte_cd_adv, byte_85);
                struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r300_36f_tmp2);
              }
              byte_range_b0_bf = r80_7ff_tmp7;
              r100_3ff_tmp7 = simd_and(r100_3ff_tmp4, byte_range_b0_bf);
              r100_3ff_tmp8 = simd_and(r80_7ff_tmp17, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp8);
              r100_3ff_tmp9 = simd_or(r100_3ff_tmp7, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp9) || carryQ.CarryTest(10, 2))) {
                r370_3ff_tmp1 = simd_andc(basis_bits.bit_7, tmp7);
                r370_3ff_tmp2 = simd_and(r80_7ff_tmp8, tmp3);
                r370_3ff_tmp3 = simd_or(r370_3ff_tmp1, r370_3ff_tmp2);
                r370_3ff_tmp4 = simd_and(byte_range_b0_bf, r370_3ff_tmp3);
                r370_3ff_tmp5 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp6 = simd_not(basis_bits.bit_6);
                r370_3ff_tmp7 = simd_or(simd_and(basis_bits.bit_5, r370_3ff_tmp6), simd_andc(tmp3, basis_bits.bit_5));
                r370_3ff_tmp8 = simd_and(r370_3ff_tmp5, r370_3ff_tmp7);
                cc_range_371_37b_2 = simd_or(r370_3ff_tmp4, r370_3ff_tmp8);
                byte_cd_adv = r100_3ff_tmp4;
                r370_3ff_tmp9 = simd_and(byte_cd_adv, cc_range_371_37b_2);
                struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r370_3ff_tmp9);
                r370_3ff_tmp10 = simd_and(r80_7ff_tmp17, r80_7ff_tmp3);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp10);
                r370_3ff_tmp11 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                r370_3ff_tmp12 = simd_and(r80_7ff_tmp5, r370_3ff_tmp11);
                r370_3ff_tmp13 = simd_andc(r370_3ff_tmp12, tmp9);
                r370_3ff_tmp14 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                r370_3ff_tmp15 = simd_or(basis_bits.bit_3, r80_7ff_tmp17);
                r370_3ff_tmp16 = simd_and(r370_3ff_tmp14, r370_3ff_tmp15);
                cc_range_390_3ac_2 = simd_or(r370_3ff_tmp13, r370_3ff_tmp16);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(10), byte_ce_adv));
                r370_3ff_tmp17 = simd_and(byte_ce_adv, cc_range_390_3ac_2);
                struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r370_3ff_tmp17);
                byte_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp18);
                r370_3ff_tmp18 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                r370_3ff_tmp19 = simd_and(basis_bits.bit_4, r80_7ff_tmp13);
                r370_3ff_tmp20 = simd_andc(r370_3ff_tmp18, r370_3ff_tmp19);
                r370_3ff_tmp21 = simd_or(tmp7, basis_bits.bit_6);
                r370_3ff_tmp22 = simd_andc(r370_3ff_tmp12, r370_3ff_tmp21);
                r370_3ff_tmp23 = simd_or(r370_3ff_tmp20, r370_3ff_tmp22);
                r370_3ff_tmp24 = simd_and(r370_3ff_tmp12, r80_7ff_tmp8);
                r370_3ff_tmp25 = simd_and(r370_3ff_tmp24, tmp8);
                r370_3ff_tmp26 = simd_or(r370_3ff_tmp23, r370_3ff_tmp25);
                r370_3ff_tmp27 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r370_3ff_tmp28 = simd_and(r370_3ff_tmp27, r80_7ff_tmp9);
                r370_3ff_tmp29 = simd_and(r370_3ff_tmp12, r370_3ff_tmp28);
                r370_3ff_tmp30 = simd_or(r370_3ff_tmp26, r370_3ff_tmp29);
                r370_3ff_tmp31 = simd_and(r370_3ff_tmp27, tmp3);
                r370_3ff_tmp32 = simd_and(r370_3ff_tmp12, r370_3ff_tmp31);
                r370_3ff_tmp33 = simd_or(r370_3ff_tmp30, r370_3ff_tmp32);
                r370_3ff_tmp34 = simd_and(r370_3ff_tmp12, r100_3ff_tmp3);
                r370_3ff_tmp35 = simd_or(r370_3ff_tmp33, r370_3ff_tmp34);
                r370_3ff_tmp36 = simd_and(r370_3ff_tmp12, r80_7ff_tmp18);
                r370_3ff_tmp37 = simd_or(r370_3ff_tmp35, r370_3ff_tmp36);
                r370_3ff_tmp38 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r370_3ff_tmp39 = simd_and(r80_7ff_tmp5, r370_3ff_tmp38);
                r370_3ff_tmp40 = simd_andc(r80_7ff_tmp9, tmp7);
                r370_3ff_tmp41 = simd_and(r370_3ff_tmp39, r370_3ff_tmp40);
                r370_3ff_tmp42 = simd_or(r370_3ff_tmp37, r370_3ff_tmp41);
                r370_3ff_tmp43 = simd_and(r370_3ff_tmp39, r80_7ff_tmp12);
                r370_3ff_tmp44 = simd_or(r370_3ff_tmp42, r370_3ff_tmp43);
                r370_3ff_tmp45 = simd_and(r370_3ff_tmp39, r80_7ff_tmp10);
                r370_3ff_tmp46 = simd_or(r370_3ff_tmp44, r370_3ff_tmp45);
                r370_3ff_tmp47 = simd_and(r370_3ff_tmp39, r370_3ff_tmp2);
                r370_3ff_tmp48 = simd_or(r370_3ff_tmp46, r370_3ff_tmp47);
                r370_3ff_tmp49 = simd_and(r370_3ff_tmp39, r370_3ff_tmp28);
                r370_3ff_tmp50 = simd_or(r370_3ff_tmp48, r370_3ff_tmp49);
                r370_3ff_tmp51 = simd_and(r370_3ff_tmp39, r370_3ff_tmp31);
                r370_3ff_tmp52 = simd_or(r370_3ff_tmp50, r370_3ff_tmp51);
                r370_3ff_tmp53 = simd_and(r370_3ff_tmp39, r100_3ff_tmp3);
                r370_3ff_tmp54 = simd_or(r370_3ff_tmp52, r370_3ff_tmp53);
                r370_3ff_tmp55 = simd_not(tmp7);
                r370_3ff_tmp56 = simd_or(simd_and(basis_bits.bit_3, r370_3ff_tmp55), simd_andc(r80_7ff_tmp18, basis_bits.bit_3));
                r370_3ff_tmp57 = simd_and(r370_3ff_tmp14, r370_3ff_tmp56);
                r370_3ff_tmp58 = simd_or(r370_3ff_tmp54, r370_3ff_tmp57);
                r370_3ff_tmp59 = simd_and(byte_range_b0_bf, r80_7ff_tmp10);
                r370_3ff_tmp60 = simd_or(r370_3ff_tmp58, r370_3ff_tmp59);
                r370_3ff_tmp61 = simd_andc(r370_3ff_tmp27, tmp8);
                r370_3ff_tmp62 = simd_and(byte_range_b0_bf, r370_3ff_tmp61);
                r370_3ff_tmp63 = simd_or(r370_3ff_tmp60, r370_3ff_tmp62);
                r370_3ff_tmp64 = simd_and(byte_range_b0_bf, r370_3ff_tmp31);
                cc_range_3c0_3fb_2 = simd_or(r370_3ff_tmp63, r370_3ff_tmp64);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(11), byte_cf_adv));
                r370_3ff_tmp65 = simd_and(byte_cf_adv, cc_range_3c0_3fb_2);
                struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r370_3ff_tmp65);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 10);
            }
            r80_7ff_tmp24 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp25 = simd_and(byte_range_c0_ff, r80_7ff_tmp24);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp25, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(12, 7))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp25, tmp7);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(12, 4))) {
                byte_d0 = simd_andc(r80_7ff_tmp25, tmp9);
                byte_range_b0_bf = r80_7ff_tmp7;
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_d0, carryQ.get_carry_in(12), byte_d0_adv));
                r400_4ff_tmp1 = simd_and(byte_d0_adv, byte_range_b0_bf);
                struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r400_4ff_tmp1);
                r400_4ff_tmp2 = simd_andc(r80_7ff_tmp9, tmp7);
                byte_d1 = simd_and(r80_7ff_tmp25, r400_4ff_tmp2);
                r400_4ff_tmp3 = simd_andc(r80_7ff_tmp5, basis_bits.bit_2);
                r400_4ff_tmp4 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r400_4ff_tmp5 = simd_and(r80_7ff_tmp5, r400_4ff_tmp4);
                r400_4ff_tmp6 = simd_and(r400_4ff_tmp5, r400_4ff_tmp2);
                r400_4ff_tmp7 = simd_or(r400_4ff_tmp3, r400_4ff_tmp6);
                r400_4ff_tmp8 = simd_and(r400_4ff_tmp5, r80_7ff_tmp12);
                r400_4ff_tmp9 = simd_or(r400_4ff_tmp7, r400_4ff_tmp8);
                r400_4ff_tmp10 = simd_and(r400_4ff_tmp5, r80_7ff_tmp10);
                r400_4ff_tmp11 = simd_or(r400_4ff_tmp9, r400_4ff_tmp10);
                r400_4ff_tmp12 = simd_and(r80_7ff_tmp8, tmp3);
                r400_4ff_tmp13 = simd_and(r400_4ff_tmp5, r400_4ff_tmp12);
                r400_4ff_tmp14 = simd_or(r400_4ff_tmp11, r400_4ff_tmp13);
                r400_4ff_tmp15 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r400_4ff_tmp16 = simd_and(r400_4ff_tmp15, r80_7ff_tmp9);
                r400_4ff_tmp17 = simd_and(r400_4ff_tmp5, r400_4ff_tmp16);
                r400_4ff_tmp18 = simd_or(r400_4ff_tmp14, r400_4ff_tmp17);
                r400_4ff_tmp19 = simd_and(r400_4ff_tmp15, tmp3);
                r400_4ff_tmp20 = simd_and(r400_4ff_tmp5, r400_4ff_tmp19);
                r400_4ff_tmp21 = simd_or(r400_4ff_tmp18, r400_4ff_tmp20);
                r400_4ff_tmp22 = simd_and(r80_7ff_tmp17, r80_7ff_tmp9);
                r400_4ff_tmp23 = simd_and(r400_4ff_tmp5, r400_4ff_tmp22);
                r400_4ff_tmp24 = simd_or(r400_4ff_tmp21, r400_4ff_tmp23);
                r400_4ff_tmp25 = simd_and(r400_4ff_tmp5, r80_7ff_tmp18);
                r400_4ff_tmp26 = simd_or(r400_4ff_tmp24, r400_4ff_tmp25);
                r400_4ff_tmp27 = simd_and(byte_range_b0_bf, r400_4ff_tmp2);
                r400_4ff_tmp28 = simd_or(r400_4ff_tmp26, r400_4ff_tmp27);
                r400_4ff_tmp29 = simd_and(byte_range_b0_bf, r80_7ff_tmp12);
                r400_4ff_tmp30 = simd_or(r400_4ff_tmp28, r400_4ff_tmp29);
                r400_4ff_tmp31 = simd_and(byte_range_b0_bf, r80_7ff_tmp10);
                r400_4ff_tmp32 = simd_or(r400_4ff_tmp30, r400_4ff_tmp31);
                r400_4ff_tmp33 = simd_and(byte_range_b0_bf, r400_4ff_tmp12);
                r400_4ff_tmp34 = simd_or(r400_4ff_tmp32, r400_4ff_tmp33);
                r400_4ff_tmp35 = simd_and(byte_range_b0_bf, r400_4ff_tmp16);
                r400_4ff_tmp36 = simd_or(r400_4ff_tmp34, r400_4ff_tmp35);
                r400_4ff_tmp37 = simd_and(byte_range_b0_bf, r400_4ff_tmp19);
                r400_4ff_tmp38 = simd_or(r400_4ff_tmp36, r400_4ff_tmp37);
                r400_4ff_tmp39 = simd_and(byte_range_b0_bf, r400_4ff_tmp22);
                r400_4ff_tmp40 = simd_or(r400_4ff_tmp38, r400_4ff_tmp39);
                r400_4ff_tmp41 = simd_and(byte_range_b0_bf, r80_7ff_tmp18);
                cc_range_440_47f_2 = simd_or(r400_4ff_tmp40, r400_4ff_tmp41);
                carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_d1, carryQ.get_carry_in(13), byte_d1_adv));
                r400_4ff_tmp42 = simd_and(byte_d1_adv, cc_range_440_47f_2);
                struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r400_4ff_tmp42);
                byte_d2 = simd_and(r80_7ff_tmp25, r80_7ff_tmp4);
                r400_4ff_tmp43 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                r400_4ff_tmp44 = simd_or(r400_4ff_tmp2, r400_4ff_tmp19);
                r400_4ff_tmp45 = simd_or(r400_4ff_tmp44, r400_4ff_tmp22);
                r400_4ff_tmp46 = simd_or(r400_4ff_tmp45, r80_7ff_tmp18);
                r400_4ff_tmp47 = simd_and(r400_4ff_tmp43, r400_4ff_tmp46);
                r400_4ff_tmp48 = simd_and(r80_7ff_tmp5, r80_7ff_tmp24);
                r400_4ff_tmp49 = simd_and(r400_4ff_tmp48, r400_4ff_tmp2);
                r400_4ff_tmp50 = simd_or(r400_4ff_tmp47, r400_4ff_tmp49);
                r400_4ff_tmp51 = simd_and(r400_4ff_tmp48, r80_7ff_tmp12);
                r400_4ff_tmp52 = simd_or(r400_4ff_tmp50, r400_4ff_tmp51);
                r400_4ff_tmp53 = simd_and(r400_4ff_tmp48, r80_7ff_tmp10);
                r400_4ff_tmp54 = simd_or(r400_4ff_tmp52, r400_4ff_tmp53);
                r400_4ff_tmp55 = simd_and(r400_4ff_tmp48, r400_4ff_tmp12);
                r400_4ff_tmp56 = simd_or(r400_4ff_tmp54, r400_4ff_tmp55);
                r400_4ff_tmp57 = simd_and(r400_4ff_tmp48, r400_4ff_tmp16);
                r400_4ff_tmp58 = simd_or(r400_4ff_tmp56, r400_4ff_tmp57);
                r400_4ff_tmp59 = simd_and(r400_4ff_tmp48, r400_4ff_tmp19);
                r400_4ff_tmp60 = simd_or(r400_4ff_tmp58, r400_4ff_tmp59);
                r400_4ff_tmp61 = simd_and(r400_4ff_tmp48, r400_4ff_tmp22);
                r400_4ff_tmp62 = simd_or(r400_4ff_tmp60, r400_4ff_tmp61);
                r400_4ff_tmp63 = simd_and(r400_4ff_tmp48, r80_7ff_tmp18);
                r400_4ff_tmp64 = simd_or(r400_4ff_tmp62, r400_4ff_tmp63);
                r400_4ff_tmp65 = simd_or(r400_4ff_tmp64, r400_4ff_tmp6);
                r400_4ff_tmp66 = simd_or(r400_4ff_tmp65, r400_4ff_tmp8);
                r400_4ff_tmp67 = simd_or(r400_4ff_tmp66, r400_4ff_tmp10);
                r400_4ff_tmp68 = simd_or(r400_4ff_tmp67, r400_4ff_tmp13);
                r400_4ff_tmp69 = simd_or(r400_4ff_tmp68, r400_4ff_tmp17);
                r400_4ff_tmp70 = simd_or(r400_4ff_tmp69, r400_4ff_tmp20);
                r400_4ff_tmp71 = simd_or(r400_4ff_tmp70, r400_4ff_tmp23);
                r400_4ff_tmp72 = simd_or(r400_4ff_tmp71, r400_4ff_tmp25);
                r400_4ff_tmp73 = simd_or(r400_4ff_tmp72, r400_4ff_tmp27);
                r400_4ff_tmp74 = simd_or(r400_4ff_tmp73, r400_4ff_tmp29);
                r400_4ff_tmp75 = simd_or(r400_4ff_tmp74, r400_4ff_tmp31);
                r400_4ff_tmp76 = simd_or(r400_4ff_tmp75, r400_4ff_tmp33);
                r400_4ff_tmp77 = simd_or(r400_4ff_tmp76, r400_4ff_tmp35);
                r400_4ff_tmp78 = simd_or(r400_4ff_tmp77, r400_4ff_tmp37);
                r400_4ff_tmp79 = simd_or(r400_4ff_tmp78, r400_4ff_tmp39);
                cc_range_481_4bf_2 = simd_or(r400_4ff_tmp79, r400_4ff_tmp41);
                carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(14), byte_d2_adv));
                r400_4ff_tmp80 = simd_and(byte_d2_adv, cc_range_481_4bf_2);
                struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r400_4ff_tmp80);
                byte_d3 = simd_and(r80_7ff_tmp25, r80_7ff_tmp12);
                r400_4ff_tmp81 = simd_andc(r80_7ff_tmp8, tmp8);
                r400_4ff_tmp82 = simd_or(r80_7ff_tmp4, r400_4ff_tmp81);
                r400_4ff_tmp83 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
                r400_4ff_tmp84 = simd_or(r400_4ff_tmp82, r400_4ff_tmp83);
                r400_4ff_tmp85 = simd_andc(r400_4ff_tmp15, tmp8);
                r400_4ff_tmp86 = simd_or(r400_4ff_tmp84, r400_4ff_tmp85);
                r400_4ff_tmp87 = simd_and(r400_4ff_tmp15, r80_7ff_tmp3);
                r400_4ff_tmp88 = simd_or(r400_4ff_tmp86, r400_4ff_tmp87);
                r400_4ff_tmp89 = simd_andc(r80_7ff_tmp17, tmp8);
                r400_4ff_tmp90 = simd_or(r400_4ff_tmp88, r400_4ff_tmp89);
                r400_4ff_tmp91 = simd_and(r80_7ff_tmp17, basis_bits.bit_6);
                r400_4ff_tmp92 = simd_or(r400_4ff_tmp90, r400_4ff_tmp91);
                r400_4ff_tmp93 = simd_and(r400_4ff_tmp43, r400_4ff_tmp92);
                r400_4ff_tmp94 = simd_or(r400_4ff_tmp93, r400_4ff_tmp49);
                r400_4ff_tmp95 = simd_or(r400_4ff_tmp94, r400_4ff_tmp51);
                r400_4ff_tmp96 = simd_or(r400_4ff_tmp95, r400_4ff_tmp53);
                r400_4ff_tmp97 = simd_or(r400_4ff_tmp96, r400_4ff_tmp55);
                r400_4ff_tmp98 = simd_or(r400_4ff_tmp97, r400_4ff_tmp57);
                r400_4ff_tmp99 = simd_or(r400_4ff_tmp98, r400_4ff_tmp59);
                r400_4ff_tmp100 = simd_or(r400_4ff_tmp99, r400_4ff_tmp61);
                r400_4ff_tmp101 = simd_or(r400_4ff_tmp100, r400_4ff_tmp63);
                r400_4ff_tmp102 = simd_or(r400_4ff_tmp101, r400_4ff_tmp6);
                r400_4ff_tmp103 = simd_or(r400_4ff_tmp102, r400_4ff_tmp8);
                r400_4ff_tmp104 = simd_or(r400_4ff_tmp103, r400_4ff_tmp10);
                r400_4ff_tmp105 = simd_or(r400_4ff_tmp104, r400_4ff_tmp13);
                r400_4ff_tmp106 = simd_or(r400_4ff_tmp105, r400_4ff_tmp17);
                r400_4ff_tmp107 = simd_or(r400_4ff_tmp106, r400_4ff_tmp20);
                r400_4ff_tmp108 = simd_or(r400_4ff_tmp107, r400_4ff_tmp23);
                r400_4ff_tmp109 = simd_or(r400_4ff_tmp108, r400_4ff_tmp25);
                r400_4ff_tmp110 = simd_or(r400_4ff_tmp109, r400_4ff_tmp27);
                r400_4ff_tmp111 = simd_or(r400_4ff_tmp110, r400_4ff_tmp29);
                r400_4ff_tmp112 = simd_or(r400_4ff_tmp111, r400_4ff_tmp31);
                r400_4ff_tmp113 = simd_or(r400_4ff_tmp112, r400_4ff_tmp33);
                r400_4ff_tmp114 = simd_or(r400_4ff_tmp113, r400_4ff_tmp35);
                r400_4ff_tmp115 = simd_or(r400_4ff_tmp114, r400_4ff_tmp37);
                r400_4ff_tmp116 = simd_or(r400_4ff_tmp115, r400_4ff_tmp39);
                cc_range_4c2_4ff_2 = simd_or(r400_4ff_tmp116, r400_4ff_tmp41);
                carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(15), byte_d3_adv));
                r400_4ff_tmp117 = simd_and(byte_d3_adv, cc_range_4c2_4ff_2);
                struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r400_4ff_tmp117);
              }
              else {
                carryQ.CarryDequeueEnqueue(12, 4);
              }
              r400_5ff_tmp1 = simd_andc(r80_7ff_tmp8, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp25, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp25, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(16), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(17, 2))) {
                r500_58f_tmp1 = simd_andc(r80_7ff_tmp8, tmp8);
                byte_d4 = simd_and(r80_7ff_tmp25, r500_58f_tmp1);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp6);
                carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(17), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp3)) {
                  cc_range_501_52f_2 = simd_and(byte_range_80_af, basis_bits.bit_7);
                  byte_d4_adv = r500_58f_tmp2;
                  r500_52f_tmp1 = simd_and(byte_d4_adv, cc_range_501_52f_2);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r500_52f_tmp1);
                }
                byte_range_b0_bf = r80_7ff_tmp7;
                r500_58f_tmp4 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                byte_d5 = simd_and(r80_7ff_tmp25, r80_7ff_tmp10);
                r500_58f_tmp5 = simd_or(r500_58f_tmp4, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp4);
                if ((bitblock::any(r500_58f_tmp6) || carryQ.CarryTest(18, 1))) {
                  r530_58f_tmp1 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                  r530_58f_tmp2 = simd_or(basis_bits.bit_3, tmp9);
                  byte_range_a1_bf = simd_and(r530_58f_tmp1, r530_58f_tmp2);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(18), byte_d5_adv));
                  r530_58f_tmp3 = simd_and(byte_d5_adv, byte_range_a1_bf);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r530_58f_tmp3);
                  byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_d6_adv = r400_5ff_tmp3;
                  r530_58f_tmp4 = simd_and(byte_d6_adv, byte_range_80_87);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r530_58f_tmp4);
                }
                else {
                  carryQ.CarryDequeueEnqueue(18, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(17, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(12, 7);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 19);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(19, 29))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp7);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp8);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(19), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(20, 19))) {
              r800_4dff_tmp1 = simd_or(tmp7, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(20, 10))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp7);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(20, 10))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(r800_ffff_tmp1, r800_1fff_tmp1);
                  byte_b5 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(20), r1000_1fff_tmp4));
                  sequence_e1_b5 = simd_and(r1000_1fff_tmp4, byte_b5);
                  byte_e1_adv = r1000_1fff_tmp4;
                  r1000_1fff_tmp5 = simd_and(r800_1fff_tmp1, basis_bits.bit_4);
                  cc_range_1d79_1d7d_3 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp5);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e1_b5, carryQ.get_carry_in(21), sequence_e1_b5_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_b5_adv, cc_range_1d79_1d7d_3);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r1000_1fff_tmp6);
                  r1000_1fff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp8 = simd_andc(r1000_1fff_tmp7, tmp8);
                  byte_b8 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp8);
                  sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
                  cc_range_1e01_1e3f_3 = simd_and(r800_ffff_tmp3, basis_bits.bit_7);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(22), sequence_e1_b8_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_b8_adv, cc_range_1e01_1e3f_3);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r1000_1fff_tmp9);
                  r1000_1fff_tmp10 = simd_and(r1000_1fff_tmp7, r800_1fff_tmp1);
                  byte_b9 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp10);
                  sequence_e1_b9 = simd_and(byte_e1_adv, byte_b9);
                  cc_range_1e41_1e7f_3 = cc_range_1e01_1e3f_3;
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e1_b9, carryQ.get_carry_in(23), sequence_e1_b9_adv));
                  r1000_1fff_tmp11 = simd_and(sequence_e1_b9_adv, cc_range_1e41_1e7f_3);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r1000_1fff_tmp11);
                  r1000_1fff_tmp12 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp13 = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp12);
                  byte_ba = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp13);
                  sequence_e1_ba = simd_and(byte_e1_adv, byte_ba);
                  r1000_1fff_tmp14 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp15 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp14);
                  r1000_1fff_tmp16 = simd_andc(basis_bits.bit_7, tmp7);
                  r1000_1fff_tmp17 = simd_or(r1000_1fff_tmp16, r1000_1fff_tmp3);
                  r1000_1fff_tmp18 = simd_and(r800_ffff_tmp1, tmp3);
                  r1000_1fff_tmp19 = simd_or(r1000_1fff_tmp17, r1000_1fff_tmp18);
                  r1000_1fff_tmp20 = simd_or(r1000_1fff_tmp19, r1000_1fff_tmp10);
                  r1000_1fff_tmp21 = simd_and(r1000_1fff_tmp7, tmp3);
                  r1000_1fff_tmp22 = simd_or(r1000_1fff_tmp20, r1000_1fff_tmp21);
                  r1000_1fff_tmp23 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp24 = simd_and(r1000_1fff_tmp23, r800_1fff_tmp1);
                  r1000_1fff_tmp25 = simd_or(r1000_1fff_tmp22, r1000_1fff_tmp24);
                  r1000_1fff_tmp26 = simd_and(r1000_1fff_tmp23, tmp3);
                  r1000_1fff_tmp27 = simd_or(r1000_1fff_tmp25, r1000_1fff_tmp26);
                  r1000_1fff_tmp28 = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp27);
                  r1000_1fff_tmp29 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp30 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp29);
                  r1000_1fff_tmp31 = simd_and(r1000_1fff_tmp30, r800_1fff_tmp2);
                  r1000_1fff_tmp32 = simd_or(r1000_1fff_tmp28, r1000_1fff_tmp31);
                  r1000_1fff_tmp33 = simd_andc(tmp3, tmp7);
                  r1000_1fff_tmp34 = simd_and(r1000_1fff_tmp30, r1000_1fff_tmp33);
                  r1000_1fff_tmp35 = simd_or(r1000_1fff_tmp32, r1000_1fff_tmp34);
                  r1000_1fff_tmp36 = simd_not(basis_bits.bit_5);
                  r1000_1fff_tmp37 = simd_and(basis_bits.bit_5, tmp8);
                  r1000_1fff_tmp38 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp36), simd_andc(r1000_1fff_tmp37, basis_bits.bit_4));
                  r1000_1fff_tmp39 = simd_and(r1000_1fff_tmp30, r1000_1fff_tmp38);
                  r1000_1fff_tmp40 = simd_or(r1000_1fff_tmp35, r1000_1fff_tmp39);
                  r1000_1fff_tmp41 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r1000_1fff_tmp42 = simd_and(r1000_1fff_tmp41, r800_1fff_tmp2);
                  r1000_1fff_tmp43 = simd_or(r1000_1fff_tmp40, r1000_1fff_tmp42);
                  r1000_1fff_tmp44 = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp33);
                  r1000_1fff_tmp45 = simd_or(r1000_1fff_tmp43, r1000_1fff_tmp44);
                  r1000_1fff_tmp46 = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp3);
                  r1000_1fff_tmp47 = simd_or(r1000_1fff_tmp45, r1000_1fff_tmp46);
                  r1000_1fff_tmp48 = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp18);
                  r1000_1fff_tmp49 = simd_or(r1000_1fff_tmp47, r1000_1fff_tmp48);
                  r1000_1fff_tmp50 = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp10);
                  r1000_1fff_tmp51 = simd_or(r1000_1fff_tmp49, r1000_1fff_tmp50);
                  r1000_1fff_tmp52 = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp21);
                  r1000_1fff_tmp53 = simd_or(r1000_1fff_tmp51, r1000_1fff_tmp52);
                  r1000_1fff_tmp54 = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp24);
                  r1000_1fff_tmp55 = simd_or(r1000_1fff_tmp53, r1000_1fff_tmp54);
                  r1000_1fff_tmp56 = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp26);
                  r1000_1fff_tmp57 = simd_or(r1000_1fff_tmp55, r1000_1fff_tmp56);
                  r1000_1fff_tmp58 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp2);
                  r1000_1fff_tmp59 = simd_or(r1000_1fff_tmp57, r1000_1fff_tmp58);
                  r1000_1fff_tmp60 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp33);
                  r1000_1fff_tmp61 = simd_or(r1000_1fff_tmp59, r1000_1fff_tmp60);
                  r1000_1fff_tmp62 = simd_or(r1000_1fff_tmp61, byte_b5);
                  r1000_1fff_tmp63 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp18);
                  r1000_1fff_tmp64 = simd_or(r1000_1fff_tmp62, r1000_1fff_tmp63);
                  r1000_1fff_tmp65 = simd_or(r1000_1fff_tmp64, byte_b9);
                  r1000_1fff_tmp66 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp21);
                  r1000_1fff_tmp67 = simd_or(r1000_1fff_tmp65, r1000_1fff_tmp66);
                  r1000_1fff_tmp68 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp24);
                  r1000_1fff_tmp69 = simd_or(r1000_1fff_tmp67, r1000_1fff_tmp68);
                  r1000_1fff_tmp70 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp26);
                  cc_range_1e81_1ebf_3 = simd_or(r1000_1fff_tmp69, r1000_1fff_tmp70);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e1_ba, carryQ.get_carry_in(24), sequence_e1_ba_adv));
                  r1000_1fff_tmp71 = simd_and(sequence_e1_ba_adv, cc_range_1e81_1ebf_3);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r1000_1fff_tmp71);
                  byte_bb = r1000_1fff_tmp66;
                  sequence_e1_bb = simd_and(byte_e1_adv, byte_bb);
                  cc_range_1ec1_1eff_3 = cc_range_1e01_1e3f_3;
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e1_bb, carryQ.get_carry_in(25), sequence_e1_bb_adv));
                  r1000_1fff_tmp72 = simd_and(sequence_e1_bb_adv, cc_range_1ec1_1eff_3);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r1000_1fff_tmp72);
                  r1000_1fff_tmp73 = simd_andc(r1000_1fff_tmp23, tmp8);
                  byte_bc = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp73);
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  r1000_1fff_tmp74 = simd_andc(r1000_1fff_tmp15, basis_bits.bit_4);
                  r1000_1fff_tmp75 = simd_andc(r1000_1fff_tmp30, basis_bits.bit_4);
                  r1000_1fff_tmp76 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp77 = simd_andc(r1000_1fff_tmp75, r1000_1fff_tmp76);
                  r1000_1fff_tmp78 = simd_or(r1000_1fff_tmp74, r1000_1fff_tmp77);
                  r1000_1fff_tmp79 = simd_andc(r1000_1fff_tmp41, basis_bits.bit_4);
                  r1000_1fff_tmp80 = simd_or(r1000_1fff_tmp78, r1000_1fff_tmp79);
                  r1000_1fff_tmp81 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  cc_range_1f00_1f30_3 = simd_or(r1000_1fff_tmp80, r1000_1fff_tmp81);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(26), sequence_e1_bc_adv));
                  r1000_1fff_tmp82 = simd_and(sequence_e1_bc_adv, cc_range_1f00_1f30_3);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r1000_1fff_tmp82);
                  byte_bd = r1000_1fff_tmp68;
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  r1000_1fff_tmp83 = simd_andc(r1000_1fff_tmp74, r1000_1fff_tmp76);
                  r1000_1fff_tmp84 = simd_or(r1000_1fff_tmp83, r1000_1fff_tmp75);
                  r1000_1fff_tmp85 = simd_or(r1000_1fff_tmp84, r1000_1fff_tmp79);
                  r1000_1fff_tmp86 = simd_and(basis_bits.bit_4, r1000_1fff_tmp76);
                  r1000_1fff_tmp87 = simd_andc(r1000_1fff_tmp2, r1000_1fff_tmp86);
                  cc_range_1f40_1f70_3 = simd_or(r1000_1fff_tmp85, r1000_1fff_tmp87);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(27), sequence_e1_bd_adv));
                  r1000_1fff_tmp88 = simd_and(sequence_e1_bd_adv, cc_range_1f40_1f70_3);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r1000_1fff_tmp88);
                  r1000_1fff_tmp89 = simd_and(r1000_1fff_tmp23, r1000_1fff_tmp12);
                  byte_be = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp89);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  r1000_1fff_tmp90 = simd_andc(r1000_1fff_tmp14, r1000_1fff_tmp29);
                  r1000_1fff_tmp91 = simd_andc(r1000_1fff_tmp90, r80_10ffff_tmp1);
                  r1000_1fff_tmp92 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp91);
                  r1000_1fff_tmp93 = simd_andc(r1000_1fff_tmp92, basis_bits.bit_4);
                  r1000_1fff_tmp94 = simd_andc(r1000_1fff_tmp81, r1000_1fff_tmp37);
                  r1000_1fff_tmp95 = simd_or(r1000_1fff_tmp93, r1000_1fff_tmp94);
                  r1000_1fff_tmp96 = simd_and(r800_ffff_tmp1, basis_bits.bit_6);
                  r1000_1fff_tmp97 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp96);
                  r1000_1fff_tmp98 = simd_or(r1000_1fff_tmp95, r1000_1fff_tmp97);
                  cc_range_1f80_1fbe_3 = simd_or(r1000_1fff_tmp98, byte_be);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(28), sequence_e1_be_adv));
                  r1000_1fff_tmp99 = simd_and(sequence_e1_be_adv, cc_range_1f80_1fbe_3);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r1000_1fff_tmp99);
                  byte_bf = r1000_1fff_tmp70;
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  r1000_1fff_tmp100 = simd_not(tmp8);
                  r1000_1fff_tmp101 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp100), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r1000_1fff_tmp102 = simd_and(r1000_1fff_tmp74, r1000_1fff_tmp101);
                  r1000_1fff_tmp103 = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp96);
                  r1000_1fff_tmp104 = simd_or(r1000_1fff_tmp102, r1000_1fff_tmp103);
                  r1000_1fff_tmp105 = simd_andc(r1000_1fff_tmp30, tmp7);
                  r1000_1fff_tmp106 = simd_or(r1000_1fff_tmp104, r1000_1fff_tmp105);
                  r1000_1fff_tmp107 = simd_and(r1000_1fff_tmp30, r1000_1fff_tmp96);
                  r1000_1fff_tmp108 = simd_or(r1000_1fff_tmp106, r1000_1fff_tmp107);
                  r1000_1fff_tmp109 = simd_or(r1000_1fff_tmp108, r1000_1fff_tmp79);
                  r1000_1fff_tmp110 = simd_and(r1000_1fff_tmp81, r1000_1fff_tmp101);
                  r1000_1fff_tmp111 = simd_or(r1000_1fff_tmp109, r1000_1fff_tmp110);
                  cc_range_1fc2_1ff6_3 = simd_or(r1000_1fff_tmp111, r1000_1fff_tmp97);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(29), sequence_e1_bf_adv));
                  r1000_1fff_tmp112 = simd_and(sequence_e1_bf_adv, cc_range_1fc2_1ff6_3);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r1000_1fff_tmp112);
                }
                else {
                  carryQ.CarryDequeueEnqueue(20, 10);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(20, 10);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp7);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(30, 9))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp7);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(30, 9))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp3);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(30), r2000_2fff_tmp5));
                  sequence_e2_85 = simd_and(r2000_2fff_tmp5, byte_85);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp7 = simd_and(r2000_2fff_tmp6, r2000_4dff_tmp1);
                  r2000_2fff_tmp8 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp7);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp10 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp9);
                  cc_range_214e_2170_3 = simd_or(r2000_2fff_tmp8, r2000_2fff_tmp10);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(31), sequence_e2_85_adv));
                  r2000_2fff_tmp11 = simd_and(sequence_e2_85_adv, cc_range_214e_2170_3);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r2000_2fff_tmp11);
                  r2000_2fff_tmp12 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp12);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp2);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(32), sequence_e2_86_adv));
                  r2000_2fff_tmp13 = simd_and(sequence_e2_86_adv, byte_84);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r2000_2fff_tmp13);
                  r2000_2fff_tmp14 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp15 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp14);
                  r2000_2fff_tmp16 = simd_andc(tmp3, tmp7);
                  byte_93 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp16);
                  sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
                  r2000_2fff_tmp17 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp18 = simd_and(basis_bits.bit_4, r2000_2fff_tmp17);
                  r2000_2fff_tmp19 = simd_or(basis_bits.bit_3, r2000_2fff_tmp18);
                  r2000_2fff_tmp20 = simd_not(r2000_2fff_tmp19);
                  r2000_2fff_tmp21 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp20), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_a9 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp21);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(33), sequence_e2_93_adv));
                  r2000_2fff_tmp22 = simd_and(sequence_e2_93_adv, byte_range_90_a9);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r2000_2fff_tmp22);
                  byte_b0 = simd_andc(r2000_2fff_tmp10, tmp9);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  byte_range_b0_bf = r2000_2fff_tmp10;
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(34), sequence_e2_b0_adv));
                  r2000_2fff_tmp23 = simd_and(sequence_e2_b0_adv, byte_range_b0_bf);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r2000_2fff_tmp23);
                  r2000_2fff_tmp24 = simd_andc(r2000_2fff_tmp3, tmp7);
                  byte_b1 = simd_and(byte_range_b0_bf, r2000_2fff_tmp24);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp25 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp26 = simd_and(r2000_2fff_tmp6, tmp3);
                  r2000_2fff_tmp27 = simd_and(basis_bits.bit_3, r2000_2fff_tmp26);
                  r2000_2fff_tmp28 = simd_andc(r2000_2fff_tmp25, r2000_2fff_tmp27);
                  r2000_2fff_tmp29 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r2000_2fff_tmp30 = simd_and(r2000_2fff_tmp29, r2000_2fff_tmp24);
                  r2000_2fff_tmp31 = simd_or(r2000_2fff_tmp28, r2000_2fff_tmp30);
                  r2000_2fff_tmp32 = simd_and(r2000_2fff_tmp29, r800_ffff_tmp1);
                  r2000_2fff_tmp33 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp34 = simd_and(r2000_2fff_tmp32, r2000_2fff_tmp33);
                  r2000_2fff_tmp35 = simd_or(r2000_2fff_tmp31, r2000_2fff_tmp34);
                  r2000_2fff_tmp36 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp37 = simd_andc(r2000_2fff_tmp36, tmp8);
                  r2000_2fff_tmp38 = simd_and(r2000_2fff_tmp29, r2000_2fff_tmp37);
                  r2000_2fff_tmp39 = simd_or(r2000_2fff_tmp35, r2000_2fff_tmp38);
                  r2000_2fff_tmp40 = simd_and(r2000_2fff_tmp36, r2000_4dff_tmp1);
                  r2000_2fff_tmp41 = simd_and(r2000_2fff_tmp29, r2000_2fff_tmp40);
                  r2000_2fff_tmp42 = simd_or(r2000_2fff_tmp39, r2000_2fff_tmp41);
                  r2000_2fff_tmp43 = simd_andc(r2000_2fff_tmp6, tmp8);
                  r2000_2fff_tmp44 = simd_and(r2000_2fff_tmp29, r2000_2fff_tmp43);
                  r2000_2fff_tmp45 = simd_or(r2000_2fff_tmp42, r2000_2fff_tmp44);
                  r2000_2fff_tmp46 = simd_and(byte_range_b0_bf, r2000_2fff_tmp16);
                  r2000_2fff_tmp47 = simd_or(r2000_2fff_tmp45, r2000_2fff_tmp46);
                  r2000_2fff_tmp48 = simd_and(byte_range_b0_bf, r2000_2fff_tmp12);
                  cc_range_2c40_2c76_3 = simd_or(r2000_2fff_tmp47, r2000_2fff_tmp48);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(35), sequence_e2_b1_adv));
                  r2000_2fff_tmp49 = simd_and(sequence_e2_b1_adv, cc_range_2c40_2c76_3);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r2000_2fff_tmp49);
                  byte_b2 = simd_and(byte_range_b0_bf, r2000_4dff_tmp2);
                  sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
                  cc_range_2c81_2cbf_3 = simd_and(r800_ffff_tmp3, basis_bits.bit_7);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(36), sequence_e2_b2_adv));
                  r2000_2fff_tmp50 = simd_and(sequence_e2_b2_adv, cc_range_2c81_2cbf_3);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r2000_2fff_tmp50);
                  byte_b3 = r2000_2fff_tmp46;
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp51 = simd_andc(basis_bits.bit_7, tmp7);
                  r2000_2fff_tmp52 = simd_or(r2000_2fff_tmp51, r2000_2fff_tmp4);
                  r2000_2fff_tmp53 = simd_and(r800_ffff_tmp1, tmp3);
                  r2000_2fff_tmp54 = simd_or(r2000_2fff_tmp52, r2000_2fff_tmp53);
                  r2000_2fff_tmp55 = simd_and(r2000_2fff_tmp36, r2000_2fff_tmp3);
                  r2000_2fff_tmp56 = simd_or(r2000_2fff_tmp54, r2000_2fff_tmp55);
                  r2000_2fff_tmp57 = simd_and(r2000_2fff_tmp36, tmp3);
                  r2000_2fff_tmp58 = simd_or(r2000_2fff_tmp56, r2000_2fff_tmp57);
                  r2000_2fff_tmp59 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp3);
                  r2000_2fff_tmp60 = simd_or(r2000_2fff_tmp58, r2000_2fff_tmp59);
                  r2000_2fff_tmp61 = simd_or(r2000_2fff_tmp60, r2000_2fff_tmp26);
                  r2000_2fff_tmp62 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp61);
                  r2000_2fff_tmp63 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp24);
                  r2000_2fff_tmp64 = simd_or(r2000_2fff_tmp62, r2000_2fff_tmp63);
                  r2000_2fff_tmp65 = simd_or(r2000_2fff_tmp64, byte_93);
                  r2000_2fff_tmp66 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp4);
                  r2000_2fff_tmp67 = simd_or(r2000_2fff_tmp65, r2000_2fff_tmp66);
                  r2000_2fff_tmp68 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp53);
                  r2000_2fff_tmp69 = simd_or(r2000_2fff_tmp67, r2000_2fff_tmp68);
                  r2000_2fff_tmp70 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp55);
                  r2000_2fff_tmp71 = simd_or(r2000_2fff_tmp69, r2000_2fff_tmp70);
                  r2000_2fff_tmp72 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp57);
                  r2000_2fff_tmp73 = simd_or(r2000_2fff_tmp71, r2000_2fff_tmp72);
                  r2000_2fff_tmp74 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp59);
                  r2000_2fff_tmp75 = simd_or(r2000_2fff_tmp73, r2000_2fff_tmp74);
                  r2000_2fff_tmp76 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp26);
                  r2000_2fff_tmp77 = simd_or(r2000_2fff_tmp75, r2000_2fff_tmp76);
                  r2000_2fff_tmp78 = simd_or(r2000_2fff_tmp77, r2000_2fff_tmp30);
                  r2000_2fff_tmp79 = simd_and(r2000_2fff_tmp29, r2000_2fff_tmp16);
                  r2000_2fff_tmp80 = simd_or(r2000_2fff_tmp78, r2000_2fff_tmp79);
                  r2000_2fff_tmp81 = simd_or(r2000_2fff_tmp80, r2000_2fff_tmp44);
                  r2000_2fff_tmp82 = simd_and(r2000_2fff_tmp29, r2000_2fff_tmp7);
                  r2000_2fff_tmp83 = simd_or(r2000_2fff_tmp81, r2000_2fff_tmp82);
                  cc_range_2cc1_2cf3_3 = simd_or(r2000_2fff_tmp83, byte_b3);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(37), sequence_e2_b3_adv));
                  r2000_2fff_tmp84 = simd_and(sequence_e2_b3_adv, cc_range_2cc1_2cf3_3);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r2000_2fff_tmp84);
                  byte_b4 = simd_and(byte_range_b0_bf, r800_ffff_tmp2);
                  sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
                  r2000_2fff_tmp85 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp86 = simd_or(basis_bits.bit_4, r2000_2fff_tmp85);
                  r2000_2fff_tmp87 = simd_or(basis_bits.bit_3, r2000_2fff_tmp86);
                  r2000_2fff_tmp88 = simd_and(basis_bits.bit_2, r2000_2fff_tmp87);
                  r2000_2fff_tmp89 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp88);
                  r2000_2fff_tmp90 = simd_and(r2000_2fff_tmp29, r2000_2fff_tmp53);
                  r2000_2fff_tmp91 = simd_or(r2000_2fff_tmp89, r2000_2fff_tmp90);
                  r2000_2fff_tmp92 = simd_and(r2000_2fff_tmp29, r2000_2fff_tmp59);
                  cc_range_2d00_2d2d_3 = simd_or(r2000_2fff_tmp91, r2000_2fff_tmp92);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(38), sequence_e2_b4_adv));
                  r2000_2fff_tmp93 = simd_and(sequence_e2_b4_adv, cc_range_2d00_2d2d_3);
                  struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r2000_2fff_tmp93);
                }
                else {
                  carryQ.CarryDequeueEnqueue(30, 9);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(30, 9);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(20, 19);
            }
            r800_ffff_tmp9 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp9, r800_ffff_tmp10);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(39, 9))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_99 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[39] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(39), ra000_ffff_tmp8));
              sequence_ea_99 = simd_and(ra000_ffff_tmp8, byte_99);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp9, basis_bits.bit_6);
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_3, ra000_ffff_tmp10);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_2, ra000_ffff_tmp11);
              ra000_ffff_tmp13 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp12);
              cc_range_a641_a66d_3 = simd_and(ra000_ffff_tmp13, basis_bits.bit_7);
              carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(40), sequence_ea_99_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ea_99_adv, cc_range_a641_a66d_3);
              struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, ra000_ffff_tmp14);
              byte_9a = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp15 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp16 = simd_and(basis_bits.bit_3, ra000_ffff_tmp9);
              ra000_ffff_tmp17 = simd_andc(ra000_ffff_tmp15, ra000_ffff_tmp16);
              cc_range_a681_a69b_3 = simd_and(ra000_ffff_tmp17, basis_bits.bit_7);
              carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(41), sequence_ea_9a_adv));
              ra000_ffff_tmp18 = simd_and(sequence_ea_9a_adv, cc_range_a681_a69b_3);
              struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, ra000_ffff_tmp18);
              ra000_ffff_tmp19 = simd_andc(ra000_ffff_tmp9, tmp8);
              byte_9c = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp19);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              ra000_ffff_tmp20 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
              ra000_ffff_tmp21 = simd_andc(tmp3, tmp7);
              ra000_ffff_tmp22 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp6);
              ra000_ffff_tmp23 = simd_or(ra000_ffff_tmp21, ra000_ffff_tmp22);
              ra000_ffff_tmp24 = simd_and(r800_ffff_tmp1, tmp3);
              ra000_ffff_tmp25 = simd_or(ra000_ffff_tmp23, ra000_ffff_tmp24);
              ra000_ffff_tmp26 = simd_or(ra000_ffff_tmp25, ra000_ffff_tmp7);
              ra000_ffff_tmp27 = simd_and(ra000_ffff_tmp1, tmp3);
              ra000_ffff_tmp28 = simd_or(ra000_ffff_tmp26, ra000_ffff_tmp27);
              ra000_ffff_tmp29 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp6);
              ra000_ffff_tmp30 = simd_or(ra000_ffff_tmp28, ra000_ffff_tmp29);
              ra000_ffff_tmp31 = simd_and(ra000_ffff_tmp9, tmp3);
              ra000_ffff_tmp32 = simd_or(ra000_ffff_tmp30, ra000_ffff_tmp31);
              ra000_ffff_tmp33 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp32);
              ra000_ffff_tmp34 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp35 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp34);
              ra000_ffff_tmp36 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp21);
              ra000_ffff_tmp37 = simd_or(ra000_ffff_tmp33, ra000_ffff_tmp36);
              ra000_ffff_tmp38 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp22);
              ra000_ffff_tmp39 = simd_or(ra000_ffff_tmp37, ra000_ffff_tmp38);
              ra000_ffff_tmp40 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp24);
              ra000_ffff_tmp41 = simd_or(ra000_ffff_tmp39, ra000_ffff_tmp40);
              ra000_ffff_tmp42 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp7);
              ra000_ffff_tmp43 = simd_or(ra000_ffff_tmp41, ra000_ffff_tmp42);
              ra000_ffff_tmp44 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp27);
              ra000_ffff_tmp45 = simd_or(ra000_ffff_tmp43, ra000_ffff_tmp44);
              ra000_ffff_tmp46 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp29);
              ra000_ffff_tmp47 = simd_or(ra000_ffff_tmp45, ra000_ffff_tmp46);
              ra000_ffff_tmp48 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp31);
              cc_range_a723_a73f_3 = simd_or(ra000_ffff_tmp47, ra000_ffff_tmp48);
              carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(42), sequence_ea_9c_adv));
              ra000_ffff_tmp49 = simd_and(sequence_ea_9c_adv, cc_range_a723_a73f_3);
              struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, ra000_ffff_tmp49);
              byte_9d = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp29);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              ra000_ffff_tmp50 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp51 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp50);
              ra000_ffff_tmp52 = simd_andc(basis_bits.bit_7, tmp7);
              ra000_ffff_tmp53 = simd_or(ra000_ffff_tmp52, ra000_ffff_tmp22);
              ra000_ffff_tmp54 = simd_or(ra000_ffff_tmp53, ra000_ffff_tmp24);
              ra000_ffff_tmp55 = simd_or(ra000_ffff_tmp54, ra000_ffff_tmp7);
              ra000_ffff_tmp56 = simd_or(ra000_ffff_tmp55, ra000_ffff_tmp27);
              ra000_ffff_tmp57 = simd_or(ra000_ffff_tmp56, ra000_ffff_tmp29);
              ra000_ffff_tmp58 = simd_or(ra000_ffff_tmp57, ra000_ffff_tmp31);
              ra000_ffff_tmp59 = simd_and(ra000_ffff_tmp51, ra000_ffff_tmp58);
              ra000_ffff_tmp60 = simd_andc(ra000_ffff_tmp6, tmp7);
              ra000_ffff_tmp61 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp60);
              ra000_ffff_tmp62 = simd_or(ra000_ffff_tmp59, ra000_ffff_tmp61);
              ra000_ffff_tmp63 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp21);
              ra000_ffff_tmp64 = simd_or(ra000_ffff_tmp62, ra000_ffff_tmp63);
              ra000_ffff_tmp65 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp22);
              ra000_ffff_tmp66 = simd_or(ra000_ffff_tmp64, ra000_ffff_tmp65);
              ra000_ffff_tmp67 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp24);
              ra000_ffff_tmp68 = simd_or(ra000_ffff_tmp66, ra000_ffff_tmp67);
              ra000_ffff_tmp69 = simd_or(ra000_ffff_tmp68, byte_99);
              ra000_ffff_tmp70 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp27);
              ra000_ffff_tmp71 = simd_or(ra000_ffff_tmp69, ra000_ffff_tmp70);
              ra000_ffff_tmp72 = simd_or(ra000_ffff_tmp71, byte_9d);
              ra000_ffff_tmp73 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp31);
              ra000_ffff_tmp74 = simd_or(ra000_ffff_tmp72, ra000_ffff_tmp73);
              ra000_ffff_tmp75 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp60);
              ra000_ffff_tmp76 = simd_or(ra000_ffff_tmp74, ra000_ffff_tmp75);
              ra000_ffff_tmp77 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp21);
              ra000_ffff_tmp78 = simd_or(ra000_ffff_tmp76, ra000_ffff_tmp77);
              ra000_ffff_tmp79 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp22);
              ra000_ffff_tmp80 = simd_or(ra000_ffff_tmp78, ra000_ffff_tmp79);
              ra000_ffff_tmp81 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp24);
              ra000_ffff_tmp82 = simd_or(ra000_ffff_tmp80, ra000_ffff_tmp81);
              ra000_ffff_tmp83 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp7);
              ra000_ffff_tmp84 = simd_or(ra000_ffff_tmp82, ra000_ffff_tmp83);
              ra000_ffff_tmp85 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp27);
              ra000_ffff_tmp86 = simd_or(ra000_ffff_tmp84, ra000_ffff_tmp85);
              ra000_ffff_tmp87 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp29);
              ra000_ffff_tmp88 = simd_or(ra000_ffff_tmp86, ra000_ffff_tmp87);
              ra000_ffff_tmp89 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp31);
              ra000_ffff_tmp90 = simd_or(ra000_ffff_tmp88, ra000_ffff_tmp89);
              ra000_ffff_tmp91 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp3);
              ra000_ffff_tmp92 = simd_or(ra000_ffff_tmp90, ra000_ffff_tmp91);
              ra000_ffff_tmp93 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp19);
              ra000_ffff_tmp94 = simd_or(ra000_ffff_tmp92, ra000_ffff_tmp93);
              cc_range_a741_a77f_3 = simd_or(ra000_ffff_tmp94, ra000_ffff_tmp48);
              carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(43), sequence_ea_9d_adv));
              ra000_ffff_tmp95 = simd_and(sequence_ea_9d_adv, cc_range_a741_a77f_3);
              struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, ra000_ffff_tmp95);
              ra000_ffff_tmp96 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp96);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp97 = simd_or(ra000_ffff_tmp54, ra000_ffff_tmp19);
              ra000_ffff_tmp98 = simd_and(ra000_ffff_tmp51, ra000_ffff_tmp97);
              ra000_ffff_tmp99 = simd_or(ra000_ffff_tmp98, ra000_ffff_tmp61);
              ra000_ffff_tmp100 = simd_or(ra000_ffff_tmp99, ra000_ffff_tmp63);
              ra000_ffff_tmp101 = simd_or(ra000_ffff_tmp100, ra000_ffff_tmp67);
              ra000_ffff_tmp102 = simd_or(ra000_ffff_tmp101, byte_99);
              ra000_ffff_tmp103 = simd_or(ra000_ffff_tmp102, ra000_ffff_tmp70);
              ra000_ffff_tmp104 = simd_or(ra000_ffff_tmp103, byte_9d);
              ra000_ffff_tmp105 = simd_or(ra000_ffff_tmp104, ra000_ffff_tmp73);
              ra000_ffff_tmp106 = simd_or(ra000_ffff_tmp105, ra000_ffff_tmp75);
              ra000_ffff_tmp107 = simd_or(ra000_ffff_tmp106, ra000_ffff_tmp77);
              ra000_ffff_tmp108 = simd_or(ra000_ffff_tmp107, ra000_ffff_tmp79);
              ra000_ffff_tmp109 = simd_or(ra000_ffff_tmp108, ra000_ffff_tmp81);
              cc_range_a781_a7a9_3 = simd_or(ra000_ffff_tmp109, ra000_ffff_tmp83);
              carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(44), sequence_ea_9e_adv));
              ra000_ffff_tmp110 = simd_and(sequence_ea_9e_adv, cc_range_a781_a7a9_3);
              struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, ra000_ffff_tmp110);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp31);
              byte_ac = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp19);
              carryQ.cq[45] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(45), ra000_ffff_tmp111));
              sequence_ef_ac = simd_and(ra000_ffff_tmp111, byte_ac);
              byte_ef_adv = ra000_ffff_tmp111;
              ra000_ffff_tmp112 = simd_andc(ra000_ffff_tmp51, basis_bits.bit_4);
              ra000_ffff_tmp113 = simd_and(basis_bits.bit_5, tmp3);
              ra000_ffff_tmp114 = simd_andc(ra000_ffff_tmp112, ra000_ffff_tmp113);
              ra000_ffff_tmp115 = simd_andc(ra000_ffff_tmp5, basis_bits.bit_4);
              ra000_ffff_tmp116 = simd_and(ra000_ffff_tmp115, tmp4);
              cc_range_fb00_fb13_3 = simd_or(ra000_ffff_tmp114, ra000_ffff_tmp116);
              carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(46), sequence_ef_ac_adv));
              ra000_ffff_tmp117 = simd_and(sequence_ef_ac_adv, cc_range_fb00_fb13_3);
              struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, ra000_ffff_tmp117);
              byte_bd = ra000_ffff_tmp46;
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_range_81_9a = simd_and(ra000_ffff_tmp15, tmp10);
              carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(47), sequence_ef_bd_adv));
              ra000_ffff_tmp118 = simd_and(sequence_ef_bd_adv, byte_range_81_9a);
              struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, ra000_ffff_tmp118);
            }
            else {
              carryQ.CarryDequeueEnqueue(39, 9);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(19, 29);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(48, 6))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp9);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp3 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_90 = simd_andc(r10000_10ffff_tmp3, tmp9);
            carryQ.cq[48] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(48), r10000_10ffff_tmp4));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp4, byte_90);
            byte_f0_adv = r10000_10ffff_tmp4;
            carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(49), r10000_10ffff_tmp5));
            sequence_f0_90_90 = simd_and(r10000_10ffff_tmp5, byte_90);
            sequence_f0_90_adv = r10000_10ffff_tmp5;
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp1, basis_bits.bit_2);
            r10000_10ffff_tmp7 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            byte_range_a8_bf = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp7);
            carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_f0_90_90, carryQ.get_carry_in(50), sequence_f0_90_90_adv));
            r10000_10ffff_tmp8 = simd_and(sequence_f0_90_90_adv, byte_range_a8_bf);
            struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r10000_10ffff_tmp8);
            r10000_10ffff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp10 = simd_andc(r10000_10ffff_tmp9, tmp7);
            byte_91 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp10);
            sequence_f0_90_91 = simd_and(sequence_f0_90_adv, byte_91);
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_80_8f = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp11);
            carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_f0_90_91, carryQ.get_carry_in(51), sequence_f0_90_91_adv));
            r10000_10ffff_tmp12 = simd_and(sequence_f0_90_91_adv, byte_range_80_8f);
            struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r10000_10ffff_tmp12);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp1, r80_10ffff_tmp1);
            r10000_10ffff_tmp14 = simd_andc(tmp3, tmp7);
            byte_a3 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp14);
            carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(52), r10000_10ffff_tmp15));
            sequence_f0_91_a3 = simd_and(r10000_10ffff_tmp15, byte_a3);
            sequence_f0_91_adv = r10000_10ffff_tmp15;
            byte_range_80_9f = simd_andc(r10000_10ffff_tmp1, basis_bits.bit_2);
            carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(53), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_91_a3_adv, byte_range_80_9f);
            struct_cwt_Y.cc = simd_or(struct_cwt_Y.cc, r10000_10ffff_tmp16);
          }
          else {
            carryQ.CarryDequeueEnqueue(48, 6);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 54);
        }
        carryQ.CarryQ_Adjust(54);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<54, 0> carryQ;
  };

  struct Property_idc_Y {
  Property_idc_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_idc_Y & struct_idc_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp21;
		BitBlock tmp22, tmp23, tmp24, tmp25, tmp26, cc_range_30_61_1, byte_range_c0_ff;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, byte_c2, r80_7ff_tmp5, r80_7ff_tmp6, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10, r80_7ff_tmp11;
		BitBlock r80_7ff_tmp12, r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15;
		BitBlock r80_7ff_tmp16, r80_7ff_tmp17, r80_7ff_tmp18, r80_7ff_tmp19;
		BitBlock r80_7ff_tmp20, cc_range_aa_ba_2, byte_c2_adv, r80_7ff_tmp21;
		BitBlock r80_7ff_tmp22, byte_c3, r80_7ff_tmp23, r80_7ff_tmp24, r80_7ff_tmp25;
		BitBlock r80_7ff_tmp26, r80_7ff_tmp27, r80_7ff_tmp28, r80_7ff_tmp29;
		BitBlock r80_7ff_tmp30, r80_7ff_tmp31, r80_7ff_tmp32, r80_7ff_tmp33;
		BitBlock cc_range_c0_f8_2, byte_c3_adv, r80_7ff_tmp34, byte_range_c4_cf;
		BitBlock r100_3ff_tmp1, byte_range_c4_cb, r100_2ff_tmp1, r100_2ff_tmp2;
		BitBlock r100_2ff_tmp3, byte_range_c4_c8, r100_2ff_tmp4, byte_c9;
		BitBlock byte_range_80_8f, r100_2ff_tmp5, r100_2ff_tmp6, r100_2ff_tmp7;
		BitBlock r100_24f_tmp1, byte_range_c4_c5, byte_range_80_bf, r100_17f_tmp1;
		BitBlock byte_range_c4_c5_sfx, r100_24f_tmp2, r100_24f_tmp3, byte_range_c6_c8;
		BitBlock r100_24f_tmp4, r180_24f_tmp1, byte_range_c6_c8_sfx;
		BitBlock byte_c9_byte_range_80_8f, byte_range_90_bf, r100_2ff_tmp8, byte_ca;
		BitBlock byte_range_80_af, r100_2ff_tmp9, r100_2ff_tmp10, r100_2ff_tmp11;
		BitBlock byte_c9_adv, r250_2af_tmp1, byte_ca_adv, r250_2af_tmp2;
		BitBlock byte_range_b0_bf, r100_2ff_tmp12, r100_2ff_tmp13, byte_cb;
		BitBlock r100_2ff_tmp14, r2b0_2ff_tmp1, r2b0_2ff_tmp2, r2b0_2ff_tmp3;
		BitBlock r2b0_2ff_tmp4, r2b0_2ff_tmp5, r2b0_2ff_tmp6, r2b0_2ff_tmp7;
		BitBlock r2b0_2ff_tmp8, r2b0_2ff_tmp9, r2b0_2ff_tmp10, r2b0_2ff_tmp11;
		BitBlock r2b0_2ff_tmp12, r2b0_2ff_tmp13, r2b0_2ff_tmp14, r2b0_2ff_tmp15;
		BitBlock r2b0_2ff_tmp16, r2b0_2ff_tmp17, r2b0_2ff_tmp18, cc_range_2c0_2ee_2;
		BitBlock byte_cb_adv, r2b0_2ff_tmp19, r100_3ff_tmp2, byte_cc, r100_3ff_tmp3;
		BitBlock byte_cd, r100_3ff_tmp4, r100_3ff_tmp5, r100_3ff_tmp6, byte_cc_adv;
		BitBlock r300_36f_tmp1, byte_cd_adv, r300_36f_tmp2, r100_3ff_tmp7;
		BitBlock r100_3ff_tmp8, byte_range_ce_cf, r100_3ff_tmp9, r370_3ff_tmp1;
		BitBlock r370_3ff_tmp2, r370_3ff_tmp3, r370_3ff_tmp4, r370_3ff_tmp5;
		BitBlock r370_3ff_tmp6, r370_3ff_tmp7, r370_3ff_tmp8, r370_3ff_tmp9;
		BitBlock r370_3ff_tmp10, r370_3ff_tmp11, cc_range_370_37f_2, r370_3ff_tmp12;
		BitBlock r370_3ff_tmp13, byte_ce, r370_3ff_tmp14, r370_3ff_tmp15;
		BitBlock r370_3ff_tmp16, r370_3ff_tmp17, r370_3ff_tmp18, r370_3ff_tmp19;
		BitBlock r370_3ff_tmp20, r370_3ff_tmp21, r370_3ff_tmp22, r370_3ff_tmp23;
		BitBlock r370_3ff_tmp24, r370_3ff_tmp25, r370_3ff_tmp26, r370_3ff_tmp27;
		BitBlock r370_3ff_tmp28, r370_3ff_tmp29, r370_3ff_tmp30, cc_range_386_3a3_2;
		BitBlock byte_ce_adv, r370_3ff_tmp31, byte_cf, r370_3ff_tmp32, r370_3ff_tmp33;
		BitBlock r370_3ff_tmp34, r370_3ff_tmp35, r370_3ff_tmp36, cc_range_3c0_3f7_2;
		BitBlock byte_cf_adv, r370_3ff_tmp37, r80_7ff_tmp35, byte_range_d0_d7;
		BitBlock byte_range_d0_d3, r400_4ff_tmp1, byte_range_d0_d1, r400_4ff_tmp2;
		BitBlock byte_range_d0_d1_sfx, byte_d2, r400_4ff_tmp3, byte_range_80_81;
		BitBlock r400_4ff_tmp4, byte_d2_byte_range_80_81, byte_d3, r400_4ff_tmp5;
		BitBlock byte_d3_byte_range_80_bf, r400_5ff_tmp1, byte_range_d4_d5;
		BitBlock r400_5ff_tmp2, byte_d6, r400_5ff_tmp3, r400_5ff_tmp4, r400_5ff_tmp5;
		BitBlock r500_58f_tmp1, byte_d4, r500_58f_tmp2, r500_58f_tmp3, byte_d4_adv;
		BitBlock r500_52f_tmp1, r500_58f_tmp4, byte_d5, r500_58f_tmp5, r500_58f_tmp6;
		BitBlock r530_58f_tmp1, r530_58f_tmp2, byte_range_b1_bf, r530_58f_tmp3;
		BitBlock r530_58f_tmp4, r530_58f_tmp5, r530_58f_tmp6, r530_58f_tmp7;
		BitBlock r530_58f_tmp8, r530_58f_tmp9, r530_58f_tmp10, cc_range_540_561_2;
		BitBlock byte_d5_adv, r530_58f_tmp11, byte_range_80_87, byte_d6_adv;
		BitBlock r530_58f_tmp12, r400_5ff_tmp6, byte_d7, r400_5ff_tmp7, r590_5ff_tmp1;
		BitBlock r590_5ff_tmp2, r590_5ff_tmp3, r590_5ff_tmp4, r590_5ff_tmp5;
		BitBlock r590_5ff_tmp6, r590_5ff_tmp7, cc_range_591_5bf_2, r590_5ff_tmp8;
		BitBlock r590_5ff_tmp9, r590_5ff_tmp10, r590_5ff_tmp11, r590_5ff_tmp12;
		BitBlock r590_5ff_tmp13, r590_5ff_tmp14, r590_5ff_tmp15, r590_5ff_tmp16;
		BitBlock r590_5ff_tmp17, r590_5ff_tmp18, r590_5ff_tmp19, r590_5ff_tmp20;
		BitBlock r590_5ff_tmp21, r590_5ff_tmp22, cc_range_5c1_5f0_2, byte_d7_adv;
		BitBlock r590_5ff_tmp23, byte_range_d8_db, r600_6ff_tmp1, byte_d8;
		BitBlock r600_6ff_tmp2, r600_6ff_tmp3, r600_6ff_tmp4, cc_range_610_620_2;
		BitBlock byte_d8_adv, r600_6ff_tmp5, r600_6ff_tmp6, byte_d9, r600_6ff_tmp7;
		BitBlock r600_6ff_tmp8, r600_6ff_tmp9, r600_6ff_tmp10, r600_6ff_tmp11;
		BitBlock r600_6ff_tmp12, cc_range_640_66e_2, byte_d9_adv, r600_6ff_tmp13;
		BitBlock byte_da, byte_da_adv, r600_6ff_tmp14, r600_6ff_tmp15, byte_db;
		BitBlock r600_6ff_tmp16, r600_6ff_tmp17, r600_6ff_tmp18, r600_6ff_tmp19;
		BitBlock r600_6ff_tmp20, r600_6ff_tmp21, r600_6ff_tmp22, r600_6ff_tmp23;
		BitBlock r600_6ff_tmp24, r600_6ff_tmp25, r600_6ff_tmp26, r600_6ff_tmp27;
		BitBlock r600_6ff_tmp28, r600_6ff_tmp29, r600_6ff_tmp30, r600_6ff_tmp31;
		BitBlock r600_6ff_tmp32, r600_6ff_tmp33, r600_6ff_tmp34, r600_6ff_tmp35;
		BitBlock r600_6ff_tmp36, r600_6ff_tmp37, r600_6ff_tmp38, r600_6ff_tmp39;
		BitBlock cc_range_6c0_6ff_2, byte_db_adv, r600_6ff_tmp40, r80_7ff_tmp36;
		BitBlock byte_range_dc_dd, r700_77f_tmp1, byte_dc, r700_77f_tmp2, byte_dd;
		BitBlock r700_77f_tmp3, r700_77f_tmp4, r700_77f_tmp5, byte_dc_adv;
		BitBlock r700_74f_tmp1, r700_74f_tmp2, r700_74f_tmp3, r700_74f_tmp4;
		BitBlock cc_range_740_74d_2, byte_dd_adv, r700_74f_tmp5, r700_77f_tmp6;
		BitBlock r750_77f_tmp1, r80_7ff_tmp37, byte_range_de_df, r780_7ff_tmp1;
		BitBlock byte_de, r780_7bf_tmp1, r780_7bf_tmp2, r780_7bf_tmp3;
		BitBlock byte_range_80_b1, byte_de_adv, r780_7bf_tmp4, byte_df, r7c0_7ff_tmp1;
		BitBlock r7c0_7ff_tmp2, r7c0_7ff_tmp3, r7c0_7ff_tmp4, r7c0_7ff_tmp5;
		BitBlock cc_range_7c0_7fa_2, byte_df_adv, r7c0_7ff_tmp6, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, byte_range_e0_e3, r800_ffff_tmp1, r800_ffff_tmp2;
		BitBlock byte_e4, r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock byte_range_80_b7, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, byte_e0, r800_fff_tmp1, byte_a0;
		BitBlock r800_fff_tmp2, sequence_e0_a0, byte_e0_adv, r800_fff_tmp3;
		BitBlock r800_fff_tmp4, r800_fff_tmp5, byte_range_80_ad, sequence_e0_a0_adv;
		BitBlock r800_fff_tmp6, r800_fff_tmp7, r800_fff_tmp8, byte_a1, sequence_e0_a1;
		BitBlock r800_fff_tmp9, r800_fff_tmp10, byte_range_80_9b, sequence_e0_a1_adv;
		BitBlock r800_fff_tmp11, r800_fff_tmp12, r800_fff_tmp13, byte_a2;
		BitBlock sequence_e0_a2, r800_fff_tmp14, r800_fff_tmp15, r800_fff_tmp16;
		BitBlock byte_range_a0_b2, sequence_e0_a2_adv, r800_fff_tmp17, r800_fff_tmp18;
		BitBlock byte_a3, sequence_e0_a3, r800_fff_tmp19, byte_range_a4_bf;
		BitBlock sequence_e0_a3_adv, r800_fff_tmp20, byte_a4, sequence_e0_a4;
		BitBlock sequence_e0_a4_adv, r800_fff_tmp21, r800_fff_tmp22, r800_fff_tmp23;
		BitBlock byte_a5, sequence_e0_a5, r800_fff_tmp24, r800_fff_tmp25;
		BitBlock r800_fff_tmp26, r800_fff_tmp27, r800_fff_tmp28, r800_fff_tmp29;
		BitBlock r800_fff_tmp30, r800_fff_tmp31, r800_fff_tmp32, r800_fff_tmp33;
		BitBlock cc_range_940_971_3, sequence_e0_a5_adv, r800_fff_tmp34;
		BitBlock r800_fff_tmp35, byte_a6, sequence_e0_a6, r800_fff_tmp36;
		BitBlock r800_fff_tmp37, r800_fff_tmp38, r800_fff_tmp39, r800_fff_tmp40;
		BitBlock r800_fff_tmp41, r800_fff_tmp42, r800_fff_tmp43, r800_fff_tmp44;
		BitBlock r800_fff_tmp45, r800_fff_tmp46, r800_fff_tmp47, r800_fff_tmp48;
		BitBlock r800_fff_tmp49, r800_fff_tmp50, r800_fff_tmp51, r800_fff_tmp52;
		BitBlock r800_fff_tmp53, r800_fff_tmp54, r800_fff_tmp55, r800_fff_tmp56;
		BitBlock r800_fff_tmp57, r800_fff_tmp58, r800_fff_tmp59, r800_fff_tmp60;
		BitBlock r800_fff_tmp61, r800_fff_tmp62, r800_fff_tmp63, cc_range_980_9bc_3;
		BitBlock sequence_e0_a6_adv, r800_fff_tmp64, r800_fff_tmp65, byte_a7;
		BitBlock sequence_e0_a7, r800_fff_tmp66, r800_fff_tmp67, r800_fff_tmp68;
		BitBlock r800_fff_tmp69, r800_fff_tmp70, r800_fff_tmp71, r800_fff_tmp72;
		BitBlock r800_fff_tmp73, r800_fff_tmp74, r800_fff_tmp75, r800_fff_tmp76;
		BitBlock r800_fff_tmp77, r800_fff_tmp78, r800_fff_tmp79, r800_fff_tmp80;
		BitBlock r800_fff_tmp81, r800_fff_tmp82, r800_fff_tmp83, r800_fff_tmp84;
		BitBlock r800_fff_tmp85, r800_fff_tmp86, r800_fff_tmp87, r800_fff_tmp88;
		BitBlock r800_fff_tmp89, r800_fff_tmp90, cc_range_9c0_9e6_3;
		BitBlock sequence_e0_a7_adv, r800_fff_tmp91, r800_fff_tmp92, r800_fff_tmp93;
		BitBlock byte_a8, sequence_e0_a8, r800_fff_tmp94, r800_fff_tmp95;
		BitBlock r800_fff_tmp96, r800_fff_tmp97, r800_fff_tmp98, r800_fff_tmp99;
		BitBlock r800_fff_tmp100, r800_fff_tmp101, r800_fff_tmp102, r800_fff_tmp103;
		BitBlock r800_fff_tmp104, r800_fff_tmp105, r800_fff_tmp106, r800_fff_tmp107;
		BitBlock r800_fff_tmp108, r800_fff_tmp109, r800_fff_tmp110, r800_fff_tmp111;
		BitBlock r800_fff_tmp112, r800_fff_tmp113, r800_fff_tmp114, r800_fff_tmp115;
		BitBlock r800_fff_tmp116, cc_range_a01_a3e_3, sequence_e0_a8_adv;
		BitBlock r800_fff_tmp117, r800_fff_tmp118, byte_a9, sequence_e0_a9;
		BitBlock r800_fff_tmp119, r800_fff_tmp120, r800_fff_tmp121, r800_fff_tmp122;
		BitBlock r800_fff_tmp123, r800_fff_tmp124, r800_fff_tmp125, r800_fff_tmp126;
		BitBlock r800_fff_tmp127, r800_fff_tmp128, r800_fff_tmp129, r800_fff_tmp130;
		BitBlock r800_fff_tmp131, r800_fff_tmp132, r800_fff_tmp133, r800_fff_tmp134;
		BitBlock r800_fff_tmp135, cc_range_a40_a66_3, sequence_e0_a9_adv;
		BitBlock r800_fff_tmp136, r800_fff_tmp137, byte_aa, sequence_e0_aa;
		BitBlock r800_fff_tmp138, r800_fff_tmp139, r800_fff_tmp140, r800_fff_tmp141;
		BitBlock r800_fff_tmp142, r800_fff_tmp143, r800_fff_tmp144, r800_fff_tmp145;
		BitBlock r800_fff_tmp146, r800_fff_tmp147, r800_fff_tmp148, r800_fff_tmp149;
		BitBlock r800_fff_tmp150, cc_range_a81_abc_3, sequence_e0_aa_adv;
		BitBlock r800_fff_tmp151, r800_fff_tmp152, byte_ab, sequence_e0_ab;
		BitBlock r800_fff_tmp153, r800_fff_tmp154, r800_fff_tmp155, r800_fff_tmp156;
		BitBlock r800_fff_tmp157, r800_fff_tmp158, r800_fff_tmp159, r800_fff_tmp160;
		BitBlock r800_fff_tmp161, cc_range_ac0_ae6_3, sequence_e0_ab_adv;
		BitBlock r800_fff_tmp162, byte_ac, sequence_e0_ac, r800_fff_tmp163;
		BitBlock r800_fff_tmp164, r800_fff_tmp165, r800_fff_tmp166, r800_fff_tmp167;
		BitBlock r800_fff_tmp168, r800_fff_tmp169, cc_range_b01_b3c_3;
		BitBlock sequence_e0_ac_adv, r800_fff_tmp170, r800_fff_tmp171, byte_ad;
		BitBlock sequence_e0_ad, r800_fff_tmp172, r800_fff_tmp173, r800_fff_tmp174;
		BitBlock r800_fff_tmp175, r800_fff_tmp176, r800_fff_tmp177, r800_fff_tmp178;
		BitBlock r800_fff_tmp179, cc_range_b40_b71_3, sequence_e0_ad_adv;
		BitBlock r800_fff_tmp180, byte_ae, sequence_e0_ae, r800_fff_tmp181;
		BitBlock r800_fff_tmp182, r800_fff_tmp183, r800_fff_tmp184, r800_fff_tmp185;
		BitBlock r800_fff_tmp186, r800_fff_tmp187, r800_fff_tmp188, r800_fff_tmp189;
		BitBlock r800_fff_tmp190, r800_fff_tmp191, r800_fff_tmp192, r800_fff_tmp193;
		BitBlock r800_fff_tmp194, r800_fff_tmp195, r800_fff_tmp196, r800_fff_tmp197;
		BitBlock r800_fff_tmp198, r800_fff_tmp199, r800_fff_tmp200, r800_fff_tmp201;
		BitBlock r800_fff_tmp202, r800_fff_tmp203, r800_fff_tmp204, r800_fff_tmp205;
		BitBlock r800_fff_tmp206, r800_fff_tmp207, r800_fff_tmp208, cc_range_b82_bbe_3;
		BitBlock sequence_e0_ae_adv, r800_fff_tmp209, byte_af, sequence_e0_af;
		BitBlock r800_fff_tmp210, r800_fff_tmp211, r800_fff_tmp212, r800_fff_tmp213;
		BitBlock r800_fff_tmp214, r800_fff_tmp215, r800_fff_tmp216, cc_range_bc0_be6_3;
		BitBlock sequence_e0_af_adv, r800_fff_tmp217, byte_b0, sequence_e0_b0;
		BitBlock r800_fff_tmp218, r800_fff_tmp219, r800_fff_tmp220, r800_fff_tmp221;
		BitBlock r800_fff_tmp222, r800_fff_tmp223, r800_fff_tmp224, r800_fff_tmp225;
		BitBlock r800_fff_tmp226, cc_range_c00_c3d_3, sequence_e0_b0_adv;
		BitBlock r800_fff_tmp227, byte_b1, sequence_e0_b1, r800_fff_tmp228;
		BitBlock r800_fff_tmp229, r800_fff_tmp230, r800_fff_tmp231, r800_fff_tmp232;
		BitBlock r800_fff_tmp233, r800_fff_tmp234, r800_fff_tmp235, cc_range_c40_c66_3;
		BitBlock sequence_e0_b1_adv, r800_fff_tmp236, byte_b2, sequence_e0_b2;
		BitBlock r800_fff_tmp237, r800_fff_tmp238, r800_fff_tmp239, r800_fff_tmp240;
		BitBlock r800_fff_tmp241, r800_fff_tmp242, r800_fff_tmp243, cc_range_c81_cbc_3;
		BitBlock sequence_e0_b2_adv, r800_fff_tmp244, byte_b3, sequence_e0_b3;
		BitBlock r800_fff_tmp245, r800_fff_tmp246, r800_fff_tmp247, r800_fff_tmp248;
		BitBlock r800_fff_tmp249, cc_range_cc0_cf1_3, sequence_e0_b3_adv;
		BitBlock r800_fff_tmp250, byte_b4, sequence_e0_b4, r800_fff_tmp251;
		BitBlock r800_fff_tmp252, r800_fff_tmp253, r800_fff_tmp254, r800_fff_tmp255;
		BitBlock cc_range_d01_d3d_3, sequence_e0_b4_adv, r800_fff_tmp256, byte_b5;
		BitBlock sequence_e0_b5, r800_fff_tmp257, r800_fff_tmp258, r800_fff_tmp259;
		BitBlock r800_fff_tmp260, r800_fff_tmp261, r800_fff_tmp262, r800_fff_tmp263;
		BitBlock r800_fff_tmp264, r800_fff_tmp265, cc_range_d40_d7a_3;
		BitBlock sequence_e0_b5_adv, r800_fff_tmp266, byte_b6, sequence_e0_b6;
		BitBlock r800_fff_tmp267, r800_fff_tmp268, r800_fff_tmp269, r800_fff_tmp270;
		BitBlock r800_fff_tmp271, r800_fff_tmp272, r800_fff_tmp273, r800_fff_tmp274;
		BitBlock r800_fff_tmp275, r800_fff_tmp276, r800_fff_tmp277, r800_fff_tmp278;
		BitBlock r800_fff_tmp279, r800_fff_tmp280, r800_fff_tmp281, r800_fff_tmp282;
		BitBlock r800_fff_tmp283, cc_range_d82_dbd_3, sequence_e0_b6_adv;
		BitBlock r800_fff_tmp284, byte_b7, sequence_e0_b7, r800_fff_tmp285;
		BitBlock r800_fff_tmp286, r800_fff_tmp287, r800_fff_tmp288, r800_fff_tmp289;
		BitBlock r800_fff_tmp290, r800_fff_tmp291, r800_fff_tmp292, r800_fff_tmp293;
		BitBlock r800_fff_tmp294, r800_fff_tmp295, cc_range_dc0_df2_3;
		BitBlock sequence_e0_b7_adv, r800_fff_tmp296, byte_b8, sequence_e0_b8;
		BitBlock r800_fff_tmp297, r800_fff_tmp298, byte_range_81_ba;
		BitBlock sequence_e0_b8_adv, r800_fff_tmp299, byte_b9, sequence_e0_b9;
		BitBlock r800_fff_tmp300, r800_fff_tmp301, r800_fff_tmp302, cc_range_e40_e50_3;
		BitBlock sequence_e0_b9_adv, r800_fff_tmp303, byte_ba, sequence_e0_ba;
		BitBlock r800_fff_tmp304, r800_fff_tmp305, r800_fff_tmp306, r800_fff_tmp307;
		BitBlock r800_fff_tmp308, r800_fff_tmp309, r800_fff_tmp310, r800_fff_tmp311;
		BitBlock r800_fff_tmp312, r800_fff_tmp313, r800_fff_tmp314, r800_fff_tmp315;
		BitBlock r800_fff_tmp316, r800_fff_tmp317, r800_fff_tmp318, r800_fff_tmp319;
		BitBlock r800_fff_tmp320, r800_fff_tmp321, r800_fff_tmp322, r800_fff_tmp323;
		BitBlock r800_fff_tmp324, r800_fff_tmp325, cc_range_e81_ebb_3;
		BitBlock sequence_e0_ba_adv, r800_fff_tmp326, byte_bb, sequence_e0_bb;
		BitBlock r800_fff_tmp327, r800_fff_tmp328, r800_fff_tmp329, r800_fff_tmp330;
		BitBlock r800_fff_tmp331, r800_fff_tmp332, cc_range_ec0_edc_3;
		BitBlock sequence_e0_bb_adv, r800_fff_tmp333, byte_bc, sequence_e0_bc;
		BitBlock r800_fff_tmp334, r800_fff_tmp335, r800_fff_tmp336, r800_fff_tmp337;
		BitBlock r800_fff_tmp338, r800_fff_tmp339, r800_fff_tmp340, cc_range_f00_f3e_3;
		BitBlock sequence_e0_bc_adv, r800_fff_tmp341, byte_bd, sequence_e0_bd;
		BitBlock r800_fff_tmp342, r800_fff_tmp343, r800_fff_tmp344, r800_fff_tmp345;
		BitBlock r800_fff_tmp346, cc_range_f40_f71_3, sequence_e0_bd_adv;
		BitBlock r800_fff_tmp347, byte_be, sequence_e0_be, r800_fff_tmp348;
		BitBlock r800_fff_tmp349, r800_fff_tmp350, r800_fff_tmp351, r800_fff_tmp352;
		BitBlock r800_fff_tmp353, r800_fff_tmp354, r800_fff_tmp355, r800_fff_tmp356;
		BitBlock cc_range_f80_f99_3, sequence_e0_be_adv, r800_fff_tmp357, byte_bf;
		BitBlock sequence_e0_bf, byte_86, sequence_e0_bf_adv, r800_fff_tmp358;
		BitBlock r800_1fff_tmp1, r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1;
		BitBlock r1000_1fff_tmp2, byte_80, r1000_1fff_tmp3, sequence_e1_80;
		BitBlock byte_e1_adv, sequence_e1_80_adv, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock byte_81, sequence_e1_81, r1000_1fff_tmp6, r1000_1fff_tmp7;
		BitBlock cc_range_1040_1050_3, sequence_e1_81_adv, r1000_1fff_tmp8;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, byte_82, sequence_e1_82;
		BitBlock r1000_1fff_tmp11, r1000_1fff_tmp12, r1000_1fff_tmp13;
		BitBlock r1000_1fff_tmp14, r1000_1fff_tmp15, cc_range_1080_10a0_3;
		BitBlock sequence_e1_82_adv, r1000_1fff_tmp16, r1000_1fff_tmp17, byte_83;
		BitBlock sequence_e1_83, r1000_1fff_tmp18, r1000_1fff_tmp19, r1000_1fff_tmp20;
		BitBlock r1000_1fff_tmp21, r1000_1fff_tmp22, r1000_1fff_tmp23;
		BitBlock r1000_1fff_tmp24, r1000_1fff_tmp25, r1000_1fff_tmp26;
		BitBlock r1000_1fff_tmp27, r1000_1fff_tmp28, r1000_1fff_tmp29;
		BitBlock r1000_1fff_tmp30, r1000_1fff_tmp31, r1000_1fff_tmp32;
		BitBlock r1000_1fff_tmp33, cc_range_10c0_10fc_3, sequence_e1_83_adv;
		BitBlock r1000_1fff_tmp34, r1000_1fff_tmp35, r1000_1fff_tmp36;
		BitBlock r1000_1fff_tmp37, byte_range_84_88, byte_e1_byte_range_84_88;
		BitBlock r1000_1fff_tmp38, byte_e1_byte_range_84_88_sfx, r1000_1fff_tmp39;
		BitBlock r1000_1fff_tmp40, byte_89, sequence_e1_89, r1000_1fff_tmp41;
		BitBlock byte_range_80_88, r1000_1fff_tmp42, sequence_e1_89_byte_range_80_88;
		BitBlock r1000_1fff_tmp43, byte_8a, sequence_e1_8a, r1000_1fff_tmp44;
		BitBlock sequence_e1_8a_byte_range_80_88, r1000_1fff_tmp45, byte_8b;
		BitBlock sequence_e1_8b, r1000_1fff_tmp46, sequence_e1_8b_80, r1000_1fff_tmp47;
		BitBlock byte_8c, sequence_e1_8c, r1000_1fff_tmp48, byte_range_80_90;
		BitBlock r1000_1fff_tmp49, sequence_e1_8c_byte_range_80_90, byte_8d;
		BitBlock sequence_e1_8d, byte_range_80_9a, r1000_1fff_tmp50;
		BitBlock sequence_e1_8d_byte_range_80_9a, r1000_1fff_tmp51, byte_8e;
		BitBlock sequence_e1_8e, r1000_1fff_tmp52, sequence_e1_8e_byte_range_80_8f;
		BitBlock byte_8f, sequence_e1_8f, r1000_1fff_tmp53, r1000_1fff_tmp54;
		BitBlock r1000_1fff_tmp55, r1000_1fff_tmp56, byte_range_80_b4;
		BitBlock r1000_1fff_tmp57, sequence_e1_8f_byte_range_80_b4, r1000_1fff_tmp58;
		BitBlock byte_90, sequence_e1_90, r1000_1fff_tmp59, r1000_1fff_tmp60;
		BitBlock byte_range_81_bf, r1000_1fff_tmp61, sequence_e1_90_byte_range_81_bf;
		BitBlock byte_91, sequence_e1_91, r1000_1fff_tmp62;
		BitBlock sequence_e1_91_byte_range_80_bf, byte_99, sequence_e1_99;
		BitBlock r1000_1fff_tmp63, r1000_1fff_tmp64, r1000_1fff_tmp65;
		BitBlock byte_range_80_ac, r1000_1fff_tmp66, sequence_e1_99_byte_range_80_ac;
		BitBlock byte_9a, sequence_e1_9a, byte_range_81_9a, r1000_1fff_tmp67;
		BitBlock sequence_e1_9a_byte_range_81_9a, byte_9b, sequence_e1_9b;
		BitBlock r1000_1fff_tmp68, r1000_1fff_tmp69, byte_range_80_aa;
		BitBlock r1000_1fff_tmp70, sequence_e1_9b_byte_range_80_aa, byte_9c;
		BitBlock sequence_e1_9c, r1000_1fff_tmp71, byte_range_80_8c, r1000_1fff_tmp72;
		BitBlock sequence_e1_9c_byte_range_80_8c, byte_9d, sequence_e1_9d;
		BitBlock r1000_1fff_tmp73, byte_range_80_93, r1000_1fff_tmp74;
		BitBlock sequence_e1_9d_byte_range_80_93, byte_9e, sequence_e1_9e;
		BitBlock r1000_1fff_tmp75, sequence_e1_9e_byte_range_80_bf, byte_9f;
		BitBlock sequence_e1_9f, r1000_1fff_tmp76, sequence_e1_9f_byte_range_80_93;
		BitBlock r1000_1fff_tmp77, sequence_e1_a0, r1000_1fff_tmp78, r1000_1fff_tmp79;
		BitBlock r1000_1fff_tmp80, byte_range_8b_8d, r1000_1fff_tmp81;
		BitBlock sequence_e1_a0_byte_range_8b_8d, sequence_e1_a1, r1000_1fff_tmp82;
		BitBlock sequence_e1_a1_byte_range_80_b7, sequence_e1_a2, r1000_1fff_tmp83;
		BitBlock sequence_e1_a2_byte_range_80_aa, sequence_e1_a3, r1000_1fff_tmp84;
		BitBlock r1000_1fff_tmp85, r1000_1fff_tmp86, byte_range_80_b5;
		BitBlock r1000_1fff_tmp87, sequence_e1_a3_byte_range_80_b5, sequence_e1_a4;
		BitBlock r1000_1fff_tmp88, byte_range_80_9e, r1000_1fff_tmp89;
		BitBlock sequence_e1_a4_byte_range_80_9e, r1000_1fff_tmp90, sequence_e1_a5;
		BitBlock r1000_1fff_tmp91, r1000_1fff_tmp92, r1000_1fff_tmp93;
		BitBlock r1000_1fff_tmp94, byte_range_86_ad, r1000_1fff_tmp95;
		BitBlock sequence_e1_a5_byte_range_86_ad, r1000_1fff_tmp96, sequence_e1_a6;
		BitBlock r1000_1fff_tmp97, r1000_1fff_tmp98, byte_range_80_ab;
		BitBlock r1000_1fff_tmp99, sequence_e1_a6_byte_range_80_ab, sequence_e1_a7;
		BitBlock byte_range_80_89, r1000_1fff_tmp100, sequence_e1_a7_byte_range_80_89;
		BitBlock r1000_1fff_tmp101, sequence_e1_a8, r1000_1fff_tmp102;
		BitBlock r1000_1fff_tmp103, sequence_e1_a8_byte_range_80_9b, sequence_e1_a9;
		BitBlock r1000_1fff_tmp104, sequence_e1_a9_byte_range_80_9e, sequence_e1_aa;
		BitBlock r1000_1fff_tmp105, sequence_e1_aa_byte_range_80_89, sequence_e1_ac;
		BitBlock r1000_1fff_tmp106, sequence_e1_ac_byte_range_80_bf, sequence_e1_ad;
		BitBlock byte_range_80_8b, r1000_1fff_tmp107, sequence_e1_ad_byte_range_80_8b;
		BitBlock sequence_e1_ae, r1000_1fff_tmp108, sequence_e1_ae_byte_range_80_bf;
		BitBlock sequence_e1_af, r1000_1fff_tmp109, byte_range_80_b3;
		BitBlock r1000_1fff_tmp110, sequence_e1_af_byte_range_80_b3, sequence_e1_b0;
		BitBlock r1000_1fff_tmp111, sequence_e1_b0_byte_range_80_b7, sequence_e1_b1;
		BitBlock r1000_1fff_tmp112, sequence_e1_b1_byte_range_80_89, sequence_e1_b3;
		BitBlock r1000_1fff_tmp113, byte_range_90_92, r1000_1fff_tmp114;
		BitBlock sequence_e1_b3_byte_range_90_92, sequence_e1_b4, r1000_1fff_tmp115;
		BitBlock sequence_e1_b4_byte_range_80_bf, sequence_e1_b7, r1000_1fff_tmp116;
		BitBlock sequence_e1_b7_byte_range_80_b5, sequence_e1_b8, r1000_1fff_tmp117;
		BitBlock sequence_e1_b8_byte_range_80_bf, sequence_e1_bc, byte_range_80_95;
		BitBlock r1000_1fff_tmp118, sequence_e1_bc_byte_range_80_95, sequence_e1_bd;
		BitBlock r1000_1fff_tmp119, byte_range_80_85, r1000_1fff_tmp120;
		BitBlock sequence_e1_bd_byte_range_80_85, sequence_e1_be, r1000_1fff_tmp121;
		BitBlock sequence_e1_be_byte_range_80_b4, sequence_e1_bf, r1000_1fff_tmp122;
		BitBlock r1000_1fff_tmp123, byte_range_82_84, r1000_1fff_tmp124;
		BitBlock sequence_e1_bf_byte_range_82_84, r800_4dff_tmp2, byte_range_e2_e3;
		BitBlock r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2;
		BitBlock r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3, sequence_e2_80;
		BitBlock byte_e2_adv, r2000_2fff_tmp4, sequence_e2_80_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, sequence_e2_81, r2000_2fff_tmp8;
		BitBlock r2000_2fff_tmp9, r2000_2fff_tmp10, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock cc_range_2040_207f_3, sequence_e2_81_adv, r2000_2fff_tmp13;
		BitBlock sequence_e2_82, r2000_2fff_tmp14, r2000_2fff_tmp15, byte_range_90_9c;
		BitBlock sequence_e2_82_adv, r2000_2fff_tmp16, r2000_2fff_tmp17;
		BitBlock sequence_e2_83, r2000_2fff_tmp18, r2000_2fff_tmp19, r2000_2fff_tmp20;
		BitBlock r2000_2fff_tmp21, r2000_2fff_tmp22, r2000_2fff_tmp23;
		BitBlock r2000_2fff_tmp24, r2000_2fff_tmp25, cc_range_20d0_20e5_3;
		BitBlock sequence_e2_83_adv, r2000_2fff_tmp26, byte_84, sequence_e2_84;
		BitBlock r2000_2fff_tmp27, r2000_2fff_tmp28, r2000_2fff_tmp29;
		BitBlock r2000_2fff_tmp30, r2000_2fff_tmp31, r2000_2fff_tmp32;
		BitBlock r2000_2fff_tmp33, r2000_2fff_tmp34, r2000_2fff_tmp35;
		BitBlock r2000_2fff_tmp36, r2000_2fff_tmp37, r2000_2fff_tmp38;
		BitBlock r2000_2fff_tmp39, r2000_2fff_tmp40, r2000_2fff_tmp41;
		BitBlock r2000_2fff_tmp42, r2000_2fff_tmp43, r2000_2fff_tmp44;
		BitBlock r2000_2fff_tmp45, r2000_2fff_tmp46, r2000_2fff_tmp47;
		BitBlock r2000_2fff_tmp48, r2000_2fff_tmp49, r2000_2fff_tmp50;
		BitBlock r2000_2fff_tmp51, r2000_2fff_tmp52, r2000_2fff_tmp53;
		BitBlock r2000_2fff_tmp54, cc_range_2102_213c_3, sequence_e2_84_adv;
		BitBlock r2000_2fff_tmp55, byte_85, sequence_e2_85, r2000_2fff_tmp56;
		BitBlock r2000_2fff_tmp57, r2000_2fff_tmp58, r2000_2fff_tmp59;
		BitBlock r2000_2fff_tmp60, cc_range_2145_2160_3, sequence_e2_85_adv;
		BitBlock r2000_2fff_tmp61, sequence_e2_86, r2000_2fff_tmp62, r2000_2fff_tmp63;
		BitBlock sequence_e2_86_adv, r2000_2fff_tmp64, sequence_e2_b0;
		BitBlock r2000_2fff_tmp65, r2000_2fff_tmp66, r2000_2fff_tmp67;
		BitBlock cc_range_2c00_2c30_3, sequence_e2_b0_adv, r2000_2fff_tmp68;
		BitBlock sequence_e2_b1, r2000_2fff_tmp69, r2000_2fff_tmp70;
		BitBlock cc_range_2c40_2c60_3, sequence_e2_b1_adv, r2000_2fff_tmp71;
		BitBlock sequence_e2_b2, sequence_e2_b2_adv, r2000_2fff_tmp72;
		BitBlock r2000_2fff_tmp73, sequence_e2_b3, r2000_2fff_tmp74, r2000_2fff_tmp75;
		BitBlock r2000_2fff_tmp76, r2000_2fff_tmp77, r2000_2fff_tmp78;
		BitBlock r2000_2fff_tmp79, cc_range_2cc0_2ceb_3, sequence_e2_b3_adv;
		BitBlock r2000_2fff_tmp80, sequence_e2_b4, r2000_2fff_tmp81, r2000_2fff_tmp82;
		BitBlock r2000_2fff_tmp83, r2000_2fff_tmp84, r2000_2fff_tmp85;
		BitBlock r2000_2fff_tmp86, r2000_2fff_tmp87, r2000_2fff_tmp88;
		BitBlock r2000_2fff_tmp89, r2000_2fff_tmp90, cc_range_2d00_2d30_3;
		BitBlock sequence_e2_b4_adv, r2000_2fff_tmp91, sequence_e2_b5;
		BitBlock r2000_2fff_tmp92, r2000_2fff_tmp93, r2000_2fff_tmp94;
		BitBlock r2000_2fff_tmp95, r2000_2fff_tmp96, r2000_2fff_tmp97;
		BitBlock cc_range_2d40_2d7f_3, sequence_e2_b5_adv, r2000_2fff_tmp98;
		BitBlock sequence_e2_b6, r2000_2fff_tmp99, r2000_2fff_tmp100;
		BitBlock r2000_2fff_tmp101, r2000_2fff_tmp102, r2000_2fff_tmp103;
		BitBlock r2000_2fff_tmp104, r2000_2fff_tmp105, r2000_2fff_tmp106;
		BitBlock r2000_2fff_tmp107, r2000_2fff_tmp108, r2000_2fff_tmp109;
		BitBlock r2000_2fff_tmp110, r2000_2fff_tmp111, r2000_2fff_tmp112;
		BitBlock r2000_2fff_tmp113, r2000_2fff_tmp114, cc_range_2d80_2db8_3;
		BitBlock sequence_e2_b6_adv, r2000_2fff_tmp115, sequence_e2_b7;
		BitBlock r2000_2fff_tmp116, r2000_2fff_tmp117, r2000_2fff_tmp118;
		BitBlock r2000_2fff_tmp119, r2000_2fff_tmp120, r2000_2fff_tmp121;
		BitBlock r2000_2fff_tmp122, cc_range_2dc0_2de0_3, sequence_e2_b7_adv;
		BitBlock r2000_2fff_tmp123, r2000_4dff_tmp3, byte_e3, r2000_4dff_tmp4;
		BitBlock r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3, sequence_e3_80;
		BitBlock byte_e3_adv, r3000_4dff_tmp4, r3000_4dff_tmp5, r3000_4dff_tmp6;
		BitBlock r3000_4dff_tmp7, r3000_4dff_tmp8, r3000_4dff_tmp9, r3000_4dff_tmp10;
		BitBlock r3000_4dff_tmp11, r3000_4dff_tmp12, r3000_4dff_tmp13;
		BitBlock r3000_4dff_tmp14, r3000_4dff_tmp15, r3000_4dff_tmp16;
		BitBlock r3000_4dff_tmp17, r3000_4dff_tmp18, r3000_4dff_tmp19;
		BitBlock cc_range_3005_3038_3, sequence_e3_80_adv, r3000_4dff_tmp20;
		BitBlock r3000_4dff_tmp21, r3000_4dff_tmp22, sequence_e3_81, r3000_4dff_tmp23;
		BitBlock r3000_4dff_tmp24, sequence_e3_81_adv, r3000_4dff_tmp25;
		BitBlock sequence_e3_82, r3000_4dff_tmp26, r3000_4dff_tmp27, r3000_4dff_tmp28;
		BitBlock r3000_4dff_tmp29, r3000_4dff_tmp30, r3000_4dff_tmp31;
		BitBlock r3000_4dff_tmp32, r3000_4dff_tmp33, r3000_4dff_tmp34;
		BitBlock r3000_4dff_tmp35, r3000_4dff_tmp36, cc_range_3080_30a1_3;
		BitBlock sequence_e3_82_adv, r3000_4dff_tmp37, sequence_e3_83;
		BitBlock r3000_4dff_tmp38, r3000_4dff_tmp39, r3000_4dff_tmp40;
		BitBlock r3000_4dff_tmp41, cc_range_30c0_30fc_3, sequence_e3_83_adv;
		BitBlock r3000_4dff_tmp42, sequence_e3_84, r3000_4dff_tmp43, r3000_4dff_tmp44;
		BitBlock r3000_4dff_tmp45, r3000_4dff_tmp46, r3000_4dff_tmp47;
		BitBlock r3000_4dff_tmp48, r3000_4dff_tmp49, r3000_4dff_tmp50;
		BitBlock cc_range_3105_3131_3, sequence_e3_84_adv, r3000_4dff_tmp51;
		BitBlock r3000_4dff_tmp52, sequence_e3_85, sequence_e3_85_adv;
		BitBlock r3000_4dff_tmp53, r3000_4dff_tmp54, r3000_4dff_tmp55, sequence_e3_86;
		BitBlock r3000_4dff_tmp56, r3000_4dff_tmp57, r3000_4dff_tmp58;
		BitBlock r3000_4dff_tmp59, cc_range_3180_31a0_3, sequence_e3_86_adv;
		BitBlock r3000_4dff_tmp60, r3000_4dff_tmp61, byte_87, sequence_e3_87;
		BitBlock sequence_e3_87_adv, r3000_4dff_tmp62, byte_e3_byte_range_90_bf;
		BitBlock r3000_4dff_tmp63, byte_e3_byte_range_90_bf_sfx, r3000_4dff_tmp64;
		BitBlock r3000_4dff_tmp65, r3000_4dff_tmp66, r3000_4dff_tmp67;
		BitBlock byte_e4_byte_range_80_b5, r3000_4dff_tmp68;
		BitBlock byte_e4_byte_range_80_b5_sfx, byte_e4_adv, sequence_e4_b6;
		BitBlock r3000_4dff_tmp69, sequence_e4_b6_byte_range_80_b5, r800_ffff_tmp9;
		BitBlock byte_range_b8_bf, r800_ffff_tmp10, r800_ffff_tmp11, r800_ffff_tmp12;
		BitBlock r800_ffff_tmp13, byte_range_e5_e9, r800_ffff_tmp14;
		BitBlock byte_e4_byte_range_b8_bf, r4e00_9fff_tmp1;
		BitBlock byte_e4_byte_range_b8_bf_sfx, r4e00_9fff_tmp2, r4e00_9fff_tmp3;
		BitBlock r4e00_9fff_tmp4, byte_range_e5_e8, r4e00_9fff_tmp5;
		BitBlock byte_range_e5_e8_sfx, r4e00_9fff_tmp6, byte_range_e5_e8_sfx_sfx;
		BitBlock r4e00_9fff_tmp7, r4e00_9fff_tmp8, r4e00_9fff_tmp9, byte_e9;
		BitBlock r4e00_9fff_tmp10, r4e00_9fff_tmp11, byte_e9_adv, sequence_e9_80;
		BitBlock r4e00_9fff_tmp12, r4e00_9fff_tmp13, sequence_e9_80_byte_range_80_8c;
		BitBlock r800_ffff_tmp15, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, byte_range_80_91, ra000_ffff_tmp7;
		BitBlock byte_ea_byte_range_80_91, ra000_ffff_tmp8;
		BitBlock byte_ea_byte_range_80_91_sfx, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock byte_92, byte_ea_adv, sequence_ea_92, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, ra000_ffff_tmp14;
		BitBlock sequence_ea_92_byte_range_80_8c, ra000_ffff_tmp15, byte_93;
		BitBlock sequence_ea_93, ra000_ffff_tmp16, ra000_ffff_tmp17, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, byte_range_90_bd, ra000_ffff_tmp20;
		BitBlock sequence_ea_93_byte_range_90_bd, byte_94, sequence_ea_94;
		BitBlock ra000_ffff_tmp21, sequence_ea_94_byte_range_80_bf, ra000_ffff_tmp22;
		BitBlock byte_98, sequence_ea_98, ra000_ffff_tmp23;
		BitBlock sequence_ea_98_byte_range_80_8c, ra000_ffff_tmp24, ra000_ffff_tmp25;
		BitBlock sequence_ea_99, ra000_ffff_tmp26, sequence_ea_99_byte_range_80_af;
		BitBlock sequence_ea_9a, ra000_ffff_tmp27, byte_range_80_9d, ra000_ffff_tmp28;
		BitBlock sequence_ea_9a_byte_range_80_9d, ra000_ffff_tmp29, sequence_ea_9b;
		BitBlock ra000_ffff_tmp30, ra000_ffff_tmp31, sequence_ea_9b_byte_range_80_b1;
		BitBlock ra000_ffff_tmp32, sequence_ea_9c, ra000_ffff_tmp33, ra000_ffff_tmp34;
		BitBlock byte_range_97_9f, ra000_ffff_tmp35, sequence_ea_9c_byte_range_97_9f;
		BitBlock ra000_ffff_tmp36, sequence_ea_9d, ra000_ffff_tmp37;
		BitBlock sequence_ea_9d_byte_range_80_bf, ra000_ffff_tmp38, sequence_ea_9e;
		BitBlock ra000_ffff_tmp39, ra000_ffff_tmp40, ra000_ffff_tmp41;
		BitBlock sequence_ea_9e_byte_range_80_88, sequence_ea_9f, ra000_ffff_tmp42;
		BitBlock byte_range_b7_bf, ra000_ffff_tmp43, sequence_ea_9f_byte_range_b7_bf;
		BitBlock ra000_ffff_tmp44, sequence_ea_a0, ra000_ffff_tmp45, ra000_ffff_tmp46;
		BitBlock byte_range_80_a7, ra000_ffff_tmp47, sequence_ea_a0_byte_range_80_a7;
		BitBlock ra000_ffff_tmp48, sequence_ea_a1, ra000_ffff_tmp49, ra000_ffff_tmp50;
		BitBlock ra000_ffff_tmp51, sequence_ea_a1_byte_range_80_b3, sequence_ea_a2;
		BitBlock ra000_ffff_tmp52, sequence_ea_a2_byte_range_80_bf, sequence_ea_a3;
		BitBlock ra000_ffff_tmp53, byte_range_80_84, ra000_ffff_tmp54;
		BitBlock sequence_ea_a3_byte_range_80_84, sequence_ea_a4, ra000_ffff_tmp55;
		BitBlock ra000_ffff_tmp56, ra000_ffff_tmp57, sequence_ea_a4_byte_range_80_ad;
		BitBlock ra000_ffff_tmp58, sequence_ea_a5, ra000_ffff_tmp59;
		BitBlock sequence_ea_a5_byte_range_80_93, ra000_ffff_tmp60, sequence_ea_a6;
		BitBlock ra000_ffff_tmp61, sequence_ea_a6_byte_range_80_bf, ra000_ffff_tmp62;
		BitBlock sequence_ea_a7, ra000_ffff_tmp63, sequence_ea_a7_80, sequence_ea_a8;
		BitBlock ra000_ffff_tmp64, ra000_ffff_tmp65, byte_range_80_b6;
		BitBlock ra000_ffff_tmp66, sequence_ea_a8_byte_range_80_b6, sequence_ea_a9;
		BitBlock ra000_ffff_tmp67, ra000_ffff_tmp68, byte_range_80_8d;
		BitBlock ra000_ffff_tmp69, sequence_ea_a9_byte_range_80_8d, sequence_ea_aa;
		BitBlock ra000_ffff_tmp70, sequence_ea_aa_byte_range_80_bf, sequence_ea_ab;
		BitBlock ra000_ffff_tmp71, byte_range_80_82, ra000_ffff_tmp72;
		BitBlock sequence_ea_ab_byte_range_80_82, sequence_ea_ac, ra000_ffff_tmp73;
		BitBlock ra000_ffff_tmp74, byte_range_81_86, ra000_ffff_tmp75;
		BitBlock sequence_ea_ac_byte_range_81_86, sequence_ea_ad, ra000_ffff_tmp76;
		BitBlock ra000_ffff_tmp77, sequence_ea_ad_byte_range_80_9a, sequence_ea_af;
		BitBlock ra000_ffff_tmp78, ra000_ffff_tmp79, ra000_ffff_tmp80;
		BitBlock sequence_ea_af_byte_range_80_aa, sequence_ea_b0, ra000_ffff_tmp81;
		BitBlock sequence_ea_b0_byte_range_80_bf, ra000_ffff_tmp82, ra000_ffff_tmp83;
		BitBlock byte_range_eb_ec, ra000_ffff_tmp84, byte_range_eb_ec_sfx;
		BitBlock ra000_ffff_tmp85, byte_range_eb_ec_sfx_sfx, byte_ed, byte_ed_adv;
		BitBlock sequence_ed_80, ra000_ffff_tmp86, ra000_ffff_tmp87, byte_range_80_a3;
		BitBlock ra000_ffff_tmp88, sequence_ed_80_byte_range_80_a3, byte_ef;
		BitBlock ra000_ffff_tmp89, ra000_ffff_tmp90, byte_range_a4_a8;
		BitBlock ra000_ffff_tmp91, byte_ef_byte_range_a4_a8, ra000_ffff_tmp92;
		BitBlock byte_ef_byte_range_a4_a8_sfx, byte_ef_adv, sequence_ef_a9;
		BitBlock ra000_ffff_tmp93, sequence_ef_a9_byte_range_80_ad, sequence_ef_aa;
		BitBlock ra000_ffff_tmp94, sequence_ef_aa_byte_range_80_bf, sequence_ef_ab;
		BitBlock ra000_ffff_tmp95, byte_range_80_99, ra000_ffff_tmp96;
		BitBlock sequence_ef_ab_byte_range_80_99, sequence_ef_ac, byte_range_80_86;
		BitBlock ra000_ffff_tmp97, sequence_ef_ac_byte_range_80_86, sequence_ef_ad;
		BitBlock ra000_ffff_tmp98, sequence_ef_ad_byte_range_80_81, sequence_ef_ae;
		BitBlock ra000_ffff_tmp99, sequence_ef_ae_byte_range_80_b1, sequence_ef_af;
		BitBlock ra000_ffff_tmp100, ra000_ffff_tmp101, ra000_ffff_tmp102;
		BitBlock byte_range_93_bf, ra000_ffff_tmp103, sequence_ef_af_byte_range_93_bf;
		BitBlock sequence_ef_b0, ra000_ffff_tmp104, sequence_ef_b0_byte_range_80_bf;
		BitBlock sequence_ef_b4, ra000_ffff_tmp105, byte_range_80_bd;
		BitBlock ra000_ffff_tmp106, sequence_ef_b4_byte_range_80_bd, sequence_ef_b5;
		BitBlock ra000_ffff_tmp107, sequence_ef_b5_byte_range_90_bf, sequence_ef_b6;
		BitBlock ra000_ffff_tmp108, sequence_ef_b6_byte_range_80_8f, sequence_ef_b7;
		BitBlock ra000_ffff_tmp109, sequence_ef_b7_byte_range_80_87, sequence_ef_b8;
		BitBlock ra000_ffff_tmp110, sequence_ef_b8_byte_range_80_8f, sequence_ef_b9;
		BitBlock ra000_ffff_tmp111, byte_range_8d_8f, ra000_ffff_tmp112;
		BitBlock sequence_ef_b9_byte_range_8d_8f, sequence_ef_ba, ra000_ffff_tmp113;
		BitBlock sequence_ef_ba_byte_range_80_bf, sequence_ef_bb, ra000_ffff_tmp114;
		BitBlock ra000_ffff_tmp115, ra000_ffff_tmp116, byte_range_80_bc;
		BitBlock ra000_ffff_tmp117, sequence_ef_bb_byte_range_80_bc, sequence_ef_bc;
		BitBlock byte_range_90_99, ra000_ffff_tmp118, sequence_ef_bc_byte_range_90_99;
		BitBlock sequence_ef_bd, ra000_ffff_tmp119, sequence_ef_bd_byte_range_81_9a;
		BitBlock sequence_ef_be, ra000_ffff_tmp120, ra000_ffff_tmp121;
		BitBlock byte_range_80_be, ra000_ffff_tmp122, sequence_ef_be_byte_range_80_be;
		BitBlock sequence_ef_bf, byte_range_82_87, ra000_ffff_tmp123;
		BitBlock sequence_ef_bf_byte_range_82_87, byte_range_f0_ff, byte_f0;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3;
		BitBlock sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, sequence_f0_90_80, sequence_f0_90_adv;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9;
		BitBlock r10000_10ffff_tmp10, r10000_10ffff_tmp11, r10000_10ffff_tmp12;
		BitBlock r10000_10ffff_tmp13, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock r10000_10ffff_tmp22, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock r10000_10ffff_tmp25, cc_range_10000_1003f_4, sequence_f0_90_80_adv;
		BitBlock r10000_10ffff_tmp26, r10000_10ffff_tmp27, r10000_10ffff_tmp28;
		BitBlock sequence_f0_90_81, r10000_10ffff_tmp29, r10000_10ffff_tmp30;
		BitBlock r10000_10ffff_tmp31, r10000_10ffff_tmp32, cc_range_10040_10050_4;
		BitBlock sequence_f0_90_81_adv, r10000_10ffff_tmp33, r10000_10ffff_tmp34;
		BitBlock r10000_10ffff_tmp35, sequence_f0_90_82, sequence_f0_90_82_adv;
		BitBlock r10000_10ffff_tmp36, r10000_10ffff_tmp37, r10000_10ffff_tmp38;
		BitBlock r10000_10ffff_tmp39, sequence_f0_90_83, r10000_10ffff_tmp40;
		BitBlock r10000_10ffff_tmp41, byte_range_80_ba, sequence_f0_90_83_adv;
		BitBlock r10000_10ffff_tmp42, r10000_10ffff_tmp43, r10000_10ffff_tmp44;
		BitBlock sequence_f0_90_85, r10000_10ffff_tmp45, r10000_10ffff_tmp46;
		BitBlock r10000_10ffff_tmp47, r10000_10ffff_tmp48, sequence_f0_90_85_adv;
		BitBlock r10000_10ffff_tmp49, r10000_10ffff_tmp50, sequence_f0_90_87;
		BitBlock r10000_10ffff_tmp51, r10000_10ffff_tmp52, sequence_f0_90_87_adv;
		BitBlock r10000_10ffff_tmp53, r10000_10ffff_tmp54, r10000_10ffff_tmp55;
		BitBlock sequence_f0_90_8a, r10000_10ffff_tmp56, r10000_10ffff_tmp57;
		BitBlock r10000_10ffff_tmp58, r10000_10ffff_tmp59, cc_range_10280_102a0_4;
		BitBlock sequence_f0_90_8a_adv, r10000_10ffff_tmp60, r10000_10ffff_tmp61;
		BitBlock sequence_f0_90_8b, r10000_10ffff_tmp62, r10000_10ffff_tmp63;
		BitBlock r10000_10ffff_tmp64, r10000_10ffff_tmp65, cc_range_102c0_102e0_4;
		BitBlock sequence_f0_90_8b_adv, r10000_10ffff_tmp66, r10000_10ffff_tmp67;
		BitBlock sequence_f0_90_8c, r10000_10ffff_tmp68, cc_range_10300_10330_4;
		BitBlock sequence_f0_90_8c_adv, r10000_10ffff_tmp69, sequence_f0_90_8d;
		BitBlock r10000_10ffff_tmp70, r10000_10ffff_tmp71, r10000_10ffff_tmp72;
		BitBlock r10000_10ffff_tmp73, cc_range_10340_10350_4, sequence_f0_90_8d_adv;
		BitBlock r10000_10ffff_tmp74, r10000_10ffff_tmp75, sequence_f0_90_8e;
		BitBlock r10000_10ffff_tmp76, r10000_10ffff_tmp77, r10000_10ffff_tmp78;
		BitBlock cc_range_10380_103a0_4, sequence_f0_90_8e_adv, r10000_10ffff_tmp79;
		BitBlock sequence_f0_90_8f, r10000_10ffff_tmp80, r10000_10ffff_tmp81;
		BitBlock r10000_10ffff_tmp82, r10000_10ffff_tmp83, r10000_10ffff_tmp84;
		BitBlock r10000_10ffff_tmp85, cc_range_103c0_103d1_4, sequence_f0_90_8f_adv;
		BitBlock r10000_10ffff_tmp86, r10000_10ffff_tmp87, byte_range_90_91;
		BitBlock sequence_f0_90_byte_range_90_91, r10000_10ffff_tmp88;
		BitBlock sequence_f0_90_byte_range_90_91_sfx, sequence_f0_90_92;
		BitBlock r10000_10ffff_tmp89, sequence_f0_90_92_byte_range_80_9d;
		BitBlock r10000_10ffff_tmp90, sequence_f0_90_94, r10000_10ffff_tmp91;
		BitBlock r10000_10ffff_tmp92, r10000_10ffff_tmp93;
		BitBlock sequence_f0_90_94_byte_range_80_a7, byte_95, sequence_f0_90_95;
		BitBlock r10000_10ffff_tmp94, r10000_10ffff_tmp95, r10000_10ffff_tmp96;
		BitBlock sequence_f0_90_95_byte_range_80_a3, r10000_10ffff_tmp97;
		BitBlock sequence_f0_90_98, r10000_10ffff_tmp98;
		BitBlock sequence_f0_90_98_byte_range_80_bf, sequence_f0_90_9c;
		BitBlock r10000_10ffff_tmp99, r10000_10ffff_tmp100, r10000_10ffff_tmp101;
		BitBlock sequence_f0_90_9c_byte_range_80_b6, sequence_f0_90_9d;
		BitBlock r10000_10ffff_tmp102, r10000_10ffff_tmp103, r10000_10ffff_tmp104;
		BitBlock sequence_f0_90_9d_byte_range_80_95, sequence_f0_90_a0;
		BitBlock r10000_10ffff_tmp105, r10000_10ffff_tmp106;
		BitBlock sequence_f0_90_a0_byte_range_80_85, sequence_f0_90_a1;
		BitBlock r10000_10ffff_tmp107, sequence_f0_90_a1_byte_range_80_95;
		BitBlock sequence_f0_90_a2, r10000_10ffff_tmp108, r10000_10ffff_tmp109;
		BitBlock sequence_f0_90_a2_byte_range_80_9e, sequence_f0_90_a4;
		BitBlock r10000_10ffff_tmp110, sequence_f0_90_a4_byte_range_80_95;
		BitBlock r10000_10ffff_tmp111, sequence_f0_90_a6, r10000_10ffff_tmp112;
		BitBlock r10000_10ffff_tmp113, r10000_10ffff_tmp114;
		BitBlock sequence_f0_90_a6_byte_range_80_b7, sequence_f0_90_a8;
		BitBlock byte_range_80_83, r10000_10ffff_tmp115;
		BitBlock sequence_f0_90_a8_byte_range_80_83, r10000_10ffff_tmp116;
		BitBlock sequence_f0_90_a9, byte_range_a0_bc, r10000_10ffff_tmp117;
		BitBlock sequence_f0_90_a9_byte_range_a0_bc, sequence_f0_90_aa;
		BitBlock byte_range_80_9c, r10000_10ffff_tmp118;
		BitBlock sequence_f0_90_aa_byte_range_80_9c, sequence_f0_90_ab;
		BitBlock r10000_10ffff_tmp119, sequence_f0_90_ab_byte_range_80_87;
		BitBlock sequence_f0_90_ac, r10000_10ffff_tmp120, r10000_10ffff_tmp121;
		BitBlock sequence_f0_90_ac_byte_range_80_b5, sequence_f0_90_ad;
		BitBlock r10000_10ffff_tmp122, sequence_f0_90_ad_byte_range_80_95;
		BitBlock sequence_f0_90_ae, r10000_10ffff_tmp123, r10000_10ffff_tmp124;
		BitBlock sequence_f0_90_ae_byte_range_80_91, sequence_f0_90_b0;
		BitBlock r10000_10ffff_tmp125, sequence_f0_90_b0_byte_range_80_bf;
		BitBlock sequence_f0_90_b1, r10000_10ffff_tmp126, r10000_10ffff_tmp127;
		BitBlock r10000_10ffff_tmp128, sequence_f0_90_b1_byte_range_80_88;
		BitBlock sequence_f0_91, r10000_10ffff_tmp129, sequence_f0_91_80;
		BitBlock sequence_f0_91_adv, sequence_f0_91_80_adv, r10000_10ffff_tmp130;
		BitBlock sequence_f0_91_81, r10000_10ffff_tmp131, r10000_10ffff_tmp132;
		BitBlock r10000_10ffff_tmp133, r10000_10ffff_tmp134, cc_range_11040_1107f_4;
		BitBlock sequence_f0_91_81_adv, r10000_10ffff_tmp135, sequence_f0_91_82;
		BitBlock sequence_f0_91_82_adv, r10000_10ffff_tmp136, sequence_f0_91_83;
		BitBlock r10000_10ffff_tmp137, r10000_10ffff_tmp138, r10000_10ffff_tmp139;
		BitBlock r10000_10ffff_tmp140, r10000_10ffff_tmp141, cc_range_110d0_110f0_4;
		BitBlock sequence_f0_91_83_adv, r10000_10ffff_tmp142, sequence_f0_91_84;
		BitBlock r10000_10ffff_tmp143, cc_range_11100_11136_4, sequence_f0_91_84_adv;
		BitBlock r10000_10ffff_tmp144, sequence_f0_91_85, r10000_10ffff_tmp145;
		BitBlock r10000_10ffff_tmp146, r10000_10ffff_tmp147, r10000_10ffff_tmp148;
		BitBlock r10000_10ffff_tmp149, cc_range_11150_11176_4, sequence_f0_91_85_adv;
		BitBlock r10000_10ffff_tmp150, sequence_f0_91_86, sequence_f0_91_86_adv;
		BitBlock r10000_10ffff_tmp151, sequence_f0_91_87, r10000_10ffff_tmp152;
		BitBlock r10000_10ffff_tmp153, cc_range_111c0_111d0_4, sequence_f0_91_87_adv;
		BitBlock r10000_10ffff_tmp154, byte_88, sequence_f0_91_88;
		BitBlock r10000_10ffff_tmp155, r10000_10ffff_tmp156, r10000_10ffff_tmp157;
		BitBlock r10000_10ffff_tmp158, r10000_10ffff_tmp159, cc_range_11200_11213_4;
		BitBlock sequence_f0_91_88_adv, r10000_10ffff_tmp160, sequence_f0_91_8a;
		BitBlock sequence_f0_91_8a_adv, r10000_10ffff_tmp161, sequence_f0_91_8b;
		BitBlock r10000_10ffff_tmp162, r10000_10ffff_tmp163, r10000_10ffff_tmp164;
		BitBlock r10000_10ffff_tmp165, cc_range_112c0_112f0_4, sequence_f0_91_8b_adv;
		BitBlock r10000_10ffff_tmp166, sequence_f0_91_8c, r10000_10ffff_tmp167;
		BitBlock r10000_10ffff_tmp168, r10000_10ffff_tmp169, r10000_10ffff_tmp170;
		BitBlock r10000_10ffff_tmp171, r10000_10ffff_tmp172, r10000_10ffff_tmp173;
		BitBlock r10000_10ffff_tmp174, r10000_10ffff_tmp175, r10000_10ffff_tmp176;
		BitBlock r10000_10ffff_tmp177, r10000_10ffff_tmp178, r10000_10ffff_tmp179;
		BitBlock r10000_10ffff_tmp180, r10000_10ffff_tmp181, r10000_10ffff_tmp182;
		BitBlock r10000_10ffff_tmp183, r10000_10ffff_tmp184, r10000_10ffff_tmp185;
		BitBlock r10000_10ffff_tmp186, r10000_10ffff_tmp187, r10000_10ffff_tmp188;
		BitBlock cc_range_11301_1133c_4, sequence_f0_91_8c_adv, r10000_10ffff_tmp189;
		BitBlock sequence_f0_91_8d, r10000_10ffff_tmp190, r10000_10ffff_tmp191;
		BitBlock r10000_10ffff_tmp192, r10000_10ffff_tmp193, r10000_10ffff_tmp194;
		BitBlock r10000_10ffff_tmp195, r10000_10ffff_tmp196, r10000_10ffff_tmp197;
		BitBlock r10000_10ffff_tmp198, r10000_10ffff_tmp199, r10000_10ffff_tmp200;
		BitBlock r10000_10ffff_tmp201, r10000_10ffff_tmp202, r10000_10ffff_tmp203;
		BitBlock r10000_10ffff_tmp204, r10000_10ffff_tmp205, r10000_10ffff_tmp206;
		BitBlock r10000_10ffff_tmp207, r10000_10ffff_tmp208, r10000_10ffff_tmp209;
		BitBlock cc_range_11340_11370_4, sequence_f0_91_8d_adv, r10000_10ffff_tmp210;
		BitBlock sequence_f0_91_92, sequence_f0_91_92_adv, r10000_10ffff_tmp211;
		BitBlock sequence_f0_91_93, r10000_10ffff_tmp212, r10000_10ffff_tmp213;
		BitBlock r10000_10ffff_tmp214, cc_range_114c0_114d0_4, sequence_f0_91_93_adv;
		BitBlock r10000_10ffff_tmp215, byte_96, sequence_f0_91_96;
		BitBlock r10000_10ffff_tmp216, cc_range_11580_115b8_4, sequence_f0_91_96_adv;
		BitBlock r10000_10ffff_tmp217, byte_97, sequence_f0_91_97;
		BitBlock sequence_f0_91_97_adv, r10000_10ffff_tmp218, sequence_f0_91_98;
		BitBlock sequence_f0_91_98_adv, r10000_10ffff_tmp219, sequence_f0_91_99;
		BitBlock r10000_10ffff_tmp220, r10000_10ffff_tmp221, cc_range_11640_11650_4;
		BitBlock sequence_f0_91_99_adv, r10000_10ffff_tmp222, sequence_f0_91_9a;
		BitBlock sequence_f0_91_9a_adv, r10000_10ffff_tmp223, sequence_f0_91_9b;
		BitBlock sequence_f0_91_9b_adv, r10000_10ffff_tmp224, sequence_f0_91_a2;
		BitBlock byte_range_a0_bf, sequence_f0_91_a2_adv, r10000_10ffff_tmp225;
		BitBlock sequence_f0_91_a3, r10000_10ffff_tmp226, r10000_10ffff_tmp227;
		BitBlock r10000_10ffff_tmp228, r10000_10ffff_tmp229, cc_range_118c0_118ff_4;
		BitBlock sequence_f0_91_a3_adv, r10000_10ffff_tmp230, sequence_f0_91_ab;
		BitBlock r10000_10ffff_tmp231, r10000_10ffff_tmp232, byte_range_80_b8;
		BitBlock sequence_f0_91_ab_adv, r10000_10ffff_tmp233, sequence_f0_92;
		BitBlock r10000_10ffff_tmp234, sequence_f0_92_byte_range_80_8d;
		BitBlock r10000_10ffff_tmp235, sequence_f0_92_byte_range_80_8d_sfx;
		BitBlock sequence_f0_92_adv, sequence_f0_92_8e, byte_range_80_98;
		BitBlock r10000_10ffff_tmp236, sequence_f0_92_8e_byte_range_80_98;
		BitBlock sequence_f0_92_90, r10000_10ffff_tmp237;
		BitBlock sequence_f0_92_90_byte_range_80_bf, sequence_f0_92_91;
		BitBlock r10000_10ffff_tmp238, r10000_10ffff_tmp239, byte_range_80_ae;
		BitBlock r10000_10ffff_tmp240, sequence_f0_92_91_byte_range_80_ae;
		BitBlock sequence_f0_93, r10000_10ffff_tmp241, sequence_f0_93_byte_range_80_8f;
		BitBlock r10000_10ffff_tmp242, sequence_f0_93_byte_range_80_8f_sfx;
		BitBlock sequence_f0_93_adv, sequence_f0_93_90, r10000_10ffff_tmp243;
		BitBlock sequence_f0_93_90_byte_range_80_ae, sequence_f0_96, byte_range_a0_a7;
		BitBlock r10000_10ffff_tmp244, sequence_f0_96_byte_range_a0_a7;
		BitBlock r10000_10ffff_tmp245, sequence_f0_96_byte_range_a0_a7_sfx;
		BitBlock sequence_f0_96_adv, sequence_f0_96_a8, r10000_10ffff_tmp246;
		BitBlock sequence_f0_96_a8_byte_range_80_b8, sequence_f0_96_a9;
		BitBlock r10000_10ffff_tmp247, sequence_f0_96_a9_byte_range_80_9e;
		BitBlock sequence_f0_96_ab, r10000_10ffff_tmp248, r10000_10ffff_tmp249;
		BitBlock r10000_10ffff_tmp250, byte_range_90_ad, r10000_10ffff_tmp251;
		BitBlock sequence_f0_96_ab_byte_range_90_ad, sequence_f0_96_ac;
		BitBlock r10000_10ffff_tmp252, sequence_f0_96_ac_byte_range_80_b6;
		BitBlock sequence_f0_96_ad, r10000_10ffff_tmp253;
		BitBlock sequence_f0_96_ad_byte_range_80_83, sequence_f0_96_ae;
		BitBlock r10000_10ffff_tmp254, sequence_f0_96_ae_byte_range_80_8f;
		BitBlock sequence_f0_96_bc, r10000_10ffff_tmp255;
		BitBlock sequence_f0_96_bc_byte_range_80_bf, sequence_f0_96_bd;
		BitBlock r10000_10ffff_tmp256, r10000_10ffff_tmp257;
		BitBlock sequence_f0_96_bd_byte_range_80_84, sequence_f0_96_be;
		BitBlock byte_range_8f_9f, r10000_10ffff_tmp258;
		BitBlock sequence_f0_96_be_byte_range_8f_9f, sequence_f0_9b;
		BitBlock r10000_10ffff_tmp259, sequence_f0_9b_80, sequence_f0_9b_adv;
		BitBlock sequence_f0_9b_80_adv, r10000_10ffff_tmp260, sequence_f0_9b_b0;
		BitBlock sequence_f0_9b_b0_adv, r10000_10ffff_tmp261, sequence_f0_9b_b1;
		BitBlock r10000_10ffff_tmp262, r10000_10ffff_tmp263, cc_range_1bc40_1bc70_4;
		BitBlock sequence_f0_9b_b1_adv, r10000_10ffff_tmp264, sequence_f0_9b_b2;
		BitBlock r10000_10ffff_tmp265, r10000_10ffff_tmp266, r10000_10ffff_tmp267;
		BitBlock r10000_10ffff_tmp268, r10000_10ffff_tmp269, cc_range_1bc80_1bc9d_4;
		BitBlock sequence_f0_9b_b2_adv, r10000_10ffff_tmp270, sequence_f0_9d;
		BitBlock r10000_10ffff_tmp271, sequence_f0_9d_85, sequence_f0_9d_adv;
		BitBlock r10000_10ffff_tmp272, r10000_10ffff_tmp273, r10000_10ffff_tmp274;
		BitBlock r10000_10ffff_tmp275, r10000_10ffff_tmp276, r10000_10ffff_tmp277;
		BitBlock cc_range_1d165_1d17b_4, sequence_f0_9d_85_adv, r10000_10ffff_tmp278;
		BitBlock sequence_f0_9d_86, r10000_10ffff_tmp279, r10000_10ffff_tmp280;
		BitBlock r10000_10ffff_tmp281, r10000_10ffff_tmp282, r10000_10ffff_tmp283;
		BitBlock r10000_10ffff_tmp284, r10000_10ffff_tmp285, r10000_10ffff_tmp286;
		BitBlock r10000_10ffff_tmp287, cc_range_1d180_1d1aa_4, sequence_f0_9d_86_adv;
		BitBlock r10000_10ffff_tmp288, sequence_f0_9d_89, r10000_10ffff_tmp289;
		BitBlock r10000_10ffff_tmp290, sequence_f0_9d_89_adv, r10000_10ffff_tmp291;
		BitBlock sequence_f0_9d_90, sequence_f0_9d_90_adv, r10000_10ffff_tmp292;
		BitBlock sequence_f0_9d_91, r10000_10ffff_tmp293, r10000_10ffff_tmp294;
		BitBlock r10000_10ffff_tmp295, cc_range_1d440_1d456_4, sequence_f0_9d_91_adv;
		BitBlock r10000_10ffff_tmp296, sequence_f0_9d_92, r10000_10ffff_tmp297;
		BitBlock r10000_10ffff_tmp298, r10000_10ffff_tmp299, r10000_10ffff_tmp300;
		BitBlock r10000_10ffff_tmp301, r10000_10ffff_tmp302, r10000_10ffff_tmp303;
		BitBlock r10000_10ffff_tmp304, r10000_10ffff_tmp305, r10000_10ffff_tmp306;
		BitBlock r10000_10ffff_tmp307, r10000_10ffff_tmp308, r10000_10ffff_tmp309;
		BitBlock r10000_10ffff_tmp310, r10000_10ffff_tmp311, r10000_10ffff_tmp312;
		BitBlock cc_range_1d480_1d4bd_4, sequence_f0_9d_92_adv, r10000_10ffff_tmp313;
		BitBlock sequence_f0_9d_93, r10000_10ffff_tmp314, r10000_10ffff_tmp315;
		BitBlock r10000_10ffff_tmp316, cc_range_1d4c0_1d4c5_4, sequence_f0_9d_93_adv;
		BitBlock r10000_10ffff_tmp317, sequence_f0_9d_94, r10000_10ffff_tmp318;
		BitBlock r10000_10ffff_tmp319, r10000_10ffff_tmp320, r10000_10ffff_tmp321;
		BitBlock r10000_10ffff_tmp322, r10000_10ffff_tmp323, r10000_10ffff_tmp324;
		BitBlock r10000_10ffff_tmp325, r10000_10ffff_tmp326, r10000_10ffff_tmp327;
		BitBlock r10000_10ffff_tmp328, r10000_10ffff_tmp329, r10000_10ffff_tmp330;
		BitBlock r10000_10ffff_tmp331, r10000_10ffff_tmp332, r10000_10ffff_tmp333;
		BitBlock r10000_10ffff_tmp334, r10000_10ffff_tmp335, cc_range_1d500_1d53b_4;
		BitBlock sequence_f0_9d_94_adv, r10000_10ffff_tmp336, sequence_f0_9d_95;
		BitBlock r10000_10ffff_tmp337, r10000_10ffff_tmp338, r10000_10ffff_tmp339;
		BitBlock r10000_10ffff_tmp340, r10000_10ffff_tmp341, r10000_10ffff_tmp342;
		BitBlock cc_range_1d540_1d552_4, sequence_f0_9d_95_adv, r10000_10ffff_tmp343;
		BitBlock r10000_10ffff_tmp344, byte_range_96_99;
		BitBlock sequence_f0_9d_byte_range_96_99, r10000_10ffff_tmp345;
		BitBlock sequence_f0_9d_byte_range_96_99_sfx, sequence_f0_9d_9a;
		BitBlock r10000_10ffff_tmp346, r10000_10ffff_tmp347, byte_range_80_a5;
		BitBlock r10000_10ffff_tmp348, sequence_f0_9d_9a_byte_range_80_a5;
		BitBlock sequence_f0_9d_9b, r10000_10ffff_tmp349, sequence_f0_9d_9b_80;
		BitBlock sequence_f0_9d_9c, byte_range_80_94, r10000_10ffff_tmp350;
		BitBlock sequence_f0_9d_9c_byte_range_80_94, sequence_f0_9d_9d;
		BitBlock r10000_10ffff_tmp351, byte_range_80_8e, r10000_10ffff_tmp352;
		BitBlock sequence_f0_9d_9d_byte_range_80_8e, sequence_f0_9d_9e;
		BitBlock r10000_10ffff_tmp353, sequence_f0_9d_9e_byte_range_80_88;
		BitBlock sequence_f0_9d_9f, r10000_10ffff_tmp354;
		BitBlock sequence_f0_9d_9f_byte_range_80_82, sequence_f0_9e;
		BitBlock r10000_10ffff_tmp355, byte_range_a0_a2, r10000_10ffff_tmp356;
		BitBlock sequence_f0_9e_byte_range_a0_a2, r10000_10ffff_tmp357;
		BitBlock sequence_f0_9e_byte_range_a0_a2_sfx, sequence_f0_9e_adv;
		BitBlock sequence_f0_9e_a3, r10000_10ffff_tmp358;
		BitBlock sequence_f0_9e_a3_byte_range_80_84, sequence_f0_9e_b8;
		BitBlock r10000_10ffff_tmp359, sequence_f0_9e_b8_byte_range_80_83;
		BitBlock sequence_f0_9e_b9, r10000_10ffff_tmp360, sequence_f0_9e_b9_82;
		BitBlock sequence_f0_9e_ba, r10000_10ffff_tmp361;
		BitBlock sequence_f0_9e_ba_byte_range_80_89, byte_range_a0_a9;
		BitBlock byte_f0_byte_range_a0_a9, r10000_10ffff_tmp362;
		BitBlock byte_f0_byte_range_a0_a9_sfx, r10000_10ffff_tmp363;
		BitBlock byte_f0_byte_range_a0_a9_sfx_sfx, sequence_f0_aa, sequence_f0_aa_adv;
		BitBlock sequence_f0_aa_80, byte_range_80_96, r10000_10ffff_tmp364;
		BitBlock sequence_f0_aa_80_byte_range_80_96, sequence_f0_ab;
		BitBlock sequence_f0_ab_adv, sequence_f0_ab_80, r10000_10ffff_tmp365;
		BitBlock sequence_f0_ab_80_byte_range_80_b4, sequence_f0_af;
		BitBlock sequence_f0_af_adv, sequence_f0_af_a0, r10000_10ffff_tmp366;
		BitBlock sequence_f0_af_a0_byte_range_80_9d, byte_f3, r10000_10ffff_tmp367;
		BitBlock sequence_f3_a0, byte_f3_adv, r10000_10ffff_tmp368, byte_range_84_86;
		BitBlock r10000_10ffff_tmp369, sequence_f3_a0_byte_range_84_86;
		BitBlock r10000_10ffff_tmp370, sequence_f3_a0_byte_range_84_86_sfx;
		BitBlock sequence_f3_a0_adv, sequence_f3_a0_87, r10000_10ffff_tmp371;
		BitBlock sequence_f3_a0_87_byte_range_80_af;




        struct_idc_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        tmp6 = simd_andc(tmp3, tmp5);
        tmp7 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp8 = simd_andc(tmp7, basis_bits.bit_2);
        tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp10 = simd_or(basis_bits.bit_5, tmp9);
        tmp11 = simd_and(basis_bits.bit_4, tmp10);
        tmp12 = simd_not(tmp11);
        tmp13 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp14 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp15 = simd_or(tmp13, tmp14);
        tmp16 = simd_or(simd_and(basis_bits.bit_3, tmp12), simd_andc(tmp15, basis_bits.bit_3));
        tmp17 = simd_and(tmp8, tmp16);
        tmp18 = simd_or(tmp6, tmp17);
        tmp19 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp20 = simd_and(tmp7, tmp19);
        tmp21 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp22 = simd_and(tmp21, tmp9);
        tmp23 = simd_and(tmp20, tmp22);
        tmp24 = simd_or(tmp18, tmp23);
        tmp25 = simd_and(tmp7, basis_bits.bit_2);
        tmp26 = simd_and(tmp25, tmp16);
        cc_range_30_61_1 = simd_or(tmp24, tmp26);
        struct_idc_Y.cc = simd_or(struct_idc_Y.cc, cc_range_30_61_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 314))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 26))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, tmp13);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp9 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
            r80_7ff_tmp10 = simd_and(r80_7ff_tmp7, r80_7ff_tmp9);
            r80_7ff_tmp11 = simd_and(r80_7ff_tmp5, tmp2);
            r80_7ff_tmp12 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp13 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp14 = simd_and(r80_7ff_tmp12, r80_7ff_tmp13);
            r80_7ff_tmp15 = simd_and(r80_7ff_tmp11, r80_7ff_tmp14);
            r80_7ff_tmp16 = simd_or(r80_7ff_tmp10, r80_7ff_tmp15);
            r80_7ff_tmp17 = simd_and(r80_7ff_tmp12, tmp9);
            r80_7ff_tmp18 = simd_and(r80_7ff_tmp11, r80_7ff_tmp17);
            r80_7ff_tmp19 = simd_or(r80_7ff_tmp16, r80_7ff_tmp18);
            r80_7ff_tmp20 = simd_and(r80_7ff_tmp11, r80_7ff_tmp9);
            cc_range_aa_ba_2 = simd_or(r80_7ff_tmp19, r80_7ff_tmp20);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp21 = simd_and(byte_c2_adv, cc_range_aa_ba_2);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r80_7ff_tmp21);
            r80_7ff_tmp22 = simd_andc(tmp9, tmp13);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp22);
            r80_7ff_tmp23 = simd_andc(r80_7ff_tmp5, basis_bits.bit_2);
            r80_7ff_tmp24 = simd_and(basis_bits.bit_5, tmp9);
            r80_7ff_tmp25 = simd_or(basis_bits.bit_4, r80_7ff_tmp24);
            r80_7ff_tmp26 = simd_and(basis_bits.bit_3, r80_7ff_tmp25);
            r80_7ff_tmp27 = simd_andc(r80_7ff_tmp23, r80_7ff_tmp26);
            r80_7ff_tmp28 = simd_not(r80_7ff_tmp26);
            r80_7ff_tmp29 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r80_7ff_tmp30 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp28), simd_andc(r80_7ff_tmp29, basis_bits.bit_2));
            r80_7ff_tmp31 = simd_and(r80_7ff_tmp5, r80_7ff_tmp30);
            r80_7ff_tmp32 = simd_or(r80_7ff_tmp27, r80_7ff_tmp31);
            r80_7ff_tmp33 = simd_and(r80_7ff_tmp11, basis_bits.bit_4);
            cc_range_c0_f8_2 = simd_or(r80_7ff_tmp32, r80_7ff_tmp33);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp34 = simd_and(byte_c3_adv, cc_range_c0_f8_2);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r80_7ff_tmp34);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp13);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 9))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(2, 5))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_5, tmp14);
                r100_2ff_tmp2 = simd_not(r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_and(r80_7ff_tmp8, r80_7ff_tmp13);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp4);
                byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(2), r100_2ff_tmp5));
                r100_2ff_tmp6 = simd_and(r100_2ff_tmp5, byte_range_80_8f);
                r100_2ff_tmp7 = simd_or(byte_range_c4_c8, r100_2ff_tmp6);
                if ((bitblock::any(r100_2ff_tmp7) || carryQ.CarryTest(3, 2))) {
                  r100_24f_tmp1 = simd_andc(r80_7ff_tmp12, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp1);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(3, 1))) {
                    byte_range_80_bf = r80_7ff_tmp5;
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_range_c4_c5, carryQ.get_carry_in(3), r100_17f_tmp1));
                    byte_range_c4_c5_sfx = simd_and(r100_17f_tmp1, byte_range_80_bf);
                    struct_idc_Y.cc = simd_or(struct_idc_Y.cc, byte_range_c4_c5_sfx);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(3, 1);
                  }
                  r100_24f_tmp2 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r100_24f_tmp2, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp3);
                  r100_24f_tmp4 = simd_or(byte_range_c6_c8, r100_2ff_tmp6);
                  if ((bitblock::any(r100_24f_tmp4) || carryQ.CarryTest(4, 1))) {
                    byte_range_80_bf = r80_7ff_tmp5;
                    carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_range_c6_c8, carryQ.get_carry_in(4), r180_24f_tmp1));
                    byte_range_c6_c8_sfx = simd_and(r180_24f_tmp1, byte_range_80_bf);
                    struct_idc_Y.cc = simd_or(struct_idc_Y.cc, byte_range_c6_c8_sfx);
                    byte_c9_byte_range_80_8f = r100_2ff_tmp6;
                    struct_idc_Y.cc = simd_or(struct_idc_Y.cc, byte_c9_byte_range_80_8f);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(4, 1);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 2);
                }
                byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
                r100_2ff_tmp8 = simd_and(r100_2ff_tmp5, byte_range_90_bf);
                byte_ca = simd_and(r80_7ff_tmp2, r80_7ff_tmp9);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, tmp2);
                carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(5), r100_2ff_tmp9));
                r100_2ff_tmp10 = simd_and(r100_2ff_tmp9, byte_range_80_af);
                r100_2ff_tmp11 = simd_or(r100_2ff_tmp8, r100_2ff_tmp10);
                if (bitblock::any(r100_2ff_tmp11)) {
                  byte_c9_adv = r100_2ff_tmp5;
                  r250_2af_tmp1 = simd_and(byte_c9_adv, byte_range_90_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r250_2af_tmp1);
                  byte_ca_adv = r100_2ff_tmp9;
                  r250_2af_tmp2 = simd_and(byte_ca_adv, byte_range_80_af);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r250_2af_tmp2);
                }
                byte_range_b0_bf = r80_7ff_tmp11;
                r100_2ff_tmp12 = simd_and(r100_2ff_tmp9, byte_range_b0_bf);
                r100_2ff_tmp13 = simd_and(r80_7ff_tmp8, tmp9);
                byte_cb = simd_and(r80_7ff_tmp2, r100_2ff_tmp13);
                r100_2ff_tmp14 = simd_or(r100_2ff_tmp12, byte_cb);
                if ((bitblock::any(r100_2ff_tmp14) || carryQ.CarryTest(6, 1))) {
                  byte_ca_adv = r100_2ff_tmp9;
                  r2b0_2ff_tmp1 = simd_and(byte_ca_adv, byte_range_b0_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r2b0_2ff_tmp1);
                  r2b0_2ff_tmp2 = simd_or(tmp13, basis_bits.bit_6);
                  r2b0_2ff_tmp3 = simd_andc(byte_range_80_8f, r2b0_2ff_tmp2);
                  r2b0_2ff_tmp4 = simd_not(r2b0_2ff_tmp2);
                  r2b0_2ff_tmp5 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2b0_2ff_tmp6 = simd_or(basis_bits.bit_4, r2b0_2ff_tmp5);
                  r2b0_2ff_tmp7 = simd_or(simd_and(basis_bits.bit_3, r2b0_2ff_tmp4), simd_andc(r2b0_2ff_tmp6, basis_bits.bit_3));
                  r2b0_2ff_tmp8 = simd_and(r80_7ff_tmp23, r2b0_2ff_tmp7);
                  r2b0_2ff_tmp9 = simd_or(r2b0_2ff_tmp3, r2b0_2ff_tmp8);
                  r2b0_2ff_tmp10 = simd_andc(r80_7ff_tmp7, basis_bits.bit_4);
                  r2b0_2ff_tmp11 = simd_and(basis_bits.bit_5, tmp14);
                  r2b0_2ff_tmp12 = simd_andc(r2b0_2ff_tmp10, r2b0_2ff_tmp11);
                  r2b0_2ff_tmp13 = simd_or(r2b0_2ff_tmp9, r2b0_2ff_tmp12);
                  r2b0_2ff_tmp14 = simd_andc(tmp21, tmp14);
                  r2b0_2ff_tmp15 = simd_and(r80_7ff_tmp7, r2b0_2ff_tmp14);
                  r2b0_2ff_tmp16 = simd_or(r2b0_2ff_tmp13, r2b0_2ff_tmp15);
                  r2b0_2ff_tmp17 = simd_and(tmp21, r80_7ff_tmp3);
                  r2b0_2ff_tmp18 = simd_and(r80_7ff_tmp7, r2b0_2ff_tmp17);
                  cc_range_2c0_2ee_2 = simd_or(r2b0_2ff_tmp16, r2b0_2ff_tmp18);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(6), byte_cb_adv));
                  r2b0_2ff_tmp19 = simd_and(byte_cb_adv, cc_range_2c0_2ee_2);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r2b0_2ff_tmp19);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 5);
              }
              r100_3ff_tmp2 = simd_andc(tmp21, tmp14);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp2);
              r100_3ff_tmp3 = simd_and(tmp21, r80_7ff_tmp13);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              byte_range_80_af = simd_andc(r80_7ff_tmp5, tmp2);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(7), r100_3ff_tmp4));
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp4, byte_range_80_af);
              r100_3ff_tmp6 = simd_or(byte_cc, r100_3ff_tmp5);
              if ((bitblock::any(r100_3ff_tmp6) || carryQ.CarryTest(8, 1))) {
                byte_range_80_bf = r80_7ff_tmp5;
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_cc, carryQ.get_carry_in(8), byte_cc_adv));
                r300_36f_tmp1 = simd_and(byte_cc_adv, byte_range_80_bf);
                struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r300_36f_tmp1);
                byte_cd_adv = r100_3ff_tmp4;
                r300_36f_tmp2 = simd_and(byte_cd_adv, byte_range_80_af);
                struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r300_36f_tmp2);
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 1);
              }
              byte_range_b0_bf = r80_7ff_tmp11;
              r100_3ff_tmp7 = simd_and(r100_3ff_tmp4, byte_range_b0_bf);
              r100_3ff_tmp8 = simd_and(tmp21, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp8);
              r100_3ff_tmp9 = simd_or(r100_3ff_tmp7, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp9) || carryQ.CarryTest(9, 2))) {
                r370_3ff_tmp1 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp2 = simd_and(basis_bits.bit_5, tmp14);
                r370_3ff_tmp3 = simd_andc(r370_3ff_tmp1, r370_3ff_tmp2);
                r370_3ff_tmp4 = simd_and(r80_7ff_tmp12, basis_bits.bit_6);
                r370_3ff_tmp5 = simd_and(byte_range_b0_bf, r370_3ff_tmp4);
                r370_3ff_tmp6 = simd_or(r370_3ff_tmp3, r370_3ff_tmp5);
                r370_3ff_tmp7 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp8 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                r370_3ff_tmp9 = simd_and(r370_3ff_tmp7, r370_3ff_tmp8);
                r370_3ff_tmp10 = simd_or(r370_3ff_tmp6, r370_3ff_tmp9);
                r370_3ff_tmp11 = simd_and(byte_range_b0_bf, tmp22);
                cc_range_370_37f_2 = simd_or(r370_3ff_tmp10, r370_3ff_tmp11);
                byte_cd_adv = r100_3ff_tmp4;
                r370_3ff_tmp12 = simd_and(byte_cd_adv, cc_range_370_37f_2);
                struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r370_3ff_tmp12);
                r370_3ff_tmp13 = simd_and(tmp21, r80_7ff_tmp3);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp13);
                r370_3ff_tmp14 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                r370_3ff_tmp15 = simd_not(tmp10);
                r370_3ff_tmp16 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r370_3ff_tmp17 = simd_or(simd_and(basis_bits.bit_4, r370_3ff_tmp15), simd_andc(r370_3ff_tmp16, basis_bits.bit_4));
                r370_3ff_tmp18 = simd_or(r370_3ff_tmp17, r100_3ff_tmp2);
                r370_3ff_tmp19 = simd_and(r370_3ff_tmp14, r370_3ff_tmp18);
                r370_3ff_tmp20 = simd_or(tmp13, basis_bits.bit_6);
                r370_3ff_tmp21 = simd_or(basis_bits.bit_3, r370_3ff_tmp20);
                r370_3ff_tmp22 = simd_not(r370_3ff_tmp21);
                r370_3ff_tmp23 = simd_or(basis_bits.bit_3, r100_3ff_tmp8);
                r370_3ff_tmp24 = simd_or(simd_and(basis_bits.bit_2, r370_3ff_tmp22), simd_andc(r370_3ff_tmp23, basis_bits.bit_2));
                r370_3ff_tmp25 = simd_and(r80_7ff_tmp5, r370_3ff_tmp24);
                r370_3ff_tmp26 = simd_or(r370_3ff_tmp19, r370_3ff_tmp25);
                r370_3ff_tmp27 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                r370_3ff_tmp28 = simd_or(tmp13, tmp9);
                r370_3ff_tmp29 = simd_or(basis_bits.bit_3, r370_3ff_tmp28);
                r370_3ff_tmp30 = simd_and(r370_3ff_tmp27, r370_3ff_tmp29);
                cc_range_386_3a3_2 = simd_or(r370_3ff_tmp26, r370_3ff_tmp30);
                carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(9), byte_ce_adv));
                r370_3ff_tmp31 = simd_and(byte_ce_adv, cc_range_386_3a3_2);
                struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r370_3ff_tmp31);
                byte_cf = simd_and(r80_7ff_tmp2, tmp22);
                r370_3ff_tmp32 = simd_or(basis_bits.bit_4, r370_3ff_tmp16);
                r370_3ff_tmp33 = simd_and(basis_bits.bit_3, r370_3ff_tmp32);
                r370_3ff_tmp34 = simd_and(basis_bits.bit_2, r370_3ff_tmp33);
                r370_3ff_tmp35 = simd_andc(r80_7ff_tmp5, r370_3ff_tmp34);
                r370_3ff_tmp36 = simd_and(byte_range_b0_bf, r80_7ff_tmp25);
                cc_range_3c0_3f7_2 = simd_or(r370_3ff_tmp35, r370_3ff_tmp36);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(10), byte_cf_adv));
                r370_3ff_tmp37 = simd_and(byte_cf_adv, cc_range_3c0_3f7_2);
                struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r370_3ff_tmp37);
              }
              else {
                carryQ.CarryDequeueEnqueue(9, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 9);
            }
            r80_7ff_tmp35 = simd_and(byte_range_c0_ff, tmp19);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp35, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(11, 7))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp35, tmp13);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(11, 3))) {
                r400_4ff_tmp1 = simd_or(tmp13, basis_bits.bit_6);
                byte_range_d0_d1 = simd_andc(r80_7ff_tmp35, r400_4ff_tmp1);
                byte_range_80_bf = r80_7ff_tmp5;
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_range_d0_d1, carryQ.get_carry_in(11), r400_4ff_tmp2));
                byte_range_d0_d1_sfx = simd_and(r400_4ff_tmp2, byte_range_80_bf);
                struct_idc_Y.cc = simd_or(struct_idc_Y.cc, byte_range_d0_d1_sfx);
                byte_d2 = simd_and(r80_7ff_tmp35, r80_7ff_tmp4);
                r400_4ff_tmp3 = simd_andc(byte_range_80_bf, r80_7ff_tmp1);
                byte_range_80_81 = simd_andc(r400_4ff_tmp3, r400_4ff_tmp1);
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(12), r400_4ff_tmp4));
                byte_d2_byte_range_80_81 = simd_and(r400_4ff_tmp4, byte_range_80_81);
                struct_idc_Y.cc = simd_or(struct_idc_Y.cc, byte_d2_byte_range_80_81);
                byte_d3 = simd_and(r80_7ff_tmp35, r80_7ff_tmp22);
                carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(13), r400_4ff_tmp5));
                byte_d3_byte_range_80_bf = simd_and(r400_4ff_tmp5, byte_range_80_bf);
                struct_idc_Y.cc = simd_or(struct_idc_Y.cc, byte_d3_byte_range_80_bf);
              }
              else {
                carryQ.CarryDequeueEnqueue(11, 3);
              }
              r400_5ff_tmp1 = simd_andc(r80_7ff_tmp12, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp35, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(r80_7ff_tmp12, r80_7ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp35, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(14), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(15, 2))) {
                r500_58f_tmp1 = simd_andc(r80_7ff_tmp12, tmp14);
                byte_d4 = simd_and(r80_7ff_tmp35, r500_58f_tmp1);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, tmp2);
                carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(15), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp3)) {
                  byte_d4_adv = r500_58f_tmp2;
                  r500_52f_tmp1 = simd_and(byte_d4_adv, byte_range_80_af);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r500_52f_tmp1);
                }
                byte_range_b0_bf = r80_7ff_tmp11;
                r500_58f_tmp4 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                byte_d5 = simd_and(r80_7ff_tmp35, r80_7ff_tmp14);
                r500_58f_tmp5 = simd_or(r500_58f_tmp4, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp4);
                if ((bitblock::any(r500_58f_tmp6) || carryQ.CarryTest(16, 1))) {
                  r530_58f_tmp1 = simd_or(basis_bits.bit_5, tmp14);
                  r530_58f_tmp2 = simd_or(basis_bits.bit_4, r530_58f_tmp1);
                  byte_range_b1_bf = simd_and(byte_range_b0_bf, r530_58f_tmp2);
                  byte_d4_adv = r500_58f_tmp2;
                  r530_58f_tmp3 = simd_and(byte_d4_adv, byte_range_b1_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r530_58f_tmp3);
                  r530_58f_tmp4 = simd_and(r80_7ff_tmp5, tmp19);
                  r530_58f_tmp5 = simd_and(r80_7ff_tmp8, r80_7ff_tmp13);
                  r530_58f_tmp6 = simd_and(r530_58f_tmp4, r530_58f_tmp5);
                  r530_58f_tmp7 = simd_or(r80_7ff_tmp27, r530_58f_tmp6);
                  r530_58f_tmp8 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                  r530_58f_tmp9 = simd_or(basis_bits.bit_3, tmp15);
                  r530_58f_tmp10 = simd_and(r530_58f_tmp8, r530_58f_tmp9);
                  cc_range_540_561_2 = simd_or(r530_58f_tmp7, r530_58f_tmp10);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(16), byte_d5_adv));
                  r530_58f_tmp11 = simd_and(byte_d5_adv, cc_range_540_561_2);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r530_58f_tmp11);
                  byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_d6_adv = r400_5ff_tmp3;
                  r530_58f_tmp12 = simd_and(byte_d6_adv, byte_range_80_87);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r530_58f_tmp12);
                }
                else {
                  carryQ.CarryDequeueEnqueue(16, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(15, 2);
              }
              byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
              r400_5ff_tmp6 = simd_and(r400_5ff_tmp3, byte_range_90_bf);
              byte_d7 = simd_and(r80_7ff_tmp35, r80_7ff_tmp17);
              r400_5ff_tmp7 = simd_or(r400_5ff_tmp6, byte_d7);
              if ((bitblock::any(r400_5ff_tmp7) || carryQ.CarryTest(17, 1))) {
                r590_5ff_tmp1 = simd_and(tmp21, basis_bits.bit_6);
                r590_5ff_tmp2 = simd_and(basis_bits.bit_3, r590_5ff_tmp1);
                r590_5ff_tmp3 = simd_not(r590_5ff_tmp2);
                r590_5ff_tmp4 = simd_and(basis_bits.bit_3, tmp15);
                r590_5ff_tmp5 = simd_or(simd_and(basis_bits.bit_2, r590_5ff_tmp3), simd_andc(r590_5ff_tmp4, basis_bits.bit_2));
                r590_5ff_tmp6 = simd_and(r80_7ff_tmp5, r590_5ff_tmp5);
                r590_5ff_tmp7 = simd_and(r80_7ff_tmp11, tmp22);
                cc_range_591_5bf_2 = simd_or(r590_5ff_tmp6, r590_5ff_tmp7);
                byte_d6_adv = r400_5ff_tmp3;
                r590_5ff_tmp8 = simd_and(byte_d6_adv, cc_range_591_5bf_2);
                struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r590_5ff_tmp8);
                r590_5ff_tmp9 = simd_andc(byte_range_80_8f, tmp13);
                r590_5ff_tmp10 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                r590_5ff_tmp11 = simd_and(r590_5ff_tmp9, r590_5ff_tmp10);
                r590_5ff_tmp12 = simd_and(byte_range_80_8f, r400_5ff_tmp1);
                r590_5ff_tmp13 = simd_or(r590_5ff_tmp11, r590_5ff_tmp12);
                r590_5ff_tmp14 = simd_and(byte_range_80_8f, r80_7ff_tmp17);
                r590_5ff_tmp15 = simd_or(r590_5ff_tmp13, r590_5ff_tmp14);
                r590_5ff_tmp16 = simd_or(basis_bits.bit_3, tmp11);
                r590_5ff_tmp17 = simd_not(r590_5ff_tmp16);
                r590_5ff_tmp18 = simd_or(simd_and(basis_bits.bit_2, r590_5ff_tmp17), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                r590_5ff_tmp19 = simd_and(r80_7ff_tmp5, r590_5ff_tmp18);
                r590_5ff_tmp20 = simd_or(r590_5ff_tmp15, r590_5ff_tmp19);
                r590_5ff_tmp21 = simd_andc(r80_7ff_tmp11, tmp13);
                r590_5ff_tmp22 = simd_andc(r590_5ff_tmp21, tmp9);
                cc_range_5c1_5f0_2 = simd_or(r590_5ff_tmp20, r590_5ff_tmp22);
                carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(17), byte_d7_adv));
                r590_5ff_tmp23 = simd_and(byte_d7_adv, cc_range_5c1_5f0_2);
                struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r590_5ff_tmp23);
              }
              else {
                carryQ.CarryDequeueEnqueue(17, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(11, 7);
            }
            byte_range_d8_db = simd_and(r80_7ff_tmp35, r80_7ff_tmp8);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(18, 4))) {
              r600_6ff_tmp1 = simd_andc(r80_7ff_tmp8, tmp14);
              byte_d8 = simd_and(r80_7ff_tmp35, r600_6ff_tmp1);
              r600_6ff_tmp2 = simd_and(r80_7ff_tmp5, tmp19);
              r600_6ff_tmp3 = simd_andc(r600_6ff_tmp2, tmp11);
              r600_6ff_tmp4 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
              cc_range_610_620_2 = simd_or(r600_6ff_tmp3, r600_6ff_tmp4);
              carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(18), byte_d8_adv));
              r600_6ff_tmp5 = simd_and(byte_d8_adv, cc_range_610_620_2);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r600_6ff_tmp5);
              r600_6ff_tmp6 = simd_and(r80_7ff_tmp8, r80_7ff_tmp13);
              byte_d9 = simd_and(r80_7ff_tmp35, r600_6ff_tmp6);
              r600_6ff_tmp7 = simd_or(basis_bits.bit_3, tmp5);
              r600_6ff_tmp8 = simd_and(basis_bits.bit_2, r600_6ff_tmp7);
              r600_6ff_tmp9 = simd_andc(r80_7ff_tmp5, r600_6ff_tmp8);
              r600_6ff_tmp10 = simd_and(tmp21, basis_bits.bit_6);
              r600_6ff_tmp11 = simd_or(basis_bits.bit_3, r600_6ff_tmp10);
              r600_6ff_tmp12 = simd_and(r600_6ff_tmp4, r600_6ff_tmp11);
              cc_range_640_66e_2 = simd_or(r600_6ff_tmp9, r600_6ff_tmp12);
              carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(19), byte_d9_adv));
              r600_6ff_tmp13 = simd_and(byte_d9_adv, cc_range_640_66e_2);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r600_6ff_tmp13);
              byte_da = simd_and(r80_7ff_tmp35, r80_7ff_tmp9);
              byte_range_80_bf = r80_7ff_tmp5;
              carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_da, carryQ.get_carry_in(20), byte_da_adv));
              r600_6ff_tmp14 = simd_and(byte_da_adv, byte_range_80_bf);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r600_6ff_tmp14);
              r600_6ff_tmp15 = simd_and(r80_7ff_tmp8, tmp9);
              byte_db = simd_and(r80_7ff_tmp35, r600_6ff_tmp15);
              r600_6ff_tmp16 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              r600_6ff_tmp17 = simd_and(basis_bits.bit_3, tmp13);
              r600_6ff_tmp18 = simd_andc(r600_6ff_tmp16, r600_6ff_tmp17);
              r600_6ff_tmp19 = simd_and(byte_range_80_bf, tmp19);
              r600_6ff_tmp20 = simd_and(basis_bits.bit_5, tmp14);
              r600_6ff_tmp21 = simd_xor(basis_bits.bit_4, r600_6ff_tmp20);
              r600_6ff_tmp22 = simd_and(r600_6ff_tmp19, r600_6ff_tmp21);
              r600_6ff_tmp23 = simd_or(r600_6ff_tmp18, r600_6ff_tmp22);
              r600_6ff_tmp24 = simd_or(basis_bits.bit_5, tmp14);
              r600_6ff_tmp25 = simd_and(basis_bits.bit_4, r600_6ff_tmp24);
              r600_6ff_tmp26 = simd_or(basis_bits.bit_3, r600_6ff_tmp25);
              r600_6ff_tmp27 = simd_not(r600_6ff_tmp26);
              r600_6ff_tmp28 = simd_and(basis_bits.bit_3, tmp22);
              r600_6ff_tmp29 = simd_or(simd_and(basis_bits.bit_2, r600_6ff_tmp27), simd_andc(r600_6ff_tmp28, basis_bits.bit_2));
              r600_6ff_tmp30 = simd_and(byte_range_80_bf, r600_6ff_tmp29);
              r600_6ff_tmp31 = simd_or(r600_6ff_tmp23, r600_6ff_tmp30);
              r600_6ff_tmp32 = simd_and(byte_range_80_bf, basis_bits.bit_2);
              r600_6ff_tmp33 = simd_and(tmp21, tmp14);
              r600_6ff_tmp34 = simd_not(r600_6ff_tmp33);
              r600_6ff_tmp35 = simd_or(simd_and(basis_bits.bit_3, r600_6ff_tmp34), simd_andc(tmp5, basis_bits.bit_3));
              r600_6ff_tmp36 = simd_and(r600_6ff_tmp32, r600_6ff_tmp35);
              r600_6ff_tmp37 = simd_or(r600_6ff_tmp31, r600_6ff_tmp36);
              r600_6ff_tmp38 = simd_and(byte_range_80_bf, tmp2);
              r600_6ff_tmp39 = simd_and(r600_6ff_tmp38, tmp22);
              cc_range_6c0_6ff_2 = simd_or(r600_6ff_tmp37, r600_6ff_tmp39);
              carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(21), byte_db_adv));
              r600_6ff_tmp40 = simd_and(byte_db_adv, cc_range_6c0_6ff_2);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r600_6ff_tmp40);
            }
            else {
              carryQ.CarryDequeueEnqueue(18, 4);
            }
            r80_7ff_tmp36 = simd_andc(tmp21, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp35, r80_7ff_tmp36);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(22, 2))) {
              r700_77f_tmp1 = simd_andc(tmp21, tmp14);
              byte_dc = simd_and(r80_7ff_tmp35, r700_77f_tmp1);
              r700_77f_tmp2 = simd_and(tmp21, r80_7ff_tmp13);
              byte_dd = simd_and(r80_7ff_tmp35, r700_77f_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(22), r700_77f_tmp3));
              r700_77f_tmp4 = simd_and(r700_77f_tmp3, byte_range_80_8f);
              r700_77f_tmp5 = simd_or(byte_dc, r700_77f_tmp4);
              if ((bitblock::any(r700_77f_tmp5) || carryQ.CarryTest(23, 1))) {
                byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
                carryQ.cq[23] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(23), byte_dc_adv));
                r700_74f_tmp1 = simd_and(byte_dc_adv, byte_range_90_bf);
                struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r700_74f_tmp1);
                r700_74f_tmp2 = simd_andc(byte_range_80_8f, tmp11);
                r700_74f_tmp3 = simd_and(byte_range_80_8f, tmp21);
                r700_74f_tmp4 = simd_and(r700_74f_tmp3, tmp14);
                cc_range_740_74d_2 = simd_or(r700_74f_tmp2, r700_74f_tmp4);
                byte_dd_adv = r700_77f_tmp3;
                r700_74f_tmp5 = simd_and(byte_dd_adv, cc_range_740_74d_2);
                struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r700_74f_tmp5);
              }
              else {
                carryQ.CarryDequeueEnqueue(23, 1);
              }
              byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
              r700_77f_tmp6 = simd_and(r700_77f_tmp3, byte_range_90_bf);
              if (bitblock::any(r700_77f_tmp6)) {
                byte_dd_adv = r700_77f_tmp3;
                r750_77f_tmp1 = simd_and(byte_dd_adv, byte_range_90_bf);
                struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r750_77f_tmp1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(22, 2);
            }
            r80_7ff_tmp37 = simd_and(tmp21, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp35, r80_7ff_tmp37);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(24, 2))) {
              r780_7ff_tmp1 = simd_and(tmp21, r80_7ff_tmp3);
              byte_de = simd_and(r80_7ff_tmp35, r780_7ff_tmp1);
              if ((bitblock::any(byte_de) || carryQ.CarryTest(24, 1))) {
                r780_7bf_tmp1 = simd_or(tmp13, basis_bits.bit_6);
                r780_7bf_tmp2 = simd_and(basis_bits.bit_3, r780_7bf_tmp1);
                r780_7bf_tmp3 = simd_and(basis_bits.bit_2, r780_7bf_tmp2);
                byte_range_80_b1 = simd_andc(r80_7ff_tmp5, r780_7bf_tmp3);
                carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(24), byte_de_adv));
                r780_7bf_tmp4 = simd_and(byte_de_adv, byte_range_80_b1);
                struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r780_7bf_tmp4);
              }
              else {
                carryQ.CarryDequeueEnqueue(24, 1);
              }
              byte_df = simd_and(r80_7ff_tmp35, tmp22);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(25, 1))) {
                r7c0_7ff_tmp1 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r7c0_7ff_tmp2 = simd_or(basis_bits.bit_4, r7c0_7ff_tmp1);
                r7c0_7ff_tmp3 = simd_and(basis_bits.bit_3, r7c0_7ff_tmp2);
                r7c0_7ff_tmp4 = simd_and(basis_bits.bit_2, r7c0_7ff_tmp3);
                r7c0_7ff_tmp5 = simd_andc(r80_7ff_tmp5, r7c0_7ff_tmp4);
                cc_range_7c0_7fa_2 = simd_or(r7c0_7ff_tmp5, r80_7ff_tmp20);
                carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(25), byte_df_adv));
                r7c0_7ff_tmp6 = simd_and(byte_df_adv, cc_range_7c0_7fa_2);
                struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r7c0_7ff_tmp6);
              }
              else {
                carryQ.CarryDequeueEnqueue(25, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(24, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 26);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(26, 169))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp13);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp14);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[26] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(26), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(27, 108))) {
              r800_4dff_tmp1 = simd_or(tmp13, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(27, 80))) {
                byte_e0 = simd_andc(byte_range_e0_ef, tmp15);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(27, 33))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r800_fff_tmp1, tmp15);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(27), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_and(tmp21, basis_bits.bit_6);
                  r800_fff_tmp4 = simd_or(basis_bits.bit_3, r800_fff_tmp3);
                  r800_fff_tmp5 = simd_and(basis_bits.bit_2, r800_fff_tmp4);
                  byte_range_80_ad = simd_andc(r800_ffff_tmp3, r800_fff_tmp5);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(28), sequence_e0_a0_adv));
                  r800_fff_tmp6 = simd_and(sequence_e0_a0_adv, byte_range_80_ad);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp6);
                  r800_fff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp8 = simd_andc(r800_fff_tmp7, tmp13);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp8);
                  sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
                  r800_fff_tmp9 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r800_fff_tmp10 = simd_and(basis_bits.bit_3, tmp21);
                  byte_range_80_9b = simd_andc(r800_fff_tmp9, r800_fff_tmp10);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(29), sequence_e0_a1_adv));
                  r800_fff_tmp11 = simd_and(sequence_e0_a1_adv, byte_range_80_9b);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp11);
                  r800_fff_tmp12 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp13 = simd_andc(r800_fff_tmp12, tmp13);
                  byte_a2 = simd_and(r800_fff_tmp1, r800_fff_tmp13);
                  sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
                  r800_fff_tmp14 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r800_fff_tmp15 = simd_or(tmp13, tmp9);
                  r800_fff_tmp16 = simd_and(basis_bits.bit_3, r800_fff_tmp15);
                  byte_range_a0_b2 = simd_andc(r800_fff_tmp14, r800_fff_tmp16);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_a2, carryQ.get_carry_in(30), sequence_e0_a2_adv));
                  r800_fff_tmp17 = simd_and(sequence_e0_a2_adv, byte_range_a0_b2);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp17);
                  r800_fff_tmp18 = simd_andc(tmp9, tmp13);
                  byte_a3 = simd_and(r800_fff_tmp1, r800_fff_tmp18);
                  sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
                  r800_fff_tmp19 = simd_or(basis_bits.bit_3, tmp13);
                  byte_range_a4_bf = simd_and(r800_fff_tmp14, r800_fff_tmp19);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_a3, carryQ.get_carry_in(31), sequence_e0_a3_adv));
                  r800_fff_tmp20 = simd_and(sequence_e0_a3_adv, byte_range_a4_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp20);
                  byte_a4 = simd_and(r800_fff_tmp1, r800_ffff_tmp2);
                  sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(32), sequence_e0_a4_adv));
                  r800_fff_tmp21 = simd_and(sequence_e0_a4_adv, byte_range_80_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp21);
                  r800_fff_tmp22 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r800_fff_tmp23 = simd_and(r800_ffff_tmp1, r800_fff_tmp7);
                  byte_a5 = simd_and(r800_fff_tmp22, r800_fff_tmp23);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  r800_fff_tmp24 = simd_and(basis_bits.bit_2, r800_fff_tmp19);
                  r800_fff_tmp25 = simd_andc(byte_range_80_bf, r800_fff_tmp24);
                  r800_fff_tmp26 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp27 = simd_or(basis_bits.bit_4, r800_fff_tmp26);
                  r800_fff_tmp28 = simd_and(r800_fff_tmp22, r800_fff_tmp27);
                  r800_fff_tmp29 = simd_or(r800_fff_tmp25, r800_fff_tmp28);
                  r800_fff_tmp30 = simd_and(byte_range_80_bf, tmp2);
                  r800_fff_tmp31 = simd_or(basis_bits.bit_5, tmp14);
                  r800_fff_tmp32 = simd_or(basis_bits.bit_4, r800_fff_tmp31);
                  r800_fff_tmp33 = simd_and(r800_fff_tmp30, r800_fff_tmp32);
                  cc_range_940_971_3 = simd_or(r800_fff_tmp29, r800_fff_tmp33);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(33), sequence_e0_a5_adv));
                  r800_fff_tmp34 = simd_and(sequence_e0_a5_adv, cc_range_940_971_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp34);
                  r800_fff_tmp35 = simd_and(r800_ffff_tmp1, r800_fff_tmp12);
                  byte_a6 = simd_and(r800_fff_tmp22, r800_fff_tmp35);
                  sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
                  r800_fff_tmp36 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp37 = simd_andc(byte_range_80_bf, r800_fff_tmp36);
                  r800_fff_tmp38 = simd_and(basis_bits.bit_5, tmp14);
                  r800_fff_tmp39 = simd_xor(basis_bits.bit_4, r800_fff_tmp38);
                  r800_fff_tmp40 = simd_andc(tmp13, r800_fff_tmp39);
                  r800_fff_tmp41 = simd_andc(r800_fff_tmp37, r800_fff_tmp40);
                  r800_fff_tmp42 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r800_fff_tmp43 = simd_not(tmp15);
                  r800_fff_tmp44 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp43), simd_andc(tmp22, basis_bits.bit_3));
                  r800_fff_tmp45 = simd_and(r800_fff_tmp42, r800_fff_tmp44);
                  r800_fff_tmp46 = simd_or(r800_fff_tmp41, r800_fff_tmp45);
                  r800_fff_tmp47 = simd_and(basis_bits.bit_4, r800_fff_tmp31);
                  r800_fff_tmp48 = simd_or(basis_bits.bit_3, r800_fff_tmp47);
                  r800_fff_tmp49 = simd_not(r800_fff_tmp48);
                  r800_fff_tmp50 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp49), simd_andc(r800_fff_tmp16, basis_bits.bit_2));
                  r800_fff_tmp51 = simd_and(byte_range_80_bf, r800_fff_tmp50);
                  r800_fff_tmp52 = simd_or(r800_fff_tmp46, r800_fff_tmp51);
                  r800_fff_tmp53 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  r800_fff_tmp54 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp43), simd_andc(tmp5, basis_bits.bit_3));
                  r800_fff_tmp55 = simd_and(r800_fff_tmp53, r800_fff_tmp54);
                  r800_fff_tmp56 = simd_or(r800_fff_tmp52, r800_fff_tmp55);
                  r800_fff_tmp57 = simd_and(r800_fff_tmp30, r800_fff_tmp13);
                  r800_fff_tmp58 = simd_or(r800_fff_tmp56, r800_fff_tmp57);
                  r800_fff_tmp59 = simd_not(tmp4);
                  r800_fff_tmp60 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp59), simd_andc(r800_fff_tmp26, basis_bits.bit_4));
                  r800_fff_tmp61 = simd_and(r800_fff_tmp30, r800_fff_tmp60);
                  r800_fff_tmp62 = simd_or(r800_fff_tmp58, r800_fff_tmp61);
                  r800_fff_tmp63 = simd_and(r800_fff_tmp30, tmp21);
                  cc_range_980_9bc_3 = simd_or(r800_fff_tmp62, r800_fff_tmp63);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(34), sequence_e0_a6_adv));
                  r800_fff_tmp64 = simd_and(sequence_e0_a6_adv, cc_range_980_9bc_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp64);
                  r800_fff_tmp65 = simd_and(r800_ffff_tmp1, tmp9);
                  byte_a7 = simd_and(r800_fff_tmp22, r800_fff_tmp65);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  r800_fff_tmp66 = simd_andc(r800_fff_tmp37, basis_bits.bit_4);
                  r800_fff_tmp67 = simd_andc(r800_fff_tmp66, r800_fff_tmp38);
                  r800_fff_tmp68 = simd_not(r800_fff_tmp31);
                  r800_fff_tmp69 = simd_and(basis_bits.bit_5, tmp9);
                  r800_fff_tmp70 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp68), simd_andc(r800_fff_tmp69, basis_bits.bit_4));
                  r800_fff_tmp71 = simd_and(r800_fff_tmp37, r800_fff_tmp70);
                  r800_fff_tmp72 = simd_or(r800_fff_tmp67, r800_fff_tmp71);
                  r800_fff_tmp73 = simd_and(r800_fff_tmp37, basis_bits.bit_4);
                  r800_fff_tmp74 = simd_xor(basis_bits.bit_5, tmp9);
                  r800_fff_tmp75 = simd_and(r800_fff_tmp73, r800_fff_tmp74);
                  r800_fff_tmp76 = simd_or(r800_fff_tmp72, r800_fff_tmp75);
                  r800_fff_tmp77 = simd_and(byte_range_80_bf, tmp19);
                  r800_fff_tmp78 = simd_and(r800_fff_tmp77, r800_fff_tmp65);
                  r800_fff_tmp79 = simd_or(r800_fff_tmp76, r800_fff_tmp78);
                  r800_fff_tmp80 = simd_andc(tmp21, basis_bits.bit_6);
                  r800_fff_tmp81 = simd_and(r800_fff_tmp77, r800_fff_tmp80);
                  r800_fff_tmp82 = simd_or(r800_fff_tmp79, r800_fff_tmp81);
                  r800_fff_tmp83 = simd_not(r800_fff_tmp19);
                  r800_fff_tmp84 = simd_and(basis_bits.bit_3, tmp22);
                  r800_fff_tmp85 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp83), simd_andc(r800_fff_tmp84, basis_bits.bit_2));
                  r800_fff_tmp86 = simd_and(byte_range_80_bf, r800_fff_tmp85);
                  r800_fff_tmp87 = simd_or(r800_fff_tmp82, r800_fff_tmp86);
                  r800_fff_tmp88 = simd_not(r800_4dff_tmp1);
                  r800_fff_tmp89 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp88), simd_andc(r800_fff_tmp27, basis_bits.bit_3));
                  r800_fff_tmp90 = simd_and(r800_fff_tmp53, r800_fff_tmp89);
                  cc_range_9c0_9e6_3 = simd_or(r800_fff_tmp87, r800_fff_tmp90);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(35), sequence_e0_a7_adv));
                  r800_fff_tmp91 = simd_and(sequence_e0_a7_adv, cc_range_9c0_9e6_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp91);
                  r800_fff_tmp92 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp93 = simd_andc(r800_fff_tmp92, tmp14);
                  byte_a8 = simd_and(r800_fff_tmp22, r800_fff_tmp93);
                  sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
                  r800_fff_tmp94 = simd_andc(r800_fff_tmp37, tmp13);
                  r800_fff_tmp95 = simd_and(r800_fff_tmp94, tmp14);
                  r800_fff_tmp96 = simd_not(tmp10);
                  r800_fff_tmp97 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp96), simd_andc(r800_fff_tmp38, basis_bits.bit_4));
                  r800_fff_tmp98 = simd_and(r800_fff_tmp37, r800_fff_tmp97);
                  r800_fff_tmp99 = simd_or(r800_fff_tmp95, r800_fff_tmp98);
                  r800_fff_tmp100 = simd_or(r800_fff_tmp99, r800_fff_tmp45);
                  r800_fff_tmp101 = simd_or(r800_fff_tmp100, r800_fff_tmp51);
                  r800_fff_tmp102 = simd_or(r800_fff_tmp101, r800_fff_tmp55);
                  r800_fff_tmp103 = simd_andc(basis_bits.bit_6, tmp13);
                  r800_fff_tmp104 = simd_and(r800_fff_tmp30, r800_fff_tmp103);
                  r800_fff_tmp105 = simd_or(r800_fff_tmp102, r800_fff_tmp104);
                  r800_fff_tmp106 = simd_and(r800_fff_tmp30, r800_ffff_tmp1);
                  r800_fff_tmp107 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp108 = simd_and(r800_fff_tmp106, r800_fff_tmp107);
                  r800_fff_tmp109 = simd_or(r800_fff_tmp105, r800_fff_tmp108);
                  r800_fff_tmp110 = simd_andc(r800_fff_tmp92, basis_bits.bit_6);
                  r800_fff_tmp111 = simd_and(r800_fff_tmp30, r800_fff_tmp110);
                  r800_fff_tmp112 = simd_or(r800_fff_tmp109, r800_fff_tmp111);
                  r800_fff_tmp113 = simd_andc(tmp21, tmp14);
                  r800_fff_tmp114 = simd_and(r800_fff_tmp30, r800_fff_tmp113);
                  r800_fff_tmp115 = simd_or(r800_fff_tmp112, r800_fff_tmp114);
                  r800_fff_tmp116 = simd_and(r800_fff_tmp30, r800_fff_tmp3);
                  cc_range_a01_a3e_3 = simd_or(r800_fff_tmp115, r800_fff_tmp116);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(36), sequence_e0_a8_adv));
                  r800_fff_tmp117 = simd_and(sequence_e0_a8_adv, cc_range_a01_a3e_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp117);
                  r800_fff_tmp118 = simd_and(r800_fff_tmp92, r800_fff_tmp7);
                  byte_a9 = simd_and(r800_fff_tmp22, r800_fff_tmp118);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  r800_fff_tmp119 = simd_andc(r800_fff_tmp94, tmp9);
                  r800_fff_tmp120 = simd_or(r800_fff_tmp119, r800_fff_tmp71);
                  r800_fff_tmp121 = simd_not(basis_bits.bit_6);
                  r800_fff_tmp122 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp121), simd_andc(tmp9, basis_bits.bit_5));
                  r800_fff_tmp123 = simd_and(r800_fff_tmp73, r800_fff_tmp122);
                  r800_fff_tmp124 = simd_or(r800_fff_tmp120, r800_fff_tmp123);
                  r800_fff_tmp125 = simd_and(r800_fff_tmp77, r800_fff_tmp8);
                  r800_fff_tmp126 = simd_or(r800_fff_tmp124, r800_fff_tmp125);
                  r800_fff_tmp127 = simd_and(r800_fff_tmp77, basis_bits.bit_4);
                  r800_fff_tmp128 = simd_xor(basis_bits.bit_5, tmp14);
                  r800_fff_tmp129 = simd_and(r800_fff_tmp127, r800_fff_tmp128);
                  r800_fff_tmp130 = simd_or(r800_fff_tmp126, r800_fff_tmp129);
                  r800_fff_tmp131 = simd_and(tmp21, r800_fff_tmp12);
                  r800_fff_tmp132 = simd_and(r800_fff_tmp77, r800_fff_tmp131);
                  r800_fff_tmp133 = simd_or(r800_fff_tmp130, r800_fff_tmp132);
                  r800_fff_tmp134 = simd_xor(basis_bits.bit_3, r800_fff_tmp27);
                  r800_fff_tmp135 = simd_and(r800_fff_tmp53, r800_fff_tmp134);
                  cc_range_a40_a66_3 = simd_or(r800_fff_tmp133, r800_fff_tmp135);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(37), sequence_e0_a9_adv));
                  r800_fff_tmp136 = simd_and(sequence_e0_a9_adv, cc_range_a40_a66_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp136);
                  r800_fff_tmp137 = simd_and(r800_fff_tmp92, r800_fff_tmp12);
                  byte_aa = simd_and(r800_fff_tmp22, r800_fff_tmp137);
                  sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
                  r800_fff_tmp138 = simd_not(r800_fff_tmp26);
                  r800_fff_tmp139 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp138), simd_andc(r800_fff_tmp38, basis_bits.bit_4));
                  r800_fff_tmp140 = simd_and(r800_fff_tmp37, r800_fff_tmp139);
                  r800_fff_tmp141 = simd_or(r800_fff_tmp95, r800_fff_tmp140);
                  r800_fff_tmp142 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp88), simd_andc(tmp22, basis_bits.bit_3));
                  r800_fff_tmp143 = simd_and(r800_fff_tmp42, r800_fff_tmp142);
                  r800_fff_tmp144 = simd_or(r800_fff_tmp141, r800_fff_tmp143);
                  r800_fff_tmp145 = simd_or(r800_fff_tmp144, r800_fff_tmp51);
                  r800_fff_tmp146 = simd_or(r800_fff_tmp145, r800_fff_tmp55);
                  r800_fff_tmp147 = simd_or(r800_fff_tmp146, r800_fff_tmp104);
                  r800_fff_tmp148 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp59), simd_andc(r800_fff_tmp38, basis_bits.bit_4));
                  r800_fff_tmp149 = simd_and(r800_fff_tmp30, r800_fff_tmp148);
                  r800_fff_tmp150 = simd_or(r800_fff_tmp147, r800_fff_tmp149);
                  cc_range_a81_abc_3 = simd_or(r800_fff_tmp150, r800_fff_tmp63);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(38), sequence_e0_aa_adv));
                  r800_fff_tmp151 = simd_and(sequence_e0_aa_adv, cc_range_a81_abc_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp151);
                  r800_fff_tmp152 = simd_and(r800_fff_tmp92, tmp9);
                  byte_ab = simd_and(r800_fff_tmp22, r800_fff_tmp152);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  r800_fff_tmp153 = simd_andc(r800_fff_tmp66, r800_fff_tmp26);
                  r800_fff_tmp154 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp59), simd_andc(r800_fff_tmp69, basis_bits.bit_4));
                  r800_fff_tmp155 = simd_and(r800_fff_tmp37, r800_fff_tmp154);
                  r800_fff_tmp156 = simd_or(r800_fff_tmp153, r800_fff_tmp155);
                  r800_fff_tmp157 = simd_or(r800_fff_tmp156, r800_fff_tmp123);
                  r800_fff_tmp158 = simd_andc(r800_fff_tmp77, tmp15);
                  r800_fff_tmp159 = simd_or(r800_fff_tmp157, r800_fff_tmp158);
                  r800_fff_tmp160 = simd_andc(r800_fff_tmp22, tmp13);
                  r800_fff_tmp161 = simd_or(r800_fff_tmp159, r800_fff_tmp160);
                  cc_range_ac0_ae6_3 = simd_or(r800_fff_tmp161, r800_fff_tmp28);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(39), sequence_e0_ab_adv));
                  r800_fff_tmp162 = simd_and(sequence_e0_ab_adv, cc_range_ac0_ae6_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp162);
                  byte_ac = simd_and(r800_fff_tmp22, r800_fff_tmp113);
                  sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
                  r800_fff_tmp163 = simd_and(r800_fff_tmp37, r800_fff_tmp39);
                  r800_fff_tmp164 = simd_or(r800_fff_tmp95, r800_fff_tmp163);
                  r800_fff_tmp165 = simd_or(r800_fff_tmp164, r800_fff_tmp45);
                  r800_fff_tmp166 = simd_or(r800_fff_tmp165, r800_fff_tmp51);
                  r800_fff_tmp167 = simd_or(r800_fff_tmp166, r800_fff_tmp55);
                  r800_fff_tmp168 = simd_or(r800_fff_tmp167, r800_fff_tmp104);
                  r800_fff_tmp169 = simd_or(r800_fff_tmp168, r800_fff_tmp149);
                  cc_range_b01_b3c_3 = simd_or(r800_fff_tmp169, r800_fff_tmp63);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(40), sequence_e0_ac_adv));
                  r800_fff_tmp170 = simd_and(sequence_e0_ac_adv, cc_range_b01_b3c_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp170);
                  r800_fff_tmp171 = simd_and(tmp21, r800_fff_tmp7);
                  byte_ad = simd_and(r800_fff_tmp22, r800_fff_tmp171);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  r800_fff_tmp172 = simd_or(r800_fff_tmp72, r800_fff_tmp123);
                  r800_fff_tmp173 = simd_and(r800_ffff_tmp1, basis_bits.bit_6);
                  r800_fff_tmp174 = simd_and(r800_fff_tmp77, r800_fff_tmp173);
                  r800_fff_tmp175 = simd_or(r800_fff_tmp172, r800_fff_tmp174);
                  r800_fff_tmp176 = simd_or(r800_fff_tmp175, r800_fff_tmp81);
                  r800_fff_tmp177 = simd_or(r800_fff_tmp176, r800_fff_tmp86);
                  r800_fff_tmp178 = simd_or(r800_fff_tmp177, r800_fff_tmp28);
                  r800_fff_tmp179 = simd_and(r800_fff_tmp30, r800_fff_tmp8);
                  cc_range_b40_b71_3 = simd_or(r800_fff_tmp178, r800_fff_tmp179);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(41), sequence_e0_ad_adv));
                  r800_fff_tmp180 = simd_and(sequence_e0_ad_adv, cc_range_b40_b71_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp180);
                  byte_ae = simd_and(r800_fff_tmp22, r800_fff_tmp131);
                  sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
                  r800_fff_tmp181 = simd_or(r800_fff_tmp103, r800_fff_tmp97);
                  r800_fff_tmp182 = simd_and(r800_fff_tmp37, r800_fff_tmp181);
                  r800_fff_tmp183 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp43), simd_andc(r800_fff_tmp3, basis_bits.bit_3));
                  r800_fff_tmp184 = simd_and(r800_fff_tmp42, r800_fff_tmp183);
                  r800_fff_tmp185 = simd_or(r800_fff_tmp182, r800_fff_tmp184);
                  r800_fff_tmp186 = simd_andc(r800_fff_tmp77, basis_bits.bit_4);
                  r800_fff_tmp187 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp188 = simd_and(r800_fff_tmp186, r800_fff_tmp187);
                  r800_fff_tmp189 = simd_or(r800_fff_tmp185, r800_fff_tmp188);
                  r800_fff_tmp190 = simd_and(r800_fff_tmp77, r800_fff_tmp92);
                  r800_fff_tmp191 = simd_and(r800_fff_tmp190, r800_fff_tmp107);
                  r800_fff_tmp192 = simd_or(r800_fff_tmp189, r800_fff_tmp191);
                  r800_fff_tmp193 = simd_and(r800_fff_tmp77, r800_fff_tmp113);
                  r800_fff_tmp194 = simd_or(r800_fff_tmp192, r800_fff_tmp193);
                  r800_fff_tmp195 = simd_and(r800_fff_tmp77, r800_fff_tmp3);
                  r800_fff_tmp196 = simd_or(r800_fff_tmp194, r800_fff_tmp195);
                  r800_fff_tmp197 = simd_andc(r800_fff_tmp22, basis_bits.bit_4);
                  r800_fff_tmp198 = simd_not(tmp14);
                  r800_fff_tmp199 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp198), simd_andc(tmp9, basis_bits.bit_5));
                  r800_fff_tmp200 = simd_and(r800_fff_tmp197, r800_fff_tmp199);
                  r800_fff_tmp201 = simd_or(r800_fff_tmp196, r800_fff_tmp200);
                  r800_fff_tmp202 = simd_and(r800_fff_tmp22, r800_fff_tmp92);
                  r800_fff_tmp203 = simd_andc(r800_fff_tmp202, tmp9);
                  r800_fff_tmp204 = simd_or(r800_fff_tmp201, r800_fff_tmp203);
                  r800_fff_tmp205 = simd_not(tmp5);
                  r800_fff_tmp206 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp205), simd_andc(r800_fff_tmp3, basis_bits.bit_3));
                  r800_fff_tmp207 = simd_and(r800_fff_tmp53, r800_fff_tmp206);
                  r800_fff_tmp208 = simd_or(r800_fff_tmp204, r800_fff_tmp207);
                  cc_range_b82_bbe_3 = simd_or(r800_fff_tmp208, r800_fff_tmp116);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(42), sequence_e0_ae_adv));
                  r800_fff_tmp209 = simd_and(sequence_e0_ae_adv, cc_range_b82_bbe_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp209);
                  byte_af = simd_and(r800_fff_tmp22, tmp22);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  r800_fff_tmp210 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp68), simd_andc(r800_fff_tmp26, basis_bits.bit_4));
                  r800_fff_tmp211 = simd_and(r800_fff_tmp37, r800_fff_tmp210);
                  r800_fff_tmp212 = simd_or(r800_fff_tmp119, r800_fff_tmp211);
                  r800_fff_tmp213 = simd_and(r800_fff_tmp73, r800_fff_tmp187);
                  r800_fff_tmp214 = simd_or(r800_fff_tmp212, r800_fff_tmp213);
                  r800_fff_tmp215 = simd_or(r800_fff_tmp214, r800_fff_tmp158);
                  r800_fff_tmp216 = simd_or(r800_fff_tmp215, r800_fff_tmp78);
                  cc_range_bc0_be6_3 = simd_or(r800_fff_tmp216, r800_fff_tmp28);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(43), sequence_e0_af_adv));
                  r800_fff_tmp217 = simd_and(sequence_e0_af_adv, cc_range_bc0_be6_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp217);
                  byte_b0 = simd_andc(r800_fff_tmp30, tmp15);
                  sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
                  r800_fff_tmp218 = simd_or(r800_fff_tmp41, r800_fff_tmp184);
                  r800_fff_tmp219 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  r800_fff_tmp220 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp49), simd_andc(r800_fff_tmp219, basis_bits.bit_2));
                  r800_fff_tmp221 = simd_and(byte_range_80_bf, r800_fff_tmp220);
                  r800_fff_tmp222 = simd_or(r800_fff_tmp218, r800_fff_tmp221);
                  r800_fff_tmp223 = simd_xor(basis_bits.bit_3, tmp5);
                  r800_fff_tmp224 = simd_and(r800_fff_tmp53, r800_fff_tmp223);
                  r800_fff_tmp225 = simd_or(r800_fff_tmp222, r800_fff_tmp224);
                  r800_fff_tmp226 = simd_and(r800_fff_tmp63, tmp14);
                  cc_range_c00_c3d_3 = simd_or(r800_fff_tmp225, r800_fff_tmp226);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(44), sequence_e0_b0_adv));
                  r800_fff_tmp227 = simd_and(sequence_e0_b0_adv, cc_range_c00_c3d_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp227);
                  byte_b1 = r800_fff_tmp179;
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  r800_fff_tmp228 = simd_or(r800_fff_tmp67, r800_fff_tmp211);
                  r800_fff_tmp229 = simd_or(r800_fff_tmp228, r800_fff_tmp213);
                  r800_fff_tmp230 = simd_and(r800_fff_tmp77, r800_ffff_tmp1);
                  r800_fff_tmp231 = simd_and(r800_fff_tmp230, r800_fff_tmp107);
                  r800_fff_tmp232 = simd_or(r800_fff_tmp229, r800_fff_tmp231);
                  r800_fff_tmp233 = simd_and(r800_fff_tmp77, r800_fff_tmp110);
                  r800_fff_tmp234 = simd_or(r800_fff_tmp232, r800_fff_tmp233);
                  r800_fff_tmp235 = simd_or(r800_fff_tmp234, r800_fff_tmp160);
                  cc_range_c40_c66_3 = simd_or(r800_fff_tmp235, r800_fff_tmp28);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(45), sequence_e0_b1_adv));
                  r800_fff_tmp236 = simd_and(sequence_e0_b1_adv, cc_range_c40_c66_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp236);
                  byte_b2 = r800_fff_tmp57;
                  sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
                  r800_fff_tmp237 = simd_or(r800_fff_tmp164, r800_fff_tmp184);
                  r800_fff_tmp238 = simd_or(r800_fff_tmp237, r800_fff_tmp221);
                  r800_fff_tmp239 = simd_not(tmp13);
                  r800_fff_tmp240 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp239), simd_andc(tmp5, basis_bits.bit_3));
                  r800_fff_tmp241 = simd_and(r800_fff_tmp53, r800_fff_tmp240);
                  r800_fff_tmp242 = simd_or(r800_fff_tmp238, r800_fff_tmp241);
                  r800_fff_tmp243 = simd_or(r800_fff_tmp242, r800_fff_tmp149);
                  cc_range_c81_cbc_3 = simd_or(r800_fff_tmp243, r800_fff_tmp63);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(46), sequence_e0_b2_adv));
                  r800_fff_tmp244 = simd_and(sequence_e0_b2_adv, cc_range_c81_cbc_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp244);
                  byte_b3 = simd_and(r800_fff_tmp30, r800_fff_tmp18);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  r800_fff_tmp245 = simd_or(r800_fff_tmp232, r800_fff_tmp132);
                  r800_fff_tmp246 = simd_or(r800_fff_tmp245, r800_fff_tmp160);
                  r800_fff_tmp247 = simd_or(r800_fff_tmp246, r800_fff_tmp28);
                  r800_fff_tmp248 = simd_andc(r800_fff_tmp30, tmp13);
                  r800_fff_tmp249 = simd_and(r800_fff_tmp248, r800_fff_tmp107);
                  cc_range_cc0_cf1_3 = simd_or(r800_fff_tmp247, r800_fff_tmp249);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(47), sequence_e0_b3_adv));
                  r800_fff_tmp250 = simd_and(sequence_e0_b3_adv, cc_range_cc0_cf1_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp250);
                  byte_b4 = simd_and(r800_fff_tmp30, r800_ffff_tmp2);
                  sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
                  r800_fff_tmp251 = simd_and(basis_bits.bit_3, tmp11);
                  r800_fff_tmp252 = simd_not(r800_fff_tmp251);
                  r800_fff_tmp253 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp252), simd_andc(r800_fff_tmp219, basis_bits.bit_2));
                  r800_fff_tmp254 = simd_and(byte_range_80_bf, r800_fff_tmp253);
                  r800_fff_tmp255 = simd_or(r800_fff_tmp237, r800_fff_tmp254);
                  cc_range_d01_d3d_3 = simd_or(r800_fff_tmp255, r800_fff_tmp226);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(48), sequence_e0_b4_adv));
                  r800_fff_tmp256 = simd_and(sequence_e0_b4_adv, cc_range_d01_d3d_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp256);
                  byte_b5 = simd_and(r800_fff_tmp30, r800_fff_tmp23);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  r800_fff_tmp257 = simd_not(tmp9);
                  r800_fff_tmp258 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp257), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r800_fff_tmp259 = simd_and(r800_fff_tmp73, r800_fff_tmp258);
                  r800_fff_tmp260 = simd_or(r800_fff_tmp228, r800_fff_tmp259);
                  r800_fff_tmp261 = simd_or(r800_fff_tmp260, r800_fff_tmp78);
                  r800_fff_tmp262 = simd_or(r800_fff_tmp261, r800_fff_tmp160);
                  r800_fff_tmp263 = simd_or(r800_fff_tmp262, r800_fff_tmp28);
                  r800_fff_tmp264 = simd_and(r800_fff_tmp30, basis_bits.bit_4);
                  r800_fff_tmp265 = simd_and(r800_fff_tmp264, tmp4);
                  cc_range_d40_d7a_3 = simd_or(r800_fff_tmp263, r800_fff_tmp265);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(49), sequence_e0_b5_adv));
                  r800_fff_tmp266 = simd_and(sequence_e0_b5_adv, cc_range_d40_d7a_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp266);
                  byte_b6 = simd_and(r800_fff_tmp30, r800_fff_tmp35);
                  sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
                  r800_fff_tmp267 = simd_and(r800_fff_tmp37, r800_fff_tmp103);
                  r800_fff_tmp268 = simd_or(basis_bits.bit_4, r800_fff_tmp69);
                  r800_fff_tmp269 = simd_not(r800_fff_tmp268);
                  r800_fff_tmp270 = simd_or(basis_bits.bit_4, r800_fff_tmp38);
                  r800_fff_tmp271 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp269), simd_andc(r800_fff_tmp270, basis_bits.bit_3));
                  r800_fff_tmp272 = simd_and(r800_fff_tmp42, r800_fff_tmp271);
                  r800_fff_tmp273 = simd_or(r800_fff_tmp267, r800_fff_tmp272);
                  r800_fff_tmp274 = simd_not(r800_fff_tmp219);
                  r800_fff_tmp275 = simd_and(basis_bits.bit_3, tmp5);
                  r800_fff_tmp276 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp274), simd_andc(r800_fff_tmp275, basis_bits.bit_2));
                  r800_fff_tmp277 = simd_and(byte_range_80_bf, r800_fff_tmp276);
                  r800_fff_tmp278 = simd_or(r800_fff_tmp273, r800_fff_tmp277);
                  r800_fff_tmp279 = simd_not(basis_bits.bit_5);
                  r800_fff_tmp280 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp279), simd_andc(tmp10, basis_bits.bit_4));
                  r800_fff_tmp281 = simd_and(r800_fff_tmp30, r800_fff_tmp280);
                  r800_fff_tmp282 = simd_or(r800_fff_tmp278, r800_fff_tmp281);
                  r800_fff_tmp283 = simd_and(r800_fff_tmp30, r800_fff_tmp171);
                  cc_range_d82_dbd_3 = simd_or(r800_fff_tmp282, r800_fff_tmp283);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(50), sequence_e0_b6_adv));
                  r800_fff_tmp284 = simd_and(sequence_e0_b6_adv, cc_range_d82_dbd_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp284);
                  byte_b7 = simd_and(r800_fff_tmp30, r800_fff_tmp65);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  r800_fff_tmp285 = simd_andc(r800_fff_tmp66, r800_fff_tmp69);
                  r800_fff_tmp286 = simd_and(r800_fff_tmp37, r800_fff_tmp137);
                  r800_fff_tmp287 = simd_or(r800_fff_tmp285, r800_fff_tmp286);
                  r800_fff_tmp288 = simd_not(r800_fff_tmp270);
                  r800_fff_tmp289 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp288), simd_andc(tmp22, basis_bits.bit_3));
                  r800_fff_tmp290 = simd_and(r800_fff_tmp42, r800_fff_tmp289);
                  r800_fff_tmp291 = simd_or(r800_fff_tmp287, r800_fff_tmp290);
                  r800_fff_tmp292 = simd_and(r800_fff_tmp77, r800_fff_tmp35);
                  r800_fff_tmp293 = simd_or(r800_fff_tmp291, r800_fff_tmp292);
                  r800_fff_tmp294 = simd_or(r800_fff_tmp293, r800_fff_tmp127);
                  r800_fff_tmp295 = simd_or(r800_fff_tmp294, r800_fff_tmp28);
                  cc_range_dc0_df2_3 = simd_or(r800_fff_tmp295, r800_fff_tmp104);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(51), sequence_e0_b7_adv));
                  r800_fff_tmp296 = simd_and(sequence_e0_b7_adv, cc_range_dc0_df2_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp296);
                  byte_b8 = simd_and(r800_fff_tmp30, r800_fff_tmp93);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  r800_fff_tmp297 = simd_or(basis_bits.bit_3, tmp15);
                  r800_fff_tmp298 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp252), simd_andc(r800_fff_tmp297, basis_bits.bit_2));
                  byte_range_81_ba = simd_and(byte_range_80_bf, r800_fff_tmp298);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(52), sequence_e0_b8_adv));
                  r800_fff_tmp299 = simd_and(sequence_e0_b8_adv, byte_range_81_ba);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp299);
                  byte_b9 = simd_and(r800_fff_tmp30, r800_fff_tmp118);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  r800_fff_tmp300 = simd_and(basis_bits.bit_4, r800_fff_tmp69);
                  r800_fff_tmp301 = simd_andc(r800_fff_tmp37, r800_fff_tmp300);
                  r800_fff_tmp302 = simd_andc(r800_fff_tmp77, tmp5);
                  cc_range_e40_e50_3 = simd_or(r800_fff_tmp301, r800_fff_tmp302);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(53), sequence_e0_b9_adv));
                  r800_fff_tmp303 = simd_and(sequence_e0_b9_adv, cc_range_e40_e50_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp303);
                  byte_ba = simd_and(r800_fff_tmp30, r800_fff_tmp137);
                  sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
                  r800_fff_tmp304 = simd_and(r800_fff_tmp94, r800_fff_tmp107);
                  r800_fff_tmp305 = simd_and(r800_fff_tmp37, r800_ffff_tmp2);
                  r800_fff_tmp306 = simd_or(r800_fff_tmp304, r800_fff_tmp305);
                  r800_fff_tmp307 = simd_or(r800_fff_tmp306, r800_fff_tmp71);
                  r800_fff_tmp308 = simd_or(r800_fff_tmp307, r800_fff_tmp286);
                  r800_fff_tmp309 = simd_and(r800_fff_tmp37, r800_fff_tmp171);
                  r800_fff_tmp310 = simd_or(r800_fff_tmp308, r800_fff_tmp309);
                  r800_fff_tmp311 = simd_or(r800_fff_tmp310, r800_fff_tmp230);
                  r800_fff_tmp312 = simd_and(r800_fff_tmp127, r800_fff_tmp31);
                  r800_fff_tmp313 = simd_or(r800_fff_tmp311, r800_fff_tmp312);
                  r800_fff_tmp314 = simd_and(r800_fff_tmp160, tmp14);
                  r800_fff_tmp315 = simd_or(r800_fff_tmp313, r800_fff_tmp314);
                  r800_fff_tmp316 = simd_or(r800_fff_tmp315, byte_a5);
                  r800_fff_tmp317 = simd_or(r800_fff_tmp316, byte_a7);
                  r800_fff_tmp318 = simd_and(r800_fff_tmp92, basis_bits.bit_6);
                  r800_fff_tmp319 = simd_and(r800_fff_tmp22, r800_fff_tmp318);
                  r800_fff_tmp320 = simd_or(r800_fff_tmp317, r800_fff_tmp319);
                  r800_fff_tmp321 = simd_and(tmp21, tmp14);
                  r800_fff_tmp322 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp205), simd_andc(r800_fff_tmp321, basis_bits.bit_3));
                  r800_fff_tmp323 = simd_and(r800_fff_tmp53, r800_fff_tmp322);
                  r800_fff_tmp324 = simd_or(r800_fff_tmp320, r800_fff_tmp323);
                  r800_fff_tmp325 = simd_and(r800_fff_tmp264, r800_fff_tmp122);
                  cc_range_e81_ebb_3 = simd_or(r800_fff_tmp324, r800_fff_tmp325);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(54), sequence_e0_ba_adv));
                  r800_fff_tmp326 = simd_and(sequence_e0_ba_adv, cc_range_e81_ebb_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp326);
                  byte_bb = simd_and(r800_fff_tmp30, r800_fff_tmp152);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  r800_fff_tmp327 = simd_and(r800_fff_tmp37, r800_fff_tmp35);
                  r800_fff_tmp328 = simd_or(r800_fff_tmp67, r800_fff_tmp327);
                  r800_fff_tmp329 = simd_andc(r800_fff_tmp73, r800_fff_tmp26);
                  r800_fff_tmp330 = simd_or(r800_fff_tmp328, r800_fff_tmp329);
                  r800_fff_tmp331 = simd_or(r800_fff_tmp330, r800_fff_tmp302);
                  r800_fff_tmp332 = simd_and(r800_fff_tmp77, tmp21);
                  cc_range_ec0_edc_3 = simd_or(r800_fff_tmp331, r800_fff_tmp332);
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(55), sequence_e0_bb_adv));
                  r800_fff_tmp333 = simd_and(sequence_e0_bb_adv, cc_range_ec0_edc_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp333);
                  byte_bc = r800_fff_tmp114;
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  r800_fff_tmp334 = simd_andc(r800_fff_tmp37, tmp15);
                  r800_fff_tmp335 = simd_or(r800_fff_tmp334, r800_fff_tmp233);
                  r800_fff_tmp336 = simd_andc(r800_fff_tmp22, tmp5);
                  r800_fff_tmp337 = simd_or(r800_fff_tmp335, r800_fff_tmp336);
                  r800_fff_tmp338 = simd_or(r800_fff_tmp337, byte_b5);
                  r800_fff_tmp339 = simd_or(r800_fff_tmp338, byte_b7);
                  r800_fff_tmp340 = simd_or(r800_fff_tmp339, byte_b9);
                  cc_range_f00_f3e_3 = simd_or(r800_fff_tmp340, r800_fff_tmp116);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(56), sequence_e0_bc_adv));
                  r800_fff_tmp341 = simd_and(sequence_e0_bc_adv, cc_range_f00_f3e_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp341);
                  byte_bd = r800_fff_tmp283;
                  sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
                  r800_fff_tmp342 = simd_or(basis_bits.bit_3, r800_fff_tmp321);
                  r800_fff_tmp343 = simd_not(r800_fff_tmp342);
                  r800_fff_tmp344 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp343), simd_andc(r800_fff_tmp48, basis_bits.bit_2));
                  r800_fff_tmp345 = simd_and(byte_range_80_bf, r800_fff_tmp344);
                  r800_fff_tmp346 = simd_or(r800_fff_tmp66, r800_fff_tmp345);
                  cc_range_f40_f71_3 = simd_or(r800_fff_tmp346, r800_fff_tmp33);
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(57), sequence_e0_bd_adv));
                  r800_fff_tmp347 = simd_and(sequence_e0_bd_adv, cc_range_f40_f71_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp347);
                  byte_be = simd_and(r800_fff_tmp30, r800_fff_tmp131);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  r800_fff_tmp348 = simd_not(basis_bits.bit_4);
                  r800_fff_tmp349 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp348), simd_andc(r800_fff_tmp27, basis_bits.bit_3));
                  r800_fff_tmp350 = simd_and(r800_fff_tmp42, r800_fff_tmp349);
                  r800_fff_tmp351 = simd_or(r800_fff_tmp67, r800_fff_tmp350);
                  r800_fff_tmp352 = simd_and(basis_bits.bit_3, r800_fff_tmp321);
                  r800_fff_tmp353 = simd_not(r800_fff_tmp352);
                  r800_fff_tmp354 = simd_and(basis_bits.bit_3, r800_fff_tmp47);
                  r800_fff_tmp355 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp353), simd_andc(r800_fff_tmp354, basis_bits.bit_2));
                  r800_fff_tmp356 = simd_and(byte_range_80_bf, r800_fff_tmp355);
                  cc_range_f80_f99_3 = simd_or(r800_fff_tmp351, r800_fff_tmp356);
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(58), sequence_e0_be_adv));
                  r800_fff_tmp357 = simd_and(sequence_e0_be_adv, cc_range_f80_f99_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp357);
                  byte_bf = simd_and(r800_fff_tmp30, tmp22);
                  sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
                  byte_86 = r800_fff_tmp327;
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(59), sequence_e0_bf_adv));
                  r800_fff_tmp358 = simd_and(sequence_e0_bf_adv, byte_86);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r800_fff_tmp358);
                }
                else {
                  carryQ.CarryDequeueEnqueue(27, 33);
                }
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp13);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(60, 47))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp1);
                  byte_80 = simd_andc(r1000_1fff_tmp2, tmp15);
                  carryQ.cq[60] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(60), r1000_1fff_tmp3));
                  sequence_e1_80 = simd_and(r1000_1fff_tmp3, byte_80);
                  byte_e1_adv = r1000_1fff_tmp3;
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(61), sequence_e1_80_adv));
                  r1000_1fff_tmp4 = simd_and(sequence_e1_80_adv, byte_range_80_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r1000_1fff_tmp4);
                  r1000_1fff_tmp5 = simd_andc(byte_range_80_bf, r1000_1fff_tmp1);
                  byte_81 = simd_and(r1000_1fff_tmp5, r800_1fff_tmp2);
                  sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
                  r1000_1fff_tmp6 = simd_andc(r1000_1fff_tmp5, tmp5);
                  r1000_1fff_tmp7 = simd_and(byte_range_80_bf, r1000_1fff_tmp1);
                  cc_range_1040_1050_3 = simd_or(r1000_1fff_tmp6, r1000_1fff_tmp7);
                  carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(62), sequence_e1_81_adv));
                  r1000_1fff_tmp8 = simd_and(sequence_e1_81_adv, cc_range_1040_1050_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r1000_1fff_tmp8);
                  r1000_1fff_tmp9 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp10 = simd_andc(r1000_1fff_tmp9, tmp13);
                  byte_82 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp10);
                  sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
                  r1000_1fff_tmp11 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r1000_1fff_tmp12 = simd_and(tmp21, basis_bits.bit_6);
                  r1000_1fff_tmp13 = simd_and(basis_bits.bit_3, r1000_1fff_tmp12);
                  r1000_1fff_tmp14 = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp13);
                  r1000_1fff_tmp15 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  cc_range_1080_10a0_3 = simd_or(r1000_1fff_tmp14, r1000_1fff_tmp15);
                  carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(63), sequence_e1_82_adv));
                  r1000_1fff_tmp16 = simd_and(sequence_e1_82_adv, cc_range_1080_10a0_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r1000_1fff_tmp16);
                  r1000_1fff_tmp17 = simd_andc(tmp9, tmp13);
                  byte_83 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp17);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  r1000_1fff_tmp18 = simd_andc(r1000_1fff_tmp5, basis_bits.bit_4);
                  r1000_1fff_tmp19 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp20 = simd_andc(r1000_1fff_tmp18, r1000_1fff_tmp19);
                  r1000_1fff_tmp21 = simd_and(r800_ffff_tmp1, tmp9);
                  r1000_1fff_tmp22 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp21);
                  r1000_1fff_tmp23 = simd_or(r1000_1fff_tmp20, r1000_1fff_tmp22);
                  r1000_1fff_tmp24 = simd_and(tmp21, r800_1fff_tmp1);
                  r1000_1fff_tmp25 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp24);
                  r1000_1fff_tmp26 = simd_or(r1000_1fff_tmp23, r1000_1fff_tmp25);
                  r1000_1fff_tmp27 = simd_and(basis_bits.bit_3, tmp11);
                  r1000_1fff_tmp28 = simd_not(r1000_1fff_tmp27);
                  r1000_1fff_tmp29 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp28), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  r1000_1fff_tmp30 = simd_and(byte_range_80_bf, r1000_1fff_tmp29);
                  r1000_1fff_tmp31 = simd_or(r1000_1fff_tmp26, r1000_1fff_tmp30);
                  r1000_1fff_tmp32 = simd_and(byte_range_80_bf, tmp2);
                  r1000_1fff_tmp33 = simd_and(r1000_1fff_tmp32, tmp21);
                  cc_range_10c0_10fc_3 = simd_or(r1000_1fff_tmp31, r1000_1fff_tmp33);
                  carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(64), sequence_e1_83_adv));
                  r1000_1fff_tmp34 = simd_and(sequence_e1_83_adv, cc_range_10c0_10fc_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r1000_1fff_tmp34);
                  r1000_1fff_tmp35 = simd_or(basis_bits.bit_5, tmp14);
                  r1000_1fff_tmp36 = simd_not(r1000_1fff_tmp35);
                  r1000_1fff_tmp37 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp36), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_84_88 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp37);
                  byte_e1_byte_range_84_88 = simd_and(byte_e1_adv, byte_range_84_88);
                  carryQ.cq[65] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_84_88, carryQ.get_carry_in(65), r1000_1fff_tmp38));
                  byte_e1_byte_range_84_88_sfx = simd_and(r1000_1fff_tmp38, byte_range_80_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, byte_e1_byte_range_84_88_sfx);
                  r1000_1fff_tmp39 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp40 = simd_and(r1000_1fff_tmp39, r800_1fff_tmp1);
                  byte_89 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp40);
                  sequence_e1_89 = simd_and(byte_e1_adv, byte_89);
                  r1000_1fff_tmp41 = simd_and(basis_bits.bit_4, r1000_1fff_tmp35);
                  byte_range_80_88 = simd_andc(r1000_1fff_tmp5, r1000_1fff_tmp41);
                  carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_e1_89, carryQ.get_carry_in(66), r1000_1fff_tmp42));
                  sequence_e1_89_byte_range_80_88 = simd_and(r1000_1fff_tmp42, byte_range_80_88);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_89_byte_range_80_88);
                  r1000_1fff_tmp43 = simd_and(r1000_1fff_tmp39, r1000_1fff_tmp9);
                  byte_8a = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp43);
                  sequence_e1_8a = simd_and(byte_e1_adv, byte_8a);
                  carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e1_8a, carryQ.get_carry_in(67), r1000_1fff_tmp44));
                  sequence_e1_8a_byte_range_80_88 = simd_and(r1000_1fff_tmp44, byte_range_80_88);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_8a_byte_range_80_88);
                  r1000_1fff_tmp45 = simd_and(r1000_1fff_tmp39, tmp9);
                  byte_8b = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp45);
                  sequence_e1_8b = simd_and(byte_e1_adv, byte_8b);
                  carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e1_8b, carryQ.get_carry_in(68), r1000_1fff_tmp46));
                  sequence_e1_8b_80 = simd_and(r1000_1fff_tmp46, byte_80);
                  r1000_1fff_tmp47 = simd_andc(tmp21, tmp14);
                  byte_8c = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp47);
                  sequence_e1_8c = simd_and(byte_e1_adv, byte_8c);
                  r1000_1fff_tmp48 = simd_and(basis_bits.bit_3, tmp15);
                  byte_range_80_90 = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp48);
                  carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e1_8c, carryQ.get_carry_in(69), r1000_1fff_tmp49));
                  sequence_e1_8c_byte_range_80_90 = simd_and(r1000_1fff_tmp49, byte_range_80_90);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_8c_byte_range_80_90);
                  byte_8d = r1000_1fff_tmp25;
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  byte_range_80_9a = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp27);
                  carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(70), r1000_1fff_tmp50));
                  sequence_e1_8d_byte_range_80_9a = simd_and(r1000_1fff_tmp50, byte_range_80_9a);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_8d_byte_range_80_9a);
                  r1000_1fff_tmp51 = simd_and(tmp21, r1000_1fff_tmp9);
                  byte_8e = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp51);
                  sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
                  byte_range_80_8f = r1000_1fff_tmp5;
                  carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(71), r1000_1fff_tmp52));
                  sequence_e1_8e_byte_range_80_8f = simd_and(r1000_1fff_tmp52, byte_range_80_8f);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_8e_byte_range_80_8f);
                  byte_8f = simd_and(byte_range_80_8f, tmp22);
                  sequence_e1_8f = simd_and(byte_e1_adv, byte_8f);
                  r1000_1fff_tmp53 = simd_and(basis_bits.bit_5, tmp14);
                  r1000_1fff_tmp54 = simd_or(basis_bits.bit_4, r1000_1fff_tmp53);
                  r1000_1fff_tmp55 = simd_and(basis_bits.bit_3, r1000_1fff_tmp54);
                  r1000_1fff_tmp56 = simd_and(basis_bits.bit_2, r1000_1fff_tmp55);
                  byte_range_80_b4 = simd_andc(byte_range_80_bf, r1000_1fff_tmp56);
                  carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e1_8f, carryQ.get_carry_in(72), r1000_1fff_tmp57));
                  sequence_e1_8f_byte_range_80_b4 = simd_and(r1000_1fff_tmp57, byte_range_80_b4);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_8f_byte_range_80_b4);
                  r1000_1fff_tmp58 = simd_and(byte_range_80_bf, tmp19);
                  byte_90 = simd_andc(r1000_1fff_tmp58, tmp15);
                  sequence_e1_90 = simd_and(byte_e1_adv, byte_90);
                  r1000_1fff_tmp59 = simd_or(basis_bits.bit_3, tmp15);
                  r1000_1fff_tmp60 = simd_or(basis_bits.bit_2, r1000_1fff_tmp59);
                  byte_range_81_bf = simd_and(byte_range_80_bf, r1000_1fff_tmp60);
                  carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e1_90, carryQ.get_carry_in(73), r1000_1fff_tmp61));
                  sequence_e1_90_byte_range_81_bf = simd_and(r1000_1fff_tmp61, byte_range_81_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_90_byte_range_81_bf);
                  byte_91 = simd_and(r1000_1fff_tmp58, r800_1fff_tmp2);
                  sequence_e1_91 = simd_and(byte_e1_adv, byte_91);
                  carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e1_91, carryQ.get_carry_in(74), r1000_1fff_tmp62));
                  sequence_e1_91_byte_range_80_bf = simd_and(r1000_1fff_tmp62, byte_range_80_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_91_byte_range_80_bf);
                  byte_99 = simd_and(r1000_1fff_tmp58, r1000_1fff_tmp40);
                  sequence_e1_99 = simd_and(byte_e1_adv, byte_99);
                  r1000_1fff_tmp63 = simd_and(tmp21, tmp14);
                  r1000_1fff_tmp64 = simd_or(basis_bits.bit_3, r1000_1fff_tmp63);
                  r1000_1fff_tmp65 = simd_and(basis_bits.bit_2, r1000_1fff_tmp64);
                  byte_range_80_ac = simd_andc(byte_range_80_bf, r1000_1fff_tmp65);
                  carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e1_99, carryQ.get_carry_in(75), r1000_1fff_tmp66));
                  sequence_e1_99_byte_range_80_ac = simd_and(r1000_1fff_tmp66, byte_range_80_ac);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_99_byte_range_80_ac);
                  byte_9a = simd_and(r1000_1fff_tmp58, r1000_1fff_tmp43);
                  sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
                  byte_range_81_9a = simd_and(r1000_1fff_tmp11, tmp16);
                  carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(76), r1000_1fff_tmp67));
                  sequence_e1_9a_byte_range_81_9a = simd_and(r1000_1fff_tmp67, byte_range_81_9a);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_9a_byte_range_81_9a);
                  byte_9b = simd_and(r1000_1fff_tmp58, r1000_1fff_tmp45);
                  sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
                  r1000_1fff_tmp68 = simd_or(basis_bits.bit_3, tmp11);
                  r1000_1fff_tmp69 = simd_and(basis_bits.bit_2, r1000_1fff_tmp68);
                  byte_range_80_aa = simd_andc(byte_range_80_bf, r1000_1fff_tmp69);
                  carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(77), r1000_1fff_tmp70));
                  sequence_e1_9b_byte_range_80_aa = simd_and(r1000_1fff_tmp70, byte_range_80_aa);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_9b_byte_range_80_aa);
                  byte_9c = simd_and(r1000_1fff_tmp58, r1000_1fff_tmp47);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  r1000_1fff_tmp71 = simd_and(basis_bits.bit_4, r1000_1fff_tmp53);
                  byte_range_80_8c = simd_andc(byte_range_80_8f, r1000_1fff_tmp71);
                  carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(78), r1000_1fff_tmp72));
                  sequence_e1_9c_byte_range_80_8c = simd_and(r1000_1fff_tmp72, byte_range_80_8c);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_9c_byte_range_80_8c);
                  byte_9d = simd_and(r1000_1fff_tmp58, r1000_1fff_tmp24);
                  sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
                  r1000_1fff_tmp73 = simd_and(basis_bits.bit_3, tmp13);
                  byte_range_80_93 = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp73);
                  carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(79), r1000_1fff_tmp74));
                  sequence_e1_9d_byte_range_80_93 = simd_and(r1000_1fff_tmp74, byte_range_80_93);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_9d_byte_range_80_93);
                  byte_9e = simd_and(r1000_1fff_tmp58, r1000_1fff_tmp51);
                  sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
                  carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(80), r1000_1fff_tmp75));
                  sequence_e1_9e_byte_range_80_bf = simd_and(r1000_1fff_tmp75, byte_range_80_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_9e_byte_range_80_bf);
                  byte_9f = simd_and(r1000_1fff_tmp58, tmp22);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(81), r1000_1fff_tmp76));
                  sequence_e1_9f_byte_range_80_93 = simd_and(r1000_1fff_tmp76, byte_range_80_93);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_9f_byte_range_80_93);
                  r1000_1fff_tmp77 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r1000_1fff_tmp77, tmp15);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  r1000_1fff_tmp78 = simd_and(byte_range_80_8f, basis_bits.bit_4);
                  r1000_1fff_tmp79 = simd_not(basis_bits.bit_6);
                  r1000_1fff_tmp80 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp79), simd_andc(tmp9, basis_bits.bit_5));
                  byte_range_8b_8d = simd_and(r1000_1fff_tmp78, r1000_1fff_tmp80);
                  carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(82), r1000_1fff_tmp81));
                  sequence_e1_a0_byte_range_8b_8d = simd_and(r1000_1fff_tmp81, byte_range_8b_8d);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_a0_byte_range_8b_8d);
                  byte_a1 = simd_and(r1000_1fff_tmp77, r800_1fff_tmp2);
                  sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
                  carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(83), r1000_1fff_tmp82));
                  sequence_e1_a1_byte_range_80_b7 = simd_and(r1000_1fff_tmp82, byte_range_80_b7);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_a1_byte_range_80_b7);
                  byte_a2 = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp10);
                  sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
                  carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(84), r1000_1fff_tmp83));
                  sequence_e1_a2_byte_range_80_aa = simd_and(r1000_1fff_tmp83, byte_range_80_aa);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_a2_byte_range_80_aa);
                  byte_a3 = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp17);
                  sequence_e1_a3 = simd_and(byte_e1_adv, byte_a3);
                  r1000_1fff_tmp84 = simd_or(basis_bits.bit_4, r1000_1fff_tmp19);
                  r1000_1fff_tmp85 = simd_and(basis_bits.bit_3, r1000_1fff_tmp84);
                  r1000_1fff_tmp86 = simd_and(basis_bits.bit_2, r1000_1fff_tmp85);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r1000_1fff_tmp86);
                  carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e1_a3, carryQ.get_carry_in(85), r1000_1fff_tmp87));
                  sequence_e1_a3_byte_range_80_b5 = simd_and(r1000_1fff_tmp87, byte_range_80_b5);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_a3_byte_range_80_b5);
                  byte_a4 = simd_and(r1000_1fff_tmp77, r800_ffff_tmp2);
                  sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
                  r1000_1fff_tmp88 = simd_and(basis_bits.bit_3, tmp22);
                  byte_range_80_9e = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp88);
                  carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(86), r1000_1fff_tmp89));
                  sequence_e1_a4_byte_range_80_9e = simd_and(r1000_1fff_tmp89, byte_range_80_9e);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_a4_byte_range_80_9e);
                  r1000_1fff_tmp90 = simd_and(r800_ffff_tmp1, r800_1fff_tmp1);
                  byte_a5 = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp90);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  r1000_1fff_tmp91 = simd_or(basis_bits.bit_3, r1000_1fff_tmp12);
                  r1000_1fff_tmp92 = simd_not(r1000_1fff_tmp91);
                  r1000_1fff_tmp93 = simd_or(basis_bits.bit_3, r1000_1fff_tmp84);
                  r1000_1fff_tmp94 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp92), simd_andc(r1000_1fff_tmp93, basis_bits.bit_2));
                  byte_range_86_ad = simd_and(byte_range_80_bf, r1000_1fff_tmp94);
                  carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(87), r1000_1fff_tmp95));
                  sequence_e1_a5_byte_range_86_ad = simd_and(r1000_1fff_tmp95, byte_range_86_ad);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_a5_byte_range_86_ad);
                  r1000_1fff_tmp96 = simd_and(r800_ffff_tmp1, r1000_1fff_tmp9);
                  byte_a6 = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp96);
                  sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
                  r1000_1fff_tmp97 = simd_or(basis_bits.bit_3, tmp21);
                  r1000_1fff_tmp98 = simd_and(basis_bits.bit_2, r1000_1fff_tmp97);
                  byte_range_80_ab = simd_andc(byte_range_80_bf, r1000_1fff_tmp98);
                  carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(88), r1000_1fff_tmp99));
                  sequence_e1_a6_byte_range_80_ab = simd_and(r1000_1fff_tmp99, byte_range_80_ab);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_a6_byte_range_80_ab);
                  byte_a7 = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp21);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  byte_range_80_89 = simd_andc(byte_range_80_8f, tmp5);
                  carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(89), r1000_1fff_tmp100));
                  sequence_e1_a7_byte_range_80_89 = simd_and(r1000_1fff_tmp100, byte_range_80_89);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_a7_byte_range_80_89);
                  r1000_1fff_tmp101 = simd_andc(r1000_1fff_tmp39, tmp14);
                  byte_a8 = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp101);
                  sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
                  r1000_1fff_tmp102 = simd_and(basis_bits.bit_3, tmp21);
                  byte_range_80_9b = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp102);
                  carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(90), r1000_1fff_tmp103));
                  sequence_e1_a8_byte_range_80_9b = simd_and(r1000_1fff_tmp103, byte_range_80_9b);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_a8_byte_range_80_9b);
                  byte_a9 = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp40);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(91), r1000_1fff_tmp104));
                  sequence_e1_a9_byte_range_80_9e = simd_and(r1000_1fff_tmp104, byte_range_80_9e);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_a9_byte_range_80_9e);
                  byte_aa = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp43);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(92), r1000_1fff_tmp105));
                  sequence_e1_aa_byte_range_80_89 = simd_and(r1000_1fff_tmp105, byte_range_80_89);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_aa_byte_range_80_89);
                  byte_ac = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp47);
                  sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
                  carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(93), r1000_1fff_tmp106));
                  sequence_e1_ac_byte_range_80_bf = simd_and(r1000_1fff_tmp106, byte_range_80_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_ac_byte_range_80_bf);
                  byte_ad = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp24);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  byte_range_80_8b = simd_andc(byte_range_80_8f, tmp21);
                  carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(94), r1000_1fff_tmp107));
                  sequence_e1_ad_byte_range_80_8b = simd_and(r1000_1fff_tmp107, byte_range_80_8b);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_ad_byte_range_80_8b);
                  byte_ae = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp51);
                  sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
                  carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(95), r1000_1fff_tmp108));
                  sequence_e1_ae_byte_range_80_bf = simd_and(r1000_1fff_tmp108, byte_range_80_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_ae_byte_range_80_bf);
                  byte_af = simd_and(r1000_1fff_tmp77, tmp22);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  r1000_1fff_tmp109 = simd_and(basis_bits.bit_2, r1000_1fff_tmp73);
                  byte_range_80_b3 = simd_andc(byte_range_80_bf, r1000_1fff_tmp109);
                  carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(96), r1000_1fff_tmp110));
                  sequence_e1_af_byte_range_80_b3 = simd_and(r1000_1fff_tmp110, byte_range_80_b3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_af_byte_range_80_b3);
                  byte_b0 = simd_andc(r1000_1fff_tmp32, tmp15);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(97), r1000_1fff_tmp111));
                  sequence_e1_b0_byte_range_80_b7 = simd_and(r1000_1fff_tmp111, byte_range_80_b7);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_b0_byte_range_80_b7);
                  byte_b1 = simd_and(r1000_1fff_tmp32, r800_1fff_tmp2);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(98), r1000_1fff_tmp112));
                  sequence_e1_b1_byte_range_80_89 = simd_and(r1000_1fff_tmp112, byte_range_80_89);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_b1_byte_range_80_89);
                  byte_b3 = simd_and(r1000_1fff_tmp32, r1000_1fff_tmp17);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  r1000_1fff_tmp113 = simd_andc(r1000_1fff_tmp58, tmp13);
                  byte_range_90_92 = simd_andc(r1000_1fff_tmp113, tmp9);
                  carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(99), r1000_1fff_tmp114));
                  sequence_e1_b3_byte_range_90_92 = simd_and(r1000_1fff_tmp114, byte_range_90_92);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_b3_byte_range_90_92);
                  byte_b4 = simd_and(r1000_1fff_tmp32, r800_ffff_tmp2);
                  sequence_e1_b4 = simd_and(byte_e1_adv, byte_b4);
                  carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_e1_b4, carryQ.get_carry_in(100), r1000_1fff_tmp115));
                  sequence_e1_b4_byte_range_80_bf = simd_and(r1000_1fff_tmp115, byte_range_80_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_b4_byte_range_80_bf);
                  byte_b7 = simd_and(r1000_1fff_tmp32, r1000_1fff_tmp21);
                  sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
                  carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_e1_b7, carryQ.get_carry_in(101), r1000_1fff_tmp116));
                  sequence_e1_b7_byte_range_80_b5 = simd_and(r1000_1fff_tmp116, byte_range_80_b5);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_b7_byte_range_80_b5);
                  byte_b8 = simd_and(r1000_1fff_tmp32, r1000_1fff_tmp101);
                  sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
                  carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(102), r1000_1fff_tmp117));
                  sequence_e1_b8_byte_range_80_bf = simd_and(r1000_1fff_tmp117, byte_range_80_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_b8_byte_range_80_bf);
                  byte_bc = simd_and(r1000_1fff_tmp32, r1000_1fff_tmp47);
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  byte_range_80_95 = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp85);
                  carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(103), r1000_1fff_tmp118));
                  sequence_e1_bc_byte_range_80_95 = simd_and(r1000_1fff_tmp118, byte_range_80_95);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_bc_byte_range_80_95);
                  byte_bd = simd_and(r1000_1fff_tmp32, r1000_1fff_tmp24);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  r1000_1fff_tmp119 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_range_80_85 = simd_andc(r1000_1fff_tmp119, r1000_1fff_tmp19);
                  carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(104), r1000_1fff_tmp120));
                  sequence_e1_bd_byte_range_80_85 = simd_and(r1000_1fff_tmp120, byte_range_80_85);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_bd_byte_range_80_85);
                  byte_be = simd_and(r1000_1fff_tmp32, r1000_1fff_tmp51);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(105), r1000_1fff_tmp121));
                  sequence_e1_be_byte_range_80_b4 = simd_and(r1000_1fff_tmp121, byte_range_80_b4);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_be_byte_range_80_b4);
                  byte_bf = simd_and(r1000_1fff_tmp32, tmp22);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  r1000_1fff_tmp122 = simd_not(tmp14);
                  r1000_1fff_tmp123 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp122), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_82_84 = simd_and(r1000_1fff_tmp119, r1000_1fff_tmp123);
                  carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(106), r1000_1fff_tmp124));
                  sequence_e1_bf_byte_range_82_84 = simd_and(r1000_1fff_tmp124, byte_range_82_84);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e1_bf_byte_range_82_84);
                }
                else {
                  carryQ.CarryDequeueEnqueue(60, 47);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(27, 80);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp13);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(107, 28))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp13);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(107, 16))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  byte_80 = simd_andc(r2000_2fff_tmp2, tmp15);
                  carryQ.cq[107] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(107), r2000_2fff_tmp3));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp3, byte_80);
                  byte_e2_adv = r2000_2fff_tmp3;
                  r2000_2fff_tmp4 = simd_and(r800_ffff_tmp3, tmp2);
                  byte_bf = simd_and(r2000_2fff_tmp4, tmp22);
                  carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(108), sequence_e2_80_adv));
                  r2000_2fff_tmp5 = simd_and(sequence_e2_80_adv, byte_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r2000_2fff_tmp5);
                  r2000_2fff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp7 = simd_andc(r2000_2fff_tmp6, tmp13);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp7);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  r2000_2fff_tmp8 = simd_and(r800_ffff_tmp3, tmp19);
                  r2000_2fff_tmp9 = simd_and(r2000_2fff_tmp8, r800_ffff_tmp2);
                  r2000_2fff_tmp10 = simd_or(byte_80, r2000_2fff_tmp9);
                  r2000_2fff_tmp11 = simd_and(r2000_2fff_tmp4, r2000_2fff_tmp7);
                  r2000_2fff_tmp12 = simd_or(r2000_2fff_tmp10, r2000_2fff_tmp11);
                  cc_range_2040_207f_3 = simd_or(r2000_2fff_tmp12, byte_bf);
                  carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(109), sequence_e2_81_adv));
                  r2000_2fff_tmp13 = simd_and(sequence_e2_81_adv, cc_range_2040_207f_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r2000_2fff_tmp13);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_5, tmp14);
                  r2000_2fff_tmp15 = simd_and(basis_bits.bit_4, r2000_2fff_tmp14);
                  byte_range_90_9c = simd_andc(r2000_2fff_tmp8, r2000_2fff_tmp15);
                  carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(110), sequence_e2_82_adv));
                  r2000_2fff_tmp16 = simd_and(sequence_e2_82_adv, byte_range_90_9c);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r2000_2fff_tmp16);
                  r2000_2fff_tmp17 = simd_andc(tmp9, tmp13);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp17);
                  sequence_e2_83 = simd_and(byte_e2_adv, byte_83);
                  r2000_2fff_tmp18 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r2000_2fff_tmp19 = simd_and(r2000_2fff_tmp18, r2000_2fff_tmp7);
                  r2000_2fff_tmp20 = simd_or(byte_range_90_9c, r2000_2fff_tmp19);
                  r2000_2fff_tmp21 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp22 = simd_not(tmp15);
                  r2000_2fff_tmp23 = simd_or(basis_bits.bit_4, r2000_2fff_tmp14);
                  r2000_2fff_tmp24 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp22), simd_andc(r2000_2fff_tmp23, basis_bits.bit_3));
                  r2000_2fff_tmp25 = simd_and(r2000_2fff_tmp21, r2000_2fff_tmp24);
                  cc_range_20d0_20e5_3 = simd_or(r2000_2fff_tmp20, r2000_2fff_tmp25);
                  carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(111), sequence_e2_83_adv));
                  r2000_2fff_tmp26 = simd_and(sequence_e2_83_adv, cc_range_20d0_20e5_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r2000_2fff_tmp26);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp2);
                  sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
                  r2000_2fff_tmp27 = simd_and(r800_ffff_tmp1, tmp9);
                  r2000_2fff_tmp28 = simd_or(r2000_4dff_tmp2, r2000_2fff_tmp27);
                  r2000_2fff_tmp29 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp28);
                  r2000_2fff_tmp30 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp31 = simd_not(tmp13);
                  r2000_2fff_tmp32 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp31), simd_andc(tmp5, basis_bits.bit_3));
                  r2000_2fff_tmp33 = simd_and(r2000_2fff_tmp30, r2000_2fff_tmp32);
                  r2000_2fff_tmp34 = simd_or(r2000_2fff_tmp29, r2000_2fff_tmp33);
                  r2000_2fff_tmp35 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp6);
                  r2000_2fff_tmp36 = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp35);
                  r2000_2fff_tmp37 = simd_or(r2000_2fff_tmp34, r2000_2fff_tmp36);
                  r2000_2fff_tmp38 = simd_and(r2000_2fff_tmp8, basis_bits.bit_4);
                  r2000_2fff_tmp39 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp40 = simd_andc(r2000_2fff_tmp38, r2000_2fff_tmp39);
                  r2000_2fff_tmp41 = simd_or(r2000_2fff_tmp37, r2000_2fff_tmp40);
                  r2000_2fff_tmp42 = simd_and(r2000_2fff_tmp18, r800_ffff_tmp2);
                  r2000_2fff_tmp43 = simd_or(r2000_2fff_tmp41, r2000_2fff_tmp42);
                  r2000_2fff_tmp44 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  r2000_2fff_tmp45 = simd_and(r2000_2fff_tmp18, r2000_2fff_tmp44);
                  r2000_2fff_tmp46 = simd_or(r2000_2fff_tmp43, r2000_2fff_tmp45);
                  r2000_2fff_tmp47 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp48 = simd_andc(r2000_2fff_tmp47, tmp14);
                  r2000_2fff_tmp49 = simd_and(r2000_2fff_tmp18, r2000_2fff_tmp48);
                  r2000_2fff_tmp50 = simd_or(r2000_2fff_tmp46, r2000_2fff_tmp49);
                  r2000_2fff_tmp51 = simd_xor(basis_bits.bit_3, tmp5);
                  r2000_2fff_tmp52 = simd_and(r2000_2fff_tmp21, r2000_2fff_tmp51);
                  r2000_2fff_tmp53 = simd_or(r2000_2fff_tmp50, r2000_2fff_tmp52);
                  r2000_2fff_tmp54 = simd_and(r2000_2fff_tmp4, tmp21);
                  cc_range_2102_213c_3 = simd_or(r2000_2fff_tmp53, r2000_2fff_tmp54);
                  carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(112), sequence_e2_84_adv));
                  r2000_2fff_tmp55 = simd_and(sequence_e2_84_adv, cc_range_2102_213c_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r2000_2fff_tmp55);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp35);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp56 = simd_not(tmp4);
                  r2000_2fff_tmp57 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp56), simd_andc(r2000_2fff_tmp14, basis_bits.bit_4));
                  r2000_2fff_tmp58 = simd_and(tmp21, r2000_4dff_tmp1);
                  r2000_2fff_tmp59 = simd_or(r2000_2fff_tmp57, r2000_2fff_tmp58);
                  r2000_2fff_tmp60 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp59);
                  cc_range_2145_2160_3 = simd_or(r2000_2fff_tmp60, r2000_2fff_tmp21);
                  carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(113), sequence_e2_85_adv));
                  r2000_2fff_tmp61 = simd_and(sequence_e2_85_adv, cc_range_2145_2160_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r2000_2fff_tmp61);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp44);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp62 = simd_or(basis_bits.bit_5, tmp14);
                  r2000_2fff_tmp63 = simd_and(basis_bits.bit_4, r2000_2fff_tmp62);
                  byte_range_80_88 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp63);
                  carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(114), sequence_e2_86_adv));
                  r2000_2fff_tmp64 = simd_and(sequence_e2_86_adv, byte_range_80_88);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r2000_2fff_tmp64);
                  byte_b0 = simd_andc(r2000_2fff_tmp4, tmp15);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  r2000_2fff_tmp65 = simd_or(basis_bits.bit_3, tmp22);
                  r2000_2fff_tmp66 = simd_and(basis_bits.bit_2, r2000_2fff_tmp65);
                  r2000_2fff_tmp67 = simd_andc(r2000_2fff_tmp66, tmp2);
                  cc_range_2c00_2c30_3 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp67);
                  carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(115), sequence_e2_b0_adv));
                  r2000_2fff_tmp68 = simd_and(sequence_e2_b0_adv, cc_range_2c00_2c30_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r2000_2fff_tmp68);
                  byte_b1 = r2000_2fff_tmp11;
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp69 = simd_and(basis_bits.bit_3, tmp22);
                  r2000_2fff_tmp70 = simd_andc(r2000_2fff_tmp30, r2000_2fff_tmp69);
                  cc_range_2c40_2c60_3 = simd_or(r2000_2fff_tmp70, r2000_2fff_tmp21);
                  carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(116), sequence_e2_b1_adv));
                  r2000_2fff_tmp71 = simd_and(sequence_e2_b1_adv, cc_range_2c40_2c60_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r2000_2fff_tmp71);
                  byte_b2 = simd_and(r2000_2fff_tmp4, r2000_4dff_tmp2);
                  sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(117), sequence_e2_b2_adv));
                  r2000_2fff_tmp72 = simd_and(sequence_e2_b2_adv, byte_range_80_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r2000_2fff_tmp72);
                  r2000_2fff_tmp73 = simd_and(byte_range_80_bf, tmp2);
                  byte_b3 = simd_and(r2000_2fff_tmp73, r2000_2fff_tmp17);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp74 = simd_or(basis_bits.bit_3, r2000_2fff_tmp23);
                  r2000_2fff_tmp75 = simd_and(basis_bits.bit_2, r2000_2fff_tmp74);
                  r2000_2fff_tmp76 = simd_andc(byte_range_80_bf, r2000_2fff_tmp75);
                  r2000_2fff_tmp77 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  r2000_2fff_tmp78 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp31), simd_andc(tmp11, basis_bits.bit_3));
                  r2000_2fff_tmp79 = simd_and(r2000_2fff_tmp77, r2000_2fff_tmp78);
                  cc_range_2cc0_2ceb_3 = simd_or(r2000_2fff_tmp76, r2000_2fff_tmp79);
                  carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(118), sequence_e2_b3_adv));
                  r2000_2fff_tmp80 = simd_and(sequence_e2_b3_adv, cc_range_2cc0_2ceb_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r2000_2fff_tmp80);
                  byte_b4 = simd_and(r2000_2fff_tmp73, r800_ffff_tmp2);
                  sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
                  r2000_2fff_tmp81 = simd_or(basis_bits.bit_4, r2000_2fff_tmp39);
                  r2000_2fff_tmp82 = simd_or(basis_bits.bit_3, r2000_2fff_tmp81);
                  r2000_2fff_tmp83 = simd_and(basis_bits.bit_2, r2000_2fff_tmp82);
                  r2000_2fff_tmp84 = simd_andc(byte_range_80_bf, r2000_2fff_tmp83);
                  r2000_2fff_tmp85 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r2000_2fff_tmp86 = simd_and(r2000_2fff_tmp85, r2000_2fff_tmp27);
                  r2000_2fff_tmp87 = simd_or(r2000_2fff_tmp84, r2000_2fff_tmp86);
                  r2000_2fff_tmp88 = simd_and(tmp21, r2000_2fff_tmp6);
                  r2000_2fff_tmp89 = simd_and(r2000_2fff_tmp85, r2000_2fff_tmp88);
                  r2000_2fff_tmp90 = simd_or(r2000_2fff_tmp87, r2000_2fff_tmp89);
                  cc_range_2d00_2d30_3 = simd_or(r2000_2fff_tmp90, r2000_2fff_tmp73);
                  carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(119), sequence_e2_b4_adv));
                  r2000_2fff_tmp91 = simd_and(sequence_e2_b4_adv, cc_range_2d00_2d30_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r2000_2fff_tmp91);
                  byte_b5 = simd_and(r2000_2fff_tmp73, r2000_2fff_tmp35);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  r2000_2fff_tmp92 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
                  r2000_2fff_tmp93 = simd_and(basis_bits.bit_2, r2000_2fff_tmp92);
                  r2000_2fff_tmp94 = simd_andc(byte_range_80_bf, r2000_2fff_tmp93);
                  r2000_2fff_tmp95 = simd_and(r2000_2fff_tmp85, tmp22);
                  r2000_2fff_tmp96 = simd_or(r2000_2fff_tmp94, r2000_2fff_tmp95);
                  r2000_2fff_tmp97 = simd_and(r2000_2fff_tmp73, tmp22);
                  cc_range_2d40_2d7f_3 = simd_or(r2000_2fff_tmp96, r2000_2fff_tmp97);
                  carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(120), sequence_e2_b5_adv));
                  r2000_2fff_tmp98 = simd_and(sequence_e2_b5_adv, cc_range_2d40_2d7f_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r2000_2fff_tmp98);
                  byte_b6 = simd_and(r2000_2fff_tmp73, r2000_2fff_tmp44);
                  sequence_e2_b6 = simd_and(byte_e2_adv, byte_b6);
                  r2000_2fff_tmp99 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r2000_2fff_tmp100 = simd_and(basis_bits.bit_5, tmp9);
                  r2000_2fff_tmp101 = simd_or(basis_bits.bit_4, r2000_2fff_tmp100);
                  r2000_2fff_tmp102 = simd_and(basis_bits.bit_3, r2000_2fff_tmp101);
                  r2000_2fff_tmp103 = simd_andc(r2000_2fff_tmp99, r2000_2fff_tmp102);
                  r2000_2fff_tmp104 = simd_andc(r2000_2fff_tmp85, basis_bits.bit_4);
                  r2000_2fff_tmp105 = simd_andc(r2000_2fff_tmp104, r2000_2fff_tmp100);
                  r2000_2fff_tmp106 = simd_or(r2000_2fff_tmp103, r2000_2fff_tmp105);
                  r2000_2fff_tmp107 = simd_and(r2000_2fff_tmp85, basis_bits.bit_4);
                  r2000_2fff_tmp108 = simd_andc(r2000_2fff_tmp107, r2000_2fff_tmp100);
                  r2000_2fff_tmp109 = simd_or(r2000_2fff_tmp106, r2000_2fff_tmp108);
                  r2000_2fff_tmp110 = simd_andc(r2000_2fff_tmp73, basis_bits.bit_4);
                  r2000_2fff_tmp111 = simd_andc(r2000_2fff_tmp110, r2000_2fff_tmp100);
                  r2000_2fff_tmp112 = simd_or(r2000_2fff_tmp109, r2000_2fff_tmp111);
                  r2000_2fff_tmp113 = simd_and(r2000_2fff_tmp73, basis_bits.bit_4);
                  r2000_2fff_tmp114 = simd_andc(r2000_2fff_tmp113, r2000_2fff_tmp100);
                  cc_range_2d80_2db8_3 = simd_or(r2000_2fff_tmp112, r2000_2fff_tmp114);
                  carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_e2_b6, carryQ.get_carry_in(121), sequence_e2_b6_adv));
                  r2000_2fff_tmp115 = simd_and(sequence_e2_b6_adv, cc_range_2d80_2db8_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r2000_2fff_tmp115);
                  byte_b7 = simd_and(r2000_2fff_tmp73, r2000_2fff_tmp27);
                  sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
                  r2000_2fff_tmp116 = simd_andc(byte_range_80_bf, r2000_2fff_tmp1);
                  r2000_2fff_tmp117 = simd_and(byte_range_80_bf, tmp19);
                  r2000_2fff_tmp118 = simd_andc(r2000_2fff_tmp117, basis_bits.bit_4);
                  r2000_2fff_tmp119 = simd_or(r2000_2fff_tmp116, r2000_2fff_tmp118);
                  r2000_2fff_tmp120 = simd_and(r2000_2fff_tmp117, basis_bits.bit_4);
                  r2000_2fff_tmp121 = simd_or(r2000_2fff_tmp119, r2000_2fff_tmp120);
                  r2000_2fff_tmp122 = simd_andc(r2000_2fff_tmp121, r2000_2fff_tmp100);
                  cc_range_2dc0_2de0_3 = simd_or(r2000_2fff_tmp122, r2000_2fff_tmp77);
                  carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(122), sequence_e2_b7_adv));
                  r2000_2fff_tmp123 = simd_and(sequence_e2_b7_adv, cc_range_2dc0_2de0_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r2000_2fff_tmp123);
                }
                else {
                  carryQ.CarryDequeueEnqueue(107, 16);
                }
                r2000_4dff_tmp3 = simd_andc(tmp9, tmp13);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp3);
                r2000_4dff_tmp4 = simd_or(byte_e3, r800_ffff_tmp7);
                if ((bitblock::any(r2000_4dff_tmp4) || carryQ.CarryTest(123, 12))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp3, r3000_4dff_tmp1);
                  byte_80 = simd_andc(r3000_4dff_tmp2, tmp15);
                  carryQ.cq[123] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(123), r3000_4dff_tmp3));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp3, byte_80);
                  byte_e3_adv = r3000_4dff_tmp3;
                  r3000_4dff_tmp4 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp1);
                  r3000_4dff_tmp5 = simd_and(r3000_4dff_tmp4, tmp14);
                  r3000_4dff_tmp6 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r3000_4dff_tmp7 = simd_or(basis_bits.bit_5, tmp14);
                  r3000_4dff_tmp8 = simd_or(basis_bits.bit_4, r3000_4dff_tmp7);
                  r3000_4dff_tmp9 = simd_and(r3000_4dff_tmp6, r3000_4dff_tmp8);
                  r3000_4dff_tmp10 = simd_or(r3000_4dff_tmp5, r3000_4dff_tmp9);
                  r3000_4dff_tmp11 = simd_and(r800_ffff_tmp3, tmp2);
                  r3000_4dff_tmp12 = simd_andc(r3000_4dff_tmp11, basis_bits.bit_4);
                  r3000_4dff_tmp13 = simd_not(basis_bits.bit_6);
                  r3000_4dff_tmp14 = simd_or(simd_and(basis_bits.bit_5, r3000_4dff_tmp13), simd_andc(tmp14, basis_bits.bit_5));
                  r3000_4dff_tmp15 = simd_and(r3000_4dff_tmp12, r3000_4dff_tmp14);
                  r3000_4dff_tmp16 = simd_or(r3000_4dff_tmp10, r3000_4dff_tmp15);
                  r3000_4dff_tmp17 = simd_and(r3000_4dff_tmp11, basis_bits.bit_4);
                  r3000_4dff_tmp18 = simd_and(basis_bits.bit_5, tmp14);
                  r3000_4dff_tmp19 = simd_andc(r3000_4dff_tmp17, r3000_4dff_tmp18);
                  cc_range_3005_3038_3 = simd_or(r3000_4dff_tmp16, r3000_4dff_tmp19);
                  carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(124), sequence_e3_80_adv));
                  r3000_4dff_tmp20 = simd_and(sequence_e3_80_adv, cc_range_3005_3038_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r3000_4dff_tmp20);
                  r3000_4dff_tmp21 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp22 = simd_andc(r3000_4dff_tmp21, tmp13);
                  byte_81 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp22);
                  sequence_e3_81 = simd_and(byte_e3_adv, byte_81);
                  r3000_4dff_tmp23 = simd_or(basis_bits.bit_3, tmp15);
                  r3000_4dff_tmp24 = simd_or(basis_bits.bit_2, r3000_4dff_tmp23);
                  byte_range_81_bf = simd_and(r800_ffff_tmp3, r3000_4dff_tmp24);
                  carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_e3_81, carryQ.get_carry_in(125), sequence_e3_81_adv));
                  r3000_4dff_tmp25 = simd_and(sequence_e3_81_adv, byte_range_81_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r3000_4dff_tmp25);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp26 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r3000_4dff_tmp27 = simd_and(basis_bits.bit_5, tmp9);
                  r3000_4dff_tmp28 = simd_or(basis_bits.bit_4, r3000_4dff_tmp27);
                  r3000_4dff_tmp29 = simd_and(basis_bits.bit_3, r3000_4dff_tmp28);
                  r3000_4dff_tmp30 = simd_andc(r3000_4dff_tmp26, r3000_4dff_tmp29);
                  r3000_4dff_tmp31 = simd_and(r800_ffff_tmp3, tmp19);
                  r3000_4dff_tmp32 = simd_and(r3000_4dff_tmp31, basis_bits.bit_4);
                  r3000_4dff_tmp33 = simd_and(r3000_4dff_tmp32, r3000_4dff_tmp7);
                  r3000_4dff_tmp34 = simd_or(r3000_4dff_tmp30, r3000_4dff_tmp33);
                  r3000_4dff_tmp35 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r3000_4dff_tmp36 = simd_and(r3000_4dff_tmp35, r3000_4dff_tmp23);
                  cc_range_3080_30a1_3 = simd_or(r3000_4dff_tmp34, r3000_4dff_tmp36);
                  carryQ.cq[126] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(126), sequence_e3_82_adv));
                  r3000_4dff_tmp37 = simd_and(sequence_e3_82_adv, cc_range_3080_30a1_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r3000_4dff_tmp37);
                  byte_83 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp3);
                  sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
                  r3000_4dff_tmp38 = simd_and(basis_bits.bit_3, tmp11);
                  r3000_4dff_tmp39 = simd_and(basis_bits.bit_2, r3000_4dff_tmp38);
                  r3000_4dff_tmp40 = simd_andc(r800_ffff_tmp3, r3000_4dff_tmp39);
                  r3000_4dff_tmp41 = simd_and(r3000_4dff_tmp11, tmp21);
                  cc_range_30c0_30fc_3 = simd_or(r3000_4dff_tmp40, r3000_4dff_tmp41);
                  carryQ.cq[127] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(127), sequence_e3_83_adv));
                  r3000_4dff_tmp42 = simd_and(sequence_e3_83_adv, cc_range_30c0_30fc_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r3000_4dff_tmp42);
                  byte_84 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp2);
                  sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
                  r3000_4dff_tmp43 = simd_and(tmp21, basis_bits.bit_6);
                  r3000_4dff_tmp44 = simd_or(basis_bits.bit_3, r3000_4dff_tmp43);
                  r3000_4dff_tmp45 = simd_not(r3000_4dff_tmp44);
                  r3000_4dff_tmp46 = simd_or(basis_bits.bit_4, r3000_4dff_tmp18);
                  r3000_4dff_tmp47 = simd_or(basis_bits.bit_3, r3000_4dff_tmp46);
                  r3000_4dff_tmp48 = simd_or(simd_and(basis_bits.bit_2, r3000_4dff_tmp45), simd_andc(r3000_4dff_tmp47, basis_bits.bit_2));
                  r3000_4dff_tmp49 = simd_and(r800_ffff_tmp3, r3000_4dff_tmp48);
                  r3000_4dff_tmp50 = simd_and(r3000_4dff_tmp11, r3000_4dff_tmp8);
                  cc_range_3105_3131_3 = simd_or(r3000_4dff_tmp49, r3000_4dff_tmp50);
                  carryQ.cq[128] = carryout2carry(pablo_blk_Advance(sequence_e3_84, carryQ.get_carry_in(128), sequence_e3_84_adv));
                  r3000_4dff_tmp51 = simd_and(sequence_e3_84_adv, cc_range_3105_3131_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r3000_4dff_tmp51);
                  r3000_4dff_tmp52 = simd_and(r800_ffff_tmp1, r3000_4dff_tmp21);
                  byte_85 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp52);
                  sequence_e3_85 = simd_and(byte_e3_adv, byte_85);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[129] = carryout2carry(pablo_blk_Advance(sequence_e3_85, carryQ.get_carry_in(129), sequence_e3_85_adv));
                  r3000_4dff_tmp53 = simd_and(sequence_e3_85_adv, byte_range_80_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r3000_4dff_tmp53);
                  r3000_4dff_tmp54 = simd_andc(byte_range_80_bf, r3000_4dff_tmp1);
                  r3000_4dff_tmp55 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  byte_86 = simd_and(r3000_4dff_tmp54, r3000_4dff_tmp55);
                  sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
                  r3000_4dff_tmp56 = simd_and(basis_bits.bit_4, r3000_4dff_tmp27);
                  r3000_4dff_tmp57 = simd_andc(r3000_4dff_tmp54, r3000_4dff_tmp56);
                  r3000_4dff_tmp58 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  r3000_4dff_tmp59 = simd_andc(r3000_4dff_tmp58, r3000_4dff_tmp38);
                  cc_range_3180_31a0_3 = simd_or(r3000_4dff_tmp57, r3000_4dff_tmp59);
                  carryQ.cq[130] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(130), sequence_e3_86_adv));
                  r3000_4dff_tmp60 = simd_and(sequence_e3_86_adv, cc_range_3180_31a0_3);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r3000_4dff_tmp60);
                  r3000_4dff_tmp61 = simd_and(r800_ffff_tmp1, tmp9);
                  byte_87 = simd_and(r3000_4dff_tmp54, r3000_4dff_tmp61);
                  sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
                  byte_range_b0_bf = simd_and(byte_range_80_bf, tmp2);
                  carryQ.cq[131] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(131), sequence_e3_87_adv));
                  r3000_4dff_tmp62 = simd_and(sequence_e3_87_adv, byte_range_b0_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r3000_4dff_tmp62);
                  byte_range_90_bf = simd_and(byte_range_80_bf, r3000_4dff_tmp1);
                  byte_e3_byte_range_90_bf = simd_and(byte_e3_adv, byte_range_90_bf);
                  carryQ.cq[132] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_90_bf, carryQ.get_carry_in(132), r3000_4dff_tmp63));
                  byte_e3_byte_range_90_bf_sfx = simd_and(r3000_4dff_tmp63, byte_range_80_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, byte_e3_byte_range_90_bf_sfx);
                  r3000_4dff_tmp64 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp65 = simd_or(basis_bits.bit_4, r3000_4dff_tmp64);
                  r3000_4dff_tmp66 = simd_and(basis_bits.bit_3, r3000_4dff_tmp65);
                  r3000_4dff_tmp67 = simd_and(basis_bits.bit_2, r3000_4dff_tmp66);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r3000_4dff_tmp67);
                  byte_e4_byte_range_80_b5 = simd_and(r800_ffff_tmp6, byte_range_80_b5);
                  carryQ.cq[133] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_80_b5, carryQ.get_carry_in(133), r3000_4dff_tmp68));
                  byte_e4_byte_range_80_b5_sfx = simd_and(r3000_4dff_tmp68, byte_range_80_bf);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, byte_e4_byte_range_80_b5_sfx);
                  byte_b6 = simd_and(byte_range_b0_bf, r3000_4dff_tmp55);
                  byte_e4_adv = r800_ffff_tmp6;
                  sequence_e4_b6 = simd_and(byte_e4_adv, byte_b6);
                  carryQ.cq[134] = carryout2carry(pablo_blk_Advance(sequence_e4_b6, carryQ.get_carry_in(134), r3000_4dff_tmp69));
                  sequence_e4_b6_byte_range_80_b5 = simd_and(r3000_4dff_tmp69, byte_range_80_b5);
                  struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e4_b6_byte_range_80_b5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(123, 12);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(107, 28);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(27, 108);
            }
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp3, tmp2);
            byte_range_b8_bf = simd_and(r800_ffff_tmp9, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_and(r800_ffff_tmp6, byte_range_b8_bf);
            r800_ffff_tmp11 = simd_not(tmp4);
            r800_ffff_tmp12 = simd_and(basis_bits.bit_5, tmp14);
            r800_ffff_tmp13 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp11), simd_andc(r800_ffff_tmp12, basis_bits.bit_4));
            byte_range_e5_e9 = simd_and(byte_range_e0_ef, r800_ffff_tmp13);
            r800_ffff_tmp14 = simd_or(r800_ffff_tmp10, byte_range_e5_e9);
            if ((bitblock::any(r800_ffff_tmp14) || carryQ.CarryTest(135, 5))) {
              byte_e4_byte_range_b8_bf = r800_ffff_tmp10;
              byte_range_80_bf = r800_ffff_tmp3;
              carryQ.cq[135] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_b8_bf, carryQ.get_carry_in(135), r4e00_9fff_tmp1));
              byte_e4_byte_range_b8_bf_sfx = simd_and(r4e00_9fff_tmp1, byte_range_80_bf);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, byte_e4_byte_range_b8_bf_sfx);
              r4e00_9fff_tmp2 = simd_or(basis_bits.bit_5, tmp14);
              r4e00_9fff_tmp3 = simd_not(r4e00_9fff_tmp2);
              r4e00_9fff_tmp4 = simd_or(simd_and(basis_bits.bit_4, r4e00_9fff_tmp3), simd_andc(r800_ffff_tmp12, basis_bits.bit_4));
              byte_range_e5_e8 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp4);
              carryQ.cq[136] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8, carryQ.get_carry_in(136), r4e00_9fff_tmp5));
              byte_range_e5_e8_sfx = simd_and(r4e00_9fff_tmp5, byte_range_80_bf);
              carryQ.cq[137] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8_sfx, carryQ.get_carry_in(137), r4e00_9fff_tmp6));
              byte_range_e5_e8_sfx_sfx = simd_and(r4e00_9fff_tmp6, byte_range_80_bf);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, byte_range_e5_e8_sfx_sfx);
              r4e00_9fff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              r4e00_9fff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r4e00_9fff_tmp9 = simd_and(r4e00_9fff_tmp7, r4e00_9fff_tmp8);
              byte_e9 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp9);
              r4e00_9fff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              r4e00_9fff_tmp11 = simd_andc(byte_range_80_bf, r4e00_9fff_tmp10);
              byte_80 = simd_andc(r4e00_9fff_tmp11, tmp15);
              carryQ.cq[138] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(138), byte_e9_adv));
              sequence_e9_80 = simd_and(byte_e9_adv, byte_80);
              r4e00_9fff_tmp12 = simd_and(basis_bits.bit_4, r800_ffff_tmp12);
              byte_range_80_8c = simd_andc(r4e00_9fff_tmp11, r4e00_9fff_tmp12);
              carryQ.cq[139] = carryout2carry(pablo_blk_Advance(sequence_e9_80, carryQ.get_carry_in(139), r4e00_9fff_tmp13));
              sequence_e9_80_byte_range_80_8c = simd_and(r4e00_9fff_tmp13, byte_range_80_8c);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_e9_80_byte_range_80_8c);
            }
            else {
              carryQ.CarryDequeueEnqueue(135, 5);
            }
            r800_ffff_tmp15 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            byte_range_ea_ef = simd_and(r800_ffff_tmp15, tmp4);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(140, 55))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_or(tmp13, basis_bits.bit_6);
              ra000_ffff_tmp6 = simd_and(basis_bits.bit_3, ra000_ffff_tmp5);
              byte_range_80_91 = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp6);
              carryQ.cq[140] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(140), ra000_ffff_tmp7));
              byte_ea_byte_range_80_91 = simd_and(ra000_ffff_tmp7, byte_range_80_91);
              byte_range_80_bf = r800_ffff_tmp3;
              carryQ.cq[141] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_80_91, carryQ.get_carry_in(141), ra000_ffff_tmp8));
              byte_ea_byte_range_80_91_sfx = simd_and(ra000_ffff_tmp8, byte_range_80_bf);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, byte_ea_byte_range_80_91_sfx);
              ra000_ffff_tmp9 = simd_and(byte_range_80_bf, tmp19);
              ra000_ffff_tmp10 = simd_andc(ra000_ffff_tmp2, tmp13);
              byte_92 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp10);
              byte_ea_adv = ra000_ffff_tmp7;
              sequence_ea_92 = simd_and(byte_ea_adv, byte_92);
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp12 = simd_andc(byte_range_80_bf, ra000_ffff_tmp11);
              ra000_ffff_tmp13 = simd_and(basis_bits.bit_4, r800_ffff_tmp12);
              byte_range_80_8c = simd_andc(ra000_ffff_tmp12, ra000_ffff_tmp13);
              carryQ.cq[142] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(142), ra000_ffff_tmp14));
              sequence_ea_92_byte_range_80_8c = simd_and(ra000_ffff_tmp14, byte_range_80_8c);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_92_byte_range_80_8c);
              ra000_ffff_tmp15 = simd_andc(tmp9, tmp13);
              byte_93 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp15);
              sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
              ra000_ffff_tmp16 = simd_and(tmp21, basis_bits.bit_6);
              ra000_ffff_tmp17 = simd_and(basis_bits.bit_3, ra000_ffff_tmp16);
              ra000_ffff_tmp18 = simd_not(ra000_ffff_tmp17);
              ra000_ffff_tmp19 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp18), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
              byte_range_90_bd = simd_and(byte_range_80_bf, ra000_ffff_tmp19);
              carryQ.cq[143] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(143), ra000_ffff_tmp20));
              sequence_ea_93_byte_range_90_bd = simd_and(ra000_ffff_tmp20, byte_range_90_bd);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_93_byte_range_90_bd);
              byte_94 = simd_and(ra000_ffff_tmp9, r800_ffff_tmp2);
              sequence_ea_94 = simd_and(byte_ea_adv, byte_94);
              carryQ.cq[144] = carryout2carry(pablo_blk_Advance(sequence_ea_94, carryQ.get_carry_in(144), ra000_ffff_tmp21));
              sequence_ea_94_byte_range_80_bf = simd_and(ra000_ffff_tmp21, byte_range_80_bf);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_94_byte_range_80_bf);
              ra000_ffff_tmp22 = simd_andc(ra000_ffff_tmp1, tmp14);
              byte_98 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp22);
              sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
              carryQ.cq[145] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(145), ra000_ffff_tmp23));
              sequence_ea_98_byte_range_80_8c = simd_and(ra000_ffff_tmp23, byte_range_80_8c);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_98_byte_range_80_8c);
              ra000_ffff_tmp24 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp25 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp24);
              byte_99 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp25);
              sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
              byte_range_80_af = simd_andc(byte_range_80_bf, tmp2);
              carryQ.cq[146] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(146), ra000_ffff_tmp26));
              sequence_ea_99_byte_range_80_af = simd_and(ra000_ffff_tmp26, byte_range_80_af);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_99_byte_range_80_af);
              byte_9a = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp27 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              byte_range_80_9d = simd_andc(ra000_ffff_tmp27, ra000_ffff_tmp17);
              carryQ.cq[147] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(147), ra000_ffff_tmp28));
              sequence_ea_9a_byte_range_80_9d = simd_and(ra000_ffff_tmp28, byte_range_80_9d);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_9a_byte_range_80_9d);
              ra000_ffff_tmp29 = simd_and(ra000_ffff_tmp1, tmp9);
              byte_9b = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp29);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              ra000_ffff_tmp30 = simd_and(basis_bits.bit_2, ra000_ffff_tmp6);
              byte_range_80_b1 = simd_andc(byte_range_80_bf, ra000_ffff_tmp30);
              carryQ.cq[148] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(148), ra000_ffff_tmp31));
              sequence_ea_9b_byte_range_80_b1 = simd_and(ra000_ffff_tmp31, byte_range_80_b1);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_9b_byte_range_80_b1);
              ra000_ffff_tmp32 = simd_andc(tmp21, tmp14);
              byte_9c = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp32);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              ra000_ffff_tmp33 = simd_and(basis_bits.bit_5, tmp9);
              ra000_ffff_tmp34 = simd_or(basis_bits.bit_4, ra000_ffff_tmp33);
              byte_range_97_9f = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp34);
              carryQ.cq[149] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(149), ra000_ffff_tmp35));
              sequence_ea_9c_byte_range_97_9f = simd_and(ra000_ffff_tmp35, byte_range_97_9f);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_9c_byte_range_97_9f);
              ra000_ffff_tmp36 = simd_and(tmp21, ra000_ffff_tmp24);
              byte_9d = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp36);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              carryQ.cq[150] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(150), ra000_ffff_tmp37));
              sequence_ea_9d_byte_range_80_bf = simd_and(ra000_ffff_tmp37, byte_range_80_bf);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_9d_byte_range_80_bf);
              ra000_ffff_tmp38 = simd_and(tmp21, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp38);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp39 = simd_or(basis_bits.bit_5, tmp14);
              ra000_ffff_tmp40 = simd_and(basis_bits.bit_4, ra000_ffff_tmp39);
              byte_range_80_88 = simd_andc(ra000_ffff_tmp12, ra000_ffff_tmp40);
              carryQ.cq[151] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(151), ra000_ffff_tmp41));
              sequence_ea_9e_byte_range_80_88 = simd_and(ra000_ffff_tmp41, byte_range_80_88);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_9e_byte_range_80_88);
              byte_9f = simd_and(ra000_ffff_tmp9, tmp22);
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              ra000_ffff_tmp42 = simd_and(byte_range_80_bf, tmp2);
              byte_range_b7_bf = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp34);
              carryQ.cq[152] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(152), ra000_ffff_tmp43));
              sequence_ea_9f_byte_range_b7_bf = simd_and(ra000_ffff_tmp43, byte_range_b7_bf);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_9f_byte_range_b7_bf);
              ra000_ffff_tmp44 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              byte_a0 = simd_andc(ra000_ffff_tmp44, tmp15);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              ra000_ffff_tmp45 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
              ra000_ffff_tmp46 = simd_and(basis_bits.bit_2, ra000_ffff_tmp45);
              byte_range_80_a7 = simd_andc(byte_range_80_bf, ra000_ffff_tmp46);
              carryQ.cq[153] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(153), ra000_ffff_tmp47));
              sequence_ea_a0_byte_range_80_a7 = simd_and(ra000_ffff_tmp47, byte_range_80_a7);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_a0_byte_range_80_a7);
              ra000_ffff_tmp48 = simd_andc(ra000_ffff_tmp24, tmp13);
              byte_a1 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp48);
              sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
              ra000_ffff_tmp49 = simd_and(basis_bits.bit_3, tmp13);
              ra000_ffff_tmp50 = simd_and(basis_bits.bit_2, ra000_ffff_tmp49);
              byte_range_80_b3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp50);
              carryQ.cq[154] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(154), ra000_ffff_tmp51));
              sequence_ea_a1_byte_range_80_b3 = simd_and(ra000_ffff_tmp51, byte_range_80_b3);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_a1_byte_range_80_b3);
              byte_a2 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp10);
              sequence_ea_a2 = simd_and(byte_ea_adv, byte_a2);
              carryQ.cq[155] = carryout2carry(pablo_blk_Advance(sequence_ea_a2, carryQ.get_carry_in(155), ra000_ffff_tmp52));
              sequence_ea_a2_byte_range_80_bf = simd_and(ra000_ffff_tmp52, byte_range_80_bf);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_a2_byte_range_80_bf);
              byte_a3 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp15);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              ra000_ffff_tmp53 = simd_andc(ra000_ffff_tmp12, basis_bits.bit_4);
              byte_range_80_84 = simd_andc(ra000_ffff_tmp53, r800_ffff_tmp12);
              carryQ.cq[156] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(156), ra000_ffff_tmp54));
              sequence_ea_a3_byte_range_80_84 = simd_and(ra000_ffff_tmp54, byte_range_80_84);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_a3_byte_range_80_84);
              byte_a4 = simd_and(ra000_ffff_tmp44, r800_ffff_tmp2);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              ra000_ffff_tmp55 = simd_or(basis_bits.bit_3, ra000_ffff_tmp16);
              ra000_ffff_tmp56 = simd_and(basis_bits.bit_2, ra000_ffff_tmp55);
              byte_range_80_ad = simd_andc(byte_range_80_bf, ra000_ffff_tmp56);
              carryQ.cq[157] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(157), ra000_ffff_tmp57));
              sequence_ea_a4_byte_range_80_ad = simd_and(ra000_ffff_tmp57, byte_range_80_ad);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_a4_byte_range_80_ad);
              ra000_ffff_tmp58 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp24);
              byte_a5 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp58);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              byte_range_80_93 = simd_andc(ra000_ffff_tmp27, ra000_ffff_tmp49);
              carryQ.cq[158] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(158), ra000_ffff_tmp59));
              sequence_ea_a5_byte_range_80_93 = simd_and(ra000_ffff_tmp59, byte_range_80_93);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_a5_byte_range_80_93);
              ra000_ffff_tmp60 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp2);
              byte_a6 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp60);
              sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
              carryQ.cq[159] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(159), ra000_ffff_tmp61));
              sequence_ea_a6_byte_range_80_bf = simd_and(ra000_ffff_tmp61, byte_range_80_bf);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_a6_byte_range_80_bf);
              ra000_ffff_tmp62 = simd_and(r800_ffff_tmp1, tmp9);
              byte_a7 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp62);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              byte_80 = simd_andc(ra000_ffff_tmp12, tmp15);
              carryQ.cq[160] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(160), ra000_ffff_tmp63));
              sequence_ea_a7_80 = simd_and(ra000_ffff_tmp63, byte_80);
              byte_a8 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp22);
              sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
              ra000_ffff_tmp64 = simd_and(basis_bits.bit_3, ra000_ffff_tmp34);
              ra000_ffff_tmp65 = simd_and(basis_bits.bit_2, ra000_ffff_tmp64);
              byte_range_80_b6 = simd_andc(byte_range_80_bf, ra000_ffff_tmp65);
              carryQ.cq[161] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(161), ra000_ffff_tmp66));
              sequence_ea_a8_byte_range_80_b6 = simd_and(ra000_ffff_tmp66, byte_range_80_b6);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_a8_byte_range_80_b6);
              byte_a9 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp25);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              ra000_ffff_tmp67 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp68 = simd_and(basis_bits.bit_4, ra000_ffff_tmp67);
              byte_range_80_8d = simd_andc(ra000_ffff_tmp12, ra000_ffff_tmp68);
              carryQ.cq[162] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(162), ra000_ffff_tmp69));
              sequence_ea_a9_byte_range_80_8d = simd_and(ra000_ffff_tmp69, byte_range_80_8d);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_a9_byte_range_80_8d);
              byte_aa = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp3);
              sequence_ea_aa = simd_and(byte_ea_adv, byte_aa);
              carryQ.cq[163] = carryout2carry(pablo_blk_Advance(sequence_ea_aa, carryQ.get_carry_in(163), ra000_ffff_tmp70));
              sequence_ea_aa_byte_range_80_bf = simd_and(ra000_ffff_tmp70, byte_range_80_bf);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_aa_byte_range_80_bf);
              byte_ab = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp29);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              ra000_ffff_tmp71 = simd_andc(ra000_ffff_tmp12, tmp13);
              byte_range_80_82 = simd_andc(ra000_ffff_tmp71, tmp9);
              carryQ.cq[164] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(164), ra000_ffff_tmp72));
              sequence_ea_ab_byte_range_80_82 = simd_and(ra000_ffff_tmp72, byte_range_80_82);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_ab_byte_range_80_82);
              byte_ac = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp32);
              sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
              ra000_ffff_tmp73 = simd_not(tmp9);
              ra000_ffff_tmp74 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp73), simd_andc(tmp14, basis_bits.bit_5));
              byte_range_81_86 = simd_and(ra000_ffff_tmp53, ra000_ffff_tmp74);
              carryQ.cq[165] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(165), ra000_ffff_tmp75));
              sequence_ea_ac_byte_range_81_86 = simd_and(ra000_ffff_tmp75, byte_range_81_86);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_ac_byte_range_81_86);
              byte_ad = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp36);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              ra000_ffff_tmp76 = simd_and(basis_bits.bit_3, tmp11);
              byte_range_80_9a = simd_andc(ra000_ffff_tmp27, ra000_ffff_tmp76);
              carryQ.cq[166] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(166), ra000_ffff_tmp77));
              sequence_ea_ad_byte_range_80_9a = simd_and(ra000_ffff_tmp77, byte_range_80_9a);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_ad_byte_range_80_9a);
              byte_af = simd_and(ra000_ffff_tmp44, tmp22);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              ra000_ffff_tmp78 = simd_or(basis_bits.bit_3, tmp11);
              ra000_ffff_tmp79 = simd_and(basis_bits.bit_2, ra000_ffff_tmp78);
              byte_range_80_aa = simd_andc(byte_range_80_bf, ra000_ffff_tmp79);
              carryQ.cq[167] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(167), ra000_ffff_tmp80));
              sequence_ea_af_byte_range_80_aa = simd_and(ra000_ffff_tmp80, byte_range_80_aa);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_af_byte_range_80_aa);
              byte_b0 = simd_andc(ra000_ffff_tmp42, tmp15);
              sequence_ea_b0 = simd_and(byte_ea_adv, byte_b0);
              carryQ.cq[168] = carryout2carry(pablo_blk_Advance(sequence_ea_b0, carryQ.get_carry_in(168), ra000_ffff_tmp81));
              sequence_ea_b0_byte_range_80_bf = simd_and(ra000_ffff_tmp81, byte_range_80_bf);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ea_b0_byte_range_80_bf);
              ra000_ffff_tmp82 = simd_not(tmp14);
              ra000_ffff_tmp83 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp82), simd_andc(tmp9, basis_bits.bit_5));
              byte_range_eb_ec = simd_and(r800_ffff_tmp15, ra000_ffff_tmp83);
              carryQ.cq[169] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec, carryQ.get_carry_in(169), ra000_ffff_tmp84));
              byte_range_eb_ec_sfx = simd_and(ra000_ffff_tmp84, byte_range_80_bf);
              carryQ.cq[170] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec_sfx, carryQ.get_carry_in(170), ra000_ffff_tmp85));
              byte_range_eb_ec_sfx_sfx = simd_and(ra000_ffff_tmp85, byte_range_80_bf);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, byte_range_eb_ec_sfx_sfx);
              byte_ed = simd_and(byte_range_e0_ef, ra000_ffff_tmp36);
              carryQ.cq[171] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(171), byte_ed_adv));
              sequence_ed_80 = simd_and(byte_ed_adv, byte_80);
              ra000_ffff_tmp86 = simd_or(basis_bits.bit_3, tmp13);
              ra000_ffff_tmp87 = simd_and(basis_bits.bit_2, ra000_ffff_tmp86);
              byte_range_80_a3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp87);
              carryQ.cq[172] = carryout2carry(pablo_blk_Advance(sequence_ed_80, carryQ.get_carry_in(172), ra000_ffff_tmp88));
              sequence_ed_80_byte_range_80_a3 = simd_and(ra000_ffff_tmp88, byte_range_80_a3);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ed_80_byte_range_80_a3);
              byte_ef = simd_and(byte_range_e0_ef, tmp22);
              ra000_ffff_tmp89 = simd_not(ra000_ffff_tmp39);
              ra000_ffff_tmp90 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp89), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
              byte_range_a4_a8 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp90);
              carryQ.cq[173] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(173), ra000_ffff_tmp91));
              byte_ef_byte_range_a4_a8 = simd_and(ra000_ffff_tmp91, byte_range_a4_a8);
              carryQ.cq[174] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_a4_a8, carryQ.get_carry_in(174), ra000_ffff_tmp92));
              byte_ef_byte_range_a4_a8_sfx = simd_and(ra000_ffff_tmp92, byte_range_80_bf);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, byte_ef_byte_range_a4_a8_sfx);
              byte_ef_adv = ra000_ffff_tmp91;
              sequence_ef_a9 = simd_and(byte_ef_adv, byte_a9);
              carryQ.cq[175] = carryout2carry(pablo_blk_Advance(sequence_ef_a9, carryQ.get_carry_in(175), ra000_ffff_tmp93));
              sequence_ef_a9_byte_range_80_ad = simd_and(ra000_ffff_tmp93, byte_range_80_ad);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_a9_byte_range_80_ad);
              sequence_ef_aa = simd_and(byte_ef_adv, byte_aa);
              carryQ.cq[176] = carryout2carry(pablo_blk_Advance(sequence_ef_aa, carryQ.get_carry_in(176), ra000_ffff_tmp94));
              sequence_ef_aa_byte_range_80_bf = simd_and(ra000_ffff_tmp94, byte_range_80_bf);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_aa_byte_range_80_bf);
              sequence_ef_ab = simd_and(byte_ef_adv, byte_ab);
              ra000_ffff_tmp95 = simd_and(basis_bits.bit_3, tmp5);
              byte_range_80_99 = simd_andc(ra000_ffff_tmp27, ra000_ffff_tmp95);
              carryQ.cq[177] = carryout2carry(pablo_blk_Advance(sequence_ef_ab, carryQ.get_carry_in(177), ra000_ffff_tmp96));
              sequence_ef_ab_byte_range_80_99 = simd_and(ra000_ffff_tmp96, byte_range_80_99);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_ab_byte_range_80_99);
              sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
              byte_range_80_86 = simd_andc(ra000_ffff_tmp53, ra000_ffff_tmp33);
              carryQ.cq[178] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(178), ra000_ffff_tmp97));
              sequence_ef_ac_byte_range_80_86 = simd_and(ra000_ffff_tmp97, byte_range_80_86);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_ac_byte_range_80_86);
              sequence_ef_ad = simd_and(byte_ef_adv, byte_ad);
              byte_range_80_81 = simd_andc(ra000_ffff_tmp12, ra000_ffff_tmp5);
              carryQ.cq[179] = carryout2carry(pablo_blk_Advance(sequence_ef_ad, carryQ.get_carry_in(179), ra000_ffff_tmp98));
              sequence_ef_ad_byte_range_80_81 = simd_and(ra000_ffff_tmp98, byte_range_80_81);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_ad_byte_range_80_81);
              byte_ae = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp38);
              sequence_ef_ae = simd_and(byte_ef_adv, byte_ae);
              carryQ.cq[180] = carryout2carry(pablo_blk_Advance(sequence_ef_ae, carryQ.get_carry_in(180), ra000_ffff_tmp99));
              sequence_ef_ae_byte_range_80_b1 = simd_and(ra000_ffff_tmp99, byte_range_80_b1);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_ae_byte_range_80_b1);
              sequence_ef_af = simd_and(byte_ef_adv, byte_af);
              ra000_ffff_tmp100 = simd_or(tmp13, tmp9);
              ra000_ffff_tmp101 = simd_and(basis_bits.bit_3, ra000_ffff_tmp100);
              ra000_ffff_tmp102 = simd_or(basis_bits.bit_2, ra000_ffff_tmp101);
              byte_range_93_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp102);
              carryQ.cq[181] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(181), ra000_ffff_tmp103));
              sequence_ef_af_byte_range_93_bf = simd_and(ra000_ffff_tmp103, byte_range_93_bf);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_af_byte_range_93_bf);
              sequence_ef_b0 = simd_and(byte_ef_adv, byte_b0);
              carryQ.cq[182] = carryout2carry(pablo_blk_Advance(sequence_ef_b0, carryQ.get_carry_in(182), ra000_ffff_tmp104));
              sequence_ef_b0_byte_range_80_bf = simd_and(ra000_ffff_tmp104, byte_range_80_bf);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_b0_byte_range_80_bf);
              byte_b4 = simd_and(ra000_ffff_tmp42, r800_ffff_tmp2);
              sequence_ef_b4 = simd_and(byte_ef_adv, byte_b4);
              ra000_ffff_tmp105 = simd_and(basis_bits.bit_2, ra000_ffff_tmp17);
              byte_range_80_bd = simd_andc(byte_range_80_bf, ra000_ffff_tmp105);
              carryQ.cq[183] = carryout2carry(pablo_blk_Advance(sequence_ef_b4, carryQ.get_carry_in(183), ra000_ffff_tmp106));
              sequence_ef_b4_byte_range_80_bd = simd_and(ra000_ffff_tmp106, byte_range_80_bd);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_b4_byte_range_80_bd);
              byte_b5 = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp58);
              sequence_ef_b5 = simd_and(byte_ef_adv, byte_b5);
              byte_range_90_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp11);
              carryQ.cq[184] = carryout2carry(pablo_blk_Advance(sequence_ef_b5, carryQ.get_carry_in(184), ra000_ffff_tmp107));
              sequence_ef_b5_byte_range_90_bf = simd_and(ra000_ffff_tmp107, byte_range_90_bf);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_b5_byte_range_90_bf);
              byte_b6 = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp60);
              sequence_ef_b6 = simd_and(byte_ef_adv, byte_b6);
              byte_range_80_8f = ra000_ffff_tmp12;
              carryQ.cq[185] = carryout2carry(pablo_blk_Advance(sequence_ef_b6, carryQ.get_carry_in(185), ra000_ffff_tmp108));
              sequence_ef_b6_byte_range_80_8f = simd_and(ra000_ffff_tmp108, byte_range_80_8f);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_b6_byte_range_80_8f);
              byte_b7 = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp62);
              sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
              byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
              carryQ.cq[186] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(186), ra000_ffff_tmp109));
              sequence_ef_b7_byte_range_80_87 = simd_and(ra000_ffff_tmp109, byte_range_80_87);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_b7_byte_range_80_87);
              byte_b8 = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp22);
              sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
              carryQ.cq[187] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(187), ra000_ffff_tmp110));
              sequence_ef_b8_byte_range_80_8f = simd_and(ra000_ffff_tmp110, byte_range_80_8f);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_b8_byte_range_80_8f);
              byte_b9 = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp25);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              ra000_ffff_tmp111 = simd_and(byte_range_80_8f, tmp21);
              byte_range_8d_8f = simd_and(ra000_ffff_tmp111, tmp14);
              carryQ.cq[188] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(188), ra000_ffff_tmp112));
              sequence_ef_b9_byte_range_8d_8f = simd_and(ra000_ffff_tmp112, byte_range_8d_8f);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_b9_byte_range_8d_8f);
              byte_ba = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp3);
              sequence_ef_ba = simd_and(byte_ef_adv, byte_ba);
              carryQ.cq[189] = carryout2carry(pablo_blk_Advance(sequence_ef_ba, carryQ.get_carry_in(189), ra000_ffff_tmp113));
              sequence_ef_ba_byte_range_80_bf = simd_and(ra000_ffff_tmp113, byte_range_80_bf);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_ba_byte_range_80_bf);
              byte_bb = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp29);
              sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
              ra000_ffff_tmp114 = simd_and(tmp21, tmp14);
              ra000_ffff_tmp115 = simd_and(basis_bits.bit_3, ra000_ffff_tmp114);
              ra000_ffff_tmp116 = simd_and(basis_bits.bit_2, ra000_ffff_tmp115);
              byte_range_80_bc = simd_andc(byte_range_80_bf, ra000_ffff_tmp116);
              carryQ.cq[190] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(190), ra000_ffff_tmp117));
              sequence_ef_bb_byte_range_80_bc = simd_and(ra000_ffff_tmp117, byte_range_80_bc);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_bb_byte_range_80_bc);
              byte_bc = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp32);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              byte_range_90_99 = simd_andc(ra000_ffff_tmp9, tmp5);
              carryQ.cq[191] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(191), ra000_ffff_tmp118));
              sequence_ef_bc_byte_range_90_99 = simd_and(ra000_ffff_tmp118, byte_range_90_99);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_bc_byte_range_90_99);
              byte_bd = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp36);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_range_81_9a = simd_and(ra000_ffff_tmp27, tmp16);
              carryQ.cq[192] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(192), ra000_ffff_tmp119));
              sequence_ef_bd_byte_range_81_9a = simd_and(ra000_ffff_tmp119, byte_range_81_9a);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_bd_byte_range_81_9a);
              byte_be = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp38);
              sequence_ef_be = simd_and(byte_ef_adv, byte_be);
              ra000_ffff_tmp120 = simd_and(basis_bits.bit_3, tmp22);
              ra000_ffff_tmp121 = simd_and(basis_bits.bit_2, ra000_ffff_tmp120);
              byte_range_80_be = simd_andc(byte_range_80_bf, ra000_ffff_tmp121);
              carryQ.cq[193] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(193), ra000_ffff_tmp122));
              sequence_ef_be_byte_range_80_be = simd_and(ra000_ffff_tmp122, byte_range_80_be);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_be_byte_range_80_be);
              byte_bf = simd_and(ra000_ffff_tmp42, tmp22);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              byte_range_82_87 = simd_and(byte_range_80_87, tmp4);
              carryQ.cq[194] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(194), ra000_ffff_tmp123));
              sequence_ef_bf_byte_range_82_87 = simd_and(ra000_ffff_tmp123, byte_range_82_87);
              struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_ef_bf_byte_range_82_87);
            }
            else {
              carryQ.CarryDequeueEnqueue(140, 55);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(26, 169);
          }
          byte_range_f0_ff = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(195, 119))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp15);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_and(r10000_10ffff_tmp1, tmp19);
            byte_90 = simd_andc(r10000_10ffff_tmp2, tmp15);
            carryQ.cq[195] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(195), r10000_10ffff_tmp3));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp3, byte_90);
            byte_f0_adv = r10000_10ffff_tmp3;
            r10000_10ffff_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp5 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp4);
            byte_80 = simd_andc(r10000_10ffff_tmp5, tmp15);
            carryQ.cq[196] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(196), r10000_10ffff_tmp6));
            sequence_f0_90_80 = simd_and(r10000_10ffff_tmp6, byte_80);
            sequence_f0_90_adv = r10000_10ffff_tmp6;
            r10000_10ffff_tmp7 = simd_andc(r10000_10ffff_tmp5, tmp21);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_5, tmp9);
            r10000_10ffff_tmp9 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp9);
            r10000_10ffff_tmp11 = simd_not(r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_and(tmp21, tmp14);
            r10000_10ffff_tmp13 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp12);
            r10000_10ffff_tmp14 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp11), simd_andc(r10000_10ffff_tmp13, basis_bits.bit_2));
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_or(r10000_10ffff_tmp7, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp1, basis_bits.bit_2);
            r10000_10ffff_tmp18 = simd_or(simd_and(basis_bits.bit_3, tmp12), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp18);
            r10000_10ffff_tmp20 = simd_or(r10000_10ffff_tmp16, r10000_10ffff_tmp19);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp1, tmp2);
            r10000_10ffff_tmp22 = simd_andc(tmp21, basis_bits.bit_6);
            r10000_10ffff_tmp23 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp22);
            r10000_10ffff_tmp24 = simd_or(r10000_10ffff_tmp20, r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_and(r10000_10ffff_tmp21, tmp22);
            cc_range_10000_1003f_4 = simd_or(r10000_10ffff_tmp24, r10000_10ffff_tmp25);
            carryQ.cq[197] = carryout2carry(pablo_blk_Advance(sequence_f0_90_80, carryQ.get_carry_in(197), sequence_f0_90_80_adv));
            r10000_10ffff_tmp26 = simd_and(sequence_f0_90_80_adv, cc_range_10000_1003f_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp26);
            r10000_10ffff_tmp27 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp28 = simd_andc(r10000_10ffff_tmp27, tmp13);
            byte_81 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp28);
            sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
            r10000_10ffff_tmp29 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp30 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp29);
            r10000_10ffff_tmp31 = simd_andc(r10000_10ffff_tmp4, tmp19);
            r10000_10ffff_tmp32 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp31);
            cc_range_10040_10050_4 = simd_andc(r10000_10ffff_tmp32, r10000_10ffff_tmp30);
            carryQ.cq[198] = carryout2carry(pablo_blk_Advance(sequence_f0_90_81, carryQ.get_carry_in(198), sequence_f0_90_81_adv));
            r10000_10ffff_tmp33 = simd_and(sequence_f0_90_81_adv, cc_range_10040_10050_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp33);
            r10000_10ffff_tmp34 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp35 = simd_andc(r10000_10ffff_tmp34, tmp13);
            byte_82 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp35);
            sequence_f0_90_82 = simd_and(sequence_f0_90_adv, byte_82);
            byte_range_80_bf = r10000_10ffff_tmp1;
            carryQ.cq[199] = carryout2carry(pablo_blk_Advance(sequence_f0_90_82, carryQ.get_carry_in(199), sequence_f0_90_82_adv));
            r10000_10ffff_tmp36 = simd_and(sequence_f0_90_82_adv, byte_range_80_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp36);
            r10000_10ffff_tmp37 = simd_and(byte_range_80_bf, tmp19);
            r10000_10ffff_tmp38 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp4);
            r10000_10ffff_tmp39 = simd_andc(tmp9, tmp13);
            byte_83 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp39);
            sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
            r10000_10ffff_tmp40 = simd_and(basis_bits.bit_3, tmp11);
            r10000_10ffff_tmp41 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp40);
            byte_range_80_ba = simd_andc(byte_range_80_bf, r10000_10ffff_tmp41);
            carryQ.cq[200] = carryout2carry(pablo_blk_Advance(sequence_f0_90_83, carryQ.get_carry_in(200), sequence_f0_90_83_adv));
            r10000_10ffff_tmp42 = simd_and(sequence_f0_90_83_adv, byte_range_80_ba);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp42);
            r10000_10ffff_tmp43 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp44 = simd_and(r10000_10ffff_tmp43, r10000_10ffff_tmp27);
            byte_85 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp44);
            sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
            r10000_10ffff_tmp45 = simd_and(basis_bits.bit_5, tmp14);
            r10000_10ffff_tmp46 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp45);
            r10000_10ffff_tmp47 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp46);
            r10000_10ffff_tmp48 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp47);
            byte_range_80_b4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp48);
            carryQ.cq[201] = carryout2carry(pablo_blk_Advance(sequence_f0_90_85, carryQ.get_carry_in(201), sequence_f0_90_85_adv));
            r10000_10ffff_tmp49 = simd_and(sequence_f0_90_85_adv, byte_range_80_b4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp49);
            r10000_10ffff_tmp50 = simd_and(r10000_10ffff_tmp43, tmp9);
            byte_87 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp50);
            sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
            r10000_10ffff_tmp51 = simd_and(byte_range_80_bf, tmp2);
            r10000_10ffff_tmp52 = simd_and(tmp21, r10000_10ffff_tmp27);
            byte_bd = simd_and(r10000_10ffff_tmp51, r10000_10ffff_tmp52);
            carryQ.cq[202] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(202), sequence_f0_90_87_adv));
            r10000_10ffff_tmp53 = simd_and(sequence_f0_90_87_adv, byte_bd);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp53);
            r10000_10ffff_tmp54 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp55 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp34);
            byte_8a = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp55);
            sequence_f0_90_8a = simd_and(sequence_f0_90_adv, byte_8a);
            r10000_10ffff_tmp56 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp57 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp12);
            r10000_10ffff_tmp58 = simd_andc(r10000_10ffff_tmp56, r10000_10ffff_tmp57);
            r10000_10ffff_tmp59 = simd_and(byte_range_80_bf, basis_bits.bit_2);
            cc_range_10280_102a0_4 = simd_or(r10000_10ffff_tmp58, r10000_10ffff_tmp59);
            carryQ.cq[203] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8a, carryQ.get_carry_in(203), sequence_f0_90_8a_adv));
            r10000_10ffff_tmp60 = simd_and(sequence_f0_90_8a_adv, cc_range_10280_102a0_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp60);
            r10000_10ffff_tmp61 = simd_and(r10000_10ffff_tmp54, tmp9);
            byte_8b = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp61);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp62 = simd_and(basis_bits.bit_3, tmp15);
            r10000_10ffff_tmp63 = simd_andc(r10000_10ffff_tmp56, r10000_10ffff_tmp62);
            r10000_10ffff_tmp64 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp65 = simd_andc(r10000_10ffff_tmp64, tmp15);
            cc_range_102c0_102e0_4 = simd_or(r10000_10ffff_tmp63, r10000_10ffff_tmp65);
            carryQ.cq[204] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(204), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp66 = simd_and(sequence_f0_90_8b_adv, cc_range_102c0_102e0_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp66);
            r10000_10ffff_tmp67 = simd_andc(tmp21, tmp14);
            byte_8c = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp67);
            sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
            r10000_10ffff_tmp68 = simd_andc(basis_bits.bit_2, tmp2);
            cc_range_10300_10330_4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp68);
            carryQ.cq[205] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(205), sequence_f0_90_8c_adv));
            r10000_10ffff_tmp69 = simd_and(sequence_f0_90_8c_adv, cc_range_10300_10330_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp69);
            byte_8d = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp52);
            sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
            r10000_10ffff_tmp70 = simd_andc(r10000_10ffff_tmp38, tmp11);
            r10000_10ffff_tmp71 = simd_not(r10000_10ffff_tmp40);
            r10000_10ffff_tmp72 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp71), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp73 = simd_and(byte_range_80_bf, r10000_10ffff_tmp72);
            cc_range_10340_10350_4 = simd_or(r10000_10ffff_tmp70, r10000_10ffff_tmp73);
            carryQ.cq[206] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(206), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp74 = simd_and(sequence_f0_90_8d_adv, cc_range_10340_10350_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp74);
            r10000_10ffff_tmp75 = simd_and(tmp21, r10000_10ffff_tmp34);
            byte_8e = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp75);
            sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
            r10000_10ffff_tmp76 = simd_and(tmp21, basis_bits.bit_6);
            r10000_10ffff_tmp77 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp76);
            r10000_10ffff_tmp78 = simd_andc(r10000_10ffff_tmp56, r10000_10ffff_tmp77);
            cc_range_10380_103a0_4 = simd_or(r10000_10ffff_tmp78, r10000_10ffff_tmp59);
            carryQ.cq[207] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(207), sequence_f0_90_8e_adv));
            r10000_10ffff_tmp79 = simd_and(sequence_f0_90_8e_adv, cc_range_10380_103a0_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp79);
            byte_8f = simd_and(r10000_10ffff_tmp38, tmp22);
            sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
            r10000_10ffff_tmp80 = simd_andc(tmp13, basis_bits.bit_4);
            r10000_10ffff_tmp81 = simd_andc(r10000_10ffff_tmp38, r10000_10ffff_tmp80);
            r10000_10ffff_tmp82 = simd_andc(r10000_10ffff_tmp37, basis_bits.bit_4);
            r10000_10ffff_tmp83 = simd_not(basis_bits.bit_6);
            r10000_10ffff_tmp84 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp83), simd_andc(tmp14, basis_bits.bit_5));
            r10000_10ffff_tmp85 = simd_and(r10000_10ffff_tmp82, r10000_10ffff_tmp84);
            cc_range_103c0_103d1_4 = simd_or(r10000_10ffff_tmp81, r10000_10ffff_tmp85);
            carryQ.cq[208] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(208), sequence_f0_90_8f_adv));
            r10000_10ffff_tmp86 = simd_and(sequence_f0_90_8f_adv, cc_range_103c0_103d1_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp86);
            r10000_10ffff_tmp87 = simd_or(tmp13, basis_bits.bit_6);
            byte_range_90_91 = simd_andc(r10000_10ffff_tmp37, r10000_10ffff_tmp87);
            sequence_f0_90_byte_range_90_91 = simd_and(sequence_f0_90_adv, byte_range_90_91);
            carryQ.cq[209] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_90_91, carryQ.get_carry_in(209), r10000_10ffff_tmp88));
            sequence_f0_90_byte_range_90_91_sfx = simd_and(r10000_10ffff_tmp88, byte_range_80_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_byte_range_90_91_sfx);
            byte_92 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp35);
            sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
            byte_range_80_9d = r10000_10ffff_tmp78;
            carryQ.cq[210] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(210), r10000_10ffff_tmp89));
            sequence_f0_90_92_byte_range_80_9d = simd_and(r10000_10ffff_tmp89, byte_range_80_9d);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_92_byte_range_80_9d);
            r10000_10ffff_tmp90 = simd_andc(r10000_10ffff_tmp43, tmp14);
            byte_94 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp90);
            sequence_f0_90_94 = simd_and(sequence_f0_90_adv, byte_94);
            r10000_10ffff_tmp91 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp92 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp91);
            byte_range_80_a7 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp92);
            carryQ.cq[211] = carryout2carry(pablo_blk_Advance(sequence_f0_90_94, carryQ.get_carry_in(211), r10000_10ffff_tmp93));
            sequence_f0_90_94_byte_range_80_a7 = simd_and(r10000_10ffff_tmp93, byte_range_80_a7);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_94_byte_range_80_a7);
            byte_95 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp44);
            sequence_f0_90_95 = simd_and(sequence_f0_90_adv, byte_95);
            r10000_10ffff_tmp94 = simd_or(basis_bits.bit_3, tmp13);
            r10000_10ffff_tmp95 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp94);
            byte_range_80_a3 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp95);
            carryQ.cq[212] = carryout2carry(pablo_blk_Advance(sequence_f0_90_95, carryQ.get_carry_in(212), r10000_10ffff_tmp96));
            sequence_f0_90_95_byte_range_80_a3 = simd_and(r10000_10ffff_tmp96, byte_range_80_a3);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_95_byte_range_80_a3);
            r10000_10ffff_tmp97 = simd_andc(r10000_10ffff_tmp54, tmp14);
            byte_98 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp97);
            sequence_f0_90_98 = simd_and(sequence_f0_90_adv, byte_98);
            carryQ.cq[213] = carryout2carry(pablo_blk_Advance(sequence_f0_90_98, carryQ.get_carry_in(213), r10000_10ffff_tmp98));
            sequence_f0_90_98_byte_range_80_bf = simd_and(r10000_10ffff_tmp98, byte_range_80_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_98_byte_range_80_bf);
            byte_9c = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp67);
            sequence_f0_90_9c = simd_and(sequence_f0_90_adv, byte_9c);
            r10000_10ffff_tmp99 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp9);
            r10000_10ffff_tmp100 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp99);
            byte_range_80_b6 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp100);
            carryQ.cq[214] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9c, carryQ.get_carry_in(214), r10000_10ffff_tmp101));
            sequence_f0_90_9c_byte_range_80_b6 = simd_and(r10000_10ffff_tmp101, byte_range_80_b6);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_9c_byte_range_80_b6);
            byte_9d = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp52);
            sequence_f0_90_9d = simd_and(sequence_f0_90_adv, byte_9d);
            r10000_10ffff_tmp102 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp29);
            r10000_10ffff_tmp103 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp102);
            byte_range_80_95 = simd_andc(r10000_10ffff_tmp56, r10000_10ffff_tmp103);
            carryQ.cq[215] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9d, carryQ.get_carry_in(215), r10000_10ffff_tmp104));
            sequence_f0_90_9d_byte_range_80_95 = simd_and(r10000_10ffff_tmp104, byte_range_80_95);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_9d_byte_range_80_95);
            byte_a0 = r10000_10ffff_tmp65;
            sequence_f0_90_a0 = simd_and(sequence_f0_90_adv, byte_a0);
            r10000_10ffff_tmp105 = simd_andc(r10000_10ffff_tmp38, basis_bits.bit_4);
            byte_range_80_85 = simd_andc(r10000_10ffff_tmp105, r10000_10ffff_tmp29);
            carryQ.cq[216] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a0, carryQ.get_carry_in(216), r10000_10ffff_tmp106));
            sequence_f0_90_a0_byte_range_80_85 = simd_and(r10000_10ffff_tmp106, byte_range_80_85);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_a0_byte_range_80_85);
            byte_a1 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp28);
            sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
            carryQ.cq[217] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(217), r10000_10ffff_tmp107));
            sequence_f0_90_a1_byte_range_80_95 = simd_and(r10000_10ffff_tmp107, byte_range_80_95);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_a1_byte_range_80_95);
            byte_a2 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp35);
            sequence_f0_90_a2 = simd_and(sequence_f0_90_adv, byte_a2);
            r10000_10ffff_tmp108 = simd_and(basis_bits.bit_3, tmp22);
            byte_range_80_9e = simd_andc(r10000_10ffff_tmp56, r10000_10ffff_tmp108);
            carryQ.cq[218] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a2, carryQ.get_carry_in(218), r10000_10ffff_tmp109));
            sequence_f0_90_a2_byte_range_80_9e = simd_and(r10000_10ffff_tmp109, byte_range_80_9e);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_a2_byte_range_80_9e);
            byte_a4 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp90);
            sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
            carryQ.cq[219] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(219), r10000_10ffff_tmp110));
            sequence_f0_90_a4_byte_range_80_95 = simd_and(r10000_10ffff_tmp110, byte_range_80_95);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_a4_byte_range_80_95);
            r10000_10ffff_tmp111 = simd_and(r10000_10ffff_tmp43, r10000_10ffff_tmp34);
            byte_a6 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp111);
            sequence_f0_90_a6 = simd_and(sequence_f0_90_adv, byte_a6);
            r10000_10ffff_tmp112 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp113 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp112);
            byte_range_80_b7 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp113);
            carryQ.cq[220] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a6, carryQ.get_carry_in(220), r10000_10ffff_tmp114));
            sequence_f0_90_a6_byte_range_80_b7 = simd_and(r10000_10ffff_tmp114, byte_range_80_b7);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_a6_byte_range_80_b7);
            byte_a8 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp97);
            sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
            byte_range_80_83 = simd_andc(r10000_10ffff_tmp38, tmp13);
            carryQ.cq[221] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(221), r10000_10ffff_tmp115));
            sequence_f0_90_a8_byte_range_80_83 = simd_and(r10000_10ffff_tmp115, byte_range_80_83);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_a8_byte_range_80_83);
            r10000_10ffff_tmp116 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp27);
            byte_a9 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp116);
            sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
            byte_range_a0_bc = simd_andc(r10000_10ffff_tmp59, r10000_10ffff_tmp57);
            carryQ.cq[222] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(222), r10000_10ffff_tmp117));
            sequence_f0_90_a9_byte_range_a0_bc = simd_and(r10000_10ffff_tmp117, byte_range_a0_bc);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_a9_byte_range_a0_bc);
            byte_aa = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp55);
            sequence_f0_90_aa = simd_and(sequence_f0_90_adv, byte_aa);
            byte_range_80_9c = r10000_10ffff_tmp58;
            carryQ.cq[223] = carryout2carry(pablo_blk_Advance(sequence_f0_90_aa, carryQ.get_carry_in(223), r10000_10ffff_tmp118));
            sequence_f0_90_aa_byte_range_80_9c = simd_and(r10000_10ffff_tmp118, byte_range_80_9c);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_aa_byte_range_80_9c);
            byte_ab = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp61);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            byte_range_80_87 = r10000_10ffff_tmp105;
            carryQ.cq[224] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(224), r10000_10ffff_tmp119));
            sequence_f0_90_ab_byte_range_80_87 = simd_and(r10000_10ffff_tmp119, byte_range_80_87);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_ab_byte_range_80_87);
            byte_ac = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp67);
            sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
            r10000_10ffff_tmp120 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp103);
            byte_range_80_b5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp120);
            carryQ.cq[225] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(225), r10000_10ffff_tmp121));
            sequence_f0_90_ac_byte_range_80_b5 = simd_and(r10000_10ffff_tmp121, byte_range_80_b5);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_ac_byte_range_80_b5);
            byte_ad = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp52);
            sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
            carryQ.cq[226] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(226), r10000_10ffff_tmp122));
            sequence_f0_90_ad_byte_range_80_95 = simd_and(r10000_10ffff_tmp122, byte_range_80_95);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_ad_byte_range_80_95);
            byte_ae = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp75);
            sequence_f0_90_ae = simd_and(sequence_f0_90_adv, byte_ae);
            r10000_10ffff_tmp123 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp87);
            byte_range_80_91 = simd_andc(r10000_10ffff_tmp56, r10000_10ffff_tmp123);
            carryQ.cq[227] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(227), r10000_10ffff_tmp124));
            sequence_f0_90_ae_byte_range_80_91 = simd_and(r10000_10ffff_tmp124, byte_range_80_91);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_ae_byte_range_80_91);
            byte_b0 = simd_andc(r10000_10ffff_tmp51, tmp15);
            sequence_f0_90_b0 = simd_and(sequence_f0_90_adv, byte_b0);
            carryQ.cq[228] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b0, carryQ.get_carry_in(228), r10000_10ffff_tmp125));
            sequence_f0_90_b0_byte_range_80_bf = simd_and(r10000_10ffff_tmp125, byte_range_80_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_b0_byte_range_80_bf);
            byte_b1 = simd_and(r10000_10ffff_tmp51, r10000_10ffff_tmp28);
            sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
            r10000_10ffff_tmp126 = simd_or(basis_bits.bit_5, tmp14);
            r10000_10ffff_tmp127 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp126);
            byte_range_80_88 = simd_andc(r10000_10ffff_tmp38, r10000_10ffff_tmp127);
            carryQ.cq[229] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b1, carryQ.get_carry_in(229), r10000_10ffff_tmp128));
            sequence_f0_90_b1_byte_range_80_88 = simd_and(r10000_10ffff_tmp128, byte_range_80_88);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_90_b1_byte_range_80_88);
            byte_91 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp28);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            carryQ.cq[230] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(230), r10000_10ffff_tmp129));
            sequence_f0_91_80 = simd_and(r10000_10ffff_tmp129, byte_80);
            sequence_f0_91_adv = r10000_10ffff_tmp129;
            carryQ.cq[231] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(231), sequence_f0_91_80_adv));
            r10000_10ffff_tmp130 = simd_and(sequence_f0_91_80_adv, byte_range_80_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp130);
            sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
            r10000_10ffff_tmp131 = simd_andc(byte_range_80_87, r10000_10ffff_tmp8);
            r10000_10ffff_tmp132 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp102);
            r10000_10ffff_tmp133 = simd_or(r10000_10ffff_tmp131, r10000_10ffff_tmp132);
            r10000_10ffff_tmp134 = simd_and(r10000_10ffff_tmp51, tmp22);
            cc_range_11040_1107f_4 = simd_or(r10000_10ffff_tmp133, r10000_10ffff_tmp134);
            carryQ.cq[232] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(232), sequence_f0_91_81_adv));
            r10000_10ffff_tmp135 = simd_and(sequence_f0_91_81_adv, cc_range_11040_1107f_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp135);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            carryQ.cq[233] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(233), sequence_f0_91_82_adv));
            r10000_10ffff_tmp136 = simd_and(sequence_f0_91_82_adv, byte_range_80_ba);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp136);
            sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
            r10000_10ffff_tmp137 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp127);
            r10000_10ffff_tmp138 = simd_not(r10000_10ffff_tmp137);
            r10000_10ffff_tmp139 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp138), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp140 = simd_and(byte_range_80_bf, r10000_10ffff_tmp139);
            r10000_10ffff_tmp141 = simd_andc(r10000_10ffff_tmp51, tmp5);
            cc_range_110d0_110f0_4 = simd_or(r10000_10ffff_tmp140, r10000_10ffff_tmp141);
            carryQ.cq[234] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(234), sequence_f0_91_83_adv));
            r10000_10ffff_tmp142 = simd_and(sequence_f0_91_83_adv, cc_range_110d0_110f0_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp142);
            byte_84 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp90);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            r10000_10ffff_tmp143 = simd_and(r10000_10ffff_tmp51, r10000_10ffff_tmp102);
            cc_range_11100_11136_4 = simd_or(byte_range_80_b4, r10000_10ffff_tmp143);
            carryQ.cq[235] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(235), sequence_f0_91_84_adv));
            r10000_10ffff_tmp144 = simd_and(sequence_f0_91_84_adv, cc_range_11100_11136_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp144);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            r10000_10ffff_tmp145 = simd_and(basis_bits.bit_3, tmp13);
            r10000_10ffff_tmp146 = simd_not(r10000_10ffff_tmp145);
            r10000_10ffff_tmp147 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp146), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp148 = simd_and(byte_range_80_bf, r10000_10ffff_tmp147);
            r10000_10ffff_tmp149 = simd_and(r10000_10ffff_tmp51, r10000_10ffff_tmp111);
            cc_range_11150_11176_4 = simd_or(r10000_10ffff_tmp148, r10000_10ffff_tmp149);
            carryQ.cq[236] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(236), sequence_f0_91_85_adv));
            r10000_10ffff_tmp150 = simd_and(sequence_f0_91_85_adv, cc_range_11150_11176_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp150);
            byte_86 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp111);
            sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
            carryQ.cq[237] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(237), sequence_f0_91_86_adv));
            r10000_10ffff_tmp151 = simd_and(sequence_f0_91_86_adv, byte_range_80_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp151);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            r10000_10ffff_tmp152 = simd_andc(byte_range_80_87, r10000_10ffff_tmp45);
            r10000_10ffff_tmp153 = simd_andc(r10000_10ffff_tmp37, tmp11);
            cc_range_111c0_111d0_4 = simd_or(r10000_10ffff_tmp152, r10000_10ffff_tmp153);
            carryQ.cq[238] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(238), sequence_f0_91_87_adv));
            r10000_10ffff_tmp154 = simd_and(sequence_f0_91_87_adv, cc_range_111c0_111d0_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp154);
            byte_88 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp97);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            r10000_10ffff_tmp155 = simd_not(r10000_10ffff_tmp112);
            r10000_10ffff_tmp156 = simd_or(tmp13, tmp9);
            r10000_10ffff_tmp157 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp156);
            r10000_10ffff_tmp158 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp155), simd_andc(r10000_10ffff_tmp157, basis_bits.bit_2));
            r10000_10ffff_tmp159 = simd_and(byte_range_80_bf, r10000_10ffff_tmp158);
            cc_range_11200_11213_4 = simd_or(byte_range_80_91, r10000_10ffff_tmp159);
            carryQ.cq[239] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(239), sequence_f0_91_88_adv));
            r10000_10ffff_tmp160 = simd_and(sequence_f0_91_88_adv, cc_range_11200_11213_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp160);
            sequence_f0_91_8a = simd_and(sequence_f0_91_adv, byte_8a);
            byte_range_b0_bf = r10000_10ffff_tmp51;
            carryQ.cq[240] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8a, carryQ.get_carry_in(240), sequence_f0_91_8a_adv));
            r10000_10ffff_tmp161 = simd_and(sequence_f0_91_8a_adv, byte_range_b0_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp161);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            r10000_10ffff_tmp162 = simd_or(basis_bits.bit_3, tmp11);
            r10000_10ffff_tmp163 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp162);
            r10000_10ffff_tmp164 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp163);
            r10000_10ffff_tmp165 = simd_andc(byte_range_b0_bf, tmp5);
            cc_range_112c0_112f0_4 = simd_or(r10000_10ffff_tmp164, r10000_10ffff_tmp165);
            carryQ.cq[241] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(241), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp166 = simd_and(sequence_f0_91_8b_adv, cc_range_112c0_112f0_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp166);
            sequence_f0_91_8c = simd_and(sequence_f0_91_adv, byte_8c);
            r10000_10ffff_tmp167 = simd_and(byte_range_80_83, tmp14);
            r10000_10ffff_tmp168 = simd_xor(basis_bits.bit_4, r10000_10ffff_tmp45);
            r10000_10ffff_tmp169 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp168);
            r10000_10ffff_tmp170 = simd_or(r10000_10ffff_tmp167, r10000_10ffff_tmp169);
            r10000_10ffff_tmp171 = simd_not(tmp15);
            r10000_10ffff_tmp172 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp171), simd_andc(tmp22, basis_bits.bit_3));
            r10000_10ffff_tmp173 = simd_and(r10000_10ffff_tmp56, r10000_10ffff_tmp172);
            r10000_10ffff_tmp174 = simd_or(r10000_10ffff_tmp170, r10000_10ffff_tmp173);
            r10000_10ffff_tmp175 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp138), simd_andc(r10000_10ffff_tmp157, basis_bits.bit_2));
            r10000_10ffff_tmp176 = simd_and(byte_range_80_bf, r10000_10ffff_tmp175);
            r10000_10ffff_tmp177 = simd_or(r10000_10ffff_tmp174, r10000_10ffff_tmp176);
            r10000_10ffff_tmp178 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp171), simd_andc(tmp5, basis_bits.bit_3));
            r10000_10ffff_tmp179 = simd_and(r10000_10ffff_tmp59, r10000_10ffff_tmp178);
            r10000_10ffff_tmp180 = simd_or(r10000_10ffff_tmp177, r10000_10ffff_tmp179);
            r10000_10ffff_tmp181 = simd_andc(basis_bits.bit_6, tmp13);
            r10000_10ffff_tmp182 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp181);
            r10000_10ffff_tmp183 = simd_or(r10000_10ffff_tmp180, r10000_10ffff_tmp182);
            r10000_10ffff_tmp184 = simd_not(tmp4);
            r10000_10ffff_tmp185 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp184), simd_andc(r10000_10ffff_tmp45, basis_bits.bit_4));
            r10000_10ffff_tmp186 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp185);
            r10000_10ffff_tmp187 = simd_or(r10000_10ffff_tmp183, r10000_10ffff_tmp186);
            r10000_10ffff_tmp188 = simd_and(byte_range_b0_bf, tmp21);
            cc_range_11301_1133c_4 = simd_or(r10000_10ffff_tmp187, r10000_10ffff_tmp188);
            carryQ.cq[242] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(242), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp189 = simd_and(sequence_f0_91_8c_adv, cc_range_11301_1133c_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp189);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            r10000_10ffff_tmp190 = simd_not(r10000_10ffff_tmp126);
            r10000_10ffff_tmp191 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp190), simd_andc(r10000_10ffff_tmp8, basis_bits.bit_4));
            r10000_10ffff_tmp192 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp191);
            r10000_10ffff_tmp193 = simd_or(r10000_10ffff_tmp152, r10000_10ffff_tmp192);
            r10000_10ffff_tmp194 = simd_and(r10000_10ffff_tmp38, basis_bits.bit_4);
            r10000_10ffff_tmp195 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp83), simd_andc(tmp9, basis_bits.bit_5));
            r10000_10ffff_tmp196 = simd_and(r10000_10ffff_tmp194, r10000_10ffff_tmp195);
            r10000_10ffff_tmp197 = simd_or(r10000_10ffff_tmp193, r10000_10ffff_tmp196);
            r10000_10ffff_tmp198 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp50);
            r10000_10ffff_tmp199 = simd_or(r10000_10ffff_tmp197, r10000_10ffff_tmp198);
            r10000_10ffff_tmp200 = simd_not(r10000_10ffff_tmp94);
            r10000_10ffff_tmp201 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp200), simd_andc(r10000_10ffff_tmp57, basis_bits.bit_2));
            r10000_10ffff_tmp202 = simd_and(byte_range_80_bf, r10000_10ffff_tmp201);
            r10000_10ffff_tmp203 = simd_or(r10000_10ffff_tmp199, r10000_10ffff_tmp202);
            r10000_10ffff_tmp204 = simd_not(r10000_10ffff_tmp45);
            r10000_10ffff_tmp205 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp204), simd_andc(r10000_10ffff_tmp29, basis_bits.bit_4));
            r10000_10ffff_tmp206 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp205);
            r10000_10ffff_tmp207 = simd_or(r10000_10ffff_tmp203, r10000_10ffff_tmp206);
            r10000_10ffff_tmp208 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
            r10000_10ffff_tmp209 = simd_andc(r10000_10ffff_tmp208, r10000_10ffff_tmp45);
            cc_range_11340_11370_4 = simd_or(r10000_10ffff_tmp207, r10000_10ffff_tmp209);
            carryQ.cq[243] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(243), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp210 = simd_and(sequence_f0_91_8d_adv, cc_range_11340_11370_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp210);
            sequence_f0_91_92 = simd_and(sequence_f0_91_adv, byte_92);
            carryQ.cq[244] = carryout2carry(pablo_blk_Advance(sequence_f0_91_92, carryQ.get_carry_in(244), sequence_f0_91_92_adv));
            r10000_10ffff_tmp211 = simd_and(sequence_f0_91_92_adv, byte_range_80_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp211);
            byte_93 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp39);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            r10000_10ffff_tmp212 = simd_andc(byte_range_80_87, r10000_10ffff_tmp29);
            r10000_10ffff_tmp213 = simd_or(r10000_10ffff_tmp212, byte_87);
            r10000_10ffff_tmp214 = simd_andc(r10000_10ffff_tmp37, tmp5);
            cc_range_114c0_114d0_4 = simd_or(r10000_10ffff_tmp213, r10000_10ffff_tmp214);
            carryQ.cq[245] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(245), sequence_f0_91_93_adv));
            r10000_10ffff_tmp215 = simd_and(sequence_f0_91_93_adv, cc_range_114c0_114d0_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp215);
            byte_96 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp111);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            r10000_10ffff_tmp216 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
            cc_range_11580_115b8_4 = simd_or(byte_range_80_b5, r10000_10ffff_tmp216);
            carryQ.cq[246] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(246), sequence_f0_91_96_adv));
            r10000_10ffff_tmp217 = simd_and(sequence_f0_91_96_adv, cc_range_11580_115b8_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp217);
            byte_97 = r10000_10ffff_tmp198;
            sequence_f0_91_97 = simd_and(sequence_f0_91_adv, byte_97);
            carryQ.cq[247] = carryout2carry(pablo_blk_Advance(sequence_f0_91_97, carryQ.get_carry_in(247), sequence_f0_91_97_adv));
            r10000_10ffff_tmp218 = simd_and(sequence_f0_91_97_adv, byte_80);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp218);
            sequence_f0_91_98 = simd_and(sequence_f0_91_adv, byte_98);
            carryQ.cq[248] = carryout2carry(pablo_blk_Advance(sequence_f0_91_98, carryQ.get_carry_in(248), sequence_f0_91_98_adv));
            r10000_10ffff_tmp219 = simd_and(sequence_f0_91_98_adv, byte_range_80_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp219);
            byte_99 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp116);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            r10000_10ffff_tmp220 = simd_andc(tmp15, r10000_10ffff_tmp90);
            r10000_10ffff_tmp221 = simd_andc(r10000_10ffff_tmp38, r10000_10ffff_tmp220);
            cc_range_11640_11650_4 = simd_or(r10000_10ffff_tmp221, r10000_10ffff_tmp214);
            carryQ.cq[249] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(249), sequence_f0_91_99_adv));
            r10000_10ffff_tmp222 = simd_and(sequence_f0_91_99_adv, cc_range_11640_11650_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp222);
            byte_9a = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp55);
            sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
            carryQ.cq[250] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(250), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp223 = simd_and(sequence_f0_91_9a_adv, byte_range_80_b7);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp223);
            byte_9b = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp61);
            sequence_f0_91_9b = simd_and(sequence_f0_91_adv, byte_9b);
            byte_range_80_89 = simd_andc(r10000_10ffff_tmp38, tmp5);
            carryQ.cq[251] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9b, carryQ.get_carry_in(251), sequence_f0_91_9b_adv));
            r10000_10ffff_tmp224 = simd_and(sequence_f0_91_9b_adv, byte_range_80_89);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp224);
            sequence_f0_91_a2 = simd_and(sequence_f0_91_adv, byte_a2);
            byte_range_a0_bf = r10000_10ffff_tmp59;
            carryQ.cq[252] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(252), sequence_f0_91_a2_adv));
            r10000_10ffff_tmp225 = simd_and(sequence_f0_91_a2_adv, byte_range_a0_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp225);
            byte_a3 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp39);
            sequence_f0_91_a3 = simd_and(sequence_f0_91_adv, byte_a3);
            r10000_10ffff_tmp226 = simd_or(basis_bits.bit_3, tmp5);
            r10000_10ffff_tmp227 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp226);
            r10000_10ffff_tmp228 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp227);
            r10000_10ffff_tmp229 = simd_and(byte_range_b0_bf, tmp22);
            cc_range_118c0_118ff_4 = simd_or(r10000_10ffff_tmp228, r10000_10ffff_tmp229);
            carryQ.cq[253] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(253), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp230 = simd_and(sequence_f0_91_a3_adv, cc_range_118c0_118ff_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp230);
            sequence_f0_91_ab = simd_and(sequence_f0_91_adv, byte_ab);
            r10000_10ffff_tmp231 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp127);
            r10000_10ffff_tmp232 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp231);
            byte_range_80_b8 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp232);
            carryQ.cq[254] = carryout2carry(pablo_blk_Advance(sequence_f0_91_ab, carryQ.get_carry_in(254), sequence_f0_91_ab_adv));
            r10000_10ffff_tmp233 = simd_and(sequence_f0_91_ab_adv, byte_range_80_b8);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp233);
            sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
            byte_range_80_8d = simd_andc(r10000_10ffff_tmp38, r10000_10ffff_tmp30);
            carryQ.cq[255] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(255), r10000_10ffff_tmp234));
            sequence_f0_92_byte_range_80_8d = simd_and(r10000_10ffff_tmp234, byte_range_80_8d);
            carryQ.cq[256] = carryout2carry(pablo_blk_Advance(sequence_f0_92_byte_range_80_8d, carryQ.get_carry_in(256), r10000_10ffff_tmp235));
            sequence_f0_92_byte_range_80_8d_sfx = simd_and(r10000_10ffff_tmp235, byte_range_80_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_92_byte_range_80_8d_sfx);
            sequence_f0_92_adv = r10000_10ffff_tmp234;
            sequence_f0_92_8e = simd_and(sequence_f0_92_adv, byte_8e);
            byte_range_80_98 = simd_andc(r10000_10ffff_tmp56, r10000_10ffff_tmp231);
            carryQ.cq[257] = carryout2carry(pablo_blk_Advance(sequence_f0_92_8e, carryQ.get_carry_in(257), r10000_10ffff_tmp236));
            sequence_f0_92_8e_byte_range_80_98 = simd_and(r10000_10ffff_tmp236, byte_range_80_98);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_92_8e_byte_range_80_98);
            sequence_f0_92_90 = simd_and(sequence_f0_92_adv, byte_90);
            carryQ.cq[258] = carryout2carry(pablo_blk_Advance(sequence_f0_92_90, carryQ.get_carry_in(258), r10000_10ffff_tmp237));
            sequence_f0_92_90_byte_range_80_bf = simd_and(r10000_10ffff_tmp237, byte_range_80_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_92_90_byte_range_80_bf);
            sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
            r10000_10ffff_tmp238 = simd_or(basis_bits.bit_3, tmp22);
            r10000_10ffff_tmp239 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp238);
            byte_range_80_ae = simd_andc(byte_range_80_bf, r10000_10ffff_tmp239);
            carryQ.cq[259] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(259), r10000_10ffff_tmp240));
            sequence_f0_92_91_byte_range_80_ae = simd_and(r10000_10ffff_tmp240, byte_range_80_ae);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_92_91_byte_range_80_ae);
            sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
            byte_range_80_8f = r10000_10ffff_tmp38;
            carryQ.cq[260] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(260), r10000_10ffff_tmp241));
            sequence_f0_93_byte_range_80_8f = simd_and(r10000_10ffff_tmp241, byte_range_80_8f);
            carryQ.cq[261] = carryout2carry(pablo_blk_Advance(sequence_f0_93_byte_range_80_8f, carryQ.get_carry_in(261), r10000_10ffff_tmp242));
            sequence_f0_93_byte_range_80_8f_sfx = simd_and(r10000_10ffff_tmp242, byte_range_80_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_93_byte_range_80_8f_sfx);
            sequence_f0_93_adv = r10000_10ffff_tmp241;
            sequence_f0_93_90 = simd_and(sequence_f0_93_adv, byte_90);
            carryQ.cq[262] = carryout2carry(pablo_blk_Advance(sequence_f0_93_90, carryQ.get_carry_in(262), r10000_10ffff_tmp243));
            sequence_f0_93_90_byte_range_80_ae = simd_and(r10000_10ffff_tmp243, byte_range_80_ae);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_93_90_byte_range_80_ae);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            byte_range_a0_a7 = simd_andc(r10000_10ffff_tmp64, basis_bits.bit_4);
            carryQ.cq[263] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(263), r10000_10ffff_tmp244));
            sequence_f0_96_byte_range_a0_a7 = simd_and(r10000_10ffff_tmp244, byte_range_a0_a7);
            carryQ.cq[264] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_a0_a7, carryQ.get_carry_in(264), r10000_10ffff_tmp245));
            sequence_f0_96_byte_range_a0_a7_sfx = simd_and(r10000_10ffff_tmp245, byte_range_80_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_96_byte_range_a0_a7_sfx);
            sequence_f0_96_adv = r10000_10ffff_tmp244;
            sequence_f0_96_a8 = simd_and(sequence_f0_96_adv, byte_a8);
            carryQ.cq[265] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a8, carryQ.get_carry_in(265), r10000_10ffff_tmp246));
            sequence_f0_96_a8_byte_range_80_b8 = simd_and(r10000_10ffff_tmp246, byte_range_80_b8);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_96_a8_byte_range_80_b8);
            sequence_f0_96_a9 = simd_and(sequence_f0_96_adv, byte_a9);
            carryQ.cq[266] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a9, carryQ.get_carry_in(266), r10000_10ffff_tmp247));
            sequence_f0_96_a9_byte_range_80_9e = simd_and(r10000_10ffff_tmp247, byte_range_80_9e);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_96_a9_byte_range_80_9e);
            sequence_f0_96_ab = simd_and(sequence_f0_96_adv, byte_ab);
            r10000_10ffff_tmp248 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp76);
            r10000_10ffff_tmp249 = simd_not(r10000_10ffff_tmp248);
            r10000_10ffff_tmp250 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp249), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ad = simd_and(byte_range_80_bf, r10000_10ffff_tmp250);
            carryQ.cq[267] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(267), r10000_10ffff_tmp251));
            sequence_f0_96_ab_byte_range_90_ad = simd_and(r10000_10ffff_tmp251, byte_range_90_ad);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_96_ab_byte_range_90_ad);
            sequence_f0_96_ac = simd_and(sequence_f0_96_adv, byte_ac);
            carryQ.cq[268] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(268), r10000_10ffff_tmp252));
            sequence_f0_96_ac_byte_range_80_b6 = simd_and(r10000_10ffff_tmp252, byte_range_80_b6);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_96_ac_byte_range_80_b6);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            carryQ.cq[269] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(269), r10000_10ffff_tmp253));
            sequence_f0_96_ad_byte_range_80_83 = simd_and(r10000_10ffff_tmp253, byte_range_80_83);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_96_ad_byte_range_80_83);
            sequence_f0_96_ae = simd_and(sequence_f0_96_adv, byte_ae);
            carryQ.cq[270] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ae, carryQ.get_carry_in(270), r10000_10ffff_tmp254));
            sequence_f0_96_ae_byte_range_80_8f = simd_and(r10000_10ffff_tmp254, byte_range_80_8f);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_96_ae_byte_range_80_8f);
            byte_bc = simd_and(byte_range_b0_bf, r10000_10ffff_tmp67);
            sequence_f0_96_bc = simd_and(sequence_f0_96_adv, byte_bc);
            carryQ.cq[271] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bc, carryQ.get_carry_in(271), r10000_10ffff_tmp255));
            sequence_f0_96_bc_byte_range_80_bf = simd_and(r10000_10ffff_tmp255, byte_range_80_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_96_bc_byte_range_80_bf);
            sequence_f0_96_bd = simd_and(sequence_f0_96_adv, byte_bd);
            r10000_10ffff_tmp256 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
            byte_range_80_84 = simd_andc(r10000_10ffff_tmp256, r10000_10ffff_tmp45);
            carryQ.cq[272] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bd, carryQ.get_carry_in(272), r10000_10ffff_tmp257));
            sequence_f0_96_bd_byte_range_80_84 = simd_and(r10000_10ffff_tmp257, byte_range_80_84);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_96_bd_byte_range_80_84);
            byte_be = simd_and(byte_range_b0_bf, r10000_10ffff_tmp75);
            sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
            byte_range_8f_9f = simd_and(r10000_10ffff_tmp56, r10000_10ffff_tmp238);
            carryQ.cq[273] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(273), r10000_10ffff_tmp258));
            sequence_f0_96_be_byte_range_8f_9f = simd_and(r10000_10ffff_tmp258, byte_range_8f_9f);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_96_be_byte_range_8f_9f);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            carryQ.cq[274] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(274), r10000_10ffff_tmp259));
            sequence_f0_9b_80 = simd_and(r10000_10ffff_tmp259, byte_80);
            sequence_f0_9b_adv = r10000_10ffff_tmp259;
            byte_range_80_81 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp87);
            carryQ.cq[275] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_80, carryQ.get_carry_in(275), sequence_f0_9b_80_adv));
            r10000_10ffff_tmp260 = simd_and(sequence_f0_9b_80_adv, byte_range_80_81);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp260);
            sequence_f0_9b_b0 = simd_and(sequence_f0_9b_adv, byte_b0);
            carryQ.cq[276] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b0, carryQ.get_carry_in(276), sequence_f0_9b_b0_adv));
            r10000_10ffff_tmp261 = simd_and(sequence_f0_9b_b0_adv, byte_range_80_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp261);
            sequence_f0_9b_b1 = simd_and(sequence_f0_9b_adv, byte_b1);
            r10000_10ffff_tmp262 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp45);
            r10000_10ffff_tmp263 = simd_andc(byte_range_b0_bf, r10000_10ffff_tmp262);
            cc_range_1bc40_1bc70_4 = simd_or(r10000_10ffff_tmp164, r10000_10ffff_tmp263);
            carryQ.cq[277] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b1, carryQ.get_carry_in(277), sequence_f0_9b_b1_adv));
            r10000_10ffff_tmp264 = simd_and(sequence_f0_9b_b1_adv, cc_range_1bc40_1bc70_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp264);
            byte_b2 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp35);
            sequence_f0_9b_b2 = simd_and(sequence_f0_9b_adv, byte_b2);
            r10000_10ffff_tmp265 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp127);
            r10000_10ffff_tmp266 = simd_or(r10000_10ffff_tmp265, r10000_10ffff_tmp214);
            r10000_10ffff_tmp267 = simd_and(r10000_10ffff_tmp37, tmp21);
            r10000_10ffff_tmp268 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp269 = simd_and(r10000_10ffff_tmp267, r10000_10ffff_tmp268);
            cc_range_1bc80_1bc9d_4 = simd_or(r10000_10ffff_tmp266, r10000_10ffff_tmp269);
            carryQ.cq[278] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(278), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp270 = simd_and(sequence_f0_9b_b2_adv, cc_range_1bc80_1bc9d_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp270);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[279] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(279), r10000_10ffff_tmp271));
            sequence_f0_9d_85 = simd_and(r10000_10ffff_tmp271, byte_85);
            sequence_f0_9d_adv = r10000_10ffff_tmp271;
            r10000_10ffff_tmp272 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp185);
            r10000_10ffff_tmp273 = simd_not(r10000_10ffff_tmp156);
            r10000_10ffff_tmp274 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp273), simd_andc(r10000_10ffff_tmp12, basis_bits.bit_3));
            r10000_10ffff_tmp275 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp274);
            r10000_10ffff_tmp276 = simd_or(r10000_10ffff_tmp272, r10000_10ffff_tmp275);
            r10000_10ffff_tmp277 = simd_and(r10000_10ffff_tmp216, tmp10);
            cc_range_1d165_1d17b_4 = simd_or(r10000_10ffff_tmp276, r10000_10ffff_tmp277);
            carryQ.cq[280] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(280), sequence_f0_9d_85_adv));
            r10000_10ffff_tmp278 = simd_and(sequence_f0_9d_85_adv, cc_range_1d165_1d17b_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp278);
            sequence_f0_9d_86 = simd_and(sequence_f0_9d_adv, byte_86);
            r10000_10ffff_tmp279 = simd_andc(byte_range_80_8f, tmp13);
            r10000_10ffff_tmp280 = simd_andc(r10000_10ffff_tmp279, tmp9);
            r10000_10ffff_tmp281 = simd_not(basis_bits.bit_5);
            r10000_10ffff_tmp282 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp281), simd_andc(r10000_10ffff_tmp45, basis_bits.bit_4));
            r10000_10ffff_tmp283 = simd_and(byte_range_80_8f, r10000_10ffff_tmp282);
            r10000_10ffff_tmp284 = simd_or(r10000_10ffff_tmp280, r10000_10ffff_tmp283);
            r10000_10ffff_tmp285 = simd_and(r10000_10ffff_tmp64, basis_bits.bit_4);
            r10000_10ffff_tmp286 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp287 = simd_and(r10000_10ffff_tmp285, r10000_10ffff_tmp286);
            cc_range_1d180_1d1aa_4 = simd_or(r10000_10ffff_tmp284, r10000_10ffff_tmp287);
            carryQ.cq[281] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_86, carryQ.get_carry_in(281), sequence_f0_9d_86_adv));
            r10000_10ffff_tmp288 = simd_and(sequence_f0_9d_86_adv, cc_range_1d180_1d1aa_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp288);
            byte_89 = simd_and(byte_range_80_8f, r10000_10ffff_tmp116);
            sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
            r10000_10ffff_tmp289 = simd_not(tmp14);
            r10000_10ffff_tmp290 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp289), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
            byte_range_82_84 = simd_and(r10000_10ffff_tmp256, r10000_10ffff_tmp290);
            carryQ.cq[282] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_89, carryQ.get_carry_in(282), sequence_f0_9d_89_adv));
            r10000_10ffff_tmp291 = simd_and(sequence_f0_9d_89_adv, byte_range_82_84);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp291);
            sequence_f0_9d_90 = simd_and(sequence_f0_9d_adv, byte_90);
            carryQ.cq[283] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(283), sequence_f0_9d_90_adv));
            r10000_10ffff_tmp292 = simd_and(sequence_f0_9d_90_adv, byte_range_80_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp292);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            r10000_10ffff_tmp293 = simd_andc(r10000_10ffff_tmp56, r10000_10ffff_tmp47);
            r10000_10ffff_tmp294 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp103);
            r10000_10ffff_tmp295 = simd_and(byte_range_80_bf, r10000_10ffff_tmp294);
            cc_range_1d440_1d456_4 = simd_or(r10000_10ffff_tmp293, r10000_10ffff_tmp295);
            carryQ.cq[284] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(284), sequence_f0_9d_91_adv));
            r10000_10ffff_tmp296 = simd_and(sequence_f0_9d_91_adv, cc_range_1d440_1d456_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp296);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            r10000_10ffff_tmp297 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp76);
            r10000_10ffff_tmp298 = simd_or(byte_range_80_9c, r10000_10ffff_tmp297);
            r10000_10ffff_tmp299 = simd_or(r10000_10ffff_tmp298, byte_a2);
            r10000_10ffff_tmp300 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp43);
            r10000_10ffff_tmp301 = simd_and(r10000_10ffff_tmp300, r10000_10ffff_tmp268);
            r10000_10ffff_tmp302 = simd_or(r10000_10ffff_tmp299, r10000_10ffff_tmp301);
            r10000_10ffff_tmp303 = simd_xor(basis_bits.bit_5, tmp14);
            r10000_10ffff_tmp304 = simd_and(r10000_10ffff_tmp285, r10000_10ffff_tmp303);
            r10000_10ffff_tmp305 = simd_or(r10000_10ffff_tmp302, r10000_10ffff_tmp304);
            r10000_10ffff_tmp306 = simd_not(tmp5);
            r10000_10ffff_tmp307 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp306), simd_andc(r10000_10ffff_tmp76, basis_bits.bit_3));
            r10000_10ffff_tmp308 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp307);
            r10000_10ffff_tmp309 = simd_or(r10000_10ffff_tmp305, r10000_10ffff_tmp308);
            r10000_10ffff_tmp310 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp61);
            r10000_10ffff_tmp311 = simd_or(r10000_10ffff_tmp309, r10000_10ffff_tmp310);
            r10000_10ffff_tmp312 = simd_and(r10000_10ffff_tmp188, tmp14);
            cc_range_1d480_1d4bd_4 = simd_or(r10000_10ffff_tmp311, r10000_10ffff_tmp312);
            carryQ.cq[285] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(285), sequence_f0_9d_92_adv));
            r10000_10ffff_tmp313 = simd_and(sequence_f0_9d_92_adv, cc_range_1d480_1d4bd_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp313);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            r10000_10ffff_tmp314 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp46);
            r10000_10ffff_tmp315 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp314);
            r10000_10ffff_tmp316 = simd_and(byte_range_80_bf, r10000_10ffff_tmp315);
            cc_range_1d4c0_1d4c5_4 = simd_or(r10000_10ffff_tmp279, r10000_10ffff_tmp316);
            carryQ.cq[286] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(286), sequence_f0_9d_93_adv));
            r10000_10ffff_tmp317 = simd_and(sequence_f0_9d_93_adv, cc_range_1d4c0_1d4c5_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp317);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            r10000_10ffff_tmp318 = simd_andc(r10000_10ffff_tmp256, r10000_10ffff_tmp29);
            r10000_10ffff_tmp319 = simd_not(tmp10);
            r10000_10ffff_tmp320 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp319), simd_andc(r10000_10ffff_tmp8, basis_bits.bit_4));
            r10000_10ffff_tmp321 = simd_and(byte_range_80_8f, r10000_10ffff_tmp320);
            r10000_10ffff_tmp322 = simd_or(r10000_10ffff_tmp318, r10000_10ffff_tmp321);
            r10000_10ffff_tmp323 = simd_not(r10000_10ffff_tmp46);
            r10000_10ffff_tmp324 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp323), simd_andc(r10000_10ffff_tmp12, basis_bits.bit_3));
            r10000_10ffff_tmp325 = simd_and(r10000_10ffff_tmp56, r10000_10ffff_tmp324);
            r10000_10ffff_tmp326 = simd_or(r10000_10ffff_tmp322, r10000_10ffff_tmp325);
            r10000_10ffff_tmp327 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp205);
            r10000_10ffff_tmp328 = simd_or(r10000_10ffff_tmp326, r10000_10ffff_tmp327);
            r10000_10ffff_tmp329 = simd_and(basis_bits.bit_3, tmp5);
            r10000_10ffff_tmp330 = simd_not(r10000_10ffff_tmp329);
            r10000_10ffff_tmp331 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp330), simd_andc(r10000_10ffff_tmp77, basis_bits.bit_2));
            r10000_10ffff_tmp332 = simd_and(byte_range_80_bf, r10000_10ffff_tmp331);
            r10000_10ffff_tmp333 = simd_or(r10000_10ffff_tmp328, r10000_10ffff_tmp332);
            r10000_10ffff_tmp334 = simd_xor(basis_bits.bit_5, tmp9);
            r10000_10ffff_tmp335 = simd_and(r10000_10ffff_tmp216, r10000_10ffff_tmp334);
            cc_range_1d500_1d53b_4 = simd_or(r10000_10ffff_tmp333, r10000_10ffff_tmp335);
            carryQ.cq[287] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(287), sequence_f0_9d_94_adv));
            r10000_10ffff_tmp336 = simd_and(sequence_f0_9d_94_adv, cc_range_1d500_1d53b_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp336);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            r10000_10ffff_tmp337 = simd_and(byte_range_80_8f, r10000_10ffff_tmp111);
            r10000_10ffff_tmp338 = simd_or(byte_range_80_84, r10000_10ffff_tmp337);
            r10000_10ffff_tmp339 = simd_and(r10000_10ffff_tmp56, r10000_10ffff_tmp178);
            r10000_10ffff_tmp340 = simd_or(r10000_10ffff_tmp338, r10000_10ffff_tmp339);
            r10000_10ffff_tmp341 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp123);
            r10000_10ffff_tmp342 = simd_and(byte_range_80_bf, r10000_10ffff_tmp341);
            cc_range_1d540_1d552_4 = simd_or(r10000_10ffff_tmp340, r10000_10ffff_tmp342);
            carryQ.cq[288] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(288), sequence_f0_9d_95_adv));
            r10000_10ffff_tmp343 = simd_and(sequence_f0_9d_95_adv, cc_range_1d540_1d552_4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, r10000_10ffff_tmp343);
            r10000_10ffff_tmp344 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp184), simd_andc(r10000_10ffff_tmp29, basis_bits.bit_4));
            byte_range_96_99 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp344);
            sequence_f0_9d_byte_range_96_99 = simd_and(sequence_f0_9d_adv, byte_range_96_99);
            carryQ.cq[289] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_96_99, carryQ.get_carry_in(289), r10000_10ffff_tmp345));
            sequence_f0_9d_byte_range_96_99_sfx = simd_and(r10000_10ffff_tmp345, byte_range_80_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_9d_byte_range_96_99_sfx);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            r10000_10ffff_tmp346 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp102);
            r10000_10ffff_tmp347 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp346);
            byte_range_80_a5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp347);
            carryQ.cq[290] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(290), r10000_10ffff_tmp348));
            sequence_f0_9d_9a_byte_range_80_a5 = simd_and(r10000_10ffff_tmp348, byte_range_80_a5);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_9d_9a_byte_range_80_a5);
            sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
            carryQ.cq[291] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(291), r10000_10ffff_tmp349));
            sequence_f0_9d_9b_80 = simd_and(r10000_10ffff_tmp349, byte_80);
            sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
            byte_range_80_94 = r10000_10ffff_tmp293;
            carryQ.cq[292] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(292), r10000_10ffff_tmp350));
            sequence_f0_9d_9c_byte_range_80_94 = simd_and(r10000_10ffff_tmp350, byte_range_80_94);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_9d_9c_byte_range_80_94);
            sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
            r10000_10ffff_tmp351 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp8);
            byte_range_80_8e = simd_andc(byte_range_80_8f, r10000_10ffff_tmp351);
            carryQ.cq[293] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(293), r10000_10ffff_tmp352));
            sequence_f0_9d_9d_byte_range_80_8e = simd_and(r10000_10ffff_tmp352, byte_range_80_8e);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_9d_9d_byte_range_80_8e);
            byte_9e = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp75);
            sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
            carryQ.cq[294] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(294), r10000_10ffff_tmp353));
            sequence_f0_9d_9e_byte_range_80_88 = simd_and(r10000_10ffff_tmp353, byte_range_80_88);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_9d_9e_byte_range_80_88);
            byte_9f = simd_and(r10000_10ffff_tmp37, tmp22);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            byte_range_80_82 = r10000_10ffff_tmp280;
            carryQ.cq[295] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(295), r10000_10ffff_tmp354));
            sequence_f0_9d_9f_byte_range_80_82 = simd_and(r10000_10ffff_tmp354, byte_range_80_82);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_9d_9f_byte_range_80_82);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            r10000_10ffff_tmp355 = simd_andc(r10000_10ffff_tmp64, tmp13);
            byte_range_a0_a2 = simd_andc(r10000_10ffff_tmp355, tmp9);
            carryQ.cq[296] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(296), r10000_10ffff_tmp356));
            sequence_f0_9e_byte_range_a0_a2 = simd_and(r10000_10ffff_tmp356, byte_range_a0_a2);
            carryQ.cq[297] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_a0_a2, carryQ.get_carry_in(297), r10000_10ffff_tmp357));
            sequence_f0_9e_byte_range_a0_a2_sfx = simd_and(r10000_10ffff_tmp357, byte_range_80_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_9e_byte_range_a0_a2_sfx);
            sequence_f0_9e_adv = r10000_10ffff_tmp356;
            sequence_f0_9e_a3 = simd_and(sequence_f0_9e_adv, byte_a3);
            carryQ.cq[298] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(298), r10000_10ffff_tmp358));
            sequence_f0_9e_a3_byte_range_80_84 = simd_and(r10000_10ffff_tmp358, byte_range_80_84);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_9e_a3_byte_range_80_84);
            byte_b8 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp97);
            sequence_f0_9e_b8 = simd_and(sequence_f0_9e_adv, byte_b8);
            carryQ.cq[299] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b8, carryQ.get_carry_in(299), r10000_10ffff_tmp359));
            sequence_f0_9e_b8_byte_range_80_83 = simd_and(r10000_10ffff_tmp359, byte_range_80_83);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_9e_b8_byte_range_80_83);
            byte_b9 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp116);
            sequence_f0_9e_b9 = simd_and(sequence_f0_9e_adv, byte_b9);
            carryQ.cq[300] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b9, carryQ.get_carry_in(300), r10000_10ffff_tmp360));
            sequence_f0_9e_b9_82 = simd_and(r10000_10ffff_tmp360, byte_82);
            byte_ba = simd_and(byte_range_b0_bf, r10000_10ffff_tmp55);
            sequence_f0_9e_ba = simd_and(sequence_f0_9e_adv, byte_ba);
            carryQ.cq[301] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_ba, carryQ.get_carry_in(301), r10000_10ffff_tmp361));
            sequence_f0_9e_ba_byte_range_80_89 = simd_and(r10000_10ffff_tmp361, byte_range_80_89);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_9e_ba_byte_range_80_89);
            byte_range_a0_a9 = simd_andc(r10000_10ffff_tmp64, tmp5);
            byte_f0_byte_range_a0_a9 = simd_and(byte_f0_adv, byte_range_a0_a9);
            carryQ.cq[302] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9, carryQ.get_carry_in(302), r10000_10ffff_tmp362));
            byte_f0_byte_range_a0_a9_sfx = simd_and(r10000_10ffff_tmp362, byte_range_80_bf);
            carryQ.cq[303] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9_sfx, carryQ.get_carry_in(303), r10000_10ffff_tmp363));
            byte_f0_byte_range_a0_a9_sfx_sfx = simd_and(r10000_10ffff_tmp363, byte_range_80_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, byte_f0_byte_range_a0_a9_sfx_sfx);
            sequence_f0_aa = simd_and(byte_f0_adv, byte_aa);
            carryQ.cq[304] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(304), sequence_f0_aa_adv));
            sequence_f0_aa_80 = simd_and(sequence_f0_aa_adv, byte_80);
            byte_range_80_96 = simd_andc(r10000_10ffff_tmp56, r10000_10ffff_tmp99);
            carryQ.cq[305] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_80, carryQ.get_carry_in(305), r10000_10ffff_tmp364));
            sequence_f0_aa_80_byte_range_80_96 = simd_and(r10000_10ffff_tmp364, byte_range_80_96);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_aa_80_byte_range_80_96);
            sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
            carryQ.cq[306] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(306), sequence_f0_ab_adv));
            sequence_f0_ab_80 = simd_and(sequence_f0_ab_adv, byte_80);
            carryQ.cq[307] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_80, carryQ.get_carry_in(307), r10000_10ffff_tmp365));
            sequence_f0_ab_80_byte_range_80_b4 = simd_and(r10000_10ffff_tmp365, byte_range_80_b4);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_ab_80_byte_range_80_b4);
            byte_af = simd_and(r10000_10ffff_tmp64, tmp22);
            sequence_f0_af = simd_and(byte_f0_adv, byte_af);
            carryQ.cq[308] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(308), sequence_f0_af_adv));
            sequence_f0_af_a0 = simd_and(sequence_f0_af_adv, byte_a0);
            carryQ.cq[309] = carryout2carry(pablo_blk_Advance(sequence_f0_af_a0, carryQ.get_carry_in(309), r10000_10ffff_tmp366));
            sequence_f0_af_a0_byte_range_80_9d = simd_and(r10000_10ffff_tmp366, byte_range_80_9d);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f0_af_a0_byte_range_80_9d);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp39);
            carryQ.cq[310] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(310), r10000_10ffff_tmp367));
            sequence_f3_a0 = simd_and(r10000_10ffff_tmp367, byte_a0);
            byte_f3_adv = r10000_10ffff_tmp367;
            r10000_10ffff_tmp368 = simd_and(byte_range_80_8f, r10000_10ffff_tmp43);
            byte_range_84_86 = simd_andc(r10000_10ffff_tmp368, tmp9);
            carryQ.cq[311] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(311), r10000_10ffff_tmp369));
            sequence_f3_a0_byte_range_84_86 = simd_and(r10000_10ffff_tmp369, byte_range_84_86);
            carryQ.cq[312] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_84_86, carryQ.get_carry_in(312), r10000_10ffff_tmp370));
            sequence_f3_a0_byte_range_84_86_sfx = simd_and(r10000_10ffff_tmp370, byte_range_80_bf);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f3_a0_byte_range_84_86_sfx);
            sequence_f3_a0_adv = r10000_10ffff_tmp369;
            sequence_f3_a0_87 = simd_and(sequence_f3_a0_adv, byte_87);
            byte_range_80_af = simd_andc(byte_range_80_bf, tmp2);
            carryQ.cq[313] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_87, carryQ.get_carry_in(313), r10000_10ffff_tmp371));
            sequence_f3_a0_87_byte_range_80_af = simd_and(r10000_10ffff_tmp371, byte_range_80_af);
            struct_idc_Y.cc = simd_or(struct_idc_Y.cc, sequence_f3_a0_87_byte_range_80_af);
          }
          else {
            carryQ.CarryDequeueEnqueue(195, 119);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 314);
        }
        carryQ.CarryQ_Adjust(314);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<314, 0> carryQ;
  };

  struct Property_lower_Y {
  Property_lower_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_lower_Y & struct_lower_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10;
		BitBlock byte_range_61_7a, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, byte_c2, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13, r80_7ff_tmp14;
		BitBlock r80_7ff_tmp15, r80_7ff_tmp16, r80_7ff_tmp17, r80_7ff_tmp18;
		BitBlock cc_range_aa_ba_2, byte_c2_adv, r80_7ff_tmp19, r80_7ff_tmp20, byte_c3;
		BitBlock r80_7ff_tmp21, r80_7ff_tmp22, r80_7ff_tmp23, r80_7ff_tmp24;
		BitBlock r80_7ff_tmp25, r80_7ff_tmp26, r80_7ff_tmp27, r80_7ff_tmp28;
		BitBlock r80_7ff_tmp29, r80_7ff_tmp30, cc_range_df_f8_2, byte_c3_adv;
		BitBlock r80_7ff_tmp31, byte_range_c4_cf, r100_3ff_tmp1, byte_range_c4_cb;
		BitBlock r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3, byte_range_c4_c8;
		BitBlock r100_2ff_tmp4, byte_c9, byte_range_80_8f, r100_2ff_tmp5;
		BitBlock r100_2ff_tmp6, r100_2ff_tmp7, r100_24f_tmp1, byte_range_c4_c5;
		BitBlock r100_17f_tmp1, byte_c4, r100_17f_tmp2, r100_17f_tmp3, r100_17f_tmp4;
		BitBlock r100_17f_tmp5, r100_17f_tmp6, r100_17f_tmp7, r100_17f_tmp8;
		BitBlock r100_17f_tmp9, r100_17f_tmp10, r100_17f_tmp11, r100_17f_tmp12;
		BitBlock r100_17f_tmp13, r100_17f_tmp14, r100_17f_tmp15, r100_17f_tmp16;
		BitBlock r100_17f_tmp17, r100_17f_tmp18, r100_17f_tmp19, r100_17f_tmp20;
		BitBlock r100_17f_tmp21, r100_17f_tmp22, r100_17f_tmp23, r100_17f_tmp24;
		BitBlock r100_17f_tmp25, r100_17f_tmp26, r100_17f_tmp27, r100_17f_tmp28;
		BitBlock r100_17f_tmp29, r100_17f_tmp30, r100_17f_tmp31, r100_17f_tmp32;
		BitBlock r100_17f_tmp33, r100_17f_tmp34, r100_17f_tmp35, r100_17f_tmp36;
		BitBlock r100_17f_tmp37, r100_17f_tmp38, r100_17f_tmp39, r100_17f_tmp40;
		BitBlock r100_17f_tmp41, r100_17f_tmp42, r100_17f_tmp43, r100_17f_tmp44;
		BitBlock r100_17f_tmp45, r100_17f_tmp46, r100_17f_tmp47, r100_17f_tmp48;
		BitBlock r100_17f_tmp49, r100_17f_tmp50, r100_17f_tmp51, r100_17f_tmp52;
		BitBlock r100_17f_tmp53, r100_17f_tmp54, r100_17f_tmp55, r100_17f_tmp56;
		BitBlock r100_17f_tmp57, r100_17f_tmp58, r100_17f_tmp59, r100_17f_tmp60;
		BitBlock r100_17f_tmp61, cc_range_101_13e_2, byte_c4_adv, r100_17f_tmp62;
		BitBlock byte_c5, r100_17f_tmp63, r100_17f_tmp64, r100_17f_tmp65;
		BitBlock r100_17f_tmp66, r100_17f_tmp67, r100_17f_tmp68, r100_17f_tmp69;
		BitBlock r100_17f_tmp70, r100_17f_tmp71, r100_17f_tmp72, r100_17f_tmp73;
		BitBlock r100_17f_tmp74, r100_17f_tmp75, r100_17f_tmp76, r100_17f_tmp77;
		BitBlock r100_17f_tmp78, r100_17f_tmp79, r100_17f_tmp80, r100_17f_tmp81;
		BitBlock r100_17f_tmp82, r100_17f_tmp83, r100_17f_tmp84, r100_17f_tmp85;
		BitBlock r100_17f_tmp86, r100_17f_tmp87, r100_17f_tmp88, r100_17f_tmp89;
		BitBlock r100_17f_tmp90, r100_17f_tmp91, r100_17f_tmp92, r100_17f_tmp93;
		BitBlock r100_17f_tmp94, r100_17f_tmp95, r100_17f_tmp96, r100_17f_tmp97;
		BitBlock cc_range_140_17e_2, byte_c5_adv, r100_17f_tmp98, r100_24f_tmp2;
		BitBlock r100_24f_tmp3, byte_range_c6_c8, r100_24f_tmp4, r180_24f_tmp1;
		BitBlock byte_c6, r180_24f_tmp2, r180_24f_tmp3, r180_24f_tmp4, r180_24f_tmp5;
		BitBlock r180_24f_tmp6, r180_24f_tmp7, r180_24f_tmp8, r180_24f_tmp9;
		BitBlock r180_24f_tmp10, r180_24f_tmp11, r180_24f_tmp12, r180_24f_tmp13;
		BitBlock r180_24f_tmp14, r180_24f_tmp15, r180_24f_tmp16, r180_24f_tmp17;
		BitBlock r180_24f_tmp18, r180_24f_tmp19, r180_24f_tmp20, r180_24f_tmp21;
		BitBlock r180_24f_tmp22, r180_24f_tmp23, r180_24f_tmp24, r180_24f_tmp25;
		BitBlock r180_24f_tmp26, r180_24f_tmp27, r180_24f_tmp28, r180_24f_tmp29;
		BitBlock r180_24f_tmp30, r180_24f_tmp31, r180_24f_tmp32, r180_24f_tmp33;
		BitBlock r180_24f_tmp34, r180_24f_tmp35, r180_24f_tmp36, r180_24f_tmp37;
		BitBlock r180_24f_tmp38, r180_24f_tmp39, r180_24f_tmp40, r180_24f_tmp41;
		BitBlock r180_24f_tmp42, r180_24f_tmp43, r180_24f_tmp44, r180_24f_tmp45;
		BitBlock r180_24f_tmp46, r180_24f_tmp47, r180_24f_tmp48, cc_range_180_1bd_2;
		BitBlock byte_c6_adv, r180_24f_tmp49, r180_24f_tmp50, byte_c7, r180_24f_tmp51;
		BitBlock r180_24f_tmp52, r180_24f_tmp53, r180_24f_tmp54, r180_24f_tmp55;
		BitBlock r180_24f_tmp56, r180_24f_tmp57, r180_24f_tmp58, r180_24f_tmp59;
		BitBlock r180_24f_tmp60, r180_24f_tmp61, r180_24f_tmp62, r180_24f_tmp63;
		BitBlock r180_24f_tmp64, r180_24f_tmp65, r180_24f_tmp66, r180_24f_tmp67;
		BitBlock r180_24f_tmp68, r180_24f_tmp69, r180_24f_tmp70, r180_24f_tmp71;
		BitBlock r180_24f_tmp72, r180_24f_tmp73, r180_24f_tmp74, r180_24f_tmp75;
		BitBlock r180_24f_tmp76, r180_24f_tmp77, r180_24f_tmp78, r180_24f_tmp79;
		BitBlock r180_24f_tmp80, r180_24f_tmp81, r180_24f_tmp82, r180_24f_tmp83;
		BitBlock r180_24f_tmp84, r180_24f_tmp85, r180_24f_tmp86, r180_24f_tmp87;
		BitBlock r180_24f_tmp88, r180_24f_tmp89, r180_24f_tmp90, r180_24f_tmp91;
		BitBlock r180_24f_tmp92, r180_24f_tmp93, r180_24f_tmp94, r180_24f_tmp95;
		BitBlock r180_24f_tmp96, cc_range_1c6_1ff_2, byte_c7_adv, r180_24f_tmp97;
		BitBlock byte_c8, r180_24f_tmp98, r180_24f_tmp99, r180_24f_tmp100;
		BitBlock r180_24f_tmp101, r180_24f_tmp102, r180_24f_tmp103, r180_24f_tmp104;
		BitBlock r180_24f_tmp105, r180_24f_tmp106, r180_24f_tmp107, r180_24f_tmp108;
		BitBlock r180_24f_tmp109, r180_24f_tmp110, r180_24f_tmp111, r180_24f_tmp112;
		BitBlock r180_24f_tmp113, r180_24f_tmp114, r180_24f_tmp115, r180_24f_tmp116;
		BitBlock r180_24f_tmp117, r180_24f_tmp118, r180_24f_tmp119, r180_24f_tmp120;
		BitBlock r180_24f_tmp121, r180_24f_tmp122, r180_24f_tmp123, r180_24f_tmp124;
		BitBlock r180_24f_tmp125, r180_24f_tmp126, r180_24f_tmp127, r180_24f_tmp128;
		BitBlock r180_24f_tmp129, r180_24f_tmp130, r180_24f_tmp131, r180_24f_tmp132;
		BitBlock r180_24f_tmp133, r180_24f_tmp134, r180_24f_tmp135, r180_24f_tmp136;
		BitBlock r180_24f_tmp137, cc_range_201_23f_2, byte_c8_adv, r180_24f_tmp138;
		BitBlock r180_24f_tmp139, r180_24f_tmp140, r180_24f_tmp141, r180_24f_tmp142;
		BitBlock r180_24f_tmp143, r180_24f_tmp144, cc_range_240_24f_2, byte_c9_adv;
		BitBlock r180_24f_tmp145, byte_range_90_bf, r100_2ff_tmp8, byte_ca;
		BitBlock byte_range_80_af, r100_2ff_tmp9, r100_2ff_tmp10, r100_2ff_tmp11;
		BitBlock r250_2af_tmp1, r250_2af_tmp2, r250_2af_tmp3, r250_2af_tmp4;
		BitBlock r250_2af_tmp5, r250_2af_tmp6, r250_2af_tmp7, r250_2af_tmp8;
		BitBlock r250_2af_tmp9, r250_2af_tmp10, cc_range_280_295_2, byte_ca_adv;
		BitBlock r250_2af_tmp11, byte_range_b0_bf, r100_2ff_tmp12, r100_2ff_tmp13;
		BitBlock byte_cb, r100_2ff_tmp14, r2b0_2ff_tmp1, byte_range_b0_b8;
		BitBlock r2b0_2ff_tmp2, r2b0_2ff_tmp3, r2b0_2ff_tmp4, r2b0_2ff_tmp5;
		BitBlock r2b0_2ff_tmp6, r2b0_2ff_tmp7, cc_range_2c0_2e0_2, byte_cb_adv;
		BitBlock r2b0_2ff_tmp8, r100_3ff_tmp2, byte_cc, r100_3ff_tmp3, byte_cd;
		BitBlock r100_3ff_tmp4, r100_3ff_tmp5, r100_3ff_tmp6, r300_36f_tmp1, byte_85;
		BitBlock byte_cd_adv, r300_36f_tmp2, r100_3ff_tmp7, r100_3ff_tmp8;
		BitBlock byte_range_ce_cf, r100_3ff_tmp9, r370_3ff_tmp1, r370_3ff_tmp2;
		BitBlock r370_3ff_tmp3, r370_3ff_tmp4, r370_3ff_tmp5, r370_3ff_tmp6;
		BitBlock r370_3ff_tmp7, cc_range_371_37a_2, r370_3ff_tmp8, r370_3ff_tmp9;
		BitBlock byte_ce, r370_3ff_tmp10, r370_3ff_tmp11, r370_3ff_tmp12;
		BitBlock r370_3ff_tmp13, r370_3ff_tmp14, r370_3ff_tmp15, cc_range_390_3ac_2;
		BitBlock byte_ce_adv, r370_3ff_tmp16, byte_cf, r370_3ff_tmp17, r370_3ff_tmp18;
		BitBlock r370_3ff_tmp19, r370_3ff_tmp20, r370_3ff_tmp21, r370_3ff_tmp22;
		BitBlock r370_3ff_tmp23, r370_3ff_tmp24, r370_3ff_tmp25, r370_3ff_tmp26;
		BitBlock r370_3ff_tmp27, r370_3ff_tmp28, r370_3ff_tmp29, r370_3ff_tmp30;
		BitBlock r370_3ff_tmp31, r370_3ff_tmp32, r370_3ff_tmp33, r370_3ff_tmp34;
		BitBlock r370_3ff_tmp35, r370_3ff_tmp36, r370_3ff_tmp37, r370_3ff_tmp38;
		BitBlock r370_3ff_tmp39, r370_3ff_tmp40, r370_3ff_tmp41, r370_3ff_tmp42;
		BitBlock r370_3ff_tmp43, r370_3ff_tmp44, r370_3ff_tmp45, r370_3ff_tmp46;
		BitBlock r370_3ff_tmp47, r370_3ff_tmp48, r370_3ff_tmp49, r370_3ff_tmp50;
		BitBlock r370_3ff_tmp51, r370_3ff_tmp52, r370_3ff_tmp53, r370_3ff_tmp54;
		BitBlock r370_3ff_tmp55, r370_3ff_tmp56, r370_3ff_tmp57, r370_3ff_tmp58;
		BitBlock r370_3ff_tmp59, r370_3ff_tmp60, r370_3ff_tmp61, r370_3ff_tmp62;
		BitBlock cc_range_3c0_3fb_2, byte_cf_adv, r370_3ff_tmp63, r80_7ff_tmp32;
		BitBlock r80_7ff_tmp33, byte_range_d0_d7, byte_range_d0_d3, byte_d0;
		BitBlock byte_d0_adv, r400_4ff_tmp1, r400_4ff_tmp2, byte_d1, r400_4ff_tmp3;
		BitBlock r400_4ff_tmp4, r400_4ff_tmp5, r400_4ff_tmp6, r400_4ff_tmp7;
		BitBlock r400_4ff_tmp8, r400_4ff_tmp9, r400_4ff_tmp10, r400_4ff_tmp11;
		BitBlock r400_4ff_tmp12, r400_4ff_tmp13, r400_4ff_tmp14, r400_4ff_tmp15;
		BitBlock r400_4ff_tmp16, r400_4ff_tmp17, r400_4ff_tmp18, r400_4ff_tmp19;
		BitBlock r400_4ff_tmp20, r400_4ff_tmp21, r400_4ff_tmp22, r400_4ff_tmp23;
		BitBlock r400_4ff_tmp24, r400_4ff_tmp25, r400_4ff_tmp26, r400_4ff_tmp27;
		BitBlock r400_4ff_tmp28, r400_4ff_tmp29, r400_4ff_tmp30, r400_4ff_tmp31;
		BitBlock r400_4ff_tmp32, r400_4ff_tmp33, r400_4ff_tmp34, r400_4ff_tmp35;
		BitBlock r400_4ff_tmp36, r400_4ff_tmp37, r400_4ff_tmp38, cc_range_440_47f_2;
		BitBlock byte_d1_adv, r400_4ff_tmp39, byte_d2, r400_4ff_tmp40, r400_4ff_tmp41;
		BitBlock r400_4ff_tmp42, r400_4ff_tmp43, r400_4ff_tmp44, r400_4ff_tmp45;
		BitBlock r400_4ff_tmp46, r400_4ff_tmp47, r400_4ff_tmp48, r400_4ff_tmp49;
		BitBlock r400_4ff_tmp50, r400_4ff_tmp51, r400_4ff_tmp52, r400_4ff_tmp53;
		BitBlock r400_4ff_tmp54, r400_4ff_tmp55, r400_4ff_tmp56, r400_4ff_tmp57;
		BitBlock r400_4ff_tmp58, r400_4ff_tmp59, r400_4ff_tmp60, r400_4ff_tmp61;
		BitBlock r400_4ff_tmp62, r400_4ff_tmp63, r400_4ff_tmp64, r400_4ff_tmp65;
		BitBlock r400_4ff_tmp66, r400_4ff_tmp67, r400_4ff_tmp68, r400_4ff_tmp69;
		BitBlock r400_4ff_tmp70, r400_4ff_tmp71, r400_4ff_tmp72, r400_4ff_tmp73;
		BitBlock r400_4ff_tmp74, r400_4ff_tmp75, r400_4ff_tmp76, cc_range_481_4bf_2;
		BitBlock byte_d2_adv, r400_4ff_tmp77, byte_d3, r400_4ff_tmp78, r400_4ff_tmp79;
		BitBlock r400_4ff_tmp80, r400_4ff_tmp81, r400_4ff_tmp82, r400_4ff_tmp83;
		BitBlock r400_4ff_tmp84, r400_4ff_tmp85, r400_4ff_tmp86, r400_4ff_tmp87;
		BitBlock r400_4ff_tmp88, r400_4ff_tmp89, r400_4ff_tmp90, r400_4ff_tmp91;
		BitBlock r400_4ff_tmp92, r400_4ff_tmp93, r400_4ff_tmp94, r400_4ff_tmp95;
		BitBlock r400_4ff_tmp96, r400_4ff_tmp97, r400_4ff_tmp98, r400_4ff_tmp99;
		BitBlock r400_4ff_tmp100, r400_4ff_tmp101, r400_4ff_tmp102, r400_4ff_tmp103;
		BitBlock r400_4ff_tmp104, r400_4ff_tmp105, r400_4ff_tmp106, r400_4ff_tmp107;
		BitBlock r400_4ff_tmp108, r400_4ff_tmp109, r400_4ff_tmp110, r400_4ff_tmp111;
		BitBlock r400_4ff_tmp112, cc_range_4c2_4ff_2, byte_d3_adv, r400_4ff_tmp113;
		BitBlock r400_5ff_tmp1, byte_range_d4_d5, r400_5ff_tmp2, byte_d6;
		BitBlock r400_5ff_tmp3, r400_5ff_tmp4, r400_5ff_tmp5, r500_58f_tmp1, byte_d4;
		BitBlock r500_58f_tmp2, r500_58f_tmp3, cc_range_501_52f_2, byte_d4_adv;
		BitBlock r500_52f_tmp1, r500_58f_tmp4, byte_d5, r500_58f_tmp5, r500_58f_tmp6;
		BitBlock r530_58f_tmp1, r530_58f_tmp2, byte_range_a1_bf, byte_d5_adv;
		BitBlock r530_58f_tmp3, byte_range_80_87, byte_d6_adv, r530_58f_tmp4;
		BitBlock r80_10ffff_tmp1, byte_range_e0_ef, byte_range_e0_e3, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_e4, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, byte_range_80_b7, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock r800_ffff_tmp8, r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1;
		BitBlock r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2;
		BitBlock r1000_1fff_tmp3, byte_range_b4_b6, r1000_1fff_tmp4;
		BitBlock byte_e1_byte_range_b4_b6, byte_range_80_bf, r1000_1fff_tmp5;
		BitBlock byte_e1_byte_range_b4_b6_sfx, r1000_1fff_tmp6, r1000_1fff_tmp7;
		BitBlock r1000_1fff_tmp8, byte_b8, byte_e1_adv, sequence_e1_b8;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, byte_81, r1000_1fff_tmp11;
		BitBlock sequence_e1_b8_81, r1000_1fff_tmp12, byte_b9, sequence_e1_b9;
		BitBlock r1000_1fff_tmp13, sequence_e1_b9_81, r1000_1fff_tmp14;
		BitBlock r1000_1fff_tmp15, byte_ba, sequence_e1_ba, r1000_1fff_tmp16;
		BitBlock sequence_e1_ba_81, r1000_1fff_tmp17, byte_bb, sequence_e1_bb;
		BitBlock r1000_1fff_tmp18, sequence_e1_bb_81, r1000_1fff_tmp19;
		BitBlock r1000_1fff_tmp20, byte_bc, sequence_e1_bc, r1000_1fff_tmp21;
		BitBlock sequence_e1_bc_byte_range_80_87, r1000_1fff_tmp22, byte_bd;
		BitBlock sequence_e1_bd, r1000_1fff_tmp23, byte_range_80_85, r1000_1fff_tmp24;
		BitBlock sequence_e1_bd_byte_range_80_85, r1000_1fff_tmp25, byte_be;
		BitBlock sequence_e1_be, r1000_1fff_tmp26, sequence_e1_be_byte_range_80_87;
		BitBlock r1000_1fff_tmp27, byte_bf, sequence_e1_bf, r1000_1fff_tmp28;
		BitBlock r1000_1fff_tmp29, byte_range_82_84, r1000_1fff_tmp30;
		BitBlock sequence_e1_bf_byte_range_82_84, r800_4dff_tmp2, byte_range_e2_e3;
		BitBlock r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2;
		BitBlock r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3, r2000_2fff_tmp4;
		BitBlock r2000_2fff_tmp5, sequence_e2_81, byte_e2_adv, r2000_2fff_tmp6;
		BitBlock r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9, r2000_2fff_tmp10;
		BitBlock cc_range_2071_207f_3, sequence_e2_81_adv, r2000_2fff_tmp11, byte_82;
		BitBlock sequence_e2_82, r2000_2fff_tmp12, r2000_2fff_tmp13, r2000_2fff_tmp14;
		BitBlock r2000_2fff_tmp15, byte_range_90_9c, sequence_e2_82_adv;
		BitBlock r2000_2fff_tmp16, byte_84, sequence_e2_84, r2000_2fff_tmp17;
		BitBlock r2000_2fff_tmp18, r2000_2fff_tmp19, r2000_2fff_tmp20;
		BitBlock r2000_2fff_tmp21, r2000_2fff_tmp22, r2000_2fff_tmp23;
		BitBlock r2000_2fff_tmp24, r2000_2fff_tmp25, r2000_2fff_tmp26;
		BitBlock r2000_2fff_tmp27, r2000_2fff_tmp28, r2000_2fff_tmp29;
		BitBlock r2000_2fff_tmp30, r2000_2fff_tmp31, r2000_2fff_tmp32;
		BitBlock r2000_2fff_tmp33, r2000_2fff_tmp34, cc_range_210a_213c_3;
		BitBlock sequence_e2_84_adv, r2000_2fff_tmp35, r2000_2fff_tmp36;
		BitBlock sequence_e2_85, r2000_2fff_tmp37, r2000_2fff_tmp38, r2000_2fff_tmp39;
		BitBlock r2000_2fff_tmp40, r2000_2fff_tmp41, r2000_2fff_tmp42;
		BitBlock r2000_2fff_tmp43, cc_range_2146_2170_3, sequence_e2_85_adv;
		BitBlock r2000_2fff_tmp44, r2000_2fff_tmp45, byte_86, sequence_e2_86;
		BitBlock sequence_e2_86_adv, r2000_2fff_tmp46, byte_93, sequence_e2_93;
		BitBlock r2000_2fff_tmp47, r2000_2fff_tmp48, r2000_2fff_tmp49;
		BitBlock r2000_2fff_tmp50, byte_range_90_a9, sequence_e2_93_adv;
		BitBlock r2000_2fff_tmp51, byte_b0, sequence_e2_b0, sequence_e2_b0_adv;
		BitBlock r2000_2fff_tmp52, byte_b1, sequence_e2_b1, r2000_2fff_tmp53;
		BitBlock r2000_2fff_tmp54, r2000_2fff_tmp55, r2000_2fff_tmp56;
		BitBlock r2000_2fff_tmp57, r2000_2fff_tmp58, r2000_2fff_tmp59;
		BitBlock r2000_2fff_tmp60, r2000_2fff_tmp61, r2000_2fff_tmp62;
		BitBlock r2000_2fff_tmp63, r2000_2fff_tmp64, r2000_2fff_tmp65;
		BitBlock r2000_2fff_tmp66, r2000_2fff_tmp67, r2000_2fff_tmp68;
		BitBlock r2000_2fff_tmp69, r2000_2fff_tmp70, r2000_2fff_tmp71;
		BitBlock r2000_2fff_tmp72, r2000_2fff_tmp73, r2000_2fff_tmp74;
		BitBlock r2000_2fff_tmp75, r2000_2fff_tmp76, r2000_2fff_tmp77;
		BitBlock cc_range_2c40_2c76_3, sequence_e2_b1_adv, r2000_2fff_tmp78, byte_b2;
		BitBlock sequence_e2_b2, cc_range_2c81_2cbf_3, sequence_e2_b2_adv;
		BitBlock r2000_2fff_tmp79, byte_b3, sequence_e2_b3, r2000_2fff_tmp80;
		BitBlock r2000_2fff_tmp81, r2000_2fff_tmp82, r2000_2fff_tmp83;
		BitBlock r2000_2fff_tmp84, r2000_2fff_tmp85, r2000_2fff_tmp86;
		BitBlock r2000_2fff_tmp87, r2000_2fff_tmp88, r2000_2fff_tmp89;
		BitBlock r2000_2fff_tmp90, r2000_2fff_tmp91, r2000_2fff_tmp92;
		BitBlock r2000_2fff_tmp93, r2000_2fff_tmp94, r2000_2fff_tmp95;
		BitBlock r2000_2fff_tmp96, r2000_2fff_tmp97, r2000_2fff_tmp98;
		BitBlock r2000_2fff_tmp99, r2000_2fff_tmp100, r2000_2fff_tmp101;
		BitBlock r2000_2fff_tmp102, r2000_2fff_tmp103, r2000_2fff_tmp104;
		BitBlock r2000_2fff_tmp105, r2000_2fff_tmp106, r2000_2fff_tmp107;
		BitBlock r2000_2fff_tmp108, r2000_2fff_tmp109, r2000_2fff_tmp110;
		BitBlock r2000_2fff_tmp111, r2000_2fff_tmp112, cc_range_2cc1_2cf3_3;
		BitBlock sequence_e2_b3_adv, r2000_2fff_tmp113, byte_b4, sequence_e2_b4;
		BitBlock r2000_2fff_tmp114, r2000_2fff_tmp115, r2000_2fff_tmp116;
		BitBlock r2000_2fff_tmp117, r2000_2fff_tmp118, r2000_2fff_tmp119;
		BitBlock r2000_2fff_tmp120, cc_range_2d00_2d2d_3, sequence_e2_b4_adv;
		BitBlock r2000_2fff_tmp121, r800_ffff_tmp9, r800_ffff_tmp10, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea;
		BitBlock ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7;
		BitBlock byte_99, ra000_ffff_tmp8, sequence_ea_99, byte_ea_adv;
		BitBlock ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, cc_range_a641_a66d_3, sequence_ea_99_adv;
		BitBlock ra000_ffff_tmp14, byte_9a, sequence_ea_9a, ra000_ffff_tmp15;
		BitBlock ra000_ffff_tmp16, ra000_ffff_tmp17, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, ra000_ffff_tmp20, ra000_ffff_tmp21;
		BitBlock ra000_ffff_tmp22, ra000_ffff_tmp23, ra000_ffff_tmp24;
		BitBlock ra000_ffff_tmp25, ra000_ffff_tmp26, ra000_ffff_tmp27;
		BitBlock ra000_ffff_tmp28, ra000_ffff_tmp29, ra000_ffff_tmp30;
		BitBlock ra000_ffff_tmp31, ra000_ffff_tmp32, ra000_ffff_tmp33;
		BitBlock ra000_ffff_tmp34, ra000_ffff_tmp35, ra000_ffff_tmp36;
		BitBlock ra000_ffff_tmp37, ra000_ffff_tmp38, ra000_ffff_tmp39;
		BitBlock ra000_ffff_tmp40, ra000_ffff_tmp41, ra000_ffff_tmp42;
		BitBlock ra000_ffff_tmp43, ra000_ffff_tmp44, cc_range_a681_a69b_3;
		BitBlock sequence_ea_9a_adv, ra000_ffff_tmp45, ra000_ffff_tmp46, byte_9c;
		BitBlock sequence_ea_9c, ra000_ffff_tmp47, ra000_ffff_tmp48, ra000_ffff_tmp49;
		BitBlock ra000_ffff_tmp50, ra000_ffff_tmp51, ra000_ffff_tmp52;
		BitBlock ra000_ffff_tmp53, ra000_ffff_tmp54, ra000_ffff_tmp55;
		BitBlock ra000_ffff_tmp56, ra000_ffff_tmp57, ra000_ffff_tmp58;
		BitBlock ra000_ffff_tmp59, ra000_ffff_tmp60, ra000_ffff_tmp61;
		BitBlock ra000_ffff_tmp62, ra000_ffff_tmp63, ra000_ffff_tmp64;
		BitBlock ra000_ffff_tmp65, ra000_ffff_tmp66, ra000_ffff_tmp67;
		BitBlock ra000_ffff_tmp68, ra000_ffff_tmp69, ra000_ffff_tmp70;
		BitBlock ra000_ffff_tmp71, ra000_ffff_tmp72, ra000_ffff_tmp73;
		BitBlock ra000_ffff_tmp74, cc_range_a723_a73f_3, sequence_ea_9c_adv;
		BitBlock ra000_ffff_tmp75, byte_9d, sequence_ea_9d, ra000_ffff_tmp76;
		BitBlock ra000_ffff_tmp77, ra000_ffff_tmp78, ra000_ffff_tmp79;
		BitBlock ra000_ffff_tmp80, ra000_ffff_tmp81, ra000_ffff_tmp82;
		BitBlock ra000_ffff_tmp83, ra000_ffff_tmp84, ra000_ffff_tmp85;
		BitBlock ra000_ffff_tmp86, ra000_ffff_tmp87, ra000_ffff_tmp88;
		BitBlock ra000_ffff_tmp89, ra000_ffff_tmp90, ra000_ffff_tmp91;
		BitBlock ra000_ffff_tmp92, ra000_ffff_tmp93, ra000_ffff_tmp94;
		BitBlock ra000_ffff_tmp95, ra000_ffff_tmp96, ra000_ffff_tmp97;
		BitBlock ra000_ffff_tmp98, ra000_ffff_tmp99, ra000_ffff_tmp100;
		BitBlock ra000_ffff_tmp101, ra000_ffff_tmp102, ra000_ffff_tmp103;
		BitBlock ra000_ffff_tmp104, cc_range_a741_a77f_3, sequence_ea_9d_adv;
		BitBlock ra000_ffff_tmp105, ra000_ffff_tmp106, byte_9e, sequence_ea_9e;
		BitBlock ra000_ffff_tmp107, ra000_ffff_tmp108, ra000_ffff_tmp109;
		BitBlock ra000_ffff_tmp110, ra000_ffff_tmp111, ra000_ffff_tmp112;
		BitBlock ra000_ffff_tmp113, ra000_ffff_tmp114, ra000_ffff_tmp115;
		BitBlock ra000_ffff_tmp116, ra000_ffff_tmp117, ra000_ffff_tmp118;
		BitBlock ra000_ffff_tmp119, ra000_ffff_tmp120, ra000_ffff_tmp121;
		BitBlock ra000_ffff_tmp122, cc_range_a781_a7a9_3, sequence_ea_9e_adv;
		BitBlock ra000_ffff_tmp123, byte_9f, sequence_ea_9f, ra000_ffff_tmp124;
		BitBlock byte_range_b8_ba, sequence_ea_9f_adv, ra000_ffff_tmp125, byte_ac;
		BitBlock sequence_ea_ac, sequence_ea_ac_adv, ra000_ffff_tmp126, byte_ad;
		BitBlock sequence_ea_ad, ra000_ffff_tmp127, ra000_ffff_tmp128;
		BitBlock ra000_ffff_tmp129, ra000_ffff_tmp130, ra000_ffff_tmp131;
		BitBlock ra000_ffff_tmp132, ra000_ffff_tmp133, cc_range_ab40_ab64_3;
		BitBlock sequence_ea_ad_adv, ra000_ffff_tmp134, byte_ef, ra000_ffff_tmp135;
		BitBlock sequence_ef_ac, byte_ef_adv, ra000_ffff_tmp136, ra000_ffff_tmp137;
		BitBlock ra000_ffff_tmp138, ra000_ffff_tmp139, cc_range_fb00_fb13_3;
		BitBlock sequence_ef_ac_adv, ra000_ffff_tmp140, sequence_ef_bd;
		BitBlock byte_range_81_9a, sequence_ef_bd_adv, ra000_ffff_tmp141;
		BitBlock r80_10ffff_tmp2, byte_range_f0_ff, byte_f0, r10000_10ffff_tmp1;
		BitBlock r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_90, r10000_10ffff_tmp4;
		BitBlock sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp5, sequence_f0_90_90;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp6, r10000_10ffff_tmp7;
		BitBlock byte_range_a8_bf, sequence_f0_90_90_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, byte_91, sequence_f0_90_91;
		BitBlock r10000_10ffff_tmp11, sequence_f0_90_91_adv, r10000_10ffff_tmp12;
		BitBlock sequence_f0_91, r10000_10ffff_tmp13, r10000_10ffff_tmp14, byte_a3;
		BitBlock r10000_10ffff_tmp15, sequence_f0_91_a3, sequence_f0_91_adv;
		BitBlock byte_range_80_9f, sequence_f0_91_a3_adv, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, sequence_f0_9d;
		BitBlock r10000_10ffff_tmp19, sequence_f0_9d_90, sequence_f0_9d_adv;
		BitBlock r10000_10ffff_tmp20, r10000_10ffff_tmp21, r10000_10ffff_tmp22;
		BitBlock r10000_10ffff_tmp23, r10000_10ffff_tmp24, r10000_10ffff_tmp25;
		BitBlock byte_range_9a_b3, sequence_f0_9d_90_adv, r10000_10ffff_tmp26;
		BitBlock sequence_f0_9d_91, r10000_10ffff_tmp27, r10000_10ffff_tmp28;
		BitBlock r10000_10ffff_tmp29, r10000_10ffff_tmp30, r10000_10ffff_tmp31;
		BitBlock r10000_10ffff_tmp32, r10000_10ffff_tmp33, r10000_10ffff_tmp34;
		BitBlock r10000_10ffff_tmp35, r10000_10ffff_tmp36, r10000_10ffff_tmp37;
		BitBlock r10000_10ffff_tmp38, cc_range_1d44e_1d456_4, sequence_f0_9d_91_adv;
		BitBlock r10000_10ffff_tmp39, r10000_10ffff_tmp40, r10000_10ffff_tmp41;
		BitBlock byte_92, sequence_f0_9d_92, r10000_10ffff_tmp42, r10000_10ffff_tmp43;
		BitBlock r10000_10ffff_tmp44, r10000_10ffff_tmp45, r10000_10ffff_tmp46;
		BitBlock r10000_10ffff_tmp47, r10000_10ffff_tmp48, r10000_10ffff_tmp49;
		BitBlock r10000_10ffff_tmp50, r10000_10ffff_tmp51, r10000_10ffff_tmp52;
		BitBlock r10000_10ffff_tmp53, r10000_10ffff_tmp54, r10000_10ffff_tmp55;
		BitBlock r10000_10ffff_tmp56, cc_range_1d482_1d4bd_4, sequence_f0_9d_92_adv;
		BitBlock r10000_10ffff_tmp57, sequence_f0_9d_93, r10000_10ffff_tmp58;
		BitBlock r10000_10ffff_tmp59, r10000_10ffff_tmp60, r10000_10ffff_tmp61;
		BitBlock cc_range_1d4c0_1d4ea_4, sequence_f0_9d_93_adv, r10000_10ffff_tmp62;
		BitBlock r10000_10ffff_tmp63, r10000_10ffff_tmp64, byte_94, sequence_f0_9d_94;
		BitBlock r10000_10ffff_tmp65, r10000_10ffff_tmp66, r10000_10ffff_tmp67;
		BitBlock r10000_10ffff_tmp68, r10000_10ffff_tmp69, r10000_10ffff_tmp70;
		BitBlock cc_range_1d500_1d51e_4, sequence_f0_9d_94_adv, r10000_10ffff_tmp71;
		BitBlock r10000_10ffff_tmp72, byte_95, sequence_f0_9d_95, r10000_10ffff_tmp73;
		BitBlock r10000_10ffff_tmp74, r10000_10ffff_tmp75, r10000_10ffff_tmp76;
		BitBlock byte_range_92_ab, sequence_f0_9d_95_adv, r10000_10ffff_tmp77;
		BitBlock r10000_10ffff_tmp78, byte_96, sequence_f0_9d_96, r10000_10ffff_tmp79;
		BitBlock r10000_10ffff_tmp80, r10000_10ffff_tmp81, r10000_10ffff_tmp82;
		BitBlock cc_range_1d586_1d5ba_4, sequence_f0_9d_96_adv, r10000_10ffff_tmp83;
		BitBlock r10000_10ffff_tmp84, byte_97, sequence_f0_9d_97, r10000_10ffff_tmp85;
		BitBlock r10000_10ffff_tmp86, r10000_10ffff_tmp87, cc_range_1d5c0_1d5ee_4;
		BitBlock sequence_f0_9d_97_adv, r10000_10ffff_tmp88, r10000_10ffff_tmp89;
		BitBlock byte_98, sequence_f0_9d_98, r10000_10ffff_tmp90, r10000_10ffff_tmp91;
		BitBlock cc_range_1d600_1d622_4, sequence_f0_9d_98_adv, r10000_10ffff_tmp92;
		BitBlock r10000_10ffff_tmp93, sequence_f0_9d_99, r10000_10ffff_tmp94;
		BitBlock r10000_10ffff_tmp95, byte_range_96_af, sequence_f0_9d_99_adv;
		BitBlock r10000_10ffff_tmp96, r10000_10ffff_tmp97, sequence_f0_9d_9a;
		BitBlock r10000_10ffff_tmp98, r10000_10ffff_tmp99, byte_range_8a_a5;
		BitBlock sequence_f0_9d_9a_adv, r10000_10ffff_tmp100, byte_9b;
		BitBlock sequence_f0_9d_9b, r10000_10ffff_tmp101, r10000_10ffff_tmp102;
		BitBlock r10000_10ffff_tmp103, r10000_10ffff_tmp104, r10000_10ffff_tmp105;
		BitBlock r10000_10ffff_tmp106, r10000_10ffff_tmp107, r10000_10ffff_tmp108;
		BitBlock cc_range_1d6c2_1d6fc_4, sequence_f0_9d_9b_adv, r10000_10ffff_tmp109;
		BitBlock r10000_10ffff_tmp110, sequence_f0_9d_9c, r10000_10ffff_tmp111;
		BitBlock r10000_10ffff_tmp112, r10000_10ffff_tmp113, r10000_10ffff_tmp114;
		BitBlock r10000_10ffff_tmp115, r10000_10ffff_tmp116, r10000_10ffff_tmp117;
		BitBlock cc_range_1d700_1d736_4, sequence_f0_9d_9c_adv, r10000_10ffff_tmp118;
		BitBlock sequence_f0_9d_9d, r10000_10ffff_tmp119, r10000_10ffff_tmp120;
		BitBlock r10000_10ffff_tmp121, r10000_10ffff_tmp122, r10000_10ffff_tmp123;
		BitBlock r10000_10ffff_tmp124, cc_range_1d740_1d770_4, sequence_f0_9d_9d_adv;
		BitBlock r10000_10ffff_tmp125, r10000_10ffff_tmp126, sequence_f0_9d_9e;
		BitBlock r10000_10ffff_tmp127, r10000_10ffff_tmp128, r10000_10ffff_tmp129;
		BitBlock r10000_10ffff_tmp130, r10000_10ffff_tmp131, r10000_10ffff_tmp132;
		BitBlock cc_range_1d780_1d7aa_4, sequence_f0_9d_9e_adv, r10000_10ffff_tmp133;
		BitBlock r10000_10ffff_tmp134, sequence_f0_9d_9f, r10000_10ffff_tmp135;
		BitBlock r10000_10ffff_tmp136, r10000_10ffff_tmp137, r10000_10ffff_tmp138;
		BitBlock r10000_10ffff_tmp139, cc_range_1d7c0_1d7cb_4, sequence_f0_9d_9f_adv;
		BitBlock r10000_10ffff_tmp140;




        struct_lower_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_and(tmp1, basis_bits.bit_2);
        tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp4 = simd_or(basis_bits.bit_5, tmp3);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        tmp6 = simd_not(tmp5);
        tmp7 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp9 = simd_or(tmp7, tmp8);
        tmp10 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(tmp9, basis_bits.bit_3));
        byte_range_61_7a = simd_and(tmp2, tmp10);
        struct_lower_Y.cc = simd_or(struct_lower_Y.cc, byte_range_61_7a);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 78))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 20))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, tmp7);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp9 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
            r80_7ff_tmp10 = simd_and(r80_7ff_tmp7, r80_7ff_tmp9);
            r80_7ff_tmp11 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp12 = simd_and(r80_7ff_tmp5, r80_7ff_tmp11);
            r80_7ff_tmp13 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp15 = simd_and(r80_7ff_tmp13, r80_7ff_tmp14);
            r80_7ff_tmp16 = simd_and(r80_7ff_tmp12, r80_7ff_tmp15);
            r80_7ff_tmp17 = simd_or(r80_7ff_tmp10, r80_7ff_tmp16);
            r80_7ff_tmp18 = simd_and(r80_7ff_tmp12, r80_7ff_tmp9);
            cc_range_aa_ba_2 = simd_or(r80_7ff_tmp17, r80_7ff_tmp18);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp19 = simd_and(byte_c2_adv, cc_range_aa_ba_2);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r80_7ff_tmp19);
            r80_7ff_tmp20 = simd_andc(tmp3, tmp7);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp20);
            r80_7ff_tmp21 = simd_and(basis_bits.bit_5, tmp3);
            r80_7ff_tmp22 = simd_or(basis_bits.bit_4, r80_7ff_tmp21);
            r80_7ff_tmp23 = simd_and(basis_bits.bit_3, r80_7ff_tmp22);
            r80_7ff_tmp24 = simd_not(r80_7ff_tmp23);
            r80_7ff_tmp25 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp26 = simd_and(r80_7ff_tmp25, tmp3);
            r80_7ff_tmp27 = simd_and(basis_bits.bit_3, r80_7ff_tmp26);
            r80_7ff_tmp28 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp24), simd_andc(r80_7ff_tmp27, basis_bits.bit_2));
            r80_7ff_tmp29 = simd_and(r80_7ff_tmp5, r80_7ff_tmp28);
            r80_7ff_tmp30 = simd_and(r80_7ff_tmp12, basis_bits.bit_4);
            cc_range_df_f8_2 = simd_or(r80_7ff_tmp29, r80_7ff_tmp30);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp31 = simd_and(byte_c3_adv, cc_range_df_f8_2);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r80_7ff_tmp31);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp7);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 11))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(2, 8))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_5, tmp8);
                r100_2ff_tmp2 = simd_not(r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_and(r80_7ff_tmp8, r80_7ff_tmp14);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp4);
                byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(2), r100_2ff_tmp5));
                r100_2ff_tmp6 = simd_and(r100_2ff_tmp5, byte_range_80_8f);
                r100_2ff_tmp7 = simd_or(byte_range_c4_c8, r100_2ff_tmp6);
                if ((bitblock::any(r100_2ff_tmp7) || carryQ.CarryTest(3, 5))) {
                  r100_24f_tmp1 = simd_andc(r80_7ff_tmp13, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp1);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(3, 2))) {
                    r100_17f_tmp1 = simd_andc(r80_7ff_tmp13, tmp8);
                    byte_c4 = simd_and(r80_7ff_tmp2, r100_17f_tmp1);
                    r100_17f_tmp2 = simd_andc(basis_bits.bit_7, tmp7);
                    r100_17f_tmp3 = simd_or(r100_17f_tmp2, r80_7ff_tmp15);
                    r100_17f_tmp4 = simd_and(r80_7ff_tmp13, tmp3);
                    r100_17f_tmp5 = simd_or(r100_17f_tmp3, r100_17f_tmp4);
                    r100_17f_tmp6 = simd_or(r100_17f_tmp5, r100_2ff_tmp4);
                    r100_17f_tmp7 = simd_and(r80_7ff_tmp8, tmp3);
                    r100_17f_tmp8 = simd_or(r100_17f_tmp6, r100_17f_tmp7);
                    r100_17f_tmp9 = simd_and(r80_7ff_tmp25, r80_7ff_tmp14);
                    r100_17f_tmp10 = simd_or(r100_17f_tmp8, r100_17f_tmp9);
                    r100_17f_tmp11 = simd_or(r100_17f_tmp10, r80_7ff_tmp26);
                    r100_17f_tmp12 = simd_and(byte_range_80_8f, r100_17f_tmp11);
                    r100_17f_tmp13 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                    r100_17f_tmp14 = simd_and(r80_7ff_tmp5, r100_17f_tmp13);
                    r100_17f_tmp15 = simd_andc(r80_7ff_tmp14, tmp7);
                    r100_17f_tmp16 = simd_and(r100_17f_tmp14, r100_17f_tmp15);
                    r100_17f_tmp17 = simd_or(r100_17f_tmp12, r100_17f_tmp16);
                    r100_17f_tmp18 = simd_and(r100_17f_tmp14, r80_7ff_tmp20);
                    r100_17f_tmp19 = simd_or(r100_17f_tmp17, r100_17f_tmp18);
                    r100_17f_tmp20 = simd_and(r100_17f_tmp14, r80_7ff_tmp15);
                    r100_17f_tmp21 = simd_or(r100_17f_tmp19, r100_17f_tmp20);
                    r100_17f_tmp22 = simd_and(r100_17f_tmp14, r100_17f_tmp4);
                    r100_17f_tmp23 = simd_or(r100_17f_tmp21, r100_17f_tmp22);
                    r100_17f_tmp24 = simd_and(r100_17f_tmp14, r100_2ff_tmp4);
                    r100_17f_tmp25 = simd_or(r100_17f_tmp23, r100_17f_tmp24);
                    r100_17f_tmp26 = simd_and(r100_17f_tmp14, r100_17f_tmp7);
                    r100_17f_tmp27 = simd_or(r100_17f_tmp25, r100_17f_tmp26);
                    r100_17f_tmp28 = simd_and(r100_17f_tmp14, r100_17f_tmp9);
                    r100_17f_tmp29 = simd_or(r100_17f_tmp27, r100_17f_tmp28);
                    r100_17f_tmp30 = simd_and(r100_17f_tmp14, r80_7ff_tmp26);
                    r100_17f_tmp31 = simd_or(r100_17f_tmp29, r100_17f_tmp30);
                    r100_17f_tmp32 = simd_and(r80_7ff_tmp7, r100_17f_tmp15);
                    r100_17f_tmp33 = simd_or(r100_17f_tmp31, r100_17f_tmp32);
                    r100_17f_tmp34 = simd_and(r80_7ff_tmp7, r80_7ff_tmp20);
                    r100_17f_tmp35 = simd_or(r100_17f_tmp33, r100_17f_tmp34);
                    r100_17f_tmp36 = simd_and(r80_7ff_tmp7, r80_7ff_tmp15);
                    r100_17f_tmp37 = simd_or(r100_17f_tmp35, r100_17f_tmp36);
                    r100_17f_tmp38 = simd_and(r80_7ff_tmp7, r100_17f_tmp4);
                    r100_17f_tmp39 = simd_or(r100_17f_tmp37, r100_17f_tmp38);
                    r100_17f_tmp40 = simd_and(r80_7ff_tmp7, r100_2ff_tmp4);
                    r100_17f_tmp41 = simd_or(r100_17f_tmp39, r100_17f_tmp40);
                    r100_17f_tmp42 = simd_and(r80_7ff_tmp7, r100_17f_tmp7);
                    r100_17f_tmp43 = simd_or(r100_17f_tmp41, r100_17f_tmp42);
                    r100_17f_tmp44 = simd_and(r80_7ff_tmp7, r100_17f_tmp9);
                    r100_17f_tmp45 = simd_or(r100_17f_tmp43, r100_17f_tmp44);
                    r100_17f_tmp46 = simd_and(r80_7ff_tmp7, r80_7ff_tmp26);
                    r100_17f_tmp47 = simd_or(r100_17f_tmp45, r100_17f_tmp46);
                    r100_17f_tmp48 = simd_and(r80_7ff_tmp12, r100_17f_tmp15);
                    r100_17f_tmp49 = simd_or(r100_17f_tmp47, r100_17f_tmp48);
                    r100_17f_tmp50 = simd_and(r80_7ff_tmp12, r80_7ff_tmp20);
                    r100_17f_tmp51 = simd_or(r100_17f_tmp49, r100_17f_tmp50);
                    r100_17f_tmp52 = simd_or(r100_17f_tmp51, r80_7ff_tmp16);
                    r100_17f_tmp53 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r80_7ff_tmp21, basis_bits.bit_4));
                    r100_17f_tmp54 = simd_and(r80_7ff_tmp12, r100_17f_tmp53);
                    r100_17f_tmp55 = simd_or(r100_17f_tmp52, r100_17f_tmp54);
                    r100_17f_tmp56 = simd_or(r100_17f_tmp55, r80_7ff_tmp18);
                    r100_17f_tmp57 = simd_andc(r80_7ff_tmp25, tmp8);
                    r100_17f_tmp58 = simd_and(r80_7ff_tmp12, r100_17f_tmp57);
                    r100_17f_tmp59 = simd_or(r100_17f_tmp56, r100_17f_tmp58);
                    r100_17f_tmp60 = simd_and(r80_7ff_tmp25, r80_7ff_tmp3);
                    r100_17f_tmp61 = simd_and(r80_7ff_tmp12, r100_17f_tmp60);
                    cc_range_101_13e_2 = simd_or(r100_17f_tmp59, r100_17f_tmp61);
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_c4, carryQ.get_carry_in(3), byte_c4_adv));
                    r100_17f_tmp62 = simd_and(byte_c4_adv, cc_range_101_13e_2);
                    struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r100_17f_tmp62);
                    byte_c5 = simd_and(r80_7ff_tmp2, r80_7ff_tmp15);
                    r100_17f_tmp63 = simd_andc(tmp9, r80_7ff_tmp4);
                    r100_17f_tmp64 = simd_andc(r100_17f_tmp63, r100_17f_tmp1);
                    r100_17f_tmp65 = simd_and(r80_7ff_tmp13, r80_7ff_tmp3);
                    r100_17f_tmp66 = simd_andc(r100_17f_tmp64, r100_17f_tmp65);
                    r100_17f_tmp67 = simd_andc(r80_7ff_tmp8, basis_bits.bit_6);
                    r100_17f_tmp68 = simd_andc(r100_17f_tmp66, r100_17f_tmp67);
                    r100_17f_tmp69 = simd_andc(r100_17f_tmp68, r100_17f_tmp7);
                    r100_17f_tmp70 = simd_andc(r100_17f_tmp69, r100_17f_tmp9);
                    r100_17f_tmp71 = simd_andc(r100_17f_tmp70, r80_7ff_tmp26);
                    r100_17f_tmp72 = simd_andc(byte_range_80_8f, r100_17f_tmp71);
                    r100_17f_tmp73 = simd_or(r100_17f_tmp72, r100_17f_tmp16);
                    r100_17f_tmp74 = simd_or(r100_17f_tmp73, r100_17f_tmp18);
                    r100_17f_tmp75 = simd_or(r100_17f_tmp74, r100_17f_tmp20);
                    r100_17f_tmp76 = simd_or(r100_17f_tmp75, r100_17f_tmp22);
                    r100_17f_tmp77 = simd_or(r100_17f_tmp76, r100_17f_tmp24);
                    r100_17f_tmp78 = simd_or(r100_17f_tmp77, r100_17f_tmp26);
                    r100_17f_tmp79 = simd_or(r100_17f_tmp78, r100_17f_tmp28);
                    r100_17f_tmp80 = simd_or(r100_17f_tmp79, r100_17f_tmp30);
                    r100_17f_tmp81 = simd_or(r100_17f_tmp80, r100_17f_tmp32);
                    r100_17f_tmp82 = simd_or(r100_17f_tmp81, r100_17f_tmp34);
                    r100_17f_tmp83 = simd_or(r100_17f_tmp82, r100_17f_tmp36);
                    r100_17f_tmp84 = simd_or(r100_17f_tmp83, r100_17f_tmp38);
                    r100_17f_tmp85 = simd_or(r100_17f_tmp84, r100_17f_tmp40);
                    r100_17f_tmp86 = simd_or(r100_17f_tmp85, r100_17f_tmp42);
                    r100_17f_tmp87 = simd_or(r100_17f_tmp86, r100_17f_tmp44);
                    r100_17f_tmp88 = simd_or(r100_17f_tmp87, r100_17f_tmp46);
                    r100_17f_tmp89 = simd_or(r100_17f_tmp88, r100_17f_tmp48);
                    r100_17f_tmp90 = simd_or(r100_17f_tmp89, r100_17f_tmp50);
                    r100_17f_tmp91 = simd_or(r100_17f_tmp90, r80_7ff_tmp16);
                    r100_17f_tmp92 = simd_and(r80_7ff_tmp12, r100_17f_tmp4);
                    r100_17f_tmp93 = simd_or(r100_17f_tmp91, r100_17f_tmp92);
                    r100_17f_tmp94 = simd_or(r100_17f_tmp93, r80_7ff_tmp18);
                    r100_17f_tmp95 = simd_or(r100_17f_tmp94, r100_17f_tmp58);
                    r100_17f_tmp96 = simd_and(r80_7ff_tmp25, basis_bits.bit_6);
                    r100_17f_tmp97 = simd_and(r80_7ff_tmp12, r100_17f_tmp96);
                    cc_range_140_17e_2 = simd_or(r100_17f_tmp95, r100_17f_tmp97);
                    carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_c5, carryQ.get_carry_in(4), byte_c5_adv));
                    r100_17f_tmp98 = simd_and(byte_c5_adv, cc_range_140_17e_2);
                    struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r100_17f_tmp98);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(3, 2);
                  }
                  r100_24f_tmp2 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r100_24f_tmp2, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp3);
                  r100_24f_tmp4 = simd_or(byte_range_c6_c8, r100_2ff_tmp6);
                  if ((bitblock::any(r100_24f_tmp4) || carryQ.CarryTest(5, 3))) {
                    r180_24f_tmp1 = simd_and(r80_7ff_tmp13, r80_7ff_tmp3);
                    byte_c6 = simd_and(r80_7ff_tmp2, r180_24f_tmp1);
                    r180_24f_tmp2 = simd_andc(tmp9, r80_7ff_tmp20);
                    r180_24f_tmp3 = simd_andc(r180_24f_tmp2, r80_7ff_tmp15);
                    r180_24f_tmp4 = simd_andc(r80_7ff_tmp8, tmp8);
                    r180_24f_tmp5 = simd_andc(r180_24f_tmp3, r180_24f_tmp4);
                    r180_24f_tmp6 = simd_andc(r80_7ff_tmp25, basis_bits.bit_6);
                    r180_24f_tmp7 = simd_andc(r180_24f_tmp5, r180_24f_tmp6);
                    r180_24f_tmp8 = simd_andc(byte_range_80_8f, r180_24f_tmp7);
                    r180_24f_tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                    r180_24f_tmp10 = simd_and(r80_7ff_tmp5, r180_24f_tmp9);
                    r180_24f_tmp11 = simd_and(r180_24f_tmp10, r80_7ff_tmp4);
                    r180_24f_tmp12 = simd_or(r180_24f_tmp8, r180_24f_tmp11);
                    r180_24f_tmp13 = simd_and(r180_24f_tmp10, r80_7ff_tmp15);
                    r180_24f_tmp14 = simd_or(r180_24f_tmp12, r180_24f_tmp13);
                    r180_24f_tmp15 = simd_and(r180_24f_tmp10, r80_7ff_tmp8);
                    r180_24f_tmp16 = simd_and(r180_24f_tmp15, tmp8);
                    r180_24f_tmp17 = simd_or(r180_24f_tmp14, r180_24f_tmp16);
                    r180_24f_tmp18 = simd_and(r80_7ff_tmp25, r80_7ff_tmp3);
                    r180_24f_tmp19 = simd_and(r180_24f_tmp10, r180_24f_tmp18);
                    r180_24f_tmp20 = simd_or(r180_24f_tmp17, r180_24f_tmp19);
                    r180_24f_tmp21 = simd_andc(r80_7ff_tmp14, tmp7);
                    r180_24f_tmp22 = simd_and(r80_7ff_tmp7, r180_24f_tmp21);
                    r180_24f_tmp23 = simd_or(r180_24f_tmp20, r180_24f_tmp22);
                    r180_24f_tmp24 = simd_and(r80_7ff_tmp7, r80_7ff_tmp20);
                    r180_24f_tmp25 = simd_or(r180_24f_tmp23, r180_24f_tmp24);
                    r180_24f_tmp26 = simd_and(r80_7ff_tmp7, r80_7ff_tmp15);
                    r180_24f_tmp27 = simd_or(r180_24f_tmp25, r180_24f_tmp26);
                    r180_24f_tmp28 = simd_and(r80_7ff_tmp7, r180_24f_tmp4);
                    r180_24f_tmp29 = simd_or(r180_24f_tmp27, r180_24f_tmp28);
                    r180_24f_tmp30 = simd_and(r80_7ff_tmp8, basis_bits.bit_6);
                    r180_24f_tmp31 = simd_and(r80_7ff_tmp7, r180_24f_tmp30);
                    r180_24f_tmp32 = simd_or(r180_24f_tmp29, r180_24f_tmp31);
                    r180_24f_tmp33 = simd_and(r80_7ff_tmp25, r80_7ff_tmp14);
                    r180_24f_tmp34 = simd_and(r80_7ff_tmp7, r180_24f_tmp33);
                    r180_24f_tmp35 = simd_or(r180_24f_tmp32, r180_24f_tmp34);
                    r180_24f_tmp36 = simd_andc(r80_7ff_tmp12, tmp9);
                    r180_24f_tmp37 = simd_or(r180_24f_tmp35, r180_24f_tmp36);
                    r180_24f_tmp38 = simd_andc(r80_7ff_tmp13, tmp8);
                    r180_24f_tmp39 = simd_and(r80_7ff_tmp12, r180_24f_tmp38);
                    r180_24f_tmp40 = simd_or(r180_24f_tmp37, r180_24f_tmp39);
                    r180_24f_tmp41 = simd_and(r80_7ff_tmp12, r180_24f_tmp1);
                    r180_24f_tmp42 = simd_or(r180_24f_tmp40, r180_24f_tmp41);
                    r180_24f_tmp43 = simd_and(r80_7ff_tmp12, r80_7ff_tmp8);
                    r180_24f_tmp44 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                    r180_24f_tmp45 = simd_and(r180_24f_tmp43, r180_24f_tmp44);
                    r180_24f_tmp46 = simd_or(r180_24f_tmp42, r180_24f_tmp45);
                    r180_24f_tmp47 = simd_and(r80_7ff_tmp12, r80_7ff_tmp25);
                    r180_24f_tmp48 = simd_and(r180_24f_tmp47, tmp8);
                    cc_range_180_1bd_2 = simd_or(r180_24f_tmp46, r180_24f_tmp48);
                    carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_c6, carryQ.get_carry_in(5), byte_c6_adv));
                    r180_24f_tmp49 = simd_and(byte_c6_adv, cc_range_180_1bd_2);
                    struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r180_24f_tmp49);
                    r180_24f_tmp50 = simd_and(r80_7ff_tmp13, tmp3);
                    byte_c7 = simd_and(r80_7ff_tmp2, r180_24f_tmp50);
                    r180_24f_tmp51 = simd_or(r180_24f_tmp1, r100_2ff_tmp4);
                    r180_24f_tmp52 = simd_andc(r80_7ff_tmp25, tmp8);
                    r180_24f_tmp53 = simd_or(r180_24f_tmp51, r180_24f_tmp52);
                    r180_24f_tmp54 = simd_or(r180_24f_tmp53, r180_24f_tmp18);
                    r180_24f_tmp55 = simd_and(byte_range_80_8f, r180_24f_tmp54);
                    r180_24f_tmp56 = simd_andc(r180_24f_tmp10, tmp9);
                    r180_24f_tmp57 = simd_or(r180_24f_tmp55, r180_24f_tmp56);
                    r180_24f_tmp58 = simd_or(r180_24f_tmp57, r180_24f_tmp11);
                    r180_24f_tmp59 = simd_and(r180_24f_tmp10, r180_24f_tmp38);
                    r180_24f_tmp60 = simd_or(r180_24f_tmp58, r180_24f_tmp59);
                    r180_24f_tmp61 = simd_and(r180_24f_tmp10, r180_24f_tmp1);
                    r180_24f_tmp62 = simd_or(r180_24f_tmp60, r180_24f_tmp61);
                    r180_24f_tmp63 = simd_and(r180_24f_tmp10, r180_24f_tmp4);
                    r180_24f_tmp64 = simd_or(r180_24f_tmp62, r180_24f_tmp63);
                    r180_24f_tmp65 = simd_and(r180_24f_tmp10, r80_7ff_tmp9);
                    r180_24f_tmp66 = simd_or(r180_24f_tmp64, r180_24f_tmp65);
                    r180_24f_tmp67 = simd_and(r180_24f_tmp10, r180_24f_tmp6);
                    r180_24f_tmp68 = simd_or(r180_24f_tmp66, r180_24f_tmp67);
                    r180_24f_tmp69 = simd_and(r180_24f_tmp10, r80_7ff_tmp26);
                    r180_24f_tmp70 = simd_or(r180_24f_tmp68, r180_24f_tmp69);
                    r180_24f_tmp71 = simd_or(r180_24f_tmp70, r180_24f_tmp22);
                    r180_24f_tmp72 = simd_or(r180_24f_tmp71, r180_24f_tmp24);
                    r180_24f_tmp73 = simd_or(r180_24f_tmp72, r180_24f_tmp26);
                    r180_24f_tmp74 = simd_and(r80_7ff_tmp7, r180_24f_tmp50);
                    r180_24f_tmp75 = simd_or(r180_24f_tmp73, r180_24f_tmp74);
                    r180_24f_tmp76 = simd_and(r80_7ff_tmp7, r100_2ff_tmp4);
                    r180_24f_tmp77 = simd_or(r180_24f_tmp75, r180_24f_tmp76);
                    r180_24f_tmp78 = simd_and(r80_7ff_tmp8, tmp3);
                    r180_24f_tmp79 = simd_and(r80_7ff_tmp7, r180_24f_tmp78);
                    r180_24f_tmp80 = simd_or(r180_24f_tmp77, r180_24f_tmp79);
                    r180_24f_tmp81 = simd_or(r180_24f_tmp80, r180_24f_tmp34);
                    r180_24f_tmp82 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                    r180_24f_tmp83 = simd_not(tmp9);
                    r180_24f_tmp84 = simd_or(simd_and(basis_bits.bit_3, r180_24f_tmp83), simd_andc(r80_7ff_tmp26, basis_bits.bit_3));
                    r180_24f_tmp85 = simd_and(r180_24f_tmp82, r180_24f_tmp84);
                    r180_24f_tmp86 = simd_or(r180_24f_tmp81, r180_24f_tmp85);
                    r180_24f_tmp87 = simd_and(r80_7ff_tmp12, r80_7ff_tmp20);
                    r180_24f_tmp88 = simd_or(r180_24f_tmp86, r180_24f_tmp87);
                    r180_24f_tmp89 = simd_or(r180_24f_tmp88, r80_7ff_tmp16);
                    r180_24f_tmp90 = simd_and(r80_7ff_tmp12, r100_2ff_tmp4);
                    r180_24f_tmp91 = simd_or(r180_24f_tmp89, r180_24f_tmp90);
                    r180_24f_tmp92 = simd_and(r80_7ff_tmp12, r180_24f_tmp78);
                    r180_24f_tmp93 = simd_or(r180_24f_tmp91, r180_24f_tmp92);
                    r180_24f_tmp94 = simd_and(r80_7ff_tmp12, r180_24f_tmp33);
                    r180_24f_tmp95 = simd_or(r180_24f_tmp93, r180_24f_tmp94);
                    r180_24f_tmp96 = simd_and(r80_7ff_tmp12, r80_7ff_tmp26);
                    cc_range_1c6_1ff_2 = simd_or(r180_24f_tmp95, r180_24f_tmp96);
                    carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(6), byte_c7_adv));
                    r180_24f_tmp97 = simd_and(byte_c7_adv, cc_range_1c6_1ff_2);
                    struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r180_24f_tmp97);
                    byte_c8 = simd_and(r80_7ff_tmp2, r180_24f_tmp4);
                    r180_24f_tmp98 = simd_andc(basis_bits.bit_7, tmp7);
                    r180_24f_tmp99 = simd_or(r180_24f_tmp98, r80_7ff_tmp15);
                    r180_24f_tmp100 = simd_or(r180_24f_tmp99, r180_24f_tmp50);
                    r180_24f_tmp101 = simd_or(r180_24f_tmp100, r100_2ff_tmp4);
                    r180_24f_tmp102 = simd_or(r180_24f_tmp101, r180_24f_tmp78);
                    r180_24f_tmp103 = simd_or(r180_24f_tmp102, r180_24f_tmp33);
                    r180_24f_tmp104 = simd_or(r180_24f_tmp103, r80_7ff_tmp26);
                    r180_24f_tmp105 = simd_and(byte_range_80_8f, r180_24f_tmp104);
                    r180_24f_tmp106 = simd_and(r180_24f_tmp10, r180_24f_tmp21);
                    r180_24f_tmp107 = simd_or(r180_24f_tmp105, r180_24f_tmp106);
                    r180_24f_tmp108 = simd_and(r180_24f_tmp10, r80_7ff_tmp20);
                    r180_24f_tmp109 = simd_or(r180_24f_tmp107, r180_24f_tmp108);
                    r180_24f_tmp110 = simd_or(r180_24f_tmp109, r180_24f_tmp13);
                    r180_24f_tmp111 = simd_and(r180_24f_tmp10, r180_24f_tmp50);
                    r180_24f_tmp112 = simd_or(r180_24f_tmp110, r180_24f_tmp111);
                    r180_24f_tmp113 = simd_and(r180_24f_tmp10, r100_2ff_tmp4);
                    r180_24f_tmp114 = simd_or(r180_24f_tmp112, r180_24f_tmp113);
                    r180_24f_tmp115 = simd_and(r180_24f_tmp10, r180_24f_tmp78);
                    r180_24f_tmp116 = simd_or(r180_24f_tmp114, r180_24f_tmp115);
                    r180_24f_tmp117 = simd_and(r180_24f_tmp10, r180_24f_tmp33);
                    r180_24f_tmp118 = simd_or(r180_24f_tmp116, r180_24f_tmp117);
                    r180_24f_tmp119 = simd_or(r180_24f_tmp118, r180_24f_tmp69);
                    r180_24f_tmp120 = simd_or(r180_24f_tmp119, r180_24f_tmp22);
                    r180_24f_tmp121 = simd_or(r180_24f_tmp120, r180_24f_tmp24);
                    r180_24f_tmp122 = simd_or(r180_24f_tmp121, r180_24f_tmp26);
                    r180_24f_tmp123 = simd_or(r180_24f_tmp122, r180_24f_tmp74);
                    r180_24f_tmp124 = simd_or(r180_24f_tmp123, r180_24f_tmp76);
                    r180_24f_tmp125 = simd_or(r180_24f_tmp124, r180_24f_tmp79);
                    r180_24f_tmp126 = simd_or(r180_24f_tmp125, r180_24f_tmp34);
                    r180_24f_tmp127 = simd_and(r80_7ff_tmp7, r80_7ff_tmp26);
                    r180_24f_tmp128 = simd_or(r180_24f_tmp126, r180_24f_tmp127);
                    r180_24f_tmp129 = simd_and(r80_7ff_tmp12, r180_24f_tmp21);
                    r180_24f_tmp130 = simd_or(r180_24f_tmp128, r180_24f_tmp129);
                    r180_24f_tmp131 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                    r180_24f_tmp132 = simd_not(r180_24f_tmp131);
                    r180_24f_tmp133 = simd_or(simd_and(basis_bits.bit_4, r180_24f_tmp132), simd_andc(tmp4, basis_bits.bit_4));
                    r180_24f_tmp134 = simd_and(r80_7ff_tmp12, r180_24f_tmp133);
                    r180_24f_tmp135 = simd_or(r180_24f_tmp130, r180_24f_tmp134);
                    r180_24f_tmp136 = simd_and(r80_7ff_tmp12, r180_24f_tmp52);
                    r180_24f_tmp137 = simd_or(r180_24f_tmp135, r180_24f_tmp136);
                    cc_range_201_23f_2 = simd_or(r180_24f_tmp137, r180_24f_tmp96);
                    carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_c8, carryQ.get_carry_in(7), byte_c8_adv));
                    r180_24f_tmp138 = simd_and(byte_c8_adv, cc_range_201_23f_2);
                    struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r180_24f_tmp138);
                    r180_24f_tmp139 = simd_andc(tmp9, r80_7ff_tmp4);
                    r180_24f_tmp140 = simd_andc(r180_24f_tmp139, r180_24f_tmp50);
                    r180_24f_tmp141 = simd_andc(r180_24f_tmp140, r100_2ff_tmp4);
                    r180_24f_tmp142 = simd_andc(r180_24f_tmp141, r180_24f_tmp78);
                    r180_24f_tmp143 = simd_andc(r180_24f_tmp142, r180_24f_tmp33);
                    r180_24f_tmp144 = simd_andc(r180_24f_tmp143, r80_7ff_tmp26);
                    cc_range_240_24f_2 = simd_andc(byte_range_80_8f, r180_24f_tmp144);
                    byte_c9_adv = r100_2ff_tmp5;
                    r180_24f_tmp145 = simd_and(byte_c9_adv, cc_range_240_24f_2);
                    struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r180_24f_tmp145);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(5, 3);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 5);
                }
                byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
                r100_2ff_tmp8 = simd_and(r100_2ff_tmp5, byte_range_90_bf);
                byte_ca = simd_and(r80_7ff_tmp2, r80_7ff_tmp9);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp11);
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(8), r100_2ff_tmp9));
                r100_2ff_tmp10 = simd_and(r100_2ff_tmp9, byte_range_80_af);
                r100_2ff_tmp11 = simd_or(r100_2ff_tmp8, r100_2ff_tmp10);
                if (bitblock::any(r100_2ff_tmp11)) {
                  byte_c9_adv = r100_2ff_tmp5;
                  r250_2af_tmp1 = simd_and(byte_c9_adv, byte_range_90_bf);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r250_2af_tmp1);
                  r250_2af_tmp2 = simd_andc(r80_7ff_tmp5, basis_bits.bit_2);
                  r250_2af_tmp3 = simd_and(basis_bits.bit_3, tmp7);
                  r250_2af_tmp4 = simd_andc(r250_2af_tmp2, r250_2af_tmp3);
                  r250_2af_tmp5 = simd_not(basis_bits.bit_3);
                  r250_2af_tmp6 = simd_and(basis_bits.bit_5, tmp8);
                  r250_2af_tmp7 = simd_or(basis_bits.bit_4, r250_2af_tmp6);
                  r250_2af_tmp8 = simd_and(basis_bits.bit_3, r250_2af_tmp7);
                  r250_2af_tmp9 = simd_or(simd_and(basis_bits.bit_2, r250_2af_tmp5), simd_andc(r250_2af_tmp8, basis_bits.bit_2));
                  r250_2af_tmp10 = simd_and(r80_7ff_tmp5, r250_2af_tmp9);
                  cc_range_280_295_2 = simd_or(r250_2af_tmp4, r250_2af_tmp10);
                  byte_ca_adv = r100_2ff_tmp9;
                  r250_2af_tmp11 = simd_and(byte_ca_adv, cc_range_280_295_2);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r250_2af_tmp11);
                }
                byte_range_b0_bf = r80_7ff_tmp12;
                r100_2ff_tmp12 = simd_and(r100_2ff_tmp9, byte_range_b0_bf);
                r100_2ff_tmp13 = simd_and(r80_7ff_tmp8, tmp3);
                byte_cb = simd_and(r80_7ff_tmp2, r100_2ff_tmp13);
                r100_2ff_tmp14 = simd_or(r100_2ff_tmp12, byte_cb);
                if ((bitblock::any(r100_2ff_tmp14) || carryQ.CarryTest(9, 1))) {
                  r2b0_2ff_tmp1 = simd_and(basis_bits.bit_4, r100_2ff_tmp1);
                  byte_range_b0_b8 = simd_andc(byte_range_b0_bf, r2b0_2ff_tmp1);
                  byte_ca_adv = r100_2ff_tmp9;
                  r2b0_2ff_tmp2 = simd_and(byte_ca_adv, byte_range_b0_b8);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r2b0_2ff_tmp2);
                  r2b0_2ff_tmp3 = simd_or(tmp7, basis_bits.bit_6);
                  r2b0_2ff_tmp4 = simd_andc(byte_range_80_8f, r2b0_2ff_tmp3);
                  r2b0_2ff_tmp5 = simd_andc(r80_7ff_tmp7, basis_bits.bit_4);
                  r2b0_2ff_tmp6 = simd_and(basis_bits.bit_5, tmp8);
                  r2b0_2ff_tmp7 = simd_andc(r2b0_2ff_tmp5, r2b0_2ff_tmp6);
                  cc_range_2c0_2e0_2 = simd_or(r2b0_2ff_tmp4, r2b0_2ff_tmp7);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(9), byte_cb_adv));
                  r2b0_2ff_tmp8 = simd_and(byte_cb_adv, cc_range_2c0_2e0_2);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r2b0_2ff_tmp8);
                }
                else {
                  carryQ.CarryDequeueEnqueue(9, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 8);
              }
              r100_3ff_tmp2 = simd_andc(r80_7ff_tmp25, tmp8);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp2);
              r100_3ff_tmp3 = simd_and(r80_7ff_tmp25, r80_7ff_tmp14);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp11);
              carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(10), r100_3ff_tmp4));
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp4, byte_range_80_af);
              r100_3ff_tmp6 = simd_or(byte_cc, r100_3ff_tmp5);
              if (bitblock::any(r100_3ff_tmp6)) {
                r300_36f_tmp1 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                byte_85 = simd_and(r300_36f_tmp1, r80_7ff_tmp15);
                byte_cd_adv = r100_3ff_tmp4;
                r300_36f_tmp2 = simd_and(byte_cd_adv, byte_85);
                struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r300_36f_tmp2);
              }
              byte_range_b0_bf = r80_7ff_tmp12;
              r100_3ff_tmp7 = simd_and(r100_3ff_tmp4, byte_range_b0_bf);
              r100_3ff_tmp8 = simd_and(r80_7ff_tmp25, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp8);
              r100_3ff_tmp9 = simd_or(r100_3ff_tmp7, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp9) || carryQ.CarryTest(11, 2))) {
                r370_3ff_tmp1 = simd_andc(basis_bits.bit_7, tmp7);
                r370_3ff_tmp2 = simd_and(r80_7ff_tmp13, tmp3);
                r370_3ff_tmp3 = simd_or(r370_3ff_tmp1, r370_3ff_tmp2);
                r370_3ff_tmp4 = simd_and(byte_range_b0_bf, r370_3ff_tmp3);
                r370_3ff_tmp5 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp6 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                r370_3ff_tmp7 = simd_and(r370_3ff_tmp5, r370_3ff_tmp6);
                cc_range_371_37a_2 = simd_or(r370_3ff_tmp4, r370_3ff_tmp7);
                byte_cd_adv = r100_3ff_tmp4;
                r370_3ff_tmp8 = simd_and(byte_cd_adv, cc_range_371_37a_2);
                struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r370_3ff_tmp8);
                r370_3ff_tmp9 = simd_and(r80_7ff_tmp25, r80_7ff_tmp3);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp9);
                r370_3ff_tmp10 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                r370_3ff_tmp11 = simd_and(r80_7ff_tmp5, r370_3ff_tmp10);
                r370_3ff_tmp12 = simd_andc(r370_3ff_tmp11, tmp9);
                r370_3ff_tmp13 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                r370_3ff_tmp14 = simd_or(basis_bits.bit_3, r80_7ff_tmp25);
                r370_3ff_tmp15 = simd_and(r370_3ff_tmp13, r370_3ff_tmp14);
                cc_range_390_3ac_2 = simd_or(r370_3ff_tmp12, r370_3ff_tmp15);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(11), byte_ce_adv));
                r370_3ff_tmp16 = simd_and(byte_ce_adv, cc_range_390_3ac_2);
                struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r370_3ff_tmp16);
                byte_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp26);
                r370_3ff_tmp17 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                r370_3ff_tmp18 = simd_and(basis_bits.bit_4, r80_7ff_tmp21);
                r370_3ff_tmp19 = simd_andc(r370_3ff_tmp17, r370_3ff_tmp18);
                r370_3ff_tmp20 = simd_or(tmp7, basis_bits.bit_6);
                r370_3ff_tmp21 = simd_andc(r370_3ff_tmp11, r370_3ff_tmp20);
                r370_3ff_tmp22 = simd_or(r370_3ff_tmp19, r370_3ff_tmp21);
                r370_3ff_tmp23 = simd_and(r370_3ff_tmp11, r80_7ff_tmp13);
                r370_3ff_tmp24 = simd_and(r370_3ff_tmp23, tmp8);
                r370_3ff_tmp25 = simd_or(r370_3ff_tmp22, r370_3ff_tmp24);
                r370_3ff_tmp26 = simd_and(r80_7ff_tmp8, r80_7ff_tmp14);
                r370_3ff_tmp27 = simd_and(r370_3ff_tmp11, r370_3ff_tmp26);
                r370_3ff_tmp28 = simd_or(r370_3ff_tmp25, r370_3ff_tmp27);
                r370_3ff_tmp29 = simd_and(r80_7ff_tmp8, tmp3);
                r370_3ff_tmp30 = simd_and(r370_3ff_tmp11, r370_3ff_tmp29);
                r370_3ff_tmp31 = simd_or(r370_3ff_tmp28, r370_3ff_tmp30);
                r370_3ff_tmp32 = simd_and(r370_3ff_tmp11, r100_3ff_tmp3);
                r370_3ff_tmp33 = simd_or(r370_3ff_tmp31, r370_3ff_tmp32);
                r370_3ff_tmp34 = simd_and(r370_3ff_tmp11, r80_7ff_tmp26);
                r370_3ff_tmp35 = simd_or(r370_3ff_tmp33, r370_3ff_tmp34);
                r370_3ff_tmp36 = simd_andc(r80_7ff_tmp14, tmp7);
                r370_3ff_tmp37 = simd_and(r80_7ff_tmp7, r370_3ff_tmp36);
                r370_3ff_tmp38 = simd_or(r370_3ff_tmp35, r370_3ff_tmp37);
                r370_3ff_tmp39 = simd_and(r80_7ff_tmp7, r80_7ff_tmp20);
                r370_3ff_tmp40 = simd_or(r370_3ff_tmp38, r370_3ff_tmp39);
                r370_3ff_tmp41 = simd_and(r80_7ff_tmp7, r80_7ff_tmp15);
                r370_3ff_tmp42 = simd_or(r370_3ff_tmp40, r370_3ff_tmp41);
                r370_3ff_tmp43 = simd_and(r80_7ff_tmp7, r370_3ff_tmp2);
                r370_3ff_tmp44 = simd_or(r370_3ff_tmp42, r370_3ff_tmp43);
                r370_3ff_tmp45 = simd_and(r80_7ff_tmp7, r370_3ff_tmp26);
                r370_3ff_tmp46 = simd_or(r370_3ff_tmp44, r370_3ff_tmp45);
                r370_3ff_tmp47 = simd_and(r80_7ff_tmp7, r370_3ff_tmp29);
                r370_3ff_tmp48 = simd_or(r370_3ff_tmp46, r370_3ff_tmp47);
                r370_3ff_tmp49 = simd_and(r80_7ff_tmp7, r100_3ff_tmp3);
                r370_3ff_tmp50 = simd_or(r370_3ff_tmp48, r370_3ff_tmp49);
                r370_3ff_tmp51 = simd_not(tmp7);
                r370_3ff_tmp52 = simd_or(simd_and(basis_bits.bit_3, r370_3ff_tmp51), simd_andc(r80_7ff_tmp26, basis_bits.bit_3));
                r370_3ff_tmp53 = simd_and(r370_3ff_tmp13, r370_3ff_tmp52);
                r370_3ff_tmp54 = simd_or(r370_3ff_tmp50, r370_3ff_tmp53);
                r370_3ff_tmp55 = simd_and(byte_range_b0_bf, r80_7ff_tmp15);
                r370_3ff_tmp56 = simd_or(r370_3ff_tmp54, r370_3ff_tmp55);
                r370_3ff_tmp57 = simd_andc(r80_7ff_tmp8, tmp8);
                r370_3ff_tmp58 = simd_and(byte_range_b0_bf, r370_3ff_tmp57);
                r370_3ff_tmp59 = simd_or(r370_3ff_tmp56, r370_3ff_tmp58);
                r370_3ff_tmp60 = simd_not(tmp8);
                r370_3ff_tmp61 = simd_or(simd_and(basis_bits.bit_5, r370_3ff_tmp60), simd_andc(tmp3, basis_bits.bit_5));
                r370_3ff_tmp62 = simd_and(r370_3ff_tmp5, r370_3ff_tmp61);
                cc_range_3c0_3fb_2 = simd_or(r370_3ff_tmp59, r370_3ff_tmp62);
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(12), byte_cf_adv));
                r370_3ff_tmp63 = simd_and(byte_cf_adv, cc_range_3c0_3fb_2);
                struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r370_3ff_tmp63);
              }
              else {
                carryQ.CarryDequeueEnqueue(11, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 11);
            }
            r80_7ff_tmp32 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp33 = simd_and(byte_range_c0_ff, r80_7ff_tmp32);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp33, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(13, 7))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp33, tmp7);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(13, 4))) {
                byte_d0 = simd_andc(r80_7ff_tmp33, tmp9);
                byte_range_b0_bf = r80_7ff_tmp12;
                carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_d0, carryQ.get_carry_in(13), byte_d0_adv));
                r400_4ff_tmp1 = simd_and(byte_d0_adv, byte_range_b0_bf);
                struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r400_4ff_tmp1);
                r400_4ff_tmp2 = simd_andc(r80_7ff_tmp14, tmp7);
                byte_d1 = simd_and(r80_7ff_tmp33, r400_4ff_tmp2);
                r400_4ff_tmp3 = simd_andc(r80_7ff_tmp5, basis_bits.bit_2);
                r400_4ff_tmp4 = simd_and(r80_7ff_tmp7, r400_4ff_tmp2);
                r400_4ff_tmp5 = simd_or(r400_4ff_tmp3, r400_4ff_tmp4);
                r400_4ff_tmp6 = simd_and(r80_7ff_tmp7, r80_7ff_tmp20);
                r400_4ff_tmp7 = simd_or(r400_4ff_tmp5, r400_4ff_tmp6);
                r400_4ff_tmp8 = simd_and(r80_7ff_tmp7, r80_7ff_tmp15);
                r400_4ff_tmp9 = simd_or(r400_4ff_tmp7, r400_4ff_tmp8);
                r400_4ff_tmp10 = simd_and(r80_7ff_tmp13, tmp3);
                r400_4ff_tmp11 = simd_and(r80_7ff_tmp7, r400_4ff_tmp10);
                r400_4ff_tmp12 = simd_or(r400_4ff_tmp9, r400_4ff_tmp11);
                r400_4ff_tmp13 = simd_and(r80_7ff_tmp8, r80_7ff_tmp14);
                r400_4ff_tmp14 = simd_and(r80_7ff_tmp7, r400_4ff_tmp13);
                r400_4ff_tmp15 = simd_or(r400_4ff_tmp12, r400_4ff_tmp14);
                r400_4ff_tmp16 = simd_and(r80_7ff_tmp8, tmp3);
                r400_4ff_tmp17 = simd_and(r80_7ff_tmp7, r400_4ff_tmp16);
                r400_4ff_tmp18 = simd_or(r400_4ff_tmp15, r400_4ff_tmp17);
                r400_4ff_tmp19 = simd_and(r80_7ff_tmp25, r80_7ff_tmp14);
                r400_4ff_tmp20 = simd_and(r80_7ff_tmp7, r400_4ff_tmp19);
                r400_4ff_tmp21 = simd_or(r400_4ff_tmp18, r400_4ff_tmp20);
                r400_4ff_tmp22 = simd_and(r80_7ff_tmp7, r80_7ff_tmp26);
                r400_4ff_tmp23 = simd_or(r400_4ff_tmp21, r400_4ff_tmp22);
                r400_4ff_tmp24 = simd_and(byte_range_b0_bf, r400_4ff_tmp2);
                r400_4ff_tmp25 = simd_or(r400_4ff_tmp23, r400_4ff_tmp24);
                r400_4ff_tmp26 = simd_and(byte_range_b0_bf, r80_7ff_tmp20);
                r400_4ff_tmp27 = simd_or(r400_4ff_tmp25, r400_4ff_tmp26);
                r400_4ff_tmp28 = simd_and(byte_range_b0_bf, r80_7ff_tmp15);
                r400_4ff_tmp29 = simd_or(r400_4ff_tmp27, r400_4ff_tmp28);
                r400_4ff_tmp30 = simd_and(byte_range_b0_bf, r400_4ff_tmp10);
                r400_4ff_tmp31 = simd_or(r400_4ff_tmp29, r400_4ff_tmp30);
                r400_4ff_tmp32 = simd_and(byte_range_b0_bf, r400_4ff_tmp13);
                r400_4ff_tmp33 = simd_or(r400_4ff_tmp31, r400_4ff_tmp32);
                r400_4ff_tmp34 = simd_and(byte_range_b0_bf, r400_4ff_tmp16);
                r400_4ff_tmp35 = simd_or(r400_4ff_tmp33, r400_4ff_tmp34);
                r400_4ff_tmp36 = simd_and(byte_range_b0_bf, r400_4ff_tmp19);
                r400_4ff_tmp37 = simd_or(r400_4ff_tmp35, r400_4ff_tmp36);
                r400_4ff_tmp38 = simd_and(byte_range_b0_bf, r80_7ff_tmp26);
                cc_range_440_47f_2 = simd_or(r400_4ff_tmp37, r400_4ff_tmp38);
                carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_d1, carryQ.get_carry_in(14), byte_d1_adv));
                r400_4ff_tmp39 = simd_and(byte_d1_adv, cc_range_440_47f_2);
                struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r400_4ff_tmp39);
                byte_d2 = simd_and(r80_7ff_tmp33, r80_7ff_tmp4);
                r400_4ff_tmp40 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                r400_4ff_tmp41 = simd_or(r400_4ff_tmp2, r400_4ff_tmp16);
                r400_4ff_tmp42 = simd_or(r400_4ff_tmp41, r400_4ff_tmp19);
                r400_4ff_tmp43 = simd_or(r400_4ff_tmp42, r80_7ff_tmp26);
                r400_4ff_tmp44 = simd_and(r400_4ff_tmp40, r400_4ff_tmp43);
                r400_4ff_tmp45 = simd_and(r80_7ff_tmp5, r80_7ff_tmp32);
                r400_4ff_tmp46 = simd_and(r400_4ff_tmp45, r400_4ff_tmp2);
                r400_4ff_tmp47 = simd_or(r400_4ff_tmp44, r400_4ff_tmp46);
                r400_4ff_tmp48 = simd_and(r400_4ff_tmp45, r80_7ff_tmp20);
                r400_4ff_tmp49 = simd_or(r400_4ff_tmp47, r400_4ff_tmp48);
                r400_4ff_tmp50 = simd_and(r400_4ff_tmp45, r80_7ff_tmp15);
                r400_4ff_tmp51 = simd_or(r400_4ff_tmp49, r400_4ff_tmp50);
                r400_4ff_tmp52 = simd_and(r400_4ff_tmp45, r400_4ff_tmp10);
                r400_4ff_tmp53 = simd_or(r400_4ff_tmp51, r400_4ff_tmp52);
                r400_4ff_tmp54 = simd_and(r400_4ff_tmp45, r400_4ff_tmp13);
                r400_4ff_tmp55 = simd_or(r400_4ff_tmp53, r400_4ff_tmp54);
                r400_4ff_tmp56 = simd_and(r400_4ff_tmp45, r400_4ff_tmp16);
                r400_4ff_tmp57 = simd_or(r400_4ff_tmp55, r400_4ff_tmp56);
                r400_4ff_tmp58 = simd_and(r400_4ff_tmp45, r400_4ff_tmp19);
                r400_4ff_tmp59 = simd_or(r400_4ff_tmp57, r400_4ff_tmp58);
                r400_4ff_tmp60 = simd_and(r400_4ff_tmp45, r80_7ff_tmp26);
                r400_4ff_tmp61 = simd_or(r400_4ff_tmp59, r400_4ff_tmp60);
                r400_4ff_tmp62 = simd_or(r400_4ff_tmp61, r400_4ff_tmp4);
                r400_4ff_tmp63 = simd_or(r400_4ff_tmp62, r400_4ff_tmp6);
                r400_4ff_tmp64 = simd_or(r400_4ff_tmp63, r400_4ff_tmp8);
                r400_4ff_tmp65 = simd_or(r400_4ff_tmp64, r400_4ff_tmp11);
                r400_4ff_tmp66 = simd_or(r400_4ff_tmp65, r400_4ff_tmp14);
                r400_4ff_tmp67 = simd_or(r400_4ff_tmp66, r400_4ff_tmp17);
                r400_4ff_tmp68 = simd_or(r400_4ff_tmp67, r400_4ff_tmp20);
                r400_4ff_tmp69 = simd_or(r400_4ff_tmp68, r400_4ff_tmp22);
                r400_4ff_tmp70 = simd_or(r400_4ff_tmp69, r400_4ff_tmp24);
                r400_4ff_tmp71 = simd_or(r400_4ff_tmp70, r400_4ff_tmp26);
                r400_4ff_tmp72 = simd_or(r400_4ff_tmp71, r400_4ff_tmp28);
                r400_4ff_tmp73 = simd_or(r400_4ff_tmp72, r400_4ff_tmp30);
                r400_4ff_tmp74 = simd_or(r400_4ff_tmp73, r400_4ff_tmp32);
                r400_4ff_tmp75 = simd_or(r400_4ff_tmp74, r400_4ff_tmp34);
                r400_4ff_tmp76 = simd_or(r400_4ff_tmp75, r400_4ff_tmp36);
                cc_range_481_4bf_2 = simd_or(r400_4ff_tmp76, r400_4ff_tmp38);
                carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(15), byte_d2_adv));
                r400_4ff_tmp77 = simd_and(byte_d2_adv, cc_range_481_4bf_2);
                struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r400_4ff_tmp77);
                byte_d3 = simd_and(r80_7ff_tmp33, r80_7ff_tmp20);
                r400_4ff_tmp78 = simd_andc(r80_7ff_tmp13, tmp8);
                r400_4ff_tmp79 = simd_or(r80_7ff_tmp4, r400_4ff_tmp78);
                r400_4ff_tmp80 = simd_and(r80_7ff_tmp13, r80_7ff_tmp3);
                r400_4ff_tmp81 = simd_or(r400_4ff_tmp79, r400_4ff_tmp80);
                r400_4ff_tmp82 = simd_andc(r80_7ff_tmp8, tmp8);
                r400_4ff_tmp83 = simd_or(r400_4ff_tmp81, r400_4ff_tmp82);
                r400_4ff_tmp84 = simd_or(r400_4ff_tmp83, r80_7ff_tmp9);
                r400_4ff_tmp85 = simd_andc(r80_7ff_tmp25, tmp8);
                r400_4ff_tmp86 = simd_or(r400_4ff_tmp84, r400_4ff_tmp85);
                r400_4ff_tmp87 = simd_and(r80_7ff_tmp25, basis_bits.bit_6);
                r400_4ff_tmp88 = simd_or(r400_4ff_tmp86, r400_4ff_tmp87);
                r400_4ff_tmp89 = simd_and(r400_4ff_tmp40, r400_4ff_tmp88);
                r400_4ff_tmp90 = simd_or(r400_4ff_tmp89, r400_4ff_tmp46);
                r400_4ff_tmp91 = simd_or(r400_4ff_tmp90, r400_4ff_tmp48);
                r400_4ff_tmp92 = simd_or(r400_4ff_tmp91, r400_4ff_tmp50);
                r400_4ff_tmp93 = simd_or(r400_4ff_tmp92, r400_4ff_tmp52);
                r400_4ff_tmp94 = simd_or(r400_4ff_tmp93, r400_4ff_tmp54);
                r400_4ff_tmp95 = simd_or(r400_4ff_tmp94, r400_4ff_tmp56);
                r400_4ff_tmp96 = simd_or(r400_4ff_tmp95, r400_4ff_tmp58);
                r400_4ff_tmp97 = simd_or(r400_4ff_tmp96, r400_4ff_tmp60);
                r400_4ff_tmp98 = simd_or(r400_4ff_tmp97, r400_4ff_tmp4);
                r400_4ff_tmp99 = simd_or(r400_4ff_tmp98, r400_4ff_tmp6);
                r400_4ff_tmp100 = simd_or(r400_4ff_tmp99, r400_4ff_tmp8);
                r400_4ff_tmp101 = simd_or(r400_4ff_tmp100, r400_4ff_tmp11);
                r400_4ff_tmp102 = simd_or(r400_4ff_tmp101, r400_4ff_tmp14);
                r400_4ff_tmp103 = simd_or(r400_4ff_tmp102, r400_4ff_tmp17);
                r400_4ff_tmp104 = simd_or(r400_4ff_tmp103, r400_4ff_tmp20);
                r400_4ff_tmp105 = simd_or(r400_4ff_tmp104, r400_4ff_tmp22);
                r400_4ff_tmp106 = simd_or(r400_4ff_tmp105, r400_4ff_tmp24);
                r400_4ff_tmp107 = simd_or(r400_4ff_tmp106, r400_4ff_tmp26);
                r400_4ff_tmp108 = simd_or(r400_4ff_tmp107, r400_4ff_tmp28);
                r400_4ff_tmp109 = simd_or(r400_4ff_tmp108, r400_4ff_tmp30);
                r400_4ff_tmp110 = simd_or(r400_4ff_tmp109, r400_4ff_tmp32);
                r400_4ff_tmp111 = simd_or(r400_4ff_tmp110, r400_4ff_tmp34);
                r400_4ff_tmp112 = simd_or(r400_4ff_tmp111, r400_4ff_tmp36);
                cc_range_4c2_4ff_2 = simd_or(r400_4ff_tmp112, r400_4ff_tmp38);
                carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(16), byte_d3_adv));
                r400_4ff_tmp113 = simd_and(byte_d3_adv, cc_range_4c2_4ff_2);
                struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r400_4ff_tmp113);
              }
              else {
                carryQ.CarryDequeueEnqueue(13, 4);
              }
              r400_5ff_tmp1 = simd_andc(r80_7ff_tmp13, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp33, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(r80_7ff_tmp13, r80_7ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp33, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(17), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(18, 2))) {
                r500_58f_tmp1 = simd_andc(r80_7ff_tmp13, tmp8);
                byte_d4 = simd_and(r80_7ff_tmp33, r500_58f_tmp1);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp11);
                carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(18), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp3)) {
                  cc_range_501_52f_2 = simd_and(byte_range_80_af, basis_bits.bit_7);
                  byte_d4_adv = r500_58f_tmp2;
                  r500_52f_tmp1 = simd_and(byte_d4_adv, cc_range_501_52f_2);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r500_52f_tmp1);
                }
                byte_range_b0_bf = r80_7ff_tmp12;
                r500_58f_tmp4 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                byte_d5 = simd_and(r80_7ff_tmp33, r80_7ff_tmp15);
                r500_58f_tmp5 = simd_or(r500_58f_tmp4, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp4);
                if ((bitblock::any(r500_58f_tmp6) || carryQ.CarryTest(19, 1))) {
                  r530_58f_tmp1 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                  r530_58f_tmp2 = simd_or(basis_bits.bit_3, tmp9);
                  byte_range_a1_bf = simd_and(r530_58f_tmp1, r530_58f_tmp2);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(19), byte_d5_adv));
                  r530_58f_tmp3 = simd_and(byte_d5_adv, byte_range_a1_bf);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r530_58f_tmp3);
                  byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_d6_adv = r400_5ff_tmp3;
                  r530_58f_tmp4 = simd_and(byte_d6_adv, byte_range_80_87);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r530_58f_tmp4);
                }
                else {
                  carryQ.CarryDequeueEnqueue(19, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(18, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(13, 7);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 20);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(20, 35))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp7);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp8);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(20), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(21, 22))) {
              r800_4dff_tmp1 = simd_or(tmp7, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(21, 10))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp7);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(21, 10))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(r1000_1fff_tmp2, r800_ffff_tmp1);
                  byte_range_b4_b6 = simd_andc(r1000_1fff_tmp3, tmp3);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(21), r1000_1fff_tmp4));
                  byte_e1_byte_range_b4_b6 = simd_and(r1000_1fff_tmp4, byte_range_b4_b6);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_b4_b6, carryQ.get_carry_in(22), r1000_1fff_tmp5));
                  byte_e1_byte_range_b4_b6_sfx = simd_and(r1000_1fff_tmp5, byte_range_80_bf);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, byte_e1_byte_range_b4_b6_sfx);
                  r1000_1fff_tmp6 = simd_and(byte_range_80_bf, r1000_1fff_tmp1);
                  r1000_1fff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp8 = simd_andc(r1000_1fff_tmp7, tmp8);
                  byte_b8 = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp8);
                  byte_e1_adv = r1000_1fff_tmp4;
                  sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
                  r1000_1fff_tmp9 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp10 = simd_andc(byte_range_80_bf, r1000_1fff_tmp9);
                  byte_81 = simd_and(r1000_1fff_tmp10, r800_1fff_tmp2);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(23), r1000_1fff_tmp11));
                  sequence_e1_b8_81 = simd_and(r1000_1fff_tmp11, byte_81);
                  r1000_1fff_tmp12 = simd_and(r1000_1fff_tmp7, r800_1fff_tmp1);
                  byte_b9 = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp12);
                  sequence_e1_b9 = simd_and(byte_e1_adv, byte_b9);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e1_b9, carryQ.get_carry_in(24), r1000_1fff_tmp13));
                  sequence_e1_b9_81 = simd_and(r1000_1fff_tmp13, byte_81);
                  r1000_1fff_tmp14 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp15 = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp14);
                  byte_ba = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp15);
                  sequence_e1_ba = simd_and(byte_e1_adv, byte_ba);
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e1_ba, carryQ.get_carry_in(25), r1000_1fff_tmp16));
                  sequence_e1_ba_81 = simd_and(r1000_1fff_tmp16, byte_81);
                  r1000_1fff_tmp17 = simd_and(r1000_1fff_tmp7, tmp3);
                  byte_bb = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp17);
                  sequence_e1_bb = simd_and(byte_e1_adv, byte_bb);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_bb, carryQ.get_carry_in(26), r1000_1fff_tmp18));
                  sequence_e1_bb_81 = simd_and(r1000_1fff_tmp18, byte_81);
                  r1000_1fff_tmp19 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp20 = simd_andc(r1000_1fff_tmp19, tmp8);
                  byte_bc = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp20);
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  byte_range_80_87 = simd_andc(r1000_1fff_tmp10, basis_bits.bit_4);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(27), r1000_1fff_tmp21));
                  sequence_e1_bc_byte_range_80_87 = simd_and(r1000_1fff_tmp21, byte_range_80_87);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, sequence_e1_bc_byte_range_80_87);
                  r1000_1fff_tmp22 = simd_and(r1000_1fff_tmp19, r800_1fff_tmp1);
                  byte_bd = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp22);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  r1000_1fff_tmp23 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  byte_range_80_85 = simd_andc(byte_range_80_87, r1000_1fff_tmp23);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(28), r1000_1fff_tmp24));
                  sequence_e1_bd_byte_range_80_85 = simd_and(r1000_1fff_tmp24, byte_range_80_85);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, sequence_e1_bd_byte_range_80_85);
                  r1000_1fff_tmp25 = simd_and(r1000_1fff_tmp19, r1000_1fff_tmp14);
                  byte_be = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp25);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(29), r1000_1fff_tmp26));
                  sequence_e1_be_byte_range_80_87 = simd_and(r1000_1fff_tmp26, byte_range_80_87);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, sequence_e1_be_byte_range_80_87);
                  r1000_1fff_tmp27 = simd_and(r1000_1fff_tmp19, tmp3);
                  byte_bf = simd_and(r1000_1fff_tmp6, r1000_1fff_tmp27);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  r1000_1fff_tmp28 = simd_not(tmp8);
                  r1000_1fff_tmp29 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp28), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_82_84 = simd_and(byte_range_80_87, r1000_1fff_tmp29);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(30), r1000_1fff_tmp30));
                  sequence_e1_bf_byte_range_82_84 = simd_and(r1000_1fff_tmp30, byte_range_82_84);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, sequence_e1_bf_byte_range_82_84);
                }
                else {
                  carryQ.CarryDequeueEnqueue(21, 10);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(21, 10);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp7);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(31, 12))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp7);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(31, 12))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, tmp7);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(31), r2000_2fff_tmp5));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp5, byte_81);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp6);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp9 = simd_and(r2000_2fff_tmp8, tmp3);
                  r2000_2fff_tmp10 = simd_or(r2000_2fff_tmp4, r2000_2fff_tmp9);
                  cc_range_2071_207f_3 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp10);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(32), sequence_e2_81_adv));
                  r2000_2fff_tmp11 = simd_and(sequence_e2_81_adv, cc_range_2071_207f_3);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r2000_2fff_tmp11);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp13 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp12);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_5, tmp8);
                  r2000_2fff_tmp15 = simd_and(basis_bits.bit_4, r2000_2fff_tmp14);
                  byte_range_90_9c = simd_andc(r2000_2fff_tmp13, r2000_2fff_tmp15);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(33), sequence_e2_82_adv));
                  r2000_2fff_tmp16 = simd_and(sequence_e2_82_adv, byte_range_90_9c);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r2000_2fff_tmp16);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp2);
                  sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
                  r2000_2fff_tmp17 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp18 = simd_and(r2000_2fff_tmp17, r2000_4dff_tmp1);
                  r2000_2fff_tmp19 = simd_and(r2000_2fff_tmp8, basis_bits.bit_6);
                  r2000_2fff_tmp20 = simd_or(r2000_2fff_tmp18, r2000_2fff_tmp19);
                  r2000_2fff_tmp21 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp20);
                  r2000_2fff_tmp22 = simd_andc(tmp3, tmp7);
                  r2000_2fff_tmp23 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp22);
                  r2000_2fff_tmp24 = simd_or(r2000_2fff_tmp21, r2000_2fff_tmp23);
                  r2000_2fff_tmp25 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r2000_2fff_tmp26 = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp9);
                  r2000_2fff_tmp27 = simd_or(r2000_2fff_tmp24, r2000_2fff_tmp26);
                  r2000_2fff_tmp28 = simd_and(r2000_2fff_tmp7, r800_ffff_tmp2);
                  r2000_2fff_tmp29 = simd_or(r2000_2fff_tmp27, r2000_2fff_tmp28);
                  r2000_2fff_tmp30 = simd_and(r2000_2fff_tmp17, r2000_2fff_tmp3);
                  r2000_2fff_tmp31 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp30);
                  r2000_2fff_tmp32 = simd_or(r2000_2fff_tmp29, r2000_2fff_tmp31);
                  r2000_2fff_tmp33 = simd_andc(r2000_2fff_tmp8, basis_bits.bit_6);
                  r2000_2fff_tmp34 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp33);
                  cc_range_210a_213c_3 = simd_or(r2000_2fff_tmp32, r2000_2fff_tmp34);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(34), sequence_e2_84_adv));
                  r2000_2fff_tmp35 = simd_and(sequence_e2_84_adv, cc_range_210a_213c_3);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r2000_2fff_tmp35);
                  r2000_2fff_tmp36 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp3);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp36);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp37 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp38 = simd_not(r2000_2fff_tmp37);
                  r2000_2fff_tmp39 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp40 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp38), simd_andc(r2000_2fff_tmp39, basis_bits.bit_4));
                  r2000_2fff_tmp41 = simd_and(r2000_2fff_tmp8, r2000_4dff_tmp1);
                  r2000_2fff_tmp42 = simd_or(r2000_2fff_tmp40, r2000_2fff_tmp41);
                  r2000_2fff_tmp43 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp42);
                  cc_range_2146_2170_3 = simd_or(r2000_2fff_tmp43, r2000_2fff_tmp7);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(35), sequence_e2_85_adv));
                  r2000_2fff_tmp44 = simd_and(sequence_e2_85_adv, cc_range_2146_2170_3);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r2000_2fff_tmp44);
                  r2000_2fff_tmp45 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp45);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(36), sequence_e2_86_adv));
                  r2000_2fff_tmp46 = simd_and(sequence_e2_86_adv, byte_84);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r2000_2fff_tmp46);
                  byte_93 = r2000_2fff_tmp23;
                  sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
                  r2000_2fff_tmp47 = simd_and(basis_bits.bit_4, r2000_2fff_tmp37);
                  r2000_2fff_tmp48 = simd_or(basis_bits.bit_3, r2000_2fff_tmp47);
                  r2000_2fff_tmp49 = simd_not(r2000_2fff_tmp48);
                  r2000_2fff_tmp50 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp49), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_a9 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp50);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(37), sequence_e2_93_adv));
                  r2000_2fff_tmp51 = simd_and(sequence_e2_93_adv, byte_range_90_a9);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r2000_2fff_tmp51);
                  byte_b0 = simd_andc(r2000_2fff_tmp7, tmp9);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  byte_range_b0_bf = r2000_2fff_tmp7;
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(38), sequence_e2_b0_adv));
                  r2000_2fff_tmp52 = simd_and(sequence_e2_b0_adv, byte_range_b0_bf);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r2000_2fff_tmp52);
                  byte_b1 = simd_and(byte_range_b0_bf, r2000_2fff_tmp4);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp53 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp54 = simd_and(basis_bits.bit_3, r2000_2fff_tmp9);
                  r2000_2fff_tmp55 = simd_andc(r2000_2fff_tmp53, r2000_2fff_tmp54);
                  r2000_2fff_tmp56 = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp4);
                  r2000_2fff_tmp57 = simd_or(r2000_2fff_tmp55, r2000_2fff_tmp56);
                  r2000_2fff_tmp58 = simd_and(r2000_2fff_tmp25, r800_ffff_tmp1);
                  r2000_2fff_tmp59 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp60 = simd_and(r2000_2fff_tmp58, r2000_2fff_tmp59);
                  r2000_2fff_tmp61 = simd_or(r2000_2fff_tmp57, r2000_2fff_tmp60);
                  r2000_2fff_tmp62 = simd_andc(r2000_2fff_tmp17, tmp8);
                  r2000_2fff_tmp63 = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp62);
                  r2000_2fff_tmp64 = simd_or(r2000_2fff_tmp61, r2000_2fff_tmp63);
                  r2000_2fff_tmp65 = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp18);
                  r2000_2fff_tmp66 = simd_or(r2000_2fff_tmp64, r2000_2fff_tmp65);
                  r2000_2fff_tmp67 = simd_andc(r2000_2fff_tmp8, tmp8);
                  r2000_2fff_tmp68 = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp67);
                  r2000_2fff_tmp69 = simd_or(r2000_2fff_tmp66, r2000_2fff_tmp68);
                  r2000_2fff_tmp70 = simd_or(r2000_2fff_tmp69, byte_b1);
                  r2000_2fff_tmp71 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
                  r2000_2fff_tmp72 = simd_not(tmp8);
                  r2000_2fff_tmp73 = simd_or(simd_and(basis_bits.bit_5, r2000_2fff_tmp72), simd_andc(tmp3, basis_bits.bit_5));
                  r2000_2fff_tmp74 = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp73);
                  r2000_2fff_tmp75 = simd_or(r2000_2fff_tmp70, r2000_2fff_tmp74);
                  r2000_2fff_tmp76 = simd_xor(basis_bits.bit_4, r2000_2fff_tmp39);
                  r2000_2fff_tmp77 = simd_and(byte_range_b0_bf, r2000_2fff_tmp76);
                  cc_range_2c40_2c76_3 = simd_or(r2000_2fff_tmp75, r2000_2fff_tmp77);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(39), sequence_e2_b1_adv));
                  r2000_2fff_tmp78 = simd_and(sequence_e2_b1_adv, cc_range_2c40_2c76_3);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r2000_2fff_tmp78);
                  byte_b2 = simd_and(byte_range_b0_bf, r2000_4dff_tmp2);
                  sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
                  cc_range_2c81_2cbf_3 = simd_and(r800_ffff_tmp3, basis_bits.bit_7);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(40), sequence_e2_b2_adv));
                  r2000_2fff_tmp79 = simd_and(sequence_e2_b2_adv, cc_range_2c81_2cbf_3);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r2000_2fff_tmp79);
                  byte_b3 = simd_and(byte_range_b0_bf, r2000_2fff_tmp22);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp80 = simd_andc(basis_bits.bit_7, tmp7);
                  r2000_2fff_tmp81 = simd_or(r2000_2fff_tmp80, r2000_2fff_tmp36);
                  r2000_2fff_tmp82 = simd_and(r800_ffff_tmp1, tmp3);
                  r2000_2fff_tmp83 = simd_or(r2000_2fff_tmp81, r2000_2fff_tmp82);
                  r2000_2fff_tmp84 = simd_or(r2000_2fff_tmp83, r2000_2fff_tmp30);
                  r2000_2fff_tmp85 = simd_and(r2000_2fff_tmp17, tmp3);
                  r2000_2fff_tmp86 = simd_or(r2000_2fff_tmp84, r2000_2fff_tmp85);
                  r2000_2fff_tmp87 = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp3);
                  r2000_2fff_tmp88 = simd_or(r2000_2fff_tmp86, r2000_2fff_tmp87);
                  r2000_2fff_tmp89 = simd_or(r2000_2fff_tmp88, r2000_2fff_tmp9);
                  r2000_2fff_tmp90 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp89);
                  r2000_2fff_tmp91 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp4);
                  r2000_2fff_tmp92 = simd_or(r2000_2fff_tmp90, r2000_2fff_tmp91);
                  r2000_2fff_tmp93 = simd_or(r2000_2fff_tmp92, byte_93);
                  r2000_2fff_tmp94 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp36);
                  r2000_2fff_tmp95 = simd_or(r2000_2fff_tmp93, r2000_2fff_tmp94);
                  r2000_2fff_tmp96 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp82);
                  r2000_2fff_tmp97 = simd_or(r2000_2fff_tmp95, r2000_2fff_tmp96);
                  r2000_2fff_tmp98 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp30);
                  r2000_2fff_tmp99 = simd_or(r2000_2fff_tmp97, r2000_2fff_tmp98);
                  r2000_2fff_tmp100 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp85);
                  r2000_2fff_tmp101 = simd_or(r2000_2fff_tmp99, r2000_2fff_tmp100);
                  r2000_2fff_tmp102 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp87);
                  r2000_2fff_tmp103 = simd_or(r2000_2fff_tmp101, r2000_2fff_tmp102);
                  r2000_2fff_tmp104 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp9);
                  r2000_2fff_tmp105 = simd_or(r2000_2fff_tmp103, r2000_2fff_tmp104);
                  r2000_2fff_tmp106 = simd_or(r2000_2fff_tmp105, r2000_2fff_tmp56);
                  r2000_2fff_tmp107 = simd_andc(r2000_2fff_tmp25, basis_bits.bit_4);
                  r2000_2fff_tmp108 = simd_and(r2000_2fff_tmp107, r2000_2fff_tmp73);
                  r2000_2fff_tmp109 = simd_or(r2000_2fff_tmp106, r2000_2fff_tmp108);
                  r2000_2fff_tmp110 = simd_or(r2000_2fff_tmp109, r2000_2fff_tmp68);
                  r2000_2fff_tmp111 = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp41);
                  r2000_2fff_tmp112 = simd_or(r2000_2fff_tmp110, r2000_2fff_tmp111);
                  cc_range_2cc1_2cf3_3 = simd_or(r2000_2fff_tmp112, byte_b3);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(41), sequence_e2_b3_adv));
                  r2000_2fff_tmp113 = simd_and(sequence_e2_b3_adv, cc_range_2cc1_2cf3_3);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r2000_2fff_tmp113);
                  byte_b4 = simd_and(byte_range_b0_bf, r800_ffff_tmp2);
                  sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
                  r2000_2fff_tmp114 = simd_or(basis_bits.bit_4, r2000_2fff_tmp39);
                  r2000_2fff_tmp115 = simd_or(basis_bits.bit_3, r2000_2fff_tmp114);
                  r2000_2fff_tmp116 = simd_and(basis_bits.bit_2, r2000_2fff_tmp115);
                  r2000_2fff_tmp117 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp116);
                  r2000_2fff_tmp118 = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp82);
                  r2000_2fff_tmp119 = simd_or(r2000_2fff_tmp117, r2000_2fff_tmp118);
                  r2000_2fff_tmp120 = simd_and(r2000_2fff_tmp25, r2000_2fff_tmp87);
                  cc_range_2d00_2d2d_3 = simd_or(r2000_2fff_tmp119, r2000_2fff_tmp120);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(42), sequence_e2_b4_adv));
                  r2000_2fff_tmp121 = simd_and(sequence_e2_b4_adv, cc_range_2d00_2d2d_3);
                  struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r2000_2fff_tmp121);
                }
                else {
                  carryQ.CarryDequeueEnqueue(31, 12);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(31, 12);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(21, 22);
            }
            r800_ffff_tmp9 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp9, r800_ffff_tmp10);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(43, 12))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_99 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[43] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(43), ra000_ffff_tmp8));
              sequence_ea_99 = simd_and(ra000_ffff_tmp8, byte_99);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp9, basis_bits.bit_6);
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_3, ra000_ffff_tmp10);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_2, ra000_ffff_tmp11);
              ra000_ffff_tmp13 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp12);
              cc_range_a641_a66d_3 = simd_and(ra000_ffff_tmp13, basis_bits.bit_7);
              carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(44), sequence_ea_99_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ea_99_adv, cc_range_a641_a66d_3);
              struct_lower_Y.cc = simd_or(struct_lower_Y.cc, ra000_ffff_tmp14);
              byte_9a = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp15 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp16 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp15);
              ra000_ffff_tmp17 = simd_andc(basis_bits.bit_7, tmp7);
              ra000_ffff_tmp18 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp6);
              ra000_ffff_tmp19 = simd_or(ra000_ffff_tmp17, ra000_ffff_tmp18);
              ra000_ffff_tmp20 = simd_and(r800_ffff_tmp1, tmp3);
              ra000_ffff_tmp21 = simd_or(ra000_ffff_tmp19, ra000_ffff_tmp20);
              ra000_ffff_tmp22 = simd_or(ra000_ffff_tmp21, ra000_ffff_tmp7);
              ra000_ffff_tmp23 = simd_and(ra000_ffff_tmp1, tmp3);
              ra000_ffff_tmp24 = simd_or(ra000_ffff_tmp22, ra000_ffff_tmp23);
              ra000_ffff_tmp25 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp6);
              ra000_ffff_tmp26 = simd_or(ra000_ffff_tmp24, ra000_ffff_tmp25);
              ra000_ffff_tmp27 = simd_and(ra000_ffff_tmp9, tmp3);
              ra000_ffff_tmp28 = simd_or(ra000_ffff_tmp26, ra000_ffff_tmp27);
              ra000_ffff_tmp29 = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp28);
              ra000_ffff_tmp30 = simd_andc(ra000_ffff_tmp6, tmp7);
              ra000_ffff_tmp31 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp30);
              ra000_ffff_tmp32 = simd_or(ra000_ffff_tmp29, ra000_ffff_tmp31);
              ra000_ffff_tmp33 = simd_andc(tmp3, tmp7);
              ra000_ffff_tmp34 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp33);
              ra000_ffff_tmp35 = simd_or(ra000_ffff_tmp32, ra000_ffff_tmp34);
              ra000_ffff_tmp36 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp18);
              ra000_ffff_tmp37 = simd_or(ra000_ffff_tmp35, ra000_ffff_tmp36);
              ra000_ffff_tmp38 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp20);
              ra000_ffff_tmp39 = simd_or(ra000_ffff_tmp37, ra000_ffff_tmp38);
              ra000_ffff_tmp40 = simd_or(ra000_ffff_tmp39, byte_99);
              ra000_ffff_tmp41 = simd_and(ra000_ffff_tmp5, basis_bits.bit_4);
              ra000_ffff_tmp42 = simd_not(basis_bits.bit_6);
              ra000_ffff_tmp43 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp42), simd_andc(tmp3, basis_bits.bit_5));
              ra000_ffff_tmp44 = simd_and(ra000_ffff_tmp41, ra000_ffff_tmp43);
              cc_range_a681_a69b_3 = simd_or(ra000_ffff_tmp40, ra000_ffff_tmp44);
              carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(45), sequence_ea_9a_adv));
              ra000_ffff_tmp45 = simd_and(sequence_ea_9a_adv, cc_range_a681_a69b_3);
              struct_lower_Y.cc = simd_or(struct_lower_Y.cc, ra000_ffff_tmp45);
              ra000_ffff_tmp46 = simd_andc(ra000_ffff_tmp9, tmp8);
              byte_9c = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp46);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              ra000_ffff_tmp47 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
              ra000_ffff_tmp48 = simd_or(ra000_ffff_tmp33, ra000_ffff_tmp18);
              ra000_ffff_tmp49 = simd_or(ra000_ffff_tmp48, ra000_ffff_tmp20);
              ra000_ffff_tmp50 = simd_or(ra000_ffff_tmp49, ra000_ffff_tmp7);
              ra000_ffff_tmp51 = simd_or(ra000_ffff_tmp50, ra000_ffff_tmp23);
              ra000_ffff_tmp52 = simd_or(ra000_ffff_tmp51, ra000_ffff_tmp25);
              ra000_ffff_tmp53 = simd_and(ra000_ffff_tmp47, ra000_ffff_tmp52);
              ra000_ffff_tmp54 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp55 = simd_or(tmp7, basis_bits.bit_6);
              ra000_ffff_tmp56 = simd_not(ra000_ffff_tmp55);
              ra000_ffff_tmp57 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp56), simd_andc(ra000_ffff_tmp27, basis_bits.bit_3));
              ra000_ffff_tmp58 = simd_and(ra000_ffff_tmp54, ra000_ffff_tmp57);
              ra000_ffff_tmp59 = simd_or(ra000_ffff_tmp53, ra000_ffff_tmp58);
              ra000_ffff_tmp60 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp61 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp60);
              ra000_ffff_tmp62 = simd_and(ra000_ffff_tmp61, ra000_ffff_tmp33);
              ra000_ffff_tmp63 = simd_or(ra000_ffff_tmp59, ra000_ffff_tmp62);
              ra000_ffff_tmp64 = simd_and(ra000_ffff_tmp61, ra000_ffff_tmp18);
              ra000_ffff_tmp65 = simd_or(ra000_ffff_tmp63, ra000_ffff_tmp64);
              ra000_ffff_tmp66 = simd_and(ra000_ffff_tmp61, ra000_ffff_tmp20);
              ra000_ffff_tmp67 = simd_or(ra000_ffff_tmp65, ra000_ffff_tmp66);
              ra000_ffff_tmp68 = simd_and(ra000_ffff_tmp61, ra000_ffff_tmp7);
              ra000_ffff_tmp69 = simd_or(ra000_ffff_tmp67, ra000_ffff_tmp68);
              ra000_ffff_tmp70 = simd_and(ra000_ffff_tmp61, ra000_ffff_tmp23);
              ra000_ffff_tmp71 = simd_or(ra000_ffff_tmp69, ra000_ffff_tmp70);
              ra000_ffff_tmp72 = simd_and(ra000_ffff_tmp61, ra000_ffff_tmp25);
              ra000_ffff_tmp73 = simd_or(ra000_ffff_tmp71, ra000_ffff_tmp72);
              ra000_ffff_tmp74 = simd_and(ra000_ffff_tmp61, ra000_ffff_tmp27);
              cc_range_a723_a73f_3 = simd_or(ra000_ffff_tmp73, ra000_ffff_tmp74);
              carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(46), sequence_ea_9c_adv));
              ra000_ffff_tmp75 = simd_and(sequence_ea_9c_adv, cc_range_a723_a73f_3);
              struct_lower_Y.cc = simd_or(struct_lower_Y.cc, ra000_ffff_tmp75);
              byte_9d = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp25);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              ra000_ffff_tmp76 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp23);
              ra000_ffff_tmp77 = simd_or(ra000_ffff_tmp40, ra000_ffff_tmp76);
              ra000_ffff_tmp78 = simd_or(ra000_ffff_tmp77, byte_9d);
              ra000_ffff_tmp79 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp27);
              ra000_ffff_tmp80 = simd_or(ra000_ffff_tmp78, ra000_ffff_tmp79);
              ra000_ffff_tmp81 = simd_and(ra000_ffff_tmp47, ra000_ffff_tmp30);
              ra000_ffff_tmp82 = simd_or(ra000_ffff_tmp80, ra000_ffff_tmp81);
              ra000_ffff_tmp83 = simd_and(ra000_ffff_tmp47, ra000_ffff_tmp33);
              ra000_ffff_tmp84 = simd_or(ra000_ffff_tmp82, ra000_ffff_tmp83);
              ra000_ffff_tmp85 = simd_and(ra000_ffff_tmp47, ra000_ffff_tmp18);
              ra000_ffff_tmp86 = simd_or(ra000_ffff_tmp84, ra000_ffff_tmp85);
              ra000_ffff_tmp87 = simd_and(ra000_ffff_tmp47, ra000_ffff_tmp20);
              ra000_ffff_tmp88 = simd_or(ra000_ffff_tmp86, ra000_ffff_tmp87);
              ra000_ffff_tmp89 = simd_and(ra000_ffff_tmp47, ra000_ffff_tmp7);
              ra000_ffff_tmp90 = simd_or(ra000_ffff_tmp88, ra000_ffff_tmp89);
              ra000_ffff_tmp91 = simd_and(ra000_ffff_tmp47, ra000_ffff_tmp23);
              ra000_ffff_tmp92 = simd_or(ra000_ffff_tmp90, ra000_ffff_tmp91);
              ra000_ffff_tmp93 = simd_and(ra000_ffff_tmp47, ra000_ffff_tmp25);
              ra000_ffff_tmp94 = simd_or(ra000_ffff_tmp92, ra000_ffff_tmp93);
              ra000_ffff_tmp95 = simd_or(basis_bits.bit_5, tmp8);
              ra000_ffff_tmp96 = simd_and(basis_bits.bit_4, ra000_ffff_tmp95);
              ra000_ffff_tmp97 = simd_not(ra000_ffff_tmp96);
              ra000_ffff_tmp98 = simd_or(simd_and(basis_bits.bit_3, ra000_ffff_tmp97), simd_andc(ra000_ffff_tmp27, basis_bits.bit_3));
              ra000_ffff_tmp99 = simd_and(ra000_ffff_tmp54, ra000_ffff_tmp98);
              ra000_ffff_tmp100 = simd_or(ra000_ffff_tmp94, ra000_ffff_tmp99);
              ra000_ffff_tmp101 = simd_and(ra000_ffff_tmp61, ra000_ffff_tmp3);
              ra000_ffff_tmp102 = simd_or(ra000_ffff_tmp100, ra000_ffff_tmp101);
              ra000_ffff_tmp103 = simd_and(ra000_ffff_tmp61, ra000_ffff_tmp46);
              ra000_ffff_tmp104 = simd_or(ra000_ffff_tmp102, ra000_ffff_tmp103);
              cc_range_a741_a77f_3 = simd_or(ra000_ffff_tmp104, ra000_ffff_tmp74);
              carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(47), sequence_ea_9d_adv));
              ra000_ffff_tmp105 = simd_and(sequence_ea_9d_adv, cc_range_a741_a77f_3);
              struct_lower_Y.cc = simd_or(struct_lower_Y.cc, ra000_ffff_tmp105);
              ra000_ffff_tmp106 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp106);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp107 = simd_or(ra000_ffff_tmp21, ra000_ffff_tmp46);
              ra000_ffff_tmp108 = simd_or(ra000_ffff_tmp107, ra000_ffff_tmp106);
              ra000_ffff_tmp109 = simd_and(ra000_ffff_tmp16, ra000_ffff_tmp108);
              ra000_ffff_tmp110 = simd_or(ra000_ffff_tmp109, ra000_ffff_tmp31);
              ra000_ffff_tmp111 = simd_andc(ra000_ffff_tmp5, basis_bits.bit_4);
              ra000_ffff_tmp112 = simd_and(ra000_ffff_tmp111, ra000_ffff_tmp43);
              ra000_ffff_tmp113 = simd_or(ra000_ffff_tmp110, ra000_ffff_tmp112);
              ra000_ffff_tmp114 = simd_or(ra000_ffff_tmp113, ra000_ffff_tmp38);
              ra000_ffff_tmp115 = simd_or(ra000_ffff_tmp114, byte_99);
              ra000_ffff_tmp116 = simd_or(ra000_ffff_tmp115, ra000_ffff_tmp76);
              ra000_ffff_tmp117 = simd_or(ra000_ffff_tmp116, byte_9d);
              ra000_ffff_tmp118 = simd_or(ra000_ffff_tmp117, ra000_ffff_tmp79);
              ra000_ffff_tmp119 = simd_or(ra000_ffff_tmp118, ra000_ffff_tmp81);
              ra000_ffff_tmp120 = simd_or(ra000_ffff_tmp119, ra000_ffff_tmp83);
              ra000_ffff_tmp121 = simd_or(ra000_ffff_tmp120, ra000_ffff_tmp85);
              ra000_ffff_tmp122 = simd_or(ra000_ffff_tmp121, ra000_ffff_tmp87);
              cc_range_a781_a7a9_3 = simd_or(ra000_ffff_tmp122, ra000_ffff_tmp89);
              carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(48), sequence_ea_9e_adv));
              ra000_ffff_tmp123 = simd_and(sequence_ea_9e_adv, cc_range_a781_a7a9_3);
              struct_lower_Y.cc = simd_or(struct_lower_Y.cc, ra000_ffff_tmp123);
              byte_9f = ra000_ffff_tmp79;
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              ra000_ffff_tmp124 = simd_and(ra000_ffff_tmp61, ra000_ffff_tmp1);
              byte_range_b8_ba = simd_andc(ra000_ffff_tmp124, tmp3);
              carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(49), sequence_ea_9f_adv));
              ra000_ffff_tmp125 = simd_and(sequence_ea_9f_adv, byte_range_b8_ba);
              struct_lower_Y.cc = simd_or(struct_lower_Y.cc, ra000_ffff_tmp125);
              byte_ac = simd_and(ra000_ffff_tmp47, ra000_ffff_tmp46);
              sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
              byte_range_b0_bf = ra000_ffff_tmp61;
              carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(50), sequence_ea_ac_adv));
              ra000_ffff_tmp126 = simd_and(sequence_ea_ac_adv, byte_range_b0_bf);
              struct_lower_Y.cc = simd_or(struct_lower_Y.cc, ra000_ffff_tmp126);
              byte_ad = ra000_ffff_tmp93;
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              ra000_ffff_tmp127 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp128 = simd_and(basis_bits.bit_3, tmp5);
              ra000_ffff_tmp129 = simd_andc(ra000_ffff_tmp127, ra000_ffff_tmp128);
              ra000_ffff_tmp130 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp9);
              ra000_ffff_tmp131 = simd_or(ra000_ffff_tmp129, ra000_ffff_tmp130);
              ra000_ffff_tmp132 = simd_andc(r800_ffff_tmp1, basis_bits.bit_6);
              ra000_ffff_tmp133 = simd_and(ra000_ffff_tmp47, ra000_ffff_tmp132);
              cc_range_ab40_ab64_3 = simd_or(ra000_ffff_tmp131, ra000_ffff_tmp133);
              carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(51), sequence_ea_ad_adv));
              ra000_ffff_tmp134 = simd_and(sequence_ea_ad_adv, cc_range_ab40_ab64_3);
              struct_lower_Y.cc = simd_or(struct_lower_Y.cc, ra000_ffff_tmp134);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp27);
              carryQ.cq[52] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(52), ra000_ffff_tmp135));
              sequence_ef_ac = simd_and(ra000_ffff_tmp135, byte_ac);
              byte_ef_adv = ra000_ffff_tmp135;
              ra000_ffff_tmp136 = simd_andc(ra000_ffff_tmp16, basis_bits.bit_4);
              ra000_ffff_tmp137 = simd_and(basis_bits.bit_5, tmp3);
              ra000_ffff_tmp138 = simd_andc(ra000_ffff_tmp136, ra000_ffff_tmp137);
              ra000_ffff_tmp139 = simd_and(ra000_ffff_tmp111, tmp4);
              cc_range_fb00_fb13_3 = simd_or(ra000_ffff_tmp138, ra000_ffff_tmp139);
              carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(53), sequence_ef_ac_adv));
              ra000_ffff_tmp140 = simd_and(sequence_ef_ac_adv, cc_range_fb00_fb13_3);
              struct_lower_Y.cc = simd_or(struct_lower_Y.cc, ra000_ffff_tmp140);
              byte_bd = simd_and(byte_range_b0_bf, ra000_ffff_tmp25);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_range_81_9a = simd_and(ra000_ffff_tmp127, tmp10);
              carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(54), sequence_ef_bd_adv));
              ra000_ffff_tmp141 = simd_and(sequence_ef_bd_adv, byte_range_81_9a);
              struct_lower_Y.cc = simd_or(struct_lower_Y.cc, ra000_ffff_tmp141);
            }
            else {
              carryQ.CarryDequeueEnqueue(43, 12);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(20, 35);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(55, 23))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp9);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp3 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_90 = simd_andc(r10000_10ffff_tmp3, tmp9);
            carryQ.cq[55] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(55), r10000_10ffff_tmp4));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp4, byte_90);
            byte_f0_adv = r10000_10ffff_tmp4;
            carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(56), r10000_10ffff_tmp5));
            sequence_f0_90_90 = simd_and(r10000_10ffff_tmp5, byte_90);
            sequence_f0_90_adv = r10000_10ffff_tmp5;
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp1, basis_bits.bit_2);
            r10000_10ffff_tmp7 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            byte_range_a8_bf = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp7);
            carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_f0_90_90, carryQ.get_carry_in(57), sequence_f0_90_90_adv));
            r10000_10ffff_tmp8 = simd_and(sequence_f0_90_90_adv, byte_range_a8_bf);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r10000_10ffff_tmp8);
            r10000_10ffff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp10 = simd_andc(r10000_10ffff_tmp9, tmp7);
            byte_91 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp10);
            sequence_f0_90_91 = simd_and(sequence_f0_90_adv, byte_91);
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_80_8f = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp11);
            carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_f0_90_91, carryQ.get_carry_in(58), sequence_f0_90_91_adv));
            r10000_10ffff_tmp12 = simd_and(sequence_f0_90_91_adv, byte_range_80_8f);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r10000_10ffff_tmp12);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp1, r80_10ffff_tmp1);
            r10000_10ffff_tmp14 = simd_andc(tmp3, tmp7);
            byte_a3 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp14);
            carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(59), r10000_10ffff_tmp15));
            sequence_f0_91_a3 = simd_and(r10000_10ffff_tmp15, byte_a3);
            sequence_f0_91_adv = r10000_10ffff_tmp15;
            byte_range_80_9f = simd_andc(r10000_10ffff_tmp1, basis_bits.bit_2);
            carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(60), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_91_a3_adv, byte_range_80_9f);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp18 = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp9);
            byte_9d = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp18);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(61), r10000_10ffff_tmp19));
            sequence_f0_9d_90 = simd_and(r10000_10ffff_tmp19, byte_90);
            sequence_f0_9d_adv = r10000_10ffff_tmp19;
            r10000_10ffff_tmp20 = simd_and(basis_bits.bit_3, tmp7);
            r10000_10ffff_tmp21 = simd_not(r10000_10ffff_tmp20);
            r10000_10ffff_tmp22 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp23 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp22);
            r10000_10ffff_tmp24 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp21), simd_andc(r10000_10ffff_tmp24, basis_bits.bit_2));
            byte_range_9a_b3 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp25);
            carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(62), sequence_f0_9d_90_adv));
            r10000_10ffff_tmp26 = simd_and(sequence_f0_9d_90_adv, byte_range_9a_b3);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r10000_10ffff_tmp26);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            r10000_10ffff_tmp27 = simd_and(basis_bits.bit_5, tmp8);
            r10000_10ffff_tmp28 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp27);
            r10000_10ffff_tmp29 = simd_not(r10000_10ffff_tmp28);
            r10000_10ffff_tmp30 = simd_and(r10000_10ffff_tmp17, basis_bits.bit_6);
            r10000_10ffff_tmp31 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp29), simd_andc(r10000_10ffff_tmp30, basis_bits.bit_3));
            r10000_10ffff_tmp32 = simd_and(byte_range_80_9f, r10000_10ffff_tmp31);
            r10000_10ffff_tmp33 = simd_not(r10000_10ffff_tmp7);
            r10000_10ffff_tmp34 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp35 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp34);
            r10000_10ffff_tmp36 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp35);
            r10000_10ffff_tmp37 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp33), simd_andc(r10000_10ffff_tmp36, basis_bits.bit_2));
            r10000_10ffff_tmp38 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp37);
            cc_range_1d44e_1d456_4 = simd_or(r10000_10ffff_tmp32, r10000_10ffff_tmp38);
            carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(63), sequence_f0_9d_91_adv));
            r10000_10ffff_tmp39 = simd_and(sequence_f0_9d_91_adv, cc_range_1d44e_1d456_4);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r10000_10ffff_tmp39);
            r10000_10ffff_tmp40 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp41 = simd_andc(r10000_10ffff_tmp40, tmp7);
            byte_92 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp41);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            r10000_10ffff_tmp42 = simd_not(r10000_10ffff_tmp17);
            r10000_10ffff_tmp43 = simd_or(tmp7, basis_bits.bit_6);
            r10000_10ffff_tmp44 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp42), simd_andc(r10000_10ffff_tmp43, basis_bits.bit_3));
            r10000_10ffff_tmp45 = simd_and(byte_range_80_9f, r10000_10ffff_tmp44);
            r10000_10ffff_tmp46 = simd_and(r10000_10ffff_tmp1, r80_10ffff_tmp2);
            r10000_10ffff_tmp47 = simd_not(r10000_10ffff_tmp22);
            r10000_10ffff_tmp48 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp47), simd_andc(r10000_10ffff_tmp34, basis_bits.bit_4));
            r10000_10ffff_tmp49 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp48);
            r10000_10ffff_tmp50 = simd_or(r10000_10ffff_tmp45, r10000_10ffff_tmp49);
            r10000_10ffff_tmp51 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp52 = simd_and(r10000_10ffff_tmp51, tmp3);
            r10000_10ffff_tmp53 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp52);
            r10000_10ffff_tmp54 = simd_or(r10000_10ffff_tmp50, r10000_10ffff_tmp53);
            r10000_10ffff_tmp55 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp17);
            r10000_10ffff_tmp56 = simd_and(r10000_10ffff_tmp55, tmp8);
            cc_range_1d482_1d4bd_4 = simd_or(r10000_10ffff_tmp54, r10000_10ffff_tmp56);
            carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(64), sequence_f0_9d_92_adv));
            r10000_10ffff_tmp57 = simd_and(sequence_f0_9d_92_adv, cc_range_1d482_1d4bd_4);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r10000_10ffff_tmp57);
            byte_93 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp14);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            r10000_10ffff_tmp58 = simd_andc(tmp7, r10000_10ffff_tmp28);
            r10000_10ffff_tmp59 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp58);
            r10000_10ffff_tmp60 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp23);
            r10000_10ffff_tmp61 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp60);
            cc_range_1d4c0_1d4ea_4 = simd_or(r10000_10ffff_tmp59, r10000_10ffff_tmp61);
            carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(65), sequence_f0_9d_93_adv));
            r10000_10ffff_tmp62 = simd_and(sequence_f0_9d_93_adv, cc_range_1d4c0_1d4ea_4);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r10000_10ffff_tmp62);
            r10000_10ffff_tmp63 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp64 = simd_andc(r10000_10ffff_tmp63, tmp8);
            byte_94 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp64);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            r10000_10ffff_tmp65 = simd_andc(byte_range_80_8f, tmp7);
            r10000_10ffff_tmp66 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp67 = simd_not(r10000_10ffff_tmp66);
            r10000_10ffff_tmp68 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp30);
            r10000_10ffff_tmp69 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp67), simd_andc(r10000_10ffff_tmp68, basis_bits.bit_2));
            r10000_10ffff_tmp70 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp69);
            cc_range_1d500_1d51e_4 = simd_or(r10000_10ffff_tmp65, r10000_10ffff_tmp70);
            carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(66), sequence_f0_9d_94_adv));
            r10000_10ffff_tmp71 = simd_and(sequence_f0_9d_94_adv, cc_range_1d500_1d51e_4);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r10000_10ffff_tmp71);
            r10000_10ffff_tmp72 = simd_and(r10000_10ffff_tmp63, r10000_10ffff_tmp9);
            byte_95 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp72);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            r10000_10ffff_tmp73 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp17);
            r10000_10ffff_tmp74 = simd_not(r10000_10ffff_tmp73);
            r10000_10ffff_tmp75 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp43);
            r10000_10ffff_tmp76 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp74), simd_andc(r10000_10ffff_tmp75, basis_bits.bit_2));
            byte_range_92_ab = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp76);
            carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(67), sequence_f0_9d_95_adv));
            r10000_10ffff_tmp77 = simd_and(sequence_f0_9d_95_adv, byte_range_92_ab);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r10000_10ffff_tmp77);
            r10000_10ffff_tmp78 = simd_and(r10000_10ffff_tmp63, r10000_10ffff_tmp40);
            byte_96 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp78);
            sequence_f0_9d_96 = simd_and(sequence_f0_9d_adv, byte_96);
            r10000_10ffff_tmp79 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp35);
            r10000_10ffff_tmp80 = simd_and(byte_range_80_9f, r10000_10ffff_tmp79);
            r10000_10ffff_tmp81 = simd_and(r10000_10ffff_tmp46, basis_bits.bit_4);
            r10000_10ffff_tmp82 = simd_and(r10000_10ffff_tmp81, r10000_10ffff_tmp22);
            cc_range_1d586_1d5ba_4 = simd_or(r10000_10ffff_tmp80, r10000_10ffff_tmp82);
            carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_96, carryQ.get_carry_in(68), sequence_f0_9d_96_adv));
            r10000_10ffff_tmp83 = simd_and(sequence_f0_9d_96_adv, cc_range_1d586_1d5ba_4);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r10000_10ffff_tmp83);
            r10000_10ffff_tmp84 = simd_and(r10000_10ffff_tmp63, tmp3);
            byte_97 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp84);
            sequence_f0_9d_97 = simd_and(sequence_f0_9d_adv, byte_97);
            r10000_10ffff_tmp85 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp20);
            r10000_10ffff_tmp86 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp30);
            r10000_10ffff_tmp87 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp86);
            cc_range_1d5c0_1d5ee_4 = simd_or(r10000_10ffff_tmp85, r10000_10ffff_tmp87);
            carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_97, carryQ.get_carry_in(69), sequence_f0_9d_97_adv));
            r10000_10ffff_tmp88 = simd_and(sequence_f0_9d_97_adv, cc_range_1d5c0_1d5ee_4);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r10000_10ffff_tmp88);
            r10000_10ffff_tmp89 = simd_andc(r10000_10ffff_tmp51, tmp8);
            byte_98 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp89);
            sequence_f0_9d_98 = simd_and(sequence_f0_9d_adv, byte_98);
            r10000_10ffff_tmp90 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
            r10000_10ffff_tmp91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp44);
            cc_range_1d600_1d622_4 = simd_or(r10000_10ffff_tmp90, r10000_10ffff_tmp91);
            carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_98, carryQ.get_carry_in(70), sequence_f0_9d_98_adv));
            r10000_10ffff_tmp92 = simd_and(sequence_f0_9d_98_adv, cc_range_1d600_1d622_4);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r10000_10ffff_tmp92);
            r10000_10ffff_tmp93 = simd_and(r10000_10ffff_tmp51, r10000_10ffff_tmp9);
            byte_99 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp93);
            sequence_f0_9d_99 = simd_and(sequence_f0_9d_adv, byte_99);
            r10000_10ffff_tmp94 = simd_not(basis_bits.bit_3);
            r10000_10ffff_tmp95 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp94), simd_andc(r10000_10ffff_tmp36, basis_bits.bit_2));
            byte_range_96_af = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp95);
            carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_99, carryQ.get_carry_in(71), sequence_f0_9d_99_adv));
            r10000_10ffff_tmp96 = simd_and(sequence_f0_9d_99_adv, byte_range_96_af);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r10000_10ffff_tmp96);
            r10000_10ffff_tmp97 = simd_and(r10000_10ffff_tmp51, r10000_10ffff_tmp40);
            byte_9a = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp97);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            r10000_10ffff_tmp98 = simd_not(r10000_10ffff_tmp79);
            r10000_10ffff_tmp99 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp98), simd_andc(r10000_10ffff_tmp60, basis_bits.bit_2));
            byte_range_8a_a5 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp99);
            carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(72), sequence_f0_9d_9a_adv));
            r10000_10ffff_tmp100 = simd_and(sequence_f0_9d_9a_adv, byte_range_8a_a5);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r10000_10ffff_tmp100);
            byte_9b = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp52);
            sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
            r10000_10ffff_tmp101 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(r10000_10ffff_tmp43, basis_bits.bit_3));
            r10000_10ffff_tmp102 = simd_and(byte_range_80_9f, r10000_10ffff_tmp101);
            r10000_10ffff_tmp103 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp43);
            r10000_10ffff_tmp104 = simd_not(r10000_10ffff_tmp103);
            r10000_10ffff_tmp105 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp17);
            r10000_10ffff_tmp106 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp104), simd_andc(r10000_10ffff_tmp105, basis_bits.bit_2));
            r10000_10ffff_tmp107 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp106);
            r10000_10ffff_tmp108 = simd_or(r10000_10ffff_tmp102, r10000_10ffff_tmp107);
            cc_range_1d6c2_1d6fc_4 = simd_or(r10000_10ffff_tmp108, r10000_10ffff_tmp55);
            carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(73), sequence_f0_9d_9b_adv));
            r10000_10ffff_tmp109 = simd_and(sequence_f0_9d_9b_adv, cc_range_1d6c2_1d6fc_4);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r10000_10ffff_tmp109);
            r10000_10ffff_tmp110 = simd_andc(r10000_10ffff_tmp17, tmp8);
            byte_9c = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp110);
            sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
            r10000_10ffff_tmp111 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp28);
            r10000_10ffff_tmp112 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp111);
            r10000_10ffff_tmp113 = simd_not(basis_bits.bit_5);
            r10000_10ffff_tmp114 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp113), simd_andc(r10000_10ffff_tmp34, basis_bits.bit_4));
            r10000_10ffff_tmp115 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp114);
            r10000_10ffff_tmp116 = simd_or(r10000_10ffff_tmp112, r10000_10ffff_tmp115);
            r10000_10ffff_tmp117 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp35);
            cc_range_1d700_1d736_4 = simd_or(r10000_10ffff_tmp116, r10000_10ffff_tmp117);
            carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(74), sequence_f0_9d_9c_adv));
            r10000_10ffff_tmp118 = simd_and(sequence_f0_9d_9c_adv, cc_range_1d700_1d736_4);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r10000_10ffff_tmp118);
            sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
            r10000_10ffff_tmp119 = simd_and(basis_bits.bit_5, tmp3);
            r10000_10ffff_tmp120 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp119);
            r10000_10ffff_tmp121 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp120);
            r10000_10ffff_tmp122 = simd_andc(r10000_10ffff_tmp3, basis_bits.bit_4);
            r10000_10ffff_tmp123 = simd_andc(r10000_10ffff_tmp122, r10000_10ffff_tmp34);
            r10000_10ffff_tmp124 = simd_or(r10000_10ffff_tmp121, r10000_10ffff_tmp123);
            cc_range_1d740_1d770_4 = simd_or(r10000_10ffff_tmp124, r10000_10ffff_tmp46);
            carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(75), sequence_f0_9d_9d_adv));
            r10000_10ffff_tmp125 = simd_and(sequence_f0_9d_9d_adv, cc_range_1d740_1d770_4);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r10000_10ffff_tmp125);
            r10000_10ffff_tmp126 = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp40);
            byte_9e = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp126);
            sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
            r10000_10ffff_tmp127 = simd_or(basis_bits.bit_5, tmp8);
            r10000_10ffff_tmp128 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp127);
            r10000_10ffff_tmp129 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp128);
            r10000_10ffff_tmp130 = simd_and(byte_range_80_8f, basis_bits.bit_4);
            r10000_10ffff_tmp131 = simd_and(r10000_10ffff_tmp130, r10000_10ffff_tmp22);
            r10000_10ffff_tmp132 = simd_or(r10000_10ffff_tmp129, r10000_10ffff_tmp131);
            cc_range_1d780_1d7aa_4 = simd_or(r10000_10ffff_tmp132, r10000_10ffff_tmp61);
            carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(76), sequence_f0_9d_9e_adv));
            r10000_10ffff_tmp133 = simd_and(sequence_f0_9d_9e_adv, cc_range_1d780_1d7aa_4);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r10000_10ffff_tmp133);
            r10000_10ffff_tmp134 = simd_and(r10000_10ffff_tmp17, tmp3);
            byte_9f = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp134);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            r10000_10ffff_tmp135 = simd_andc(r10000_10ffff_tmp65, tmp3);
            r10000_10ffff_tmp136 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp47), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
            r10000_10ffff_tmp137 = simd_and(byte_range_80_8f, r10000_10ffff_tmp136);
            r10000_10ffff_tmp138 = simd_or(r10000_10ffff_tmp135, r10000_10ffff_tmp137);
            r10000_10ffff_tmp139 = simd_and(byte_range_80_8f, r10000_10ffff_tmp52);
            cc_range_1d7c0_1d7cb_4 = simd_or(r10000_10ffff_tmp138, r10000_10ffff_tmp139);
            carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(77), sequence_f0_9d_9f_adv));
            r10000_10ffff_tmp140 = simd_and(sequence_f0_9d_9f_adv, cc_range_1d7c0_1d7cb_4);
            struct_lower_Y.cc = simd_or(struct_lower_Y.cc, r10000_10ffff_tmp140);
          }
          else {
            carryQ.CarryDequeueEnqueue(55, 23);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 78);
        }
        carryQ.CarryQ_Adjust(78);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<78, 0> carryQ;
  };

  struct Property_cwu_Y {
  Property_cwu_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_cwu_Y & struct_cwu_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10;
		BitBlock byte_range_61_7a, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, byte_c2, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock byte_b5, byte_c2_adv, r80_7ff_tmp11, r80_7ff_tmp12, byte_c3;
		BitBlock r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16;
		BitBlock r80_7ff_tmp17, r80_7ff_tmp18, r80_7ff_tmp19, r80_7ff_tmp20;
		BitBlock r80_7ff_tmp21, r80_7ff_tmp22, cc_range_df_f8_2, byte_c3_adv;
		BitBlock r80_7ff_tmp23, byte_range_c4_cf, r100_3ff_tmp1, byte_range_c4_cb;
		BitBlock r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3, byte_range_c4_c8;
		BitBlock r100_2ff_tmp4, r100_2ff_tmp5, byte_c9, byte_range_80_8f;
		BitBlock r100_2ff_tmp6, r100_2ff_tmp7, r100_2ff_tmp8, r100_24f_tmp1;
		BitBlock byte_range_c4_c5, r100_17f_tmp1, byte_c4, r100_17f_tmp2;
		BitBlock r100_17f_tmp3, r100_17f_tmp4, r100_17f_tmp5, r100_17f_tmp6;
		BitBlock r100_17f_tmp7, r100_17f_tmp8, r100_17f_tmp9, r100_17f_tmp10;
		BitBlock r100_17f_tmp11, r100_17f_tmp12, r100_17f_tmp13, r100_17f_tmp14;
		BitBlock r100_17f_tmp15, r100_17f_tmp16, r100_17f_tmp17, r100_17f_tmp18;
		BitBlock r100_17f_tmp19, r100_17f_tmp20, r100_17f_tmp21, r100_17f_tmp22;
		BitBlock r100_17f_tmp23, r100_17f_tmp24, r100_17f_tmp25, r100_17f_tmp26;
		BitBlock r100_17f_tmp27, r100_17f_tmp28, r100_17f_tmp29, r100_17f_tmp30;
		BitBlock r100_17f_tmp31, r100_17f_tmp32, r100_17f_tmp33, r100_17f_tmp34;
		BitBlock r100_17f_tmp35, r100_17f_tmp36, r100_17f_tmp37, r100_17f_tmp38;
		BitBlock r100_17f_tmp39, r100_17f_tmp40, r100_17f_tmp41, r100_17f_tmp42;
		BitBlock r100_17f_tmp43, r100_17f_tmp44, r100_17f_tmp45, r100_17f_tmp46;
		BitBlock r100_17f_tmp47, r100_17f_tmp48, r100_17f_tmp49, r100_17f_tmp50;
		BitBlock r100_17f_tmp51, r100_17f_tmp52, r100_17f_tmp53, r100_17f_tmp54;
		BitBlock r100_17f_tmp55, r100_17f_tmp56, r100_17f_tmp57, r100_17f_tmp58;
		BitBlock r100_17f_tmp59, r100_17f_tmp60, r100_17f_tmp61, r100_17f_tmp62;
		BitBlock r100_17f_tmp63, r100_17f_tmp64, cc_range_101_13e_2, byte_c4_adv;
		BitBlock r100_17f_tmp65, byte_c5, r100_17f_tmp66, r100_17f_tmp67;
		BitBlock r100_17f_tmp68, r100_17f_tmp69, r100_17f_tmp70, r100_17f_tmp71;
		BitBlock r100_17f_tmp72, r100_17f_tmp73, r100_17f_tmp74, r100_17f_tmp75;
		BitBlock r100_17f_tmp76, r100_17f_tmp77, r100_17f_tmp78, r100_17f_tmp79;
		BitBlock r100_17f_tmp80, r100_17f_tmp81, r100_17f_tmp82, r100_17f_tmp83;
		BitBlock r100_17f_tmp84, r100_17f_tmp85, r100_17f_tmp86, r100_17f_tmp87;
		BitBlock r100_17f_tmp88, r100_17f_tmp89, r100_17f_tmp90, r100_17f_tmp91;
		BitBlock r100_17f_tmp92, r100_17f_tmp93, r100_17f_tmp94, r100_17f_tmp95;
		BitBlock r100_17f_tmp96, r100_17f_tmp97, r100_17f_tmp98, r100_17f_tmp99;
		BitBlock cc_range_140_17e_2, byte_c5_adv, r100_17f_tmp100, r100_24f_tmp2;
		BitBlock r100_24f_tmp3, byte_range_c6_c8, r100_24f_tmp4, r180_24f_tmp1;
		BitBlock byte_c6, r180_24f_tmp2, r180_24f_tmp3, r180_24f_tmp4, r180_24f_tmp5;
		BitBlock r180_24f_tmp6, r180_24f_tmp7, r180_24f_tmp8, r180_24f_tmp9;
		BitBlock r180_24f_tmp10, r180_24f_tmp11, r180_24f_tmp12, r180_24f_tmp13;
		BitBlock r180_24f_tmp14, r180_24f_tmp15, r180_24f_tmp16, r180_24f_tmp17;
		BitBlock r180_24f_tmp18, r180_24f_tmp19, r180_24f_tmp20, r180_24f_tmp21;
		BitBlock r180_24f_tmp22, r180_24f_tmp23, r180_24f_tmp24, r180_24f_tmp25;
		BitBlock r180_24f_tmp26, r180_24f_tmp27, r180_24f_tmp28, r180_24f_tmp29;
		BitBlock r180_24f_tmp30, r180_24f_tmp31, r180_24f_tmp32, r180_24f_tmp33;
		BitBlock r180_24f_tmp34, r180_24f_tmp35, r180_24f_tmp36, r180_24f_tmp37;
		BitBlock r180_24f_tmp38, r180_24f_tmp39, r180_24f_tmp40, r180_24f_tmp41;
		BitBlock r180_24f_tmp42, r180_24f_tmp43, r180_24f_tmp44, r180_24f_tmp45;
		BitBlock r180_24f_tmp46, r180_24f_tmp47, cc_range_180_1bf_2, byte_c6_adv;
		BitBlock r180_24f_tmp48, r180_24f_tmp49, byte_c7, r180_24f_tmp50;
		BitBlock r180_24f_tmp51, r180_24f_tmp52, r180_24f_tmp53, r180_24f_tmp54;
		BitBlock r180_24f_tmp55, r180_24f_tmp56, r180_24f_tmp57, r180_24f_tmp58;
		BitBlock r180_24f_tmp59, r180_24f_tmp60, r180_24f_tmp61, r180_24f_tmp62;
		BitBlock r180_24f_tmp63, r180_24f_tmp64, r180_24f_tmp65, r180_24f_tmp66;
		BitBlock r180_24f_tmp67, r180_24f_tmp68, r180_24f_tmp69, r180_24f_tmp70;
		BitBlock r180_24f_tmp71, r180_24f_tmp72, r180_24f_tmp73, r180_24f_tmp74;
		BitBlock r180_24f_tmp75, r180_24f_tmp76, r180_24f_tmp77, r180_24f_tmp78;
		BitBlock r180_24f_tmp79, r180_24f_tmp80, r180_24f_tmp81, r180_24f_tmp82;
		BitBlock r180_24f_tmp83, r180_24f_tmp84, r180_24f_tmp85, r180_24f_tmp86;
		BitBlock r180_24f_tmp87, r180_24f_tmp88, r180_24f_tmp89, r180_24f_tmp90;
		BitBlock r180_24f_tmp91, r180_24f_tmp92, r180_24f_tmp93, r180_24f_tmp94;
		BitBlock r180_24f_tmp95, r180_24f_tmp96, r180_24f_tmp97, r180_24f_tmp98;
		BitBlock r180_24f_tmp99, r180_24f_tmp100, r180_24f_tmp101, r180_24f_tmp102;
		BitBlock cc_range_1c5_1ff_2, byte_c7_adv, r180_24f_tmp103, byte_c8;
		BitBlock r180_24f_tmp104, r180_24f_tmp105, r180_24f_tmp106, r180_24f_tmp107;
		BitBlock r180_24f_tmp108, r180_24f_tmp109, r180_24f_tmp110, r180_24f_tmp111;
		BitBlock r180_24f_tmp112, r180_24f_tmp113, r180_24f_tmp114, r180_24f_tmp115;
		BitBlock r180_24f_tmp116, r180_24f_tmp117, r180_24f_tmp118, r180_24f_tmp119;
		BitBlock r180_24f_tmp120, r180_24f_tmp121, r180_24f_tmp122, r180_24f_tmp123;
		BitBlock r180_24f_tmp124, r180_24f_tmp125, r180_24f_tmp126, r180_24f_tmp127;
		BitBlock r180_24f_tmp128, r180_24f_tmp129, r180_24f_tmp130, r180_24f_tmp131;
		BitBlock r180_24f_tmp132, r180_24f_tmp133, r180_24f_tmp134, r180_24f_tmp135;
		BitBlock r180_24f_tmp136, r180_24f_tmp137, r180_24f_tmp138, r180_24f_tmp139;
		BitBlock cc_range_201_23f_2, byte_c8_adv, r180_24f_tmp140, r180_24f_tmp141;
		BitBlock r180_24f_tmp142, r180_24f_tmp143, r180_24f_tmp144, r180_24f_tmp145;
		BitBlock r180_24f_tmp146, cc_range_240_24f_2, byte_c9_adv, r180_24f_tmp147;
		BitBlock byte_range_90_bf, r100_2ff_tmp9, r100_2ff_tmp10, byte_ca;
		BitBlock byte_range_80_af, r100_2ff_tmp11, r100_2ff_tmp12, r100_2ff_tmp13;
		BitBlock r250_2af_tmp1, r250_2af_tmp2, r250_2af_tmp3, r250_2af_tmp4;
		BitBlock r250_2af_tmp5, r250_2af_tmp6, r250_2af_tmp7, r250_2af_tmp8;
		BitBlock r250_2af_tmp9, r250_2af_tmp10, r250_2af_tmp11, r250_2af_tmp12;
		BitBlock r250_2af_tmp13, r250_2af_tmp14, r250_2af_tmp15, r250_2af_tmp16;
		BitBlock r250_2af_tmp17, r250_2af_tmp18, r250_2af_tmp19, r250_2af_tmp20;
		BitBlock r250_2af_tmp21, r250_2af_tmp22, r250_2af_tmp23, r250_2af_tmp24;
		BitBlock r250_2af_tmp25, r250_2af_tmp26, r250_2af_tmp27, r250_2af_tmp28;
		BitBlock r250_2af_tmp29, r250_2af_tmp30, r250_2af_tmp31, r250_2af_tmp32;
		BitBlock r250_2af_tmp33, r250_2af_tmp34, r250_2af_tmp35, r250_2af_tmp36;
		BitBlock r250_2af_tmp37, r250_2af_tmp38, r250_2af_tmp39, r250_2af_tmp40;
		BitBlock cc_range_250_27d_2, r250_2af_tmp41, r250_2af_tmp42, r250_2af_tmp43;
		BitBlock r250_2af_tmp44, r250_2af_tmp45, r250_2af_tmp46, r250_2af_tmp47;
		BitBlock r250_2af_tmp48, r250_2af_tmp49, r250_2af_tmp50, cc_range_280_29e_2;
		BitBlock byte_ca_adv, r250_2af_tmp51, r100_3ff_tmp2, byte_cc, r100_3ff_tmp3;
		BitBlock byte_cd, r100_3ff_tmp4, r100_3ff_tmp5, r100_3ff_tmp6, r300_36f_tmp1;
		BitBlock byte_85, byte_cd_adv, r300_36f_tmp2, byte_range_b0_bf, r100_3ff_tmp7;
		BitBlock r100_3ff_tmp8, byte_range_ce_cf, r100_3ff_tmp9, r370_3ff_tmp1;
		BitBlock r370_3ff_tmp2, r370_3ff_tmp3, r370_3ff_tmp4, r370_3ff_tmp5;
		BitBlock r370_3ff_tmp6, r370_3ff_tmp7, r370_3ff_tmp8, cc_range_371_37b_2;
		BitBlock r370_3ff_tmp9, r370_3ff_tmp10, byte_ce, r370_3ff_tmp11;
		BitBlock r370_3ff_tmp12, r370_3ff_tmp13, r370_3ff_tmp14, r370_3ff_tmp15;
		BitBlock r370_3ff_tmp16, cc_range_390_3ac_2, byte_ce_adv, r370_3ff_tmp17;
		BitBlock byte_cf, r370_3ff_tmp18, r370_3ff_tmp19, r370_3ff_tmp20;
		BitBlock r370_3ff_tmp21, r370_3ff_tmp22, r370_3ff_tmp23, r370_3ff_tmp24;
		BitBlock r370_3ff_tmp25, r370_3ff_tmp26, r370_3ff_tmp27, r370_3ff_tmp28;
		BitBlock r370_3ff_tmp29, r370_3ff_tmp30, r370_3ff_tmp31, r370_3ff_tmp32;
		BitBlock r370_3ff_tmp33, r370_3ff_tmp34, r370_3ff_tmp35, r370_3ff_tmp36;
		BitBlock r370_3ff_tmp37, r370_3ff_tmp38, r370_3ff_tmp39, r370_3ff_tmp40;
		BitBlock r370_3ff_tmp41, r370_3ff_tmp42, r370_3ff_tmp43, r370_3ff_tmp44;
		BitBlock r370_3ff_tmp45, r370_3ff_tmp46, r370_3ff_tmp47, r370_3ff_tmp48;
		BitBlock r370_3ff_tmp49, r370_3ff_tmp50, r370_3ff_tmp51, r370_3ff_tmp52;
		BitBlock r370_3ff_tmp53, r370_3ff_tmp54, r370_3ff_tmp55, r370_3ff_tmp56;
		BitBlock r370_3ff_tmp57, r370_3ff_tmp58, r370_3ff_tmp59, r370_3ff_tmp60;
		BitBlock r370_3ff_tmp61, r370_3ff_tmp62, r370_3ff_tmp63, r370_3ff_tmp64;
		BitBlock cc_range_3c0_3fb_2, byte_cf_adv, r370_3ff_tmp65, r80_7ff_tmp24;
		BitBlock r80_7ff_tmp25, byte_range_d0_d7, byte_range_d0_d3, byte_d0;
		BitBlock byte_d0_adv, r400_4ff_tmp1, r400_4ff_tmp2, byte_d1, r400_4ff_tmp3;
		BitBlock r400_4ff_tmp4, r400_4ff_tmp5, r400_4ff_tmp6, r400_4ff_tmp7;
		BitBlock r400_4ff_tmp8, r400_4ff_tmp9, r400_4ff_tmp10, r400_4ff_tmp11;
		BitBlock r400_4ff_tmp12, r400_4ff_tmp13, r400_4ff_tmp14, r400_4ff_tmp15;
		BitBlock r400_4ff_tmp16, r400_4ff_tmp17, r400_4ff_tmp18, r400_4ff_tmp19;
		BitBlock r400_4ff_tmp20, r400_4ff_tmp21, r400_4ff_tmp22, r400_4ff_tmp23;
		BitBlock r400_4ff_tmp24, r400_4ff_tmp25, r400_4ff_tmp26, r400_4ff_tmp27;
		BitBlock r400_4ff_tmp28, r400_4ff_tmp29, r400_4ff_tmp30, r400_4ff_tmp31;
		BitBlock r400_4ff_tmp32, r400_4ff_tmp33, r400_4ff_tmp34, r400_4ff_tmp35;
		BitBlock r400_4ff_tmp36, r400_4ff_tmp37, r400_4ff_tmp38, r400_4ff_tmp39;
		BitBlock r400_4ff_tmp40, r400_4ff_tmp41, cc_range_440_47f_2, byte_d1_adv;
		BitBlock r400_4ff_tmp42, byte_d2, r400_4ff_tmp43, r400_4ff_tmp44;
		BitBlock r400_4ff_tmp45, r400_4ff_tmp46, r400_4ff_tmp47, r400_4ff_tmp48;
		BitBlock r400_4ff_tmp49, r400_4ff_tmp50, r400_4ff_tmp51, r400_4ff_tmp52;
		BitBlock r400_4ff_tmp53, r400_4ff_tmp54, r400_4ff_tmp55, r400_4ff_tmp56;
		BitBlock r400_4ff_tmp57, r400_4ff_tmp58, r400_4ff_tmp59, r400_4ff_tmp60;
		BitBlock r400_4ff_tmp61, r400_4ff_tmp62, r400_4ff_tmp63, r400_4ff_tmp64;
		BitBlock r400_4ff_tmp65, r400_4ff_tmp66, r400_4ff_tmp67, r400_4ff_tmp68;
		BitBlock r400_4ff_tmp69, r400_4ff_tmp70, r400_4ff_tmp71, r400_4ff_tmp72;
		BitBlock r400_4ff_tmp73, r400_4ff_tmp74, r400_4ff_tmp75, r400_4ff_tmp76;
		BitBlock r400_4ff_tmp77, r400_4ff_tmp78, r400_4ff_tmp79, cc_range_481_4bf_2;
		BitBlock byte_d2_adv, r400_4ff_tmp80, byte_d3, r400_4ff_tmp81, r400_4ff_tmp82;
		BitBlock r400_4ff_tmp83, r400_4ff_tmp84, r400_4ff_tmp85, r400_4ff_tmp86;
		BitBlock r400_4ff_tmp87, r400_4ff_tmp88, r400_4ff_tmp89, r400_4ff_tmp90;
		BitBlock r400_4ff_tmp91, r400_4ff_tmp92, r400_4ff_tmp93, r400_4ff_tmp94;
		BitBlock r400_4ff_tmp95, r400_4ff_tmp96, r400_4ff_tmp97, r400_4ff_tmp98;
		BitBlock r400_4ff_tmp99, r400_4ff_tmp100, r400_4ff_tmp101, r400_4ff_tmp102;
		BitBlock r400_4ff_tmp103, r400_4ff_tmp104, r400_4ff_tmp105, r400_4ff_tmp106;
		BitBlock r400_4ff_tmp107, r400_4ff_tmp108, r400_4ff_tmp109, r400_4ff_tmp110;
		BitBlock r400_4ff_tmp111, r400_4ff_tmp112, r400_4ff_tmp113, r400_4ff_tmp114;
		BitBlock r400_4ff_tmp115, r400_4ff_tmp116, cc_range_4c2_4ff_2, byte_d3_adv;
		BitBlock r400_4ff_tmp117, r400_5ff_tmp1, byte_range_d4_d5, r400_5ff_tmp2;
		BitBlock byte_d6, r400_5ff_tmp3, r400_5ff_tmp4, r400_5ff_tmp5, r500_58f_tmp1;
		BitBlock byte_d4, r500_58f_tmp2, r500_58f_tmp3, cc_range_501_52f_2;
		BitBlock byte_d4_adv, r500_52f_tmp1, r500_58f_tmp4, byte_d5, r500_58f_tmp5;
		BitBlock r500_58f_tmp6, r530_58f_tmp1, r530_58f_tmp2, byte_range_a1_bf;
		BitBlock byte_d5_adv, r530_58f_tmp3, byte_range_80_87, byte_d6_adv;
		BitBlock r530_58f_tmp4, r80_10ffff_tmp1, byte_range_e0_ef, byte_range_e0_e3;
		BitBlock r800_ffff_tmp1, r800_ffff_tmp2, byte_e4, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, r800_ffff_tmp5, byte_range_80_b7, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, r800_ffff_tmp8, r800_4dff_tmp1, byte_range_e0_e1;
		BitBlock r800_1fff_tmp1, r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1;
		BitBlock r1000_1fff_tmp2, r1000_1fff_tmp3, r1000_1fff_tmp4, sequence_e1_b5;
		BitBlock byte_e1_adv, r1000_1fff_tmp5, cc_range_1d79_1d7d_3;
		BitBlock sequence_e1_b5_adv, r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8;
		BitBlock byte_b8, sequence_e1_b8, cc_range_1e01_1e3f_3, sequence_e1_b8_adv;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, byte_b9, sequence_e1_b9;
		BitBlock cc_range_1e41_1e7f_3, sequence_e1_b9_adv, r1000_1fff_tmp11;
		BitBlock r1000_1fff_tmp12, r1000_1fff_tmp13, byte_ba, sequence_e1_ba;
		BitBlock r1000_1fff_tmp14, r1000_1fff_tmp15, r1000_1fff_tmp16;
		BitBlock r1000_1fff_tmp17, r1000_1fff_tmp18, r1000_1fff_tmp19;
		BitBlock r1000_1fff_tmp20, r1000_1fff_tmp21, r1000_1fff_tmp22;
		BitBlock r1000_1fff_tmp23, r1000_1fff_tmp24, r1000_1fff_tmp25;
		BitBlock r1000_1fff_tmp26, r1000_1fff_tmp27, r1000_1fff_tmp28;
		BitBlock r1000_1fff_tmp29, r1000_1fff_tmp30, r1000_1fff_tmp31;
		BitBlock r1000_1fff_tmp32, r1000_1fff_tmp33, r1000_1fff_tmp34;
		BitBlock r1000_1fff_tmp35, r1000_1fff_tmp36, r1000_1fff_tmp37;
		BitBlock r1000_1fff_tmp38, r1000_1fff_tmp39, r1000_1fff_tmp40;
		BitBlock r1000_1fff_tmp41, r1000_1fff_tmp42, r1000_1fff_tmp43;
		BitBlock r1000_1fff_tmp44, r1000_1fff_tmp45, r1000_1fff_tmp46;
		BitBlock r1000_1fff_tmp47, r1000_1fff_tmp48, r1000_1fff_tmp49;
		BitBlock r1000_1fff_tmp50, r1000_1fff_tmp51, r1000_1fff_tmp52;
		BitBlock r1000_1fff_tmp53, r1000_1fff_tmp54, r1000_1fff_tmp55;
		BitBlock r1000_1fff_tmp56, r1000_1fff_tmp57, r1000_1fff_tmp58;
		BitBlock r1000_1fff_tmp59, r1000_1fff_tmp60, r1000_1fff_tmp61;
		BitBlock r1000_1fff_tmp62, r1000_1fff_tmp63, r1000_1fff_tmp64;
		BitBlock r1000_1fff_tmp65, r1000_1fff_tmp66, r1000_1fff_tmp67;
		BitBlock r1000_1fff_tmp68, r1000_1fff_tmp69, r1000_1fff_tmp70;
		BitBlock cc_range_1e81_1ebf_3, sequence_e1_ba_adv, r1000_1fff_tmp71, byte_bb;
		BitBlock sequence_e1_bb, cc_range_1ec1_1eff_3, sequence_e1_bb_adv;
		BitBlock r1000_1fff_tmp72, r1000_1fff_tmp73, byte_bc, sequence_e1_bc;
		BitBlock r1000_1fff_tmp74, r1000_1fff_tmp75, r1000_1fff_tmp76;
		BitBlock r1000_1fff_tmp77, r1000_1fff_tmp78, r1000_1fff_tmp79;
		BitBlock r1000_1fff_tmp80, r1000_1fff_tmp81, cc_range_1f00_1f30_3;
		BitBlock sequence_e1_bc_adv, r1000_1fff_tmp82, byte_bd, sequence_e1_bd;
		BitBlock r1000_1fff_tmp83, r1000_1fff_tmp84, r1000_1fff_tmp85;
		BitBlock r1000_1fff_tmp86, r1000_1fff_tmp87, cc_range_1f40_1f70_3;
		BitBlock sequence_e1_bd_adv, r1000_1fff_tmp88, r1000_1fff_tmp89, byte_be;
		BitBlock sequence_e1_be, r1000_1fff_tmp90, r1000_1fff_tmp91, r1000_1fff_tmp92;
		BitBlock r1000_1fff_tmp93, r1000_1fff_tmp94, r1000_1fff_tmp95;
		BitBlock r1000_1fff_tmp96, r1000_1fff_tmp97, cc_range_1f80_1fbe_3;
		BitBlock sequence_e1_be_adv, r1000_1fff_tmp98, byte_bf, sequence_e1_bf;
		BitBlock r1000_1fff_tmp99, r1000_1fff_tmp100, r1000_1fff_tmp101;
		BitBlock r1000_1fff_tmp102, r1000_1fff_tmp103, r1000_1fff_tmp104;
		BitBlock r1000_1fff_tmp105, r1000_1fff_tmp106, r1000_1fff_tmp107;
		BitBlock r1000_1fff_tmp108, r1000_1fff_tmp109, r1000_1fff_tmp110;
		BitBlock r1000_1fff_tmp111, r1000_1fff_tmp112, r1000_1fff_tmp113;
		BitBlock cc_range_1fc2_1ffc_3, sequence_e1_bf_adv, r1000_1fff_tmp114;
		BitBlock r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5, sequence_e2_85;
		BitBlock byte_e2_adv, r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8;
		BitBlock r2000_2fff_tmp9, r2000_2fff_tmp10, cc_range_214e_2170_3;
		BitBlock sequence_e2_85_adv, r2000_2fff_tmp11, r2000_2fff_tmp12, byte_86;
		BitBlock sequence_e2_86, byte_84, sequence_e2_86_adv, r2000_2fff_tmp13;
		BitBlock r2000_2fff_tmp14, r2000_2fff_tmp15, r2000_2fff_tmp16, byte_93;
		BitBlock sequence_e2_93, r2000_2fff_tmp17, r2000_2fff_tmp18, r2000_2fff_tmp19;
		BitBlock r2000_2fff_tmp20, r2000_2fff_tmp21, byte_range_90_a9;
		BitBlock sequence_e2_93_adv, r2000_2fff_tmp22, byte_b0, sequence_e2_b0;
		BitBlock sequence_e2_b0_adv, r2000_2fff_tmp23, r2000_2fff_tmp24, byte_b1;
		BitBlock sequence_e2_b1, r2000_2fff_tmp25, r2000_2fff_tmp26, r2000_2fff_tmp27;
		BitBlock r2000_2fff_tmp28, r2000_2fff_tmp29, r2000_2fff_tmp30;
		BitBlock r2000_2fff_tmp31, r2000_2fff_tmp32, r2000_2fff_tmp33;
		BitBlock r2000_2fff_tmp34, r2000_2fff_tmp35, r2000_2fff_tmp36;
		BitBlock r2000_2fff_tmp37, r2000_2fff_tmp38, r2000_2fff_tmp39;
		BitBlock r2000_2fff_tmp40, r2000_2fff_tmp41, r2000_2fff_tmp42;
		BitBlock r2000_2fff_tmp43, r2000_2fff_tmp44, r2000_2fff_tmp45;
		BitBlock r2000_2fff_tmp46, r2000_2fff_tmp47, r2000_2fff_tmp48;
		BitBlock cc_range_2c40_2c76_3, sequence_e2_b1_adv, r2000_2fff_tmp49, byte_b2;
		BitBlock sequence_e2_b2, cc_range_2c81_2cbf_3, sequence_e2_b2_adv;
		BitBlock r2000_2fff_tmp50, byte_b3, sequence_e2_b3, r2000_2fff_tmp51;
		BitBlock r2000_2fff_tmp52, r2000_2fff_tmp53, r2000_2fff_tmp54;
		BitBlock r2000_2fff_tmp55, r2000_2fff_tmp56, r2000_2fff_tmp57;
		BitBlock r2000_2fff_tmp58, r2000_2fff_tmp59, r2000_2fff_tmp60;
		BitBlock r2000_2fff_tmp61, r2000_2fff_tmp62, r2000_2fff_tmp63;
		BitBlock r2000_2fff_tmp64, r2000_2fff_tmp65, r2000_2fff_tmp66;
		BitBlock r2000_2fff_tmp67, r2000_2fff_tmp68, r2000_2fff_tmp69;
		BitBlock r2000_2fff_tmp70, r2000_2fff_tmp71, r2000_2fff_tmp72;
		BitBlock r2000_2fff_tmp73, r2000_2fff_tmp74, r2000_2fff_tmp75;
		BitBlock r2000_2fff_tmp76, r2000_2fff_tmp77, r2000_2fff_tmp78;
		BitBlock r2000_2fff_tmp79, r2000_2fff_tmp80, r2000_2fff_tmp81;
		BitBlock r2000_2fff_tmp82, r2000_2fff_tmp83, cc_range_2cc1_2cf3_3;
		BitBlock sequence_e2_b3_adv, r2000_2fff_tmp84, byte_b4, sequence_e2_b4;
		BitBlock r2000_2fff_tmp85, r2000_2fff_tmp86, r2000_2fff_tmp87;
		BitBlock r2000_2fff_tmp88, r2000_2fff_tmp89, r2000_2fff_tmp90;
		BitBlock r2000_2fff_tmp91, r2000_2fff_tmp92, cc_range_2d00_2d2d_3;
		BitBlock sequence_e2_b4_adv, r2000_2fff_tmp93, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6;
		BitBlock ra000_ffff_tmp7, byte_99, ra000_ffff_tmp8, sequence_ea_99;
		BitBlock byte_ea_adv, ra000_ffff_tmp9, ra000_ffff_tmp10, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, cc_range_a641_a66d_3;
		BitBlock sequence_ea_99_adv, ra000_ffff_tmp14, byte_9a, sequence_ea_9a;
		BitBlock ra000_ffff_tmp15, ra000_ffff_tmp16, ra000_ffff_tmp17;
		BitBlock cc_range_a681_a69b_3, sequence_ea_9a_adv, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, byte_9c, sequence_ea_9c, ra000_ffff_tmp20;
		BitBlock ra000_ffff_tmp21, ra000_ffff_tmp22, ra000_ffff_tmp23;
		BitBlock ra000_ffff_tmp24, ra000_ffff_tmp25, ra000_ffff_tmp26;
		BitBlock ra000_ffff_tmp27, ra000_ffff_tmp28, ra000_ffff_tmp29;
		BitBlock ra000_ffff_tmp30, ra000_ffff_tmp31, ra000_ffff_tmp32;
		BitBlock ra000_ffff_tmp33, ra000_ffff_tmp34, ra000_ffff_tmp35;
		BitBlock ra000_ffff_tmp36, ra000_ffff_tmp37, ra000_ffff_tmp38;
		BitBlock ra000_ffff_tmp39, ra000_ffff_tmp40, ra000_ffff_tmp41;
		BitBlock ra000_ffff_tmp42, ra000_ffff_tmp43, ra000_ffff_tmp44;
		BitBlock ra000_ffff_tmp45, ra000_ffff_tmp46, ra000_ffff_tmp47;
		BitBlock ra000_ffff_tmp48, cc_range_a723_a73f_3, sequence_ea_9c_adv;
		BitBlock ra000_ffff_tmp49, byte_9d, sequence_ea_9d, ra000_ffff_tmp50;
		BitBlock ra000_ffff_tmp51, ra000_ffff_tmp52, ra000_ffff_tmp53;
		BitBlock ra000_ffff_tmp54, ra000_ffff_tmp55, ra000_ffff_tmp56;
		BitBlock ra000_ffff_tmp57, ra000_ffff_tmp58, ra000_ffff_tmp59;
		BitBlock ra000_ffff_tmp60, ra000_ffff_tmp61, ra000_ffff_tmp62;
		BitBlock ra000_ffff_tmp63, ra000_ffff_tmp64, ra000_ffff_tmp65;
		BitBlock ra000_ffff_tmp66, ra000_ffff_tmp67, ra000_ffff_tmp68;
		BitBlock ra000_ffff_tmp69, ra000_ffff_tmp70, ra000_ffff_tmp71;
		BitBlock ra000_ffff_tmp72, ra000_ffff_tmp73, ra000_ffff_tmp74;
		BitBlock ra000_ffff_tmp75, ra000_ffff_tmp76, ra000_ffff_tmp77;
		BitBlock ra000_ffff_tmp78, ra000_ffff_tmp79, ra000_ffff_tmp80;
		BitBlock ra000_ffff_tmp81, ra000_ffff_tmp82, ra000_ffff_tmp83;
		BitBlock ra000_ffff_tmp84, ra000_ffff_tmp85, ra000_ffff_tmp86;
		BitBlock ra000_ffff_tmp87, ra000_ffff_tmp88, ra000_ffff_tmp89;
		BitBlock ra000_ffff_tmp90, ra000_ffff_tmp91, ra000_ffff_tmp92;
		BitBlock ra000_ffff_tmp93, ra000_ffff_tmp94, cc_range_a741_a77f_3;
		BitBlock sequence_ea_9d_adv, ra000_ffff_tmp95, ra000_ffff_tmp96, byte_9e;
		BitBlock sequence_ea_9e, ra000_ffff_tmp97, ra000_ffff_tmp98, ra000_ffff_tmp99;
		BitBlock ra000_ffff_tmp100, ra000_ffff_tmp101, ra000_ffff_tmp102;
		BitBlock ra000_ffff_tmp103, ra000_ffff_tmp104, ra000_ffff_tmp105;
		BitBlock ra000_ffff_tmp106, ra000_ffff_tmp107, ra000_ffff_tmp108;
		BitBlock ra000_ffff_tmp109, cc_range_a781_a7a9_3, sequence_ea_9e_adv;
		BitBlock ra000_ffff_tmp110, byte_ef, byte_ac, ra000_ffff_tmp111;
		BitBlock sequence_ef_ac, byte_ef_adv, ra000_ffff_tmp112, ra000_ffff_tmp113;
		BitBlock ra000_ffff_tmp114, ra000_ffff_tmp115, ra000_ffff_tmp116;
		BitBlock cc_range_fb00_fb13_3, sequence_ef_ac_adv, ra000_ffff_tmp117;
		BitBlock sequence_ef_bd, byte_range_81_9a, sequence_ef_bd_adv;
		BitBlock ra000_ffff_tmp118, r80_10ffff_tmp2, byte_range_f0_ff, byte_f0;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_90;
		BitBlock r10000_10ffff_tmp4, sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp5;
		BitBlock sequence_f0_90_90, sequence_f0_90_adv, r10000_10ffff_tmp6;
		BitBlock r10000_10ffff_tmp7, byte_range_a8_bf, sequence_f0_90_90_adv;
		BitBlock r10000_10ffff_tmp8, r10000_10ffff_tmp9, r10000_10ffff_tmp10, byte_91;
		BitBlock sequence_f0_90_91, r10000_10ffff_tmp11, sequence_f0_90_91_adv;
		BitBlock r10000_10ffff_tmp12, sequence_f0_91, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, byte_a3, r10000_10ffff_tmp15, sequence_f0_91_a3;
		BitBlock sequence_f0_91_adv, byte_range_80_9f, sequence_f0_91_a3_adv;
		BitBlock r10000_10ffff_tmp16;




        struct_cwu_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_and(tmp1, basis_bits.bit_2);
        tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp4 = simd_or(basis_bits.bit_5, tmp3);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        tmp6 = simd_not(tmp5);
        tmp7 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp9 = simd_or(tmp7, tmp8);
        tmp10 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(tmp9, basis_bits.bit_3));
        byte_range_61_7a = simd_and(tmp2, tmp10);
        struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, byte_range_61_7a);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 54))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 19))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, tmp7);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp10 = simd_and(r80_7ff_tmp8, r80_7ff_tmp9);
            byte_b5 = simd_and(r80_7ff_tmp7, r80_7ff_tmp10);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp11 = simd_and(byte_c2_adv, byte_b5);
            struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r80_7ff_tmp11);
            r80_7ff_tmp12 = simd_andc(tmp3, tmp7);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp12);
            r80_7ff_tmp13 = simd_and(basis_bits.bit_5, tmp3);
            r80_7ff_tmp14 = simd_or(basis_bits.bit_4, r80_7ff_tmp13);
            r80_7ff_tmp15 = simd_and(basis_bits.bit_3, r80_7ff_tmp14);
            r80_7ff_tmp16 = simd_not(r80_7ff_tmp15);
            r80_7ff_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp18 = simd_and(r80_7ff_tmp17, tmp3);
            r80_7ff_tmp19 = simd_and(basis_bits.bit_3, r80_7ff_tmp18);
            r80_7ff_tmp20 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp16), simd_andc(r80_7ff_tmp19, basis_bits.bit_2));
            r80_7ff_tmp21 = simd_and(r80_7ff_tmp5, r80_7ff_tmp20);
            r80_7ff_tmp22 = simd_and(r80_7ff_tmp7, basis_bits.bit_4);
            cc_range_df_f8_2 = simd_or(r80_7ff_tmp21, r80_7ff_tmp22);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp23 = simd_and(byte_c3_adv, cc_range_df_f8_2);
            struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r80_7ff_tmp23);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp7);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 10))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(2, 7))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_5, tmp8);
                r100_2ff_tmp2 = simd_not(r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp5 = simd_and(r100_2ff_tmp4, r80_7ff_tmp9);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp5);
                byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(2), r100_2ff_tmp6));
                r100_2ff_tmp7 = simd_and(r100_2ff_tmp6, byte_range_80_8f);
                r100_2ff_tmp8 = simd_or(byte_range_c4_c8, r100_2ff_tmp7);
                if ((bitblock::any(r100_2ff_tmp8) || carryQ.CarryTest(3, 5))) {
                  r100_24f_tmp1 = simd_andc(r80_7ff_tmp8, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp1);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(3, 2))) {
                    r100_17f_tmp1 = simd_andc(r80_7ff_tmp8, tmp8);
                    byte_c4 = simd_and(r80_7ff_tmp2, r100_17f_tmp1);
                    r100_17f_tmp2 = simd_andc(basis_bits.bit_7, tmp7);
                    r100_17f_tmp3 = simd_or(r100_17f_tmp2, r80_7ff_tmp10);
                    r100_17f_tmp4 = simd_and(r80_7ff_tmp8, tmp3);
                    r100_17f_tmp5 = simd_or(r100_17f_tmp3, r100_17f_tmp4);
                    r100_17f_tmp6 = simd_or(r100_17f_tmp5, r100_2ff_tmp5);
                    r100_17f_tmp7 = simd_and(r100_2ff_tmp4, tmp3);
                    r100_17f_tmp8 = simd_or(r100_17f_tmp6, r100_17f_tmp7);
                    r100_17f_tmp9 = simd_and(r80_7ff_tmp17, r80_7ff_tmp9);
                    r100_17f_tmp10 = simd_or(r100_17f_tmp8, r100_17f_tmp9);
                    r100_17f_tmp11 = simd_or(r100_17f_tmp10, r80_7ff_tmp18);
                    r100_17f_tmp12 = simd_and(byte_range_80_8f, r100_17f_tmp11);
                    r100_17f_tmp13 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                    r100_17f_tmp14 = simd_and(r80_7ff_tmp5, r100_17f_tmp13);
                    r100_17f_tmp15 = simd_andc(r80_7ff_tmp9, tmp7);
                    r100_17f_tmp16 = simd_and(r100_17f_tmp14, r100_17f_tmp15);
                    r100_17f_tmp17 = simd_or(r100_17f_tmp12, r100_17f_tmp16);
                    r100_17f_tmp18 = simd_and(r100_17f_tmp14, r80_7ff_tmp12);
                    r100_17f_tmp19 = simd_or(r100_17f_tmp17, r100_17f_tmp18);
                    r100_17f_tmp20 = simd_and(r100_17f_tmp14, r80_7ff_tmp10);
                    r100_17f_tmp21 = simd_or(r100_17f_tmp19, r100_17f_tmp20);
                    r100_17f_tmp22 = simd_and(r100_17f_tmp14, r100_17f_tmp4);
                    r100_17f_tmp23 = simd_or(r100_17f_tmp21, r100_17f_tmp22);
                    r100_17f_tmp24 = simd_and(r100_17f_tmp14, r100_2ff_tmp5);
                    r100_17f_tmp25 = simd_or(r100_17f_tmp23, r100_17f_tmp24);
                    r100_17f_tmp26 = simd_and(r100_17f_tmp14, r100_17f_tmp7);
                    r100_17f_tmp27 = simd_or(r100_17f_tmp25, r100_17f_tmp26);
                    r100_17f_tmp28 = simd_and(r100_17f_tmp14, r100_17f_tmp9);
                    r100_17f_tmp29 = simd_or(r100_17f_tmp27, r100_17f_tmp28);
                    r100_17f_tmp30 = simd_and(r100_17f_tmp14, r80_7ff_tmp18);
                    r100_17f_tmp31 = simd_or(r100_17f_tmp29, r100_17f_tmp30);
                    r100_17f_tmp32 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                    r100_17f_tmp33 = simd_and(r80_7ff_tmp5, r100_17f_tmp32);
                    r100_17f_tmp34 = simd_and(r100_17f_tmp33, r100_17f_tmp15);
                    r100_17f_tmp35 = simd_or(r100_17f_tmp31, r100_17f_tmp34);
                    r100_17f_tmp36 = simd_and(r100_17f_tmp33, r80_7ff_tmp12);
                    r100_17f_tmp37 = simd_or(r100_17f_tmp35, r100_17f_tmp36);
                    r100_17f_tmp38 = simd_and(r100_17f_tmp33, r80_7ff_tmp10);
                    r100_17f_tmp39 = simd_or(r100_17f_tmp37, r100_17f_tmp38);
                    r100_17f_tmp40 = simd_and(r100_17f_tmp33, r100_17f_tmp4);
                    r100_17f_tmp41 = simd_or(r100_17f_tmp39, r100_17f_tmp40);
                    r100_17f_tmp42 = simd_and(r100_17f_tmp33, r100_2ff_tmp5);
                    r100_17f_tmp43 = simd_or(r100_17f_tmp41, r100_17f_tmp42);
                    r100_17f_tmp44 = simd_and(r100_17f_tmp33, r100_17f_tmp7);
                    r100_17f_tmp45 = simd_or(r100_17f_tmp43, r100_17f_tmp44);
                    r100_17f_tmp46 = simd_and(r100_17f_tmp33, r100_17f_tmp9);
                    r100_17f_tmp47 = simd_or(r100_17f_tmp45, r100_17f_tmp46);
                    r100_17f_tmp48 = simd_and(r100_17f_tmp33, r80_7ff_tmp18);
                    r100_17f_tmp49 = simd_or(r100_17f_tmp47, r100_17f_tmp48);
                    r100_17f_tmp50 = simd_and(r80_7ff_tmp7, r100_17f_tmp15);
                    r100_17f_tmp51 = simd_or(r100_17f_tmp49, r100_17f_tmp50);
                    r100_17f_tmp52 = simd_and(r80_7ff_tmp7, r80_7ff_tmp12);
                    r100_17f_tmp53 = simd_or(r100_17f_tmp51, r100_17f_tmp52);
                    r100_17f_tmp54 = simd_or(r100_17f_tmp53, byte_b5);
                    r100_17f_tmp55 = simd_and(r80_7ff_tmp7, r100_17f_tmp4);
                    r100_17f_tmp56 = simd_or(r100_17f_tmp54, r100_17f_tmp55);
                    r100_17f_tmp57 = simd_and(r100_2ff_tmp4, r80_7ff_tmp3);
                    r100_17f_tmp58 = simd_and(r80_7ff_tmp7, r100_17f_tmp57);
                    r100_17f_tmp59 = simd_or(r100_17f_tmp56, r100_17f_tmp58);
                    r100_17f_tmp60 = simd_andc(r80_7ff_tmp17, tmp8);
                    r100_17f_tmp61 = simd_and(r80_7ff_tmp7, r100_17f_tmp60);
                    r100_17f_tmp62 = simd_or(r100_17f_tmp59, r100_17f_tmp61);
                    r100_17f_tmp63 = simd_and(r80_7ff_tmp17, r80_7ff_tmp3);
                    r100_17f_tmp64 = simd_and(r80_7ff_tmp7, r100_17f_tmp63);
                    cc_range_101_13e_2 = simd_or(r100_17f_tmp62, r100_17f_tmp64);
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_c4, carryQ.get_carry_in(3), byte_c4_adv));
                    r100_17f_tmp65 = simd_and(byte_c4_adv, cc_range_101_13e_2);
                    struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r100_17f_tmp65);
                    byte_c5 = simd_and(r80_7ff_tmp2, r80_7ff_tmp10);
                    r100_17f_tmp66 = simd_andc(tmp9, r80_7ff_tmp4);
                    r100_17f_tmp67 = simd_andc(r100_17f_tmp66, r100_17f_tmp1);
                    r100_17f_tmp68 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
                    r100_17f_tmp69 = simd_andc(r100_17f_tmp67, r100_17f_tmp68);
                    r100_17f_tmp70 = simd_andc(r100_2ff_tmp4, basis_bits.bit_6);
                    r100_17f_tmp71 = simd_andc(r100_17f_tmp69, r100_17f_tmp70);
                    r100_17f_tmp72 = simd_andc(r100_17f_tmp71, r100_17f_tmp7);
                    r100_17f_tmp73 = simd_andc(r100_17f_tmp72, r100_17f_tmp9);
                    r100_17f_tmp74 = simd_andc(r100_17f_tmp73, r80_7ff_tmp18);
                    r100_17f_tmp75 = simd_andc(byte_range_80_8f, r100_17f_tmp74);
                    r100_17f_tmp76 = simd_or(r100_17f_tmp75, r100_17f_tmp16);
                    r100_17f_tmp77 = simd_or(r100_17f_tmp76, r100_17f_tmp18);
                    r100_17f_tmp78 = simd_or(r100_17f_tmp77, r100_17f_tmp20);
                    r100_17f_tmp79 = simd_or(r100_17f_tmp78, r100_17f_tmp22);
                    r100_17f_tmp80 = simd_or(r100_17f_tmp79, r100_17f_tmp24);
                    r100_17f_tmp81 = simd_or(r100_17f_tmp80, r100_17f_tmp26);
                    r100_17f_tmp82 = simd_or(r100_17f_tmp81, r100_17f_tmp28);
                    r100_17f_tmp83 = simd_or(r100_17f_tmp82, r100_17f_tmp30);
                    r100_17f_tmp84 = simd_or(r100_17f_tmp83, r100_17f_tmp34);
                    r100_17f_tmp85 = simd_or(r100_17f_tmp84, r100_17f_tmp36);
                    r100_17f_tmp86 = simd_or(r100_17f_tmp85, r100_17f_tmp38);
                    r100_17f_tmp87 = simd_or(r100_17f_tmp86, r100_17f_tmp40);
                    r100_17f_tmp88 = simd_or(r100_17f_tmp87, r100_17f_tmp42);
                    r100_17f_tmp89 = simd_or(r100_17f_tmp88, r100_17f_tmp44);
                    r100_17f_tmp90 = simd_or(r100_17f_tmp89, r100_17f_tmp46);
                    r100_17f_tmp91 = simd_or(r100_17f_tmp90, r100_17f_tmp48);
                    r100_17f_tmp92 = simd_or(r100_17f_tmp91, r100_17f_tmp50);
                    r100_17f_tmp93 = simd_or(r100_17f_tmp92, r100_17f_tmp52);
                    r100_17f_tmp94 = simd_or(r100_17f_tmp93, byte_b5);
                    r100_17f_tmp95 = simd_or(r100_17f_tmp94, r100_17f_tmp55);
                    r100_17f_tmp96 = simd_or(r100_17f_tmp95, r100_17f_tmp58);
                    r100_17f_tmp97 = simd_or(r100_17f_tmp96, r100_17f_tmp61);
                    r100_17f_tmp98 = simd_and(r80_7ff_tmp17, basis_bits.bit_6);
                    r100_17f_tmp99 = simd_and(r80_7ff_tmp7, r100_17f_tmp98);
                    cc_range_140_17e_2 = simd_or(r100_17f_tmp97, r100_17f_tmp99);
                    carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_c5, carryQ.get_carry_in(4), byte_c5_adv));
                    r100_17f_tmp100 = simd_and(byte_c5_adv, cc_range_140_17e_2);
                    struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r100_17f_tmp100);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(3, 2);
                  }
                  r100_24f_tmp2 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r100_24f_tmp2, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp3);
                  r100_24f_tmp4 = simd_or(byte_range_c6_c8, r100_2ff_tmp7);
                  if ((bitblock::any(r100_24f_tmp4) || carryQ.CarryTest(5, 3))) {
                    r180_24f_tmp1 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
                    byte_c6 = simd_and(r80_7ff_tmp2, r180_24f_tmp1);
                    r180_24f_tmp2 = simd_andc(tmp9, r80_7ff_tmp12);
                    r180_24f_tmp3 = simd_andc(r180_24f_tmp2, r80_7ff_tmp10);
                    r180_24f_tmp4 = simd_andc(r100_2ff_tmp4, tmp8);
                    r180_24f_tmp5 = simd_andc(r180_24f_tmp3, r180_24f_tmp4);
                    r180_24f_tmp6 = simd_andc(r80_7ff_tmp17, tmp8);
                    r180_24f_tmp7 = simd_andc(r180_24f_tmp5, r180_24f_tmp6);
                    r180_24f_tmp8 = simd_andc(byte_range_80_8f, r180_24f_tmp7);
                    r180_24f_tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                    r180_24f_tmp10 = simd_and(r80_7ff_tmp5, r180_24f_tmp9);
                    r180_24f_tmp11 = simd_and(r180_24f_tmp10, r80_7ff_tmp4);
                    r180_24f_tmp12 = simd_or(r180_24f_tmp8, r180_24f_tmp11);
                    r180_24f_tmp13 = simd_and(r180_24f_tmp10, r80_7ff_tmp10);
                    r180_24f_tmp14 = simd_or(r180_24f_tmp12, r180_24f_tmp13);
                    r180_24f_tmp15 = simd_and(r180_24f_tmp10, r100_2ff_tmp4);
                    r180_24f_tmp16 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                    r180_24f_tmp17 = simd_and(r180_24f_tmp15, r180_24f_tmp16);
                    r180_24f_tmp18 = simd_or(r180_24f_tmp14, r180_24f_tmp17);
                    r180_24f_tmp19 = simd_and(r80_7ff_tmp17, r80_7ff_tmp3);
                    r180_24f_tmp20 = simd_and(r180_24f_tmp10, r180_24f_tmp19);
                    r180_24f_tmp21 = simd_or(r180_24f_tmp18, r180_24f_tmp20);
                    r180_24f_tmp22 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                    r180_24f_tmp23 = simd_and(r80_7ff_tmp5, r180_24f_tmp22);
                    r180_24f_tmp24 = simd_andc(r80_7ff_tmp9, tmp7);
                    r180_24f_tmp25 = simd_and(r180_24f_tmp23, r180_24f_tmp24);
                    r180_24f_tmp26 = simd_or(r180_24f_tmp21, r180_24f_tmp25);
                    r180_24f_tmp27 = simd_and(r180_24f_tmp23, r80_7ff_tmp12);
                    r180_24f_tmp28 = simd_or(r180_24f_tmp26, r180_24f_tmp27);
                    r180_24f_tmp29 = simd_and(r180_24f_tmp23, r80_7ff_tmp10);
                    r180_24f_tmp30 = simd_or(r180_24f_tmp28, r180_24f_tmp29);
                    r180_24f_tmp31 = simd_and(r180_24f_tmp23, r180_24f_tmp4);
                    r180_24f_tmp32 = simd_or(r180_24f_tmp30, r180_24f_tmp31);
                    r180_24f_tmp33 = simd_and(r80_7ff_tmp17, r80_7ff_tmp9);
                    r180_24f_tmp34 = simd_and(r180_24f_tmp23, r180_24f_tmp33);
                    r180_24f_tmp35 = simd_or(r180_24f_tmp32, r180_24f_tmp34);
                    r180_24f_tmp36 = simd_andc(r80_7ff_tmp7, tmp9);
                    r180_24f_tmp37 = simd_or(r180_24f_tmp35, r180_24f_tmp36);
                    r180_24f_tmp38 = simd_andc(r80_7ff_tmp8, tmp8);
                    r180_24f_tmp39 = simd_and(r80_7ff_tmp7, r180_24f_tmp38);
                    r180_24f_tmp40 = simd_or(r180_24f_tmp37, r180_24f_tmp39);
                    r180_24f_tmp41 = simd_and(r80_7ff_tmp7, r180_24f_tmp1);
                    r180_24f_tmp42 = simd_or(r180_24f_tmp40, r180_24f_tmp41);
                    r180_24f_tmp43 = simd_and(r80_7ff_tmp7, r100_2ff_tmp5);
                    r180_24f_tmp44 = simd_or(r180_24f_tmp42, r180_24f_tmp43);
                    r180_24f_tmp45 = simd_and(r80_7ff_tmp7, r180_24f_tmp33);
                    r180_24f_tmp46 = simd_or(r180_24f_tmp44, r180_24f_tmp45);
                    r180_24f_tmp47 = simd_and(r80_7ff_tmp7, r80_7ff_tmp18);
                    cc_range_180_1bf_2 = simd_or(r180_24f_tmp46, r180_24f_tmp47);
                    carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_c6, carryQ.get_carry_in(5), byte_c6_adv));
                    r180_24f_tmp48 = simd_and(byte_c6_adv, cc_range_180_1bf_2);
                    struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r180_24f_tmp48);
                    r180_24f_tmp49 = simd_and(r80_7ff_tmp8, tmp3);
                    byte_c7 = simd_and(r80_7ff_tmp2, r180_24f_tmp49);
                    r180_24f_tmp50 = simd_and(byte_range_80_8f, r80_7ff_tmp8);
                    r180_24f_tmp51 = simd_and(r180_24f_tmp50, r180_24f_tmp16);
                    r180_24f_tmp52 = simd_andc(r100_2ff_tmp4, basis_bits.bit_6);
                    r180_24f_tmp53 = simd_and(byte_range_80_8f, r180_24f_tmp52);
                    r180_24f_tmp54 = simd_or(r180_24f_tmp51, r180_24f_tmp53);
                    r180_24f_tmp55 = simd_and(byte_range_80_8f, basis_bits.bit_4);
                    r180_24f_tmp56 = simd_not(tmp8);
                    r180_24f_tmp57 = simd_or(simd_and(basis_bits.bit_5, r180_24f_tmp56), simd_andc(tmp3, basis_bits.bit_5));
                    r180_24f_tmp58 = simd_and(r180_24f_tmp55, r180_24f_tmp57);
                    r180_24f_tmp59 = simd_or(r180_24f_tmp54, r180_24f_tmp58);
                    r180_24f_tmp60 = simd_and(byte_range_80_8f, r180_24f_tmp19);
                    r180_24f_tmp61 = simd_or(r180_24f_tmp59, r180_24f_tmp60);
                    r180_24f_tmp62 = simd_andc(r180_24f_tmp10, tmp9);
                    r180_24f_tmp63 = simd_or(r180_24f_tmp61, r180_24f_tmp62);
                    r180_24f_tmp64 = simd_or(r180_24f_tmp63, r180_24f_tmp11);
                    r180_24f_tmp65 = simd_and(r180_24f_tmp10, r180_24f_tmp38);
                    r180_24f_tmp66 = simd_or(r180_24f_tmp64, r180_24f_tmp65);
                    r180_24f_tmp67 = simd_and(r180_24f_tmp10, r180_24f_tmp1);
                    r180_24f_tmp68 = simd_or(r180_24f_tmp66, r180_24f_tmp67);
                    r180_24f_tmp69 = simd_and(r180_24f_tmp10, r180_24f_tmp4);
                    r180_24f_tmp70 = simd_or(r180_24f_tmp68, r180_24f_tmp69);
                    r180_24f_tmp71 = simd_and(r100_2ff_tmp4, r80_7ff_tmp3);
                    r180_24f_tmp72 = simd_and(r180_24f_tmp10, r180_24f_tmp71);
                    r180_24f_tmp73 = simd_or(r180_24f_tmp70, r180_24f_tmp72);
                    r180_24f_tmp74 = simd_andc(r80_7ff_tmp17, basis_bits.bit_6);
                    r180_24f_tmp75 = simd_and(r180_24f_tmp10, r180_24f_tmp74);
                    r180_24f_tmp76 = simd_or(r180_24f_tmp73, r180_24f_tmp75);
                    r180_24f_tmp77 = simd_and(r180_24f_tmp10, r80_7ff_tmp18);
                    r180_24f_tmp78 = simd_or(r180_24f_tmp76, r180_24f_tmp77);
                    r180_24f_tmp79 = simd_or(r180_24f_tmp78, r180_24f_tmp25);
                    r180_24f_tmp80 = simd_or(r180_24f_tmp79, r180_24f_tmp27);
                    r180_24f_tmp81 = simd_or(r180_24f_tmp80, r180_24f_tmp29);
                    r180_24f_tmp82 = simd_and(r180_24f_tmp23, r180_24f_tmp49);
                    r180_24f_tmp83 = simd_or(r180_24f_tmp81, r180_24f_tmp82);
                    r180_24f_tmp84 = simd_and(r180_24f_tmp23, r100_2ff_tmp5);
                    r180_24f_tmp85 = simd_or(r180_24f_tmp83, r180_24f_tmp84);
                    r180_24f_tmp86 = simd_and(r100_2ff_tmp4, tmp3);
                    r180_24f_tmp87 = simd_and(r180_24f_tmp23, r180_24f_tmp86);
                    r180_24f_tmp88 = simd_or(r180_24f_tmp85, r180_24f_tmp87);
                    r180_24f_tmp89 = simd_or(r180_24f_tmp88, r180_24f_tmp34);
                    r180_24f_tmp90 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                    r180_24f_tmp91 = simd_not(tmp9);
                    r180_24f_tmp92 = simd_or(simd_and(basis_bits.bit_3, r180_24f_tmp91), simd_andc(r80_7ff_tmp18, basis_bits.bit_3));
                    r180_24f_tmp93 = simd_and(r180_24f_tmp90, r180_24f_tmp92);
                    r180_24f_tmp94 = simd_or(r180_24f_tmp89, r180_24f_tmp93);
                    r180_24f_tmp95 = simd_andc(basis_bits.bit_6, tmp7);
                    r180_24f_tmp96 = simd_and(r80_7ff_tmp7, r180_24f_tmp95);
                    r180_24f_tmp97 = simd_or(r180_24f_tmp94, r180_24f_tmp96);
                    r180_24f_tmp98 = simd_or(r180_24f_tmp97, byte_b5);
                    r180_24f_tmp99 = simd_or(r180_24f_tmp98, r180_24f_tmp43);
                    r180_24f_tmp100 = simd_and(r80_7ff_tmp7, r180_24f_tmp86);
                    r180_24f_tmp101 = simd_or(r180_24f_tmp99, r180_24f_tmp100);
                    r180_24f_tmp102 = simd_or(r180_24f_tmp101, r180_24f_tmp45);
                    cc_range_1c5_1ff_2 = simd_or(r180_24f_tmp102, r180_24f_tmp47);
                    carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(6), byte_c7_adv));
                    r180_24f_tmp103 = simd_and(byte_c7_adv, cc_range_1c5_1ff_2);
                    struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r180_24f_tmp103);
                    byte_c8 = simd_and(r80_7ff_tmp2, r180_24f_tmp4);
                    r180_24f_tmp104 = simd_andc(basis_bits.bit_7, tmp7);
                    r180_24f_tmp105 = simd_or(r180_24f_tmp104, r80_7ff_tmp10);
                    r180_24f_tmp106 = simd_or(r180_24f_tmp105, r180_24f_tmp49);
                    r180_24f_tmp107 = simd_or(r180_24f_tmp106, r100_2ff_tmp5);
                    r180_24f_tmp108 = simd_or(r180_24f_tmp107, r180_24f_tmp86);
                    r180_24f_tmp109 = simd_or(r180_24f_tmp108, r180_24f_tmp33);
                    r180_24f_tmp110 = simd_or(r180_24f_tmp109, r80_7ff_tmp18);
                    r180_24f_tmp111 = simd_and(byte_range_80_8f, r180_24f_tmp110);
                    r180_24f_tmp112 = simd_and(r180_24f_tmp10, r180_24f_tmp24);
                    r180_24f_tmp113 = simd_or(r180_24f_tmp111, r180_24f_tmp112);
                    r180_24f_tmp114 = simd_and(r180_24f_tmp10, r80_7ff_tmp12);
                    r180_24f_tmp115 = simd_or(r180_24f_tmp113, r180_24f_tmp114);
                    r180_24f_tmp116 = simd_or(r180_24f_tmp115, r180_24f_tmp13);
                    r180_24f_tmp117 = simd_and(r180_24f_tmp10, r180_24f_tmp49);
                    r180_24f_tmp118 = simd_or(r180_24f_tmp116, r180_24f_tmp117);
                    r180_24f_tmp119 = simd_and(r180_24f_tmp10, r100_2ff_tmp5);
                    r180_24f_tmp120 = simd_or(r180_24f_tmp118, r180_24f_tmp119);
                    r180_24f_tmp121 = simd_and(r180_24f_tmp10, r180_24f_tmp86);
                    r180_24f_tmp122 = simd_or(r180_24f_tmp120, r180_24f_tmp121);
                    r180_24f_tmp123 = simd_and(r180_24f_tmp10, r180_24f_tmp33);
                    r180_24f_tmp124 = simd_or(r180_24f_tmp122, r180_24f_tmp123);
                    r180_24f_tmp125 = simd_or(r180_24f_tmp124, r180_24f_tmp77);
                    r180_24f_tmp126 = simd_or(r180_24f_tmp125, r180_24f_tmp27);
                    r180_24f_tmp127 = simd_or(r180_24f_tmp126, r180_24f_tmp29);
                    r180_24f_tmp128 = simd_or(r180_24f_tmp127, r180_24f_tmp82);
                    r180_24f_tmp129 = simd_or(r180_24f_tmp128, r180_24f_tmp84);
                    r180_24f_tmp130 = simd_or(r180_24f_tmp129, r180_24f_tmp87);
                    r180_24f_tmp131 = simd_or(r180_24f_tmp130, r180_24f_tmp34);
                    r180_24f_tmp132 = simd_and(r180_24f_tmp23, r80_7ff_tmp18);
                    r180_24f_tmp133 = simd_or(r180_24f_tmp131, r180_24f_tmp132);
                    r180_24f_tmp134 = simd_and(r80_7ff_tmp7, r180_24f_tmp24);
                    r180_24f_tmp135 = simd_or(r180_24f_tmp133, r180_24f_tmp134);
                    r180_24f_tmp136 = simd_and(r80_7ff_tmp7, r80_7ff_tmp12);
                    r180_24f_tmp137 = simd_or(r180_24f_tmp135, r180_24f_tmp136);
                    r180_24f_tmp138 = simd_and(r80_7ff_tmp7, r180_24f_tmp6);
                    r180_24f_tmp139 = simd_or(r180_24f_tmp137, r180_24f_tmp138);
                    cc_range_201_23f_2 = simd_or(r180_24f_tmp139, r180_24f_tmp47);
                    carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_c8, carryQ.get_carry_in(7), byte_c8_adv));
                    r180_24f_tmp140 = simd_and(byte_c8_adv, cc_range_201_23f_2);
                    struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r180_24f_tmp140);
                    r180_24f_tmp141 = simd_andc(tmp9, r80_7ff_tmp4);
                    r180_24f_tmp142 = simd_andc(r180_24f_tmp141, r180_24f_tmp49);
                    r180_24f_tmp143 = simd_andc(r180_24f_tmp142, r100_2ff_tmp5);
                    r180_24f_tmp144 = simd_andc(r180_24f_tmp143, r180_24f_tmp86);
                    r180_24f_tmp145 = simd_andc(r180_24f_tmp144, r180_24f_tmp33);
                    r180_24f_tmp146 = simd_andc(r180_24f_tmp145, r80_7ff_tmp18);
                    cc_range_240_24f_2 = simd_andc(byte_range_80_8f, r180_24f_tmp146);
                    byte_c9_adv = r100_2ff_tmp6;
                    r180_24f_tmp147 = simd_and(byte_c9_adv, cc_range_240_24f_2);
                    struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r180_24f_tmp147);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(5, 3);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 5);
                }
                byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
                r100_2ff_tmp9 = simd_and(r100_2ff_tmp6, byte_range_90_bf);
                r100_2ff_tmp10 = simd_and(r100_2ff_tmp4, r80_7ff_tmp3);
                byte_ca = simd_and(r80_7ff_tmp2, r100_2ff_tmp10);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp6);
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(8), r100_2ff_tmp11));
                r100_2ff_tmp12 = simd_and(r100_2ff_tmp11, byte_range_80_af);
                r100_2ff_tmp13 = simd_or(r100_2ff_tmp9, r100_2ff_tmp12);
                if (bitblock::any(r100_2ff_tmp13)) {
                  r250_2af_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r250_2af_tmp2 = simd_and(r80_7ff_tmp5, r250_2af_tmp1);
                  r250_2af_tmp3 = simd_andc(r250_2af_tmp2, basis_bits.bit_4);
                  r250_2af_tmp4 = simd_and(basis_bits.bit_5, tmp8);
                  r250_2af_tmp5 = simd_andc(r250_2af_tmp3, r250_2af_tmp4);
                  r250_2af_tmp6 = simd_and(r80_7ff_tmp8, basis_bits.bit_6);
                  r250_2af_tmp7 = simd_and(r250_2af_tmp2, r250_2af_tmp6);
                  r250_2af_tmp8 = simd_or(r250_2af_tmp5, r250_2af_tmp7);
                  r250_2af_tmp9 = simd_and(r250_2af_tmp2, r100_2ff_tmp5);
                  r250_2af_tmp10 = simd_or(r250_2af_tmp8, r250_2af_tmp9);
                  r250_2af_tmp11 = simd_and(r250_2af_tmp2, basis_bits.bit_4);
                  r250_2af_tmp12 = simd_not(tmp8);
                  r250_2af_tmp13 = simd_or(simd_and(basis_bits.bit_5, r250_2af_tmp12), simd_andc(tmp3, basis_bits.bit_5));
                  r250_2af_tmp14 = simd_and(r250_2af_tmp11, r250_2af_tmp13);
                  r250_2af_tmp15 = simd_or(r250_2af_tmp10, r250_2af_tmp14);
                  r250_2af_tmp16 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                  r250_2af_tmp17 = simd_and(r80_7ff_tmp5, r250_2af_tmp16);
                  r250_2af_tmp18 = simd_or(tmp7, basis_bits.bit_6);
                  r250_2af_tmp19 = simd_andc(r250_2af_tmp17, r250_2af_tmp18);
                  r250_2af_tmp20 = simd_or(r250_2af_tmp15, r250_2af_tmp19);
                  r250_2af_tmp21 = simd_and(r250_2af_tmp17, r80_7ff_tmp12);
                  r250_2af_tmp22 = simd_or(r250_2af_tmp20, r250_2af_tmp21);
                  r250_2af_tmp23 = simd_and(r250_2af_tmp17, r80_7ff_tmp8);
                  r250_2af_tmp24 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r250_2af_tmp25 = simd_and(r250_2af_tmp23, r250_2af_tmp24);
                  r250_2af_tmp26 = simd_or(r250_2af_tmp22, r250_2af_tmp25);
                  r250_2af_tmp27 = simd_andc(r100_2ff_tmp4, basis_bits.bit_6);
                  r250_2af_tmp28 = simd_and(r250_2af_tmp17, r250_2af_tmp27);
                  r250_2af_tmp29 = simd_or(r250_2af_tmp26, r250_2af_tmp28);
                  r250_2af_tmp30 = simd_and(r250_2af_tmp17, basis_bits.bit_4);
                  r250_2af_tmp31 = simd_and(r250_2af_tmp30, r250_2af_tmp13);
                  r250_2af_tmp32 = simd_or(r250_2af_tmp29, r250_2af_tmp31);
                  r250_2af_tmp33 = simd_and(r250_2af_tmp17, r80_7ff_tmp18);
                  r250_2af_tmp34 = simd_or(r250_2af_tmp32, r250_2af_tmp33);
                  r250_2af_tmp35 = simd_andc(r80_7ff_tmp7, tmp7);
                  r250_2af_tmp36 = simd_and(r250_2af_tmp35, r250_2af_tmp24);
                  r250_2af_tmp37 = simd_or(r250_2af_tmp34, r250_2af_tmp36);
                  r250_2af_tmp38 = simd_or(r250_2af_tmp37, byte_b5);
                  r250_2af_tmp39 = simd_and(r80_7ff_tmp17, r80_7ff_tmp9);
                  r250_2af_tmp40 = simd_and(r80_7ff_tmp7, r250_2af_tmp39);
                  cc_range_250_27d_2 = simd_or(r250_2af_tmp38, r250_2af_tmp40);
                  byte_c9_adv = r100_2ff_tmp6;
                  r250_2af_tmp41 = simd_and(byte_c9_adv, cc_range_250_27d_2);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r250_2af_tmp41);
                  r250_2af_tmp42 = simd_andc(tmp9, r80_7ff_tmp12);
                  r250_2af_tmp43 = simd_not(r250_2af_tmp4);
                  r250_2af_tmp44 = simd_or(simd_and(basis_bits.bit_4, r250_2af_tmp43), simd_andc(r80_7ff_tmp13, basis_bits.bit_4));
                  r250_2af_tmp45 = simd_andc(r250_2af_tmp42, r250_2af_tmp44);
                  r250_2af_tmp46 = simd_andc(byte_range_80_8f, r250_2af_tmp45);
                  r250_2af_tmp47 = simd_and(r250_2af_tmp2, r80_7ff_tmp4);
                  r250_2af_tmp48 = simd_or(r250_2af_tmp46, r250_2af_tmp47);
                  r250_2af_tmp49 = simd_and(r80_7ff_tmp17, r80_7ff_tmp3);
                  r250_2af_tmp50 = simd_and(r250_2af_tmp2, r250_2af_tmp49);
                  cc_range_280_29e_2 = simd_or(r250_2af_tmp48, r250_2af_tmp50);
                  byte_ca_adv = r100_2ff_tmp11;
                  r250_2af_tmp51 = simd_and(byte_ca_adv, cc_range_280_29e_2);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r250_2af_tmp51);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 7);
              }
              r100_3ff_tmp2 = simd_andc(r80_7ff_tmp17, tmp8);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp2);
              r100_3ff_tmp3 = simd_and(r80_7ff_tmp17, r80_7ff_tmp9);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp6);
              carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(9), r100_3ff_tmp4));
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp4, byte_range_80_af);
              r100_3ff_tmp6 = simd_or(byte_cc, r100_3ff_tmp5);
              if (bitblock::any(r100_3ff_tmp6)) {
                r300_36f_tmp1 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                byte_85 = simd_and(r300_36f_tmp1, r80_7ff_tmp10);
                byte_cd_adv = r100_3ff_tmp4;
                r300_36f_tmp2 = simd_and(byte_cd_adv, byte_85);
                struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r300_36f_tmp2);
              }
              byte_range_b0_bf = r80_7ff_tmp7;
              r100_3ff_tmp7 = simd_and(r100_3ff_tmp4, byte_range_b0_bf);
              r100_3ff_tmp8 = simd_and(r80_7ff_tmp17, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp8);
              r100_3ff_tmp9 = simd_or(r100_3ff_tmp7, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp9) || carryQ.CarryTest(10, 2))) {
                r370_3ff_tmp1 = simd_andc(basis_bits.bit_7, tmp7);
                r370_3ff_tmp2 = simd_and(r80_7ff_tmp8, tmp3);
                r370_3ff_tmp3 = simd_or(r370_3ff_tmp1, r370_3ff_tmp2);
                r370_3ff_tmp4 = simd_and(byte_range_b0_bf, r370_3ff_tmp3);
                r370_3ff_tmp5 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp6 = simd_not(basis_bits.bit_6);
                r370_3ff_tmp7 = simd_or(simd_and(basis_bits.bit_5, r370_3ff_tmp6), simd_andc(tmp3, basis_bits.bit_5));
                r370_3ff_tmp8 = simd_and(r370_3ff_tmp5, r370_3ff_tmp7);
                cc_range_371_37b_2 = simd_or(r370_3ff_tmp4, r370_3ff_tmp8);
                byte_cd_adv = r100_3ff_tmp4;
                r370_3ff_tmp9 = simd_and(byte_cd_adv, cc_range_371_37b_2);
                struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r370_3ff_tmp9);
                r370_3ff_tmp10 = simd_and(r80_7ff_tmp17, r80_7ff_tmp3);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp10);
                r370_3ff_tmp11 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                r370_3ff_tmp12 = simd_and(r80_7ff_tmp5, r370_3ff_tmp11);
                r370_3ff_tmp13 = simd_andc(r370_3ff_tmp12, tmp9);
                r370_3ff_tmp14 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                r370_3ff_tmp15 = simd_or(basis_bits.bit_3, r80_7ff_tmp17);
                r370_3ff_tmp16 = simd_and(r370_3ff_tmp14, r370_3ff_tmp15);
                cc_range_390_3ac_2 = simd_or(r370_3ff_tmp13, r370_3ff_tmp16);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(10), byte_ce_adv));
                r370_3ff_tmp17 = simd_and(byte_ce_adv, cc_range_390_3ac_2);
                struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r370_3ff_tmp17);
                byte_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp18);
                r370_3ff_tmp18 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                r370_3ff_tmp19 = simd_and(basis_bits.bit_4, r80_7ff_tmp13);
                r370_3ff_tmp20 = simd_andc(r370_3ff_tmp18, r370_3ff_tmp19);
                r370_3ff_tmp21 = simd_or(tmp7, basis_bits.bit_6);
                r370_3ff_tmp22 = simd_andc(r370_3ff_tmp12, r370_3ff_tmp21);
                r370_3ff_tmp23 = simd_or(r370_3ff_tmp20, r370_3ff_tmp22);
                r370_3ff_tmp24 = simd_and(r370_3ff_tmp12, r80_7ff_tmp8);
                r370_3ff_tmp25 = simd_and(r370_3ff_tmp24, tmp8);
                r370_3ff_tmp26 = simd_or(r370_3ff_tmp23, r370_3ff_tmp25);
                r370_3ff_tmp27 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r370_3ff_tmp28 = simd_and(r370_3ff_tmp27, r80_7ff_tmp9);
                r370_3ff_tmp29 = simd_and(r370_3ff_tmp12, r370_3ff_tmp28);
                r370_3ff_tmp30 = simd_or(r370_3ff_tmp26, r370_3ff_tmp29);
                r370_3ff_tmp31 = simd_and(r370_3ff_tmp27, tmp3);
                r370_3ff_tmp32 = simd_and(r370_3ff_tmp12, r370_3ff_tmp31);
                r370_3ff_tmp33 = simd_or(r370_3ff_tmp30, r370_3ff_tmp32);
                r370_3ff_tmp34 = simd_and(r370_3ff_tmp12, r100_3ff_tmp3);
                r370_3ff_tmp35 = simd_or(r370_3ff_tmp33, r370_3ff_tmp34);
                r370_3ff_tmp36 = simd_and(r370_3ff_tmp12, r80_7ff_tmp18);
                r370_3ff_tmp37 = simd_or(r370_3ff_tmp35, r370_3ff_tmp36);
                r370_3ff_tmp38 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r370_3ff_tmp39 = simd_and(r80_7ff_tmp5, r370_3ff_tmp38);
                r370_3ff_tmp40 = simd_andc(r80_7ff_tmp9, tmp7);
                r370_3ff_tmp41 = simd_and(r370_3ff_tmp39, r370_3ff_tmp40);
                r370_3ff_tmp42 = simd_or(r370_3ff_tmp37, r370_3ff_tmp41);
                r370_3ff_tmp43 = simd_and(r370_3ff_tmp39, r80_7ff_tmp12);
                r370_3ff_tmp44 = simd_or(r370_3ff_tmp42, r370_3ff_tmp43);
                r370_3ff_tmp45 = simd_and(r370_3ff_tmp39, r80_7ff_tmp10);
                r370_3ff_tmp46 = simd_or(r370_3ff_tmp44, r370_3ff_tmp45);
                r370_3ff_tmp47 = simd_and(r370_3ff_tmp39, r370_3ff_tmp2);
                r370_3ff_tmp48 = simd_or(r370_3ff_tmp46, r370_3ff_tmp47);
                r370_3ff_tmp49 = simd_and(r370_3ff_tmp39, r370_3ff_tmp28);
                r370_3ff_tmp50 = simd_or(r370_3ff_tmp48, r370_3ff_tmp49);
                r370_3ff_tmp51 = simd_and(r370_3ff_tmp39, r370_3ff_tmp31);
                r370_3ff_tmp52 = simd_or(r370_3ff_tmp50, r370_3ff_tmp51);
                r370_3ff_tmp53 = simd_and(r370_3ff_tmp39, r100_3ff_tmp3);
                r370_3ff_tmp54 = simd_or(r370_3ff_tmp52, r370_3ff_tmp53);
                r370_3ff_tmp55 = simd_not(tmp7);
                r370_3ff_tmp56 = simd_or(simd_and(basis_bits.bit_3, r370_3ff_tmp55), simd_andc(r80_7ff_tmp18, basis_bits.bit_3));
                r370_3ff_tmp57 = simd_and(r370_3ff_tmp14, r370_3ff_tmp56);
                r370_3ff_tmp58 = simd_or(r370_3ff_tmp54, r370_3ff_tmp57);
                r370_3ff_tmp59 = simd_and(byte_range_b0_bf, r80_7ff_tmp10);
                r370_3ff_tmp60 = simd_or(r370_3ff_tmp58, r370_3ff_tmp59);
                r370_3ff_tmp61 = simd_andc(r370_3ff_tmp27, tmp8);
                r370_3ff_tmp62 = simd_and(byte_range_b0_bf, r370_3ff_tmp61);
                r370_3ff_tmp63 = simd_or(r370_3ff_tmp60, r370_3ff_tmp62);
                r370_3ff_tmp64 = simd_and(byte_range_b0_bf, r370_3ff_tmp31);
                cc_range_3c0_3fb_2 = simd_or(r370_3ff_tmp63, r370_3ff_tmp64);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(11), byte_cf_adv));
                r370_3ff_tmp65 = simd_and(byte_cf_adv, cc_range_3c0_3fb_2);
                struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r370_3ff_tmp65);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 10);
            }
            r80_7ff_tmp24 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp25 = simd_and(byte_range_c0_ff, r80_7ff_tmp24);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp25, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(12, 7))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp25, tmp7);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(12, 4))) {
                byte_d0 = simd_andc(r80_7ff_tmp25, tmp9);
                byte_range_b0_bf = r80_7ff_tmp7;
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_d0, carryQ.get_carry_in(12), byte_d0_adv));
                r400_4ff_tmp1 = simd_and(byte_d0_adv, byte_range_b0_bf);
                struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r400_4ff_tmp1);
                r400_4ff_tmp2 = simd_andc(r80_7ff_tmp9, tmp7);
                byte_d1 = simd_and(r80_7ff_tmp25, r400_4ff_tmp2);
                r400_4ff_tmp3 = simd_andc(r80_7ff_tmp5, basis_bits.bit_2);
                r400_4ff_tmp4 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r400_4ff_tmp5 = simd_and(r80_7ff_tmp5, r400_4ff_tmp4);
                r400_4ff_tmp6 = simd_and(r400_4ff_tmp5, r400_4ff_tmp2);
                r400_4ff_tmp7 = simd_or(r400_4ff_tmp3, r400_4ff_tmp6);
                r400_4ff_tmp8 = simd_and(r400_4ff_tmp5, r80_7ff_tmp12);
                r400_4ff_tmp9 = simd_or(r400_4ff_tmp7, r400_4ff_tmp8);
                r400_4ff_tmp10 = simd_and(r400_4ff_tmp5, r80_7ff_tmp10);
                r400_4ff_tmp11 = simd_or(r400_4ff_tmp9, r400_4ff_tmp10);
                r400_4ff_tmp12 = simd_and(r80_7ff_tmp8, tmp3);
                r400_4ff_tmp13 = simd_and(r400_4ff_tmp5, r400_4ff_tmp12);
                r400_4ff_tmp14 = simd_or(r400_4ff_tmp11, r400_4ff_tmp13);
                r400_4ff_tmp15 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r400_4ff_tmp16 = simd_and(r400_4ff_tmp15, r80_7ff_tmp9);
                r400_4ff_tmp17 = simd_and(r400_4ff_tmp5, r400_4ff_tmp16);
                r400_4ff_tmp18 = simd_or(r400_4ff_tmp14, r400_4ff_tmp17);
                r400_4ff_tmp19 = simd_and(r400_4ff_tmp15, tmp3);
                r400_4ff_tmp20 = simd_and(r400_4ff_tmp5, r400_4ff_tmp19);
                r400_4ff_tmp21 = simd_or(r400_4ff_tmp18, r400_4ff_tmp20);
                r400_4ff_tmp22 = simd_and(r80_7ff_tmp17, r80_7ff_tmp9);
                r400_4ff_tmp23 = simd_and(r400_4ff_tmp5, r400_4ff_tmp22);
                r400_4ff_tmp24 = simd_or(r400_4ff_tmp21, r400_4ff_tmp23);
                r400_4ff_tmp25 = simd_and(r400_4ff_tmp5, r80_7ff_tmp18);
                r400_4ff_tmp26 = simd_or(r400_4ff_tmp24, r400_4ff_tmp25);
                r400_4ff_tmp27 = simd_and(byte_range_b0_bf, r400_4ff_tmp2);
                r400_4ff_tmp28 = simd_or(r400_4ff_tmp26, r400_4ff_tmp27);
                r400_4ff_tmp29 = simd_and(byte_range_b0_bf, r80_7ff_tmp12);
                r400_4ff_tmp30 = simd_or(r400_4ff_tmp28, r400_4ff_tmp29);
                r400_4ff_tmp31 = simd_and(byte_range_b0_bf, r80_7ff_tmp10);
                r400_4ff_tmp32 = simd_or(r400_4ff_tmp30, r400_4ff_tmp31);
                r400_4ff_tmp33 = simd_and(byte_range_b0_bf, r400_4ff_tmp12);
                r400_4ff_tmp34 = simd_or(r400_4ff_tmp32, r400_4ff_tmp33);
                r400_4ff_tmp35 = simd_and(byte_range_b0_bf, r400_4ff_tmp16);
                r400_4ff_tmp36 = simd_or(r400_4ff_tmp34, r400_4ff_tmp35);
                r400_4ff_tmp37 = simd_and(byte_range_b0_bf, r400_4ff_tmp19);
                r400_4ff_tmp38 = simd_or(r400_4ff_tmp36, r400_4ff_tmp37);
                r400_4ff_tmp39 = simd_and(byte_range_b0_bf, r400_4ff_tmp22);
                r400_4ff_tmp40 = simd_or(r400_4ff_tmp38, r400_4ff_tmp39);
                r400_4ff_tmp41 = simd_and(byte_range_b0_bf, r80_7ff_tmp18);
                cc_range_440_47f_2 = simd_or(r400_4ff_tmp40, r400_4ff_tmp41);
                carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_d1, carryQ.get_carry_in(13), byte_d1_adv));
                r400_4ff_tmp42 = simd_and(byte_d1_adv, cc_range_440_47f_2);
                struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r400_4ff_tmp42);
                byte_d2 = simd_and(r80_7ff_tmp25, r80_7ff_tmp4);
                r400_4ff_tmp43 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                r400_4ff_tmp44 = simd_or(r400_4ff_tmp2, r400_4ff_tmp19);
                r400_4ff_tmp45 = simd_or(r400_4ff_tmp44, r400_4ff_tmp22);
                r400_4ff_tmp46 = simd_or(r400_4ff_tmp45, r80_7ff_tmp18);
                r400_4ff_tmp47 = simd_and(r400_4ff_tmp43, r400_4ff_tmp46);
                r400_4ff_tmp48 = simd_and(r80_7ff_tmp5, r80_7ff_tmp24);
                r400_4ff_tmp49 = simd_and(r400_4ff_tmp48, r400_4ff_tmp2);
                r400_4ff_tmp50 = simd_or(r400_4ff_tmp47, r400_4ff_tmp49);
                r400_4ff_tmp51 = simd_and(r400_4ff_tmp48, r80_7ff_tmp12);
                r400_4ff_tmp52 = simd_or(r400_4ff_tmp50, r400_4ff_tmp51);
                r400_4ff_tmp53 = simd_and(r400_4ff_tmp48, r80_7ff_tmp10);
                r400_4ff_tmp54 = simd_or(r400_4ff_tmp52, r400_4ff_tmp53);
                r400_4ff_tmp55 = simd_and(r400_4ff_tmp48, r400_4ff_tmp12);
                r400_4ff_tmp56 = simd_or(r400_4ff_tmp54, r400_4ff_tmp55);
                r400_4ff_tmp57 = simd_and(r400_4ff_tmp48, r400_4ff_tmp16);
                r400_4ff_tmp58 = simd_or(r400_4ff_tmp56, r400_4ff_tmp57);
                r400_4ff_tmp59 = simd_and(r400_4ff_tmp48, r400_4ff_tmp19);
                r400_4ff_tmp60 = simd_or(r400_4ff_tmp58, r400_4ff_tmp59);
                r400_4ff_tmp61 = simd_and(r400_4ff_tmp48, r400_4ff_tmp22);
                r400_4ff_tmp62 = simd_or(r400_4ff_tmp60, r400_4ff_tmp61);
                r400_4ff_tmp63 = simd_and(r400_4ff_tmp48, r80_7ff_tmp18);
                r400_4ff_tmp64 = simd_or(r400_4ff_tmp62, r400_4ff_tmp63);
                r400_4ff_tmp65 = simd_or(r400_4ff_tmp64, r400_4ff_tmp6);
                r400_4ff_tmp66 = simd_or(r400_4ff_tmp65, r400_4ff_tmp8);
                r400_4ff_tmp67 = simd_or(r400_4ff_tmp66, r400_4ff_tmp10);
                r400_4ff_tmp68 = simd_or(r400_4ff_tmp67, r400_4ff_tmp13);
                r400_4ff_tmp69 = simd_or(r400_4ff_tmp68, r400_4ff_tmp17);
                r400_4ff_tmp70 = simd_or(r400_4ff_tmp69, r400_4ff_tmp20);
                r400_4ff_tmp71 = simd_or(r400_4ff_tmp70, r400_4ff_tmp23);
                r400_4ff_tmp72 = simd_or(r400_4ff_tmp71, r400_4ff_tmp25);
                r400_4ff_tmp73 = simd_or(r400_4ff_tmp72, r400_4ff_tmp27);
                r400_4ff_tmp74 = simd_or(r400_4ff_tmp73, r400_4ff_tmp29);
                r400_4ff_tmp75 = simd_or(r400_4ff_tmp74, r400_4ff_tmp31);
                r400_4ff_tmp76 = simd_or(r400_4ff_tmp75, r400_4ff_tmp33);
                r400_4ff_tmp77 = simd_or(r400_4ff_tmp76, r400_4ff_tmp35);
                r400_4ff_tmp78 = simd_or(r400_4ff_tmp77, r400_4ff_tmp37);
                r400_4ff_tmp79 = simd_or(r400_4ff_tmp78, r400_4ff_tmp39);
                cc_range_481_4bf_2 = simd_or(r400_4ff_tmp79, r400_4ff_tmp41);
                carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(14), byte_d2_adv));
                r400_4ff_tmp80 = simd_and(byte_d2_adv, cc_range_481_4bf_2);
                struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r400_4ff_tmp80);
                byte_d3 = simd_and(r80_7ff_tmp25, r80_7ff_tmp12);
                r400_4ff_tmp81 = simd_andc(r80_7ff_tmp8, tmp8);
                r400_4ff_tmp82 = simd_or(r80_7ff_tmp4, r400_4ff_tmp81);
                r400_4ff_tmp83 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
                r400_4ff_tmp84 = simd_or(r400_4ff_tmp82, r400_4ff_tmp83);
                r400_4ff_tmp85 = simd_andc(r400_4ff_tmp15, tmp8);
                r400_4ff_tmp86 = simd_or(r400_4ff_tmp84, r400_4ff_tmp85);
                r400_4ff_tmp87 = simd_and(r400_4ff_tmp15, r80_7ff_tmp3);
                r400_4ff_tmp88 = simd_or(r400_4ff_tmp86, r400_4ff_tmp87);
                r400_4ff_tmp89 = simd_andc(r80_7ff_tmp17, tmp8);
                r400_4ff_tmp90 = simd_or(r400_4ff_tmp88, r400_4ff_tmp89);
                r400_4ff_tmp91 = simd_and(r80_7ff_tmp17, basis_bits.bit_6);
                r400_4ff_tmp92 = simd_or(r400_4ff_tmp90, r400_4ff_tmp91);
                r400_4ff_tmp93 = simd_and(r400_4ff_tmp43, r400_4ff_tmp92);
                r400_4ff_tmp94 = simd_or(r400_4ff_tmp93, r400_4ff_tmp49);
                r400_4ff_tmp95 = simd_or(r400_4ff_tmp94, r400_4ff_tmp51);
                r400_4ff_tmp96 = simd_or(r400_4ff_tmp95, r400_4ff_tmp53);
                r400_4ff_tmp97 = simd_or(r400_4ff_tmp96, r400_4ff_tmp55);
                r400_4ff_tmp98 = simd_or(r400_4ff_tmp97, r400_4ff_tmp57);
                r400_4ff_tmp99 = simd_or(r400_4ff_tmp98, r400_4ff_tmp59);
                r400_4ff_tmp100 = simd_or(r400_4ff_tmp99, r400_4ff_tmp61);
                r400_4ff_tmp101 = simd_or(r400_4ff_tmp100, r400_4ff_tmp63);
                r400_4ff_tmp102 = simd_or(r400_4ff_tmp101, r400_4ff_tmp6);
                r400_4ff_tmp103 = simd_or(r400_4ff_tmp102, r400_4ff_tmp8);
                r400_4ff_tmp104 = simd_or(r400_4ff_tmp103, r400_4ff_tmp10);
                r400_4ff_tmp105 = simd_or(r400_4ff_tmp104, r400_4ff_tmp13);
                r400_4ff_tmp106 = simd_or(r400_4ff_tmp105, r400_4ff_tmp17);
                r400_4ff_tmp107 = simd_or(r400_4ff_tmp106, r400_4ff_tmp20);
                r400_4ff_tmp108 = simd_or(r400_4ff_tmp107, r400_4ff_tmp23);
                r400_4ff_tmp109 = simd_or(r400_4ff_tmp108, r400_4ff_tmp25);
                r400_4ff_tmp110 = simd_or(r400_4ff_tmp109, r400_4ff_tmp27);
                r400_4ff_tmp111 = simd_or(r400_4ff_tmp110, r400_4ff_tmp29);
                r400_4ff_tmp112 = simd_or(r400_4ff_tmp111, r400_4ff_tmp31);
                r400_4ff_tmp113 = simd_or(r400_4ff_tmp112, r400_4ff_tmp33);
                r400_4ff_tmp114 = simd_or(r400_4ff_tmp113, r400_4ff_tmp35);
                r400_4ff_tmp115 = simd_or(r400_4ff_tmp114, r400_4ff_tmp37);
                r400_4ff_tmp116 = simd_or(r400_4ff_tmp115, r400_4ff_tmp39);
                cc_range_4c2_4ff_2 = simd_or(r400_4ff_tmp116, r400_4ff_tmp41);
                carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(15), byte_d3_adv));
                r400_4ff_tmp117 = simd_and(byte_d3_adv, cc_range_4c2_4ff_2);
                struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r400_4ff_tmp117);
              }
              else {
                carryQ.CarryDequeueEnqueue(12, 4);
              }
              r400_5ff_tmp1 = simd_andc(r80_7ff_tmp8, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp25, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp25, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(16), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(17, 2))) {
                r500_58f_tmp1 = simd_andc(r80_7ff_tmp8, tmp8);
                byte_d4 = simd_and(r80_7ff_tmp25, r500_58f_tmp1);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp6);
                carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(17), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp3)) {
                  cc_range_501_52f_2 = simd_and(byte_range_80_af, basis_bits.bit_7);
                  byte_d4_adv = r500_58f_tmp2;
                  r500_52f_tmp1 = simd_and(byte_d4_adv, cc_range_501_52f_2);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r500_52f_tmp1);
                }
                byte_range_b0_bf = r80_7ff_tmp7;
                r500_58f_tmp4 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                byte_d5 = simd_and(r80_7ff_tmp25, r80_7ff_tmp10);
                r500_58f_tmp5 = simd_or(r500_58f_tmp4, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp4);
                if ((bitblock::any(r500_58f_tmp6) || carryQ.CarryTest(18, 1))) {
                  r530_58f_tmp1 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                  r530_58f_tmp2 = simd_or(basis_bits.bit_3, tmp9);
                  byte_range_a1_bf = simd_and(r530_58f_tmp1, r530_58f_tmp2);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(18), byte_d5_adv));
                  r530_58f_tmp3 = simd_and(byte_d5_adv, byte_range_a1_bf);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r530_58f_tmp3);
                  byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_d6_adv = r400_5ff_tmp3;
                  r530_58f_tmp4 = simd_and(byte_d6_adv, byte_range_80_87);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r530_58f_tmp4);
                }
                else {
                  carryQ.CarryDequeueEnqueue(18, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(17, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(12, 7);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 19);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(19, 29))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp7);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp8);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(19), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(20, 19))) {
              r800_4dff_tmp1 = simd_or(tmp7, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(20, 10))) {
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp7);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(20, 10))) {
                  r1000_1fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp1);
                  r1000_1fff_tmp3 = simd_and(r800_ffff_tmp1, r800_1fff_tmp1);
                  byte_b5 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp3);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(20), r1000_1fff_tmp4));
                  sequence_e1_b5 = simd_and(r1000_1fff_tmp4, byte_b5);
                  byte_e1_adv = r1000_1fff_tmp4;
                  r1000_1fff_tmp5 = simd_and(r800_1fff_tmp1, basis_bits.bit_4);
                  cc_range_1d79_1d7d_3 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp5);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e1_b5, carryQ.get_carry_in(21), sequence_e1_b5_adv));
                  r1000_1fff_tmp6 = simd_and(sequence_e1_b5_adv, cc_range_1d79_1d7d_3);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r1000_1fff_tmp6);
                  r1000_1fff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp8 = simd_andc(r1000_1fff_tmp7, tmp8);
                  byte_b8 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp8);
                  sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
                  cc_range_1e01_1e3f_3 = simd_and(r800_ffff_tmp3, basis_bits.bit_7);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(22), sequence_e1_b8_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_b8_adv, cc_range_1e01_1e3f_3);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r1000_1fff_tmp9);
                  r1000_1fff_tmp10 = simd_and(r1000_1fff_tmp7, r800_1fff_tmp1);
                  byte_b9 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp10);
                  sequence_e1_b9 = simd_and(byte_e1_adv, byte_b9);
                  cc_range_1e41_1e7f_3 = cc_range_1e01_1e3f_3;
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e1_b9, carryQ.get_carry_in(23), sequence_e1_b9_adv));
                  r1000_1fff_tmp11 = simd_and(sequence_e1_b9_adv, cc_range_1e41_1e7f_3);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r1000_1fff_tmp11);
                  r1000_1fff_tmp12 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp13 = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp12);
                  byte_ba = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp13);
                  sequence_e1_ba = simd_and(byte_e1_adv, byte_ba);
                  r1000_1fff_tmp14 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp15 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp14);
                  r1000_1fff_tmp16 = simd_andc(basis_bits.bit_7, tmp7);
                  r1000_1fff_tmp17 = simd_or(r1000_1fff_tmp16, r1000_1fff_tmp3);
                  r1000_1fff_tmp18 = simd_and(r800_ffff_tmp1, tmp3);
                  r1000_1fff_tmp19 = simd_or(r1000_1fff_tmp17, r1000_1fff_tmp18);
                  r1000_1fff_tmp20 = simd_or(r1000_1fff_tmp19, r1000_1fff_tmp10);
                  r1000_1fff_tmp21 = simd_and(r1000_1fff_tmp7, tmp3);
                  r1000_1fff_tmp22 = simd_or(r1000_1fff_tmp20, r1000_1fff_tmp21);
                  r1000_1fff_tmp23 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp24 = simd_and(r1000_1fff_tmp23, r800_1fff_tmp1);
                  r1000_1fff_tmp25 = simd_or(r1000_1fff_tmp22, r1000_1fff_tmp24);
                  r1000_1fff_tmp26 = simd_and(r1000_1fff_tmp23, tmp3);
                  r1000_1fff_tmp27 = simd_or(r1000_1fff_tmp25, r1000_1fff_tmp26);
                  r1000_1fff_tmp28 = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp27);
                  r1000_1fff_tmp29 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp30 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp29);
                  r1000_1fff_tmp31 = simd_and(r1000_1fff_tmp30, r800_1fff_tmp2);
                  r1000_1fff_tmp32 = simd_or(r1000_1fff_tmp28, r1000_1fff_tmp31);
                  r1000_1fff_tmp33 = simd_andc(tmp3, tmp7);
                  r1000_1fff_tmp34 = simd_and(r1000_1fff_tmp30, r1000_1fff_tmp33);
                  r1000_1fff_tmp35 = simd_or(r1000_1fff_tmp32, r1000_1fff_tmp34);
                  r1000_1fff_tmp36 = simd_not(basis_bits.bit_5);
                  r1000_1fff_tmp37 = simd_and(basis_bits.bit_5, tmp8);
                  r1000_1fff_tmp38 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp36), simd_andc(r1000_1fff_tmp37, basis_bits.bit_4));
                  r1000_1fff_tmp39 = simd_and(r1000_1fff_tmp30, r1000_1fff_tmp38);
                  r1000_1fff_tmp40 = simd_or(r1000_1fff_tmp35, r1000_1fff_tmp39);
                  r1000_1fff_tmp41 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r1000_1fff_tmp42 = simd_and(r1000_1fff_tmp41, r800_1fff_tmp2);
                  r1000_1fff_tmp43 = simd_or(r1000_1fff_tmp40, r1000_1fff_tmp42);
                  r1000_1fff_tmp44 = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp33);
                  r1000_1fff_tmp45 = simd_or(r1000_1fff_tmp43, r1000_1fff_tmp44);
                  r1000_1fff_tmp46 = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp3);
                  r1000_1fff_tmp47 = simd_or(r1000_1fff_tmp45, r1000_1fff_tmp46);
                  r1000_1fff_tmp48 = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp18);
                  r1000_1fff_tmp49 = simd_or(r1000_1fff_tmp47, r1000_1fff_tmp48);
                  r1000_1fff_tmp50 = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp10);
                  r1000_1fff_tmp51 = simd_or(r1000_1fff_tmp49, r1000_1fff_tmp50);
                  r1000_1fff_tmp52 = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp21);
                  r1000_1fff_tmp53 = simd_or(r1000_1fff_tmp51, r1000_1fff_tmp52);
                  r1000_1fff_tmp54 = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp24);
                  r1000_1fff_tmp55 = simd_or(r1000_1fff_tmp53, r1000_1fff_tmp54);
                  r1000_1fff_tmp56 = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp26);
                  r1000_1fff_tmp57 = simd_or(r1000_1fff_tmp55, r1000_1fff_tmp56);
                  r1000_1fff_tmp58 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp2);
                  r1000_1fff_tmp59 = simd_or(r1000_1fff_tmp57, r1000_1fff_tmp58);
                  r1000_1fff_tmp60 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp33);
                  r1000_1fff_tmp61 = simd_or(r1000_1fff_tmp59, r1000_1fff_tmp60);
                  r1000_1fff_tmp62 = simd_or(r1000_1fff_tmp61, byte_b5);
                  r1000_1fff_tmp63 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp18);
                  r1000_1fff_tmp64 = simd_or(r1000_1fff_tmp62, r1000_1fff_tmp63);
                  r1000_1fff_tmp65 = simd_or(r1000_1fff_tmp64, byte_b9);
                  r1000_1fff_tmp66 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp21);
                  r1000_1fff_tmp67 = simd_or(r1000_1fff_tmp65, r1000_1fff_tmp66);
                  r1000_1fff_tmp68 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp24);
                  r1000_1fff_tmp69 = simd_or(r1000_1fff_tmp67, r1000_1fff_tmp68);
                  r1000_1fff_tmp70 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp26);
                  cc_range_1e81_1ebf_3 = simd_or(r1000_1fff_tmp69, r1000_1fff_tmp70);
                  carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e1_ba, carryQ.get_carry_in(24), sequence_e1_ba_adv));
                  r1000_1fff_tmp71 = simd_and(sequence_e1_ba_adv, cc_range_1e81_1ebf_3);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r1000_1fff_tmp71);
                  byte_bb = r1000_1fff_tmp66;
                  sequence_e1_bb = simd_and(byte_e1_adv, byte_bb);
                  cc_range_1ec1_1eff_3 = cc_range_1e01_1e3f_3;
                  carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e1_bb, carryQ.get_carry_in(25), sequence_e1_bb_adv));
                  r1000_1fff_tmp72 = simd_and(sequence_e1_bb_adv, cc_range_1ec1_1eff_3);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r1000_1fff_tmp72);
                  r1000_1fff_tmp73 = simd_andc(r1000_1fff_tmp23, tmp8);
                  byte_bc = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp73);
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  r1000_1fff_tmp74 = simd_andc(r1000_1fff_tmp15, basis_bits.bit_4);
                  r1000_1fff_tmp75 = simd_andc(r1000_1fff_tmp30, basis_bits.bit_4);
                  r1000_1fff_tmp76 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp77 = simd_andc(r1000_1fff_tmp75, r1000_1fff_tmp76);
                  r1000_1fff_tmp78 = simd_or(r1000_1fff_tmp74, r1000_1fff_tmp77);
                  r1000_1fff_tmp79 = simd_andc(r1000_1fff_tmp41, basis_bits.bit_4);
                  r1000_1fff_tmp80 = simd_or(r1000_1fff_tmp78, r1000_1fff_tmp79);
                  r1000_1fff_tmp81 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  cc_range_1f00_1f30_3 = simd_or(r1000_1fff_tmp80, r1000_1fff_tmp81);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(26), sequence_e1_bc_adv));
                  r1000_1fff_tmp82 = simd_and(sequence_e1_bc_adv, cc_range_1f00_1f30_3);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r1000_1fff_tmp82);
                  byte_bd = r1000_1fff_tmp68;
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  r1000_1fff_tmp83 = simd_andc(r1000_1fff_tmp74, r1000_1fff_tmp76);
                  r1000_1fff_tmp84 = simd_or(r1000_1fff_tmp83, r1000_1fff_tmp75);
                  r1000_1fff_tmp85 = simd_or(r1000_1fff_tmp84, r1000_1fff_tmp79);
                  r1000_1fff_tmp86 = simd_and(basis_bits.bit_4, r1000_1fff_tmp76);
                  r1000_1fff_tmp87 = simd_andc(r1000_1fff_tmp2, r1000_1fff_tmp86);
                  cc_range_1f40_1f70_3 = simd_or(r1000_1fff_tmp85, r1000_1fff_tmp87);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(27), sequence_e1_bd_adv));
                  r1000_1fff_tmp88 = simd_and(sequence_e1_bd_adv, cc_range_1f40_1f70_3);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r1000_1fff_tmp88);
                  r1000_1fff_tmp89 = simd_and(r1000_1fff_tmp23, r1000_1fff_tmp12);
                  byte_be = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp89);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  r1000_1fff_tmp90 = simd_or(basis_bits.bit_4, r1000_1fff_tmp37);
                  r1000_1fff_tmp91 = simd_and(basis_bits.bit_3, r1000_1fff_tmp90);
                  r1000_1fff_tmp92 = simd_and(basis_bits.bit_2, r1000_1fff_tmp91);
                  r1000_1fff_tmp93 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp92);
                  r1000_1fff_tmp94 = simd_and(r800_ffff_tmp1, basis_bits.bit_6);
                  r1000_1fff_tmp95 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp94);
                  r1000_1fff_tmp96 = simd_or(r1000_1fff_tmp93, r1000_1fff_tmp95);
                  r1000_1fff_tmp97 = simd_or(r1000_1fff_tmp96, byte_bc);
                  cc_range_1f80_1fbe_3 = simd_or(r1000_1fff_tmp97, byte_be);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(28), sequence_e1_be_adv));
                  r1000_1fff_tmp98 = simd_and(sequence_e1_be_adv, cc_range_1f80_1fbe_3);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r1000_1fff_tmp98);
                  byte_bf = r1000_1fff_tmp70;
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  r1000_1fff_tmp99 = simd_not(tmp8);
                  r1000_1fff_tmp100 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp99), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r1000_1fff_tmp101 = simd_and(r1000_1fff_tmp74, r1000_1fff_tmp100);
                  r1000_1fff_tmp102 = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp94);
                  r1000_1fff_tmp103 = simd_or(r1000_1fff_tmp101, r1000_1fff_tmp102);
                  r1000_1fff_tmp104 = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp73);
                  r1000_1fff_tmp105 = simd_or(r1000_1fff_tmp103, r1000_1fff_tmp104);
                  r1000_1fff_tmp106 = simd_andc(r1000_1fff_tmp30, tmp7);
                  r1000_1fff_tmp107 = simd_or(r1000_1fff_tmp105, r1000_1fff_tmp106);
                  r1000_1fff_tmp108 = simd_and(r1000_1fff_tmp30, r1000_1fff_tmp94);
                  r1000_1fff_tmp109 = simd_or(r1000_1fff_tmp107, r1000_1fff_tmp108);
                  r1000_1fff_tmp110 = simd_or(r1000_1fff_tmp109, r1000_1fff_tmp79);
                  r1000_1fff_tmp111 = simd_and(r1000_1fff_tmp81, r1000_1fff_tmp100);
                  r1000_1fff_tmp112 = simd_or(r1000_1fff_tmp110, r1000_1fff_tmp111);
                  r1000_1fff_tmp113 = simd_or(r1000_1fff_tmp112, r1000_1fff_tmp95);
                  cc_range_1fc2_1ffc_3 = simd_or(r1000_1fff_tmp113, byte_bc);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(29), sequence_e1_bf_adv));
                  r1000_1fff_tmp114 = simd_and(sequence_e1_bf_adv, cc_range_1fc2_1ffc_3);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r1000_1fff_tmp114);
                }
                else {
                  carryQ.CarryDequeueEnqueue(20, 10);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(20, 10);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp7);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(30, 9))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp7);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(30, 9))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp3);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(30), r2000_2fff_tmp5));
                  sequence_e2_85 = simd_and(r2000_2fff_tmp5, byte_85);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp7 = simd_and(r2000_2fff_tmp6, r2000_4dff_tmp1);
                  r2000_2fff_tmp8 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp7);
                  r2000_2fff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp10 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp9);
                  cc_range_214e_2170_3 = simd_or(r2000_2fff_tmp8, r2000_2fff_tmp10);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(31), sequence_e2_85_adv));
                  r2000_2fff_tmp11 = simd_and(sequence_e2_85_adv, cc_range_214e_2170_3);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r2000_2fff_tmp11);
                  r2000_2fff_tmp12 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp12);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp2);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(32), sequence_e2_86_adv));
                  r2000_2fff_tmp13 = simd_and(sequence_e2_86_adv, byte_84);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r2000_2fff_tmp13);
                  r2000_2fff_tmp14 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp15 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp14);
                  r2000_2fff_tmp16 = simd_andc(tmp3, tmp7);
                  byte_93 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp16);
                  sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
                  r2000_2fff_tmp17 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp18 = simd_and(basis_bits.bit_4, r2000_2fff_tmp17);
                  r2000_2fff_tmp19 = simd_or(basis_bits.bit_3, r2000_2fff_tmp18);
                  r2000_2fff_tmp20 = simd_not(r2000_2fff_tmp19);
                  r2000_2fff_tmp21 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp20), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_a9 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp21);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(33), sequence_e2_93_adv));
                  r2000_2fff_tmp22 = simd_and(sequence_e2_93_adv, byte_range_90_a9);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r2000_2fff_tmp22);
                  byte_b0 = simd_andc(r2000_2fff_tmp10, tmp9);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  byte_range_b0_bf = r2000_2fff_tmp10;
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(34), sequence_e2_b0_adv));
                  r2000_2fff_tmp23 = simd_and(sequence_e2_b0_adv, byte_range_b0_bf);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r2000_2fff_tmp23);
                  r2000_2fff_tmp24 = simd_andc(r2000_2fff_tmp3, tmp7);
                  byte_b1 = simd_and(byte_range_b0_bf, r2000_2fff_tmp24);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp25 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp26 = simd_and(r2000_2fff_tmp6, tmp3);
                  r2000_2fff_tmp27 = simd_and(basis_bits.bit_3, r2000_2fff_tmp26);
                  r2000_2fff_tmp28 = simd_andc(r2000_2fff_tmp25, r2000_2fff_tmp27);
                  r2000_2fff_tmp29 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r2000_2fff_tmp30 = simd_and(r2000_2fff_tmp29, r2000_2fff_tmp24);
                  r2000_2fff_tmp31 = simd_or(r2000_2fff_tmp28, r2000_2fff_tmp30);
                  r2000_2fff_tmp32 = simd_and(r2000_2fff_tmp29, r800_ffff_tmp1);
                  r2000_2fff_tmp33 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp34 = simd_and(r2000_2fff_tmp32, r2000_2fff_tmp33);
                  r2000_2fff_tmp35 = simd_or(r2000_2fff_tmp31, r2000_2fff_tmp34);
                  r2000_2fff_tmp36 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp37 = simd_andc(r2000_2fff_tmp36, tmp8);
                  r2000_2fff_tmp38 = simd_and(r2000_2fff_tmp29, r2000_2fff_tmp37);
                  r2000_2fff_tmp39 = simd_or(r2000_2fff_tmp35, r2000_2fff_tmp38);
                  r2000_2fff_tmp40 = simd_and(r2000_2fff_tmp36, r2000_4dff_tmp1);
                  r2000_2fff_tmp41 = simd_and(r2000_2fff_tmp29, r2000_2fff_tmp40);
                  r2000_2fff_tmp42 = simd_or(r2000_2fff_tmp39, r2000_2fff_tmp41);
                  r2000_2fff_tmp43 = simd_andc(r2000_2fff_tmp6, tmp8);
                  r2000_2fff_tmp44 = simd_and(r2000_2fff_tmp29, r2000_2fff_tmp43);
                  r2000_2fff_tmp45 = simd_or(r2000_2fff_tmp42, r2000_2fff_tmp44);
                  r2000_2fff_tmp46 = simd_and(byte_range_b0_bf, r2000_2fff_tmp16);
                  r2000_2fff_tmp47 = simd_or(r2000_2fff_tmp45, r2000_2fff_tmp46);
                  r2000_2fff_tmp48 = simd_and(byte_range_b0_bf, r2000_2fff_tmp12);
                  cc_range_2c40_2c76_3 = simd_or(r2000_2fff_tmp47, r2000_2fff_tmp48);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(35), sequence_e2_b1_adv));
                  r2000_2fff_tmp49 = simd_and(sequence_e2_b1_adv, cc_range_2c40_2c76_3);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r2000_2fff_tmp49);
                  byte_b2 = simd_and(byte_range_b0_bf, r2000_4dff_tmp2);
                  sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
                  cc_range_2c81_2cbf_3 = simd_and(r800_ffff_tmp3, basis_bits.bit_7);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(36), sequence_e2_b2_adv));
                  r2000_2fff_tmp50 = simd_and(sequence_e2_b2_adv, cc_range_2c81_2cbf_3);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r2000_2fff_tmp50);
                  byte_b3 = r2000_2fff_tmp46;
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp51 = simd_andc(basis_bits.bit_7, tmp7);
                  r2000_2fff_tmp52 = simd_or(r2000_2fff_tmp51, r2000_2fff_tmp4);
                  r2000_2fff_tmp53 = simd_and(r800_ffff_tmp1, tmp3);
                  r2000_2fff_tmp54 = simd_or(r2000_2fff_tmp52, r2000_2fff_tmp53);
                  r2000_2fff_tmp55 = simd_and(r2000_2fff_tmp36, r2000_2fff_tmp3);
                  r2000_2fff_tmp56 = simd_or(r2000_2fff_tmp54, r2000_2fff_tmp55);
                  r2000_2fff_tmp57 = simd_and(r2000_2fff_tmp36, tmp3);
                  r2000_2fff_tmp58 = simd_or(r2000_2fff_tmp56, r2000_2fff_tmp57);
                  r2000_2fff_tmp59 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp3);
                  r2000_2fff_tmp60 = simd_or(r2000_2fff_tmp58, r2000_2fff_tmp59);
                  r2000_2fff_tmp61 = simd_or(r2000_2fff_tmp60, r2000_2fff_tmp26);
                  r2000_2fff_tmp62 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp61);
                  r2000_2fff_tmp63 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp24);
                  r2000_2fff_tmp64 = simd_or(r2000_2fff_tmp62, r2000_2fff_tmp63);
                  r2000_2fff_tmp65 = simd_or(r2000_2fff_tmp64, byte_93);
                  r2000_2fff_tmp66 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp4);
                  r2000_2fff_tmp67 = simd_or(r2000_2fff_tmp65, r2000_2fff_tmp66);
                  r2000_2fff_tmp68 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp53);
                  r2000_2fff_tmp69 = simd_or(r2000_2fff_tmp67, r2000_2fff_tmp68);
                  r2000_2fff_tmp70 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp55);
                  r2000_2fff_tmp71 = simd_or(r2000_2fff_tmp69, r2000_2fff_tmp70);
                  r2000_2fff_tmp72 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp57);
                  r2000_2fff_tmp73 = simd_or(r2000_2fff_tmp71, r2000_2fff_tmp72);
                  r2000_2fff_tmp74 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp59);
                  r2000_2fff_tmp75 = simd_or(r2000_2fff_tmp73, r2000_2fff_tmp74);
                  r2000_2fff_tmp76 = simd_and(r2000_2fff_tmp15, r2000_2fff_tmp26);
                  r2000_2fff_tmp77 = simd_or(r2000_2fff_tmp75, r2000_2fff_tmp76);
                  r2000_2fff_tmp78 = simd_or(r2000_2fff_tmp77, r2000_2fff_tmp30);
                  r2000_2fff_tmp79 = simd_and(r2000_2fff_tmp29, r2000_2fff_tmp16);
                  r2000_2fff_tmp80 = simd_or(r2000_2fff_tmp78, r2000_2fff_tmp79);
                  r2000_2fff_tmp81 = simd_or(r2000_2fff_tmp80, r2000_2fff_tmp44);
                  r2000_2fff_tmp82 = simd_and(r2000_2fff_tmp29, r2000_2fff_tmp7);
                  r2000_2fff_tmp83 = simd_or(r2000_2fff_tmp81, r2000_2fff_tmp82);
                  cc_range_2cc1_2cf3_3 = simd_or(r2000_2fff_tmp83, byte_b3);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(37), sequence_e2_b3_adv));
                  r2000_2fff_tmp84 = simd_and(sequence_e2_b3_adv, cc_range_2cc1_2cf3_3);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r2000_2fff_tmp84);
                  byte_b4 = simd_and(byte_range_b0_bf, r800_ffff_tmp2);
                  sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
                  r2000_2fff_tmp85 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp86 = simd_or(basis_bits.bit_4, r2000_2fff_tmp85);
                  r2000_2fff_tmp87 = simd_or(basis_bits.bit_3, r2000_2fff_tmp86);
                  r2000_2fff_tmp88 = simd_and(basis_bits.bit_2, r2000_2fff_tmp87);
                  r2000_2fff_tmp89 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp88);
                  r2000_2fff_tmp90 = simd_and(r2000_2fff_tmp29, r2000_2fff_tmp53);
                  r2000_2fff_tmp91 = simd_or(r2000_2fff_tmp89, r2000_2fff_tmp90);
                  r2000_2fff_tmp92 = simd_and(r2000_2fff_tmp29, r2000_2fff_tmp59);
                  cc_range_2d00_2d2d_3 = simd_or(r2000_2fff_tmp91, r2000_2fff_tmp92);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(38), sequence_e2_b4_adv));
                  r2000_2fff_tmp93 = simd_and(sequence_e2_b4_adv, cc_range_2d00_2d2d_3);
                  struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r2000_2fff_tmp93);
                }
                else {
                  carryQ.CarryDequeueEnqueue(30, 9);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(30, 9);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(20, 19);
            }
            r800_ffff_tmp9 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp9, r800_ffff_tmp10);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(39, 9))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp4);
              ra000_ffff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp7 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp6);
              byte_99 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp7);
              carryQ.cq[39] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(39), ra000_ffff_tmp8));
              sequence_ea_99 = simd_and(ra000_ffff_tmp8, byte_99);
              byte_ea_adv = ra000_ffff_tmp8;
              ra000_ffff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp10 = simd_and(ra000_ffff_tmp9, basis_bits.bit_6);
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_3, ra000_ffff_tmp10);
              ra000_ffff_tmp12 = simd_and(basis_bits.bit_2, ra000_ffff_tmp11);
              ra000_ffff_tmp13 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp12);
              cc_range_a641_a66d_3 = simd_and(ra000_ffff_tmp13, basis_bits.bit_7);
              carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(40), sequence_ea_99_adv));
              ra000_ffff_tmp14 = simd_and(sequence_ea_99_adv, cc_range_a641_a66d_3);
              struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, ra000_ffff_tmp14);
              byte_9a = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp15 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp16 = simd_and(basis_bits.bit_3, ra000_ffff_tmp9);
              ra000_ffff_tmp17 = simd_andc(ra000_ffff_tmp15, ra000_ffff_tmp16);
              cc_range_a681_a69b_3 = simd_and(ra000_ffff_tmp17, basis_bits.bit_7);
              carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(41), sequence_ea_9a_adv));
              ra000_ffff_tmp18 = simd_and(sequence_ea_9a_adv, cc_range_a681_a69b_3);
              struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, ra000_ffff_tmp18);
              ra000_ffff_tmp19 = simd_andc(ra000_ffff_tmp9, tmp8);
              byte_9c = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp19);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              ra000_ffff_tmp20 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
              ra000_ffff_tmp21 = simd_andc(tmp3, tmp7);
              ra000_ffff_tmp22 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp6);
              ra000_ffff_tmp23 = simd_or(ra000_ffff_tmp21, ra000_ffff_tmp22);
              ra000_ffff_tmp24 = simd_and(r800_ffff_tmp1, tmp3);
              ra000_ffff_tmp25 = simd_or(ra000_ffff_tmp23, ra000_ffff_tmp24);
              ra000_ffff_tmp26 = simd_or(ra000_ffff_tmp25, ra000_ffff_tmp7);
              ra000_ffff_tmp27 = simd_and(ra000_ffff_tmp1, tmp3);
              ra000_ffff_tmp28 = simd_or(ra000_ffff_tmp26, ra000_ffff_tmp27);
              ra000_ffff_tmp29 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp6);
              ra000_ffff_tmp30 = simd_or(ra000_ffff_tmp28, ra000_ffff_tmp29);
              ra000_ffff_tmp31 = simd_and(ra000_ffff_tmp9, tmp3);
              ra000_ffff_tmp32 = simd_or(ra000_ffff_tmp30, ra000_ffff_tmp31);
              ra000_ffff_tmp33 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp32);
              ra000_ffff_tmp34 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp35 = simd_and(r800_ffff_tmp3, ra000_ffff_tmp34);
              ra000_ffff_tmp36 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp21);
              ra000_ffff_tmp37 = simd_or(ra000_ffff_tmp33, ra000_ffff_tmp36);
              ra000_ffff_tmp38 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp22);
              ra000_ffff_tmp39 = simd_or(ra000_ffff_tmp37, ra000_ffff_tmp38);
              ra000_ffff_tmp40 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp24);
              ra000_ffff_tmp41 = simd_or(ra000_ffff_tmp39, ra000_ffff_tmp40);
              ra000_ffff_tmp42 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp7);
              ra000_ffff_tmp43 = simd_or(ra000_ffff_tmp41, ra000_ffff_tmp42);
              ra000_ffff_tmp44 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp27);
              ra000_ffff_tmp45 = simd_or(ra000_ffff_tmp43, ra000_ffff_tmp44);
              ra000_ffff_tmp46 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp29);
              ra000_ffff_tmp47 = simd_or(ra000_ffff_tmp45, ra000_ffff_tmp46);
              ra000_ffff_tmp48 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp31);
              cc_range_a723_a73f_3 = simd_or(ra000_ffff_tmp47, ra000_ffff_tmp48);
              carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(42), sequence_ea_9c_adv));
              ra000_ffff_tmp49 = simd_and(sequence_ea_9c_adv, cc_range_a723_a73f_3);
              struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, ra000_ffff_tmp49);
              byte_9d = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp29);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              ra000_ffff_tmp50 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp51 = simd_andc(r800_ffff_tmp3, ra000_ffff_tmp50);
              ra000_ffff_tmp52 = simd_andc(basis_bits.bit_7, tmp7);
              ra000_ffff_tmp53 = simd_or(ra000_ffff_tmp52, ra000_ffff_tmp22);
              ra000_ffff_tmp54 = simd_or(ra000_ffff_tmp53, ra000_ffff_tmp24);
              ra000_ffff_tmp55 = simd_or(ra000_ffff_tmp54, ra000_ffff_tmp7);
              ra000_ffff_tmp56 = simd_or(ra000_ffff_tmp55, ra000_ffff_tmp27);
              ra000_ffff_tmp57 = simd_or(ra000_ffff_tmp56, ra000_ffff_tmp29);
              ra000_ffff_tmp58 = simd_or(ra000_ffff_tmp57, ra000_ffff_tmp31);
              ra000_ffff_tmp59 = simd_and(ra000_ffff_tmp51, ra000_ffff_tmp58);
              ra000_ffff_tmp60 = simd_andc(ra000_ffff_tmp6, tmp7);
              ra000_ffff_tmp61 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp60);
              ra000_ffff_tmp62 = simd_or(ra000_ffff_tmp59, ra000_ffff_tmp61);
              ra000_ffff_tmp63 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp21);
              ra000_ffff_tmp64 = simd_or(ra000_ffff_tmp62, ra000_ffff_tmp63);
              ra000_ffff_tmp65 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp22);
              ra000_ffff_tmp66 = simd_or(ra000_ffff_tmp64, ra000_ffff_tmp65);
              ra000_ffff_tmp67 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp24);
              ra000_ffff_tmp68 = simd_or(ra000_ffff_tmp66, ra000_ffff_tmp67);
              ra000_ffff_tmp69 = simd_or(ra000_ffff_tmp68, byte_99);
              ra000_ffff_tmp70 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp27);
              ra000_ffff_tmp71 = simd_or(ra000_ffff_tmp69, ra000_ffff_tmp70);
              ra000_ffff_tmp72 = simd_or(ra000_ffff_tmp71, byte_9d);
              ra000_ffff_tmp73 = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp31);
              ra000_ffff_tmp74 = simd_or(ra000_ffff_tmp72, ra000_ffff_tmp73);
              ra000_ffff_tmp75 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp60);
              ra000_ffff_tmp76 = simd_or(ra000_ffff_tmp74, ra000_ffff_tmp75);
              ra000_ffff_tmp77 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp21);
              ra000_ffff_tmp78 = simd_or(ra000_ffff_tmp76, ra000_ffff_tmp77);
              ra000_ffff_tmp79 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp22);
              ra000_ffff_tmp80 = simd_or(ra000_ffff_tmp78, ra000_ffff_tmp79);
              ra000_ffff_tmp81 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp24);
              ra000_ffff_tmp82 = simd_or(ra000_ffff_tmp80, ra000_ffff_tmp81);
              ra000_ffff_tmp83 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp7);
              ra000_ffff_tmp84 = simd_or(ra000_ffff_tmp82, ra000_ffff_tmp83);
              ra000_ffff_tmp85 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp27);
              ra000_ffff_tmp86 = simd_or(ra000_ffff_tmp84, ra000_ffff_tmp85);
              ra000_ffff_tmp87 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp29);
              ra000_ffff_tmp88 = simd_or(ra000_ffff_tmp86, ra000_ffff_tmp87);
              ra000_ffff_tmp89 = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp31);
              ra000_ffff_tmp90 = simd_or(ra000_ffff_tmp88, ra000_ffff_tmp89);
              ra000_ffff_tmp91 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp3);
              ra000_ffff_tmp92 = simd_or(ra000_ffff_tmp90, ra000_ffff_tmp91);
              ra000_ffff_tmp93 = simd_and(ra000_ffff_tmp35, ra000_ffff_tmp19);
              ra000_ffff_tmp94 = simd_or(ra000_ffff_tmp92, ra000_ffff_tmp93);
              cc_range_a741_a77f_3 = simd_or(ra000_ffff_tmp94, ra000_ffff_tmp48);
              carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(43), sequence_ea_9d_adv));
              ra000_ffff_tmp95 = simd_and(sequence_ea_9d_adv, cc_range_a741_a77f_3);
              struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, ra000_ffff_tmp95);
              ra000_ffff_tmp96 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp5, ra000_ffff_tmp96);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp97 = simd_or(ra000_ffff_tmp54, ra000_ffff_tmp19);
              ra000_ffff_tmp98 = simd_and(ra000_ffff_tmp51, ra000_ffff_tmp97);
              ra000_ffff_tmp99 = simd_or(ra000_ffff_tmp98, ra000_ffff_tmp61);
              ra000_ffff_tmp100 = simd_or(ra000_ffff_tmp99, ra000_ffff_tmp63);
              ra000_ffff_tmp101 = simd_or(ra000_ffff_tmp100, ra000_ffff_tmp67);
              ra000_ffff_tmp102 = simd_or(ra000_ffff_tmp101, byte_99);
              ra000_ffff_tmp103 = simd_or(ra000_ffff_tmp102, ra000_ffff_tmp70);
              ra000_ffff_tmp104 = simd_or(ra000_ffff_tmp103, byte_9d);
              ra000_ffff_tmp105 = simd_or(ra000_ffff_tmp104, ra000_ffff_tmp73);
              ra000_ffff_tmp106 = simd_or(ra000_ffff_tmp105, ra000_ffff_tmp75);
              ra000_ffff_tmp107 = simd_or(ra000_ffff_tmp106, ra000_ffff_tmp77);
              ra000_ffff_tmp108 = simd_or(ra000_ffff_tmp107, ra000_ffff_tmp79);
              ra000_ffff_tmp109 = simd_or(ra000_ffff_tmp108, ra000_ffff_tmp81);
              cc_range_a781_a7a9_3 = simd_or(ra000_ffff_tmp109, ra000_ffff_tmp83);
              carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(44), sequence_ea_9e_adv));
              ra000_ffff_tmp110 = simd_and(sequence_ea_9e_adv, cc_range_a781_a7a9_3);
              struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, ra000_ffff_tmp110);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp31);
              byte_ac = simd_and(ra000_ffff_tmp20, ra000_ffff_tmp19);
              carryQ.cq[45] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(45), ra000_ffff_tmp111));
              sequence_ef_ac = simd_and(ra000_ffff_tmp111, byte_ac);
              byte_ef_adv = ra000_ffff_tmp111;
              ra000_ffff_tmp112 = simd_andc(ra000_ffff_tmp51, basis_bits.bit_4);
              ra000_ffff_tmp113 = simd_and(basis_bits.bit_5, tmp3);
              ra000_ffff_tmp114 = simd_andc(ra000_ffff_tmp112, ra000_ffff_tmp113);
              ra000_ffff_tmp115 = simd_andc(ra000_ffff_tmp5, basis_bits.bit_4);
              ra000_ffff_tmp116 = simd_and(ra000_ffff_tmp115, tmp4);
              cc_range_fb00_fb13_3 = simd_or(ra000_ffff_tmp114, ra000_ffff_tmp116);
              carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(46), sequence_ef_ac_adv));
              ra000_ffff_tmp117 = simd_and(sequence_ef_ac_adv, cc_range_fb00_fb13_3);
              struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, ra000_ffff_tmp117);
              byte_bd = ra000_ffff_tmp46;
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_range_81_9a = simd_and(ra000_ffff_tmp15, tmp10);
              carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(47), sequence_ef_bd_adv));
              ra000_ffff_tmp118 = simd_and(sequence_ef_bd_adv, byte_range_81_9a);
              struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, ra000_ffff_tmp118);
            }
            else {
              carryQ.CarryDequeueEnqueue(39, 9);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(19, 29);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(48, 6))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp9);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp3 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_90 = simd_andc(r10000_10ffff_tmp3, tmp9);
            carryQ.cq[48] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(48), r10000_10ffff_tmp4));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp4, byte_90);
            byte_f0_adv = r10000_10ffff_tmp4;
            carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(49), r10000_10ffff_tmp5));
            sequence_f0_90_90 = simd_and(r10000_10ffff_tmp5, byte_90);
            sequence_f0_90_adv = r10000_10ffff_tmp5;
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp1, basis_bits.bit_2);
            r10000_10ffff_tmp7 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            byte_range_a8_bf = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp7);
            carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_f0_90_90, carryQ.get_carry_in(50), sequence_f0_90_90_adv));
            r10000_10ffff_tmp8 = simd_and(sequence_f0_90_90_adv, byte_range_a8_bf);
            struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r10000_10ffff_tmp8);
            r10000_10ffff_tmp9 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp10 = simd_andc(r10000_10ffff_tmp9, tmp7);
            byte_91 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp10);
            sequence_f0_90_91 = simd_and(sequence_f0_90_adv, byte_91);
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            byte_range_80_8f = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp11);
            carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_f0_90_91, carryQ.get_carry_in(51), sequence_f0_90_91_adv));
            r10000_10ffff_tmp12 = simd_and(sequence_f0_90_91_adv, byte_range_80_8f);
            struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r10000_10ffff_tmp12);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            r10000_10ffff_tmp13 = simd_and(r10000_10ffff_tmp1, r80_10ffff_tmp1);
            r10000_10ffff_tmp14 = simd_andc(tmp3, tmp7);
            byte_a3 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp14);
            carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(52), r10000_10ffff_tmp15));
            sequence_f0_91_a3 = simd_and(r10000_10ffff_tmp15, byte_a3);
            sequence_f0_91_adv = r10000_10ffff_tmp15;
            byte_range_80_9f = simd_andc(r10000_10ffff_tmp1, basis_bits.bit_2);
            carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(53), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_91_a3_adv, byte_range_80_9f);
            struct_cwu_Y.cc = simd_or(struct_cwu_Y.cc, r10000_10ffff_tmp16);
          }
          else {
            carryQ.CarryDequeueEnqueue(48, 6);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 54);
        }
        carryQ.CarryQ_Adjust(54);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<54, 0> carryQ;
  };

  struct Property_xids_Y {
  Property_xids_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_xids_Y & struct_xids_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9;
		BitBlock cc_range_41_61_1, byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, byte_c2, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13, r80_7ff_tmp14;
		BitBlock r80_7ff_tmp15, r80_7ff_tmp16, r80_7ff_tmp17, r80_7ff_tmp18;
		BitBlock cc_range_aa_ba_2, byte_c2_adv, r80_7ff_tmp19, r80_7ff_tmp20, byte_c3;
		BitBlock r80_7ff_tmp21, r80_7ff_tmp22, r80_7ff_tmp23, r80_7ff_tmp24;
		BitBlock r80_7ff_tmp25, r80_7ff_tmp26, r80_7ff_tmp27, r80_7ff_tmp28;
		BitBlock r80_7ff_tmp29, r80_7ff_tmp30, r80_7ff_tmp31, cc_range_c0_f8_2;
		BitBlock byte_c3_adv, r80_7ff_tmp32, byte_range_c4_cf, r100_3ff_tmp1;
		BitBlock byte_range_c4_cb, r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3;
		BitBlock byte_range_c4_c8, r100_2ff_tmp4, byte_c9, byte_range_80_8f;
		BitBlock r100_2ff_tmp5, r100_2ff_tmp6, r100_2ff_tmp7, r100_24f_tmp1;
		BitBlock byte_range_c4_c5, byte_range_80_bf, r100_17f_tmp1;
		BitBlock byte_range_c4_c5_sfx, r100_24f_tmp2, r100_24f_tmp3, byte_range_c6_c8;
		BitBlock r100_24f_tmp4, r180_24f_tmp1, byte_range_c6_c8_sfx;
		BitBlock byte_c9_byte_range_80_8f, byte_range_90_bf, r100_2ff_tmp8, byte_ca;
		BitBlock byte_range_80_af, r100_2ff_tmp9, r100_2ff_tmp10, r100_2ff_tmp11;
		BitBlock byte_c9_adv, r250_2af_tmp1, byte_ca_adv, r250_2af_tmp2;
		BitBlock byte_range_b0_bf, r100_2ff_tmp12, r100_2ff_tmp13, byte_cb;
		BitBlock r100_2ff_tmp14, r2b0_2ff_tmp1, r2b0_2ff_tmp2, r2b0_2ff_tmp3;
		BitBlock r2b0_2ff_tmp4, r2b0_2ff_tmp5, r2b0_2ff_tmp6, r2b0_2ff_tmp7;
		BitBlock r2b0_2ff_tmp8, r2b0_2ff_tmp9, r2b0_2ff_tmp10, r2b0_2ff_tmp11;
		BitBlock r2b0_2ff_tmp12, r2b0_2ff_tmp13, r2b0_2ff_tmp14, r2b0_2ff_tmp15;
		BitBlock r2b0_2ff_tmp16, r2b0_2ff_tmp17, r2b0_2ff_tmp18, r2b0_2ff_tmp19;
		BitBlock cc_range_2c0_2ee_2, byte_cb_adv, r2b0_2ff_tmp20, r100_3ff_tmp2;
		BitBlock r100_3ff_tmp3, byte_cd, r100_3ff_tmp4, r100_3ff_tmp5, r100_3ff_tmp6;
		BitBlock byte_range_ce_cf, r100_3ff_tmp7, r370_3ff_tmp1, r370_3ff_tmp2;
		BitBlock r370_3ff_tmp3, r370_3ff_tmp4, r370_3ff_tmp5, r370_3ff_tmp6;
		BitBlock r370_3ff_tmp7, r370_3ff_tmp8, r370_3ff_tmp9, r370_3ff_tmp10;
		BitBlock r370_3ff_tmp11, r370_3ff_tmp12, r370_3ff_tmp13, cc_range_370_37f_2;
		BitBlock byte_cd_adv, r370_3ff_tmp14, r370_3ff_tmp15, byte_ce, r370_3ff_tmp16;
		BitBlock r370_3ff_tmp17, r370_3ff_tmp18, r370_3ff_tmp19, r370_3ff_tmp20;
		BitBlock r370_3ff_tmp21, r370_3ff_tmp22, r370_3ff_tmp23, r370_3ff_tmp24;
		BitBlock r370_3ff_tmp25, r370_3ff_tmp26, r370_3ff_tmp27, r370_3ff_tmp28;
		BitBlock r370_3ff_tmp29, r370_3ff_tmp30, r370_3ff_tmp31, r370_3ff_tmp32;
		BitBlock r370_3ff_tmp33, r370_3ff_tmp34, r370_3ff_tmp35, cc_range_386_3a3_2;
		BitBlock byte_ce_adv, r370_3ff_tmp36, byte_cf, r370_3ff_tmp37, r370_3ff_tmp38;
		BitBlock r370_3ff_tmp39, r370_3ff_tmp40, r370_3ff_tmp41, r370_3ff_tmp42;
		BitBlock cc_range_3c0_3f7_2, byte_cf_adv, r370_3ff_tmp43, r80_7ff_tmp33;
		BitBlock r80_7ff_tmp34, byte_range_d0_d7, byte_range_d0_d3, r400_4ff_tmp1;
		BitBlock byte_range_d0_d1, r400_4ff_tmp2, byte_range_d0_d1_sfx, byte_d2;
		BitBlock r400_4ff_tmp3, byte_range_80_81, r400_4ff_tmp4;
		BitBlock byte_d2_byte_range_80_81, byte_d3, r400_4ff_tmp5;
		BitBlock byte_d3_byte_range_80_bf, r400_5ff_tmp1, byte_range_d4_d5;
		BitBlock r400_5ff_tmp2, byte_d6, r400_5ff_tmp3, r400_5ff_tmp4, r400_5ff_tmp5;
		BitBlock r500_58f_tmp1, byte_d4, r500_58f_tmp2, r500_58f_tmp3, byte_d4_adv;
		BitBlock r500_52f_tmp1, r500_58f_tmp4, byte_d5, r500_58f_tmp5, r500_58f_tmp6;
		BitBlock r530_58f_tmp1, r530_58f_tmp2, byte_range_b1_bf, r530_58f_tmp3;
		BitBlock r530_58f_tmp4, r530_58f_tmp5, r530_58f_tmp6, r530_58f_tmp7;
		BitBlock r530_58f_tmp8, r530_58f_tmp9, r530_58f_tmp10, cc_range_540_561_2;
		BitBlock byte_d5_adv, r530_58f_tmp11, byte_range_80_87, byte_d6_adv;
		BitBlock r530_58f_tmp12, r400_5ff_tmp6, r400_5ff_tmp7, byte_d7, r400_5ff_tmp8;
		BitBlock r590_5ff_tmp1, r590_5ff_tmp2, r590_5ff_tmp3, r590_5ff_tmp4;
		BitBlock r590_5ff_tmp5, r590_5ff_tmp6, cc_range_5d0_5f0_2, byte_d7_adv;
		BitBlock r590_5ff_tmp7, byte_range_d8_db, r600_6ff_tmp1, byte_d8;
		BitBlock byte_range_a0_bf, byte_d8_adv, r600_6ff_tmp2, r600_6ff_tmp3, byte_d9;
		BitBlock r600_6ff_tmp4, r600_6ff_tmp5, r600_6ff_tmp6, r600_6ff_tmp7;
		BitBlock r600_6ff_tmp8, r600_6ff_tmp9, r600_6ff_tmp10, r600_6ff_tmp11;
		BitBlock r600_6ff_tmp12, cc_range_640_671_2, byte_d9_adv, r600_6ff_tmp13;
		BitBlock byte_da, byte_da_adv, r600_6ff_tmp14, r600_6ff_tmp15, byte_db;
		BitBlock r600_6ff_tmp16, r600_6ff_tmp17, r600_6ff_tmp18, r600_6ff_tmp19;
		BitBlock r600_6ff_tmp20, r600_6ff_tmp21, r600_6ff_tmp22, r600_6ff_tmp23;
		BitBlock r600_6ff_tmp24, r600_6ff_tmp25, r600_6ff_tmp26, r600_6ff_tmp27;
		BitBlock r600_6ff_tmp28, r600_6ff_tmp29, r600_6ff_tmp30, r600_6ff_tmp31;
		BitBlock r600_6ff_tmp32, r600_6ff_tmp33, r600_6ff_tmp34, r600_6ff_tmp35;
		BitBlock r600_6ff_tmp36, cc_range_6c0_6ff_2, byte_db_adv, r600_6ff_tmp37;
		BitBlock r80_7ff_tmp35, r80_7ff_tmp36, byte_range_dc_dd, r700_77f_tmp1;
		BitBlock byte_dc, r700_77f_tmp2, byte_dd, r700_77f_tmp3, r700_77f_tmp4;
		BitBlock r700_77f_tmp5, r700_74f_tmp1, r700_74f_tmp2, r700_74f_tmp3;
		BitBlock r700_74f_tmp4, r700_74f_tmp5, r700_74f_tmp6, r700_74f_tmp7;
		BitBlock cc_range_710_712_2, byte_dc_adv, r700_74f_tmp8, r700_74f_tmp9;
		BitBlock byte_range_8d_8f, byte_dd_adv, r700_74f_tmp10, r700_77f_tmp6;
		BitBlock r750_77f_tmp1, r80_7ff_tmp37, byte_range_de_df, r780_7ff_tmp1;
		BitBlock byte_de, r780_7bf_tmp1, r780_7bf_tmp2, r780_7bf_tmp3, r780_7bf_tmp4;
		BitBlock r780_7bf_tmp5, r780_7bf_tmp6, r780_7bf_tmp7, cc_range_780_7b1_2;
		BitBlock byte_de_adv, r780_7bf_tmp8, r780_7ff_tmp2, byte_df, r7c0_7ff_tmp1;
		BitBlock r7c0_7ff_tmp2, r7c0_7ff_tmp3, r7c0_7ff_tmp4, r7c0_7ff_tmp5;
		BitBlock r7c0_7ff_tmp6, r7c0_7ff_tmp7, r7c0_7ff_tmp8, r7c0_7ff_tmp9;
		BitBlock r7c0_7ff_tmp10, cc_range_7ca_7fa_2, byte_df_adv, r7c0_7ff_tmp11;
		BitBlock r80_10ffff_tmp1, byte_range_e0_ef, byte_range_e0_e3, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_e4, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, byte_range_80_b7, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock r800_ffff_tmp8, r800_4dff_tmp1, byte_range_e0_e1, byte_e0;
		BitBlock r800_fff_tmp1, byte_a0, r800_fff_tmp2, sequence_e0_a0, byte_e0_adv;
		BitBlock r800_fff_tmp3, r800_fff_tmp4, r800_fff_tmp5, r800_fff_tmp6;
		BitBlock r800_fff_tmp7, r800_fff_tmp8, r800_fff_tmp9, r800_fff_tmp10;
		BitBlock r800_fff_tmp11, r800_fff_tmp12, r800_fff_tmp13, r800_fff_tmp14;
		BitBlock r800_fff_tmp15, r800_fff_tmp16, r800_fff_tmp17, r800_fff_tmp18;
		BitBlock cc_range_800_828_3, sequence_e0_a0_adv, r800_fff_tmp19;
		BitBlock r800_fff_tmp20, r800_fff_tmp21, byte_a1, sequence_e0_a1;
		BitBlock r800_fff_tmp22, r800_fff_tmp23, r800_fff_tmp24, byte_range_80_98;
		BitBlock sequence_e0_a1_adv, r800_fff_tmp25, r800_fff_tmp26, byte_a2;
		BitBlock sequence_e0_a2, r800_fff_tmp27, r800_fff_tmp28, r800_fff_tmp29;
		BitBlock byte_range_a0_b2, sequence_e0_a2_adv, r800_fff_tmp30, byte_a4;
		BitBlock sequence_e0_a4, r800_fff_tmp31, r800_fff_tmp32, r800_fff_tmp33;
		BitBlock r800_fff_tmp34, r800_fff_tmp35, r800_fff_tmp36, r800_fff_tmp37;
		BitBlock r800_fff_tmp38, r800_fff_tmp39, r800_fff_tmp40, r800_fff_tmp41;
		BitBlock r800_fff_tmp42, cc_range_904_93d_3, sequence_e0_a4_adv;
		BitBlock r800_fff_tmp43, r800_fff_tmp44, byte_a5, sequence_e0_a5;
		BitBlock r800_fff_tmp45, r800_fff_tmp46, r800_fff_tmp47, r800_fff_tmp48;
		BitBlock r800_fff_tmp49, r800_fff_tmp50, r800_fff_tmp51, r800_fff_tmp52;
		BitBlock cc_range_950_971_3, sequence_e0_a5_adv, r800_fff_tmp53;
		BitBlock r800_fff_tmp54, byte_a6, sequence_e0_a6, r800_fff_tmp55;
		BitBlock r800_fff_tmp56, r800_fff_tmp57, r800_fff_tmp58, r800_fff_tmp59;
		BitBlock r800_fff_tmp60, r800_fff_tmp61, r800_fff_tmp62, r800_fff_tmp63;
		BitBlock r800_fff_tmp64, r800_fff_tmp65, r800_fff_tmp66, r800_fff_tmp67;
		BitBlock r800_fff_tmp68, r800_fff_tmp69, r800_fff_tmp70, r800_fff_tmp71;
		BitBlock r800_fff_tmp72, r800_fff_tmp73, r800_fff_tmp74, r800_fff_tmp75;
		BitBlock r800_fff_tmp76, r800_fff_tmp77, r800_fff_tmp78, r800_fff_tmp79;
		BitBlock cc_range_980_9bd_3, sequence_e0_a6_adv, r800_fff_tmp80;
		BitBlock r800_fff_tmp81, byte_a7, sequence_e0_a7, r800_fff_tmp82;
		BitBlock r800_fff_tmp83, r800_fff_tmp84, r800_fff_tmp85, r800_fff_tmp86;
		BitBlock r800_fff_tmp87, r800_fff_tmp88, r800_fff_tmp89, r800_fff_tmp90;
		BitBlock r800_fff_tmp91, cc_range_9ce_9f0_3, sequence_e0_a7_adv;
		BitBlock r800_fff_tmp92, byte_a8, sequence_e0_a8, r800_fff_tmp93;
		BitBlock r800_fff_tmp94, r800_fff_tmp95, r800_fff_tmp96, r800_fff_tmp97;
		BitBlock r800_fff_tmp98, r800_fff_tmp99, r800_fff_tmp100, r800_fff_tmp101;
		BitBlock r800_fff_tmp102, r800_fff_tmp103, r800_fff_tmp104, r800_fff_tmp105;
		BitBlock r800_fff_tmp106, r800_fff_tmp107, cc_range_a05_a38_3;
		BitBlock sequence_e0_a8_adv, r800_fff_tmp108, r800_fff_tmp109, byte_a9;
		BitBlock sequence_e0_a9, r800_fff_tmp110, r800_fff_tmp111, r800_fff_tmp112;
		BitBlock r800_fff_tmp113, r800_fff_tmp114, r800_fff_tmp115, r800_fff_tmp116;
		BitBlock r800_fff_tmp117, r800_fff_tmp118, cc_range_a59_a72_3;
		BitBlock sequence_e0_a9_adv, r800_fff_tmp119, byte_aa, sequence_e0_aa;
		BitBlock r800_fff_tmp120, r800_fff_tmp121, r800_fff_tmp122, r800_fff_tmp123;
		BitBlock r800_fff_tmp124, r800_fff_tmp125, r800_fff_tmp126, r800_fff_tmp127;
		BitBlock r800_fff_tmp128, r800_fff_tmp129, r800_fff_tmp130, r800_fff_tmp131;
		BitBlock r800_fff_tmp132, cc_range_a85_abd_3, sequence_e0_aa_adv;
		BitBlock r800_fff_tmp133, r800_fff_tmp134, byte_ab, sequence_e0_ab;
		BitBlock r800_fff_tmp135, cc_range_ad0_ae0_3, sequence_e0_ab_adv;
		BitBlock r800_fff_tmp136, r800_fff_tmp137, byte_ac, sequence_e0_ac;
		BitBlock r800_fff_tmp138, r800_fff_tmp139, r800_fff_tmp140, r800_fff_tmp141;
		BitBlock r800_fff_tmp142, r800_fff_tmp143, cc_range_b05_b3d_3;
		BitBlock sequence_e0_ac_adv, r800_fff_tmp144, byte_ad, sequence_e0_ad;
		BitBlock r800_fff_tmp145, r800_fff_tmp146, cc_range_b5c_b71_3;
		BitBlock sequence_e0_ad_adv, r800_fff_tmp147, byte_ae, sequence_e0_ae;
		BitBlock r800_fff_tmp148, r800_fff_tmp149, r800_fff_tmp150, r800_fff_tmp151;
		BitBlock r800_fff_tmp152, r800_fff_tmp153, r800_fff_tmp154, r800_fff_tmp155;
		BitBlock r800_fff_tmp156, r800_fff_tmp157, r800_fff_tmp158, r800_fff_tmp159;
		BitBlock r800_fff_tmp160, r800_fff_tmp161, r800_fff_tmp162, r800_fff_tmp163;
		BitBlock r800_fff_tmp164, r800_fff_tmp165, r800_fff_tmp166, r800_fff_tmp167;
		BitBlock r800_fff_tmp168, r800_fff_tmp169, r800_fff_tmp170, r800_fff_tmp171;
		BitBlock r800_fff_tmp172, r800_fff_tmp173, r800_fff_tmp174, r800_fff_tmp175;
		BitBlock cc_range_b83_bae_3, sequence_e0_ae_adv, r800_fff_tmp176, byte_af;
		BitBlock sequence_e0_af, byte_90, sequence_e0_af_adv, r800_fff_tmp177, byte_b0;
		BitBlock sequence_e0_b0, r800_fff_tmp178, r800_fff_tmp179, r800_fff_tmp180;
		BitBlock r800_fff_tmp181, r800_fff_tmp182, r800_fff_tmp183, r800_fff_tmp184;
		BitBlock r800_fff_tmp185, cc_range_c05_c3d_3, sequence_e0_b0_adv;
		BitBlock r800_fff_tmp186, byte_b1, sequence_e0_b1, r800_fff_tmp187;
		BitBlock cc_range_c58_c60_3, sequence_e0_b1_adv, r800_fff_tmp188, byte_b2;
		BitBlock sequence_e0_b2, r800_fff_tmp189, r800_fff_tmp190, r800_fff_tmp191;
		BitBlock r800_fff_tmp192, r800_fff_tmp193, cc_range_c85_cbd_3;
		BitBlock sequence_e0_b2_adv, r800_fff_tmp194, byte_b3, sequence_e0_b3;
		BitBlock r800_fff_tmp195, r800_fff_tmp196, r800_fff_tmp197, cc_range_cde_cf1_3;
		BitBlock sequence_e0_b3_adv, r800_fff_tmp198, byte_b4, sequence_e0_b4;
		BitBlock r800_fff_tmp199, r800_fff_tmp200, r800_fff_tmp201, r800_fff_tmp202;
		BitBlock r800_fff_tmp203, cc_range_d05_d3d_3, sequence_e0_b4_adv;
		BitBlock r800_fff_tmp204, byte_b5, sequence_e0_b5, r800_fff_tmp205;
		BitBlock r800_fff_tmp206, r800_fff_tmp207, cc_range_d4e_d7a_3;
		BitBlock sequence_e0_b5_adv, r800_fff_tmp208, byte_b6, sequence_e0_b6;
		BitBlock r800_fff_tmp209, r800_fff_tmp210, r800_fff_tmp211, r800_fff_tmp212;
		BitBlock r800_fff_tmp213, r800_fff_tmp214, r800_fff_tmp215, r800_fff_tmp216;
		BitBlock r800_fff_tmp217, r800_fff_tmp218, r800_fff_tmp219, r800_fff_tmp220;
		BitBlock r800_fff_tmp221, r800_fff_tmp222, cc_range_d85_dbd_3;
		BitBlock sequence_e0_b6_adv, r800_fff_tmp223, byte_b7, sequence_e0_b7;
		BitBlock r800_fff_tmp224, byte_range_80_86, sequence_e0_b7_adv;
		BitBlock r800_fff_tmp225, byte_b8, sequence_e0_b8, r800_fff_tmp226;
		BitBlock r800_fff_tmp227, r800_fff_tmp228, r800_fff_tmp229, r800_fff_tmp230;
		BitBlock cc_range_e01_e32_3, sequence_e0_b8_adv, r800_fff_tmp231, byte_b9;
		BitBlock sequence_e0_b9, sequence_e0_b9_adv, r800_fff_tmp232, byte_ba;
		BitBlock sequence_e0_ba, r800_fff_tmp233, r800_fff_tmp234, r800_fff_tmp235;
		BitBlock r800_fff_tmp236, r800_fff_tmp237, r800_fff_tmp238, r800_fff_tmp239;
		BitBlock r800_fff_tmp240, r800_fff_tmp241, r800_fff_tmp242, r800_fff_tmp243;
		BitBlock r800_fff_tmp244, r800_fff_tmp245, r800_fff_tmp246, r800_fff_tmp247;
		BitBlock r800_fff_tmp248, r800_fff_tmp249, r800_fff_tmp250, r800_fff_tmp251;
		BitBlock r800_fff_tmp252, r800_fff_tmp253, r800_fff_tmp254, r800_fff_tmp255;
		BitBlock r800_fff_tmp256, r800_fff_tmp257, r800_fff_tmp258, r800_fff_tmp259;
		BitBlock r800_fff_tmp260, r800_fff_tmp261, cc_range_e81_ebd_3;
		BitBlock sequence_e0_ba_adv, r800_fff_tmp262, byte_bb, sequence_e0_bb;
		BitBlock r800_fff_tmp263, r800_fff_tmp264, r800_fff_tmp265, r800_fff_tmp266;
		BitBlock cc_range_ec0_edc_3, sequence_e0_bb_adv, r800_fff_tmp267, byte_bc;
		BitBlock sequence_e0_bc, byte_80, sequence_e0_bc_adv, r800_fff_tmp268, byte_bd;
		BitBlock sequence_e0_bd, r800_fff_tmp269, r800_fff_tmp270, r800_fff_tmp271;
		BitBlock r800_fff_tmp272, cc_range_f40_f49_3, sequence_e0_bd_adv;
		BitBlock r800_fff_tmp273, byte_be, sequence_e0_be, r800_fff_tmp274;
		BitBlock byte_range_88_8c, sequence_e0_be_adv, r800_fff_tmp275, r800_1fff_tmp1;
		BitBlock r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1, r1000_1fff_tmp2;
		BitBlock r1000_1fff_tmp3, sequence_e1_80, byte_e1_adv, r1000_1fff_tmp4;
		BitBlock r1000_1fff_tmp5, r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, r1000_1fff_tmp11;
		BitBlock cc_range_1000_103f_3, sequence_e1_80_adv, r1000_1fff_tmp12, byte_81;
		BitBlock sequence_e1_81, r1000_1fff_tmp13, r1000_1fff_tmp14, r1000_1fff_tmp15;
		BitBlock r1000_1fff_tmp16, r1000_1fff_tmp17, r1000_1fff_tmp18;
		BitBlock r1000_1fff_tmp19, r1000_1fff_tmp20, r1000_1fff_tmp21;
		BitBlock r1000_1fff_tmp22, r1000_1fff_tmp23, r1000_1fff_tmp24;
		BitBlock r1000_1fff_tmp25, r1000_1fff_tmp26, r1000_1fff_tmp27;
		BitBlock r1000_1fff_tmp28, r1000_1fff_tmp29, r1000_1fff_tmp30;
		BitBlock r1000_1fff_tmp31, r1000_1fff_tmp32, r1000_1fff_tmp33;
		BitBlock r1000_1fff_tmp34, r1000_1fff_tmp35, r1000_1fff_tmp36;
		BitBlock r1000_1fff_tmp37, cc_range_1050_1075_3, sequence_e1_81_adv;
		BitBlock r1000_1fff_tmp38, r1000_1fff_tmp39, r1000_1fff_tmp40, byte_82;
		BitBlock sequence_e1_82, r1000_1fff_tmp41, r1000_1fff_tmp42, r1000_1fff_tmp43;
		BitBlock cc_range_1080_10a0_3, sequence_e1_82_adv, r1000_1fff_tmp44;
		BitBlock r1000_1fff_tmp45, byte_83, sequence_e1_83, r1000_1fff_tmp46;
		BitBlock r1000_1fff_tmp47, r1000_1fff_tmp48, r1000_1fff_tmp49;
		BitBlock r1000_1fff_tmp50, r1000_1fff_tmp51, r1000_1fff_tmp52;
		BitBlock r1000_1fff_tmp53, r1000_1fff_tmp54, r1000_1fff_tmp55;
		BitBlock r1000_1fff_tmp56, r1000_1fff_tmp57, r1000_1fff_tmp58;
		BitBlock r1000_1fff_tmp59, cc_range_10c0_10fc_3, sequence_e1_83_adv;
		BitBlock r1000_1fff_tmp60, r1000_1fff_tmp61, r1000_1fff_tmp62;
		BitBlock r1000_1fff_tmp63, byte_range_84_88, byte_e1_byte_range_84_88;
		BitBlock r1000_1fff_tmp64, byte_e1_byte_range_84_88_sfx, r1000_1fff_tmp65;
		BitBlock r1000_1fff_tmp66, r1000_1fff_tmp67, byte_89, sequence_e1_89;
		BitBlock r1000_1fff_tmp68, byte_range_80_88, r1000_1fff_tmp69;
		BitBlock sequence_e1_89_byte_range_80_88, r1000_1fff_tmp70, byte_8a;
		BitBlock sequence_e1_8a, r1000_1fff_tmp71, sequence_e1_8a_byte_range_80_88;
		BitBlock r1000_1fff_tmp72, byte_8b, sequence_e1_8b, r1000_1fff_tmp73;
		BitBlock sequence_e1_8b_80, r1000_1fff_tmp74, byte_8c, sequence_e1_8c;
		BitBlock r1000_1fff_tmp75, r1000_1fff_tmp76, byte_range_80_90;
		BitBlock r1000_1fff_tmp77, sequence_e1_8c_byte_range_80_90, byte_8d;
		BitBlock sequence_e1_8d, byte_range_80_9a, r1000_1fff_tmp78;
		BitBlock sequence_e1_8d_byte_range_80_9a, byte_8e, sequence_e1_8e;
		BitBlock r1000_1fff_tmp79, sequence_e1_8e_byte_range_80_8f, byte_8f;
		BitBlock sequence_e1_8f, r1000_1fff_tmp80, r1000_1fff_tmp81, byte_range_80_b4;
		BitBlock r1000_1fff_tmp82, sequence_e1_8f_byte_range_80_b4, r1000_1fff_tmp83;
		BitBlock sequence_e1_90, r1000_1fff_tmp84, r1000_1fff_tmp85, byte_range_81_bf;
		BitBlock r1000_1fff_tmp86, sequence_e1_90_byte_range_81_bf, byte_91;
		BitBlock sequence_e1_91, r1000_1fff_tmp87, sequence_e1_91_byte_range_80_bf;
		BitBlock byte_99, sequence_e1_99, r1000_1fff_tmp88, r1000_1fff_tmp89;
		BitBlock r1000_1fff_tmp90, byte_range_80_ac, r1000_1fff_tmp91;
		BitBlock sequence_e1_99_byte_range_80_ac, byte_9a, sequence_e1_9a;
		BitBlock byte_range_81_9a, r1000_1fff_tmp92, sequence_e1_9a_byte_range_81_9a;
		BitBlock byte_9b, sequence_e1_9b, byte_range_80_aa, r1000_1fff_tmp93;
		BitBlock sequence_e1_9b_byte_range_80_aa, byte_9c, sequence_e1_9c;
		BitBlock r1000_1fff_tmp94, byte_range_80_8c, r1000_1fff_tmp95;
		BitBlock sequence_e1_9c_byte_range_80_8c, byte_9d, sequence_e1_9d;
		BitBlock r1000_1fff_tmp96, byte_range_80_91, r1000_1fff_tmp97;
		BitBlock sequence_e1_9d_byte_range_80_91, byte_9e, sequence_e1_9e;
		BitBlock r1000_1fff_tmp98, r1000_1fff_tmp99, byte_range_80_b3;
		BitBlock r1000_1fff_tmp100, sequence_e1_9e_byte_range_80_b3, byte_9f;
		BitBlock sequence_e1_9f, byte_97, r1000_1fff_tmp101, sequence_e1_9f_97;
		BitBlock r1000_1fff_tmp102, sequence_e1_a0, r1000_1fff_tmp103;
		BitBlock sequence_e1_a0_byte_range_a0_bf, sequence_e1_a1, r1000_1fff_tmp104;
		BitBlock sequence_e1_a1_byte_range_80_b7, sequence_e1_a2, r1000_1fff_tmp105;
		BitBlock r1000_1fff_tmp106, byte_range_80_a8, r1000_1fff_tmp107;
		BitBlock sequence_e1_a2_byte_range_80_a8, byte_a3, sequence_e1_a3;
		BitBlock r1000_1fff_tmp108, r1000_1fff_tmp109, r1000_1fff_tmp110;
		BitBlock byte_range_80_b5, r1000_1fff_tmp111, sequence_e1_a3_byte_range_80_b5;
		BitBlock sequence_e1_a4, r1000_1fff_tmp112, byte_range_80_9e;
		BitBlock r1000_1fff_tmp113, sequence_e1_a4_byte_range_80_9e, r1000_1fff_tmp114;
		BitBlock sequence_e1_a5, r1000_1fff_tmp115, r1000_1fff_tmp116;
		BitBlock r1000_1fff_tmp117, byte_range_90_ad, r1000_1fff_tmp118;
		BitBlock sequence_e1_a5_byte_range_90_ad, r1000_1fff_tmp119, sequence_e1_a6;
		BitBlock r1000_1fff_tmp120, r1000_1fff_tmp121, byte_range_80_ab;
		BitBlock r1000_1fff_tmp122, sequence_e1_a6_byte_range_80_ab, sequence_e1_a7;
		BitBlock r1000_1fff_tmp123, byte_range_81_87, r1000_1fff_tmp124;
		BitBlock sequence_e1_a7_byte_range_81_87, r1000_1fff_tmp125, sequence_e1_a8;
		BitBlock r1000_1fff_tmp126, r1000_1fff_tmp127, r1000_1fff_tmp128;
		BitBlock byte_range_80_96, r1000_1fff_tmp129, sequence_e1_a8_byte_range_80_96;
		BitBlock sequence_e1_a9, byte_range_80_94, r1000_1fff_tmp130;
		BitBlock sequence_e1_a9_byte_range_80_94, sequence_e1_aa, r1000_1fff_tmp131;
		BitBlock sequence_e1_aa_a7, sequence_e1_ac, r1000_1fff_tmp132;
		BitBlock r1000_1fff_tmp133, r1000_1fff_tmp134, byte_range_85_b3;
		BitBlock r1000_1fff_tmp135, sequence_e1_ac_byte_range_85_b3, sequence_e1_ad;
		BitBlock r1000_1fff_tmp136, r1000_1fff_tmp137, byte_range_85_8b;
		BitBlock r1000_1fff_tmp138, sequence_e1_ad_byte_range_85_8b, sequence_e1_ae;
		BitBlock r1000_1fff_tmp139, r1000_1fff_tmp140, r1000_1fff_tmp141;
		BitBlock r1000_1fff_tmp142, byte_range_83_a0, r1000_1fff_tmp143;
		BitBlock sequence_e1_ae_byte_range_83_a0, sequence_e1_af, r1000_1fff_tmp144;
		BitBlock r1000_1fff_tmp145, byte_range_80_a5, r1000_1fff_tmp146;
		BitBlock sequence_e1_af_byte_range_80_a5, r1000_1fff_tmp147, sequence_e1_b0;
		BitBlock r1000_1fff_tmp148, r1000_1fff_tmp149, byte_range_80_a3;
		BitBlock r1000_1fff_tmp150, sequence_e1_b0_byte_range_80_a3, sequence_e1_b1;
		BitBlock r1000_1fff_tmp151, r1000_1fff_tmp152, sequence_e1_b1_byte_range_8d_8f;
		BitBlock sequence_e1_b3, r1000_1fff_tmp153, r1000_1fff_tmp154;
		BitBlock byte_range_a9_ac, r1000_1fff_tmp155, sequence_e1_b3_byte_range_a9_ac;
		BitBlock sequence_e1_b4, r1000_1fff_tmp156, sequence_e1_b4_byte_range_80_bf;
		BitBlock sequence_e1_b8, r1000_1fff_tmp157, sequence_e1_b8_byte_range_80_bf;
		BitBlock sequence_e1_bc, byte_range_80_95, r1000_1fff_tmp158;
		BitBlock sequence_e1_bc_byte_range_80_95, sequence_e1_bd, byte_range_80_85;
		BitBlock r1000_1fff_tmp159, sequence_e1_bd_byte_range_80_85, sequence_e1_be;
		BitBlock r1000_1fff_tmp160, sequence_e1_be_byte_range_80_b4, byte_bf;
		BitBlock sequence_e1_bf, r1000_1fff_tmp161, r1000_1fff_tmp162;
		BitBlock byte_range_82_84, r1000_1fff_tmp163, sequence_e1_bf_byte_range_82_84;
		BitBlock r800_4dff_tmp2, byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1;
		BitBlock r2000_4dff_tmp2, byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2;
		BitBlock r2000_2fff_tmp3, r2000_2fff_tmp4, r2000_2fff_tmp5, sequence_e2_81;
		BitBlock byte_e2_adv, r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8;
		BitBlock r2000_2fff_tmp9, r2000_2fff_tmp10, cc_range_2071_207f_3;
		BitBlock sequence_e2_81_adv, r2000_2fff_tmp11, sequence_e2_82;
		BitBlock r2000_2fff_tmp12, r2000_2fff_tmp13, r2000_2fff_tmp14;
		BitBlock r2000_2fff_tmp15, byte_range_90_9c, sequence_e2_82_adv;
		BitBlock r2000_2fff_tmp16, byte_84, sequence_e2_84, r2000_2fff_tmp17;
		BitBlock r2000_2fff_tmp18, r2000_2fff_tmp19, r2000_2fff_tmp20;
		BitBlock r2000_2fff_tmp21, r2000_2fff_tmp22, r2000_2fff_tmp23;
		BitBlock r2000_2fff_tmp24, r2000_2fff_tmp25, r2000_2fff_tmp26;
		BitBlock r2000_2fff_tmp27, r2000_2fff_tmp28, r2000_2fff_tmp29;
		BitBlock r2000_2fff_tmp30, r2000_2fff_tmp31, r2000_2fff_tmp32;
		BitBlock r2000_2fff_tmp33, r2000_2fff_tmp34, r2000_2fff_tmp35;
		BitBlock r2000_2fff_tmp36, r2000_2fff_tmp37, r2000_2fff_tmp38;
		BitBlock r2000_2fff_tmp39, r2000_2fff_tmp40, r2000_2fff_tmp41;
		BitBlock r2000_2fff_tmp42, r2000_2fff_tmp43, r2000_2fff_tmp44;
		BitBlock r2000_2fff_tmp45, r2000_2fff_tmp46, r2000_2fff_tmp47;
		BitBlock r2000_2fff_tmp48, cc_range_2102_213c_3, sequence_e2_84_adv;
		BitBlock r2000_2fff_tmp49, byte_85, sequence_e2_85, r2000_2fff_tmp50;
		BitBlock r2000_2fff_tmp51, r2000_2fff_tmp52, r2000_2fff_tmp53;
		BitBlock r2000_2fff_tmp54, cc_range_2145_2160_3, sequence_e2_85_adv;
		BitBlock r2000_2fff_tmp55, byte_86, sequence_e2_86, r2000_2fff_tmp56;
		BitBlock r2000_2fff_tmp57, sequence_e2_86_adv, r2000_2fff_tmp58;
		BitBlock sequence_e2_b0, r2000_2fff_tmp59, r2000_2fff_tmp60, r2000_2fff_tmp61;
		BitBlock cc_range_2c00_2c30_3, sequence_e2_b0_adv, r2000_2fff_tmp62;
		BitBlock sequence_e2_b1, r2000_2fff_tmp63, r2000_2fff_tmp64;
		BitBlock cc_range_2c40_2c60_3, sequence_e2_b1_adv, r2000_2fff_tmp65;
		BitBlock sequence_e2_b2, sequence_e2_b2_adv, r2000_2fff_tmp66;
		BitBlock r2000_2fff_tmp67, r2000_2fff_tmp68, sequence_e2_b3, r2000_2fff_tmp69;
		BitBlock r2000_2fff_tmp70, r2000_2fff_tmp71, r2000_2fff_tmp72;
		BitBlock r2000_2fff_tmp73, r2000_2fff_tmp74, r2000_2fff_tmp75;
		BitBlock r2000_2fff_tmp76, r2000_2fff_tmp77, r2000_2fff_tmp78;
		BitBlock cc_range_2cc0_2cf2_3, sequence_e2_b3_adv, r2000_2fff_tmp79;
		BitBlock sequence_e2_b4, r2000_2fff_tmp80, r2000_2fff_tmp81, r2000_2fff_tmp82;
		BitBlock r2000_2fff_tmp83, r2000_2fff_tmp84, r2000_2fff_tmp85;
		BitBlock r2000_2fff_tmp86, r2000_2fff_tmp87, r2000_2fff_tmp88;
		BitBlock cc_range_2d00_2d30_3, sequence_e2_b4_adv, r2000_2fff_tmp89;
		BitBlock sequence_e2_b5, r2000_2fff_tmp90, r2000_2fff_tmp91, r2000_2fff_tmp92;
		BitBlock r2000_2fff_tmp93, cc_range_2d40_2d6f_3, sequence_e2_b5_adv;
		BitBlock r2000_2fff_tmp94, sequence_e2_b6, r2000_2fff_tmp95, r2000_2fff_tmp96;
		BitBlock r2000_2fff_tmp97, r2000_2fff_tmp98, r2000_2fff_tmp99;
		BitBlock r2000_2fff_tmp100, r2000_2fff_tmp101, r2000_2fff_tmp102;
		BitBlock r2000_2fff_tmp103, r2000_2fff_tmp104, r2000_2fff_tmp105;
		BitBlock r2000_2fff_tmp106, r2000_2fff_tmp107, r2000_2fff_tmp108;
		BitBlock r2000_2fff_tmp109, cc_range_2d80_2db8_3, sequence_e2_b6_adv;
		BitBlock r2000_2fff_tmp110, sequence_e2_b7, r2000_2fff_tmp111;
		BitBlock r2000_2fff_tmp112, r2000_2fff_tmp113, r2000_2fff_tmp114;
		BitBlock r2000_2fff_tmp115, r2000_2fff_tmp116, cc_range_2dc0_2dd8_3;
		BitBlock sequence_e2_b7_adv, r2000_2fff_tmp117, r2000_4dff_tmp3, byte_e3;
		BitBlock r2000_4dff_tmp4, r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3;
		BitBlock sequence_e3_80, byte_e3_adv, r3000_4dff_tmp4, r3000_4dff_tmp5;
		BitBlock r3000_4dff_tmp6, r3000_4dff_tmp7, r3000_4dff_tmp8, r3000_4dff_tmp9;
		BitBlock r3000_4dff_tmp10, r3000_4dff_tmp11, r3000_4dff_tmp12;
		BitBlock r3000_4dff_tmp13, r3000_4dff_tmp14, r3000_4dff_tmp15;
		BitBlock r3000_4dff_tmp16, r3000_4dff_tmp17, r3000_4dff_tmp18;
		BitBlock r3000_4dff_tmp19, r3000_4dff_tmp20, r3000_4dff_tmp21;
		BitBlock r3000_4dff_tmp22, cc_range_3005_3038_3, sequence_e3_80_adv;
		BitBlock r3000_4dff_tmp23, r3000_4dff_tmp24, r3000_4dff_tmp25, sequence_e3_81;
		BitBlock r3000_4dff_tmp26, r3000_4dff_tmp27, sequence_e3_81_adv;
		BitBlock r3000_4dff_tmp28, sequence_e3_82, r3000_4dff_tmp29, r3000_4dff_tmp30;
		BitBlock r3000_4dff_tmp31, r3000_4dff_tmp32, r3000_4dff_tmp33;
		BitBlock r3000_4dff_tmp34, r3000_4dff_tmp35, r3000_4dff_tmp36;
		BitBlock r3000_4dff_tmp37, r3000_4dff_tmp38, r3000_4dff_tmp39;
		BitBlock r3000_4dff_tmp40, r3000_4dff_tmp41, cc_range_3080_30a1_3;
		BitBlock sequence_e3_82_adv, r3000_4dff_tmp42, sequence_e3_83;
		BitBlock r3000_4dff_tmp43, r3000_4dff_tmp44, r3000_4dff_tmp45;
		BitBlock r3000_4dff_tmp46, cc_range_30c0_30fc_3, sequence_e3_83_adv;
		BitBlock r3000_4dff_tmp47, sequence_e3_84, r3000_4dff_tmp48, r3000_4dff_tmp49;
		BitBlock r3000_4dff_tmp50, r3000_4dff_tmp51, r3000_4dff_tmp52;
		BitBlock r3000_4dff_tmp53, r3000_4dff_tmp54, r3000_4dff_tmp55;
		BitBlock r3000_4dff_tmp56, cc_range_3105_3131_3, sequence_e3_84_adv;
		BitBlock r3000_4dff_tmp57, r3000_4dff_tmp58, sequence_e3_85;
		BitBlock sequence_e3_85_adv, r3000_4dff_tmp59, r3000_4dff_tmp60;
		BitBlock r3000_4dff_tmp61, sequence_e3_86, r3000_4dff_tmp62, r3000_4dff_tmp63;
		BitBlock r3000_4dff_tmp64, r3000_4dff_tmp65, cc_range_3180_31a0_3;
		BitBlock sequence_e3_86_adv, r3000_4dff_tmp66, r3000_4dff_tmp67, byte_87;
		BitBlock sequence_e3_87, sequence_e3_87_adv, r3000_4dff_tmp68;
		BitBlock byte_e3_byte_range_90_bf, r3000_4dff_tmp69;
		BitBlock byte_e3_byte_range_90_bf_sfx, r3000_4dff_tmp70, r3000_4dff_tmp71;
		BitBlock r3000_4dff_tmp72, r3000_4dff_tmp73, byte_e4_byte_range_80_b5;
		BitBlock r3000_4dff_tmp74, byte_e4_byte_range_80_b5_sfx, byte_e4_adv;
		BitBlock sequence_e4_b6, r3000_4dff_tmp75, sequence_e4_b6_byte_range_80_b5;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, byte_range_b8_bf, r800_ffff_tmp11;
		BitBlock r800_ffff_tmp12, r800_ffff_tmp13, r800_ffff_tmp14, r800_ffff_tmp15;
		BitBlock byte_range_e5_e9, r800_ffff_tmp16, byte_e4_byte_range_b8_bf;
		BitBlock r4e00_9fff_tmp1, byte_e4_byte_range_b8_bf_sfx, r4e00_9fff_tmp2;
		BitBlock r4e00_9fff_tmp3, r4e00_9fff_tmp4, byte_range_e5_e8, r4e00_9fff_tmp5;
		BitBlock byte_range_e5_e8_sfx, r4e00_9fff_tmp6, byte_range_e5_e8_sfx_sfx;
		BitBlock r4e00_9fff_tmp7, r4e00_9fff_tmp8, r4e00_9fff_tmp9, byte_e9;
		BitBlock r4e00_9fff_tmp10, r4e00_9fff_tmp11, byte_e9_adv, sequence_e9_80;
		BitBlock r4e00_9fff_tmp12, r4e00_9fff_tmp13, sequence_e9_80_byte_range_80_8c;
		BitBlock r800_ffff_tmp17, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, ra000_ffff_tmp7, byte_ea_byte_range_80_91;
		BitBlock ra000_ffff_tmp8, byte_ea_byte_range_80_91_sfx, ra000_ffff_tmp9;
		BitBlock ra000_ffff_tmp10, ra000_ffff_tmp11, byte_92, byte_ea_adv;
		BitBlock sequence_ea_92, ra000_ffff_tmp12, ra000_ffff_tmp13, ra000_ffff_tmp14;
		BitBlock ra000_ffff_tmp15, sequence_ea_92_byte_range_80_8c, ra000_ffff_tmp16;
		BitBlock byte_93, sequence_ea_93, ra000_ffff_tmp17, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, ra000_ffff_tmp20, ra000_ffff_tmp21;
		BitBlock byte_range_90_bd, ra000_ffff_tmp22, sequence_ea_93_byte_range_90_bd;
		BitBlock byte_94, sequence_ea_94, ra000_ffff_tmp23;
		BitBlock sequence_ea_94_byte_range_80_bf, ra000_ffff_tmp24, byte_98;
		BitBlock sequence_ea_98, ra000_ffff_tmp25, sequence_ea_98_byte_range_80_8c;
		BitBlock ra000_ffff_tmp26, ra000_ffff_tmp27, sequence_ea_99, ra000_ffff_tmp28;
		BitBlock ra000_ffff_tmp29, ra000_ffff_tmp30, byte_range_80_ae;
		BitBlock ra000_ffff_tmp31, sequence_ea_99_byte_range_80_ae, sequence_ea_9a;
		BitBlock ra000_ffff_tmp32, byte_range_80_9d, ra000_ffff_tmp33;
		BitBlock sequence_ea_9a_byte_range_80_9d, ra000_ffff_tmp34, sequence_ea_9b;
		BitBlock ra000_ffff_tmp35, sequence_ea_9b_byte_range_80_af, ra000_ffff_tmp36;
		BitBlock sequence_ea_9c, ra000_ffff_tmp37, ra000_ffff_tmp38, byte_range_97_9f;
		BitBlock ra000_ffff_tmp39, sequence_ea_9c_byte_range_97_9f, ra000_ffff_tmp40;
		BitBlock sequence_ea_9d, ra000_ffff_tmp41, sequence_ea_9d_byte_range_80_bf;
		BitBlock ra000_ffff_tmp42, sequence_ea_9e, ra000_ffff_tmp43, ra000_ffff_tmp44;
		BitBlock ra000_ffff_tmp45, sequence_ea_9e_byte_range_80_88, sequence_ea_9f;
		BitBlock ra000_ffff_tmp46, byte_range_b7_bf, ra000_ffff_tmp47;
		BitBlock sequence_ea_9f_byte_range_b7_bf, ra000_ffff_tmp48, sequence_ea_a0;
		BitBlock ra000_ffff_tmp49, sequence_ea_a0_byte_range_80_81, ra000_ffff_tmp50;
		BitBlock sequence_ea_a1, ra000_ffff_tmp51, ra000_ffff_tmp52, ra000_ffff_tmp53;
		BitBlock sequence_ea_a1_byte_range_80_b3, sequence_ea_a2, ra000_ffff_tmp54;
		BitBlock ra000_ffff_tmp55, ra000_ffff_tmp56, byte_range_82_b3;
		BitBlock ra000_ffff_tmp57, sequence_ea_a2_byte_range_82_b3, sequence_ea_a3;
		BitBlock ra000_ffff_tmp58, byte_range_b2_b7, ra000_ffff_tmp59;
		BitBlock sequence_ea_a3_byte_range_b2_b7, sequence_ea_a4, ra000_ffff_tmp60;
		BitBlock ra000_ffff_tmp61, ra000_ffff_tmp62, ra000_ffff_tmp63;
		BitBlock ra000_ffff_tmp64, ra000_ffff_tmp65, ra000_ffff_tmp66;
		BitBlock byte_range_8a_a5, ra000_ffff_tmp67, sequence_ea_a4_byte_range_8a_a5;
		BitBlock ra000_ffff_tmp68, sequence_ea_a5, ra000_ffff_tmp69, ra000_ffff_tmp70;
		BitBlock sequence_ea_a5_byte_range_80_86, ra000_ffff_tmp71, sequence_ea_a6;
		BitBlock ra000_ffff_tmp72, ra000_ffff_tmp73, ra000_ffff_tmp74;
		BitBlock ra000_ffff_tmp75, ra000_ffff_tmp76, byte_range_84_b2;
		BitBlock ra000_ffff_tmp77, sequence_ea_a6_byte_range_84_b2, ra000_ffff_tmp78;
		BitBlock sequence_ea_a7, ra000_ffff_tmp79, sequence_ea_a7_8f, sequence_ea_a8;
		BitBlock ra000_ffff_tmp80, ra000_ffff_tmp81, ra000_ffff_tmp82;
		BitBlock sequence_ea_a8_byte_range_80_a8, sequence_ea_a9, ra000_ffff_tmp83;
		BitBlock byte_range_80_82, ra000_ffff_tmp84, sequence_ea_a9_byte_range_80_82;
		BitBlock sequence_ea_aa, ra000_ffff_tmp85, sequence_ea_aa_byte_range_80_af;
		BitBlock sequence_ea_ab, ra000_ffff_tmp86, sequence_ea_ab_80, sequence_ea_ac;
		BitBlock ra000_ffff_tmp87, ra000_ffff_tmp88, byte_range_81_86;
		BitBlock ra000_ffff_tmp89, sequence_ea_ac_byte_range_81_86, sequence_ea_ad;
		BitBlock ra000_ffff_tmp90, ra000_ffff_tmp91, sequence_ea_ad_byte_range_80_9a;
		BitBlock sequence_ea_af, ra000_ffff_tmp92, ra000_ffff_tmp93, byte_range_80_a2;
		BitBlock ra000_ffff_tmp94, sequence_ea_af_byte_range_80_a2, sequence_ea_b0;
		BitBlock ra000_ffff_tmp95, sequence_ea_b0_byte_range_80_bf, ra000_ffff_tmp96;
		BitBlock ra000_ffff_tmp97, byte_range_eb_ec, ra000_ffff_tmp98;
		BitBlock byte_range_eb_ec_sfx, ra000_ffff_tmp99, byte_range_eb_ec_sfx_sfx;
		BitBlock byte_ed, byte_ed_adv, sequence_ed_80, ra000_ffff_tmp100;
		BitBlock ra000_ffff_tmp101, sequence_ed_80_byte_range_80_a3, byte_ef;
		BitBlock ra000_ffff_tmp102, ra000_ffff_tmp103, byte_range_a4_a8;
		BitBlock ra000_ffff_tmp104, byte_ef_byte_range_a4_a8, ra000_ffff_tmp105;
		BitBlock byte_ef_byte_range_a4_a8_sfx, byte_ef_adv, sequence_ef_a9;
		BitBlock ra000_ffff_tmp106, ra000_ffff_tmp107, byte_range_80_ad;
		BitBlock ra000_ffff_tmp108, sequence_ef_a9_byte_range_80_ad, sequence_ef_aa;
		BitBlock ra000_ffff_tmp109, sequence_ef_aa_byte_range_80_bf, sequence_ef_ab;
		BitBlock ra000_ffff_tmp110, byte_range_80_99, ra000_ffff_tmp111;
		BitBlock sequence_ef_ab_byte_range_80_99, sequence_ef_ac, ra000_ffff_tmp112;
		BitBlock sequence_ef_ac_byte_range_80_86, sequence_ef_ad, ra000_ffff_tmp113;
		BitBlock sequence_ef_ad_byte_range_80_81, sequence_ef_ae, ra000_ffff_tmp114;
		BitBlock byte_range_80_b1, ra000_ffff_tmp115, sequence_ef_ae_byte_range_80_b1;
		BitBlock sequence_ef_af, ra000_ffff_tmp116, byte_range_93_bf;
		BitBlock ra000_ffff_tmp117, sequence_ef_af_byte_range_93_bf, sequence_ef_b0;
		BitBlock ra000_ffff_tmp118, sequence_ef_b0_byte_range_80_bf, sequence_ef_b1;
		BitBlock ra000_ffff_tmp119, sequence_ef_b1_byte_range_80_9d, sequence_ef_b2;
		BitBlock ra000_ffff_tmp120, sequence_ef_b2_byte_range_80_bf, sequence_ef_b4;
		BitBlock ra000_ffff_tmp121, byte_range_80_bd, ra000_ffff_tmp122;
		BitBlock sequence_ef_b4_byte_range_80_bd, sequence_ef_b5, ra000_ffff_tmp123;
		BitBlock sequence_ef_b5_byte_range_90_bf, sequence_ef_b6, ra000_ffff_tmp124;
		BitBlock sequence_ef_b6_byte_range_80_8f, sequence_ef_b7, ra000_ffff_tmp125;
		BitBlock sequence_ef_b7_byte_range_80_87, sequence_ef_b9, ra000_ffff_tmp126;
		BitBlock sequence_ef_b9_b1, sequence_ef_ba, ra000_ffff_tmp127;
		BitBlock sequence_ef_ba_byte_range_80_bf, sequence_ef_bb, ra000_ffff_tmp128;
		BitBlock ra000_ffff_tmp129, ra000_ffff_tmp130, byte_range_80_bc;
		BitBlock ra000_ffff_tmp131, sequence_ef_bb_byte_range_80_bc, sequence_ef_bc;
		BitBlock ra000_ffff_tmp132, byte_range_a1_ba, ra000_ffff_tmp133;
		BitBlock sequence_ef_bc_byte_range_a1_ba, sequence_ef_bd, ra000_ffff_tmp134;
		BitBlock sequence_ef_bd_byte_range_81_9a, sequence_ef_be, ra000_ffff_tmp135;
		BitBlock sequence_ef_be_byte_range_80_9d, sequence_ef_bf, byte_range_82_87;
		BitBlock ra000_ffff_tmp136, sequence_ef_bf_byte_range_82_87, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, byte_f0, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, r10000_10ffff_tmp4, sequence_f0_90, byte_f0_adv;
		BitBlock r10000_10ffff_tmp5, r10000_10ffff_tmp6, r10000_10ffff_tmp7;
		BitBlock sequence_f0_90_80, sequence_f0_90_adv, r10000_10ffff_tmp8;
		BitBlock r10000_10ffff_tmp9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock r10000_10ffff_tmp12, r10000_10ffff_tmp13, r10000_10ffff_tmp14;
		BitBlock r10000_10ffff_tmp15, r10000_10ffff_tmp16, r10000_10ffff_tmp17;
		BitBlock r10000_10ffff_tmp18, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock r10000_10ffff_tmp21, r10000_10ffff_tmp22, r10000_10ffff_tmp23;
		BitBlock r10000_10ffff_tmp24, r10000_10ffff_tmp25, r10000_10ffff_tmp26;
		BitBlock r10000_10ffff_tmp27, r10000_10ffff_tmp28, cc_range_10000_1003f_4;
		BitBlock sequence_f0_90_80_adv, r10000_10ffff_tmp29, r10000_10ffff_tmp30;
		BitBlock r10000_10ffff_tmp31, sequence_f0_90_81, r10000_10ffff_tmp32;
		BitBlock r10000_10ffff_tmp33, r10000_10ffff_tmp34, r10000_10ffff_tmp35;
		BitBlock cc_range_10040_10050_4, sequence_f0_90_81_adv, r10000_10ffff_tmp36;
		BitBlock r10000_10ffff_tmp37, r10000_10ffff_tmp38, sequence_f0_90_82;
		BitBlock sequence_f0_90_82_adv, r10000_10ffff_tmp39, r10000_10ffff_tmp40;
		BitBlock r10000_10ffff_tmp41, r10000_10ffff_tmp42, sequence_f0_90_83;
		BitBlock r10000_10ffff_tmp43, r10000_10ffff_tmp44, byte_range_80_ba;
		BitBlock sequence_f0_90_83_adv, r10000_10ffff_tmp45, r10000_10ffff_tmp46;
		BitBlock r10000_10ffff_tmp47, sequence_f0_90_85, r10000_10ffff_tmp48;
		BitBlock r10000_10ffff_tmp49, r10000_10ffff_tmp50, r10000_10ffff_tmp51;
		BitBlock sequence_f0_90_85_adv, r10000_10ffff_tmp52, r10000_10ffff_tmp53;
		BitBlock r10000_10ffff_tmp54, sequence_f0_90_8a, r10000_10ffff_tmp55;
		BitBlock r10000_10ffff_tmp56, r10000_10ffff_tmp57, r10000_10ffff_tmp58;
		BitBlock cc_range_10280_102a0_4, sequence_f0_90_8a_adv, r10000_10ffff_tmp59;
		BitBlock r10000_10ffff_tmp60, sequence_f0_90_8b, r10000_10ffff_tmp61;
		BitBlock sequence_f0_90_8b_adv, r10000_10ffff_tmp62, r10000_10ffff_tmp63;
		BitBlock sequence_f0_90_8c, r10000_10ffff_tmp64, cc_range_10300_10330_4;
		BitBlock sequence_f0_90_8c_adv, r10000_10ffff_tmp65, r10000_10ffff_tmp66;
		BitBlock sequence_f0_90_8d, r10000_10ffff_tmp67, r10000_10ffff_tmp68;
		BitBlock r10000_10ffff_tmp69, r10000_10ffff_tmp70, r10000_10ffff_tmp71;
		BitBlock r10000_10ffff_tmp72, cc_range_10340_10350_4, sequence_f0_90_8d_adv;
		BitBlock r10000_10ffff_tmp73, r10000_10ffff_tmp74, sequence_f0_90_8e;
		BitBlock r10000_10ffff_tmp75, r10000_10ffff_tmp76, r10000_10ffff_tmp77;
		BitBlock cc_range_10380_103a0_4, sequence_f0_90_8e_adv, r10000_10ffff_tmp78;
		BitBlock sequence_f0_90_8f, r10000_10ffff_tmp79, r10000_10ffff_tmp80;
		BitBlock r10000_10ffff_tmp81, r10000_10ffff_tmp82, r10000_10ffff_tmp83;
		BitBlock r10000_10ffff_tmp84, cc_range_103c0_103d1_4, sequence_f0_90_8f_adv;
		BitBlock r10000_10ffff_tmp85, r10000_10ffff_tmp86, byte_range_90_91;
		BitBlock sequence_f0_90_byte_range_90_91, r10000_10ffff_tmp87;
		BitBlock sequence_f0_90_byte_range_90_91_sfx, sequence_f0_90_92;
		BitBlock r10000_10ffff_tmp88, sequence_f0_90_92_byte_range_80_9d;
		BitBlock r10000_10ffff_tmp89, sequence_f0_90_94, r10000_10ffff_tmp90;
		BitBlock r10000_10ffff_tmp91, byte_range_80_a7, r10000_10ffff_tmp92;
		BitBlock sequence_f0_90_94_byte_range_80_a7, byte_95, sequence_f0_90_95;
		BitBlock r10000_10ffff_tmp93, r10000_10ffff_tmp94, r10000_10ffff_tmp95;
		BitBlock sequence_f0_90_95_byte_range_80_a3, r10000_10ffff_tmp96;
		BitBlock sequence_f0_90_98, r10000_10ffff_tmp97;
		BitBlock sequence_f0_90_98_byte_range_80_bf, sequence_f0_90_9c;
		BitBlock r10000_10ffff_tmp98, r10000_10ffff_tmp99, byte_range_80_b6;
		BitBlock r10000_10ffff_tmp100, sequence_f0_90_9c_byte_range_80_b6;
		BitBlock sequence_f0_90_9d, r10000_10ffff_tmp101;
		BitBlock sequence_f0_90_9d_byte_range_80_95, r10000_10ffff_tmp102;
		BitBlock sequence_f0_90_a0, r10000_10ffff_tmp103, r10000_10ffff_tmp104;
		BitBlock sequence_f0_90_a0_byte_range_80_85, sequence_f0_90_a1;
		BitBlock r10000_10ffff_tmp105, sequence_f0_90_a1_byte_range_80_95;
		BitBlock sequence_f0_90_a2, r10000_10ffff_tmp106, r10000_10ffff_tmp107;
		BitBlock sequence_f0_90_a2_byte_range_80_9e, sequence_f0_90_a4;
		BitBlock r10000_10ffff_tmp108, sequence_f0_90_a4_byte_range_80_95;
		BitBlock r10000_10ffff_tmp109, sequence_f0_90_a6, r10000_10ffff_tmp110;
		BitBlock r10000_10ffff_tmp111, r10000_10ffff_tmp112;
		BitBlock sequence_f0_90_a6_byte_range_80_b7, sequence_f0_90_a8;
		BitBlock r10000_10ffff_tmp113, sequence_f0_90_a8_80, r10000_10ffff_tmp114;
		BitBlock sequence_f0_90_a9, byte_range_a0_bc, r10000_10ffff_tmp115;
		BitBlock sequence_f0_90_a9_byte_range_a0_bc, sequence_f0_90_aa;
		BitBlock byte_range_80_9c, r10000_10ffff_tmp116;
		BitBlock sequence_f0_90_aa_byte_range_80_9c, sequence_f0_90_ab;
		BitBlock r10000_10ffff_tmp117, sequence_f0_90_ab_byte_range_80_87;
		BitBlock sequence_f0_90_ac, r10000_10ffff_tmp118, r10000_10ffff_tmp119;
		BitBlock sequence_f0_90_ac_byte_range_80_b5, sequence_f0_90_ad;
		BitBlock r10000_10ffff_tmp120, sequence_f0_90_ad_byte_range_80_95;
		BitBlock sequence_f0_90_ae, r10000_10ffff_tmp121, r10000_10ffff_tmp122;
		BitBlock sequence_f0_90_ae_byte_range_80_91, r10000_10ffff_tmp123;
		BitBlock sequence_f0_90_b0, r10000_10ffff_tmp124;
		BitBlock sequence_f0_90_b0_byte_range_80_bf, sequence_f0_90_b1;
		BitBlock r10000_10ffff_tmp125, r10000_10ffff_tmp126, r10000_10ffff_tmp127;
		BitBlock sequence_f0_90_b1_byte_range_80_88, sequence_f0_91;
		BitBlock r10000_10ffff_tmp128, sequence_f0_91_80, sequence_f0_91_adv;
		BitBlock r10000_10ffff_tmp129, r10000_10ffff_tmp130, r10000_10ffff_tmp131;
		BitBlock r10000_10ffff_tmp132, byte_range_83_b7, sequence_f0_91_80_adv;
		BitBlock r10000_10ffff_tmp133, sequence_f0_91_82, r10000_10ffff_tmp134;
		BitBlock r10000_10ffff_tmp135, byte_range_83_af, sequence_f0_91_82_adv;
		BitBlock r10000_10ffff_tmp136, sequence_f0_91_83, r10000_10ffff_tmp137;
		BitBlock r10000_10ffff_tmp138, r10000_10ffff_tmp139, byte_range_90_a8;
		BitBlock sequence_f0_91_83_adv, r10000_10ffff_tmp140, sequence_f0_91_84;
		BitBlock r10000_10ffff_tmp141, byte_range_83_a6, sequence_f0_91_84_adv;
		BitBlock r10000_10ffff_tmp142, sequence_f0_91_85, r10000_10ffff_tmp143;
		BitBlock r10000_10ffff_tmp144, r10000_10ffff_tmp145, r10000_10ffff_tmp146;
		BitBlock r10000_10ffff_tmp147, cc_range_11150_11176_4, sequence_f0_91_85_adv;
		BitBlock r10000_10ffff_tmp148, sequence_f0_91_86, r10000_10ffff_tmp149;
		BitBlock byte_range_83_b2, sequence_f0_91_86_adv, r10000_10ffff_tmp150;
		BitBlock r10000_10ffff_tmp151, sequence_f0_91_87, r10000_10ffff_tmp152;
		BitBlock r10000_10ffff_tmp153, r10000_10ffff_tmp154, cc_range_111c1_111da_4;
		BitBlock sequence_f0_91_87_adv, r10000_10ffff_tmp155, byte_88;
		BitBlock sequence_f0_91_88, r10000_10ffff_tmp156, r10000_10ffff_tmp157;
		BitBlock r10000_10ffff_tmp158, r10000_10ffff_tmp159, cc_range_11200_11213_4;
		BitBlock sequence_f0_91_88_adv, r10000_10ffff_tmp160, sequence_f0_91_8a;
		BitBlock sequence_f0_91_8a_adv, r10000_10ffff_tmp161, sequence_f0_91_8b;
		BitBlock sequence_f0_91_8b_adv, r10000_10ffff_tmp162, sequence_f0_91_8c;
		BitBlock r10000_10ffff_tmp163, r10000_10ffff_tmp164, r10000_10ffff_tmp165;
		BitBlock r10000_10ffff_tmp166, r10000_10ffff_tmp167, r10000_10ffff_tmp168;
		BitBlock r10000_10ffff_tmp169, r10000_10ffff_tmp170, r10000_10ffff_tmp171;
		BitBlock r10000_10ffff_tmp172, r10000_10ffff_tmp173, r10000_10ffff_tmp174;
		BitBlock r10000_10ffff_tmp175, r10000_10ffff_tmp176, r10000_10ffff_tmp177;
		BitBlock r10000_10ffff_tmp178, r10000_10ffff_tmp179, r10000_10ffff_tmp180;
		BitBlock r10000_10ffff_tmp181, r10000_10ffff_tmp182, r10000_10ffff_tmp183;
		BitBlock r10000_10ffff_tmp184, cc_range_11305_1133d_4, sequence_f0_91_8c_adv;
		BitBlock r10000_10ffff_tmp185, sequence_f0_91_8d, r10000_10ffff_tmp186;
		BitBlock r10000_10ffff_tmp187, r10000_10ffff_tmp188, byte_range_9d_a1;
		BitBlock sequence_f0_91_8d_adv, r10000_10ffff_tmp189, sequence_f0_91_92;
		BitBlock sequence_f0_91_92_adv, r10000_10ffff_tmp190, sequence_f0_91_93;
		BitBlock r10000_10ffff_tmp191, r10000_10ffff_tmp192, cc_range_114c4_114c7_4;
		BitBlock sequence_f0_91_93_adv, r10000_10ffff_tmp193, byte_96;
		BitBlock sequence_f0_91_96, r10000_10ffff_tmp194, r10000_10ffff_tmp195;
		BitBlock sequence_f0_91_96_adv, r10000_10ffff_tmp196, sequence_f0_91_98;
		BitBlock sequence_f0_91_98_adv, r10000_10ffff_tmp197, sequence_f0_91_99;
		BitBlock sequence_f0_91_99_adv, r10000_10ffff_tmp198, sequence_f0_91_9a;
		BitBlock r10000_10ffff_tmp199, r10000_10ffff_tmp200, sequence_f0_91_9a_adv;
		BitBlock r10000_10ffff_tmp201, sequence_f0_91_a2, sequence_f0_91_a2_adv;
		BitBlock r10000_10ffff_tmp202, sequence_f0_91_a3, r10000_10ffff_tmp203;
		BitBlock cc_range_118c0_118ff_4, sequence_f0_91_a3_adv, r10000_10ffff_tmp204;
		BitBlock sequence_f0_91_ab, r10000_10ffff_tmp205, r10000_10ffff_tmp206;
		BitBlock byte_range_80_b8, sequence_f0_91_ab_adv, r10000_10ffff_tmp207;
		BitBlock sequence_f0_92, byte_range_80_8d, r10000_10ffff_tmp208;
		BitBlock sequence_f0_92_byte_range_80_8d, r10000_10ffff_tmp209;
		BitBlock sequence_f0_92_byte_range_80_8d_sfx, sequence_f0_92_adv;
		BitBlock sequence_f0_92_8e, r10000_10ffff_tmp210;
		BitBlock sequence_f0_92_8e_byte_range_80_98, sequence_f0_92_90;
		BitBlock r10000_10ffff_tmp211, sequence_f0_92_90_byte_range_80_bf;
		BitBlock sequence_f0_92_91, r10000_10ffff_tmp212;
		BitBlock sequence_f0_92_91_byte_range_80_ae, sequence_f0_93;
		BitBlock r10000_10ffff_tmp213, sequence_f0_93_byte_range_80_8f;
		BitBlock r10000_10ffff_tmp214, sequence_f0_93_byte_range_80_8f_sfx;
		BitBlock sequence_f0_93_adv, sequence_f0_93_90, r10000_10ffff_tmp215;
		BitBlock sequence_f0_93_90_byte_range_80_ae, sequence_f0_96, byte_range_a0_a7;
		BitBlock r10000_10ffff_tmp216, sequence_f0_96_byte_range_a0_a7;
		BitBlock r10000_10ffff_tmp217, sequence_f0_96_byte_range_a0_a7_sfx;
		BitBlock sequence_f0_96_adv, sequence_f0_96_a8, r10000_10ffff_tmp218;
		BitBlock sequence_f0_96_a8_byte_range_80_b8, sequence_f0_96_a9;
		BitBlock r10000_10ffff_tmp219, sequence_f0_96_a9_byte_range_80_9e;
		BitBlock sequence_f0_96_ab, r10000_10ffff_tmp220, r10000_10ffff_tmp221;
		BitBlock r10000_10ffff_tmp222, r10000_10ffff_tmp223;
		BitBlock sequence_f0_96_ab_byte_range_90_ad, sequence_f0_96_ac;
		BitBlock r10000_10ffff_tmp224, sequence_f0_96_ac_byte_range_80_af;
		BitBlock sequence_f0_96_ad, byte_range_80_83, r10000_10ffff_tmp225;
		BitBlock sequence_f0_96_ad_byte_range_80_83, sequence_f0_96_ae;
		BitBlock r10000_10ffff_tmp226, sequence_f0_96_ae_byte_range_80_8f;
		BitBlock sequence_f0_96_bc, r10000_10ffff_tmp227;
		BitBlock sequence_f0_96_bc_byte_range_80_bf, sequence_f0_96_bd;
		BitBlock r10000_10ffff_tmp228, byte_range_80_84, r10000_10ffff_tmp229;
		BitBlock sequence_f0_96_bd_byte_range_80_84, sequence_f0_96_be;
		BitBlock r10000_10ffff_tmp230, byte_range_93_9f, r10000_10ffff_tmp231;
		BitBlock sequence_f0_96_be_byte_range_93_9f, sequence_f0_9b;
		BitBlock r10000_10ffff_tmp232, sequence_f0_9b_80, sequence_f0_9b_adv;
		BitBlock sequence_f0_9b_80_adv, r10000_10ffff_tmp233, sequence_f0_9b_b0;
		BitBlock sequence_f0_9b_b0_adv, r10000_10ffff_tmp234, sequence_f0_9b_b1;
		BitBlock r10000_10ffff_tmp235, r10000_10ffff_tmp236, cc_range_1bc40_1bc70_4;
		BitBlock sequence_f0_9b_b1_adv, r10000_10ffff_tmp237, sequence_f0_9b_b2;
		BitBlock r10000_10ffff_tmp238, r10000_10ffff_tmp239, cc_range_1bc80_1bc90_4;
		BitBlock sequence_f0_9b_b2_adv, r10000_10ffff_tmp240, sequence_f0_9d;
		BitBlock r10000_10ffff_tmp241, sequence_f0_9d_90, sequence_f0_9d_adv;
		BitBlock sequence_f0_9d_90_adv, r10000_10ffff_tmp242, sequence_f0_9d_91;
		BitBlock r10000_10ffff_tmp243, r10000_10ffff_tmp244, r10000_10ffff_tmp245;
		BitBlock cc_range_1d440_1d456_4, sequence_f0_9d_91_adv, r10000_10ffff_tmp246;
		BitBlock sequence_f0_9d_92, r10000_10ffff_tmp247, r10000_10ffff_tmp248;
		BitBlock r10000_10ffff_tmp249, r10000_10ffff_tmp250, r10000_10ffff_tmp251;
		BitBlock r10000_10ffff_tmp252, r10000_10ffff_tmp253, r10000_10ffff_tmp254;
		BitBlock r10000_10ffff_tmp255, r10000_10ffff_tmp256, r10000_10ffff_tmp257;
		BitBlock r10000_10ffff_tmp258, r10000_10ffff_tmp259, r10000_10ffff_tmp260;
		BitBlock r10000_10ffff_tmp261, r10000_10ffff_tmp262, r10000_10ffff_tmp263;
		BitBlock r10000_10ffff_tmp264, cc_range_1d480_1d4bd_4, sequence_f0_9d_92_adv;
		BitBlock r10000_10ffff_tmp265, sequence_f0_9d_93, r10000_10ffff_tmp266;
		BitBlock r10000_10ffff_tmp267, r10000_10ffff_tmp268, cc_range_1d4c0_1d4c5_4;
		BitBlock sequence_f0_9d_93_adv, r10000_10ffff_tmp269, sequence_f0_9d_94;
		BitBlock r10000_10ffff_tmp270, r10000_10ffff_tmp271, r10000_10ffff_tmp272;
		BitBlock r10000_10ffff_tmp273, r10000_10ffff_tmp274, r10000_10ffff_tmp275;
		BitBlock r10000_10ffff_tmp276, r10000_10ffff_tmp277, r10000_10ffff_tmp278;
		BitBlock r10000_10ffff_tmp279, r10000_10ffff_tmp280, r10000_10ffff_tmp281;
		BitBlock r10000_10ffff_tmp282, r10000_10ffff_tmp283, r10000_10ffff_tmp284;
		BitBlock r10000_10ffff_tmp285, r10000_10ffff_tmp286, r10000_10ffff_tmp287;
		BitBlock r10000_10ffff_tmp288, r10000_10ffff_tmp289, r10000_10ffff_tmp290;
		BitBlock cc_range_1d500_1d53b_4, sequence_f0_9d_94_adv, r10000_10ffff_tmp291;
		BitBlock sequence_f0_9d_95, r10000_10ffff_tmp292, r10000_10ffff_tmp293;
		BitBlock r10000_10ffff_tmp294, r10000_10ffff_tmp295, r10000_10ffff_tmp296;
		BitBlock r10000_10ffff_tmp297, cc_range_1d540_1d552_4, sequence_f0_9d_95_adv;
		BitBlock r10000_10ffff_tmp298, r10000_10ffff_tmp299, byte_range_96_99;
		BitBlock sequence_f0_9d_byte_range_96_99, r10000_10ffff_tmp300;
		BitBlock sequence_f0_9d_byte_range_96_99_sfx, sequence_f0_9d_9a;
		BitBlock r10000_10ffff_tmp301, r10000_10ffff_tmp302, r10000_10ffff_tmp303;
		BitBlock sequence_f0_9d_9a_byte_range_80_a5, sequence_f0_9d_9b;
		BitBlock r10000_10ffff_tmp304, sequence_f0_9d_9b_80, sequence_f0_9d_9c;
		BitBlock r10000_10ffff_tmp305, sequence_f0_9d_9c_byte_range_80_94;
		BitBlock sequence_f0_9d_9d, r10000_10ffff_tmp306, byte_range_80_8e;
		BitBlock r10000_10ffff_tmp307, sequence_f0_9d_9d_byte_range_80_8e;
		BitBlock sequence_f0_9d_9e, r10000_10ffff_tmp308;
		BitBlock sequence_f0_9d_9e_byte_range_80_88, sequence_f0_9d_9f;
		BitBlock r10000_10ffff_tmp309, sequence_f0_9d_9f_byte_range_80_82;
		BitBlock sequence_f0_9e, r10000_10ffff_tmp310, byte_range_a0_a2;
		BitBlock r10000_10ffff_tmp311, sequence_f0_9e_byte_range_a0_a2;
		BitBlock r10000_10ffff_tmp312, sequence_f0_9e_byte_range_a0_a2_sfx;
		BitBlock sequence_f0_9e_adv, sequence_f0_9e_a3, r10000_10ffff_tmp313;
		BitBlock sequence_f0_9e_a3_byte_range_80_84, sequence_f0_9e_b8;
		BitBlock r10000_10ffff_tmp314, sequence_f0_9e_b8_byte_range_80_83;
		BitBlock sequence_f0_9e_b9, r10000_10ffff_tmp315, sequence_f0_9e_b9_82;
		BitBlock sequence_f0_9e_ba, byte_range_80_89, r10000_10ffff_tmp316;
		BitBlock sequence_f0_9e_ba_byte_range_80_89, byte_range_a0_a9;
		BitBlock byte_f0_byte_range_a0_a9, r10000_10ffff_tmp317;
		BitBlock byte_f0_byte_range_a0_a9_sfx, r10000_10ffff_tmp318;
		BitBlock byte_f0_byte_range_a0_a9_sfx_sfx, sequence_f0_aa, sequence_f0_aa_adv;
		BitBlock sequence_f0_aa_80, r10000_10ffff_tmp319;
		BitBlock sequence_f0_aa_80_byte_range_80_96, sequence_f0_ab;
		BitBlock sequence_f0_ab_adv, sequence_f0_ab_80, r10000_10ffff_tmp320;
		BitBlock sequence_f0_ab_80_byte_range_80_b4, sequence_f0_af;
		BitBlock sequence_f0_af_adv, sequence_f0_af_a0, r10000_10ffff_tmp321;
		BitBlock sequence_f0_af_a0_byte_range_80_9d;




        struct_xids_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp2 = simd_or(basis_bits.bit_5, tmp1);
        tmp3 = simd_and(basis_bits.bit_4, tmp2);
        tmp4 = simd_not(tmp3);
        tmp5 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp7 = simd_or(tmp5, tmp6);
        tmp8 = simd_or(simd_and(basis_bits.bit_3, tmp4), simd_andc(tmp7, basis_bits.bit_3));
        tmp9 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        cc_range_41_61_1 = simd_and(tmp8, tmp9);
        struct_xids_Y.cc = simd_or(struct_xids_Y.cc, cc_range_41_61_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 298))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 25))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, tmp5);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp9 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
            r80_7ff_tmp10 = simd_and(r80_7ff_tmp7, r80_7ff_tmp9);
            r80_7ff_tmp11 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp12 = simd_and(r80_7ff_tmp5, r80_7ff_tmp11);
            r80_7ff_tmp13 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp15 = simd_and(r80_7ff_tmp13, r80_7ff_tmp14);
            r80_7ff_tmp16 = simd_and(r80_7ff_tmp12, r80_7ff_tmp15);
            r80_7ff_tmp17 = simd_or(r80_7ff_tmp10, r80_7ff_tmp16);
            r80_7ff_tmp18 = simd_and(r80_7ff_tmp12, r80_7ff_tmp9);
            cc_range_aa_ba_2 = simd_or(r80_7ff_tmp17, r80_7ff_tmp18);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp19 = simd_and(byte_c2_adv, cc_range_aa_ba_2);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r80_7ff_tmp19);
            r80_7ff_tmp20 = simd_andc(tmp1, tmp5);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp20);
            r80_7ff_tmp21 = simd_andc(r80_7ff_tmp5, basis_bits.bit_2);
            r80_7ff_tmp22 = simd_and(basis_bits.bit_5, tmp1);
            r80_7ff_tmp23 = simd_or(basis_bits.bit_4, r80_7ff_tmp22);
            r80_7ff_tmp24 = simd_and(basis_bits.bit_3, r80_7ff_tmp23);
            r80_7ff_tmp25 = simd_andc(r80_7ff_tmp21, r80_7ff_tmp24);
            r80_7ff_tmp26 = simd_not(r80_7ff_tmp24);
            r80_7ff_tmp27 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r80_7ff_tmp28 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp26), simd_andc(r80_7ff_tmp27, basis_bits.bit_2));
            r80_7ff_tmp29 = simd_and(r80_7ff_tmp5, r80_7ff_tmp28);
            r80_7ff_tmp30 = simd_or(r80_7ff_tmp25, r80_7ff_tmp29);
            r80_7ff_tmp31 = simd_and(r80_7ff_tmp12, basis_bits.bit_4);
            cc_range_c0_f8_2 = simd_or(r80_7ff_tmp30, r80_7ff_tmp31);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp32 = simd_and(byte_c3_adv, cc_range_c0_f8_2);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r80_7ff_tmp32);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp5);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 8))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(2, 5))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_5, tmp6);
                r100_2ff_tmp2 = simd_not(r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_and(r80_7ff_tmp8, r80_7ff_tmp14);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp4);
                byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(2), r100_2ff_tmp5));
                r100_2ff_tmp6 = simd_and(r100_2ff_tmp5, byte_range_80_8f);
                r100_2ff_tmp7 = simd_or(byte_range_c4_c8, r100_2ff_tmp6);
                if ((bitblock::any(r100_2ff_tmp7) || carryQ.CarryTest(3, 2))) {
                  r100_24f_tmp1 = simd_andc(r80_7ff_tmp13, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp1);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(3, 1))) {
                    byte_range_80_bf = r80_7ff_tmp5;
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_range_c4_c5, carryQ.get_carry_in(3), r100_17f_tmp1));
                    byte_range_c4_c5_sfx = simd_and(r100_17f_tmp1, byte_range_80_bf);
                    struct_xids_Y.cc = simd_or(struct_xids_Y.cc, byte_range_c4_c5_sfx);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(3, 1);
                  }
                  r100_24f_tmp2 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r100_24f_tmp2, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp3);
                  r100_24f_tmp4 = simd_or(byte_range_c6_c8, r100_2ff_tmp6);
                  if ((bitblock::any(r100_24f_tmp4) || carryQ.CarryTest(4, 1))) {
                    byte_range_80_bf = r80_7ff_tmp5;
                    carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_range_c6_c8, carryQ.get_carry_in(4), r180_24f_tmp1));
                    byte_range_c6_c8_sfx = simd_and(r180_24f_tmp1, byte_range_80_bf);
                    struct_xids_Y.cc = simd_or(struct_xids_Y.cc, byte_range_c6_c8_sfx);
                    byte_c9_byte_range_80_8f = r100_2ff_tmp6;
                    struct_xids_Y.cc = simd_or(struct_xids_Y.cc, byte_c9_byte_range_80_8f);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(4, 1);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 2);
                }
                byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
                r100_2ff_tmp8 = simd_and(r100_2ff_tmp5, byte_range_90_bf);
                byte_ca = simd_and(r80_7ff_tmp2, r80_7ff_tmp9);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp11);
                carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(5), r100_2ff_tmp9));
                r100_2ff_tmp10 = simd_and(r100_2ff_tmp9, byte_range_80_af);
                r100_2ff_tmp11 = simd_or(r100_2ff_tmp8, r100_2ff_tmp10);
                if (bitblock::any(r100_2ff_tmp11)) {
                  byte_c9_adv = r100_2ff_tmp5;
                  r250_2af_tmp1 = simd_and(byte_c9_adv, byte_range_90_bf);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r250_2af_tmp1);
                  byte_ca_adv = r100_2ff_tmp9;
                  r250_2af_tmp2 = simd_and(byte_ca_adv, byte_range_80_af);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r250_2af_tmp2);
                }
                byte_range_b0_bf = r80_7ff_tmp12;
                r100_2ff_tmp12 = simd_and(r100_2ff_tmp9, byte_range_b0_bf);
                r100_2ff_tmp13 = simd_and(r80_7ff_tmp8, tmp1);
                byte_cb = simd_and(r80_7ff_tmp2, r100_2ff_tmp13);
                r100_2ff_tmp14 = simd_or(r100_2ff_tmp12, byte_cb);
                if ((bitblock::any(r100_2ff_tmp14) || carryQ.CarryTest(6, 1))) {
                  byte_ca_adv = r100_2ff_tmp9;
                  r2b0_2ff_tmp1 = simd_and(byte_ca_adv, byte_range_b0_bf);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r2b0_2ff_tmp1);
                  r2b0_2ff_tmp2 = simd_or(tmp5, basis_bits.bit_6);
                  r2b0_2ff_tmp3 = simd_andc(byte_range_80_8f, r2b0_2ff_tmp2);
                  r2b0_2ff_tmp4 = simd_not(r2b0_2ff_tmp2);
                  r2b0_2ff_tmp5 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2b0_2ff_tmp6 = simd_or(basis_bits.bit_4, r2b0_2ff_tmp5);
                  r2b0_2ff_tmp7 = simd_or(simd_and(basis_bits.bit_3, r2b0_2ff_tmp4), simd_andc(r2b0_2ff_tmp6, basis_bits.bit_3));
                  r2b0_2ff_tmp8 = simd_and(r80_7ff_tmp21, r2b0_2ff_tmp7);
                  r2b0_2ff_tmp9 = simd_or(r2b0_2ff_tmp3, r2b0_2ff_tmp8);
                  r2b0_2ff_tmp10 = simd_andc(r80_7ff_tmp7, basis_bits.bit_4);
                  r2b0_2ff_tmp11 = simd_and(basis_bits.bit_5, tmp6);
                  r2b0_2ff_tmp12 = simd_andc(r2b0_2ff_tmp10, r2b0_2ff_tmp11);
                  r2b0_2ff_tmp13 = simd_or(r2b0_2ff_tmp9, r2b0_2ff_tmp12);
                  r2b0_2ff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2b0_2ff_tmp15 = simd_andc(r2b0_2ff_tmp14, tmp6);
                  r2b0_2ff_tmp16 = simd_and(r80_7ff_tmp7, r2b0_2ff_tmp15);
                  r2b0_2ff_tmp17 = simd_or(r2b0_2ff_tmp13, r2b0_2ff_tmp16);
                  r2b0_2ff_tmp18 = simd_and(r2b0_2ff_tmp14, r80_7ff_tmp3);
                  r2b0_2ff_tmp19 = simd_and(r80_7ff_tmp7, r2b0_2ff_tmp18);
                  cc_range_2c0_2ee_2 = simd_or(r2b0_2ff_tmp17, r2b0_2ff_tmp19);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(6), byte_cb_adv));
                  r2b0_2ff_tmp20 = simd_and(byte_cb_adv, cc_range_2c0_2ee_2);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r2b0_2ff_tmp20);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 5);
              }
              r100_3ff_tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r100_3ff_tmp3 = simd_and(r100_3ff_tmp2, r80_7ff_tmp14);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              byte_range_b0_bf = r80_7ff_tmp12;
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(7), r100_3ff_tmp4));
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp4, byte_range_b0_bf);
              r100_3ff_tmp6 = simd_and(r100_3ff_tmp2, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp6);
              r100_3ff_tmp7 = simd_or(r100_3ff_tmp5, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp7) || carryQ.CarryTest(8, 2))) {
                r370_3ff_tmp1 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp2 = simd_and(basis_bits.bit_5, tmp6);
                r370_3ff_tmp3 = simd_andc(r370_3ff_tmp1, r370_3ff_tmp2);
                r370_3ff_tmp4 = simd_and(r80_7ff_tmp13, basis_bits.bit_6);
                r370_3ff_tmp5 = simd_and(byte_range_b0_bf, r370_3ff_tmp4);
                r370_3ff_tmp6 = simd_or(r370_3ff_tmp3, r370_3ff_tmp5);
                r370_3ff_tmp7 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp8 = simd_not(basis_bits.bit_6);
                r370_3ff_tmp9 = simd_or(simd_and(basis_bits.bit_5, r370_3ff_tmp8), simd_andc(tmp1, basis_bits.bit_5));
                r370_3ff_tmp10 = simd_and(r370_3ff_tmp7, r370_3ff_tmp9);
                r370_3ff_tmp11 = simd_or(r370_3ff_tmp6, r370_3ff_tmp10);
                r370_3ff_tmp12 = simd_and(r100_3ff_tmp2, tmp1);
                r370_3ff_tmp13 = simd_and(byte_range_b0_bf, r370_3ff_tmp12);
                cc_range_370_37f_2 = simd_or(r370_3ff_tmp11, r370_3ff_tmp13);
                byte_cd_adv = r100_3ff_tmp4;
                r370_3ff_tmp14 = simd_and(byte_cd_adv, cc_range_370_37f_2);
                struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r370_3ff_tmp14);
                r370_3ff_tmp15 = simd_and(r100_3ff_tmp2, r80_7ff_tmp3);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp15);
                r370_3ff_tmp16 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                r370_3ff_tmp17 = simd_and(r80_7ff_tmp13, r80_7ff_tmp3);
                r370_3ff_tmp18 = simd_and(r370_3ff_tmp16, r370_3ff_tmp17);
                r370_3ff_tmp19 = simd_and(r370_3ff_tmp16, r80_7ff_tmp8);
                r370_3ff_tmp20 = simd_andc(r370_3ff_tmp19, tmp1);
                r370_3ff_tmp21 = simd_or(r370_3ff_tmp18, r370_3ff_tmp20);
                r370_3ff_tmp22 = simd_andc(r100_3ff_tmp2, tmp6);
                r370_3ff_tmp23 = simd_and(r370_3ff_tmp16, r370_3ff_tmp22);
                r370_3ff_tmp24 = simd_or(r370_3ff_tmp21, r370_3ff_tmp23);
                r370_3ff_tmp25 = simd_or(tmp5, basis_bits.bit_6);
                r370_3ff_tmp26 = simd_or(basis_bits.bit_3, r370_3ff_tmp25);
                r370_3ff_tmp27 = simd_not(r370_3ff_tmp26);
                r370_3ff_tmp28 = simd_or(basis_bits.bit_3, r100_3ff_tmp6);
                r370_3ff_tmp29 = simd_or(simd_and(basis_bits.bit_2, r370_3ff_tmp27), simd_andc(r370_3ff_tmp28, basis_bits.bit_2));
                r370_3ff_tmp30 = simd_and(r80_7ff_tmp5, r370_3ff_tmp29);
                r370_3ff_tmp31 = simd_or(r370_3ff_tmp24, r370_3ff_tmp30);
                r370_3ff_tmp32 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                r370_3ff_tmp33 = simd_or(tmp5, tmp1);
                r370_3ff_tmp34 = simd_or(basis_bits.bit_3, r370_3ff_tmp33);
                r370_3ff_tmp35 = simd_and(r370_3ff_tmp32, r370_3ff_tmp34);
                cc_range_386_3a3_2 = simd_or(r370_3ff_tmp31, r370_3ff_tmp35);
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(8), byte_ce_adv));
                r370_3ff_tmp36 = simd_and(byte_ce_adv, cc_range_386_3a3_2);
                struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r370_3ff_tmp36);
                byte_cf = simd_and(r80_7ff_tmp2, r370_3ff_tmp12);
                r370_3ff_tmp37 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r370_3ff_tmp38 = simd_or(basis_bits.bit_4, r370_3ff_tmp37);
                r370_3ff_tmp39 = simd_and(basis_bits.bit_3, r370_3ff_tmp38);
                r370_3ff_tmp40 = simd_and(basis_bits.bit_2, r370_3ff_tmp39);
                r370_3ff_tmp41 = simd_andc(r80_7ff_tmp5, r370_3ff_tmp40);
                r370_3ff_tmp42 = simd_and(byte_range_b0_bf, r80_7ff_tmp23);
                cc_range_3c0_3f7_2 = simd_or(r370_3ff_tmp41, r370_3ff_tmp42);
                carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(9), byte_cf_adv));
                r370_3ff_tmp43 = simd_and(byte_cf_adv, cc_range_3c0_3f7_2);
                struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r370_3ff_tmp43);
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 8);
            }
            r80_7ff_tmp33 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp34 = simd_and(byte_range_c0_ff, r80_7ff_tmp33);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp34, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(10, 7))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp34, tmp5);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(10, 3))) {
                r400_4ff_tmp1 = simd_or(tmp5, basis_bits.bit_6);
                byte_range_d0_d1 = simd_andc(r80_7ff_tmp34, r400_4ff_tmp1);
                byte_range_80_bf = r80_7ff_tmp5;
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_range_d0_d1, carryQ.get_carry_in(10), r400_4ff_tmp2));
                byte_range_d0_d1_sfx = simd_and(r400_4ff_tmp2, byte_range_80_bf);
                struct_xids_Y.cc = simd_or(struct_xids_Y.cc, byte_range_d0_d1_sfx);
                byte_d2 = simd_and(r80_7ff_tmp34, r80_7ff_tmp4);
                r400_4ff_tmp3 = simd_andc(byte_range_80_bf, r80_7ff_tmp1);
                byte_range_80_81 = simd_andc(r400_4ff_tmp3, r400_4ff_tmp1);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(11), r400_4ff_tmp4));
                byte_d2_byte_range_80_81 = simd_and(r400_4ff_tmp4, byte_range_80_81);
                struct_xids_Y.cc = simd_or(struct_xids_Y.cc, byte_d2_byte_range_80_81);
                byte_d3 = simd_and(r80_7ff_tmp34, r80_7ff_tmp20);
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(12), r400_4ff_tmp5));
                byte_d3_byte_range_80_bf = simd_and(r400_4ff_tmp5, byte_range_80_bf);
                struct_xids_Y.cc = simd_or(struct_xids_Y.cc, byte_d3_byte_range_80_bf);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 3);
              }
              r400_5ff_tmp1 = simd_andc(r80_7ff_tmp13, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp34, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(r80_7ff_tmp13, r80_7ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp34, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(13), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(14, 2))) {
                r500_58f_tmp1 = simd_andc(r80_7ff_tmp13, tmp6);
                byte_d4 = simd_and(r80_7ff_tmp34, r500_58f_tmp1);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, r80_7ff_tmp11);
                carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(14), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp3)) {
                  byte_d4_adv = r500_58f_tmp2;
                  r500_52f_tmp1 = simd_and(byte_d4_adv, byte_range_80_af);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r500_52f_tmp1);
                }
                byte_range_b0_bf = r80_7ff_tmp12;
                r500_58f_tmp4 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                byte_d5 = simd_and(r80_7ff_tmp34, r80_7ff_tmp15);
                r500_58f_tmp5 = simd_or(r500_58f_tmp4, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp4);
                if ((bitblock::any(r500_58f_tmp6) || carryQ.CarryTest(15, 1))) {
                  r530_58f_tmp1 = simd_or(basis_bits.bit_5, tmp6);
                  r530_58f_tmp2 = simd_or(basis_bits.bit_4, r530_58f_tmp1);
                  byte_range_b1_bf = simd_and(byte_range_b0_bf, r530_58f_tmp2);
                  byte_d4_adv = r500_58f_tmp2;
                  r530_58f_tmp3 = simd_and(byte_d4_adv, byte_range_b1_bf);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r530_58f_tmp3);
                  r530_58f_tmp4 = simd_and(r80_7ff_tmp5, r80_7ff_tmp33);
                  r530_58f_tmp5 = simd_and(r80_7ff_tmp8, r80_7ff_tmp14);
                  r530_58f_tmp6 = simd_and(r530_58f_tmp4, r530_58f_tmp5);
                  r530_58f_tmp7 = simd_or(r80_7ff_tmp25, r530_58f_tmp6);
                  r530_58f_tmp8 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                  r530_58f_tmp9 = simd_or(basis_bits.bit_3, tmp7);
                  r530_58f_tmp10 = simd_and(r530_58f_tmp8, r530_58f_tmp9);
                  cc_range_540_561_2 = simd_or(r530_58f_tmp7, r530_58f_tmp10);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(15), byte_d5_adv));
                  r530_58f_tmp11 = simd_and(byte_d5_adv, cc_range_540_561_2);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r530_58f_tmp11);
                  byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_d6_adv = r400_5ff_tmp3;
                  r530_58f_tmp12 = simd_and(byte_d6_adv, byte_range_80_87);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r530_58f_tmp12);
                }
                else {
                  carryQ.CarryDequeueEnqueue(15, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(14, 2);
              }
              byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
              r400_5ff_tmp6 = simd_and(r400_5ff_tmp3, byte_range_90_bf);
              r400_5ff_tmp7 = simd_and(r80_7ff_tmp13, tmp1);
              byte_d7 = simd_and(r80_7ff_tmp34, r400_5ff_tmp7);
              r400_5ff_tmp8 = simd_or(r400_5ff_tmp6, byte_d7);
              if ((bitblock::any(r400_5ff_tmp8) || carryQ.CarryTest(16, 1))) {
                r590_5ff_tmp1 = simd_or(basis_bits.bit_3, tmp3);
                r590_5ff_tmp2 = simd_not(r590_5ff_tmp1);
                r590_5ff_tmp3 = simd_or(simd_and(basis_bits.bit_2, r590_5ff_tmp2), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                r590_5ff_tmp4 = simd_and(r80_7ff_tmp5, r590_5ff_tmp3);
                r590_5ff_tmp5 = simd_andc(r80_7ff_tmp12, tmp5);
                r590_5ff_tmp6 = simd_andc(r590_5ff_tmp5, tmp1);
                cc_range_5d0_5f0_2 = simd_or(r590_5ff_tmp4, r590_5ff_tmp6);
                carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(16), byte_d7_adv));
                r590_5ff_tmp7 = simd_and(byte_d7_adv, cc_range_5d0_5f0_2);
                struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r590_5ff_tmp7);
              }
              else {
                carryQ.CarryDequeueEnqueue(16, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(10, 7);
            }
            byte_range_d8_db = simd_and(r80_7ff_tmp34, r80_7ff_tmp8);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(17, 4))) {
              r600_6ff_tmp1 = simd_andc(r80_7ff_tmp8, tmp6);
              byte_d8 = simd_and(r80_7ff_tmp34, r600_6ff_tmp1);
              byte_range_a0_bf = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
              carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(17), byte_d8_adv));
              r600_6ff_tmp2 = simd_and(byte_d8_adv, byte_range_a0_bf);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r600_6ff_tmp2);
              r600_6ff_tmp3 = simd_and(r80_7ff_tmp8, r80_7ff_tmp14);
              byte_d9 = simd_and(r80_7ff_tmp34, r600_6ff_tmp3);
              r600_6ff_tmp4 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              r600_6ff_tmp5 = simd_andc(r600_6ff_tmp4, tmp3);
              r600_6ff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              r600_6ff_tmp7 = simd_and(r600_6ff_tmp6, basis_bits.bit_6);
              r600_6ff_tmp8 = simd_and(r80_7ff_tmp7, r600_6ff_tmp7);
              r600_6ff_tmp9 = simd_or(r600_6ff_tmp5, r600_6ff_tmp8);
              r600_6ff_tmp10 = simd_or(basis_bits.bit_5, tmp6);
              r600_6ff_tmp11 = simd_or(basis_bits.bit_4, r600_6ff_tmp10);
              r600_6ff_tmp12 = simd_and(r80_7ff_tmp12, r600_6ff_tmp11);
              cc_range_640_671_2 = simd_or(r600_6ff_tmp9, r600_6ff_tmp12);
              carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(18), byte_d9_adv));
              r600_6ff_tmp13 = simd_and(byte_d9_adv, cc_range_640_671_2);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r600_6ff_tmp13);
              byte_da = simd_and(r80_7ff_tmp34, r80_7ff_tmp9);
              byte_range_80_bf = r80_7ff_tmp5;
              carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_da, carryQ.get_carry_in(19), byte_da_adv));
              r600_6ff_tmp14 = simd_and(byte_da_adv, byte_range_80_bf);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r600_6ff_tmp14);
              r600_6ff_tmp15 = simd_and(r80_7ff_tmp8, tmp1);
              byte_db = simd_and(r80_7ff_tmp34, r600_6ff_tmp15);
              r600_6ff_tmp16 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              r600_6ff_tmp17 = simd_and(basis_bits.bit_3, tmp5);
              r600_6ff_tmp18 = simd_andc(r600_6ff_tmp16, r600_6ff_tmp17);
              r600_6ff_tmp19 = simd_and(byte_range_80_bf, r80_7ff_tmp33);
              r600_6ff_tmp20 = simd_and(r600_6ff_tmp19, r80_7ff_tmp15);
              r600_6ff_tmp21 = simd_or(r600_6ff_tmp18, r600_6ff_tmp20);
              r600_6ff_tmp22 = simd_and(byte_range_80_bf, r80_7ff_tmp6);
              r600_6ff_tmp23 = simd_and(r600_6ff_tmp22, r80_7ff_tmp13);
              r600_6ff_tmp24 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp25 = simd_and(r600_6ff_tmp23, r600_6ff_tmp24);
              r600_6ff_tmp26 = simd_or(r600_6ff_tmp21, r600_6ff_tmp25);
              r600_6ff_tmp27 = simd_and(r600_6ff_tmp22, r600_6ff_tmp7);
              r600_6ff_tmp28 = simd_or(r600_6ff_tmp26, r600_6ff_tmp27);
              r600_6ff_tmp29 = simd_and(byte_range_80_bf, r80_7ff_tmp11);
              r600_6ff_tmp30 = simd_and(r600_6ff_tmp29, basis_bits.bit_4);
              r600_6ff_tmp31 = simd_not(tmp6);
              r600_6ff_tmp32 = simd_or(simd_and(basis_bits.bit_5, r600_6ff_tmp31), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
              r600_6ff_tmp33 = simd_and(r600_6ff_tmp30, r600_6ff_tmp32);
              r600_6ff_tmp34 = simd_or(r600_6ff_tmp28, r600_6ff_tmp33);
              r600_6ff_tmp35 = simd_and(r600_6ff_tmp6, tmp1);
              r600_6ff_tmp36 = simd_and(r600_6ff_tmp29, r600_6ff_tmp35);
              cc_range_6c0_6ff_2 = simd_or(r600_6ff_tmp34, r600_6ff_tmp36);
              carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(20), byte_db_adv));
              r600_6ff_tmp37 = simd_and(byte_db_adv, cc_range_6c0_6ff_2);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r600_6ff_tmp37);
            }
            else {
              carryQ.CarryDequeueEnqueue(17, 4);
            }
            r80_7ff_tmp35 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp36 = simd_andc(r80_7ff_tmp35, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp34, r80_7ff_tmp36);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(21, 2))) {
              r700_77f_tmp1 = simd_andc(r80_7ff_tmp35, tmp6);
              byte_dc = simd_and(r80_7ff_tmp34, r700_77f_tmp1);
              r700_77f_tmp2 = simd_and(r80_7ff_tmp35, r80_7ff_tmp14);
              byte_dd = simd_and(r80_7ff_tmp34, r700_77f_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(21), r700_77f_tmp3));
              r700_77f_tmp4 = simd_and(r700_77f_tmp3, byte_range_80_8f);
              r700_77f_tmp5 = simd_or(byte_dc, r700_77f_tmp4);
              if ((bitblock::any(r700_77f_tmp5) || carryQ.CarryTest(22, 1))) {
                r700_74f_tmp1 = simd_and(r80_7ff_tmp5, r80_7ff_tmp33);
                r700_74f_tmp2 = simd_andc(r700_74f_tmp1, tmp7);
                r700_74f_tmp3 = simd_not(basis_bits.bit_3);
                r700_74f_tmp4 = simd_or(tmp5, basis_bits.bit_6);
                r700_74f_tmp5 = simd_and(basis_bits.bit_3, r700_74f_tmp4);
                r700_74f_tmp6 = simd_or(simd_and(basis_bits.bit_2, r700_74f_tmp3), simd_andc(r700_74f_tmp5, basis_bits.bit_2));
                r700_74f_tmp7 = simd_and(r80_7ff_tmp5, r700_74f_tmp6);
                cc_range_710_712_2 = simd_or(r700_74f_tmp2, r700_74f_tmp7);
                carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(22), byte_dc_adv));
                r700_74f_tmp8 = simd_and(byte_dc_adv, cc_range_710_712_2);
                struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r700_74f_tmp8);
                r700_74f_tmp9 = simd_and(byte_range_80_8f, r80_7ff_tmp35);
                byte_range_8d_8f = simd_and(r700_74f_tmp9, tmp6);
                byte_dd_adv = r700_77f_tmp3;
                r700_74f_tmp10 = simd_and(byte_dd_adv, byte_range_8d_8f);
                struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r700_74f_tmp10);
              }
              else {
                carryQ.CarryDequeueEnqueue(22, 1);
              }
              byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
              r700_77f_tmp6 = simd_and(r700_77f_tmp3, byte_range_90_bf);
              if (bitblock::any(r700_77f_tmp6)) {
                byte_dd_adv = r700_77f_tmp3;
                r750_77f_tmp1 = simd_and(byte_dd_adv, byte_range_90_bf);
                struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r750_77f_tmp1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(21, 2);
            }
            r80_7ff_tmp37 = simd_and(r80_7ff_tmp35, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp34, r80_7ff_tmp37);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(23, 2))) {
              r780_7ff_tmp1 = simd_and(r80_7ff_tmp35, r80_7ff_tmp3);
              byte_de = simd_and(r80_7ff_tmp34, r780_7ff_tmp1);
              if ((bitblock::any(byte_de) || carryQ.CarryTest(23, 1))) {
                r780_7bf_tmp1 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r780_7bf_tmp2 = simd_or(basis_bits.bit_4, r780_7bf_tmp1);
                r780_7bf_tmp3 = simd_or(basis_bits.bit_3, r780_7bf_tmp2);
                r780_7bf_tmp4 = simd_and(basis_bits.bit_2, r780_7bf_tmp3);
                r780_7bf_tmp5 = simd_andc(r80_7ff_tmp5, r780_7bf_tmp4);
                r780_7bf_tmp6 = simd_andc(r80_7ff_tmp14, tmp5);
                r780_7bf_tmp7 = simd_and(r80_7ff_tmp12, r780_7bf_tmp6);
                cc_range_780_7b1_2 = simd_or(r780_7bf_tmp5, r780_7bf_tmp7);
                carryQ.cq[23] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(23), byte_de_adv));
                r780_7bf_tmp8 = simd_and(byte_de_adv, cc_range_780_7b1_2);
                struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r780_7bf_tmp8);
              }
              else {
                carryQ.CarryDequeueEnqueue(23, 1);
              }
              r780_7ff_tmp2 = simd_and(r80_7ff_tmp35, tmp1);
              byte_df = simd_and(r80_7ff_tmp34, r780_7ff_tmp2);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(24, 1))) {
                r7c0_7ff_tmp1 = simd_or(basis_bits.bit_3, tmp3);
                r7c0_7ff_tmp2 = simd_not(r7c0_7ff_tmp1);
                r7c0_7ff_tmp3 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                r7c0_7ff_tmp4 = simd_and(basis_bits.bit_4, r7c0_7ff_tmp3);
                r7c0_7ff_tmp5 = simd_or(basis_bits.bit_3, r7c0_7ff_tmp4);
                r7c0_7ff_tmp6 = simd_or(simd_and(basis_bits.bit_2, r7c0_7ff_tmp2), simd_andc(r7c0_7ff_tmp5, basis_bits.bit_2));
                r7c0_7ff_tmp7 = simd_and(r80_7ff_tmp5, r7c0_7ff_tmp6);
                r7c0_7ff_tmp8 = simd_andc(r80_7ff_tmp13, basis_bits.bit_6);
                r7c0_7ff_tmp9 = simd_and(r80_7ff_tmp12, r7c0_7ff_tmp8);
                r7c0_7ff_tmp10 = simd_or(r7c0_7ff_tmp7, r7c0_7ff_tmp9);
                cc_range_7ca_7fa_2 = simd_or(r7c0_7ff_tmp10, r80_7ff_tmp18);
                carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(24), byte_df_adv));
                r7c0_7ff_tmp11 = simd_and(byte_df_adv, cc_range_7ca_7fa_2);
                struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r7c0_7ff_tmp11);
              }
              else {
                carryQ.CarryDequeueEnqueue(24, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(23, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 25);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(25, 165))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp5);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp6);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(25), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(26, 103))) {
              r800_4dff_tmp1 = simd_or(tmp5, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(26, 77))) {
                byte_e0 = simd_andc(byte_range_e0_ef, tmp7);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(26, 31))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r800_fff_tmp1, tmp7);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(26), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r800_fff_tmp4 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp5 = simd_or(basis_bits.bit_4, r800_fff_tmp4);
                  r800_fff_tmp6 = simd_and(basis_bits.bit_3, r800_fff_tmp5);
                  r800_fff_tmp7 = simd_andc(r800_fff_tmp3, r800_fff_tmp6);
                  r800_fff_tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp9 = simd_and(r800_ffff_tmp3, r800_fff_tmp8);
                  r800_fff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp12 = simd_and(r800_fff_tmp10, r800_fff_tmp11);
                  r800_fff_tmp13 = simd_and(r800_fff_tmp9, r800_fff_tmp12);
                  r800_fff_tmp14 = simd_or(r800_fff_tmp7, r800_fff_tmp13);
                  r800_fff_tmp15 = simd_and(r800_fff_tmp1, r800_ffff_tmp2);
                  r800_fff_tmp16 = simd_or(r800_fff_tmp14, r800_fff_tmp15);
                  r800_fff_tmp17 = simd_andc(r800_fff_tmp10, tmp6);
                  r800_fff_tmp18 = simd_and(r800_fff_tmp1, r800_fff_tmp17);
                  cc_range_800_828_3 = simd_or(r800_fff_tmp16, r800_fff_tmp18);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(27), sequence_e0_a0_adv));
                  r800_fff_tmp19 = simd_and(sequence_e0_a0_adv, cc_range_800_828_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp19);
                  r800_fff_tmp20 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp21 = simd_andc(r800_fff_tmp20, tmp5);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp21);
                  sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
                  r800_fff_tmp22 = simd_or(basis_bits.bit_5, tmp6);
                  r800_fff_tmp23 = simd_and(basis_bits.bit_4, r800_fff_tmp22);
                  r800_fff_tmp24 = simd_and(basis_bits.bit_3, r800_fff_tmp23);
                  byte_range_80_98 = simd_andc(r800_fff_tmp3, r800_fff_tmp24);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(28), sequence_e0_a1_adv));
                  r800_fff_tmp25 = simd_and(sequence_e0_a1_adv, byte_range_80_98);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp25);
                  r800_fff_tmp26 = simd_andc(r800_fff_tmp11, tmp5);
                  byte_a2 = simd_and(r800_fff_tmp1, r800_fff_tmp26);
                  sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
                  r800_fff_tmp27 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r800_fff_tmp28 = simd_or(tmp5, tmp1);
                  r800_fff_tmp29 = simd_and(basis_bits.bit_3, r800_fff_tmp28);
                  byte_range_a0_b2 = simd_andc(r800_fff_tmp27, r800_fff_tmp29);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_a2, carryQ.get_carry_in(29), sequence_e0_a2_adv));
                  r800_fff_tmp30 = simd_and(sequence_e0_a2_adv, byte_range_a0_b2);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp30);
                  byte_a4 = r800_fff_tmp15;
                  sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
                  r800_fff_tmp31 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp32 = simd_and(basis_bits.bit_4, r800_fff_tmp31);
                  r800_fff_tmp33 = simd_and(basis_bits.bit_3, r800_fff_tmp32);
                  r800_fff_tmp34 = simd_not(r800_fff_tmp33);
                  r800_fff_tmp35 = simd_or(basis_bits.bit_3, tmp5);
                  r800_fff_tmp36 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp34), simd_andc(r800_fff_tmp35, basis_bits.bit_2));
                  r800_fff_tmp37 = simd_and(r800_ffff_tmp3, r800_fff_tmp36);
                  r800_fff_tmp38 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp39 = simd_and(r800_ffff_tmp3, r800_fff_tmp38);
                  r800_fff_tmp40 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp41 = simd_and(r800_fff_tmp40, r800_fff_tmp20);
                  r800_fff_tmp42 = simd_and(r800_fff_tmp39, r800_fff_tmp41);
                  cc_range_904_93d_3 = simd_or(r800_fff_tmp37, r800_fff_tmp42);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(30), sequence_e0_a4_adv));
                  r800_fff_tmp43 = simd_and(sequence_e0_a4_adv, cc_range_904_93d_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp43);
                  r800_fff_tmp44 = simd_and(r800_ffff_tmp1, r800_fff_tmp20);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp44);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  r800_fff_tmp45 = simd_andc(r800_fff_tmp9, tmp7);
                  r800_fff_tmp46 = simd_or(basis_bits.bit_3, r800_4dff_tmp1);
                  r800_fff_tmp47 = simd_not(r800_fff_tmp46);
                  r800_fff_tmp48 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp47), simd_andc(r800_ffff_tmp4, basis_bits.bit_2));
                  r800_fff_tmp49 = simd_and(r800_ffff_tmp3, r800_fff_tmp48);
                  r800_fff_tmp50 = simd_or(r800_fff_tmp45, r800_fff_tmp49);
                  r800_fff_tmp51 = simd_or(basis_bits.bit_4, r800_fff_tmp22);
                  r800_fff_tmp52 = simd_and(r800_fff_tmp39, r800_fff_tmp51);
                  cc_range_950_971_3 = simd_or(r800_fff_tmp50, r800_fff_tmp52);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(31), sequence_e0_a5_adv));
                  r800_fff_tmp53 = simd_and(sequence_e0_a5_adv, cc_range_950_971_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp53);
                  r800_fff_tmp54 = simd_and(r800_ffff_tmp1, r800_fff_tmp11);
                  byte_a6 = simd_and(r800_fff_tmp1, r800_fff_tmp54);
                  sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
                  r800_fff_tmp55 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp56 = simd_andc(r800_ffff_tmp3, r800_fff_tmp55);
                  r800_fff_tmp57 = simd_and(basis_bits.bit_5, tmp6);
                  r800_fff_tmp58 = simd_xor(basis_bits.bit_4, r800_fff_tmp57);
                  r800_fff_tmp59 = simd_andc(tmp7, r800_fff_tmp58);
                  r800_fff_tmp60 = simd_andc(r800_fff_tmp56, r800_fff_tmp59);
                  r800_fff_tmp61 = simd_not(tmp7);
                  r800_fff_tmp62 = simd_and(r800_fff_tmp40, tmp1);
                  r800_fff_tmp63 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp61), simd_andc(r800_fff_tmp62, basis_bits.bit_3));
                  r800_fff_tmp64 = simd_and(r800_fff_tmp3, r800_fff_tmp63);
                  r800_fff_tmp65 = simd_or(r800_fff_tmp60, r800_fff_tmp64);
                  r800_fff_tmp66 = simd_or(basis_bits.bit_3, r800_fff_tmp23);
                  r800_fff_tmp67 = simd_not(r800_fff_tmp66);
                  r800_fff_tmp68 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp67), simd_andc(r800_fff_tmp29, basis_bits.bit_2));
                  r800_fff_tmp69 = simd_and(r800_ffff_tmp3, r800_fff_tmp68);
                  r800_fff_tmp70 = simd_or(r800_fff_tmp65, r800_fff_tmp69);
                  r800_fff_tmp71 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp61), simd_andc(r800_fff_tmp32, basis_bits.bit_3));
                  r800_fff_tmp72 = simd_and(r800_fff_tmp27, r800_fff_tmp71);
                  r800_fff_tmp73 = simd_or(r800_fff_tmp70, r800_fff_tmp72);
                  r800_fff_tmp74 = simd_and(r800_fff_tmp39, r800_fff_tmp26);
                  r800_fff_tmp75 = simd_or(r800_fff_tmp73, r800_fff_tmp74);
                  r800_fff_tmp76 = simd_not(r800_fff_tmp31);
                  r800_fff_tmp77 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp76), simd_andc(r800_fff_tmp4, basis_bits.bit_4));
                  r800_fff_tmp78 = simd_and(r800_fff_tmp39, r800_fff_tmp77);
                  r800_fff_tmp79 = simd_or(r800_fff_tmp75, r800_fff_tmp78);
                  cc_range_980_9bd_3 = simd_or(r800_fff_tmp79, r800_fff_tmp42);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(32), sequence_e0_a6_adv));
                  r800_fff_tmp80 = simd_and(sequence_e0_a6_adv, cc_range_980_9bd_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp80);
                  r800_fff_tmp81 = simd_and(r800_ffff_tmp1, tmp1);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp81);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  r800_fff_tmp82 = simd_and(r800_fff_tmp40, r800_fff_tmp11);
                  r800_fff_tmp83 = simd_and(r800_fff_tmp56, r800_fff_tmp82);
                  r800_fff_tmp84 = simd_andc(r800_fff_tmp40, basis_bits.bit_6);
                  r800_fff_tmp85 = simd_and(r800_fff_tmp9, r800_fff_tmp84);
                  r800_fff_tmp86 = simd_or(r800_fff_tmp83, r800_fff_tmp85);
                  r800_fff_tmp87 = simd_and(basis_bits.bit_3, r800_fff_tmp62);
                  r800_fff_tmp88 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp47), simd_andc(r800_fff_tmp87, basis_bits.bit_2));
                  r800_fff_tmp89 = simd_and(r800_ffff_tmp3, r800_fff_tmp88);
                  r800_fff_tmp90 = simd_or(r800_fff_tmp86, r800_fff_tmp89);
                  r800_fff_tmp91 = simd_andc(r800_fff_tmp39, r800_4dff_tmp1);
                  cc_range_9ce_9f0_3 = simd_or(r800_fff_tmp90, r800_fff_tmp91);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(33), sequence_e0_a7_adv));
                  r800_fff_tmp92 = simd_and(sequence_e0_a7_adv, cc_range_9ce_9f0_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp92);
                  byte_a8 = r800_fff_tmp18;
                  sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
                  r800_fff_tmp93 = simd_not(tmp2);
                  r800_fff_tmp94 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp93), simd_andc(r800_fff_tmp57, basis_bits.bit_4));
                  r800_fff_tmp95 = simd_and(r800_fff_tmp56, r800_fff_tmp94);
                  r800_fff_tmp96 = simd_or(r800_fff_tmp95, r800_fff_tmp64);
                  r800_fff_tmp97 = simd_or(r800_fff_tmp96, r800_fff_tmp69);
                  r800_fff_tmp98 = simd_or(r800_fff_tmp97, r800_fff_tmp72);
                  r800_fff_tmp99 = simd_andc(basis_bits.bit_6, tmp5);
                  r800_fff_tmp100 = simd_and(r800_fff_tmp39, r800_fff_tmp99);
                  r800_fff_tmp101 = simd_or(r800_fff_tmp98, r800_fff_tmp100);
                  r800_fff_tmp102 = simd_and(r800_fff_tmp39, r800_ffff_tmp1);
                  r800_fff_tmp103 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp104 = simd_and(r800_fff_tmp102, r800_fff_tmp103);
                  r800_fff_tmp105 = simd_or(r800_fff_tmp101, r800_fff_tmp104);
                  r800_fff_tmp106 = simd_andc(r800_fff_tmp10, basis_bits.bit_6);
                  r800_fff_tmp107 = simd_and(r800_fff_tmp39, r800_fff_tmp106);
                  cc_range_a05_a38_3 = simd_or(r800_fff_tmp105, r800_fff_tmp107);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(34), sequence_e0_a8_adv));
                  r800_fff_tmp108 = simd_and(sequence_e0_a8_adv, cc_range_a05_a38_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp108);
                  r800_fff_tmp109 = simd_and(r800_fff_tmp10, r800_fff_tmp20);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp109);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  r800_fff_tmp110 = simd_and(r800_fff_tmp9, basis_bits.bit_4);
                  r800_fff_tmp111 = simd_xor(basis_bits.bit_5, tmp6);
                  r800_fff_tmp112 = simd_and(r800_fff_tmp110, r800_fff_tmp111);
                  r800_fff_tmp113 = simd_and(r800_fff_tmp9, r800_fff_tmp82);
                  r800_fff_tmp114 = simd_or(r800_fff_tmp112, r800_fff_tmp113);
                  r800_fff_tmp115 = simd_andc(r800_fff_tmp39, basis_bits.bit_4);
                  r800_fff_tmp116 = simd_not(tmp6);
                  r800_fff_tmp117 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp116), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r800_fff_tmp118 = simd_and(r800_fff_tmp115, r800_fff_tmp117);
                  cc_range_a59_a72_3 = simd_or(r800_fff_tmp114, r800_fff_tmp118);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(35), sequence_e0_a9_adv));
                  r800_fff_tmp119 = simd_and(sequence_e0_a9_adv, cc_range_a59_a72_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp119);
                  byte_aa = simd_and(r800_fff_tmp1, r800_fff_tmp12);
                  sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
                  r800_fff_tmp120 = simd_not(r800_fff_tmp4);
                  r800_fff_tmp121 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp120), simd_andc(r800_fff_tmp57, basis_bits.bit_4));
                  r800_fff_tmp122 = simd_and(r800_fff_tmp56, r800_fff_tmp121);
                  r800_fff_tmp123 = simd_not(r800_4dff_tmp1);
                  r800_fff_tmp124 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp123), simd_andc(r800_fff_tmp62, basis_bits.bit_3));
                  r800_fff_tmp125 = simd_and(r800_fff_tmp3, r800_fff_tmp124);
                  r800_fff_tmp126 = simd_or(r800_fff_tmp122, r800_fff_tmp125);
                  r800_fff_tmp127 = simd_or(r800_fff_tmp126, r800_fff_tmp69);
                  r800_fff_tmp128 = simd_or(r800_fff_tmp127, r800_fff_tmp72);
                  r800_fff_tmp129 = simd_or(r800_fff_tmp128, r800_fff_tmp100);
                  r800_fff_tmp130 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp76), simd_andc(r800_fff_tmp57, basis_bits.bit_4));
                  r800_fff_tmp131 = simd_and(r800_fff_tmp39, r800_fff_tmp130);
                  r800_fff_tmp132 = simd_or(r800_fff_tmp129, r800_fff_tmp131);
                  cc_range_a85_abd_3 = simd_or(r800_fff_tmp132, r800_fff_tmp42);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(36), sequence_e0_aa_adv));
                  r800_fff_tmp133 = simd_and(sequence_e0_aa_adv, cc_range_a85_abd_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp133);
                  r800_fff_tmp134 = simd_and(r800_fff_tmp10, tmp1);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp134);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  r800_fff_tmp135 = simd_andc(r800_fff_tmp1, r800_4dff_tmp1);
                  cc_range_ad0_ae0_3 = simd_or(r800_fff_tmp45, r800_fff_tmp135);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(37), sequence_e0_ab_adv));
                  r800_fff_tmp136 = simd_and(sequence_e0_ab_adv, cc_range_ad0_ae0_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp136);
                  r800_fff_tmp137 = simd_andc(r800_fff_tmp40, tmp6);
                  byte_ac = simd_and(r800_fff_tmp1, r800_fff_tmp137);
                  sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
                  r800_fff_tmp138 = simd_and(r800_fff_tmp56, r800_fff_tmp58);
                  r800_fff_tmp139 = simd_or(r800_fff_tmp138, r800_fff_tmp64);
                  r800_fff_tmp140 = simd_or(r800_fff_tmp139, r800_fff_tmp69);
                  r800_fff_tmp141 = simd_or(r800_fff_tmp140, r800_fff_tmp72);
                  r800_fff_tmp142 = simd_or(r800_fff_tmp141, r800_fff_tmp100);
                  r800_fff_tmp143 = simd_or(r800_fff_tmp142, r800_fff_tmp131);
                  cc_range_b05_b3d_3 = simd_or(r800_fff_tmp143, r800_fff_tmp42);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(38), sequence_e0_ac_adv));
                  r800_fff_tmp144 = simd_and(sequence_e0_ac_adv, cc_range_b05_b3d_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp144);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp41);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  r800_fff_tmp145 = simd_or(r800_fff_tmp85, r800_fff_tmp89);
                  r800_fff_tmp146 = simd_and(r800_fff_tmp39, r800_fff_tmp21);
                  cc_range_b5c_b71_3 = simd_or(r800_fff_tmp145, r800_fff_tmp146);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(39), sequence_e0_ad_adv));
                  r800_fff_tmp147 = simd_and(sequence_e0_ad_adv, cc_range_b5c_b71_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp147);
                  byte_ae = simd_and(r800_fff_tmp1, r800_fff_tmp82);
                  sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
                  r800_fff_tmp148 = simd_andc(tmp1, tmp5);
                  r800_fff_tmp149 = simd_or(r800_fff_tmp148, r800_fff_tmp94);
                  r800_fff_tmp150 = simd_and(r800_fff_tmp56, r800_fff_tmp149);
                  r800_fff_tmp151 = simd_and(r800_fff_tmp40, basis_bits.bit_6);
                  r800_fff_tmp152 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp61), simd_andc(r800_fff_tmp151, basis_bits.bit_3));
                  r800_fff_tmp153 = simd_and(r800_fff_tmp3, r800_fff_tmp152);
                  r800_fff_tmp154 = simd_or(r800_fff_tmp150, r800_fff_tmp153);
                  r800_fff_tmp155 = simd_andc(r800_fff_tmp9, basis_bits.bit_4);
                  r800_fff_tmp156 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp157 = simd_and(r800_fff_tmp155, r800_fff_tmp156);
                  r800_fff_tmp158 = simd_or(r800_fff_tmp154, r800_fff_tmp157);
                  r800_fff_tmp159 = simd_and(r800_fff_tmp9, r800_fff_tmp10);
                  r800_fff_tmp160 = simd_and(r800_fff_tmp159, r800_fff_tmp103);
                  r800_fff_tmp161 = simd_or(r800_fff_tmp158, r800_fff_tmp160);
                  r800_fff_tmp162 = simd_and(r800_fff_tmp9, r800_fff_tmp137);
                  r800_fff_tmp163 = simd_or(r800_fff_tmp161, r800_fff_tmp162);
                  r800_fff_tmp164 = simd_and(r800_fff_tmp9, r800_fff_tmp151);
                  r800_fff_tmp165 = simd_or(r800_fff_tmp163, r800_fff_tmp164);
                  r800_fff_tmp166 = simd_andc(r800_fff_tmp1, basis_bits.bit_4);
                  r800_fff_tmp167 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp116), simd_andc(tmp1, basis_bits.bit_5));
                  r800_fff_tmp168 = simd_and(r800_fff_tmp166, r800_fff_tmp167);
                  r800_fff_tmp169 = simd_or(r800_fff_tmp165, r800_fff_tmp168);
                  r800_fff_tmp170 = simd_and(r800_fff_tmp1, r800_fff_tmp10);
                  r800_fff_tmp171 = simd_andc(r800_fff_tmp170, tmp1);
                  r800_fff_tmp172 = simd_or(r800_fff_tmp169, r800_fff_tmp171);
                  r800_fff_tmp173 = simd_not(r800_fff_tmp32);
                  r800_fff_tmp174 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp173), simd_andc(r800_fff_tmp151, basis_bits.bit_3));
                  r800_fff_tmp175 = simd_and(r800_fff_tmp27, r800_fff_tmp174);
                  cc_range_b83_bae_3 = simd_or(r800_fff_tmp172, r800_fff_tmp175);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(40), sequence_e0_ae_adv));
                  r800_fff_tmp176 = simd_and(sequence_e0_ae_adv, cc_range_b83_bae_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp176);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp62);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  byte_90 = r800_fff_tmp45;
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(41), sequence_e0_af_adv));
                  r800_fff_tmp177 = simd_and(sequence_e0_af_adv, byte_90);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp177);
                  byte_b0 = simd_andc(r800_fff_tmp39, tmp7);
                  sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
                  r800_fff_tmp178 = simd_or(r800_fff_tmp138, r800_fff_tmp153);
                  r800_fff_tmp179 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  r800_fff_tmp180 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp67), simd_andc(r800_fff_tmp179, basis_bits.bit_2));
                  r800_fff_tmp181 = simd_and(r800_ffff_tmp3, r800_fff_tmp180);
                  r800_fff_tmp182 = simd_or(r800_fff_tmp178, r800_fff_tmp181);
                  r800_fff_tmp183 = simd_xor(basis_bits.bit_3, r800_fff_tmp32);
                  r800_fff_tmp184 = simd_and(r800_fff_tmp27, r800_fff_tmp183);
                  r800_fff_tmp185 = simd_or(r800_fff_tmp182, r800_fff_tmp184);
                  cc_range_c05_c3d_3 = simd_or(r800_fff_tmp185, r800_fff_tmp42);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(42), sequence_e0_b0_adv));
                  r800_fff_tmp186 = simd_and(sequence_e0_b0_adv, cc_range_c05_c3d_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp186);
                  byte_b1 = r800_fff_tmp146;
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  r800_fff_tmp187 = simd_and(r800_fff_tmp9, r800_fff_tmp106);
                  cc_range_c58_c60_3 = simd_or(r800_fff_tmp187, r800_fff_tmp135);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(43), sequence_e0_b1_adv));
                  r800_fff_tmp188 = simd_and(sequence_e0_b1_adv, cc_range_c58_c60_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp188);
                  byte_b2 = r800_fff_tmp74;
                  sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
                  r800_fff_tmp189 = simd_not(tmp5);
                  r800_fff_tmp190 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp189), simd_andc(r800_fff_tmp32, basis_bits.bit_3));
                  r800_fff_tmp191 = simd_and(r800_fff_tmp27, r800_fff_tmp190);
                  r800_fff_tmp192 = simd_or(r800_fff_tmp182, r800_fff_tmp191);
                  r800_fff_tmp193 = simd_or(r800_fff_tmp192, r800_fff_tmp131);
                  cc_range_c85_cbd_3 = simd_or(r800_fff_tmp193, r800_fff_tmp42);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(44), sequence_e0_b2_adv));
                  r800_fff_tmp194 = simd_and(sequence_e0_b2_adv, cc_range_c85_cbd_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp194);
                  byte_b3 = simd_and(r800_fff_tmp39, r800_fff_tmp148);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  r800_fff_tmp195 = simd_or(r800_fff_tmp113, r800_fff_tmp135);
                  r800_fff_tmp196 = simd_andc(r800_fff_tmp39, tmp5);
                  r800_fff_tmp197 = simd_and(r800_fff_tmp196, r800_fff_tmp103);
                  cc_range_cde_cf1_3 = simd_or(r800_fff_tmp195, r800_fff_tmp197);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(45), sequence_e0_b3_adv));
                  r800_fff_tmp198 = simd_and(sequence_e0_b3_adv, cc_range_cde_cf1_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp198);
                  byte_b4 = simd_and(r800_fff_tmp39, r800_ffff_tmp2);
                  sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
                  r800_fff_tmp199 = simd_and(basis_bits.bit_3, tmp3);
                  r800_fff_tmp200 = simd_not(r800_fff_tmp199);
                  r800_fff_tmp201 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp200), simd_andc(r800_fff_tmp179, basis_bits.bit_2));
                  r800_fff_tmp202 = simd_and(r800_ffff_tmp3, r800_fff_tmp201);
                  r800_fff_tmp203 = simd_or(r800_fff_tmp178, r800_fff_tmp202);
                  cc_range_d05_d3d_3 = simd_or(r800_fff_tmp203, r800_fff_tmp42);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(46), sequence_e0_b4_adv));
                  r800_fff_tmp204 = simd_and(sequence_e0_b4_adv, cc_range_d05_d3d_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp204);
                  byte_b5 = simd_and(r800_fff_tmp39, r800_fff_tmp44);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  r800_fff_tmp205 = simd_or(r800_fff_tmp83, r800_fff_tmp135);
                  r800_fff_tmp206 = simd_and(r800_fff_tmp39, basis_bits.bit_4);
                  r800_fff_tmp207 = simd_and(r800_fff_tmp206, r800_fff_tmp31);
                  cc_range_d4e_d7a_3 = simd_or(r800_fff_tmp205, r800_fff_tmp207);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(47), sequence_e0_b5_adv));
                  r800_fff_tmp208 = simd_and(sequence_e0_b5_adv, cc_range_d4e_d7a_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp208);
                  byte_b6 = simd_and(r800_fff_tmp39, r800_fff_tmp54);
                  sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
                  r800_fff_tmp209 = simd_and(basis_bits.bit_5, tmp1);
                  r800_fff_tmp210 = simd_or(basis_bits.bit_4, r800_fff_tmp209);
                  r800_fff_tmp211 = simd_not(r800_fff_tmp210);
                  r800_fff_tmp212 = simd_or(basis_bits.bit_4, r800_fff_tmp57);
                  r800_fff_tmp213 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp211), simd_andc(r800_fff_tmp212, basis_bits.bit_3));
                  r800_fff_tmp214 = simd_and(r800_fff_tmp3, r800_fff_tmp213);
                  r800_fff_tmp215 = simd_not(r800_fff_tmp179);
                  r800_fff_tmp216 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp215), simd_andc(r800_fff_tmp33, basis_bits.bit_2));
                  r800_fff_tmp217 = simd_and(r800_ffff_tmp3, r800_fff_tmp216);
                  r800_fff_tmp218 = simd_or(r800_fff_tmp214, r800_fff_tmp217);
                  r800_fff_tmp219 = simd_not(basis_bits.bit_5);
                  r800_fff_tmp220 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp219), simd_andc(tmp2, basis_bits.bit_4));
                  r800_fff_tmp221 = simd_and(r800_fff_tmp39, r800_fff_tmp220);
                  r800_fff_tmp222 = simd_or(r800_fff_tmp218, r800_fff_tmp221);
                  cc_range_d85_dbd_3 = simd_or(r800_fff_tmp222, r800_fff_tmp42);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(48), sequence_e0_b6_adv));
                  r800_fff_tmp223 = simd_and(sequence_e0_b6_adv, cc_range_d85_dbd_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp223);
                  byte_b7 = simd_and(r800_fff_tmp39, r800_fff_tmp81);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  r800_fff_tmp224 = simd_andc(r800_fff_tmp56, basis_bits.bit_4);
                  byte_range_80_86 = simd_andc(r800_fff_tmp224, r800_fff_tmp209);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(49), sequence_e0_b7_adv));
                  r800_fff_tmp225 = simd_and(sequence_e0_b7_adv, byte_range_80_86);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp225);
                  byte_b8 = simd_and(r800_fff_tmp39, r800_fff_tmp17);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  r800_fff_tmp226 = simd_and(basis_bits.bit_3, tmp7);
                  r800_fff_tmp227 = simd_not(r800_fff_tmp226);
                  r800_fff_tmp228 = simd_or(basis_bits.bit_3, tmp7);
                  r800_fff_tmp229 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp227), simd_andc(r800_fff_tmp228, basis_bits.bit_2));
                  r800_fff_tmp230 = simd_and(r800_ffff_tmp3, r800_fff_tmp229);
                  cc_range_e01_e32_3 = simd_or(r800_fff_tmp230, byte_b2);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(50), sequence_e0_b8_adv));
                  r800_fff_tmp231 = simd_and(sequence_e0_b8_adv, cc_range_e01_e32_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp231);
                  byte_b9 = simd_and(r800_fff_tmp39, r800_fff_tmp109);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(51), sequence_e0_b9_adv));
                  r800_fff_tmp232 = simd_and(sequence_e0_b9_adv, byte_range_80_86);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp232);
                  byte_ba = simd_and(r800_fff_tmp39, r800_fff_tmp12);
                  sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
                  r800_fff_tmp233 = simd_andc(r800_fff_tmp56, tmp5);
                  r800_fff_tmp234 = simd_and(r800_fff_tmp233, r800_fff_tmp103);
                  r800_fff_tmp235 = simd_and(r800_fff_tmp56, r800_ffff_tmp2);
                  r800_fff_tmp236 = simd_or(r800_fff_tmp234, r800_fff_tmp235);
                  r800_fff_tmp237 = simd_not(r800_fff_tmp22);
                  r800_fff_tmp238 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp237), simd_andc(r800_fff_tmp209, basis_bits.bit_4));
                  r800_fff_tmp239 = simd_and(r800_fff_tmp56, r800_fff_tmp238);
                  r800_fff_tmp240 = simd_or(r800_fff_tmp236, r800_fff_tmp239);
                  r800_fff_tmp241 = simd_and(r800_fff_tmp56, r800_fff_tmp12);
                  r800_fff_tmp242 = simd_or(r800_fff_tmp240, r800_fff_tmp241);
                  r800_fff_tmp243 = simd_and(r800_fff_tmp56, r800_fff_tmp41);
                  r800_fff_tmp244 = simd_or(r800_fff_tmp242, r800_fff_tmp243);
                  r800_fff_tmp245 = simd_and(r800_fff_tmp9, r800_ffff_tmp1);
                  r800_fff_tmp246 = simd_or(r800_fff_tmp244, r800_fff_tmp245);
                  r800_fff_tmp247 = simd_and(r800_fff_tmp110, r800_fff_tmp22);
                  r800_fff_tmp248 = simd_or(r800_fff_tmp246, r800_fff_tmp247);
                  r800_fff_tmp249 = simd_andc(r800_fff_tmp1, tmp5);
                  r800_fff_tmp250 = simd_and(r800_fff_tmp249, tmp6);
                  r800_fff_tmp251 = simd_or(r800_fff_tmp248, r800_fff_tmp250);
                  r800_fff_tmp252 = simd_or(r800_fff_tmp251, byte_a5);
                  r800_fff_tmp253 = simd_or(r800_fff_tmp252, byte_a7);
                  r800_fff_tmp254 = simd_and(r800_fff_tmp10, basis_bits.bit_6);
                  r800_fff_tmp255 = simd_and(r800_fff_tmp1, r800_fff_tmp254);
                  r800_fff_tmp256 = simd_or(r800_fff_tmp253, r800_fff_tmp255);
                  r800_fff_tmp257 = simd_and(r800_fff_tmp40, tmp6);
                  r800_fff_tmp258 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp61), simd_andc(r800_fff_tmp257, basis_bits.bit_3));
                  r800_fff_tmp259 = simd_and(r800_fff_tmp27, r800_fff_tmp258);
                  r800_fff_tmp260 = simd_or(r800_fff_tmp256, r800_fff_tmp259);
                  r800_fff_tmp261 = simd_or(r800_fff_tmp260, byte_b2);
                  cc_range_e81_ebd_3 = simd_or(r800_fff_tmp261, r800_fff_tmp42);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(52), sequence_e0_ba_adv));
                  r800_fff_tmp262 = simd_and(sequence_e0_ba_adv, cc_range_e81_ebd_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp262);
                  byte_bb = simd_and(r800_fff_tmp39, r800_fff_tmp134);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  r800_fff_tmp263 = simd_andc(r800_fff_tmp224, r800_fff_tmp57);
                  r800_fff_tmp264 = simd_and(r800_fff_tmp56, r800_fff_tmp54);
                  r800_fff_tmp265 = simd_or(r800_fff_tmp263, r800_fff_tmp264);
                  r800_fff_tmp266 = simd_and(r800_fff_tmp9, r800_fff_tmp40);
                  cc_range_ec0_edc_3 = simd_or(r800_fff_tmp265, r800_fff_tmp266);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(53), sequence_e0_bb_adv));
                  r800_fff_tmp267 = simd_and(sequence_e0_bb_adv, cc_range_ec0_edc_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp267);
                  byte_bc = simd_and(r800_fff_tmp39, r800_fff_tmp137);
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  byte_80 = simd_andc(r800_fff_tmp56, tmp7);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(54), sequence_e0_bc_adv));
                  r800_fff_tmp268 = simd_and(sequence_e0_bc_adv, byte_80);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp268);
                  byte_bd = r800_fff_tmp42;
                  sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
                  r800_fff_tmp269 = simd_or(basis_bits.bit_3, r800_fff_tmp257);
                  r800_fff_tmp270 = simd_not(r800_fff_tmp269);
                  r800_fff_tmp271 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp270), simd_andc(r800_fff_tmp66, basis_bits.bit_2));
                  r800_fff_tmp272 = simd_and(r800_ffff_tmp3, r800_fff_tmp271);
                  cc_range_f40_f49_3 = simd_or(r800_fff_tmp224, r800_fff_tmp272);
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(55), sequence_e0_bd_adv));
                  r800_fff_tmp273 = simd_and(sequence_e0_bd_adv, cc_range_f40_f49_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp273);
                  byte_be = simd_and(r800_fff_tmp39, r800_fff_tmp82);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  r800_fff_tmp274 = simd_and(r800_fff_tmp56, basis_bits.bit_4);
                  byte_range_88_8c = simd_andc(r800_fff_tmp274, r800_fff_tmp57);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(56), sequence_e0_be_adv));
                  r800_fff_tmp275 = simd_and(sequence_e0_be_adv, byte_range_88_8c);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r800_fff_tmp275);
                }
                else {
                  carryQ.CarryDequeueEnqueue(26, 31);
                }
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp5);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(57, 46))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp1);
                  byte_80 = simd_andc(r1000_1fff_tmp2, tmp7);
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(57), r1000_1fff_tmp3));
                  sequence_e1_80 = simd_and(r1000_1fff_tmp3, byte_80);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_or(basis_bits.bit_3, tmp3);
                  r1000_1fff_tmp5 = simd_and(basis_bits.bit_2, r1000_1fff_tmp4);
                  r1000_1fff_tmp6 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp5);
                  r1000_1fff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp8 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp7);
                  r1000_1fff_tmp9 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp10 = simd_and(r1000_1fff_tmp9, tmp1);
                  r1000_1fff_tmp11 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp10);
                  cc_range_1000_103f_3 = simd_or(r1000_1fff_tmp6, r1000_1fff_tmp11);
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(58), sequence_e1_80_adv));
                  r1000_1fff_tmp12 = simd_and(sequence_e1_80_adv, cc_range_1000_103f_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r1000_1fff_tmp12);
                  byte_81 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp2);
                  sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
                  r1000_1fff_tmp13 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp14 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp13);
                  r1000_1fff_tmp15 = simd_andc(r1000_1fff_tmp14, basis_bits.bit_4);
                  r1000_1fff_tmp16 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp17 = simd_andc(r1000_1fff_tmp15, r1000_1fff_tmp16);
                  r1000_1fff_tmp18 = simd_and(r1000_1fff_tmp14, basis_bits.bit_4);
                  r1000_1fff_tmp19 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp20 = simd_and(r1000_1fff_tmp18, r1000_1fff_tmp19);
                  r1000_1fff_tmp21 = simd_or(r1000_1fff_tmp17, r1000_1fff_tmp20);
                  r1000_1fff_tmp22 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r1000_1fff_tmp23 = simd_and(r1000_1fff_tmp22, r800_1fff_tmp2);
                  r1000_1fff_tmp24 = simd_or(r1000_1fff_tmp21, r1000_1fff_tmp23);
                  r1000_1fff_tmp25 = simd_and(r1000_1fff_tmp22, r800_ffff_tmp1);
                  r1000_1fff_tmp26 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp27 = simd_and(r1000_1fff_tmp25, r1000_1fff_tmp26);
                  r1000_1fff_tmp28 = simd_or(r1000_1fff_tmp24, r1000_1fff_tmp27);
                  r1000_1fff_tmp29 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r1000_1fff_tmp30 = simd_not(tmp7);
                  r1000_1fff_tmp31 = simd_and(r1000_1fff_tmp9, basis_bits.bit_6);
                  r1000_1fff_tmp32 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp30), simd_andc(r1000_1fff_tmp31, basis_bits.bit_3));
                  r1000_1fff_tmp33 = simd_and(r1000_1fff_tmp29, r1000_1fff_tmp32);
                  r1000_1fff_tmp34 = simd_or(r1000_1fff_tmp28, r1000_1fff_tmp33);
                  r1000_1fff_tmp35 = simd_and(basis_bits.bit_5, tmp6);
                  r1000_1fff_tmp36 = simd_or(basis_bits.bit_4, r1000_1fff_tmp35);
                  r1000_1fff_tmp37 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp36);
                  cc_range_1050_1075_3 = simd_or(r1000_1fff_tmp34, r1000_1fff_tmp37);
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(59), sequence_e1_81_adv));
                  r1000_1fff_tmp38 = simd_and(sequence_e1_81_adv, cc_range_1050_1075_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r1000_1fff_tmp38);
                  r1000_1fff_tmp39 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp40 = simd_andc(r1000_1fff_tmp39, tmp5);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp40);
                  sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
                  r1000_1fff_tmp41 = simd_and(r1000_1fff_tmp9, r1000_1fff_tmp39);
                  r1000_1fff_tmp42 = simd_andc(r800_4dff_tmp1, r1000_1fff_tmp41);
                  r1000_1fff_tmp43 = simd_andc(r1000_1fff_tmp2, r1000_1fff_tmp42);
                  cc_range_1080_10a0_3 = simd_or(r1000_1fff_tmp43, r1000_1fff_tmp29);
                  carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(60), sequence_e1_82_adv));
                  r1000_1fff_tmp44 = simd_and(sequence_e1_82_adv, cc_range_1080_10a0_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r1000_1fff_tmp44);
                  r1000_1fff_tmp45 = simd_andc(tmp1, tmp5);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp45);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  r1000_1fff_tmp46 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp47 = simd_andc(r1000_1fff_tmp46, r1000_1fff_tmp16);
                  r1000_1fff_tmp48 = simd_and(r800_ffff_tmp1, tmp1);
                  r1000_1fff_tmp49 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp48);
                  r1000_1fff_tmp50 = simd_or(r1000_1fff_tmp47, r1000_1fff_tmp49);
                  r1000_1fff_tmp51 = simd_and(r1000_1fff_tmp9, r800_1fff_tmp1);
                  r1000_1fff_tmp52 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp51);
                  r1000_1fff_tmp53 = simd_or(r1000_1fff_tmp50, r1000_1fff_tmp52);
                  r1000_1fff_tmp54 = simd_and(basis_bits.bit_3, tmp3);
                  r1000_1fff_tmp55 = simd_not(r1000_1fff_tmp54);
                  r1000_1fff_tmp56 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp55), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  r1000_1fff_tmp57 = simd_and(r800_ffff_tmp3, r1000_1fff_tmp56);
                  r1000_1fff_tmp58 = simd_or(r1000_1fff_tmp53, r1000_1fff_tmp57);
                  r1000_1fff_tmp59 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp9);
                  cc_range_10c0_10fc_3 = simd_or(r1000_1fff_tmp58, r1000_1fff_tmp59);
                  carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(61), sequence_e1_83_adv));
                  r1000_1fff_tmp60 = simd_and(sequence_e1_83_adv, cc_range_10c0_10fc_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r1000_1fff_tmp60);
                  r1000_1fff_tmp61 = simd_or(basis_bits.bit_5, tmp6);
                  r1000_1fff_tmp62 = simd_not(r1000_1fff_tmp61);
                  r1000_1fff_tmp63 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp62), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_84_88 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp63);
                  byte_e1_byte_range_84_88 = simd_and(byte_e1_adv, byte_range_84_88);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[62] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_84_88, carryQ.get_carry_in(62), r1000_1fff_tmp64));
                  byte_e1_byte_range_84_88_sfx = simd_and(r1000_1fff_tmp64, byte_range_80_bf);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, byte_e1_byte_range_84_88_sfx);
                  r1000_1fff_tmp65 = simd_andc(byte_range_80_bf, r1000_1fff_tmp1);
                  r1000_1fff_tmp66 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp67 = simd_and(r1000_1fff_tmp66, r800_1fff_tmp1);
                  byte_89 = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp67);
                  sequence_e1_89 = simd_and(byte_e1_adv, byte_89);
                  r1000_1fff_tmp68 = simd_and(basis_bits.bit_4, r1000_1fff_tmp61);
                  byte_range_80_88 = simd_andc(r1000_1fff_tmp65, r1000_1fff_tmp68);
                  carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e1_89, carryQ.get_carry_in(63), r1000_1fff_tmp69));
                  sequence_e1_89_byte_range_80_88 = simd_and(r1000_1fff_tmp69, byte_range_80_88);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_89_byte_range_80_88);
                  r1000_1fff_tmp70 = simd_and(r1000_1fff_tmp66, r1000_1fff_tmp39);
                  byte_8a = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp70);
                  sequence_e1_8a = simd_and(byte_e1_adv, byte_8a);
                  carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e1_8a, carryQ.get_carry_in(64), r1000_1fff_tmp71));
                  sequence_e1_8a_byte_range_80_88 = simd_and(r1000_1fff_tmp71, byte_range_80_88);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_8a_byte_range_80_88);
                  r1000_1fff_tmp72 = simd_and(r1000_1fff_tmp66, tmp1);
                  byte_8b = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp72);
                  sequence_e1_8b = simd_and(byte_e1_adv, byte_8b);
                  carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_e1_8b, carryQ.get_carry_in(65), r1000_1fff_tmp73));
                  sequence_e1_8b_80 = simd_and(r1000_1fff_tmp73, byte_80);
                  r1000_1fff_tmp74 = simd_andc(r1000_1fff_tmp9, tmp6);
                  byte_8c = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp74);
                  sequence_e1_8c = simd_and(byte_e1_adv, byte_8c);
                  r1000_1fff_tmp75 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r1000_1fff_tmp76 = simd_and(basis_bits.bit_3, tmp7);
                  byte_range_80_90 = simd_andc(r1000_1fff_tmp75, r1000_1fff_tmp76);
                  carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_e1_8c, carryQ.get_carry_in(66), r1000_1fff_tmp77));
                  sequence_e1_8c_byte_range_80_90 = simd_and(r1000_1fff_tmp77, byte_range_80_90);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_8c_byte_range_80_90);
                  byte_8d = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp51);
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  byte_range_80_9a = simd_andc(r1000_1fff_tmp75, r1000_1fff_tmp54);
                  carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(67), r1000_1fff_tmp78));
                  sequence_e1_8d_byte_range_80_9a = simd_and(r1000_1fff_tmp78, byte_range_80_9a);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_8d_byte_range_80_9a);
                  byte_8e = simd_and(r1000_1fff_tmp65, r1000_1fff_tmp41);
                  sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
                  byte_range_80_8f = r1000_1fff_tmp65;
                  carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(68), r1000_1fff_tmp79));
                  sequence_e1_8e_byte_range_80_8f = simd_and(r1000_1fff_tmp79, byte_range_80_8f);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_8e_byte_range_80_8f);
                  byte_8f = simd_and(byte_range_80_8f, r1000_1fff_tmp10);
                  sequence_e1_8f = simd_and(byte_e1_adv, byte_8f);
                  r1000_1fff_tmp80 = simd_and(basis_bits.bit_3, r1000_1fff_tmp36);
                  r1000_1fff_tmp81 = simd_and(basis_bits.bit_2, r1000_1fff_tmp80);
                  byte_range_80_b4 = simd_andc(byte_range_80_bf, r1000_1fff_tmp81);
                  carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e1_8f, carryQ.get_carry_in(69), r1000_1fff_tmp82));
                  sequence_e1_8f_byte_range_80_b4 = simd_and(r1000_1fff_tmp82, byte_range_80_b4);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_8f_byte_range_80_b4);
                  r1000_1fff_tmp83 = simd_and(byte_range_80_bf, r1000_1fff_tmp13);
                  byte_90 = simd_andc(r1000_1fff_tmp83, tmp7);
                  sequence_e1_90 = simd_and(byte_e1_adv, byte_90);
                  r1000_1fff_tmp84 = simd_or(basis_bits.bit_3, tmp7);
                  r1000_1fff_tmp85 = simd_or(basis_bits.bit_2, r1000_1fff_tmp84);
                  byte_range_81_bf = simd_and(byte_range_80_bf, r1000_1fff_tmp85);
                  carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e1_90, carryQ.get_carry_in(70), r1000_1fff_tmp86));
                  sequence_e1_90_byte_range_81_bf = simd_and(r1000_1fff_tmp86, byte_range_81_bf);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_90_byte_range_81_bf);
                  byte_91 = simd_and(r1000_1fff_tmp83, r800_1fff_tmp2);
                  sequence_e1_91 = simd_and(byte_e1_adv, byte_91);
                  carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e1_91, carryQ.get_carry_in(71), r1000_1fff_tmp87));
                  sequence_e1_91_byte_range_80_bf = simd_and(r1000_1fff_tmp87, byte_range_80_bf);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_91_byte_range_80_bf);
                  byte_99 = simd_and(r1000_1fff_tmp83, r1000_1fff_tmp67);
                  sequence_e1_99 = simd_and(byte_e1_adv, byte_99);
                  r1000_1fff_tmp88 = simd_and(r1000_1fff_tmp9, tmp6);
                  r1000_1fff_tmp89 = simd_or(basis_bits.bit_3, r1000_1fff_tmp88);
                  r1000_1fff_tmp90 = simd_and(basis_bits.bit_2, r1000_1fff_tmp89);
                  byte_range_80_ac = simd_andc(byte_range_80_bf, r1000_1fff_tmp90);
                  carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e1_99, carryQ.get_carry_in(72), r1000_1fff_tmp91));
                  sequence_e1_99_byte_range_80_ac = simd_and(r1000_1fff_tmp91, byte_range_80_ac);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_99_byte_range_80_ac);
                  byte_9a = simd_and(r1000_1fff_tmp83, r1000_1fff_tmp70);
                  sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
                  byte_range_81_9a = simd_and(r1000_1fff_tmp75, tmp8);
                  carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(73), r1000_1fff_tmp92));
                  sequence_e1_9a_byte_range_81_9a = simd_and(r1000_1fff_tmp92, byte_range_81_9a);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_9a_byte_range_81_9a);
                  byte_9b = simd_and(r1000_1fff_tmp83, r1000_1fff_tmp72);
                  sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
                  byte_range_80_aa = simd_andc(byte_range_80_bf, r1000_1fff_tmp5);
                  carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(74), r1000_1fff_tmp93));
                  sequence_e1_9b_byte_range_80_aa = simd_and(r1000_1fff_tmp93, byte_range_80_aa);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_9b_byte_range_80_aa);
                  byte_9c = simd_and(r1000_1fff_tmp83, r1000_1fff_tmp74);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  r1000_1fff_tmp94 = simd_and(basis_bits.bit_4, r1000_1fff_tmp35);
                  byte_range_80_8c = simd_andc(byte_range_80_8f, r1000_1fff_tmp94);
                  carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(75), r1000_1fff_tmp95));
                  sequence_e1_9c_byte_range_80_8c = simd_and(r1000_1fff_tmp95, byte_range_80_8c);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_9c_byte_range_80_8c);
                  byte_9d = simd_and(r1000_1fff_tmp83, r1000_1fff_tmp51);
                  sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
                  r1000_1fff_tmp96 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  byte_range_80_91 = simd_andc(r1000_1fff_tmp75, r1000_1fff_tmp96);
                  carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(76), r1000_1fff_tmp97));
                  sequence_e1_9d_byte_range_80_91 = simd_and(r1000_1fff_tmp97, byte_range_80_91);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_9d_byte_range_80_91);
                  byte_9e = simd_and(r1000_1fff_tmp83, r1000_1fff_tmp41);
                  sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
                  r1000_1fff_tmp98 = simd_and(basis_bits.bit_3, tmp5);
                  r1000_1fff_tmp99 = simd_and(basis_bits.bit_2, r1000_1fff_tmp98);
                  byte_range_80_b3 = simd_andc(byte_range_80_bf, r1000_1fff_tmp99);
                  carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(77), r1000_1fff_tmp100));
                  sequence_e1_9e_byte_range_80_b3 = simd_and(r1000_1fff_tmp100, byte_range_80_b3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_9e_byte_range_80_b3);
                  byte_9f = simd_and(r1000_1fff_tmp83, r1000_1fff_tmp10);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  byte_97 = simd_and(r1000_1fff_tmp83, r1000_1fff_tmp48);
                  carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(78), r1000_1fff_tmp101));
                  sequence_e1_9f_97 = simd_and(r1000_1fff_tmp101, byte_97);
                  r1000_1fff_tmp102 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r1000_1fff_tmp102, tmp7);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(79), r1000_1fff_tmp103));
                  sequence_e1_a0_byte_range_a0_bf = simd_and(r1000_1fff_tmp103, byte_range_a0_bf);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_a0_byte_range_a0_bf);
                  byte_a1 = simd_and(r1000_1fff_tmp102, r800_1fff_tmp2);
                  sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
                  carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(80), r1000_1fff_tmp104));
                  sequence_e1_a1_byte_range_80_b7 = simd_and(r1000_1fff_tmp104, byte_range_80_b7);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_a1_byte_range_80_b7);
                  byte_a2 = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp40);
                  sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
                  r1000_1fff_tmp105 = simd_or(basis_bits.bit_3, r1000_1fff_tmp68);
                  r1000_1fff_tmp106 = simd_and(basis_bits.bit_2, r1000_1fff_tmp105);
                  byte_range_80_a8 = simd_andc(byte_range_80_bf, r1000_1fff_tmp106);
                  carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(81), r1000_1fff_tmp107));
                  sequence_e1_a2_byte_range_80_a8 = simd_and(r1000_1fff_tmp107, byte_range_80_a8);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_a2_byte_range_80_a8);
                  byte_a3 = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp45);
                  sequence_e1_a3 = simd_and(byte_e1_adv, byte_a3);
                  r1000_1fff_tmp108 = simd_or(basis_bits.bit_4, r1000_1fff_tmp16);
                  r1000_1fff_tmp109 = simd_and(basis_bits.bit_3, r1000_1fff_tmp108);
                  r1000_1fff_tmp110 = simd_and(basis_bits.bit_2, r1000_1fff_tmp109);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r1000_1fff_tmp110);
                  carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e1_a3, carryQ.get_carry_in(82), r1000_1fff_tmp111));
                  sequence_e1_a3_byte_range_80_b5 = simd_and(r1000_1fff_tmp111, byte_range_80_b5);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_a3_byte_range_80_b5);
                  byte_a4 = simd_and(r1000_1fff_tmp102, r800_ffff_tmp2);
                  sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
                  r1000_1fff_tmp112 = simd_and(basis_bits.bit_3, r1000_1fff_tmp10);
                  byte_range_80_9e = simd_andc(r1000_1fff_tmp75, r1000_1fff_tmp112);
                  carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(83), r1000_1fff_tmp113));
                  sequence_e1_a4_byte_range_80_9e = simd_and(r1000_1fff_tmp113, byte_range_80_9e);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_a4_byte_range_80_9e);
                  r1000_1fff_tmp114 = simd_and(r800_ffff_tmp1, r800_1fff_tmp1);
                  byte_a5 = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp114);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  r1000_1fff_tmp115 = simd_or(basis_bits.bit_3, r1000_1fff_tmp31);
                  r1000_1fff_tmp116 = simd_not(r1000_1fff_tmp115);
                  r1000_1fff_tmp117 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp116), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  byte_range_90_ad = simd_and(byte_range_80_bf, r1000_1fff_tmp117);
                  carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(84), r1000_1fff_tmp118));
                  sequence_e1_a5_byte_range_90_ad = simd_and(r1000_1fff_tmp118, byte_range_90_ad);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_a5_byte_range_90_ad);
                  r1000_1fff_tmp119 = simd_and(r800_ffff_tmp1, r1000_1fff_tmp39);
                  byte_a6 = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp119);
                  sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
                  r1000_1fff_tmp120 = simd_or(basis_bits.bit_3, r1000_1fff_tmp9);
                  r1000_1fff_tmp121 = simd_and(basis_bits.bit_2, r1000_1fff_tmp120);
                  byte_range_80_ab = simd_andc(byte_range_80_bf, r1000_1fff_tmp121);
                  carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(85), r1000_1fff_tmp122));
                  sequence_e1_a6_byte_range_80_ab = simd_and(r1000_1fff_tmp122, byte_range_80_ab);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_a6_byte_range_80_ab);
                  byte_a7 = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp48);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  r1000_1fff_tmp123 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_range_81_87 = simd_and(r1000_1fff_tmp123, r1000_1fff_tmp61);
                  carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(86), r1000_1fff_tmp124));
                  sequence_e1_a7_byte_range_81_87 = simd_and(r1000_1fff_tmp124, byte_range_81_87);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_a7_byte_range_81_87);
                  r1000_1fff_tmp125 = simd_andc(r1000_1fff_tmp66, tmp6);
                  byte_a8 = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp125);
                  sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
                  r1000_1fff_tmp126 = simd_and(basis_bits.bit_5, tmp1);
                  r1000_1fff_tmp127 = simd_or(basis_bits.bit_4, r1000_1fff_tmp126);
                  r1000_1fff_tmp128 = simd_and(basis_bits.bit_3, r1000_1fff_tmp127);
                  byte_range_80_96 = simd_andc(r1000_1fff_tmp75, r1000_1fff_tmp128);
                  carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(87), r1000_1fff_tmp129));
                  sequence_e1_a8_byte_range_80_96 = simd_and(r1000_1fff_tmp129, byte_range_80_96);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_a8_byte_range_80_96);
                  byte_a9 = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp67);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  byte_range_80_94 = simd_andc(r1000_1fff_tmp75, r1000_1fff_tmp80);
                  carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(88), r1000_1fff_tmp130));
                  sequence_e1_a9_byte_range_80_94 = simd_and(r1000_1fff_tmp130, byte_range_80_94);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_a9_byte_range_80_94);
                  byte_aa = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp70);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(89), r1000_1fff_tmp131));
                  sequence_e1_aa_a7 = simd_and(r1000_1fff_tmp131, byte_a7);
                  byte_ac = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp74);
                  sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
                  r1000_1fff_tmp132 = simd_not(r1000_1fff_tmp98);
                  r1000_1fff_tmp133 = simd_or(basis_bits.bit_3, r1000_1fff_tmp36);
                  r1000_1fff_tmp134 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp132), simd_andc(r1000_1fff_tmp133, basis_bits.bit_2));
                  byte_range_85_b3 = simd_and(byte_range_80_bf, r1000_1fff_tmp134);
                  carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(90), r1000_1fff_tmp135));
                  sequence_e1_ac_byte_range_85_b3 = simd_and(r1000_1fff_tmp135, byte_range_85_b3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_ac_byte_range_85_b3);
                  byte_ad = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp51);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  r1000_1fff_tmp136 = simd_not(basis_bits.bit_5);
                  r1000_1fff_tmp137 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp136), simd_andc(r1000_1fff_tmp35, basis_bits.bit_4));
                  byte_range_85_8b = simd_and(byte_range_80_8f, r1000_1fff_tmp137);
                  carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(91), r1000_1fff_tmp138));
                  sequence_e1_ad_byte_range_85_8b = simd_and(r1000_1fff_tmp138, byte_range_85_8b);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_ad_byte_range_85_8b);
                  byte_ae = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp41);
                  sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
                  r1000_1fff_tmp139 = simd_not(r1000_1fff_tmp84);
                  r1000_1fff_tmp140 = simd_or(tmp5, tmp1);
                  r1000_1fff_tmp141 = simd_or(basis_bits.bit_3, r1000_1fff_tmp140);
                  r1000_1fff_tmp142 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp139), simd_andc(r1000_1fff_tmp141, basis_bits.bit_2));
                  byte_range_83_a0 = simd_and(byte_range_80_bf, r1000_1fff_tmp142);
                  carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(92), r1000_1fff_tmp143));
                  sequence_e1_ae_byte_range_83_a0 = simd_and(r1000_1fff_tmp143, byte_range_83_a0);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_ae_byte_range_83_a0);
                  byte_af = simd_and(r1000_1fff_tmp102, r1000_1fff_tmp10);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  r1000_1fff_tmp144 = simd_or(basis_bits.bit_3, r1000_1fff_tmp108);
                  r1000_1fff_tmp145 = simd_and(basis_bits.bit_2, r1000_1fff_tmp144);
                  byte_range_80_a5 = simd_andc(byte_range_80_bf, r1000_1fff_tmp145);
                  carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(93), r1000_1fff_tmp146));
                  sequence_e1_af_byte_range_80_a5 = simd_and(r1000_1fff_tmp146, byte_range_80_a5);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_af_byte_range_80_a5);
                  r1000_1fff_tmp147 = simd_and(byte_range_80_bf, r1000_1fff_tmp7);
                  byte_b0 = simd_andc(r1000_1fff_tmp147, tmp7);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  r1000_1fff_tmp148 = simd_or(basis_bits.bit_3, tmp5);
                  r1000_1fff_tmp149 = simd_and(basis_bits.bit_2, r1000_1fff_tmp148);
                  byte_range_80_a3 = simd_andc(byte_range_80_bf, r1000_1fff_tmp149);
                  carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(94), r1000_1fff_tmp150));
                  sequence_e1_b0_byte_range_80_a3 = simd_and(r1000_1fff_tmp150, byte_range_80_a3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_b0_byte_range_80_a3);
                  byte_b1 = simd_and(r1000_1fff_tmp147, r800_1fff_tmp2);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  r1000_1fff_tmp151 = simd_and(byte_range_80_8f, r1000_1fff_tmp9);
                  byte_range_8d_8f = simd_and(r1000_1fff_tmp151, tmp6);
                  carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(95), r1000_1fff_tmp152));
                  sequence_e1_b1_byte_range_8d_8f = simd_and(r1000_1fff_tmp152, byte_range_8d_8f);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_b1_byte_range_8d_8f);
                  byte_b3 = simd_and(r1000_1fff_tmp147, r1000_1fff_tmp45);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  r1000_1fff_tmp153 = simd_and(r1000_1fff_tmp102, basis_bits.bit_4);
                  r1000_1fff_tmp154 = simd_xor(basis_bits.bit_5, tmp6);
                  byte_range_a9_ac = simd_and(r1000_1fff_tmp153, r1000_1fff_tmp154);
                  carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(96), r1000_1fff_tmp155));
                  sequence_e1_b3_byte_range_a9_ac = simd_and(r1000_1fff_tmp155, byte_range_a9_ac);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_b3_byte_range_a9_ac);
                  byte_b4 = simd_and(r1000_1fff_tmp147, r800_ffff_tmp2);
                  sequence_e1_b4 = simd_and(byte_e1_adv, byte_b4);
                  carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_e1_b4, carryQ.get_carry_in(97), r1000_1fff_tmp156));
                  sequence_e1_b4_byte_range_80_bf = simd_and(r1000_1fff_tmp156, byte_range_80_bf);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_b4_byte_range_80_bf);
                  byte_b8 = simd_and(r1000_1fff_tmp147, r1000_1fff_tmp125);
                  sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
                  carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(98), r1000_1fff_tmp157));
                  sequence_e1_b8_byte_range_80_bf = simd_and(r1000_1fff_tmp157, byte_range_80_bf);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_b8_byte_range_80_bf);
                  byte_bc = simd_and(r1000_1fff_tmp147, r1000_1fff_tmp74);
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  byte_range_80_95 = simd_andc(r1000_1fff_tmp75, r1000_1fff_tmp109);
                  carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(99), r1000_1fff_tmp158));
                  sequence_e1_bc_byte_range_80_95 = simd_and(r1000_1fff_tmp158, byte_range_80_95);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_bc_byte_range_80_95);
                  byte_bd = simd_and(r1000_1fff_tmp147, r1000_1fff_tmp51);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  byte_range_80_85 = simd_andc(r1000_1fff_tmp123, r1000_1fff_tmp16);
                  carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(100), r1000_1fff_tmp159));
                  sequence_e1_bd_byte_range_80_85 = simd_and(r1000_1fff_tmp159, byte_range_80_85);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_bd_byte_range_80_85);
                  byte_be = simd_and(r1000_1fff_tmp147, r1000_1fff_tmp41);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(101), r1000_1fff_tmp160));
                  sequence_e1_be_byte_range_80_b4 = simd_and(r1000_1fff_tmp160, byte_range_80_b4);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_be_byte_range_80_b4);
                  byte_bf = simd_and(r1000_1fff_tmp147, r1000_1fff_tmp10);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  r1000_1fff_tmp161 = simd_not(tmp6);
                  r1000_1fff_tmp162 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp161), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_82_84 = simd_and(r1000_1fff_tmp123, r1000_1fff_tmp162);
                  carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(102), r1000_1fff_tmp163));
                  sequence_e1_bf_byte_range_82_84 = simd_and(r1000_1fff_tmp163, byte_range_82_84);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e1_bf_byte_range_82_84);
                }
                else {
                  carryQ.CarryDequeueEnqueue(57, 46);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(26, 77);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp5);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(103, 26))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp5);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(103, 14))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_andc(r2000_2fff_tmp3, tmp5);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[103] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(103), r2000_2fff_tmp5));
                  sequence_e2_81 = simd_and(r2000_2fff_tmp5, byte_81);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp7 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp6);
                  r2000_2fff_tmp8 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp9 = simd_and(r2000_2fff_tmp8, tmp1);
                  r2000_2fff_tmp10 = simd_or(r2000_2fff_tmp4, r2000_2fff_tmp9);
                  cc_range_2071_207f_3 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp10);
                  carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(104), sequence_e2_81_adv));
                  r2000_2fff_tmp11 = simd_and(sequence_e2_81_adv, cc_range_2071_207f_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r2000_2fff_tmp11);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp13 = simd_and(r800_ffff_tmp3, r2000_2fff_tmp12);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_5, tmp6);
                  r2000_2fff_tmp15 = simd_and(basis_bits.bit_4, r2000_2fff_tmp14);
                  byte_range_90_9c = simd_andc(r2000_2fff_tmp13, r2000_2fff_tmp15);
                  carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(105), sequence_e2_82_adv));
                  r2000_2fff_tmp16 = simd_and(sequence_e2_82_adv, byte_range_90_9c);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r2000_2fff_tmp16);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp2);
                  sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
                  r2000_2fff_tmp17 = simd_and(r800_ffff_tmp1, tmp1);
                  r2000_2fff_tmp18 = simd_or(r2000_4dff_tmp2, r2000_2fff_tmp17);
                  r2000_2fff_tmp19 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp18);
                  r2000_2fff_tmp20 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp21 = simd_not(tmp5);
                  r2000_2fff_tmp22 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp23 = simd_and(basis_bits.bit_4, r2000_2fff_tmp22);
                  r2000_2fff_tmp24 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp21), simd_andc(r2000_2fff_tmp23, basis_bits.bit_3));
                  r2000_2fff_tmp25 = simd_and(r2000_2fff_tmp20, r2000_2fff_tmp24);
                  r2000_2fff_tmp26 = simd_or(r2000_2fff_tmp19, r2000_2fff_tmp25);
                  r2000_2fff_tmp27 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp3);
                  r2000_2fff_tmp28 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp27);
                  r2000_2fff_tmp29 = simd_or(r2000_2fff_tmp26, r2000_2fff_tmp28);
                  r2000_2fff_tmp30 = simd_and(r2000_2fff_tmp13, basis_bits.bit_4);
                  r2000_2fff_tmp31 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp32 = simd_andc(r2000_2fff_tmp30, r2000_2fff_tmp31);
                  r2000_2fff_tmp33 = simd_or(r2000_2fff_tmp29, r2000_2fff_tmp32);
                  r2000_2fff_tmp34 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r2000_2fff_tmp35 = simd_and(r2000_2fff_tmp34, r800_ffff_tmp2);
                  r2000_2fff_tmp36 = simd_or(r2000_2fff_tmp33, r2000_2fff_tmp35);
                  r2000_2fff_tmp37 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  r2000_2fff_tmp38 = simd_and(r2000_2fff_tmp34, r2000_2fff_tmp37);
                  r2000_2fff_tmp39 = simd_or(r2000_2fff_tmp36, r2000_2fff_tmp38);
                  r2000_2fff_tmp40 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp41 = simd_andc(r2000_2fff_tmp40, tmp6);
                  r2000_2fff_tmp42 = simd_and(r2000_2fff_tmp34, r2000_2fff_tmp41);
                  r2000_2fff_tmp43 = simd_or(r2000_2fff_tmp39, r2000_2fff_tmp42);
                  r2000_2fff_tmp44 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp45 = simd_xor(basis_bits.bit_3, r2000_2fff_tmp23);
                  r2000_2fff_tmp46 = simd_and(r2000_2fff_tmp44, r2000_2fff_tmp45);
                  r2000_2fff_tmp47 = simd_or(r2000_2fff_tmp43, r2000_2fff_tmp46);
                  r2000_2fff_tmp48 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp8);
                  cc_range_2102_213c_3 = simd_or(r2000_2fff_tmp47, r2000_2fff_tmp48);
                  carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(106), sequence_e2_84_adv));
                  r2000_2fff_tmp49 = simd_and(sequence_e2_84_adv, cc_range_2102_213c_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r2000_2fff_tmp49);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp27);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp50 = simd_not(r2000_2fff_tmp22);
                  r2000_2fff_tmp51 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp50), simd_andc(r2000_2fff_tmp14, basis_bits.bit_4));
                  r2000_2fff_tmp52 = simd_and(r2000_2fff_tmp8, r2000_4dff_tmp1);
                  r2000_2fff_tmp53 = simd_or(r2000_2fff_tmp51, r2000_2fff_tmp52);
                  r2000_2fff_tmp54 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp53);
                  cc_range_2145_2160_3 = simd_or(r2000_2fff_tmp54, r2000_2fff_tmp44);
                  carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(107), sequence_e2_85_adv));
                  r2000_2fff_tmp55 = simd_and(sequence_e2_85_adv, cc_range_2145_2160_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r2000_2fff_tmp55);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp37);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp56 = simd_or(basis_bits.bit_5, tmp6);
                  r2000_2fff_tmp57 = simd_and(basis_bits.bit_4, r2000_2fff_tmp56);
                  byte_range_80_88 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp57);
                  carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(108), sequence_e2_86_adv));
                  r2000_2fff_tmp58 = simd_and(sequence_e2_86_adv, byte_range_80_88);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r2000_2fff_tmp58);
                  byte_b0 = simd_andc(r2000_2fff_tmp7, tmp7);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  r2000_2fff_tmp59 = simd_or(basis_bits.bit_3, r2000_2fff_tmp9);
                  r2000_2fff_tmp60 = simd_and(basis_bits.bit_2, r2000_2fff_tmp59);
                  r2000_2fff_tmp61 = simd_andc(r2000_2fff_tmp60, r2000_2fff_tmp6);
                  cc_range_2c00_2c30_3 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp61);
                  carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(109), sequence_e2_b0_adv));
                  r2000_2fff_tmp62 = simd_and(sequence_e2_b0_adv, cc_range_2c00_2c30_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r2000_2fff_tmp62);
                  byte_b1 = simd_and(r2000_2fff_tmp7, r2000_2fff_tmp4);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp63 = simd_and(basis_bits.bit_3, r2000_2fff_tmp9);
                  r2000_2fff_tmp64 = simd_andc(r2000_2fff_tmp20, r2000_2fff_tmp63);
                  cc_range_2c40_2c60_3 = simd_or(r2000_2fff_tmp64, r2000_2fff_tmp44);
                  carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(110), sequence_e2_b1_adv));
                  r2000_2fff_tmp65 = simd_and(sequence_e2_b1_adv, cc_range_2c40_2c60_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r2000_2fff_tmp65);
                  byte_b2 = simd_and(r2000_2fff_tmp7, r2000_4dff_tmp2);
                  sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(111), sequence_e2_b2_adv));
                  r2000_2fff_tmp66 = simd_and(sequence_e2_b2_adv, byte_range_80_bf);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r2000_2fff_tmp66);
                  r2000_2fff_tmp67 = simd_and(byte_range_80_bf, r2000_2fff_tmp6);
                  r2000_2fff_tmp68 = simd_andc(tmp1, tmp5);
                  byte_b3 = simd_and(r2000_2fff_tmp67, r2000_2fff_tmp68);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp69 = simd_or(basis_bits.bit_4, r2000_2fff_tmp14);
                  r2000_2fff_tmp70 = simd_or(basis_bits.bit_3, r2000_2fff_tmp69);
                  r2000_2fff_tmp71 = simd_and(basis_bits.bit_2, r2000_2fff_tmp70);
                  r2000_2fff_tmp72 = simd_andc(byte_range_80_bf, r2000_2fff_tmp71);
                  r2000_2fff_tmp73 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r2000_2fff_tmp74 = simd_and(r2000_2fff_tmp73, basis_bits.bit_4);
                  r2000_2fff_tmp75 = simd_xor(basis_bits.bit_5, tmp1);
                  r2000_2fff_tmp76 = simd_and(r2000_2fff_tmp74, r2000_2fff_tmp75);
                  r2000_2fff_tmp77 = simd_or(r2000_2fff_tmp72, r2000_2fff_tmp76);
                  r2000_2fff_tmp78 = simd_and(r2000_2fff_tmp67, r800_4dff_tmp2);
                  cc_range_2cc0_2cf2_3 = simd_or(r2000_2fff_tmp77, r2000_2fff_tmp78);
                  carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(112), sequence_e2_b3_adv));
                  r2000_2fff_tmp79 = simd_and(sequence_e2_b3_adv, cc_range_2cc0_2cf2_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r2000_2fff_tmp79);
                  byte_b4 = simd_and(r2000_2fff_tmp67, r800_ffff_tmp2);
                  sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
                  r2000_2fff_tmp80 = simd_or(basis_bits.bit_4, r2000_2fff_tmp31);
                  r2000_2fff_tmp81 = simd_or(basis_bits.bit_3, r2000_2fff_tmp80);
                  r2000_2fff_tmp82 = simd_and(basis_bits.bit_2, r2000_2fff_tmp81);
                  r2000_2fff_tmp83 = simd_andc(byte_range_80_bf, r2000_2fff_tmp82);
                  r2000_2fff_tmp84 = simd_and(r2000_2fff_tmp73, r2000_2fff_tmp17);
                  r2000_2fff_tmp85 = simd_or(r2000_2fff_tmp83, r2000_2fff_tmp84);
                  r2000_2fff_tmp86 = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp3);
                  r2000_2fff_tmp87 = simd_and(r2000_2fff_tmp73, r2000_2fff_tmp86);
                  r2000_2fff_tmp88 = simd_or(r2000_2fff_tmp85, r2000_2fff_tmp87);
                  cc_range_2d00_2d30_3 = simd_or(r2000_2fff_tmp88, r2000_2fff_tmp67);
                  carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(113), sequence_e2_b4_adv));
                  r2000_2fff_tmp89 = simd_and(sequence_e2_b4_adv, cc_range_2d00_2d30_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r2000_2fff_tmp89);
                  byte_b5 = simd_and(r2000_2fff_tmp67, r2000_2fff_tmp27);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  r2000_2fff_tmp90 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
                  r2000_2fff_tmp91 = simd_and(basis_bits.bit_2, r2000_2fff_tmp90);
                  r2000_2fff_tmp92 = simd_andc(byte_range_80_bf, r2000_2fff_tmp91);
                  r2000_2fff_tmp93 = simd_and(r2000_2fff_tmp73, r2000_2fff_tmp9);
                  cc_range_2d40_2d6f_3 = simd_or(r2000_2fff_tmp92, r2000_2fff_tmp93);
                  carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(114), sequence_e2_b5_adv));
                  r2000_2fff_tmp94 = simd_and(sequence_e2_b5_adv, cc_range_2d40_2d6f_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r2000_2fff_tmp94);
                  byte_b6 = simd_and(r2000_2fff_tmp67, r2000_2fff_tmp37);
                  sequence_e2_b6 = simd_and(byte_e2_adv, byte_b6);
                  r2000_2fff_tmp95 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r2000_2fff_tmp96 = simd_and(basis_bits.bit_5, tmp1);
                  r2000_2fff_tmp97 = simd_or(basis_bits.bit_4, r2000_2fff_tmp96);
                  r2000_2fff_tmp98 = simd_and(basis_bits.bit_3, r2000_2fff_tmp97);
                  r2000_2fff_tmp99 = simd_andc(r2000_2fff_tmp95, r2000_2fff_tmp98);
                  r2000_2fff_tmp100 = simd_andc(r2000_2fff_tmp73, basis_bits.bit_4);
                  r2000_2fff_tmp101 = simd_andc(r2000_2fff_tmp100, r2000_2fff_tmp96);
                  r2000_2fff_tmp102 = simd_or(r2000_2fff_tmp99, r2000_2fff_tmp101);
                  r2000_2fff_tmp103 = simd_andc(r2000_2fff_tmp74, r2000_2fff_tmp96);
                  r2000_2fff_tmp104 = simd_or(r2000_2fff_tmp102, r2000_2fff_tmp103);
                  r2000_2fff_tmp105 = simd_andc(r2000_2fff_tmp67, basis_bits.bit_4);
                  r2000_2fff_tmp106 = simd_andc(r2000_2fff_tmp105, r2000_2fff_tmp96);
                  r2000_2fff_tmp107 = simd_or(r2000_2fff_tmp104, r2000_2fff_tmp106);
                  r2000_2fff_tmp108 = simd_and(r2000_2fff_tmp67, basis_bits.bit_4);
                  r2000_2fff_tmp109 = simd_andc(r2000_2fff_tmp108, r2000_2fff_tmp96);
                  cc_range_2d80_2db8_3 = simd_or(r2000_2fff_tmp107, r2000_2fff_tmp109);
                  carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_e2_b6, carryQ.get_carry_in(115), sequence_e2_b6_adv));
                  r2000_2fff_tmp110 = simd_and(sequence_e2_b6_adv, cc_range_2d80_2db8_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r2000_2fff_tmp110);
                  byte_b7 = simd_and(r2000_2fff_tmp67, r2000_2fff_tmp17);
                  sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
                  r2000_2fff_tmp111 = simd_andc(byte_range_80_bf, r2000_2fff_tmp1);
                  r2000_2fff_tmp112 = simd_and(byte_range_80_bf, r2000_2fff_tmp12);
                  r2000_2fff_tmp113 = simd_andc(r2000_2fff_tmp112, basis_bits.bit_4);
                  r2000_2fff_tmp114 = simd_or(r2000_2fff_tmp111, r2000_2fff_tmp113);
                  r2000_2fff_tmp115 = simd_and(r2000_2fff_tmp112, basis_bits.bit_4);
                  r2000_2fff_tmp116 = simd_or(r2000_2fff_tmp114, r2000_2fff_tmp115);
                  cc_range_2dc0_2dd8_3 = simd_andc(r2000_2fff_tmp116, r2000_2fff_tmp96);
                  carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(116), sequence_e2_b7_adv));
                  r2000_2fff_tmp117 = simd_and(sequence_e2_b7_adv, cc_range_2dc0_2dd8_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r2000_2fff_tmp117);
                }
                else {
                  carryQ.CarryDequeueEnqueue(103, 14);
                }
                r2000_4dff_tmp3 = simd_andc(tmp1, tmp5);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp3);
                r2000_4dff_tmp4 = simd_or(byte_e3, r800_ffff_tmp7);
                if ((bitblock::any(r2000_4dff_tmp4) || carryQ.CarryTest(117, 12))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp3, r3000_4dff_tmp1);
                  byte_80 = simd_andc(r3000_4dff_tmp2, tmp7);
                  carryQ.cq[117] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(117), r3000_4dff_tmp3));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp3, byte_80);
                  byte_e3_adv = r3000_4dff_tmp3;
                  r3000_4dff_tmp4 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp1);
                  r3000_4dff_tmp5 = simd_and(r3000_4dff_tmp4, tmp6);
                  r3000_4dff_tmp6 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r3000_4dff_tmp7 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp8 = simd_not(r3000_4dff_tmp7);
                  r3000_4dff_tmp9 = simd_or(basis_bits.bit_5, tmp6);
                  r3000_4dff_tmp10 = simd_or(simd_and(basis_bits.bit_4, r3000_4dff_tmp8), simd_andc(r3000_4dff_tmp9, basis_bits.bit_4));
                  r3000_4dff_tmp11 = simd_and(r3000_4dff_tmp6, r3000_4dff_tmp10);
                  r3000_4dff_tmp12 = simd_or(r3000_4dff_tmp5, r3000_4dff_tmp11);
                  r3000_4dff_tmp13 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp14 = simd_and(r800_ffff_tmp3, r3000_4dff_tmp13);
                  r3000_4dff_tmp15 = simd_andc(r3000_4dff_tmp14, basis_bits.bit_4);
                  r3000_4dff_tmp16 = simd_not(basis_bits.bit_6);
                  r3000_4dff_tmp17 = simd_or(simd_and(basis_bits.bit_5, r3000_4dff_tmp16), simd_andc(tmp6, basis_bits.bit_5));
                  r3000_4dff_tmp18 = simd_and(r3000_4dff_tmp15, r3000_4dff_tmp17);
                  r3000_4dff_tmp19 = simd_or(r3000_4dff_tmp12, r3000_4dff_tmp18);
                  r3000_4dff_tmp20 = simd_and(r3000_4dff_tmp14, basis_bits.bit_4);
                  r3000_4dff_tmp21 = simd_and(basis_bits.bit_5, tmp6);
                  r3000_4dff_tmp22 = simd_andc(r3000_4dff_tmp20, r3000_4dff_tmp21);
                  cc_range_3005_3038_3 = simd_or(r3000_4dff_tmp19, r3000_4dff_tmp22);
                  carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(118), sequence_e3_80_adv));
                  r3000_4dff_tmp23 = simd_and(sequence_e3_80_adv, cc_range_3005_3038_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r3000_4dff_tmp23);
                  r3000_4dff_tmp24 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp25 = simd_andc(r3000_4dff_tmp24, tmp5);
                  byte_81 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp25);
                  sequence_e3_81 = simd_and(byte_e3_adv, byte_81);
                  r3000_4dff_tmp26 = simd_or(basis_bits.bit_3, tmp7);
                  r3000_4dff_tmp27 = simd_or(basis_bits.bit_2, r3000_4dff_tmp26);
                  byte_range_81_bf = simd_and(r800_ffff_tmp3, r3000_4dff_tmp27);
                  carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_e3_81, carryQ.get_carry_in(119), sequence_e3_81_adv));
                  r3000_4dff_tmp28 = simd_and(sequence_e3_81_adv, byte_range_81_bf);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r3000_4dff_tmp28);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp29 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r3000_4dff_tmp30 = simd_and(basis_bits.bit_5, tmp1);
                  r3000_4dff_tmp31 = simd_or(basis_bits.bit_4, r3000_4dff_tmp30);
                  r3000_4dff_tmp32 = simd_and(basis_bits.bit_3, r3000_4dff_tmp31);
                  r3000_4dff_tmp33 = simd_andc(r3000_4dff_tmp29, r3000_4dff_tmp32);
                  r3000_4dff_tmp34 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r3000_4dff_tmp35 = simd_and(r800_ffff_tmp3, r3000_4dff_tmp34);
                  r3000_4dff_tmp36 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp37 = simd_and(r3000_4dff_tmp35, r3000_4dff_tmp36);
                  r3000_4dff_tmp38 = simd_and(r3000_4dff_tmp37, tmp6);
                  r3000_4dff_tmp39 = simd_or(r3000_4dff_tmp33, r3000_4dff_tmp38);
                  r3000_4dff_tmp40 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r3000_4dff_tmp41 = simd_and(r3000_4dff_tmp40, r3000_4dff_tmp26);
                  cc_range_3080_30a1_3 = simd_or(r3000_4dff_tmp39, r3000_4dff_tmp41);
                  carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(120), sequence_e3_82_adv));
                  r3000_4dff_tmp42 = simd_and(sequence_e3_82_adv, cc_range_3080_30a1_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r3000_4dff_tmp42);
                  byte_83 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp3);
                  sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
                  r3000_4dff_tmp43 = simd_and(basis_bits.bit_3, tmp3);
                  r3000_4dff_tmp44 = simd_and(basis_bits.bit_2, r3000_4dff_tmp43);
                  r3000_4dff_tmp45 = simd_andc(r800_ffff_tmp3, r3000_4dff_tmp44);
                  r3000_4dff_tmp46 = simd_and(r3000_4dff_tmp14, r3000_4dff_tmp36);
                  cc_range_30c0_30fc_3 = simd_or(r3000_4dff_tmp45, r3000_4dff_tmp46);
                  carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(121), sequence_e3_83_adv));
                  r3000_4dff_tmp47 = simd_and(sequence_e3_83_adv, cc_range_30c0_30fc_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r3000_4dff_tmp47);
                  byte_84 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp2);
                  sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
                  r3000_4dff_tmp48 = simd_and(r3000_4dff_tmp36, basis_bits.bit_6);
                  r3000_4dff_tmp49 = simd_or(basis_bits.bit_3, r3000_4dff_tmp48);
                  r3000_4dff_tmp50 = simd_not(r3000_4dff_tmp49);
                  r3000_4dff_tmp51 = simd_or(basis_bits.bit_4, r3000_4dff_tmp21);
                  r3000_4dff_tmp52 = simd_or(basis_bits.bit_3, r3000_4dff_tmp51);
                  r3000_4dff_tmp53 = simd_or(simd_and(basis_bits.bit_2, r3000_4dff_tmp50), simd_andc(r3000_4dff_tmp52, basis_bits.bit_2));
                  r3000_4dff_tmp54 = simd_and(r800_ffff_tmp3, r3000_4dff_tmp53);
                  r3000_4dff_tmp55 = simd_or(basis_bits.bit_4, r3000_4dff_tmp9);
                  r3000_4dff_tmp56 = simd_and(r3000_4dff_tmp14, r3000_4dff_tmp55);
                  cc_range_3105_3131_3 = simd_or(r3000_4dff_tmp54, r3000_4dff_tmp56);
                  carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_e3_84, carryQ.get_carry_in(122), sequence_e3_84_adv));
                  r3000_4dff_tmp57 = simd_and(sequence_e3_84_adv, cc_range_3105_3131_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r3000_4dff_tmp57);
                  r3000_4dff_tmp58 = simd_and(r800_ffff_tmp1, r3000_4dff_tmp24);
                  byte_85 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp58);
                  sequence_e3_85 = simd_and(byte_e3_adv, byte_85);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_e3_85, carryQ.get_carry_in(123), sequence_e3_85_adv));
                  r3000_4dff_tmp59 = simd_and(sequence_e3_85_adv, byte_range_80_bf);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r3000_4dff_tmp59);
                  r3000_4dff_tmp60 = simd_andc(byte_range_80_bf, r3000_4dff_tmp1);
                  r3000_4dff_tmp61 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  byte_86 = simd_and(r3000_4dff_tmp60, r3000_4dff_tmp61);
                  sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
                  r3000_4dff_tmp62 = simd_and(basis_bits.bit_4, r3000_4dff_tmp30);
                  r3000_4dff_tmp63 = simd_andc(r3000_4dff_tmp60, r3000_4dff_tmp62);
                  r3000_4dff_tmp64 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  r3000_4dff_tmp65 = simd_andc(r3000_4dff_tmp64, r3000_4dff_tmp43);
                  cc_range_3180_31a0_3 = simd_or(r3000_4dff_tmp63, r3000_4dff_tmp65);
                  carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(124), sequence_e3_86_adv));
                  r3000_4dff_tmp66 = simd_and(sequence_e3_86_adv, cc_range_3180_31a0_3);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r3000_4dff_tmp66);
                  r3000_4dff_tmp67 = simd_and(r800_ffff_tmp1, tmp1);
                  byte_87 = simd_and(r3000_4dff_tmp60, r3000_4dff_tmp67);
                  sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
                  byte_range_b0_bf = simd_and(byte_range_80_bf, r3000_4dff_tmp13);
                  carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(125), sequence_e3_87_adv));
                  r3000_4dff_tmp68 = simd_and(sequence_e3_87_adv, byte_range_b0_bf);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r3000_4dff_tmp68);
                  byte_range_90_bf = simd_and(byte_range_80_bf, r3000_4dff_tmp1);
                  byte_e3_byte_range_90_bf = simd_and(byte_e3_adv, byte_range_90_bf);
                  carryQ.cq[126] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_90_bf, carryQ.get_carry_in(126), r3000_4dff_tmp69));
                  byte_e3_byte_range_90_bf_sfx = simd_and(r3000_4dff_tmp69, byte_range_80_bf);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, byte_e3_byte_range_90_bf_sfx);
                  r3000_4dff_tmp70 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp71 = simd_or(basis_bits.bit_4, r3000_4dff_tmp70);
                  r3000_4dff_tmp72 = simd_and(basis_bits.bit_3, r3000_4dff_tmp71);
                  r3000_4dff_tmp73 = simd_and(basis_bits.bit_2, r3000_4dff_tmp72);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r3000_4dff_tmp73);
                  byte_e4_byte_range_80_b5 = simd_and(r800_ffff_tmp6, byte_range_80_b5);
                  carryQ.cq[127] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_80_b5, carryQ.get_carry_in(127), r3000_4dff_tmp74));
                  byte_e4_byte_range_80_b5_sfx = simd_and(r3000_4dff_tmp74, byte_range_80_bf);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, byte_e4_byte_range_80_b5_sfx);
                  byte_b6 = simd_and(byte_range_b0_bf, r3000_4dff_tmp61);
                  byte_e4_adv = r800_ffff_tmp6;
                  sequence_e4_b6 = simd_and(byte_e4_adv, byte_b6);
                  carryQ.cq[128] = carryout2carry(pablo_blk_Advance(sequence_e4_b6, carryQ.get_carry_in(128), r3000_4dff_tmp75));
                  sequence_e4_b6_byte_range_80_b5 = simd_and(r3000_4dff_tmp75, byte_range_80_b5);
                  struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e4_b6_byte_range_80_b5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(117, 12);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(103, 26);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(26, 103);
            }
            r800_ffff_tmp9 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
            r800_ffff_tmp10 = simd_and(r800_ffff_tmp3, r800_ffff_tmp9);
            byte_range_b8_bf = simd_and(r800_ffff_tmp10, basis_bits.bit_4);
            r800_ffff_tmp11 = simd_and(r800_ffff_tmp6, byte_range_b8_bf);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r800_ffff_tmp13 = simd_not(r800_ffff_tmp12);
            r800_ffff_tmp14 = simd_and(basis_bits.bit_5, tmp6);
            r800_ffff_tmp15 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp13), simd_andc(r800_ffff_tmp14, basis_bits.bit_4));
            byte_range_e5_e9 = simd_and(byte_range_e0_ef, r800_ffff_tmp15);
            r800_ffff_tmp16 = simd_or(r800_ffff_tmp11, byte_range_e5_e9);
            if ((bitblock::any(r800_ffff_tmp16) || carryQ.CarryTest(129, 5))) {
              byte_e4_byte_range_b8_bf = r800_ffff_tmp11;
              byte_range_80_bf = r800_ffff_tmp3;
              carryQ.cq[129] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_b8_bf, carryQ.get_carry_in(129), r4e00_9fff_tmp1));
              byte_e4_byte_range_b8_bf_sfx = simd_and(r4e00_9fff_tmp1, byte_range_80_bf);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, byte_e4_byte_range_b8_bf_sfx);
              r4e00_9fff_tmp2 = simd_or(basis_bits.bit_5, tmp6);
              r4e00_9fff_tmp3 = simd_not(r4e00_9fff_tmp2);
              r4e00_9fff_tmp4 = simd_or(simd_and(basis_bits.bit_4, r4e00_9fff_tmp3), simd_andc(r800_ffff_tmp14, basis_bits.bit_4));
              byte_range_e5_e8 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp4);
              carryQ.cq[130] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8, carryQ.get_carry_in(130), r4e00_9fff_tmp5));
              byte_range_e5_e8_sfx = simd_and(r4e00_9fff_tmp5, byte_range_80_bf);
              carryQ.cq[131] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8_sfx, carryQ.get_carry_in(131), r4e00_9fff_tmp6));
              byte_range_e5_e8_sfx_sfx = simd_and(r4e00_9fff_tmp6, byte_range_80_bf);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, byte_range_e5_e8_sfx_sfx);
              r4e00_9fff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              r4e00_9fff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r4e00_9fff_tmp9 = simd_and(r4e00_9fff_tmp7, r4e00_9fff_tmp8);
              byte_e9 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp9);
              r4e00_9fff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              r4e00_9fff_tmp11 = simd_andc(byte_range_80_bf, r4e00_9fff_tmp10);
              byte_80 = simd_andc(r4e00_9fff_tmp11, tmp7);
              carryQ.cq[132] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(132), byte_e9_adv));
              sequence_e9_80 = simd_and(byte_e9_adv, byte_80);
              r4e00_9fff_tmp12 = simd_and(basis_bits.bit_4, r800_ffff_tmp14);
              byte_range_80_8c = simd_andc(r4e00_9fff_tmp11, r4e00_9fff_tmp12);
              carryQ.cq[133] = carryout2carry(pablo_blk_Advance(sequence_e9_80, carryQ.get_carry_in(133), r4e00_9fff_tmp13));
              sequence_e9_80_byte_range_80_8c = simd_and(r4e00_9fff_tmp13, byte_range_80_8c);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_e9_80_byte_range_80_8c);
            }
            else {
              carryQ.CarryDequeueEnqueue(129, 5);
            }
            r800_ffff_tmp17 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            byte_range_ea_ef = simd_and(r800_ffff_tmp17, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(134, 56))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_or(tmp5, basis_bits.bit_6);
              ra000_ffff_tmp6 = simd_and(basis_bits.bit_3, ra000_ffff_tmp5);
              byte_range_80_91 = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp6);
              carryQ.cq[134] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(134), ra000_ffff_tmp7));
              byte_ea_byte_range_80_91 = simd_and(ra000_ffff_tmp7, byte_range_80_91);
              byte_range_80_bf = r800_ffff_tmp3;
              carryQ.cq[135] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_80_91, carryQ.get_carry_in(135), ra000_ffff_tmp8));
              byte_ea_byte_range_80_91_sfx = simd_and(ra000_ffff_tmp8, byte_range_80_bf);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, byte_ea_byte_range_80_91_sfx);
              ra000_ffff_tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp10 = simd_and(byte_range_80_bf, ra000_ffff_tmp9);
              ra000_ffff_tmp11 = simd_andc(ra000_ffff_tmp2, tmp5);
              byte_92 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp11);
              byte_ea_adv = ra000_ffff_tmp7;
              sequence_ea_92 = simd_and(byte_ea_adv, byte_92);
              ra000_ffff_tmp12 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp13 = simd_andc(byte_range_80_bf, ra000_ffff_tmp12);
              ra000_ffff_tmp14 = simd_and(basis_bits.bit_4, r800_ffff_tmp14);
              byte_range_80_8c = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp14);
              carryQ.cq[136] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(136), ra000_ffff_tmp15));
              sequence_ea_92_byte_range_80_8c = simd_and(ra000_ffff_tmp15, byte_range_80_8c);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_92_byte_range_80_8c);
              ra000_ffff_tmp16 = simd_andc(tmp1, tmp5);
              byte_93 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp16);
              sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
              ra000_ffff_tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp18 = simd_and(ra000_ffff_tmp17, basis_bits.bit_6);
              ra000_ffff_tmp19 = simd_and(basis_bits.bit_3, ra000_ffff_tmp18);
              ra000_ffff_tmp20 = simd_not(ra000_ffff_tmp19);
              ra000_ffff_tmp21 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp20), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
              byte_range_90_bd = simd_and(byte_range_80_bf, ra000_ffff_tmp21);
              carryQ.cq[137] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(137), ra000_ffff_tmp22));
              sequence_ea_93_byte_range_90_bd = simd_and(ra000_ffff_tmp22, byte_range_90_bd);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_93_byte_range_90_bd);
              byte_94 = simd_and(ra000_ffff_tmp10, r800_ffff_tmp2);
              sequence_ea_94 = simd_and(byte_ea_adv, byte_94);
              carryQ.cq[138] = carryout2carry(pablo_blk_Advance(sequence_ea_94, carryQ.get_carry_in(138), ra000_ffff_tmp23));
              sequence_ea_94_byte_range_80_bf = simd_and(ra000_ffff_tmp23, byte_range_80_bf);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_94_byte_range_80_bf);
              ra000_ffff_tmp24 = simd_andc(ra000_ffff_tmp1, tmp6);
              byte_98 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp24);
              sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
              carryQ.cq[139] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(139), ra000_ffff_tmp25));
              sequence_ea_98_byte_range_80_8c = simd_and(ra000_ffff_tmp25, byte_range_80_8c);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_98_byte_range_80_8c);
              ra000_ffff_tmp26 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp27 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp26);
              byte_99 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp27);
              sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
              ra000_ffff_tmp28 = simd_and(ra000_ffff_tmp17, tmp1);
              ra000_ffff_tmp29 = simd_or(basis_bits.bit_3, ra000_ffff_tmp28);
              ra000_ffff_tmp30 = simd_and(basis_bits.bit_2, ra000_ffff_tmp29);
              byte_range_80_ae = simd_andc(byte_range_80_bf, ra000_ffff_tmp30);
              carryQ.cq[140] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(140), ra000_ffff_tmp31));
              sequence_ea_99_byte_range_80_ae = simd_and(ra000_ffff_tmp31, byte_range_80_ae);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_99_byte_range_80_ae);
              byte_9a = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp32 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              byte_range_80_9d = simd_andc(ra000_ffff_tmp32, ra000_ffff_tmp19);
              carryQ.cq[141] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(141), ra000_ffff_tmp33));
              sequence_ea_9a_byte_range_80_9d = simd_and(ra000_ffff_tmp33, byte_range_80_9d);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_9a_byte_range_80_9d);
              ra000_ffff_tmp34 = simd_and(ra000_ffff_tmp1, tmp1);
              byte_9b = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp34);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              byte_range_80_af = simd_andc(byte_range_80_bf, r800_ffff_tmp9);
              carryQ.cq[142] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(142), ra000_ffff_tmp35));
              sequence_ea_9b_byte_range_80_af = simd_and(ra000_ffff_tmp35, byte_range_80_af);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_9b_byte_range_80_af);
              ra000_ffff_tmp36 = simd_andc(ra000_ffff_tmp17, tmp6);
              byte_9c = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp36);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              ra000_ffff_tmp37 = simd_and(basis_bits.bit_5, tmp1);
              ra000_ffff_tmp38 = simd_or(basis_bits.bit_4, ra000_ffff_tmp37);
              byte_range_97_9f = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp38);
              carryQ.cq[143] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(143), ra000_ffff_tmp39));
              sequence_ea_9c_byte_range_97_9f = simd_and(ra000_ffff_tmp39, byte_range_97_9f);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_9c_byte_range_97_9f);
              ra000_ffff_tmp40 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp26);
              byte_9d = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp40);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              carryQ.cq[144] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(144), ra000_ffff_tmp41));
              sequence_ea_9d_byte_range_80_bf = simd_and(ra000_ffff_tmp41, byte_range_80_bf);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_9d_byte_range_80_bf);
              ra000_ffff_tmp42 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp42);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp43 = simd_or(basis_bits.bit_5, tmp6);
              ra000_ffff_tmp44 = simd_and(basis_bits.bit_4, ra000_ffff_tmp43);
              byte_range_80_88 = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp44);
              carryQ.cq[145] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(145), ra000_ffff_tmp45));
              sequence_ea_9e_byte_range_80_88 = simd_and(ra000_ffff_tmp45, byte_range_80_88);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_9e_byte_range_80_88);
              byte_9f = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp28);
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              ra000_ffff_tmp46 = simd_and(byte_range_80_bf, r800_ffff_tmp9);
              byte_range_b7_bf = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp38);
              carryQ.cq[146] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(146), ra000_ffff_tmp47));
              sequence_ea_9f_byte_range_b7_bf = simd_and(ra000_ffff_tmp47, byte_range_b7_bf);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_9f_byte_range_b7_bf);
              ra000_ffff_tmp48 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              byte_a0 = simd_andc(ra000_ffff_tmp48, tmp7);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              byte_range_80_81 = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp5);
              carryQ.cq[147] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(147), ra000_ffff_tmp49));
              sequence_ea_a0_byte_range_80_81 = simd_and(ra000_ffff_tmp49, byte_range_80_81);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_a0_byte_range_80_81);
              ra000_ffff_tmp50 = simd_andc(ra000_ffff_tmp26, tmp5);
              byte_a1 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp50);
              sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
              ra000_ffff_tmp51 = simd_and(basis_bits.bit_3, tmp5);
              ra000_ffff_tmp52 = simd_and(basis_bits.bit_2, ra000_ffff_tmp51);
              byte_range_80_b3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp52);
              carryQ.cq[148] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(148), ra000_ffff_tmp53));
              sequence_ea_a1_byte_range_80_b3 = simd_and(ra000_ffff_tmp53, byte_range_80_b3);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_a1_byte_range_80_b3);
              byte_a2 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp11);
              sequence_ea_a2 = simd_and(byte_ea_adv, byte_a2);
              ra000_ffff_tmp54 = simd_not(ra000_ffff_tmp51);
              ra000_ffff_tmp55 = simd_or(basis_bits.bit_3, ra000_ffff_tmp5);
              ra000_ffff_tmp56 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp54), simd_andc(ra000_ffff_tmp55, basis_bits.bit_2));
              byte_range_82_b3 = simd_and(byte_range_80_bf, ra000_ffff_tmp56);
              carryQ.cq[149] = carryout2carry(pablo_blk_Advance(sequence_ea_a2, carryQ.get_carry_in(149), ra000_ffff_tmp57));
              sequence_ea_a2_byte_range_82_b3 = simd_and(ra000_ffff_tmp57, byte_range_82_b3);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_a2_byte_range_82_b3);
              byte_a3 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp16);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              ra000_ffff_tmp58 = simd_andc(ra000_ffff_tmp46, basis_bits.bit_4);
              byte_range_b2_b7 = simd_and(ra000_ffff_tmp58, r800_ffff_tmp12);
              carryQ.cq[150] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(150), ra000_ffff_tmp59));
              sequence_ea_a3_byte_range_b2_b7 = simd_and(ra000_ffff_tmp59, byte_range_b2_b7);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_a3_byte_range_b2_b7);
              byte_a4 = simd_and(ra000_ffff_tmp48, r800_ffff_tmp2);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              ra000_ffff_tmp60 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp61 = simd_or(basis_bits.bit_4, ra000_ffff_tmp60);
              ra000_ffff_tmp62 = simd_or(basis_bits.bit_3, ra000_ffff_tmp61);
              ra000_ffff_tmp63 = simd_not(ra000_ffff_tmp62);
              ra000_ffff_tmp64 = simd_and(basis_bits.bit_4, r800_ffff_tmp12);
              ra000_ffff_tmp65 = simd_or(basis_bits.bit_3, ra000_ffff_tmp64);
              ra000_ffff_tmp66 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp63), simd_andc(ra000_ffff_tmp65, basis_bits.bit_2));
              byte_range_8a_a5 = simd_and(byte_range_80_bf, ra000_ffff_tmp66);
              carryQ.cq[151] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(151), ra000_ffff_tmp67));
              sequence_ea_a4_byte_range_8a_a5 = simd_and(ra000_ffff_tmp67, byte_range_8a_a5);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_a4_byte_range_8a_a5);
              ra000_ffff_tmp68 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp26);
              byte_a5 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp68);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              ra000_ffff_tmp69 = simd_andc(ra000_ffff_tmp13, basis_bits.bit_4);
              byte_range_80_86 = simd_andc(ra000_ffff_tmp69, ra000_ffff_tmp37);
              carryQ.cq[152] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(152), ra000_ffff_tmp70));
              sequence_ea_a5_byte_range_80_86 = simd_and(ra000_ffff_tmp70, byte_range_80_86);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_a5_byte_range_80_86);
              ra000_ffff_tmp71 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp2);
              byte_a6 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp71);
              sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
              ra000_ffff_tmp72 = simd_or(tmp5, tmp1);
              ra000_ffff_tmp73 = simd_and(basis_bits.bit_3, ra000_ffff_tmp72);
              ra000_ffff_tmp74 = simd_not(ra000_ffff_tmp73);
              ra000_ffff_tmp75 = simd_or(basis_bits.bit_3, tmp5);
              ra000_ffff_tmp76 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp74), simd_andc(ra000_ffff_tmp75, basis_bits.bit_2));
              byte_range_84_b2 = simd_and(byte_range_80_bf, ra000_ffff_tmp76);
              carryQ.cq[153] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(153), ra000_ffff_tmp77));
              sequence_ea_a6_byte_range_84_b2 = simd_and(ra000_ffff_tmp77, byte_range_84_b2);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_a6_byte_range_84_b2);
              ra000_ffff_tmp78 = simd_and(r800_ffff_tmp1, tmp1);
              byte_a7 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp78);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              byte_8f = simd_and(ra000_ffff_tmp13, ra000_ffff_tmp28);
              carryQ.cq[154] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(154), ra000_ffff_tmp79));
              sequence_ea_a7_8f = simd_and(ra000_ffff_tmp79, byte_8f);
              byte_a8 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp24);
              sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
              ra000_ffff_tmp80 = simd_or(basis_bits.bit_3, ra000_ffff_tmp44);
              ra000_ffff_tmp81 = simd_and(basis_bits.bit_2, ra000_ffff_tmp80);
              byte_range_80_a8 = simd_andc(byte_range_80_bf, ra000_ffff_tmp81);
              carryQ.cq[155] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(155), ra000_ffff_tmp82));
              sequence_ea_a8_byte_range_80_a8 = simd_and(ra000_ffff_tmp82, byte_range_80_a8);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_a8_byte_range_80_a8);
              byte_a9 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp27);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              ra000_ffff_tmp83 = simd_andc(ra000_ffff_tmp13, tmp5);
              byte_range_80_82 = simd_andc(ra000_ffff_tmp83, tmp1);
              carryQ.cq[156] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(156), ra000_ffff_tmp84));
              sequence_ea_a9_byte_range_80_82 = simd_and(ra000_ffff_tmp84, byte_range_80_82);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_a9_byte_range_80_82);
              byte_aa = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp3);
              sequence_ea_aa = simd_and(byte_ea_adv, byte_aa);
              carryQ.cq[157] = carryout2carry(pablo_blk_Advance(sequence_ea_aa, carryQ.get_carry_in(157), ra000_ffff_tmp85));
              sequence_ea_aa_byte_range_80_af = simd_and(ra000_ffff_tmp85, byte_range_80_af);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_aa_byte_range_80_af);
              byte_ab = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp34);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              byte_80 = simd_andc(ra000_ffff_tmp13, tmp7);
              carryQ.cq[158] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(158), ra000_ffff_tmp86));
              sequence_ea_ab_80 = simd_and(ra000_ffff_tmp86, byte_80);
              byte_ac = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp36);
              sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
              ra000_ffff_tmp87 = simd_not(tmp1);
              ra000_ffff_tmp88 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp87), simd_andc(tmp6, basis_bits.bit_5));
              byte_range_81_86 = simd_and(ra000_ffff_tmp69, ra000_ffff_tmp88);
              carryQ.cq[159] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(159), ra000_ffff_tmp89));
              sequence_ea_ac_byte_range_81_86 = simd_and(ra000_ffff_tmp89, byte_range_81_86);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_ac_byte_range_81_86);
              byte_ad = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp40);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              ra000_ffff_tmp90 = simd_and(basis_bits.bit_3, tmp3);
              byte_range_80_9a = simd_andc(ra000_ffff_tmp32, ra000_ffff_tmp90);
              carryQ.cq[160] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(160), ra000_ffff_tmp91));
              sequence_ea_ad_byte_range_80_9a = simd_and(ra000_ffff_tmp91, byte_range_80_9a);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_ad_byte_range_80_9a);
              byte_af = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp28);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              ra000_ffff_tmp92 = simd_or(basis_bits.bit_3, ra000_ffff_tmp72);
              ra000_ffff_tmp93 = simd_and(basis_bits.bit_2, ra000_ffff_tmp92);
              byte_range_80_a2 = simd_andc(byte_range_80_bf, ra000_ffff_tmp93);
              carryQ.cq[161] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(161), ra000_ffff_tmp94));
              sequence_ea_af_byte_range_80_a2 = simd_and(ra000_ffff_tmp94, byte_range_80_a2);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_af_byte_range_80_a2);
              byte_b0 = simd_andc(ra000_ffff_tmp46, tmp7);
              sequence_ea_b0 = simd_and(byte_ea_adv, byte_b0);
              carryQ.cq[162] = carryout2carry(pablo_blk_Advance(sequence_ea_b0, carryQ.get_carry_in(162), ra000_ffff_tmp95));
              sequence_ea_b0_byte_range_80_bf = simd_and(ra000_ffff_tmp95, byte_range_80_bf);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ea_b0_byte_range_80_bf);
              ra000_ffff_tmp96 = simd_not(tmp6);
              ra000_ffff_tmp97 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp96), simd_andc(tmp1, basis_bits.bit_5));
              byte_range_eb_ec = simd_and(r800_ffff_tmp17, ra000_ffff_tmp97);
              carryQ.cq[163] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec, carryQ.get_carry_in(163), ra000_ffff_tmp98));
              byte_range_eb_ec_sfx = simd_and(ra000_ffff_tmp98, byte_range_80_bf);
              carryQ.cq[164] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec_sfx, carryQ.get_carry_in(164), ra000_ffff_tmp99));
              byte_range_eb_ec_sfx_sfx = simd_and(ra000_ffff_tmp99, byte_range_80_bf);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, byte_range_eb_ec_sfx_sfx);
              byte_ed = simd_and(byte_range_e0_ef, ra000_ffff_tmp40);
              carryQ.cq[165] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(165), byte_ed_adv));
              sequence_ed_80 = simd_and(byte_ed_adv, byte_80);
              ra000_ffff_tmp100 = simd_and(basis_bits.bit_2, ra000_ffff_tmp75);
              byte_range_80_a3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp100);
              carryQ.cq[166] = carryout2carry(pablo_blk_Advance(sequence_ed_80, carryQ.get_carry_in(166), ra000_ffff_tmp101));
              sequence_ed_80_byte_range_80_a3 = simd_and(ra000_ffff_tmp101, byte_range_80_a3);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ed_80_byte_range_80_a3);
              byte_ef = simd_and(byte_range_e0_ef, ra000_ffff_tmp28);
              ra000_ffff_tmp102 = simd_not(ra000_ffff_tmp43);
              ra000_ffff_tmp103 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp102), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
              byte_range_a4_a8 = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp103);
              carryQ.cq[167] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(167), ra000_ffff_tmp104));
              byte_ef_byte_range_a4_a8 = simd_and(ra000_ffff_tmp104, byte_range_a4_a8);
              carryQ.cq[168] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_a4_a8, carryQ.get_carry_in(168), ra000_ffff_tmp105));
              byte_ef_byte_range_a4_a8_sfx = simd_and(ra000_ffff_tmp105, byte_range_80_bf);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, byte_ef_byte_range_a4_a8_sfx);
              byte_ef_adv = ra000_ffff_tmp104;
              sequence_ef_a9 = simd_and(byte_ef_adv, byte_a9);
              ra000_ffff_tmp106 = simd_or(basis_bits.bit_3, ra000_ffff_tmp18);
              ra000_ffff_tmp107 = simd_and(basis_bits.bit_2, ra000_ffff_tmp106);
              byte_range_80_ad = simd_andc(byte_range_80_bf, ra000_ffff_tmp107);
              carryQ.cq[169] = carryout2carry(pablo_blk_Advance(sequence_ef_a9, carryQ.get_carry_in(169), ra000_ffff_tmp108));
              sequence_ef_a9_byte_range_80_ad = simd_and(ra000_ffff_tmp108, byte_range_80_ad);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_a9_byte_range_80_ad);
              sequence_ef_aa = simd_and(byte_ef_adv, byte_aa);
              carryQ.cq[170] = carryout2carry(pablo_blk_Advance(sequence_ef_aa, carryQ.get_carry_in(170), ra000_ffff_tmp109));
              sequence_ef_aa_byte_range_80_bf = simd_and(ra000_ffff_tmp109, byte_range_80_bf);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_aa_byte_range_80_bf);
              sequence_ef_ab = simd_and(byte_ef_adv, byte_ab);
              ra000_ffff_tmp110 = simd_and(basis_bits.bit_3, ra000_ffff_tmp64);
              byte_range_80_99 = simd_andc(ra000_ffff_tmp32, ra000_ffff_tmp110);
              carryQ.cq[171] = carryout2carry(pablo_blk_Advance(sequence_ef_ab, carryQ.get_carry_in(171), ra000_ffff_tmp111));
              sequence_ef_ab_byte_range_80_99 = simd_and(ra000_ffff_tmp111, byte_range_80_99);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_ab_byte_range_80_99);
              sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
              carryQ.cq[172] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(172), ra000_ffff_tmp112));
              sequence_ef_ac_byte_range_80_86 = simd_and(ra000_ffff_tmp112, byte_range_80_86);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_ac_byte_range_80_86);
              sequence_ef_ad = simd_and(byte_ef_adv, byte_ad);
              carryQ.cq[173] = carryout2carry(pablo_blk_Advance(sequence_ef_ad, carryQ.get_carry_in(173), ra000_ffff_tmp113));
              sequence_ef_ad_byte_range_80_81 = simd_and(ra000_ffff_tmp113, byte_range_80_81);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_ad_byte_range_80_81);
              byte_ae = simd_and(ra000_ffff_tmp48, ra000_ffff_tmp42);
              sequence_ef_ae = simd_and(byte_ef_adv, byte_ae);
              ra000_ffff_tmp114 = simd_and(basis_bits.bit_2, ra000_ffff_tmp6);
              byte_range_80_b1 = simd_andc(byte_range_80_bf, ra000_ffff_tmp114);
              carryQ.cq[174] = carryout2carry(pablo_blk_Advance(sequence_ef_ae, carryQ.get_carry_in(174), ra000_ffff_tmp115));
              sequence_ef_ae_byte_range_80_b1 = simd_and(ra000_ffff_tmp115, byte_range_80_b1);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_ae_byte_range_80_b1);
              sequence_ef_af = simd_and(byte_ef_adv, byte_af);
              ra000_ffff_tmp116 = simd_or(basis_bits.bit_2, ra000_ffff_tmp73);
              byte_range_93_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp116);
              carryQ.cq[175] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(175), ra000_ffff_tmp117));
              sequence_ef_af_byte_range_93_bf = simd_and(ra000_ffff_tmp117, byte_range_93_bf);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_af_byte_range_93_bf);
              sequence_ef_b0 = simd_and(byte_ef_adv, byte_b0);
              carryQ.cq[176] = carryout2carry(pablo_blk_Advance(sequence_ef_b0, carryQ.get_carry_in(176), ra000_ffff_tmp118));
              sequence_ef_b0_byte_range_80_bf = simd_and(ra000_ffff_tmp118, byte_range_80_bf);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_b0_byte_range_80_bf);
              byte_b1 = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp50);
              sequence_ef_b1 = simd_and(byte_ef_adv, byte_b1);
              carryQ.cq[177] = carryout2carry(pablo_blk_Advance(sequence_ef_b1, carryQ.get_carry_in(177), ra000_ffff_tmp119));
              sequence_ef_b1_byte_range_80_9d = simd_and(ra000_ffff_tmp119, byte_range_80_9d);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_b1_byte_range_80_9d);
              byte_b2 = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp11);
              sequence_ef_b2 = simd_and(byte_ef_adv, byte_b2);
              carryQ.cq[178] = carryout2carry(pablo_blk_Advance(sequence_ef_b2, carryQ.get_carry_in(178), ra000_ffff_tmp120));
              sequence_ef_b2_byte_range_80_bf = simd_and(ra000_ffff_tmp120, byte_range_80_bf);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_b2_byte_range_80_bf);
              byte_b4 = simd_and(ra000_ffff_tmp46, r800_ffff_tmp2);
              sequence_ef_b4 = simd_and(byte_ef_adv, byte_b4);
              ra000_ffff_tmp121 = simd_and(basis_bits.bit_2, ra000_ffff_tmp19);
              byte_range_80_bd = simd_andc(byte_range_80_bf, ra000_ffff_tmp121);
              carryQ.cq[179] = carryout2carry(pablo_blk_Advance(sequence_ef_b4, carryQ.get_carry_in(179), ra000_ffff_tmp122));
              sequence_ef_b4_byte_range_80_bd = simd_and(ra000_ffff_tmp122, byte_range_80_bd);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_b4_byte_range_80_bd);
              byte_b5 = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp68);
              sequence_ef_b5 = simd_and(byte_ef_adv, byte_b5);
              byte_range_90_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp12);
              carryQ.cq[180] = carryout2carry(pablo_blk_Advance(sequence_ef_b5, carryQ.get_carry_in(180), ra000_ffff_tmp123));
              sequence_ef_b5_byte_range_90_bf = simd_and(ra000_ffff_tmp123, byte_range_90_bf);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_b5_byte_range_90_bf);
              byte_b6 = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp71);
              sequence_ef_b6 = simd_and(byte_ef_adv, byte_b6);
              byte_range_80_8f = ra000_ffff_tmp13;
              carryQ.cq[181] = carryout2carry(pablo_blk_Advance(sequence_ef_b6, carryQ.get_carry_in(181), ra000_ffff_tmp124));
              sequence_ef_b6_byte_range_80_8f = simd_and(ra000_ffff_tmp124, byte_range_80_8f);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_b6_byte_range_80_8f);
              byte_b7 = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp78);
              sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
              byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
              carryQ.cq[182] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(182), ra000_ffff_tmp125));
              sequence_ef_b7_byte_range_80_87 = simd_and(ra000_ffff_tmp125, byte_range_80_87);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_b7_byte_range_80_87);
              byte_b9 = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp27);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              carryQ.cq[183] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(183), ra000_ffff_tmp126));
              sequence_ef_b9_b1 = simd_and(ra000_ffff_tmp126, byte_b1);
              byte_ba = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp3);
              sequence_ef_ba = simd_and(byte_ef_adv, byte_ba);
              carryQ.cq[184] = carryout2carry(pablo_blk_Advance(sequence_ef_ba, carryQ.get_carry_in(184), ra000_ffff_tmp127));
              sequence_ef_ba_byte_range_80_bf = simd_and(ra000_ffff_tmp127, byte_range_80_bf);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_ba_byte_range_80_bf);
              byte_bb = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp34);
              sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
              ra000_ffff_tmp128 = simd_and(ra000_ffff_tmp17, tmp6);
              ra000_ffff_tmp129 = simd_and(basis_bits.bit_3, ra000_ffff_tmp128);
              ra000_ffff_tmp130 = simd_and(basis_bits.bit_2, ra000_ffff_tmp129);
              byte_range_80_bc = simd_andc(byte_range_80_bf, ra000_ffff_tmp130);
              carryQ.cq[185] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(185), ra000_ffff_tmp131));
              sequence_ef_bb_byte_range_80_bc = simd_and(ra000_ffff_tmp131, byte_range_80_bc);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_bb_byte_range_80_bc);
              byte_bc = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp36);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp132 = simd_and(byte_range_80_bf, basis_bits.bit_2);
              byte_range_a1_ba = simd_and(ra000_ffff_tmp132, tmp8);
              carryQ.cq[186] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(186), ra000_ffff_tmp133));
              sequence_ef_bc_byte_range_a1_ba = simd_and(ra000_ffff_tmp133, byte_range_a1_ba);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_bc_byte_range_a1_ba);
              byte_bd = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp40);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_range_81_9a = simd_and(ra000_ffff_tmp32, tmp8);
              carryQ.cq[187] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(187), ra000_ffff_tmp134));
              sequence_ef_bd_byte_range_81_9a = simd_and(ra000_ffff_tmp134, byte_range_81_9a);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_bd_byte_range_81_9a);
              byte_be = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp42);
              sequence_ef_be = simd_and(byte_ef_adv, byte_be);
              carryQ.cq[188] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(188), ra000_ffff_tmp135));
              sequence_ef_be_byte_range_80_9d = simd_and(ra000_ffff_tmp135, byte_range_80_9d);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_be_byte_range_80_9d);
              byte_bf = simd_and(ra000_ffff_tmp46, ra000_ffff_tmp28);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              byte_range_82_87 = simd_and(byte_range_80_87, r800_ffff_tmp12);
              carryQ.cq[189] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(189), ra000_ffff_tmp136));
              sequence_ef_bf_byte_range_82_87 = simd_and(ra000_ffff_tmp136, byte_range_82_87);
              struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_ef_bf_byte_range_82_87);
            }
            else {
              carryQ.CarryDequeueEnqueue(134, 56);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(25, 165);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(190, 108))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp7);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp3 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_90 = simd_andc(r10000_10ffff_tmp3, tmp7);
            carryQ.cq[190] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(190), r10000_10ffff_tmp4));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp4, byte_90);
            byte_f0_adv = r10000_10ffff_tmp4;
            r10000_10ffff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp6 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp5);
            byte_80 = simd_andc(r10000_10ffff_tmp6, tmp7);
            carryQ.cq[191] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(191), r10000_10ffff_tmp7));
            sequence_f0_90_80 = simd_and(r10000_10ffff_tmp7, byte_80);
            sequence_f0_90_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_5, tmp1);
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp11);
            r10000_10ffff_tmp13 = simd_not(r10000_10ffff_tmp12);
            r10000_10ffff_tmp14 = simd_and(r10000_10ffff_tmp8, tmp6);
            r10000_10ffff_tmp15 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp13), simd_andc(r10000_10ffff_tmp15, basis_bits.bit_2));
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_or(r10000_10ffff_tmp9, r10000_10ffff_tmp17);
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp1, basis_bits.bit_2);
            r10000_10ffff_tmp20 = simd_or(simd_and(basis_bits.bit_3, tmp4), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp19, r10000_10ffff_tmp20);
            r10000_10ffff_tmp22 = simd_or(r10000_10ffff_tmp18, r10000_10ffff_tmp21);
            r10000_10ffff_tmp23 = simd_and(r10000_10ffff_tmp1, r80_10ffff_tmp2);
            r10000_10ffff_tmp24 = simd_andc(r10000_10ffff_tmp8, basis_bits.bit_6);
            r10000_10ffff_tmp25 = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp24);
            r10000_10ffff_tmp26 = simd_or(r10000_10ffff_tmp22, r10000_10ffff_tmp25);
            r10000_10ffff_tmp27 = simd_and(r10000_10ffff_tmp8, tmp1);
            r10000_10ffff_tmp28 = simd_and(r10000_10ffff_tmp23, r10000_10ffff_tmp27);
            cc_range_10000_1003f_4 = simd_or(r10000_10ffff_tmp26, r10000_10ffff_tmp28);
            carryQ.cq[192] = carryout2carry(pablo_blk_Advance(sequence_f0_90_80, carryQ.get_carry_in(192), sequence_f0_90_80_adv));
            r10000_10ffff_tmp29 = simd_and(sequence_f0_90_80_adv, cc_range_10000_1003f_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp29);
            r10000_10ffff_tmp30 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp31 = simd_andc(r10000_10ffff_tmp30, tmp5);
            byte_81 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp31);
            sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
            r10000_10ffff_tmp32 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp33 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp32);
            r10000_10ffff_tmp34 = simd_andc(r10000_10ffff_tmp5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp35 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp34);
            cc_range_10040_10050_4 = simd_andc(r10000_10ffff_tmp35, r10000_10ffff_tmp33);
            carryQ.cq[193] = carryout2carry(pablo_blk_Advance(sequence_f0_90_81, carryQ.get_carry_in(193), sequence_f0_90_81_adv));
            r10000_10ffff_tmp36 = simd_and(sequence_f0_90_81_adv, cc_range_10040_10050_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp36);
            r10000_10ffff_tmp37 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp38 = simd_andc(r10000_10ffff_tmp37, tmp5);
            byte_82 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp38);
            sequence_f0_90_82 = simd_and(sequence_f0_90_adv, byte_82);
            byte_range_80_bf = r10000_10ffff_tmp1;
            carryQ.cq[194] = carryout2carry(pablo_blk_Advance(sequence_f0_90_82, carryQ.get_carry_in(194), sequence_f0_90_82_adv));
            r10000_10ffff_tmp39 = simd_and(sequence_f0_90_82_adv, byte_range_80_bf);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp39);
            r10000_10ffff_tmp40 = simd_and(byte_range_80_bf, r10000_10ffff_tmp2);
            r10000_10ffff_tmp41 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp42 = simd_andc(tmp1, tmp5);
            byte_83 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp42);
            sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
            r10000_10ffff_tmp43 = simd_and(basis_bits.bit_3, tmp3);
            r10000_10ffff_tmp44 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp43);
            byte_range_80_ba = simd_andc(byte_range_80_bf, r10000_10ffff_tmp44);
            carryQ.cq[195] = carryout2carry(pablo_blk_Advance(sequence_f0_90_83, carryQ.get_carry_in(195), sequence_f0_90_83_adv));
            r10000_10ffff_tmp45 = simd_and(sequence_f0_90_83_adv, byte_range_80_ba);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp45);
            r10000_10ffff_tmp46 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp47 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp30);
            byte_85 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp47);
            sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
            r10000_10ffff_tmp48 = simd_and(basis_bits.bit_5, tmp6);
            r10000_10ffff_tmp49 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp48);
            r10000_10ffff_tmp50 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp49);
            r10000_10ffff_tmp51 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp50);
            byte_range_80_b4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp51);
            carryQ.cq[196] = carryout2carry(pablo_blk_Advance(sequence_f0_90_85, carryQ.get_carry_in(196), sequence_f0_90_85_adv));
            r10000_10ffff_tmp52 = simd_and(sequence_f0_90_85_adv, byte_range_80_b4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp52);
            r10000_10ffff_tmp53 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp54 = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp37);
            byte_8a = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp54);
            sequence_f0_90_8a = simd_and(sequence_f0_90_adv, byte_8a);
            r10000_10ffff_tmp55 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp56 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp14);
            r10000_10ffff_tmp57 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp56);
            r10000_10ffff_tmp58 = simd_and(byte_range_80_bf, basis_bits.bit_2);
            cc_range_10280_102a0_4 = simd_or(r10000_10ffff_tmp57, r10000_10ffff_tmp58);
            carryQ.cq[197] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8a, carryQ.get_carry_in(197), sequence_f0_90_8a_adv));
            r10000_10ffff_tmp59 = simd_and(sequence_f0_90_8a_adv, cc_range_10280_102a0_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp59);
            r10000_10ffff_tmp60 = simd_and(r10000_10ffff_tmp53, tmp1);
            byte_8b = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp60);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp61 = simd_and(basis_bits.bit_3, tmp7);
            byte_range_80_90 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp61);
            carryQ.cq[198] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(198), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp62 = simd_and(sequence_f0_90_8b_adv, byte_range_80_90);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp62);
            r10000_10ffff_tmp63 = simd_andc(r10000_10ffff_tmp8, tmp6);
            byte_8c = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp63);
            sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
            r10000_10ffff_tmp64 = simd_andc(basis_bits.bit_2, r80_10ffff_tmp2);
            cc_range_10300_10330_4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp64);
            carryQ.cq[199] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(199), sequence_f0_90_8c_adv));
            r10000_10ffff_tmp65 = simd_and(sequence_f0_90_8c_adv, cc_range_10300_10330_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp65);
            r10000_10ffff_tmp66 = simd_and(r10000_10ffff_tmp8, r10000_10ffff_tmp30);
            byte_8d = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp66);
            sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
            r10000_10ffff_tmp67 = simd_andc(r10000_10ffff_tmp41, tmp3);
            r10000_10ffff_tmp68 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp32);
            r10000_10ffff_tmp69 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp68);
            r10000_10ffff_tmp70 = simd_not(r10000_10ffff_tmp69);
            r10000_10ffff_tmp71 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp70), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp72 = simd_and(byte_range_80_bf, r10000_10ffff_tmp71);
            cc_range_10340_10350_4 = simd_or(r10000_10ffff_tmp67, r10000_10ffff_tmp72);
            carryQ.cq[200] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(200), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp73 = simd_and(sequence_f0_90_8d_adv, cc_range_10340_10350_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp73);
            r10000_10ffff_tmp74 = simd_and(r10000_10ffff_tmp8, r10000_10ffff_tmp37);
            byte_8e = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp74);
            sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
            r10000_10ffff_tmp75 = simd_and(r10000_10ffff_tmp8, basis_bits.bit_6);
            r10000_10ffff_tmp76 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp75);
            r10000_10ffff_tmp77 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp76);
            cc_range_10380_103a0_4 = simd_or(r10000_10ffff_tmp77, r10000_10ffff_tmp58);
            carryQ.cq[201] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(201), sequence_f0_90_8e_adv));
            r10000_10ffff_tmp78 = simd_and(sequence_f0_90_8e_adv, cc_range_10380_103a0_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp78);
            byte_8f = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp27);
            sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
            r10000_10ffff_tmp79 = simd_andc(tmp5, basis_bits.bit_4);
            r10000_10ffff_tmp80 = simd_andc(r10000_10ffff_tmp41, r10000_10ffff_tmp79);
            r10000_10ffff_tmp81 = simd_andc(r10000_10ffff_tmp40, basis_bits.bit_4);
            r10000_10ffff_tmp82 = simd_not(basis_bits.bit_6);
            r10000_10ffff_tmp83 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp82), simd_andc(tmp6, basis_bits.bit_5));
            r10000_10ffff_tmp84 = simd_and(r10000_10ffff_tmp81, r10000_10ffff_tmp83);
            cc_range_103c0_103d1_4 = simd_or(r10000_10ffff_tmp80, r10000_10ffff_tmp84);
            carryQ.cq[202] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(202), sequence_f0_90_8f_adv));
            r10000_10ffff_tmp85 = simd_and(sequence_f0_90_8f_adv, cc_range_103c0_103d1_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp85);
            r10000_10ffff_tmp86 = simd_or(tmp5, basis_bits.bit_6);
            byte_range_90_91 = simd_andc(r10000_10ffff_tmp40, r10000_10ffff_tmp86);
            sequence_f0_90_byte_range_90_91 = simd_and(sequence_f0_90_adv, byte_range_90_91);
            carryQ.cq[203] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_90_91, carryQ.get_carry_in(203), r10000_10ffff_tmp87));
            sequence_f0_90_byte_range_90_91_sfx = simd_and(r10000_10ffff_tmp87, byte_range_80_bf);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_byte_range_90_91_sfx);
            byte_92 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp38);
            sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
            byte_range_80_9d = r10000_10ffff_tmp77;
            carryQ.cq[204] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(204), r10000_10ffff_tmp88));
            sequence_f0_90_92_byte_range_80_9d = simd_and(r10000_10ffff_tmp88, byte_range_80_9d);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_92_byte_range_80_9d);
            r10000_10ffff_tmp89 = simd_andc(r10000_10ffff_tmp46, tmp6);
            byte_94 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp89);
            sequence_f0_90_94 = simd_and(sequence_f0_90_adv, byte_94);
            r10000_10ffff_tmp90 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp91 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp90);
            byte_range_80_a7 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp91);
            carryQ.cq[205] = carryout2carry(pablo_blk_Advance(sequence_f0_90_94, carryQ.get_carry_in(205), r10000_10ffff_tmp92));
            sequence_f0_90_94_byte_range_80_a7 = simd_and(r10000_10ffff_tmp92, byte_range_80_a7);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_94_byte_range_80_a7);
            byte_95 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp47);
            sequence_f0_90_95 = simd_and(sequence_f0_90_adv, byte_95);
            r10000_10ffff_tmp93 = simd_or(basis_bits.bit_3, tmp5);
            r10000_10ffff_tmp94 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp93);
            byte_range_80_a3 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp94);
            carryQ.cq[206] = carryout2carry(pablo_blk_Advance(sequence_f0_90_95, carryQ.get_carry_in(206), r10000_10ffff_tmp95));
            sequence_f0_90_95_byte_range_80_a3 = simd_and(r10000_10ffff_tmp95, byte_range_80_a3);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_95_byte_range_80_a3);
            r10000_10ffff_tmp96 = simd_andc(r10000_10ffff_tmp53, tmp6);
            byte_98 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp96);
            sequence_f0_90_98 = simd_and(sequence_f0_90_adv, byte_98);
            carryQ.cq[207] = carryout2carry(pablo_blk_Advance(sequence_f0_90_98, carryQ.get_carry_in(207), r10000_10ffff_tmp97));
            sequence_f0_90_98_byte_range_80_bf = simd_and(r10000_10ffff_tmp97, byte_range_80_bf);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_98_byte_range_80_bf);
            byte_9c = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp63);
            sequence_f0_90_9c = simd_and(sequence_f0_90_adv, byte_9c);
            r10000_10ffff_tmp98 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp11);
            r10000_10ffff_tmp99 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp98);
            byte_range_80_b6 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp99);
            carryQ.cq[208] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9c, carryQ.get_carry_in(208), r10000_10ffff_tmp100));
            sequence_f0_90_9c_byte_range_80_b6 = simd_and(r10000_10ffff_tmp100, byte_range_80_b6);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_9c_byte_range_80_b6);
            byte_9d = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp66);
            sequence_f0_90_9d = simd_and(sequence_f0_90_adv, byte_9d);
            byte_range_80_95 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp69);
            carryQ.cq[209] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9d, carryQ.get_carry_in(209), r10000_10ffff_tmp101));
            sequence_f0_90_9d_byte_range_80_95 = simd_and(r10000_10ffff_tmp101, byte_range_80_95);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_9d_byte_range_80_95);
            r10000_10ffff_tmp102 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            byte_a0 = simd_andc(r10000_10ffff_tmp102, tmp7);
            sequence_f0_90_a0 = simd_and(sequence_f0_90_adv, byte_a0);
            r10000_10ffff_tmp103 = simd_andc(r10000_10ffff_tmp41, basis_bits.bit_4);
            byte_range_80_85 = simd_andc(r10000_10ffff_tmp103, r10000_10ffff_tmp32);
            carryQ.cq[210] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a0, carryQ.get_carry_in(210), r10000_10ffff_tmp104));
            sequence_f0_90_a0_byte_range_80_85 = simd_and(r10000_10ffff_tmp104, byte_range_80_85);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_a0_byte_range_80_85);
            byte_a1 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp31);
            sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
            carryQ.cq[211] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(211), r10000_10ffff_tmp105));
            sequence_f0_90_a1_byte_range_80_95 = simd_and(r10000_10ffff_tmp105, byte_range_80_95);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_a1_byte_range_80_95);
            byte_a2 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp38);
            sequence_f0_90_a2 = simd_and(sequence_f0_90_adv, byte_a2);
            r10000_10ffff_tmp106 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp27);
            byte_range_80_9e = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp106);
            carryQ.cq[212] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a2, carryQ.get_carry_in(212), r10000_10ffff_tmp107));
            sequence_f0_90_a2_byte_range_80_9e = simd_and(r10000_10ffff_tmp107, byte_range_80_9e);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_a2_byte_range_80_9e);
            byte_a4 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp89);
            sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
            carryQ.cq[213] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(213), r10000_10ffff_tmp108));
            sequence_f0_90_a4_byte_range_80_95 = simd_and(r10000_10ffff_tmp108, byte_range_80_95);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_a4_byte_range_80_95);
            r10000_10ffff_tmp109 = simd_and(r10000_10ffff_tmp46, r10000_10ffff_tmp37);
            byte_a6 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp109);
            sequence_f0_90_a6 = simd_and(sequence_f0_90_adv, byte_a6);
            r10000_10ffff_tmp110 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp111 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp110);
            byte_range_80_b7 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp111);
            carryQ.cq[214] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a6, carryQ.get_carry_in(214), r10000_10ffff_tmp112));
            sequence_f0_90_a6_byte_range_80_b7 = simd_and(r10000_10ffff_tmp112, byte_range_80_b7);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_a6_byte_range_80_b7);
            byte_a8 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp96);
            sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
            carryQ.cq[215] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(215), r10000_10ffff_tmp113));
            sequence_f0_90_a8_80 = simd_and(r10000_10ffff_tmp113, byte_80);
            r10000_10ffff_tmp114 = simd_and(r10000_10ffff_tmp53, r10000_10ffff_tmp30);
            byte_a9 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp114);
            sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
            byte_range_a0_bc = simd_andc(r10000_10ffff_tmp58, r10000_10ffff_tmp56);
            carryQ.cq[216] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(216), r10000_10ffff_tmp115));
            sequence_f0_90_a9_byte_range_a0_bc = simd_and(r10000_10ffff_tmp115, byte_range_a0_bc);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_a9_byte_range_a0_bc);
            byte_aa = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp54);
            sequence_f0_90_aa = simd_and(sequence_f0_90_adv, byte_aa);
            byte_range_80_9c = r10000_10ffff_tmp57;
            carryQ.cq[217] = carryout2carry(pablo_blk_Advance(sequence_f0_90_aa, carryQ.get_carry_in(217), r10000_10ffff_tmp116));
            sequence_f0_90_aa_byte_range_80_9c = simd_and(r10000_10ffff_tmp116, byte_range_80_9c);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_aa_byte_range_80_9c);
            byte_ab = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp60);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            byte_range_80_87 = r10000_10ffff_tmp103;
            carryQ.cq[218] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(218), r10000_10ffff_tmp117));
            sequence_f0_90_ab_byte_range_80_87 = simd_and(r10000_10ffff_tmp117, byte_range_80_87);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_ab_byte_range_80_87);
            byte_ac = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp63);
            sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
            r10000_10ffff_tmp118 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp69);
            byte_range_80_b5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp118);
            carryQ.cq[219] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(219), r10000_10ffff_tmp119));
            sequence_f0_90_ac_byte_range_80_b5 = simd_and(r10000_10ffff_tmp119, byte_range_80_b5);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_ac_byte_range_80_b5);
            byte_ad = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp66);
            sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
            carryQ.cq[220] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(220), r10000_10ffff_tmp120));
            sequence_f0_90_ad_byte_range_80_95 = simd_and(r10000_10ffff_tmp120, byte_range_80_95);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_ad_byte_range_80_95);
            byte_ae = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp74);
            sequence_f0_90_ae = simd_and(sequence_f0_90_adv, byte_ae);
            r10000_10ffff_tmp121 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp86);
            byte_range_80_91 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp121);
            carryQ.cq[221] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(221), r10000_10ffff_tmp122));
            sequence_f0_90_ae_byte_range_80_91 = simd_and(r10000_10ffff_tmp122, byte_range_80_91);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_ae_byte_range_80_91);
            r10000_10ffff_tmp123 = simd_and(byte_range_80_bf, r80_10ffff_tmp2);
            byte_b0 = simd_andc(r10000_10ffff_tmp123, tmp7);
            sequence_f0_90_b0 = simd_and(sequence_f0_90_adv, byte_b0);
            carryQ.cq[222] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b0, carryQ.get_carry_in(222), r10000_10ffff_tmp124));
            sequence_f0_90_b0_byte_range_80_bf = simd_and(r10000_10ffff_tmp124, byte_range_80_bf);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_b0_byte_range_80_bf);
            byte_b1 = simd_and(r10000_10ffff_tmp123, r10000_10ffff_tmp31);
            sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
            r10000_10ffff_tmp125 = simd_or(basis_bits.bit_5, tmp6);
            r10000_10ffff_tmp126 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp125);
            byte_range_80_88 = simd_andc(r10000_10ffff_tmp41, r10000_10ffff_tmp126);
            carryQ.cq[223] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b1, carryQ.get_carry_in(223), r10000_10ffff_tmp127));
            sequence_f0_90_b1_byte_range_80_88 = simd_and(r10000_10ffff_tmp127, byte_range_80_88);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_90_b1_byte_range_80_88);
            byte_91 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp31);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            carryQ.cq[224] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(224), r10000_10ffff_tmp128));
            sequence_f0_91_80 = simd_and(r10000_10ffff_tmp128, byte_80);
            sequence_f0_91_adv = r10000_10ffff_tmp128;
            r10000_10ffff_tmp129 = simd_not(r10000_10ffff_tmp110);
            r10000_10ffff_tmp130 = simd_or(tmp5, tmp1);
            r10000_10ffff_tmp131 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp130);
            r10000_10ffff_tmp132 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp129), simd_andc(r10000_10ffff_tmp131, basis_bits.bit_2));
            byte_range_83_b7 = simd_and(byte_range_80_bf, r10000_10ffff_tmp132);
            carryQ.cq[225] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(225), sequence_f0_91_80_adv));
            r10000_10ffff_tmp133 = simd_and(sequence_f0_91_80_adv, byte_range_83_b7);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp133);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            r10000_10ffff_tmp134 = simd_not(basis_bits.bit_3);
            r10000_10ffff_tmp135 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp134), simd_andc(r10000_10ffff_tmp131, basis_bits.bit_2));
            byte_range_83_af = simd_and(byte_range_80_bf, r10000_10ffff_tmp135);
            carryQ.cq[226] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(226), sequence_f0_91_82_adv));
            r10000_10ffff_tmp136 = simd_and(sequence_f0_91_82_adv, byte_range_83_af);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp136);
            sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
            r10000_10ffff_tmp137 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp126);
            r10000_10ffff_tmp138 = simd_not(r10000_10ffff_tmp137);
            r10000_10ffff_tmp139 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp138), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_a8 = simd_and(byte_range_80_bf, r10000_10ffff_tmp139);
            carryQ.cq[227] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(227), sequence_f0_91_83_adv));
            r10000_10ffff_tmp140 = simd_and(sequence_f0_91_83_adv, byte_range_90_a8);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp140);
            byte_84 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp89);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            r10000_10ffff_tmp141 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp13), simd_andc(r10000_10ffff_tmp131, basis_bits.bit_2));
            byte_range_83_a6 = simd_and(byte_range_80_bf, r10000_10ffff_tmp141);
            carryQ.cq[228] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(228), sequence_f0_91_84_adv));
            r10000_10ffff_tmp142 = simd_and(sequence_f0_91_84_adv, byte_range_83_a6);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp142);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            r10000_10ffff_tmp143 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp130);
            r10000_10ffff_tmp144 = simd_not(r10000_10ffff_tmp143);
            r10000_10ffff_tmp145 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp144), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp146 = simd_and(byte_range_80_bf, r10000_10ffff_tmp145);
            r10000_10ffff_tmp147 = simd_and(r10000_10ffff_tmp123, r10000_10ffff_tmp109);
            cc_range_11150_11176_4 = simd_or(r10000_10ffff_tmp146, r10000_10ffff_tmp147);
            carryQ.cq[229] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(229), sequence_f0_91_85_adv));
            r10000_10ffff_tmp148 = simd_and(sequence_f0_91_85_adv, cc_range_11150_11176_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp148);
            byte_86 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp109);
            sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
            r10000_10ffff_tmp149 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp144), simd_andc(r10000_10ffff_tmp131, basis_bits.bit_2));
            byte_range_83_b2 = simd_and(byte_range_80_bf, r10000_10ffff_tmp149);
            carryQ.cq[230] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(230), sequence_f0_91_86_adv));
            r10000_10ffff_tmp150 = simd_and(sequence_f0_91_86_adv, byte_range_83_b2);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp150);
            r10000_10ffff_tmp151 = simd_and(r10000_10ffff_tmp46, tmp1);
            byte_87 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp151);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            r10000_10ffff_tmp152 = simd_xor(basis_bits.bit_5, tmp6);
            r10000_10ffff_tmp153 = simd_and(byte_range_80_87, r10000_10ffff_tmp152);
            r10000_10ffff_tmp154 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp54);
            cc_range_111c1_111da_4 = simd_or(r10000_10ffff_tmp153, r10000_10ffff_tmp154);
            carryQ.cq[231] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(231), sequence_f0_91_87_adv));
            r10000_10ffff_tmp155 = simd_and(sequence_f0_91_87_adv, cc_range_111c1_111da_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp155);
            byte_88 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp96);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            r10000_10ffff_tmp156 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp8);
            r10000_10ffff_tmp157 = simd_not(r10000_10ffff_tmp156);
            r10000_10ffff_tmp158 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp157), simd_andc(r10000_10ffff_tmp143, basis_bits.bit_2));
            r10000_10ffff_tmp159 = simd_and(byte_range_80_bf, r10000_10ffff_tmp158);
            cc_range_11200_11213_4 = simd_or(byte_range_80_91, r10000_10ffff_tmp159);
            carryQ.cq[232] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(232), sequence_f0_91_88_adv));
            r10000_10ffff_tmp160 = simd_and(sequence_f0_91_88_adv, cc_range_11200_11213_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp160);
            sequence_f0_91_8a = simd_and(sequence_f0_91_adv, byte_8a);
            byte_range_b0_bf = r10000_10ffff_tmp123;
            carryQ.cq[233] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8a, carryQ.get_carry_in(233), sequence_f0_91_8a_adv));
            r10000_10ffff_tmp161 = simd_and(sequence_f0_91_8a_adv, byte_range_b0_bf);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp161);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            carryQ.cq[234] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(234), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp162 = simd_and(sequence_f0_91_8b_adv, byte_range_80_9e);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp162);
            sequence_f0_91_8c = simd_and(sequence_f0_91_adv, byte_8c);
            r10000_10ffff_tmp163 = simd_xor(basis_bits.bit_4, r10000_10ffff_tmp48);
            r10000_10ffff_tmp164 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp163);
            r10000_10ffff_tmp165 = simd_not(tmp7);
            r10000_10ffff_tmp166 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp165), simd_andc(r10000_10ffff_tmp27, basis_bits.bit_3));
            r10000_10ffff_tmp167 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp166);
            r10000_10ffff_tmp168 = simd_or(r10000_10ffff_tmp164, r10000_10ffff_tmp167);
            r10000_10ffff_tmp169 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp138), simd_andc(r10000_10ffff_tmp143, basis_bits.bit_2));
            r10000_10ffff_tmp170 = simd_and(byte_range_80_bf, r10000_10ffff_tmp169);
            r10000_10ffff_tmp171 = simd_or(r10000_10ffff_tmp168, r10000_10ffff_tmp170);
            r10000_10ffff_tmp172 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp173 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp172);
            r10000_10ffff_tmp174 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp165), simd_andc(r10000_10ffff_tmp173, basis_bits.bit_3));
            r10000_10ffff_tmp175 = simd_and(r10000_10ffff_tmp58, r10000_10ffff_tmp174);
            r10000_10ffff_tmp176 = simd_or(r10000_10ffff_tmp171, r10000_10ffff_tmp175);
            r10000_10ffff_tmp177 = simd_andc(basis_bits.bit_6, tmp5);
            r10000_10ffff_tmp178 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp177);
            r10000_10ffff_tmp179 = simd_or(r10000_10ffff_tmp176, r10000_10ffff_tmp178);
            r10000_10ffff_tmp180 = simd_not(r10000_10ffff_tmp172);
            r10000_10ffff_tmp181 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp180), simd_andc(r10000_10ffff_tmp48, basis_bits.bit_4));
            r10000_10ffff_tmp182 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp181);
            r10000_10ffff_tmp183 = simd_or(r10000_10ffff_tmp179, r10000_10ffff_tmp182);
            r10000_10ffff_tmp184 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp66);
            cc_range_11305_1133d_4 = simd_or(r10000_10ffff_tmp183, r10000_10ffff_tmp184);
            carryQ.cq[235] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(235), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp185 = simd_and(sequence_f0_91_8c_adv, cc_range_11305_1133d_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp185);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            r10000_10ffff_tmp186 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp86);
            r10000_10ffff_tmp187 = simd_not(r10000_10ffff_tmp186);
            r10000_10ffff_tmp188 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp187), simd_andc(r10000_10ffff_tmp56, basis_bits.bit_2));
            byte_range_9d_a1 = simd_and(byte_range_80_bf, r10000_10ffff_tmp188);
            carryQ.cq[236] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(236), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp189 = simd_and(sequence_f0_91_8d_adv, byte_range_9d_a1);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp189);
            sequence_f0_91_92 = simd_and(sequence_f0_91_adv, byte_92);
            byte_range_80_af = simd_andc(byte_range_80_bf, r80_10ffff_tmp2);
            carryQ.cq[237] = carryout2carry(pablo_blk_Advance(sequence_f0_91_92, carryQ.get_carry_in(237), sequence_f0_91_92_adv));
            r10000_10ffff_tmp190 = simd_and(sequence_f0_91_92_adv, byte_range_80_af);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp190);
            byte_93 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp42);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            r10000_10ffff_tmp191 = simd_andc(basis_bits.bit_6, tmp1);
            r10000_10ffff_tmp192 = simd_andc(r10000_10ffff_tmp46, r10000_10ffff_tmp191);
            cc_range_114c4_114c7_4 = simd_and(r10000_10ffff_tmp41, r10000_10ffff_tmp192);
            carryQ.cq[238] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(238), sequence_f0_91_93_adv));
            r10000_10ffff_tmp193 = simd_and(sequence_f0_91_93_adv, cc_range_114c4_114c7_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp193);
            byte_96 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp109);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            r10000_10ffff_tmp194 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp27);
            r10000_10ffff_tmp195 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp194);
            byte_range_80_ae = simd_andc(byte_range_80_bf, r10000_10ffff_tmp195);
            carryQ.cq[239] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(239), sequence_f0_91_96_adv));
            r10000_10ffff_tmp196 = simd_and(sequence_f0_91_96_adv, byte_range_80_ae);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp196);
            sequence_f0_91_98 = simd_and(sequence_f0_91_adv, byte_98);
            carryQ.cq[240] = carryout2carry(pablo_blk_Advance(sequence_f0_91_98, carryQ.get_carry_in(240), sequence_f0_91_98_adv));
            r10000_10ffff_tmp197 = simd_and(sequence_f0_91_98_adv, byte_range_80_af);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp197);
            byte_99 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp114);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            carryQ.cq[241] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(241), sequence_f0_91_99_adv));
            r10000_10ffff_tmp198 = simd_and(sequence_f0_91_99_adv, byte_84);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp198);
            byte_9a = r10000_10ffff_tmp154;
            sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
            r10000_10ffff_tmp199 = simd_or(basis_bits.bit_3, tmp3);
            r10000_10ffff_tmp200 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp199);
            byte_range_80_aa = simd_andc(byte_range_80_bf, r10000_10ffff_tmp200);
            carryQ.cq[242] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(242), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp201 = simd_and(sequence_f0_91_9a_adv, byte_range_80_aa);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp201);
            sequence_f0_91_a2 = simd_and(sequence_f0_91_adv, byte_a2);
            byte_range_a0_bf = r10000_10ffff_tmp58;
            carryQ.cq[243] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(243), sequence_f0_91_a2_adv));
            r10000_10ffff_tmp202 = simd_and(sequence_f0_91_a2_adv, byte_range_a0_bf);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp202);
            byte_a3 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp42);
            sequence_f0_91_a3 = simd_and(sequence_f0_91_adv, byte_a3);
            r10000_10ffff_tmp203 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp27);
            cc_range_118c0_118ff_4 = simd_or(r10000_10ffff_tmp55, r10000_10ffff_tmp203);
            carryQ.cq[244] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(244), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp204 = simd_and(sequence_f0_91_a3_adv, cc_range_118c0_118ff_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp204);
            sequence_f0_91_ab = simd_and(sequence_f0_91_adv, byte_ab);
            r10000_10ffff_tmp205 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp126);
            r10000_10ffff_tmp206 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp205);
            byte_range_80_b8 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp206);
            carryQ.cq[245] = carryout2carry(pablo_blk_Advance(sequence_f0_91_ab, carryQ.get_carry_in(245), sequence_f0_91_ab_adv));
            r10000_10ffff_tmp207 = simd_and(sequence_f0_91_ab_adv, byte_range_80_b8);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp207);
            sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
            byte_range_80_8d = simd_andc(r10000_10ffff_tmp41, r10000_10ffff_tmp33);
            carryQ.cq[246] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(246), r10000_10ffff_tmp208));
            sequence_f0_92_byte_range_80_8d = simd_and(r10000_10ffff_tmp208, byte_range_80_8d);
            carryQ.cq[247] = carryout2carry(pablo_blk_Advance(sequence_f0_92_byte_range_80_8d, carryQ.get_carry_in(247), r10000_10ffff_tmp209));
            sequence_f0_92_byte_range_80_8d_sfx = simd_and(r10000_10ffff_tmp209, byte_range_80_bf);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_92_byte_range_80_8d_sfx);
            sequence_f0_92_adv = r10000_10ffff_tmp208;
            sequence_f0_92_8e = simd_and(sequence_f0_92_adv, byte_8e);
            byte_range_80_98 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp205);
            carryQ.cq[248] = carryout2carry(pablo_blk_Advance(sequence_f0_92_8e, carryQ.get_carry_in(248), r10000_10ffff_tmp210));
            sequence_f0_92_8e_byte_range_80_98 = simd_and(r10000_10ffff_tmp210, byte_range_80_98);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_92_8e_byte_range_80_98);
            sequence_f0_92_90 = simd_and(sequence_f0_92_adv, byte_90);
            carryQ.cq[249] = carryout2carry(pablo_blk_Advance(sequence_f0_92_90, carryQ.get_carry_in(249), r10000_10ffff_tmp211));
            sequence_f0_92_90_byte_range_80_bf = simd_and(r10000_10ffff_tmp211, byte_range_80_bf);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_92_90_byte_range_80_bf);
            sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
            carryQ.cq[250] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(250), r10000_10ffff_tmp212));
            sequence_f0_92_91_byte_range_80_ae = simd_and(r10000_10ffff_tmp212, byte_range_80_ae);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_92_91_byte_range_80_ae);
            sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
            byte_range_80_8f = r10000_10ffff_tmp41;
            carryQ.cq[251] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(251), r10000_10ffff_tmp213));
            sequence_f0_93_byte_range_80_8f = simd_and(r10000_10ffff_tmp213, byte_range_80_8f);
            carryQ.cq[252] = carryout2carry(pablo_blk_Advance(sequence_f0_93_byte_range_80_8f, carryQ.get_carry_in(252), r10000_10ffff_tmp214));
            sequence_f0_93_byte_range_80_8f_sfx = simd_and(r10000_10ffff_tmp214, byte_range_80_bf);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_93_byte_range_80_8f_sfx);
            sequence_f0_93_adv = r10000_10ffff_tmp213;
            sequence_f0_93_90 = simd_and(sequence_f0_93_adv, byte_90);
            carryQ.cq[253] = carryout2carry(pablo_blk_Advance(sequence_f0_93_90, carryQ.get_carry_in(253), r10000_10ffff_tmp215));
            sequence_f0_93_90_byte_range_80_ae = simd_and(r10000_10ffff_tmp215, byte_range_80_ae);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_93_90_byte_range_80_ae);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            byte_range_a0_a7 = simd_andc(r10000_10ffff_tmp102, basis_bits.bit_4);
            carryQ.cq[254] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(254), r10000_10ffff_tmp216));
            sequence_f0_96_byte_range_a0_a7 = simd_and(r10000_10ffff_tmp216, byte_range_a0_a7);
            carryQ.cq[255] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_a0_a7, carryQ.get_carry_in(255), r10000_10ffff_tmp217));
            sequence_f0_96_byte_range_a0_a7_sfx = simd_and(r10000_10ffff_tmp217, byte_range_80_bf);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_96_byte_range_a0_a7_sfx);
            sequence_f0_96_adv = r10000_10ffff_tmp216;
            sequence_f0_96_a8 = simd_and(sequence_f0_96_adv, byte_a8);
            carryQ.cq[256] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a8, carryQ.get_carry_in(256), r10000_10ffff_tmp218));
            sequence_f0_96_a8_byte_range_80_b8 = simd_and(r10000_10ffff_tmp218, byte_range_80_b8);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_96_a8_byte_range_80_b8);
            sequence_f0_96_a9 = simd_and(sequence_f0_96_adv, byte_a9);
            carryQ.cq[257] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a9, carryQ.get_carry_in(257), r10000_10ffff_tmp219));
            sequence_f0_96_a9_byte_range_80_9e = simd_and(r10000_10ffff_tmp219, byte_range_80_9e);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_96_a9_byte_range_80_9e);
            sequence_f0_96_ab = simd_and(sequence_f0_96_adv, byte_ab);
            r10000_10ffff_tmp220 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp75);
            r10000_10ffff_tmp221 = simd_not(r10000_10ffff_tmp220);
            r10000_10ffff_tmp222 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp221), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ad = simd_and(byte_range_80_bf, r10000_10ffff_tmp222);
            carryQ.cq[258] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(258), r10000_10ffff_tmp223));
            sequence_f0_96_ab_byte_range_90_ad = simd_and(r10000_10ffff_tmp223, byte_range_90_ad);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_96_ab_byte_range_90_ad);
            sequence_f0_96_ac = simd_and(sequence_f0_96_adv, byte_ac);
            carryQ.cq[259] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(259), r10000_10ffff_tmp224));
            sequence_f0_96_ac_byte_range_80_af = simd_and(r10000_10ffff_tmp224, byte_range_80_af);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_96_ac_byte_range_80_af);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            byte_range_80_83 = simd_andc(byte_range_80_8f, tmp5);
            carryQ.cq[260] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(260), r10000_10ffff_tmp225));
            sequence_f0_96_ad_byte_range_80_83 = simd_and(r10000_10ffff_tmp225, byte_range_80_83);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_96_ad_byte_range_80_83);
            sequence_f0_96_ae = simd_and(sequence_f0_96_adv, byte_ae);
            carryQ.cq[261] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ae, carryQ.get_carry_in(261), r10000_10ffff_tmp226));
            sequence_f0_96_ae_byte_range_80_8f = simd_and(r10000_10ffff_tmp226, byte_range_80_8f);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_96_ae_byte_range_80_8f);
            byte_bc = simd_and(byte_range_b0_bf, r10000_10ffff_tmp63);
            sequence_f0_96_bc = simd_and(sequence_f0_96_adv, byte_bc);
            carryQ.cq[262] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bc, carryQ.get_carry_in(262), r10000_10ffff_tmp227));
            sequence_f0_96_bc_byte_range_80_bf = simd_and(r10000_10ffff_tmp227, byte_range_80_bf);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_96_bc_byte_range_80_bf);
            byte_bd = r10000_10ffff_tmp184;
            sequence_f0_96_bd = simd_and(sequence_f0_96_adv, byte_bd);
            r10000_10ffff_tmp228 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
            byte_range_80_84 = simd_andc(r10000_10ffff_tmp228, r10000_10ffff_tmp48);
            carryQ.cq[263] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bd, carryQ.get_carry_in(263), r10000_10ffff_tmp229));
            sequence_f0_96_bd_byte_range_80_84 = simd_and(r10000_10ffff_tmp229, byte_range_80_84);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_96_bd_byte_range_80_84);
            byte_be = simd_and(byte_range_b0_bf, r10000_10ffff_tmp74);
            sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
            r10000_10ffff_tmp230 = simd_or(basis_bits.bit_4, tmp2);
            byte_range_93_9f = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp230);
            carryQ.cq[264] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(264), r10000_10ffff_tmp231));
            sequence_f0_96_be_byte_range_93_9f = simd_and(r10000_10ffff_tmp231, byte_range_93_9f);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_96_be_byte_range_93_9f);
            byte_9b = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp60);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            carryQ.cq[265] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(265), r10000_10ffff_tmp232));
            sequence_f0_9b_80 = simd_and(r10000_10ffff_tmp232, byte_80);
            sequence_f0_9b_adv = r10000_10ffff_tmp232;
            byte_range_80_81 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp86);
            carryQ.cq[266] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_80, carryQ.get_carry_in(266), sequence_f0_9b_80_adv));
            r10000_10ffff_tmp233 = simd_and(sequence_f0_9b_80_adv, byte_range_80_81);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp233);
            sequence_f0_9b_b0 = simd_and(sequence_f0_9b_adv, byte_b0);
            carryQ.cq[267] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b0, carryQ.get_carry_in(267), sequence_f0_9b_b0_adv));
            r10000_10ffff_tmp234 = simd_and(sequence_f0_9b_b0_adv, byte_range_80_bf);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp234);
            sequence_f0_9b_b1 = simd_and(sequence_f0_9b_adv, byte_b1);
            r10000_10ffff_tmp235 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp48);
            r10000_10ffff_tmp236 = simd_andc(byte_range_b0_bf, r10000_10ffff_tmp235);
            cc_range_1bc40_1bc70_4 = simd_or(byte_range_80_aa, r10000_10ffff_tmp236);
            carryQ.cq[268] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b1, carryQ.get_carry_in(268), sequence_f0_9b_b1_adv));
            r10000_10ffff_tmp237 = simd_and(sequence_f0_9b_b1_adv, cc_range_1bc40_1bc70_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp237);
            byte_b2 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp38);
            sequence_f0_9b_b2 = simd_and(sequence_f0_9b_adv, byte_b2);
            r10000_10ffff_tmp238 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp126);
            r10000_10ffff_tmp239 = simd_andc(r10000_10ffff_tmp40, r10000_10ffff_tmp173);
            cc_range_1bc80_1bc90_4 = simd_or(r10000_10ffff_tmp238, r10000_10ffff_tmp239);
            carryQ.cq[269] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(269), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp240 = simd_and(sequence_f0_9b_b2_adv, cc_range_1bc80_1bc90_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp240);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[270] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(270), r10000_10ffff_tmp241));
            sequence_f0_9d_90 = simd_and(r10000_10ffff_tmp241, byte_90);
            sequence_f0_9d_adv = r10000_10ffff_tmp241;
            carryQ.cq[271] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(271), sequence_f0_9d_90_adv));
            r10000_10ffff_tmp242 = simd_and(sequence_f0_9d_90_adv, byte_range_80_bf);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp242);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            r10000_10ffff_tmp243 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp50);
            r10000_10ffff_tmp244 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp69);
            r10000_10ffff_tmp245 = simd_and(byte_range_80_bf, r10000_10ffff_tmp244);
            cc_range_1d440_1d456_4 = simd_or(r10000_10ffff_tmp243, r10000_10ffff_tmp245);
            carryQ.cq[272] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(272), sequence_f0_9d_91_adv));
            r10000_10ffff_tmp246 = simd_and(sequence_f0_9d_91_adv, cc_range_1d440_1d456_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp246);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            r10000_10ffff_tmp247 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp75);
            r10000_10ffff_tmp248 = simd_or(byte_range_80_9c, r10000_10ffff_tmp247);
            r10000_10ffff_tmp249 = simd_or(r10000_10ffff_tmp248, byte_a2);
            r10000_10ffff_tmp250 = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp46);
            r10000_10ffff_tmp251 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp252 = simd_and(r10000_10ffff_tmp250, r10000_10ffff_tmp251);
            r10000_10ffff_tmp253 = simd_or(r10000_10ffff_tmp249, r10000_10ffff_tmp252);
            r10000_10ffff_tmp254 = simd_and(r10000_10ffff_tmp102, basis_bits.bit_4);
            r10000_10ffff_tmp255 = simd_and(r10000_10ffff_tmp254, r10000_10ffff_tmp152);
            r10000_10ffff_tmp256 = simd_or(r10000_10ffff_tmp253, r10000_10ffff_tmp255);
            r10000_10ffff_tmp257 = simd_not(r10000_10ffff_tmp173);
            r10000_10ffff_tmp258 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp257), simd_andc(r10000_10ffff_tmp75, basis_bits.bit_3));
            r10000_10ffff_tmp259 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp258);
            r10000_10ffff_tmp260 = simd_or(r10000_10ffff_tmp256, r10000_10ffff_tmp259);
            r10000_10ffff_tmp261 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp60);
            r10000_10ffff_tmp262 = simd_or(r10000_10ffff_tmp260, r10000_10ffff_tmp261);
            r10000_10ffff_tmp263 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp8);
            r10000_10ffff_tmp264 = simd_and(r10000_10ffff_tmp263, tmp6);
            cc_range_1d480_1d4bd_4 = simd_or(r10000_10ffff_tmp262, r10000_10ffff_tmp264);
            carryQ.cq[273] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(273), sequence_f0_9d_92_adv));
            r10000_10ffff_tmp265 = simd_and(sequence_f0_9d_92_adv, cc_range_1d480_1d4bd_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp265);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            r10000_10ffff_tmp266 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp49);
            r10000_10ffff_tmp267 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp266);
            r10000_10ffff_tmp268 = simd_and(byte_range_80_bf, r10000_10ffff_tmp267);
            cc_range_1d4c0_1d4c5_4 = simd_or(byte_range_80_83, r10000_10ffff_tmp268);
            carryQ.cq[274] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(274), sequence_f0_9d_93_adv));
            r10000_10ffff_tmp269 = simd_and(sequence_f0_9d_93_adv, cc_range_1d4c0_1d4c5_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp269);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            r10000_10ffff_tmp270 = simd_andc(r10000_10ffff_tmp228, r10000_10ffff_tmp32);
            r10000_10ffff_tmp271 = simd_not(tmp2);
            r10000_10ffff_tmp272 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp271), simd_andc(r10000_10ffff_tmp10, basis_bits.bit_4));
            r10000_10ffff_tmp273 = simd_and(byte_range_80_8f, r10000_10ffff_tmp272);
            r10000_10ffff_tmp274 = simd_or(r10000_10ffff_tmp270, r10000_10ffff_tmp273);
            r10000_10ffff_tmp275 = simd_not(r10000_10ffff_tmp49);
            r10000_10ffff_tmp276 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp275), simd_andc(r10000_10ffff_tmp14, basis_bits.bit_3));
            r10000_10ffff_tmp277 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp276);
            r10000_10ffff_tmp278 = simd_or(r10000_10ffff_tmp274, r10000_10ffff_tmp277);
            r10000_10ffff_tmp279 = simd_not(r10000_10ffff_tmp48);
            r10000_10ffff_tmp280 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp279), simd_andc(r10000_10ffff_tmp32, basis_bits.bit_4));
            r10000_10ffff_tmp281 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp280);
            r10000_10ffff_tmp282 = simd_or(r10000_10ffff_tmp278, r10000_10ffff_tmp281);
            r10000_10ffff_tmp283 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp173);
            r10000_10ffff_tmp284 = simd_not(r10000_10ffff_tmp283);
            r10000_10ffff_tmp285 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp284), simd_andc(r10000_10ffff_tmp76, basis_bits.bit_2));
            r10000_10ffff_tmp286 = simd_and(byte_range_80_bf, r10000_10ffff_tmp285);
            r10000_10ffff_tmp287 = simd_or(r10000_10ffff_tmp282, r10000_10ffff_tmp286);
            r10000_10ffff_tmp288 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
            r10000_10ffff_tmp289 = simd_xor(basis_bits.bit_5, tmp1);
            r10000_10ffff_tmp290 = simd_and(r10000_10ffff_tmp288, r10000_10ffff_tmp289);
            cc_range_1d500_1d53b_4 = simd_or(r10000_10ffff_tmp287, r10000_10ffff_tmp290);
            carryQ.cq[275] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(275), sequence_f0_9d_94_adv));
            r10000_10ffff_tmp291 = simd_and(sequence_f0_9d_94_adv, cc_range_1d500_1d53b_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp291);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            r10000_10ffff_tmp292 = simd_and(byte_range_80_8f, r10000_10ffff_tmp109);
            r10000_10ffff_tmp293 = simd_or(byte_range_80_84, r10000_10ffff_tmp292);
            r10000_10ffff_tmp294 = simd_and(r10000_10ffff_tmp55, r10000_10ffff_tmp174);
            r10000_10ffff_tmp295 = simd_or(r10000_10ffff_tmp293, r10000_10ffff_tmp294);
            r10000_10ffff_tmp296 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp121);
            r10000_10ffff_tmp297 = simd_and(byte_range_80_bf, r10000_10ffff_tmp296);
            cc_range_1d540_1d552_4 = simd_or(r10000_10ffff_tmp295, r10000_10ffff_tmp297);
            carryQ.cq[276] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(276), sequence_f0_9d_95_adv));
            r10000_10ffff_tmp298 = simd_and(sequence_f0_9d_95_adv, cc_range_1d540_1d552_4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, r10000_10ffff_tmp298);
            r10000_10ffff_tmp299 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp180), simd_andc(r10000_10ffff_tmp32, basis_bits.bit_4));
            byte_range_96_99 = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp299);
            sequence_f0_9d_byte_range_96_99 = simd_and(sequence_f0_9d_adv, byte_range_96_99);
            carryQ.cq[277] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_96_99, carryQ.get_carry_in(277), r10000_10ffff_tmp300));
            sequence_f0_9d_byte_range_96_99_sfx = simd_and(r10000_10ffff_tmp300, byte_range_80_bf);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_9d_byte_range_96_99_sfx);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            r10000_10ffff_tmp301 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp68);
            r10000_10ffff_tmp302 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp301);
            byte_range_80_a5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp302);
            carryQ.cq[278] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(278), r10000_10ffff_tmp303));
            sequence_f0_9d_9a_byte_range_80_a5 = simd_and(r10000_10ffff_tmp303, byte_range_80_a5);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_9d_9a_byte_range_80_a5);
            sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
            carryQ.cq[279] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(279), r10000_10ffff_tmp304));
            sequence_f0_9d_9b_80 = simd_and(r10000_10ffff_tmp304, byte_80);
            sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
            byte_range_80_94 = r10000_10ffff_tmp243;
            carryQ.cq[280] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(280), r10000_10ffff_tmp305));
            sequence_f0_9d_9c_byte_range_80_94 = simd_and(r10000_10ffff_tmp305, byte_range_80_94);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_9d_9c_byte_range_80_94);
            sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
            r10000_10ffff_tmp306 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp10);
            byte_range_80_8e = simd_andc(byte_range_80_8f, r10000_10ffff_tmp306);
            carryQ.cq[281] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(281), r10000_10ffff_tmp307));
            sequence_f0_9d_9d_byte_range_80_8e = simd_and(r10000_10ffff_tmp307, byte_range_80_8e);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_9d_9d_byte_range_80_8e);
            byte_9e = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp74);
            sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
            carryQ.cq[282] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(282), r10000_10ffff_tmp308));
            sequence_f0_9d_9e_byte_range_80_88 = simd_and(r10000_10ffff_tmp308, byte_range_80_88);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_9d_9e_byte_range_80_88);
            byte_9f = simd_and(r10000_10ffff_tmp40, r10000_10ffff_tmp27);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            byte_range_80_82 = simd_andc(byte_range_80_83, tmp1);
            carryQ.cq[283] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(283), r10000_10ffff_tmp309));
            sequence_f0_9d_9f_byte_range_80_82 = simd_and(r10000_10ffff_tmp309, byte_range_80_82);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_9d_9f_byte_range_80_82);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            r10000_10ffff_tmp310 = simd_andc(r10000_10ffff_tmp102, tmp5);
            byte_range_a0_a2 = simd_andc(r10000_10ffff_tmp310, tmp1);
            carryQ.cq[284] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(284), r10000_10ffff_tmp311));
            sequence_f0_9e_byte_range_a0_a2 = simd_and(r10000_10ffff_tmp311, byte_range_a0_a2);
            carryQ.cq[285] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_a0_a2, carryQ.get_carry_in(285), r10000_10ffff_tmp312));
            sequence_f0_9e_byte_range_a0_a2_sfx = simd_and(r10000_10ffff_tmp312, byte_range_80_bf);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_9e_byte_range_a0_a2_sfx);
            sequence_f0_9e_adv = r10000_10ffff_tmp311;
            sequence_f0_9e_a3 = simd_and(sequence_f0_9e_adv, byte_a3);
            carryQ.cq[286] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(286), r10000_10ffff_tmp313));
            sequence_f0_9e_a3_byte_range_80_84 = simd_and(r10000_10ffff_tmp313, byte_range_80_84);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_9e_a3_byte_range_80_84);
            byte_b8 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp96);
            sequence_f0_9e_b8 = simd_and(sequence_f0_9e_adv, byte_b8);
            carryQ.cq[287] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b8, carryQ.get_carry_in(287), r10000_10ffff_tmp314));
            sequence_f0_9e_b8_byte_range_80_83 = simd_and(r10000_10ffff_tmp314, byte_range_80_83);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_9e_b8_byte_range_80_83);
            byte_b9 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp114);
            sequence_f0_9e_b9 = simd_and(sequence_f0_9e_adv, byte_b9);
            carryQ.cq[288] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b9, carryQ.get_carry_in(288), r10000_10ffff_tmp315));
            sequence_f0_9e_b9_82 = simd_and(r10000_10ffff_tmp315, byte_82);
            byte_ba = simd_and(byte_range_b0_bf, r10000_10ffff_tmp54);
            sequence_f0_9e_ba = simd_and(sequence_f0_9e_adv, byte_ba);
            byte_range_80_89 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp173);
            carryQ.cq[289] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_ba, carryQ.get_carry_in(289), r10000_10ffff_tmp316));
            sequence_f0_9e_ba_byte_range_80_89 = simd_and(r10000_10ffff_tmp316, byte_range_80_89);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_9e_ba_byte_range_80_89);
            byte_range_a0_a9 = simd_andc(r10000_10ffff_tmp102, r10000_10ffff_tmp173);
            byte_f0_byte_range_a0_a9 = simd_and(byte_f0_adv, byte_range_a0_a9);
            carryQ.cq[290] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9, carryQ.get_carry_in(290), r10000_10ffff_tmp317));
            byte_f0_byte_range_a0_a9_sfx = simd_and(r10000_10ffff_tmp317, byte_range_80_bf);
            carryQ.cq[291] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9_sfx, carryQ.get_carry_in(291), r10000_10ffff_tmp318));
            byte_f0_byte_range_a0_a9_sfx_sfx = simd_and(r10000_10ffff_tmp318, byte_range_80_bf);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, byte_f0_byte_range_a0_a9_sfx_sfx);
            sequence_f0_aa = simd_and(byte_f0_adv, byte_aa);
            carryQ.cq[292] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(292), sequence_f0_aa_adv));
            sequence_f0_aa_80 = simd_and(sequence_f0_aa_adv, byte_80);
            byte_range_80_96 = simd_andc(r10000_10ffff_tmp55, r10000_10ffff_tmp98);
            carryQ.cq[293] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_80, carryQ.get_carry_in(293), r10000_10ffff_tmp319));
            sequence_f0_aa_80_byte_range_80_96 = simd_and(r10000_10ffff_tmp319, byte_range_80_96);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_aa_80_byte_range_80_96);
            sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
            carryQ.cq[294] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(294), sequence_f0_ab_adv));
            sequence_f0_ab_80 = simd_and(sequence_f0_ab_adv, byte_80);
            carryQ.cq[295] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_80, carryQ.get_carry_in(295), r10000_10ffff_tmp320));
            sequence_f0_ab_80_byte_range_80_b4 = simd_and(r10000_10ffff_tmp320, byte_range_80_b4);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_ab_80_byte_range_80_b4);
            byte_af = simd_and(r10000_10ffff_tmp102, r10000_10ffff_tmp27);
            sequence_f0_af = simd_and(byte_f0_adv, byte_af);
            carryQ.cq[296] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(296), sequence_f0_af_adv));
            sequence_f0_af_a0 = simd_and(sequence_f0_af_adv, byte_a0);
            carryQ.cq[297] = carryout2carry(pablo_blk_Advance(sequence_f0_af_a0, carryQ.get_carry_in(297), r10000_10ffff_tmp321));
            sequence_f0_af_a0_byte_range_80_9d = simd_and(r10000_10ffff_tmp321, byte_range_80_9d);
            struct_xids_Y.cc = simd_or(struct_xids_Y.cc, sequence_f0_af_a0_byte_range_80_9d);
          }
          else {
            carryQ.CarryDequeueEnqueue(190, 108);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 298);
        }
        carryQ.CarryQ_Adjust(298);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<298, 0> carryQ;
  };

  struct Property_gr_base_Y {
  Property_gr_base_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gr_base_Y & struct_gr_base_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, byte_range_20_7e;
		BitBlock byte_range_c0_ff, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6;
		BitBlock r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13, r80_7ff_tmp14;
		BitBlock r80_7ff_tmp15, r80_7ff_tmp16, cc_range_a0_ae_2, byte_c2_adv;
		BitBlock r80_7ff_tmp17, r80_7ff_tmp18, byte_c3, byte_range_80_bf, byte_c3_adv;
		BitBlock r80_7ff_tmp19, byte_range_c4_cf, r100_3ff_tmp1, byte_range_c4_cb;
		BitBlock r100_2ff_tmp1, r100_2ff_tmp2, r100_2ff_tmp3, byte_range_c4_c8;
		BitBlock r100_2ff_tmp4, r100_2ff_tmp5, r100_2ff_tmp6, byte_c9;
		BitBlock byte_range_80_8f, r100_2ff_tmp7, r100_2ff_tmp8, r100_2ff_tmp9;
		BitBlock r100_24f_tmp1, r100_24f_tmp2, byte_range_c4_c5, r100_17f_tmp1;
		BitBlock byte_range_c4_c5_sfx, r100_24f_tmp3, r100_24f_tmp4, byte_range_c6_c8;
		BitBlock r100_24f_tmp5, r180_24f_tmp1, byte_range_c6_c8_sfx;
		BitBlock byte_c9_byte_range_80_8f, byte_range_90_bf, r100_2ff_tmp10;
		BitBlock r100_2ff_tmp11, byte_ca, byte_range_80_af, r100_2ff_tmp12;
		BitBlock r100_2ff_tmp13, r100_2ff_tmp14, byte_c9_adv, r250_2af_tmp1;
		BitBlock byte_ca_adv, r250_2af_tmp2, byte_range_b0_bf, r100_2ff_tmp15;
		BitBlock r100_2ff_tmp16, byte_cb, r100_2ff_tmp17, r2b0_2ff_tmp1, byte_cb_adv;
		BitBlock r2b0_2ff_tmp2, r100_3ff_tmp2, r100_3ff_tmp3, byte_cd, r100_3ff_tmp4;
		BitBlock r100_3ff_tmp5, byte_range_ce_cf, r100_3ff_tmp6, r370_3ff_tmp1;
		BitBlock r370_3ff_tmp2, r370_3ff_tmp3, r370_3ff_tmp4, cc_range_370_37a_2;
		BitBlock byte_cd_adv, r370_3ff_tmp5, r370_3ff_tmp6, byte_ce, r370_3ff_tmp7;
		BitBlock r370_3ff_tmp8, r370_3ff_tmp9, r370_3ff_tmp10, r370_3ff_tmp11;
		BitBlock r370_3ff_tmp12, r370_3ff_tmp13, r370_3ff_tmp14, r370_3ff_tmp15;
		BitBlock r370_3ff_tmp16, r370_3ff_tmp17, r370_3ff_tmp18, r370_3ff_tmp19;
		BitBlock r370_3ff_tmp20, r370_3ff_tmp21, r370_3ff_tmp22, r370_3ff_tmp23;
		BitBlock cc_range_384_3a3_2, byte_ce_adv, r370_3ff_tmp24, byte_cf, byte_cf_adv;
		BitBlock r370_3ff_tmp25, r80_7ff_tmp20, r80_7ff_tmp21, byte_range_d0_d7;
		BitBlock byte_range_d0_d3, r400_4ff_tmp1, byte_range_d0_d1, r400_4ff_tmp2;
		BitBlock byte_range_d0_d1_sfx, byte_d2, r400_4ff_tmp3, r400_4ff_tmp4;
		BitBlock byte_range_80_82, r400_4ff_tmp5, byte_d2_byte_range_80_82, byte_d3;
		BitBlock r400_4ff_tmp6, byte_d3_byte_range_80_bf, r400_5ff_tmp1, r400_5ff_tmp2;
		BitBlock byte_range_d4_d5, r400_5ff_tmp3, byte_d6, r400_5ff_tmp4;
		BitBlock r400_5ff_tmp5, r400_5ff_tmp6, r500_58f_tmp1, byte_d4, r500_58f_tmp2;
		BitBlock r500_58f_tmp3, byte_d4_adv, r500_52f_tmp1, r500_58f_tmp4;
		BitBlock r500_58f_tmp5, r500_58f_tmp6, byte_d5, r500_58f_tmp7, r500_58f_tmp8;
		BitBlock r530_58f_tmp1, r530_58f_tmp2, byte_range_b1_bf, r530_58f_tmp3;
		BitBlock r530_58f_tmp4, r530_58f_tmp5, r530_58f_tmp6, r530_58f_tmp7;
		BitBlock r530_58f_tmp8, r530_58f_tmp9, r530_58f_tmp10, r530_58f_tmp11;
		BitBlock r530_58f_tmp12, r530_58f_tmp13, r530_58f_tmp14, r530_58f_tmp15;
		BitBlock r530_58f_tmp16, cc_range_540_561_2, byte_d5_adv, r530_58f_tmp17;
		BitBlock r530_58f_tmp18, r530_58f_tmp19, r530_58f_tmp20, r530_58f_tmp21;
		BitBlock r530_58f_tmp22, r530_58f_tmp23, r530_58f_tmp24, r530_58f_tmp25;
		BitBlock cc_range_580_58d_2, byte_d6_adv, r530_58f_tmp26, r400_5ff_tmp7;
		BitBlock r400_5ff_tmp8, byte_d7, r400_5ff_tmp9, r590_5ff_tmp1, r590_5ff_tmp2;
		BitBlock byte_be, r590_5ff_tmp3, r590_5ff_tmp4, r590_5ff_tmp5, r590_5ff_tmp6;
		BitBlock r590_5ff_tmp7, r590_5ff_tmp8, r590_5ff_tmp9, r590_5ff_tmp10;
		BitBlock r590_5ff_tmp11, r590_5ff_tmp12, r590_5ff_tmp13, r590_5ff_tmp14;
		BitBlock r590_5ff_tmp15, r590_5ff_tmp16, cc_range_5c0_5f0_2, byte_d7_adv;
		BitBlock r590_5ff_tmp17, r80_7ff_tmp22, byte_range_d8_db, r600_6ff_tmp1;
		BitBlock byte_d8, r600_6ff_tmp2, r600_6ff_tmp3, r600_6ff_tmp4, r600_6ff_tmp5;
		BitBlock r600_6ff_tmp6, r600_6ff_tmp7, r600_6ff_tmp8, r600_6ff_tmp9;
		BitBlock r600_6ff_tmp10, r600_6ff_tmp11, r600_6ff_tmp12, cc_range_606_61e_2;
		BitBlock byte_d8_adv, r600_6ff_tmp13, r600_6ff_tmp14, r600_6ff_tmp15, byte_d9;
		BitBlock r600_6ff_tmp16, r600_6ff_tmp17, r600_6ff_tmp18, r600_6ff_tmp19;
		BitBlock r600_6ff_tmp20, r600_6ff_tmp21, r600_6ff_tmp22, r600_6ff_tmp23;
		BitBlock r600_6ff_tmp24, cc_range_640_671_2, byte_d9_adv, r600_6ff_tmp25;
		BitBlock r600_6ff_tmp26, byte_da, byte_da_adv, r600_6ff_tmp27, byte_db;
		BitBlock r600_6ff_tmp28, r600_6ff_tmp29, r600_6ff_tmp30, r600_6ff_tmp31;
		BitBlock r600_6ff_tmp32, r600_6ff_tmp33, r600_6ff_tmp34, r600_6ff_tmp35;
		BitBlock r600_6ff_tmp36, r600_6ff_tmp37, r600_6ff_tmp38, r600_6ff_tmp39;
		BitBlock r600_6ff_tmp40, r600_6ff_tmp41, r600_6ff_tmp42, cc_range_6c0_6ee_2;
		BitBlock byte_db_adv, r600_6ff_tmp43, r80_7ff_tmp23, byte_range_dc_dd;
		BitBlock r700_77f_tmp1, byte_dc, r700_77f_tmp2, r700_77f_tmp3, byte_dd;
		BitBlock r700_77f_tmp4, r700_77f_tmp5, r700_77f_tmp6, r700_74f_tmp1;
		BitBlock r700_74f_tmp2, r700_74f_tmp3, r700_74f_tmp4, r700_74f_tmp5;
		BitBlock r700_74f_tmp6, r700_74f_tmp7, r700_74f_tmp8, r700_74f_tmp9;
		BitBlock r700_74f_tmp10, r700_74f_tmp11, r700_74f_tmp12, cc_range_700_712_2;
		BitBlock byte_dc_adv, r700_74f_tmp13, r700_74f_tmp14, byte_range_8d_8f;
		BitBlock byte_dd_adv, r700_74f_tmp15, r700_77f_tmp7, r750_77f_tmp1;
		BitBlock byte_range_de_df, r780_7ff_tmp1, byte_de, r780_7bf_tmp1;
		BitBlock r780_7bf_tmp2, r780_7bf_tmp3, r780_7bf_tmp4, r780_7bf_tmp5;
		BitBlock r780_7bf_tmp6, r780_7bf_tmp7, r780_7bf_tmp8, r780_7bf_tmp9;
		BitBlock cc_range_780_7b1_2, byte_de_adv, r780_7bf_tmp10, byte_df;
		BitBlock r7c0_7ff_tmp1, r7c0_7ff_tmp2, r7c0_7ff_tmp3, r7c0_7ff_tmp4;
		BitBlock r7c0_7ff_tmp5, r7c0_7ff_tmp6, r7c0_7ff_tmp7, r7c0_7ff_tmp8;
		BitBlock r7c0_7ff_tmp9, cc_range_7c0_7f4_2, byte_df_adv, r7c0_7ff_tmp10;
		BitBlock r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1, byte_range_e0_e3;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4, byte_e4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, byte_range_80_b7;
		BitBlock r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10, r800_4dff_tmp1;
		BitBlock byte_range_e0_e1, r800_1fff_tmp1, byte_e0, r800_fff_tmp1, byte_a0;
		BitBlock r800_fff_tmp2, sequence_e0_a0, byte_e0_adv, r800_fff_tmp3;
		BitBlock r800_fff_tmp4, r800_fff_tmp5, r800_fff_tmp6, r800_fff_tmp7;
		BitBlock r800_fff_tmp8, r800_fff_tmp9, r800_fff_tmp10, r800_fff_tmp11;
		BitBlock r800_fff_tmp12, r800_fff_tmp13, r800_fff_tmp14, r800_fff_tmp15;
		BitBlock r800_fff_tmp16, r800_fff_tmp17, r800_fff_tmp18, r800_fff_tmp19;
		BitBlock r800_fff_tmp20, r800_fff_tmp21, r800_fff_tmp22, r800_fff_tmp23;
		BitBlock cc_range_800_830_3, sequence_e0_a0_adv, r800_fff_tmp24;
		BitBlock r800_fff_tmp25, r800_fff_tmp26, byte_a1, sequence_e0_a1;
		BitBlock r800_fff_tmp27, r800_fff_tmp28, r800_fff_tmp29, r800_fff_tmp30;
		BitBlock r800_fff_tmp31, r800_fff_tmp32, cc_range_840_85e_3;
		BitBlock sequence_e0_a1_adv, r800_fff_tmp33, r800_fff_tmp34, byte_a2;
		BitBlock sequence_e0_a2, r800_fff_tmp35, r800_fff_tmp36, r800_fff_tmp37;
		BitBlock byte_range_a0_b2, sequence_e0_a2_adv, r800_fff_tmp38, byte_a4;
		BitBlock sequence_e0_a4, r800_fff_tmp39, r800_fff_tmp40, r800_fff_tmp41;
		BitBlock r800_fff_tmp42, r800_fff_tmp43, r800_fff_tmp44, r800_fff_tmp45;
		BitBlock r800_fff_tmp46, r800_fff_tmp47, r800_fff_tmp48, r800_fff_tmp49;
		BitBlock r800_fff_tmp50, cc_range_903_93d_3, sequence_e0_a4_adv;
		BitBlock r800_fff_tmp51, r800_fff_tmp52, byte_a5, sequence_e0_a5;
		BitBlock r800_fff_tmp53, r800_fff_tmp54, r800_fff_tmp55, r800_fff_tmp56;
		BitBlock r800_fff_tmp57, r800_fff_tmp58, r800_fff_tmp59, r800_fff_tmp60;
		BitBlock r800_fff_tmp61, r800_fff_tmp62, r800_fff_tmp63, r800_fff_tmp64;
		BitBlock r800_fff_tmp65, r800_fff_tmp66, r800_fff_tmp67, r800_fff_tmp68;
		BitBlock r800_fff_tmp69, r800_fff_tmp70, r800_fff_tmp71, cc_range_940_964_3;
		BitBlock sequence_e0_a5_adv, r800_fff_tmp72, r800_fff_tmp73, byte_a6;
		BitBlock sequence_e0_a6, r800_fff_tmp74, r800_fff_tmp75, r800_fff_tmp76;
		BitBlock r800_fff_tmp77, r800_fff_tmp78, r800_fff_tmp79, r800_fff_tmp80;
		BitBlock r800_fff_tmp81, r800_fff_tmp82, r800_fff_tmp83, r800_fff_tmp84;
		BitBlock r800_fff_tmp85, r800_fff_tmp86, r800_fff_tmp87, r800_fff_tmp88;
		BitBlock r800_fff_tmp89, r800_fff_tmp90, r800_fff_tmp91, r800_fff_tmp92;
		BitBlock r800_fff_tmp93, r800_fff_tmp94, r800_fff_tmp95, r800_fff_tmp96;
		BitBlock r800_fff_tmp97, r800_fff_tmp98, r800_fff_tmp99, r800_fff_tmp100;
		BitBlock cc_range_980_9bf_3, sequence_e0_a6_adv, r800_fff_tmp101;
		BitBlock r800_fff_tmp102, byte_a7, sequence_e0_a7, r800_fff_tmp103;
		BitBlock r800_fff_tmp104, r800_fff_tmp105, r800_fff_tmp106, r800_fff_tmp107;
		BitBlock r800_fff_tmp108, r800_fff_tmp109, r800_fff_tmp110, r800_fff_tmp111;
		BitBlock r800_fff_tmp112, r800_fff_tmp113, r800_fff_tmp114, r800_fff_tmp115;
		BitBlock r800_fff_tmp116, r800_fff_tmp117, r800_fff_tmp118, r800_fff_tmp119;
		BitBlock r800_fff_tmp120, r800_fff_tmp121, r800_fff_tmp122, cc_range_9c0_9e6_3;
		BitBlock sequence_e0_a7_adv, r800_fff_tmp123, byte_a8, sequence_e0_a8;
		BitBlock r800_fff_tmp124, r800_fff_tmp125, r800_fff_tmp126, r800_fff_tmp127;
		BitBlock r800_fff_tmp128, r800_fff_tmp129, r800_fff_tmp130, r800_fff_tmp131;
		BitBlock r800_fff_tmp132, r800_fff_tmp133, r800_fff_tmp134, r800_fff_tmp135;
		BitBlock r800_fff_tmp136, r800_fff_tmp137, r800_fff_tmp138, r800_fff_tmp139;
		BitBlock r800_fff_tmp140, r800_fff_tmp141, r800_fff_tmp142, cc_range_a03_a3e_3;
		BitBlock sequence_e0_a8_adv, r800_fff_tmp143, r800_fff_tmp144, byte_a9;
		BitBlock sequence_e0_a9, r800_fff_tmp145, r800_fff_tmp146, r800_fff_tmp147;
		BitBlock r800_fff_tmp148, r800_fff_tmp149, r800_fff_tmp150, r800_fff_tmp151;
		BitBlock r800_fff_tmp152, r800_fff_tmp153, cc_range_a40_a72_3;
		BitBlock sequence_e0_a9_adv, r800_fff_tmp154, byte_aa, sequence_e0_aa;
		BitBlock r800_fff_tmp155, r800_fff_tmp156, r800_fff_tmp157, r800_fff_tmp158;
		BitBlock r800_fff_tmp159, r800_fff_tmp160, r800_fff_tmp161, r800_fff_tmp162;
		BitBlock r800_fff_tmp163, r800_fff_tmp164, r800_fff_tmp165, r800_fff_tmp166;
		BitBlock r800_fff_tmp167, r800_fff_tmp168, cc_range_a83_abd_3;
		BitBlock sequence_e0_aa_adv, r800_fff_tmp169, byte_ab, sequence_e0_ab;
		BitBlock r800_fff_tmp170, r800_fff_tmp171, r800_fff_tmp172, r800_fff_tmp173;
		BitBlock r800_fff_tmp174, r800_fff_tmp175, r800_fff_tmp176, r800_fff_tmp177;
		BitBlock r800_fff_tmp178, cc_range_ac0_ae6_3, sequence_e0_ab_adv;
		BitBlock r800_fff_tmp179, r800_fff_tmp180, byte_ac, sequence_e0_ac;
		BitBlock r800_fff_tmp181, r800_fff_tmp182, r800_fff_tmp183, r800_fff_tmp184;
		BitBlock r800_fff_tmp185, r800_fff_tmp186, r800_fff_tmp187, cc_range_b02_b3d_3;
		BitBlock sequence_e0_ac_adv, r800_fff_tmp188, byte_ad, sequence_e0_ad;
		BitBlock r800_fff_tmp189, r800_fff_tmp190, r800_fff_tmp191, r800_fff_tmp192;
		BitBlock r800_fff_tmp193, cc_range_b40_b66_3, sequence_e0_ad_adv;
		BitBlock r800_fff_tmp194, byte_ae, sequence_e0_ae, r800_fff_tmp195;
		BitBlock r800_fff_tmp196, r800_fff_tmp197, r800_fff_tmp198, r800_fff_tmp199;
		BitBlock r800_fff_tmp200, r800_fff_tmp201, r800_fff_tmp202, r800_fff_tmp203;
		BitBlock r800_fff_tmp204, r800_fff_tmp205, r800_fff_tmp206, r800_fff_tmp207;
		BitBlock r800_fff_tmp208, r800_fff_tmp209, r800_fff_tmp210, r800_fff_tmp211;
		BitBlock r800_fff_tmp212, r800_fff_tmp213, r800_fff_tmp214, r800_fff_tmp215;
		BitBlock r800_fff_tmp216, cc_range_b83_bbf_3, sequence_e0_ae_adv;
		BitBlock r800_fff_tmp217, byte_af, sequence_e0_af, r800_fff_tmp218;
		BitBlock r800_fff_tmp219, r800_fff_tmp220, r800_fff_tmp221, r800_fff_tmp222;
		BitBlock r800_fff_tmp223, r800_fff_tmp224, r800_fff_tmp225, r800_fff_tmp226;
		BitBlock r800_fff_tmp227, r800_fff_tmp228, r800_fff_tmp229, cc_range_bc1_be6_3;
		BitBlock sequence_e0_af_adv, r800_fff_tmp230, byte_b0, sequence_e0_b0;
		BitBlock r800_fff_tmp231, r800_fff_tmp232, r800_fff_tmp233, r800_fff_tmp234;
		BitBlock r800_fff_tmp235, r800_fff_tmp236, r800_fff_tmp237, r800_fff_tmp238;
		BitBlock r800_fff_tmp239, r800_fff_tmp240, r800_fff_tmp241, cc_range_c01_c3d_3;
		BitBlock sequence_e0_b0_adv, r800_fff_tmp242, byte_b1, sequence_e0_b1;
		BitBlock r800_fff_tmp243, r800_fff_tmp244, r800_fff_tmp245, r800_fff_tmp246;
		BitBlock r800_fff_tmp247, r800_fff_tmp248, r800_fff_tmp249, cc_range_c41_c78_3;
		BitBlock sequence_e0_b1_adv, r800_fff_tmp250, byte_b2, sequence_e0_b2;
		BitBlock r800_fff_tmp251, r800_fff_tmp252, r800_fff_tmp253, r800_fff_tmp254;
		BitBlock r800_fff_tmp255, r800_fff_tmp256, r800_fff_tmp257, r800_fff_tmp258;
		BitBlock cc_range_c82_cbd_3, sequence_e0_b2_adv, r800_fff_tmp259, byte_b3;
		BitBlock sequence_e0_b3, r800_fff_tmp260, r800_fff_tmp261, r800_fff_tmp262;
		BitBlock r800_fff_tmp263, r800_fff_tmp264, r800_fff_tmp265, r800_fff_tmp266;
		BitBlock r800_fff_tmp267, r800_fff_tmp268, r800_fff_tmp269, r800_fff_tmp270;
		BitBlock r800_fff_tmp271, r800_fff_tmp272, cc_range_cc0_cf1_3;
		BitBlock sequence_e0_b3_adv, r800_fff_tmp273, byte_b4, sequence_e0_b4;
		BitBlock r800_fff_tmp274, r800_fff_tmp275, r800_fff_tmp276, r800_fff_tmp277;
		BitBlock r800_fff_tmp278, r800_fff_tmp279, cc_range_d02_d3f_3;
		BitBlock sequence_e0_b4_adv, r800_fff_tmp280, byte_b5, sequence_e0_b5;
		BitBlock r800_fff_tmp281, r800_fff_tmp282, r800_fff_tmp283, r800_fff_tmp284;
		BitBlock r800_fff_tmp285, r800_fff_tmp286, r800_fff_tmp287, r800_fff_tmp288;
		BitBlock r800_fff_tmp289, cc_range_d40_d79_3, sequence_e0_b5_adv;
		BitBlock r800_fff_tmp290, byte_b6, sequence_e0_b6, r800_fff_tmp291;
		BitBlock r800_fff_tmp292, r800_fff_tmp293, r800_fff_tmp294, r800_fff_tmp295;
		BitBlock r800_fff_tmp296, r800_fff_tmp297, r800_fff_tmp298, r800_fff_tmp299;
		BitBlock r800_fff_tmp300, r800_fff_tmp301, r800_fff_tmp302, r800_fff_tmp303;
		BitBlock r800_fff_tmp304, r800_fff_tmp305, cc_range_d82_dbd_3;
		BitBlock sequence_e0_b6_adv, r800_fff_tmp306, byte_b7, sequence_e0_b7;
		BitBlock r800_fff_tmp307, r800_fff_tmp308, r800_fff_tmp309, r800_fff_tmp310;
		BitBlock r800_fff_tmp311, r800_fff_tmp312, cc_range_dc0_df2_3;
		BitBlock sequence_e0_b7_adv, r800_fff_tmp313, byte_b8, sequence_e0_b8;
		BitBlock r800_fff_tmp314, r800_fff_tmp315, r800_fff_tmp316, r800_fff_tmp317;
		BitBlock r800_fff_tmp318, r800_fff_tmp319, cc_range_e01_e3f_3;
		BitBlock sequence_e0_b8_adv, r800_fff_tmp320, byte_b9, sequence_e0_b9;
		BitBlock r800_fff_tmp321, r800_fff_tmp322, cc_range_e40_e4f_3;
		BitBlock sequence_e0_b9_adv, r800_fff_tmp323, byte_ba, sequence_e0_ba;
		BitBlock r800_fff_tmp324, r800_fff_tmp325, r800_fff_tmp326, r800_fff_tmp327;
		BitBlock r800_fff_tmp328, r800_fff_tmp329, r800_fff_tmp330, r800_fff_tmp331;
		BitBlock r800_fff_tmp332, r800_fff_tmp333, r800_fff_tmp334, r800_fff_tmp335;
		BitBlock r800_fff_tmp336, r800_fff_tmp337, r800_fff_tmp338, r800_fff_tmp339;
		BitBlock r800_fff_tmp340, r800_fff_tmp341, r800_fff_tmp342, r800_fff_tmp343;
		BitBlock r800_fff_tmp344, r800_fff_tmp345, r800_fff_tmp346, cc_range_e81_ebd_3;
		BitBlock sequence_e0_ba_adv, r800_fff_tmp347, byte_bb, sequence_e0_bb;
		BitBlock r800_fff_tmp348, r800_fff_tmp349, r800_fff_tmp350, r800_fff_tmp351;
		BitBlock r800_fff_tmp352, r800_fff_tmp353, cc_range_ec0_edc_3;
		BitBlock sequence_e0_bb_adv, r800_fff_tmp354, byte_bc, sequence_e0_bc;
		BitBlock r800_fff_tmp355, r800_fff_tmp356, r800_fff_tmp357, r800_fff_tmp358;
		BitBlock r800_fff_tmp359, r800_fff_tmp360, r800_fff_tmp361, r800_fff_tmp362;
		BitBlock r800_fff_tmp363, cc_range_f00_f3a_3, sequence_e0_bc_adv;
		BitBlock r800_fff_tmp364, byte_bd, sequence_e0_bd, r800_fff_tmp365;
		BitBlock r800_fff_tmp366, r800_fff_tmp367, r800_fff_tmp368, r800_fff_tmp369;
		BitBlock cc_range_f40_f7f_3, sequence_e0_bd_adv, r800_fff_tmp370;
		BitBlock sequence_e0_be, r800_fff_tmp371, r800_fff_tmp372, r800_fff_tmp373;
		BitBlock cc_range_f85_fbe_3, sequence_e0_be_adv, r800_fff_tmp374, byte_bf;
		BitBlock sequence_e0_bf, r800_fff_tmp375, r800_fff_tmp376, r800_fff_tmp377;
		BitBlock r800_fff_tmp378, r800_fff_tmp379, r800_fff_tmp380, r800_fff_tmp381;
		BitBlock cc_range_fc0_fce_3, sequence_e0_bf_adv, r800_fff_tmp382;
		BitBlock r800_1fff_tmp2, r800_1fff_tmp3, byte_e1, r1000_1fff_tmp1;
		BitBlock r1000_1fff_tmp2, byte_80, r1000_1fff_tmp3, sequence_e1_80;
		BitBlock byte_e1_adv, r1000_1fff_tmp4, r1000_1fff_tmp5, r1000_1fff_tmp6;
		BitBlock r1000_1fff_tmp7, r1000_1fff_tmp8, r1000_1fff_tmp9, r1000_1fff_tmp10;
		BitBlock r1000_1fff_tmp11, r1000_1fff_tmp12, r1000_1fff_tmp13;
		BitBlock r1000_1fff_tmp14, r1000_1fff_tmp15, r1000_1fff_tmp16;
		BitBlock r1000_1fff_tmp17, r1000_1fff_tmp18, r1000_1fff_tmp19;
		BitBlock r1000_1fff_tmp20, cc_range_1000_103f_3, sequence_e1_80_adv;
		BitBlock r1000_1fff_tmp21, byte_81, sequence_e1_81, r1000_1fff_tmp22;
		BitBlock r1000_1fff_tmp23, r1000_1fff_tmp24, r1000_1fff_tmp25;
		BitBlock r1000_1fff_tmp26, r1000_1fff_tmp27, r1000_1fff_tmp28;
		BitBlock r1000_1fff_tmp29, r1000_1fff_tmp30, r1000_1fff_tmp31;
		BitBlock r1000_1fff_tmp32, r1000_1fff_tmp33, r1000_1fff_tmp34;
		BitBlock r1000_1fff_tmp35, r1000_1fff_tmp36, cc_range_1040_1075_3;
		BitBlock sequence_e1_81_adv, r1000_1fff_tmp37, r1000_1fff_tmp38;
		BitBlock r1000_1fff_tmp39, byte_82, sequence_e1_82, r1000_1fff_tmp40;
		BitBlock r1000_1fff_tmp41, r1000_1fff_tmp42, r1000_1fff_tmp43;
		BitBlock r1000_1fff_tmp44, r1000_1fff_tmp45, r1000_1fff_tmp46;
		BitBlock r1000_1fff_tmp47, r1000_1fff_tmp48, r1000_1fff_tmp49;
		BitBlock r1000_1fff_tmp50, r1000_1fff_tmp51, r1000_1fff_tmp52;
		BitBlock r1000_1fff_tmp53, r1000_1fff_tmp54, r1000_1fff_tmp55;
		BitBlock r1000_1fff_tmp56, cc_range_1080_109e_3, sequence_e1_82_adv;
		BitBlock r1000_1fff_tmp57, r1000_1fff_tmp58, byte_83, sequence_e1_83;
		BitBlock r1000_1fff_tmp59, r1000_1fff_tmp60, r1000_1fff_tmp61;
		BitBlock r1000_1fff_tmp62, r1000_1fff_tmp63, r1000_1fff_tmp64;
		BitBlock r1000_1fff_tmp65, r1000_1fff_tmp66, r1000_1fff_tmp67;
		BitBlock cc_range_10c0_10d0_3, sequence_e1_83_adv, r1000_1fff_tmp68;
		BitBlock r1000_1fff_tmp69, r1000_1fff_tmp70, r1000_1fff_tmp71;
		BitBlock byte_range_84_88, byte_e1_byte_range_84_88, r1000_1fff_tmp72;
		BitBlock byte_e1_byte_range_84_88_sfx, r1000_1fff_tmp73, r1000_1fff_tmp74;
		BitBlock byte_89, sequence_e1_89, r1000_1fff_tmp75, byte_range_80_88;
		BitBlock r1000_1fff_tmp76, sequence_e1_89_byte_range_80_88, r1000_1fff_tmp77;
		BitBlock byte_8a, sequence_e1_8a, r1000_1fff_tmp78;
		BitBlock sequence_e1_8a_byte_range_80_88, r1000_1fff_tmp79, byte_8b;
		BitBlock sequence_e1_8b, r1000_1fff_tmp80, sequence_e1_8b_80, r1000_1fff_tmp81;
		BitBlock byte_8c, sequence_e1_8c, r1000_1fff_tmp82, r1000_1fff_tmp83;
		BitBlock byte_range_80_90, r1000_1fff_tmp84, sequence_e1_8c_byte_range_80_90;
		BitBlock byte_8d, sequence_e1_8d, r1000_1fff_tmp85, r1000_1fff_tmp86;
		BitBlock r1000_1fff_tmp87, byte_range_80_9a, r1000_1fff_tmp88;
		BitBlock sequence_e1_8d_byte_range_80_9a, r1000_1fff_tmp89, byte_8e;
		BitBlock sequence_e1_8e, r1000_1fff_tmp90, r1000_1fff_tmp91, r1000_1fff_tmp92;
		BitBlock byte_range_80_99, r1000_1fff_tmp93, sequence_e1_8e_byte_range_80_99;
		BitBlock byte_8f, sequence_e1_8f, r1000_1fff_tmp94, r1000_1fff_tmp95;
		BitBlock byte_range_80_b4, r1000_1fff_tmp96, sequence_e1_8f_byte_range_80_b4;
		BitBlock r1000_1fff_tmp97, byte_90, sequence_e1_90, r1000_1fff_tmp98;
		BitBlock sequence_e1_90_byte_range_80_bf, byte_9a, sequence_e1_9a;
		BitBlock r1000_1fff_tmp99, byte_range_80_9c, r1000_1fff_tmp100;
		BitBlock sequence_e1_9a_byte_range_80_9c, byte_9b, sequence_e1_9b;
		BitBlock r1000_1fff_tmp101, r1000_1fff_tmp102, byte_range_80_b8;
		BitBlock r1000_1fff_tmp103, sequence_e1_9b_byte_range_80_b8, byte_9c;
		BitBlock sequence_e1_9c, r1000_1fff_tmp104, byte_range_80_8c;
		BitBlock r1000_1fff_tmp105, sequence_e1_9c_byte_range_80_8c, byte_9d;
		BitBlock sequence_e1_9d, r1000_1fff_tmp106, byte_range_80_91;
		BitBlock r1000_1fff_tmp107, sequence_e1_9d_byte_range_80_91, byte_9e;
		BitBlock sequence_e1_9e, r1000_1fff_tmp108, r1000_1fff_tmp109;
		BitBlock byte_range_80_b3, r1000_1fff_tmp110, sequence_e1_9e_byte_range_80_b3;
		BitBlock byte_9f, sequence_e1_9f, r1000_1fff_tmp111, byte_range_80_85;
		BitBlock r1000_1fff_tmp112, sequence_e1_9f_byte_range_80_85, r1000_1fff_tmp113;
		BitBlock sequence_e1_a0, byte_range_80_8a, r1000_1fff_tmp114;
		BitBlock sequence_e1_a0_byte_range_80_8a, sequence_e1_a1, r1000_1fff_tmp115;
		BitBlock sequence_e1_a1_byte_range_80_b7, sequence_e1_a2, r1000_1fff_tmp116;
		BitBlock r1000_1fff_tmp117, byte_range_80_a8, r1000_1fff_tmp118;
		BitBlock sequence_e1_a2_byte_range_80_a8, byte_a3, sequence_e1_a3;
		BitBlock r1000_1fff_tmp119, r1000_1fff_tmp120, r1000_1fff_tmp121;
		BitBlock byte_range_80_b5, r1000_1fff_tmp122, sequence_e1_a3_byte_range_80_b5;
		BitBlock sequence_e1_a4, r1000_1fff_tmp123, byte_range_80_9e;
		BitBlock r1000_1fff_tmp124, sequence_e1_a4_byte_range_80_9e, r1000_1fff_tmp125;
		BitBlock sequence_e1_a5, r1000_1fff_tmp126, sequence_e1_a5_80;
		BitBlock r1000_1fff_tmp127, sequence_e1_a6, r1000_1fff_tmp128;
		BitBlock r1000_1fff_tmp129, byte_range_80_ab, r1000_1fff_tmp130;
		BitBlock sequence_e1_a6_byte_range_80_ab, sequence_e1_a7, byte_range_80_89;
		BitBlock r1000_1fff_tmp131, sequence_e1_a7_byte_range_80_89, sequence_e1_a8;
		BitBlock r1000_1fff_tmp132, r1000_1fff_tmp133, byte_range_80_96;
		BitBlock r1000_1fff_tmp134, sequence_e1_a8_byte_range_80_96, sequence_e1_a9;
		BitBlock byte_range_80_95, r1000_1fff_tmp135, sequence_e1_a9_byte_range_80_95;
		BitBlock sequence_e1_aa, r1000_1fff_tmp136, sequence_e1_aa_byte_range_80_89;
		BitBlock sequence_e1_ac, r1000_1fff_tmp137, r1000_1fff_tmp138;
		BitBlock r1000_1fff_tmp139, byte_range_84_b3, r1000_1fff_tmp140;
		BitBlock sequence_e1_ac_byte_range_84_b3, sequence_e1_ad, byte_range_80_81;
		BitBlock r1000_1fff_tmp141, sequence_e1_ad_byte_range_80_81, sequence_e1_ae;
		BitBlock r1000_1fff_tmp142, r1000_1fff_tmp143, byte_range_82_a1;
		BitBlock r1000_1fff_tmp144, sequence_e1_ae_byte_range_82_a1, sequence_e1_af;
		BitBlock r1000_1fff_tmp145, r1000_1fff_tmp146, byte_range_80_a5;
		BitBlock r1000_1fff_tmp147, sequence_e1_af_byte_range_80_a5, r1000_1fff_tmp148;
		BitBlock sequence_e1_b0, r1000_1fff_tmp149, sequence_e1_b0_byte_range_80_ab;
		BitBlock sequence_e1_b1, r1000_1fff_tmp150, sequence_e1_b1_byte_range_80_89;
		BitBlock sequence_e1_b3, byte_range_80_87, r1000_1fff_tmp151;
		BitBlock sequence_e1_b3_byte_range_80_87, sequence_e1_b4, r1000_1fff_tmp152;
		BitBlock sequence_e1_b4_byte_range_80_bf, sequence_e1_b8, r1000_1fff_tmp153;
		BitBlock sequence_e1_b8_byte_range_80_bf, sequence_e1_bc, r1000_1fff_tmp154;
		BitBlock sequence_e1_bc_byte_range_80_95, sequence_e1_bd, r1000_1fff_tmp155;
		BitBlock sequence_e1_bd_byte_range_80_85, sequence_e1_be, r1000_1fff_tmp156;
		BitBlock sequence_e1_be_byte_range_80_b4, sequence_e1_bf, byte_range_80_84;
		BitBlock r1000_1fff_tmp157, sequence_e1_bf_byte_range_80_84, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3;
		BitBlock r2000_2fff_tmp4, sequence_e2_80, byte_e2_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, r2000_2fff_tmp9;
		BitBlock r2000_2fff_tmp10, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock r2000_2fff_tmp13, r2000_2fff_tmp14, r2000_2fff_tmp15;
		BitBlock cc_range_2000_202f_3, sequence_e2_80_adv, r2000_2fff_tmp16;
		BitBlock r2000_2fff_tmp17, r2000_2fff_tmp18, sequence_e2_81, r2000_2fff_tmp19;
		BitBlock r2000_2fff_tmp20, r2000_2fff_tmp21, r2000_2fff_tmp22;
		BitBlock r2000_2fff_tmp23, cc_range_2040_2074_3, sequence_e2_81_adv;
		BitBlock r2000_2fff_tmp24, sequence_e2_82, r2000_2fff_tmp25, r2000_2fff_tmp26;
		BitBlock r2000_2fff_tmp27, r2000_2fff_tmp28, r2000_2fff_tmp29;
		BitBlock r2000_2fff_tmp30, r2000_2fff_tmp31, r2000_2fff_tmp32;
		BitBlock r2000_2fff_tmp33, r2000_2fff_tmp34, r2000_2fff_tmp35;
		BitBlock r2000_2fff_tmp36, cc_range_2080_20a0_3, sequence_e2_82_adv;
		BitBlock r2000_2fff_tmp37, r2000_2fff_tmp38, byte_range_84_85;
		BitBlock byte_e2_byte_range_84_85, r2000_2fff_tmp39;
		BitBlock byte_e2_byte_range_84_85_sfx, r2000_2fff_tmp40, r2000_2fff_tmp41;
		BitBlock byte_86, sequence_e2_86, r2000_2fff_tmp42, r2000_2fff_tmp43;
		BitBlock r2000_2fff_tmp44, sequence_e2_86_byte_range_80_89, r2000_2fff_tmp45;
		BitBlock byte_87, sequence_e2_87, r2000_2fff_tmp46;
		BitBlock sequence_e2_87_byte_range_80_bf, sequence_e2_8f, r2000_2fff_tmp47;
		BitBlock r2000_2fff_tmp48, byte_range_80_ba, r2000_2fff_tmp49;
		BitBlock sequence_e2_8f_byte_range_80_ba, r2000_2fff_tmp50, sequence_e2_90;
		BitBlock r2000_2fff_tmp51, r2000_2fff_tmp52, r2000_2fff_tmp53;
		BitBlock byte_range_80_a6, r2000_2fff_tmp54, sequence_e2_90_byte_range_80_a6;
		BitBlock byte_91, sequence_e2_91, r2000_2fff_tmp55;
		BitBlock sequence_e2_91_byte_range_80_8a, byte_92, sequence_e2_92;
		BitBlock r2000_2fff_tmp56, sequence_e2_92_byte_range_80_bf, r2000_2fff_tmp57;
		BitBlock r2000_2fff_tmp58, sequence_e2_ad, r2000_2fff_tmp59, r2000_2fff_tmp60;
		BitBlock r2000_2fff_tmp61, sequence_e2_ad_byte_range_80_b3, r2000_2fff_tmp62;
		BitBlock sequence_e2_ae, r2000_2fff_tmp63, r2000_2fff_tmp64, r2000_2fff_tmp65;
		BitBlock r2000_2fff_tmp66, r2000_2fff_tmp67, sequence_e2_ae_byte_range_80_95;
		BitBlock sequence_e2_af, r2000_2fff_tmp68, r2000_2fff_tmp69, r2000_2fff_tmp70;
		BitBlock sequence_e2_af_byte_range_80_88, r2000_2fff_tmp71, sequence_e2_b0;
		BitBlock r2000_2fff_tmp72, byte_range_80_ae, r2000_2fff_tmp73;
		BitBlock sequence_e2_b0_byte_range_80_ae, sequence_e2_b1, r2000_2fff_tmp74;
		BitBlock r2000_2fff_tmp75, sequence_e2_b1_byte_range_80_9e, sequence_e2_b2;
		BitBlock r2000_2fff_tmp76, sequence_e2_b2_byte_range_80_bf, r2000_2fff_tmp77;
		BitBlock sequence_e2_b3, r2000_2fff_tmp78, sequence_e2_b3_byte_range_80_ae;
		BitBlock sequence_e2_b4, r2000_2fff_tmp79, r2000_2fff_tmp80, r2000_2fff_tmp81;
		BitBlock sequence_e2_b4_byte_range_80_a5, r2000_2fff_tmp82, sequence_e2_b5;
		BitBlock r2000_2fff_tmp83, byte_range_80_a7, r2000_2fff_tmp84;
		BitBlock sequence_e2_b5_byte_range_80_a7, sequence_e2_b6, r2000_2fff_tmp85;
		BitBlock r2000_2fff_tmp86, sequence_e2_b6_byte_range_80_96, sequence_e2_b7;
		BitBlock r2000_2fff_tmp87, byte_range_80_86, r2000_2fff_tmp88;
		BitBlock sequence_e2_b7_byte_range_80_86, r2000_2fff_tmp89, r2000_2fff_tmp90;
		BitBlock sequence_e2_b8, r2000_2fff_tmp91, sequence_e2_b8_byte_range_80_bf;
		BitBlock r2000_2fff_tmp92, sequence_e2_b9, r2000_2fff_tmp93, r2000_2fff_tmp94;
		BitBlock sequence_e2_b9_byte_range_80_82, r2000_2fff_tmp95, sequence_e2_ba;
		BitBlock r2000_2fff_tmp96, r2000_2fff_tmp97, sequence_e2_ba_byte_range_80_99;
		BitBlock r2000_2fff_tmp98, sequence_e2_bb, r2000_2fff_tmp99;
		BitBlock sequence_e2_bb_byte_range_80_b3, r2000_2fff_tmp100, sequence_e2_bc;
		BitBlock r2000_2fff_tmp101, sequence_e2_bc_byte_range_80_bf, sequence_e2_bf;
		BitBlock r2000_2fff_tmp102, sequence_e2_bf_byte_range_80_95, r2000_4dff_tmp3;
		BitBlock byte_e3, r2000_4dff_tmp4, r3000_4dff_tmp1, r3000_4dff_tmp2;
		BitBlock r3000_4dff_tmp3, r3000_4dff_tmp4, sequence_e3_80, byte_e3_adv;
		BitBlock r3000_4dff_tmp5, r3000_4dff_tmp6, r3000_4dff_tmp7, r3000_4dff_tmp8;
		BitBlock r3000_4dff_tmp9, cc_range_3000_3030_3, sequence_e3_80_adv;
		BitBlock r3000_4dff_tmp10, r3000_4dff_tmp11, r3000_4dff_tmp12, sequence_e3_81;
		BitBlock r3000_4dff_tmp13, r3000_4dff_tmp14, byte_range_81_bf;
		BitBlock sequence_e3_81_adv, r3000_4dff_tmp15, sequence_e3_82;
		BitBlock r3000_4dff_tmp16, r3000_4dff_tmp17, r3000_4dff_tmp18;
		BitBlock r3000_4dff_tmp19, r3000_4dff_tmp20, r3000_4dff_tmp21;
		BitBlock r3000_4dff_tmp22, r3000_4dff_tmp23, r3000_4dff_tmp24;
		BitBlock r3000_4dff_tmp25, cc_range_3080_309b_3, sequence_e3_82_adv;
		BitBlock r3000_4dff_tmp26, sequence_e3_83, sequence_e3_83_adv;
		BitBlock r3000_4dff_tmp27, r3000_4dff_tmp28, byte_84, sequence_e3_84;
		BitBlock r3000_4dff_tmp29, r3000_4dff_tmp30, r3000_4dff_tmp31;
		BitBlock r3000_4dff_tmp32, r3000_4dff_tmp33, r3000_4dff_tmp34;
		BitBlock r3000_4dff_tmp35, r3000_4dff_tmp36, r3000_4dff_tmp37;
		BitBlock r3000_4dff_tmp38, r3000_4dff_tmp39, r3000_4dff_tmp40;
		BitBlock cc_range_3105_3131_3, sequence_e3_84_adv, r3000_4dff_tmp41;
		BitBlock r3000_4dff_tmp42, byte_85, sequence_e3_85, sequence_e3_85_adv;
		BitBlock r3000_4dff_tmp43, r3000_4dff_tmp44, sequence_e3_86, r3000_4dff_tmp45;
		BitBlock r3000_4dff_tmp46, r3000_4dff_tmp47, r3000_4dff_tmp48;
		BitBlock r3000_4dff_tmp49, cc_range_3180_3190_3, sequence_e3_86_adv;
		BitBlock r3000_4dff_tmp50, r3000_4dff_tmp51, sequence_e3_87, r3000_4dff_tmp52;
		BitBlock r3000_4dff_tmp53, r3000_4dff_tmp54, cc_range_31c0_31f0_3;
		BitBlock sequence_e3_87_adv, r3000_4dff_tmp55, r3000_4dff_tmp56;
		BitBlock r3000_4dff_tmp57, byte_88, sequence_e3_88, r3000_4dff_tmp58;
		BitBlock r3000_4dff_tmp59, r3000_4dff_tmp60, r3000_4dff_tmp61;
		BitBlock cc_range_3200_3220_3, sequence_e3_88_adv, r3000_4dff_tmp62;
		BitBlock r3000_4dff_tmp63, r3000_4dff_tmp64, byte_range_89_8a;
		BitBlock byte_e3_byte_range_89_8a, r3000_4dff_tmp65;
		BitBlock byte_e3_byte_range_89_8a_sfx, r3000_4dff_tmp66, sequence_e3_8b;
		BitBlock r3000_4dff_tmp67, byte_range_80_be, r3000_4dff_tmp68;
		BitBlock sequence_e3_8b_byte_range_80_be, r3000_4dff_tmp69, sequence_e3_8c;
		BitBlock r3000_4dff_tmp70, sequence_e3_8c_byte_range_80_bf, r3000_4dff_tmp71;
		BitBlock r3000_4dff_tmp72, r3000_4dff_tmp73, r3000_4dff_tmp74;
		BitBlock byte_e4_byte_range_80_b5, r3000_4dff_tmp75;
		BitBlock byte_e4_byte_range_80_b5_sfx, byte_e4_adv, sequence_e4_b6;
		BitBlock r3000_4dff_tmp76, sequence_e4_b6_byte_range_80_b5, sequence_e4_b7;
		BitBlock r3000_4dff_tmp77, sequence_e4_b7_byte_range_80_bf, r800_ffff_tmp11;
		BitBlock byte_range_b8_bf, r800_ffff_tmp12, r800_ffff_tmp13, r800_ffff_tmp14;
		BitBlock r800_ffff_tmp15, r800_ffff_tmp16, byte_range_e5_e9, r800_ffff_tmp17;
		BitBlock byte_e4_byte_range_b8_bf, r4e00_9fff_tmp1;
		BitBlock byte_e4_byte_range_b8_bf_sfx, r4e00_9fff_tmp2, r4e00_9fff_tmp3;
		BitBlock r4e00_9fff_tmp4, byte_range_e5_e8, r4e00_9fff_tmp5;
		BitBlock byte_range_e5_e8_sfx, r4e00_9fff_tmp6, byte_range_e5_e8_sfx_sfx;
		BitBlock r4e00_9fff_tmp7, r4e00_9fff_tmp8, r4e00_9fff_tmp9, byte_e9;
		BitBlock r4e00_9fff_tmp10, r4e00_9fff_tmp11, r4e00_9fff_tmp12, byte_e9_adv;
		BitBlock sequence_e9_80, r4e00_9fff_tmp13, r4e00_9fff_tmp14;
		BitBlock sequence_e9_80_byte_range_80_8c, r800_ffff_tmp18, byte_range_ea_ef;
		BitBlock ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3, byte_ea;
		BitBlock ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6, ra000_ffff_tmp7;
		BitBlock byte_ea_byte_range_80_91, ra000_ffff_tmp8;
		BitBlock byte_ea_byte_range_80_91_sfx, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, byte_ea_adv, sequence_ea_92, ra000_ffff_tmp12;
		BitBlock ra000_ffff_tmp13, ra000_ffff_tmp14, ra000_ffff_tmp15;
		BitBlock sequence_ea_92_byte_range_80_8c, ra000_ffff_tmp16, byte_93;
		BitBlock sequence_ea_93, ra000_ffff_tmp17, ra000_ffff_tmp18, ra000_ffff_tmp19;
		BitBlock sequence_ea_93_byte_range_80_86, byte_94, sequence_ea_94;
		BitBlock ra000_ffff_tmp20, sequence_ea_94_byte_range_80_bf, ra000_ffff_tmp21;
		BitBlock byte_98, sequence_ea_98, ra000_ffff_tmp22, ra000_ffff_tmp23;
		BitBlock ra000_ffff_tmp24, sequence_ea_98_byte_range_80_ab, ra000_ffff_tmp25;
		BitBlock ra000_ffff_tmp26, byte_99, sequence_ea_99, ra000_ffff_tmp27;
		BitBlock ra000_ffff_tmp28, ra000_ffff_tmp29, sequence_ea_99_byte_range_80_ae;
		BitBlock sequence_ea_9a, ra000_ffff_tmp30, ra000_ffff_tmp31, ra000_ffff_tmp32;
		BitBlock byte_range_80_9d, ra000_ffff_tmp33, sequence_ea_9a_byte_range_80_9d;
		BitBlock ra000_ffff_tmp34, sequence_ea_9b, ra000_ffff_tmp35;
		BitBlock sequence_ea_9b_byte_range_80_af, ra000_ffff_tmp36, sequence_ea_9c;
		BitBlock ra000_ffff_tmp37, sequence_ea_9c_byte_range_80_bf, ra000_ffff_tmp38;
		BitBlock sequence_ea_9e, ra000_ffff_tmp39, byte_range_80_8e, ra000_ffff_tmp40;
		BitBlock sequence_ea_9e_byte_range_80_8e, sequence_ea_9f, ra000_ffff_tmp41;
		BitBlock ra000_ffff_tmp42, byte_range_b7_bf, ra000_ffff_tmp43;
		BitBlock sequence_ea_9f_byte_range_b7_bf, ra000_ffff_tmp44, ra000_ffff_tmp45;
		BitBlock sequence_ea_a0, ra000_ffff_tmp46, sequence_ea_a0_byte_range_80_81;
		BitBlock ra000_ffff_tmp47, sequence_ea_a1, ra000_ffff_tmp48;
		BitBlock sequence_ea_a1_byte_range_80_b7, sequence_ea_a2, ra000_ffff_tmp49;
		BitBlock sequence_ea_a2_byte_range_80_bf, sequence_ea_a3, byte_range_80_83;
		BitBlock ra000_ffff_tmp50, sequence_ea_a3_byte_range_80_83, sequence_ea_a4;
		BitBlock ra000_ffff_tmp51, ra000_ffff_tmp52, ra000_ffff_tmp53;
		BitBlock ra000_ffff_tmp54, ra000_ffff_tmp55, sequence_ea_a4_byte_range_80_a5;
		BitBlock ra000_ffff_tmp56, sequence_ea_a5, ra000_ffff_tmp57;
		BitBlock sequence_ea_a5_byte_range_80_86, ra000_ffff_tmp58, sequence_ea_a6;
		BitBlock ra000_ffff_tmp59, ra000_ffff_tmp60, ra000_ffff_tmp61;
		BitBlock ra000_ffff_tmp62, ra000_ffff_tmp63, byte_range_83_b2;
		BitBlock ra000_ffff_tmp64, sequence_ea_a6_byte_range_83_b2, ra000_ffff_tmp65;
		BitBlock sequence_ea_a7, ra000_ffff_tmp66, byte_range_80_8d, ra000_ffff_tmp67;
		BitBlock sequence_ea_a7_byte_range_80_8d, sequence_ea_a8, ra000_ffff_tmp68;
		BitBlock ra000_ffff_tmp69, ra000_ffff_tmp70, ra000_ffff_tmp71;
		BitBlock ra000_ffff_tmp72, sequence_ea_a8_byte_range_80_a8, sequence_ea_a9;
		BitBlock ra000_ffff_tmp73, sequence_ea_a9_byte_range_80_82, sequence_ea_aa;
		BitBlock ra000_ffff_tmp74, sequence_ea_aa_byte_range_80_af, sequence_ea_ab;
		BitBlock ra000_ffff_tmp75, sequence_ea_ab_80, sequence_ea_ac, ra000_ffff_tmp76;
		BitBlock ra000_ffff_tmp77, byte_range_81_86, ra000_ffff_tmp78;
		BitBlock sequence_ea_ac_byte_range_81_86, ra000_ffff_tmp79, sequence_ea_ad;
		BitBlock byte_range_80_9f, ra000_ffff_tmp80, sequence_ea_ad_byte_range_80_9f;
		BitBlock sequence_ea_af, ra000_ffff_tmp81, ra000_ffff_tmp82, ra000_ffff_tmp83;
		BitBlock byte_range_80_a4, ra000_ffff_tmp84, sequence_ea_af_byte_range_80_a4;
		BitBlock sequence_ea_b0, ra000_ffff_tmp85, sequence_ea_b0_byte_range_80_bf;
		BitBlock ra000_ffff_tmp86, ra000_ffff_tmp87, byte_range_eb_ec;
		BitBlock ra000_ffff_tmp88, byte_range_eb_ec_sfx, ra000_ffff_tmp89;
		BitBlock byte_range_eb_ec_sfx_sfx, byte_ed, byte_ed_adv, sequence_ed_80;
		BitBlock ra000_ffff_tmp90, ra000_ffff_tmp91, byte_range_80_a3;
		BitBlock ra000_ffff_tmp92, sequence_ed_80_byte_range_80_a3, byte_ef;
		BitBlock ra000_ffff_tmp93, ra000_ffff_tmp94, byte_range_a4_a8;
		BitBlock ra000_ffff_tmp95, byte_ef_byte_range_a4_a8, ra000_ffff_tmp96;
		BitBlock byte_ef_byte_range_a4_a8_sfx, byte_ef_adv, sequence_ef_a9;
		BitBlock ra000_ffff_tmp97, ra000_ffff_tmp98, byte_range_80_ad;
		BitBlock ra000_ffff_tmp99, sequence_ef_a9_byte_range_80_ad, sequence_ef_aa;
		BitBlock ra000_ffff_tmp100, sequence_ef_aa_byte_range_80_bf, sequence_ef_ab;
		BitBlock ra000_ffff_tmp101, ra000_ffff_tmp102, ra000_ffff_tmp103;
		BitBlock sequence_ef_ab_byte_range_80_99, sequence_ef_ac, ra000_ffff_tmp104;
		BitBlock sequence_ef_ac_byte_range_80_86, sequence_ef_ad, ra000_ffff_tmp105;
		BitBlock sequence_ef_ad_byte_range_80_81, sequence_ef_ae, ra000_ffff_tmp106;
		BitBlock sequence_ef_ae_byte_range_80_bf, sequence_ef_af, ra000_ffff_tmp107;
		BitBlock sequence_ef_af_byte_range_80_81, sequence_ef_b0, ra000_ffff_tmp108;
		BitBlock sequence_ef_b0_byte_range_80_bf, sequence_ef_b5, ra000_ffff_tmp109;
		BitBlock sequence_ef_b5_byte_range_90_bf, sequence_ef_b6, ra000_ffff_tmp110;
		BitBlock sequence_ef_b6_byte_range_80_8f, sequence_ef_b7, ra000_ffff_tmp111;
		BitBlock sequence_ef_b7_byte_range_80_87, sequence_ef_b8, byte_range_90_99;
		BitBlock ra000_ffff_tmp112, sequence_ef_b8_byte_range_90_99, sequence_ef_b9;
		BitBlock byte_range_80_92, ra000_ffff_tmp113, sequence_ef_b9_byte_range_80_92;
		BitBlock sequence_ef_ba, ra000_ffff_tmp114, sequence_ef_ba_byte_range_80_bf;
		BitBlock sequence_ef_bb, ra000_ffff_tmp115, ra000_ffff_tmp116;
		BitBlock ra000_ffff_tmp117, byte_range_80_bc, ra000_ffff_tmp118;
		BitBlock sequence_ef_bb_byte_range_80_bc, sequence_ef_bc, ra000_ffff_tmp119;
		BitBlock ra000_ffff_tmp120, ra000_ffff_tmp121, sequence_ef_bc_byte_range_81_bf;
		BitBlock sequence_ef_bd, ra000_ffff_tmp122, sequence_ef_bd_byte_range_80_bf;
		BitBlock sequence_ef_be, ra000_ffff_tmp123, sequence_ef_be_byte_range_80_9d;
		BitBlock sequence_ef_bf, byte_range_82_87, ra000_ffff_tmp124;
		BitBlock sequence_ef_bf_byte_range_82_87, byte_range_f0_ff, r10000_10ffff_tmp1;
		BitBlock r10000_10ffff_tmp2, r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4;
		BitBlock r10000_10ffff_tmp5, r10000_10ffff_tmp6, r10000_10ffff_tmp7;
		BitBlock sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp8, r10000_10ffff_tmp9;
		BitBlock r10000_10ffff_tmp10, sequence_f0_90_80, sequence_f0_90_adv;
		BitBlock r10000_10ffff_tmp11, r10000_10ffff_tmp12, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, r10000_10ffff_tmp16;
		BitBlock r10000_10ffff_tmp17, r10000_10ffff_tmp18, r10000_10ffff_tmp19;
		BitBlock r10000_10ffff_tmp20, r10000_10ffff_tmp21, r10000_10ffff_tmp22;
		BitBlock r10000_10ffff_tmp23, r10000_10ffff_tmp24, r10000_10ffff_tmp25;
		BitBlock r10000_10ffff_tmp26, r10000_10ffff_tmp27, r10000_10ffff_tmp28;
		BitBlock r10000_10ffff_tmp29, r10000_10ffff_tmp30, r10000_10ffff_tmp31;
		BitBlock r10000_10ffff_tmp32, cc_range_10000_1003f_4, sequence_f0_90_80_adv;
		BitBlock r10000_10ffff_tmp33, r10000_10ffff_tmp34, r10000_10ffff_tmp35;
		BitBlock sequence_f0_90_81, r10000_10ffff_tmp36, r10000_10ffff_tmp37;
		BitBlock r10000_10ffff_tmp38, r10000_10ffff_tmp39, cc_range_10040_10050_4;
		BitBlock sequence_f0_90_81_adv, r10000_10ffff_tmp40, r10000_10ffff_tmp41;
		BitBlock r10000_10ffff_tmp42, sequence_f0_90_82, sequence_f0_90_82_adv;
		BitBlock r10000_10ffff_tmp43, r10000_10ffff_tmp44, r10000_10ffff_tmp45;
		BitBlock r10000_10ffff_tmp46, sequence_f0_90_83, r10000_10ffff_tmp47;
		BitBlock r10000_10ffff_tmp48, sequence_f0_90_83_adv, r10000_10ffff_tmp49;
		BitBlock r10000_10ffff_tmp50, r10000_10ffff_tmp51, sequence_f0_90_84;
		BitBlock r10000_10ffff_tmp52, r10000_10ffff_tmp53, r10000_10ffff_tmp54;
		BitBlock r10000_10ffff_tmp55, r10000_10ffff_tmp56, r10000_10ffff_tmp57;
		BitBlock r10000_10ffff_tmp58, r10000_10ffff_tmp59, r10000_10ffff_tmp60;
		BitBlock cc_range_10100_10137_4, sequence_f0_90_84_adv, r10000_10ffff_tmp61;
		BitBlock r10000_10ffff_tmp62, sequence_f0_90_85, sequence_f0_90_85_adv;
		BitBlock r10000_10ffff_tmp63, r10000_10ffff_tmp64, sequence_f0_90_86;
		BitBlock r10000_10ffff_tmp65, r10000_10ffff_tmp66, r10000_10ffff_tmp67;
		BitBlock r10000_10ffff_tmp68, r10000_10ffff_tmp69, r10000_10ffff_tmp70;
		BitBlock r10000_10ffff_tmp71, cc_range_10180_101a0_4, sequence_f0_90_86_adv;
		BitBlock r10000_10ffff_tmp72, r10000_10ffff_tmp73, sequence_f0_90_87;
		BitBlock r10000_10ffff_tmp74, r10000_10ffff_tmp75, r10000_10ffff_tmp76;
		BitBlock byte_range_90_bc, sequence_f0_90_87_adv, r10000_10ffff_tmp77;
		BitBlock r10000_10ffff_tmp78, r10000_10ffff_tmp79, sequence_f0_90_8a;
		BitBlock r10000_10ffff_tmp80, r10000_10ffff_tmp81, r10000_10ffff_tmp82;
		BitBlock cc_range_10280_102a0_4, sequence_f0_90_8a_adv, r10000_10ffff_tmp83;
		BitBlock r10000_10ffff_tmp84, sequence_f0_90_8b, r10000_10ffff_tmp85;
		BitBlock r10000_10ffff_tmp86, r10000_10ffff_tmp87, r10000_10ffff_tmp88;
		BitBlock r10000_10ffff_tmp89, cc_range_102c0_102e1_4, sequence_f0_90_8b_adv;
		BitBlock r10000_10ffff_tmp90, r10000_10ffff_tmp91, sequence_f0_90_8c;
		BitBlock r10000_10ffff_tmp92, r10000_10ffff_tmp93, r10000_10ffff_tmp94;
		BitBlock cc_range_10300_10330_4, sequence_f0_90_8c_adv, r10000_10ffff_tmp95;
		BitBlock r10000_10ffff_tmp96, sequence_f0_90_8d, r10000_10ffff_tmp97;
		BitBlock r10000_10ffff_tmp98, r10000_10ffff_tmp99, r10000_10ffff_tmp100;
		BitBlock r10000_10ffff_tmp101, r10000_10ffff_tmp102, cc_range_10340_10350_4;
		BitBlock sequence_f0_90_8d_adv, r10000_10ffff_tmp103, r10000_10ffff_tmp104;
		BitBlock sequence_f0_90_8e, r10000_10ffff_tmp105, r10000_10ffff_tmp106;
		BitBlock r10000_10ffff_tmp107, r10000_10ffff_tmp108, r10000_10ffff_tmp109;
		BitBlock r10000_10ffff_tmp110, cc_range_10380_1039f_4, sequence_f0_90_8e_adv;
		BitBlock r10000_10ffff_tmp111, sequence_f0_90_8f, r10000_10ffff_tmp112;
		BitBlock r10000_10ffff_tmp113, r10000_10ffff_tmp114, cc_range_103c0_103c8_4;
		BitBlock sequence_f0_90_8f_adv, r10000_10ffff_tmp115, r10000_10ffff_tmp116;
		BitBlock byte_range_90_91, sequence_f0_90_byte_range_90_91;
		BitBlock r10000_10ffff_tmp117, sequence_f0_90_byte_range_90_91_sfx;
		BitBlock sequence_f0_90_92, r10000_10ffff_tmp118;
		BitBlock sequence_f0_90_92_byte_range_80_9d, sequence_f0_90_94;
		BitBlock r10000_10ffff_tmp119, r10000_10ffff_tmp120, r10000_10ffff_tmp121;
		BitBlock sequence_f0_90_94_byte_range_80_a7, byte_95, sequence_f0_90_95;
		BitBlock r10000_10ffff_tmp122, sequence_f0_90_95_byte_range_80_a3;
		BitBlock r10000_10ffff_tmp123, sequence_f0_90_98, r10000_10ffff_tmp124;
		BitBlock sequence_f0_90_98_byte_range_80_bf, sequence_f0_90_9c;
		BitBlock r10000_10ffff_tmp125, r10000_10ffff_tmp126, byte_range_80_b6;
		BitBlock r10000_10ffff_tmp127, sequence_f0_90_9c_byte_range_80_b6;
		BitBlock sequence_f0_90_9d, r10000_10ffff_tmp128;
		BitBlock sequence_f0_90_9d_byte_range_80_95, sequence_f0_90_a0;
		BitBlock r10000_10ffff_tmp129, r10000_10ffff_tmp130;
		BitBlock sequence_f0_90_a0_byte_range_80_85, sequence_f0_90_a1;
		BitBlock r10000_10ffff_tmp131, sequence_f0_90_a1_byte_range_80_95;
		BitBlock sequence_f0_90_a2, r10000_10ffff_tmp132;
		BitBlock sequence_f0_90_a2_byte_range_80_9e, sequence_f0_90_a4;
		BitBlock r10000_10ffff_tmp133, byte_range_80_9b, r10000_10ffff_tmp134;
		BitBlock sequence_f0_90_a4_byte_range_80_9b, sequence_f0_90_a6;
		BitBlock r10000_10ffff_tmp135, r10000_10ffff_tmp136, r10000_10ffff_tmp137;
		BitBlock sequence_f0_90_a6_byte_range_80_b7, sequence_f0_90_a8;
		BitBlock r10000_10ffff_tmp138, sequence_f0_90_a8_80, r10000_10ffff_tmp139;
		BitBlock sequence_f0_90_a9, r10000_10ffff_tmp140;
		BitBlock sequence_f0_90_a9_byte_range_80_87, sequence_f0_90_aa;
		BitBlock r10000_10ffff_tmp141, sequence_f0_90_aa_byte_range_80_9f;
		BitBlock sequence_f0_90_ab, r10000_10ffff_tmp142, r10000_10ffff_tmp143;
		BitBlock r10000_10ffff_tmp144, r10000_10ffff_tmp145;
		BitBlock sequence_f0_90_ab_byte_range_80_a4, sequence_f0_90_ac;
		BitBlock r10000_10ffff_tmp146, r10000_10ffff_tmp147;
		BitBlock sequence_f0_90_ac_byte_range_80_b5, sequence_f0_90_ad;
		BitBlock r10000_10ffff_tmp148, sequence_f0_90_ad_byte_range_80_95;
		BitBlock sequence_f0_90_ae, r10000_10ffff_tmp149, r10000_10ffff_tmp150;
		BitBlock sequence_f0_90_ae_byte_range_80_91, sequence_f0_90_b0;
		BitBlock r10000_10ffff_tmp151, sequence_f0_90_b0_byte_range_80_bf;
		BitBlock sequence_f0_90_b1, r10000_10ffff_tmp152, r10000_10ffff_tmp153;
		BitBlock r10000_10ffff_tmp154, sequence_f0_90_b1_byte_range_80_88;
		BitBlock sequence_f0_90_b9, byte_range_a0_be, r10000_10ffff_tmp155;
		BitBlock sequence_f0_90_b9_byte_range_a0_be, sequence_f0_91;
		BitBlock r10000_10ffff_tmp156, sequence_f0_91_80, sequence_f0_91_adv;
		BitBlock r10000_10ffff_tmp157, r10000_10ffff_tmp158, r10000_10ffff_tmp159;
		BitBlock r10000_10ffff_tmp160, r10000_10ffff_tmp161, cc_range_11000_11002_4;
		BitBlock sequence_f0_91_80_adv, r10000_10ffff_tmp162, sequence_f0_91_81;
		BitBlock r10000_10ffff_tmp163, r10000_10ffff_tmp164, r10000_10ffff_tmp165;
		BitBlock r10000_10ffff_tmp166, r10000_10ffff_tmp167, r10000_10ffff_tmp168;
		BitBlock cc_range_11047_11052_4, sequence_f0_91_81_adv, r10000_10ffff_tmp169;
		BitBlock sequence_f0_91_82, r10000_10ffff_tmp170, r10000_10ffff_tmp171;
		BitBlock r10000_10ffff_tmp172, r10000_10ffff_tmp173, r10000_10ffff_tmp174;
		BitBlock r10000_10ffff_tmp175, r10000_10ffff_tmp176, r10000_10ffff_tmp177;
		BitBlock r10000_10ffff_tmp178, r10000_10ffff_tmp179, r10000_10ffff_tmp180;
		BitBlock r10000_10ffff_tmp181, r10000_10ffff_tmp182, r10000_10ffff_tmp183;
		BitBlock r10000_10ffff_tmp184, cc_range_11082_110be_4, sequence_f0_91_82_adv;
		BitBlock r10000_10ffff_tmp185, sequence_f0_91_83, r10000_10ffff_tmp186;
		BitBlock r10000_10ffff_tmp187, r10000_10ffff_tmp188, r10000_10ffff_tmp189;
		BitBlock r10000_10ffff_tmp190, r10000_10ffff_tmp191, r10000_10ffff_tmp192;
		BitBlock r10000_10ffff_tmp193, r10000_10ffff_tmp194, cc_range_110c0_110f0_4;
		BitBlock sequence_f0_91_83_adv, r10000_10ffff_tmp195, sequence_f0_91_84;
		BitBlock r10000_10ffff_tmp196, r10000_10ffff_tmp197, r10000_10ffff_tmp198;
		BitBlock r10000_10ffff_tmp199, r10000_10ffff_tmp200, cc_range_11103_11136_4;
		BitBlock sequence_f0_91_84_adv, r10000_10ffff_tmp201, sequence_f0_91_85;
		BitBlock r10000_10ffff_tmp202, r10000_10ffff_tmp203, r10000_10ffff_tmp204;
		BitBlock r10000_10ffff_tmp205, r10000_10ffff_tmp206, cc_range_11140_11174_4;
		BitBlock sequence_f0_91_85_adv, r10000_10ffff_tmp207, sequence_f0_91_86;
		BitBlock r10000_10ffff_tmp208, r10000_10ffff_tmp209, r10000_10ffff_tmp210;
		BitBlock cc_range_11182_111bf_4, sequence_f0_91_86_adv, r10000_10ffff_tmp211;
		BitBlock sequence_f0_91_87, r10000_10ffff_tmp212, r10000_10ffff_tmp213;
		BitBlock r10000_10ffff_tmp214, r10000_10ffff_tmp215, r10000_10ffff_tmp216;
		BitBlock r10000_10ffff_tmp217, r10000_10ffff_tmp218, cc_range_111c0_111e1_4;
		BitBlock sequence_f0_91_87_adv, r10000_10ffff_tmp219, sequence_f0_91_88;
		BitBlock r10000_10ffff_tmp220, r10000_10ffff_tmp221, r10000_10ffff_tmp222;
		BitBlock r10000_10ffff_tmp223, r10000_10ffff_tmp224, r10000_10ffff_tmp225;
		BitBlock r10000_10ffff_tmp226, r10000_10ffff_tmp227, r10000_10ffff_tmp228;
		BitBlock r10000_10ffff_tmp229, r10000_10ffff_tmp230, cc_range_11200_11238_4;
		BitBlock sequence_f0_91_88_adv, r10000_10ffff_tmp231, sequence_f0_91_8a;
		BitBlock sequence_f0_91_8a_adv, r10000_10ffff_tmp232, sequence_f0_91_8b;
		BitBlock r10000_10ffff_tmp233, r10000_10ffff_tmp234, r10000_10ffff_tmp235;
		BitBlock r10000_10ffff_tmp236, r10000_10ffff_tmp237, cc_range_112c0_112f0_4;
		BitBlock sequence_f0_91_8b_adv, r10000_10ffff_tmp238, sequence_f0_91_8c;
		BitBlock r10000_10ffff_tmp239, r10000_10ffff_tmp240, r10000_10ffff_tmp241;
		BitBlock r10000_10ffff_tmp242, r10000_10ffff_tmp243, r10000_10ffff_tmp244;
		BitBlock r10000_10ffff_tmp245, r10000_10ffff_tmp246, r10000_10ffff_tmp247;
		BitBlock r10000_10ffff_tmp248, r10000_10ffff_tmp249, r10000_10ffff_tmp250;
		BitBlock r10000_10ffff_tmp251, r10000_10ffff_tmp252, r10000_10ffff_tmp253;
		BitBlock r10000_10ffff_tmp254, r10000_10ffff_tmp255, r10000_10ffff_tmp256;
		BitBlock r10000_10ffff_tmp257, r10000_10ffff_tmp258, r10000_10ffff_tmp259;
		BitBlock r10000_10ffff_tmp260, cc_range_11302_1133f_4, sequence_f0_91_8c_adv;
		BitBlock r10000_10ffff_tmp261, sequence_f0_91_8d, r10000_10ffff_tmp262;
		BitBlock r10000_10ffff_tmp263, r10000_10ffff_tmp264, r10000_10ffff_tmp265;
		BitBlock r10000_10ffff_tmp266, r10000_10ffff_tmp267, r10000_10ffff_tmp268;
		BitBlock r10000_10ffff_tmp269, r10000_10ffff_tmp270, r10000_10ffff_tmp271;
		BitBlock r10000_10ffff_tmp272, r10000_10ffff_tmp273, cc_range_11341_1135d_4;
		BitBlock sequence_f0_91_8d_adv, r10000_10ffff_tmp274, sequence_f0_91_92;
		BitBlock r10000_10ffff_tmp275, r10000_10ffff_tmp276, r10000_10ffff_tmp277;
		BitBlock r10000_10ffff_tmp278, r10000_10ffff_tmp279, r10000_10ffff_tmp280;
		BitBlock r10000_10ffff_tmp281, r10000_10ffff_tmp282, r10000_10ffff_tmp283;
		BitBlock r10000_10ffff_tmp284, r10000_10ffff_tmp285, cc_range_11480_114be_4;
		BitBlock sequence_f0_91_92_adv, r10000_10ffff_tmp286, sequence_f0_91_93;
		BitBlock r10000_10ffff_tmp287, r10000_10ffff_tmp288, r10000_10ffff_tmp289;
		BitBlock cc_range_114c1_114d0_4, sequence_f0_91_93_adv, r10000_10ffff_tmp290;
		BitBlock byte_96, sequence_f0_91_96, r10000_10ffff_tmp291;
		BitBlock r10000_10ffff_tmp292, r10000_10ffff_tmp293, r10000_10ffff_tmp294;
		BitBlock r10000_10ffff_tmp295, r10000_10ffff_tmp296, cc_range_11580_115be_4;
		BitBlock sequence_f0_91_96_adv, r10000_10ffff_tmp297, byte_97;
		BitBlock sequence_f0_91_97, r10000_10ffff_tmp298, byte_range_81_89;
		BitBlock sequence_f0_91_97_adv, r10000_10ffff_tmp299, sequence_f0_91_98;
		BitBlock r10000_10ffff_tmp300, r10000_10ffff_tmp301, r10000_10ffff_tmp302;
		BitBlock cc_range_11600_1163e_4, sequence_f0_91_98_adv, r10000_10ffff_tmp303;
		BitBlock sequence_f0_91_99, cc_range_11641_11650_4, sequence_f0_91_99_adv;
		BitBlock r10000_10ffff_tmp304, sequence_f0_91_9a, r10000_10ffff_tmp305;
		BitBlock r10000_10ffff_tmp306, r10000_10ffff_tmp307, r10000_10ffff_tmp308;
		BitBlock r10000_10ffff_tmp309, r10000_10ffff_tmp310, r10000_10ffff_tmp311;
		BitBlock cc_range_11680_116b6_4, sequence_f0_91_9a_adv, r10000_10ffff_tmp312;
		BitBlock sequence_f0_91_9b, sequence_f0_91_9b_adv, r10000_10ffff_tmp313;
		BitBlock sequence_f0_91_a2, byte_range_a0_bf, sequence_f0_91_a2_adv;
		BitBlock r10000_10ffff_tmp314, sequence_f0_91_a3, cc_range_118c0_118ff_4;
		BitBlock sequence_f0_91_a3_adv, r10000_10ffff_tmp315, sequence_f0_91_ab;
		BitBlock r10000_10ffff_tmp316, r10000_10ffff_tmp317, sequence_f0_91_ab_adv;
		BitBlock r10000_10ffff_tmp318, sequence_f0_92, r10000_10ffff_tmp319;
		BitBlock sequence_f0_92_byte_range_80_8d, r10000_10ffff_tmp320;
		BitBlock sequence_f0_92_byte_range_80_8d_sfx, sequence_f0_92_adv;
		BitBlock sequence_f0_92_8e, byte_range_80_98, r10000_10ffff_tmp321;
		BitBlock sequence_f0_92_8e_byte_range_80_98, sequence_f0_92_90;
		BitBlock r10000_10ffff_tmp322, sequence_f0_92_90_byte_range_80_bf;
		BitBlock sequence_f0_92_91, r10000_10ffff_tmp323;
		BitBlock sequence_f0_92_91_byte_range_80_ae, sequence_f0_93;
		BitBlock r10000_10ffff_tmp324, sequence_f0_93_byte_range_80_8f;
		BitBlock r10000_10ffff_tmp325, sequence_f0_93_byte_range_80_8f_sfx;
		BitBlock sequence_f0_93_adv, sequence_f0_93_90, r10000_10ffff_tmp326;
		BitBlock sequence_f0_93_90_byte_range_80_ae, sequence_f0_96, byte_range_a0_a7;
		BitBlock r10000_10ffff_tmp327, sequence_f0_96_byte_range_a0_a7;
		BitBlock r10000_10ffff_tmp328, sequence_f0_96_byte_range_a0_a7_sfx;
		BitBlock sequence_f0_96_adv, sequence_f0_96_a8, r10000_10ffff_tmp329;
		BitBlock sequence_f0_96_a8_byte_range_80_b8, sequence_f0_96_a9;
		BitBlock r10000_10ffff_tmp330, sequence_f0_96_a9_byte_range_80_9e;
		BitBlock sequence_f0_96_ab, r10000_10ffff_tmp331, r10000_10ffff_tmp332;
		BitBlock r10000_10ffff_tmp333, byte_range_90_ad, r10000_10ffff_tmp334;
		BitBlock sequence_f0_96_ab_byte_range_90_ad, sequence_f0_96_ac;
		BitBlock r10000_10ffff_tmp335, sequence_f0_96_ac_byte_range_80_af;
		BitBlock sequence_f0_96_ad, r10000_10ffff_tmp336, r10000_10ffff_tmp337;
		BitBlock sequence_f0_96_ad_byte_range_80_85, sequence_f0_96_ae;
		BitBlock r10000_10ffff_tmp338, sequence_f0_96_ae_byte_range_80_8f;
		BitBlock sequence_f0_96_bc, r10000_10ffff_tmp339;
		BitBlock sequence_f0_96_bc_byte_range_80_bf, sequence_f0_96_bd;
		BitBlock r10000_10ffff_tmp340, sequence_f0_96_bd_byte_range_80_84;
		BitBlock sequence_f0_96_be, r10000_10ffff_tmp341, byte_range_93_9f;
		BitBlock r10000_10ffff_tmp342, sequence_f0_96_be_byte_range_93_9f;
		BitBlock sequence_f0_9b, r10000_10ffff_tmp343, sequence_f0_9b_80;
		BitBlock sequence_f0_9b_adv, sequence_f0_9b_80_adv, r10000_10ffff_tmp344;
		BitBlock sequence_f0_9b_b0, sequence_f0_9b_b0_adv, r10000_10ffff_tmp345;
		BitBlock sequence_f0_9b_b1, r10000_10ffff_tmp346, cc_range_1bc40_1bc70_4;
		BitBlock sequence_f0_9b_b1_adv, r10000_10ffff_tmp347, sequence_f0_9b_b2;
		BitBlock r10000_10ffff_tmp348, r10000_10ffff_tmp349, r10000_10ffff_tmp350;
		BitBlock r10000_10ffff_tmp351, cc_range_1bc80_1bc9f_4, sequence_f0_9b_b2_adv;
		BitBlock r10000_10ffff_tmp352, sequence_f0_9d, r10000_10ffff_tmp353;
		BitBlock r10000_10ffff_tmp354, sequence_f0_9d_byte_range_80_82;
		BitBlock r10000_10ffff_tmp355, sequence_f0_9d_byte_range_80_82_sfx;
		BitBlock sequence_f0_9d_adv, sequence_f0_9d_83, r10000_10ffff_tmp356;
		BitBlock sequence_f0_9d_83_byte_range_80_b5, sequence_f0_9d_84;
		BitBlock r10000_10ffff_tmp357, r10000_10ffff_tmp358;
		BitBlock sequence_f0_9d_84_byte_range_80_a6, sequence_f0_9d_85;
		BitBlock r10000_10ffff_tmp359, sequence_f0_9d_85_byte_range_80_a4;
		BitBlock sequence_f0_9d_86, byte_range_83_84, r10000_10ffff_tmp360;
		BitBlock sequence_f0_9d_86_byte_range_83_84, sequence_f0_9d_87;
		BitBlock r10000_10ffff_tmp361, sequence_f0_9d_87_byte_range_80_9d;
		BitBlock sequence_f0_9d_88, r10000_10ffff_tmp362;
		BitBlock sequence_f0_9d_88_byte_range_80_bf, sequence_f0_9d_89;
		BitBlock r10000_10ffff_tmp363, sequence_f0_9d_89_byte_range_80_81;
		BitBlock sequence_f0_9d_8c, r10000_10ffff_tmp364;
		BitBlock sequence_f0_9d_8c_byte_range_80_bf, sequence_f0_9d_8d;
		BitBlock r10000_10ffff_tmp365, sequence_f0_9d_8d_byte_range_80_96;
		BitBlock sequence_f0_9d_90, r10000_10ffff_tmp366;
		BitBlock sequence_f0_9d_90_byte_range_80_bf, sequence_f0_9d_91;
		BitBlock r10000_10ffff_tmp367, byte_range_80_94, r10000_10ffff_tmp368;
		BitBlock sequence_f0_9d_91_byte_range_80_94, sequence_f0_9d_92;
		BitBlock r10000_10ffff_tmp369, sequence_f0_9d_92_byte_range_80_9c;
		BitBlock sequence_f0_9d_93, r10000_10ffff_tmp370;
		BitBlock sequence_f0_9d_93_byte_range_80_83, sequence_f0_9d_94;
		BitBlock r10000_10ffff_tmp371, sequence_f0_9d_94_byte_range_80_85;
		BitBlock sequence_f0_9d_95, r10000_10ffff_tmp372;
		BitBlock sequence_f0_9d_95_byte_range_80_84, sequence_f0_9d_96;
		BitBlock r10000_10ffff_tmp373, sequence_f0_9d_96_byte_range_80_bf;
		BitBlock sequence_f0_9d_9a, r10000_10ffff_tmp374, r10000_10ffff_tmp375;
		BitBlock r10000_10ffff_tmp376, sequence_f0_9d_9a_byte_range_80_a5;
		BitBlock sequence_f0_9d_9b, r10000_10ffff_tmp377;
		BitBlock sequence_f0_9d_9b_byte_range_80_bf, sequence_f0_9d_9f;
		BitBlock byte_range_80_8b, r10000_10ffff_tmp378;
		BitBlock sequence_f0_9d_9f_byte_range_80_8b, sequence_f0_9e, byte_range_a0_a2;
		BitBlock r10000_10ffff_tmp379, sequence_f0_9e_byte_range_a0_a2;
		BitBlock r10000_10ffff_tmp380, sequence_f0_9e_byte_range_a0_a2_sfx;
		BitBlock sequence_f0_9e_adv, sequence_f0_9e_a3, r10000_10ffff_tmp381;
		BitBlock sequence_f0_9e_a3_byte_range_80_84, sequence_f0_9e_b8;
		BitBlock r10000_10ffff_tmp382, sequence_f0_9e_b8_byte_range_80_83;
		BitBlock sequence_f0_9e_b9, r10000_10ffff_tmp383, sequence_f0_9e_b9_82;
		BitBlock sequence_f0_9e_ba, r10000_10ffff_tmp384;
		BitBlock sequence_f0_9e_ba_byte_range_80_89, sequence_f0_9e_bb;
		BitBlock byte_range_b0_b1, r10000_10ffff_tmp385;
		BitBlock sequence_f0_9e_bb_byte_range_b0_b1, sequence_f0_9f;
		BitBlock r10000_10ffff_tmp386, sequence_f0_9f_80, sequence_f0_9f_adv;
		BitBlock r10000_10ffff_tmp387, r10000_10ffff_tmp388, r10000_10ffff_tmp389;
		BitBlock cc_range_1f000_1f030_4, sequence_f0_9f_80_adv, r10000_10ffff_tmp390;
		BitBlock sequence_f0_9f_81, sequence_f0_9f_81_adv, r10000_10ffff_tmp391;
		BitBlock sequence_f0_9f_82, r10000_10ffff_tmp392, r10000_10ffff_tmp393;
		BitBlock r10000_10ffff_tmp394, r10000_10ffff_tmp395, r10000_10ffff_tmp396;
		BitBlock r10000_10ffff_tmp397, cc_range_1f080_1f0b1_4, sequence_f0_9f_82_adv;
		BitBlock r10000_10ffff_tmp398, sequence_f0_9f_83, r10000_10ffff_tmp399;
		BitBlock r10000_10ffff_tmp400, r10000_10ffff_tmp401, cc_range_1f0c1_1f0d1_4;
		BitBlock sequence_f0_9f_83_adv, r10000_10ffff_tmp402, sequence_f0_9f_84;
		BitBlock r10000_10ffff_tmp403, r10000_10ffff_tmp404, r10000_10ffff_tmp405;
		BitBlock r10000_10ffff_tmp406, cc_range_1f100_1f130_4, sequence_f0_9f_84_adv;
		BitBlock r10000_10ffff_tmp407, sequence_f0_9f_85, cc_range_1f140_1f170_4;
		BitBlock sequence_f0_9f_85_adv, r10000_10ffff_tmp408, sequence_f0_9f_86;
		BitBlock sequence_f0_9f_86_adv, r10000_10ffff_tmp409, sequence_f0_9f_87;
		BitBlock byte_range_a6_bf, sequence_f0_9f_87_adv, r10000_10ffff_tmp410;
		BitBlock sequence_f0_9f_88, r10000_10ffff_tmp411, r10000_10ffff_tmp412;
		BitBlock r10000_10ffff_tmp413, r10000_10ffff_tmp414, cc_range_1f200_1f210_4;
		BitBlock sequence_f0_9f_88_adv, r10000_10ffff_tmp415, sequence_f0_9f_89;
		BitBlock cc_range_1f240_1f250_4, sequence_f0_9f_89_adv, r10000_10ffff_tmp416;
		BitBlock sequence_f0_9f_8c, r10000_10ffff_tmp417, r10000_10ffff_tmp418;
		BitBlock cc_range_1f300_1f330_4, sequence_f0_9f_8c_adv, r10000_10ffff_tmp419;
		BitBlock sequence_f0_9f_8d, r10000_10ffff_tmp420, byte_range_80_bd;
		BitBlock sequence_f0_9f_8d_adv, r10000_10ffff_tmp421, sequence_f0_9f_8e;
		BitBlock sequence_f0_9f_8e_adv, r10000_10ffff_tmp422, sequence_f0_9f_8f;
		BitBlock r10000_10ffff_tmp423, r10000_10ffff_tmp424, r10000_10ffff_tmp425;
		BitBlock cc_range_1f3c0_1f3d4_4, sequence_f0_9f_8f_adv, r10000_10ffff_tmp426;
		BitBlock r10000_10ffff_tmp427, byte_range_90_92;
		BitBlock sequence_f0_9f_byte_range_90_92, r10000_10ffff_tmp428;
		BitBlock sequence_f0_9f_byte_range_90_92_sfx, sequence_f0_9f_93;
		BitBlock r10000_10ffff_tmp429, r10000_10ffff_tmp430;
		BitBlock sequence_f0_9f_93_byte_range_80_be, sequence_f0_9f_94;
		BitBlock r10000_10ffff_tmp431, sequence_f0_9f_94_byte_range_80_bf;
		BitBlock sequence_f0_9f_95, r10000_10ffff_tmp432;
		BitBlock sequence_f0_9f_95_byte_range_80_8a, sequence_f0_9f_96;
		BitBlock r10000_10ffff_tmp433, sequence_f0_9f_96_byte_range_80_a3;
		BitBlock sequence_f0_9f_97, r10000_10ffff_tmp434;
		BitBlock sequence_f0_9f_97_byte_range_80_bf, sequence_f0_9f_99;
		BitBlock r10000_10ffff_tmp435, sequence_f0_9f_99_byte_range_80_82;
		BitBlock sequence_f0_9f_9a, r10000_10ffff_tmp436;
		BitBlock sequence_f0_9f_9a_byte_range_80_bf, sequence_f0_9f_9b;
		BitBlock r10000_10ffff_tmp437, sequence_f0_9f_9b_byte_range_80_8f;
		BitBlock sequence_f0_9f_9c, r10000_10ffff_tmp438;
		BitBlock sequence_f0_9f_9c_byte_range_80_bf, sequence_f0_9f_9d;
		BitBlock r10000_10ffff_tmp439, r10000_10ffff_tmp440;
		BitBlock sequence_f0_9f_9d_byte_range_80_b3, sequence_f0_9f_9e;
		BitBlock r10000_10ffff_tmp441, sequence_f0_9f_9e_byte_range_80_bf;
		BitBlock sequence_f0_9f_9f, r10000_10ffff_tmp442;
		BitBlock sequence_f0_9f_9f_byte_range_80_94, sequence_f0_9f_a0;
		BitBlock r10000_10ffff_tmp443, sequence_f0_9f_a0_byte_range_80_8b;
		BitBlock sequence_f0_9f_a1, r10000_10ffff_tmp444;
		BitBlock sequence_f0_9f_a1_byte_range_80_87, sequence_f0_9f_a2;
		BitBlock r10000_10ffff_tmp445, sequence_f0_9f_a2_byte_range_80_87;
		BitBlock byte_range_a0_a9, byte_f0_byte_range_a0_a9, r10000_10ffff_tmp446;
		BitBlock byte_f0_byte_range_a0_a9_sfx, r10000_10ffff_tmp447;
		BitBlock byte_f0_byte_range_a0_a9_sfx_sfx, sequence_f0_aa, sequence_f0_aa_adv;
		BitBlock sequence_f0_aa_80, r10000_10ffff_tmp448;
		BitBlock sequence_f0_aa_80_byte_range_80_96, sequence_f0_ab;
		BitBlock sequence_f0_ab_adv, sequence_f0_ab_80, r10000_10ffff_tmp449;
		BitBlock r10000_10ffff_tmp450, sequence_f0_ab_80_byte_range_80_b4;
		BitBlock sequence_f0_af, sequence_f0_af_adv, sequence_f0_af_a0;
		BitBlock r10000_10ffff_tmp451, sequence_f0_af_a0_byte_range_80_9d;




        struct_gr_base_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp2 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp4 = simd_and(tmp2, tmp3);
        tmp5 = simd_and(tmp1, tmp4);
        tmp6 = simd_not(tmp5);
        tmp7 = simd_or(simd_and(basis_bits.bit_1, tmp6), simd_andc(basis_bits.bit_2, basis_bits.bit_1));
        byte_range_20_7e = simd_andc(tmp7, basis_bits.bit_0);
        struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, byte_range_20_7e);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 358))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 25))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp7 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp8 = simd_and(r80_7ff_tmp6, r80_7ff_tmp7);
            r80_7ff_tmp9 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp10 = simd_and(basis_bits.bit_5, r80_7ff_tmp9);
            r80_7ff_tmp11 = simd_and(basis_bits.bit_4, r80_7ff_tmp10);
            r80_7ff_tmp12 = simd_andc(r80_7ff_tmp8, r80_7ff_tmp11);
            r80_7ff_tmp13 = simd_and(r80_7ff_tmp6, basis_bits.bit_2);
            r80_7ff_tmp14 = simd_and(tmp2, basis_bits.bit_6);
            r80_7ff_tmp15 = simd_or(basis_bits.bit_3, r80_7ff_tmp14);
            r80_7ff_tmp16 = simd_and(r80_7ff_tmp13, r80_7ff_tmp15);
            cc_range_a0_ae_2 = simd_or(r80_7ff_tmp12, r80_7ff_tmp16);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp17 = simd_and(byte_c2_adv, cc_range_a0_ae_2);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r80_7ff_tmp17);
            r80_7ff_tmp18 = simd_andc(tmp3, r80_7ff_tmp3);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp18);
            byte_range_80_bf = r80_7ff_tmp6;
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp19 = simd_and(byte_c3_adv, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r80_7ff_tmp19);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 8))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(2, 5))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_5, r80_7ff_tmp9);
                r100_2ff_tmp2 = simd_not(r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r100_2ff_tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r100_2ff_tmp6 = simd_and(r100_2ff_tmp4, r100_2ff_tmp5);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp6);
                byte_range_80_8f = simd_andc(byte_range_80_bf, r80_7ff_tmp1);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(2), r100_2ff_tmp7));
                r100_2ff_tmp8 = simd_and(r100_2ff_tmp7, byte_range_80_8f);
                r100_2ff_tmp9 = simd_or(byte_range_c4_c8, r100_2ff_tmp8);
                if ((bitblock::any(r100_2ff_tmp9) || carryQ.CarryTest(3, 2))) {
                  r100_24f_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
                  r100_24f_tmp2 = simd_andc(r100_24f_tmp1, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp2);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(3, 1))) {
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_range_c4_c5, carryQ.get_carry_in(3), r100_17f_tmp1));
                    byte_range_c4_c5_sfx = simd_and(r100_17f_tmp1, byte_range_80_bf);
                    struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, byte_range_c4_c5_sfx);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(3, 1);
                  }
                  r100_24f_tmp3 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp4 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r100_24f_tmp3, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp4);
                  r100_24f_tmp5 = simd_or(byte_range_c6_c8, r100_2ff_tmp8);
                  if ((bitblock::any(r100_24f_tmp5) || carryQ.CarryTest(4, 1))) {
                    carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_range_c6_c8, carryQ.get_carry_in(4), r180_24f_tmp1));
                    byte_range_c6_c8_sfx = simd_and(r180_24f_tmp1, byte_range_80_bf);
                    struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, byte_range_c6_c8_sfx);
                    byte_c9_byte_range_80_8f = r100_2ff_tmp8;
                    struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, byte_c9_byte_range_80_8f);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(4, 1);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 2);
                }
                byte_range_90_bf = simd_and(byte_range_80_bf, r80_7ff_tmp1);
                r100_2ff_tmp10 = simd_and(r100_2ff_tmp7, byte_range_90_bf);
                r100_2ff_tmp11 = simd_and(r100_2ff_tmp4, r80_7ff_tmp4);
                byte_ca = simd_and(r80_7ff_tmp2, r100_2ff_tmp11);
                byte_range_80_af = simd_andc(byte_range_80_bf, tmp1);
                carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(5), r100_2ff_tmp12));
                r100_2ff_tmp13 = simd_and(r100_2ff_tmp12, byte_range_80_af);
                r100_2ff_tmp14 = simd_or(r100_2ff_tmp10, r100_2ff_tmp13);
                if (bitblock::any(r100_2ff_tmp14)) {
                  byte_c9_adv = r100_2ff_tmp7;
                  r250_2af_tmp1 = simd_and(byte_c9_adv, byte_range_90_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r250_2af_tmp1);
                  byte_ca_adv = r100_2ff_tmp12;
                  r250_2af_tmp2 = simd_and(byte_ca_adv, byte_range_80_af);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r250_2af_tmp2);
                }
                byte_range_b0_bf = simd_and(byte_range_80_bf, tmp1);
                r100_2ff_tmp15 = simd_and(r100_2ff_tmp12, byte_range_b0_bf);
                r100_2ff_tmp16 = simd_and(r100_2ff_tmp4, tmp3);
                byte_cb = simd_and(r80_7ff_tmp2, r100_2ff_tmp16);
                r100_2ff_tmp17 = simd_or(r100_2ff_tmp15, byte_cb);
                if ((bitblock::any(r100_2ff_tmp17) || carryQ.CarryTest(6, 1))) {
                  byte_ca_adv = r100_2ff_tmp12;
                  r2b0_2ff_tmp1 = simd_and(byte_ca_adv, byte_range_b0_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r2b0_2ff_tmp1);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(6), byte_cb_adv));
                  r2b0_2ff_tmp2 = simd_and(byte_cb_adv, byte_range_80_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r2b0_2ff_tmp2);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 5);
              }
              r100_3ff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r100_3ff_tmp3 = simd_and(tmp2, r100_3ff_tmp2);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              byte_range_b0_bf = simd_and(byte_range_80_bf, tmp1);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(7), r100_3ff_tmp4));
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp4, byte_range_b0_bf);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r80_7ff_tmp14);
              r100_3ff_tmp6 = simd_or(r100_3ff_tmp5, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp6) || carryQ.CarryTest(8, 2))) {
                r370_3ff_tmp1 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp2 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp3 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                r370_3ff_tmp4 = simd_and(r370_3ff_tmp2, r370_3ff_tmp3);
                cc_range_370_37a_2 = simd_or(r370_3ff_tmp1, r370_3ff_tmp4);
                byte_cd_adv = r100_3ff_tmp4;
                r370_3ff_tmp5 = simd_and(byte_cd_adv, cc_range_370_37a_2);
                struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r370_3ff_tmp5);
                r370_3ff_tmp6 = simd_and(tmp2, r80_7ff_tmp4);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp6);
                r370_3ff_tmp7 = simd_andc(byte_range_80_bf, r80_7ff_tmp1);
                r370_3ff_tmp8 = simd_or(basis_bits.bit_5, tmp3);
                r370_3ff_tmp9 = simd_not(r370_3ff_tmp8);
                r370_3ff_tmp10 = simd_or(simd_and(basis_bits.bit_4, r370_3ff_tmp9), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                r370_3ff_tmp11 = simd_andc(tmp2, r80_7ff_tmp9);
                r370_3ff_tmp12 = simd_or(r370_3ff_tmp10, r370_3ff_tmp11);
                r370_3ff_tmp13 = simd_and(r370_3ff_tmp7, r370_3ff_tmp12);
                r370_3ff_tmp14 = simd_or(r80_7ff_tmp3, basis_bits.bit_6);
                r370_3ff_tmp15 = simd_or(basis_bits.bit_3, r370_3ff_tmp14);
                r370_3ff_tmp16 = simd_not(r370_3ff_tmp15);
                r370_3ff_tmp17 = simd_or(simd_and(basis_bits.bit_2, r370_3ff_tmp16), simd_andc(r80_7ff_tmp15, basis_bits.bit_2));
                r370_3ff_tmp18 = simd_and(byte_range_80_bf, r370_3ff_tmp17);
                r370_3ff_tmp19 = simd_or(r370_3ff_tmp13, r370_3ff_tmp18);
                r370_3ff_tmp20 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                r370_3ff_tmp21 = simd_or(r80_7ff_tmp3, tmp3);
                r370_3ff_tmp22 = simd_or(basis_bits.bit_3, r370_3ff_tmp21);
                r370_3ff_tmp23 = simd_and(r370_3ff_tmp20, r370_3ff_tmp22);
                cc_range_384_3a3_2 = simd_or(r370_3ff_tmp19, r370_3ff_tmp23);
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(8), byte_ce_adv));
                r370_3ff_tmp24 = simd_and(byte_ce_adv, cc_range_384_3a3_2);
                struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r370_3ff_tmp24);
                byte_cf = simd_and(r80_7ff_tmp2, tmp4);
                carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(9), byte_cf_adv));
                r370_3ff_tmp25 = simd_and(byte_cf_adv, byte_range_80_bf);
                struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r370_3ff_tmp25);
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 8);
            }
            r80_7ff_tmp20 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r80_7ff_tmp21 = simd_and(byte_range_c0_ff, r80_7ff_tmp20);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp21, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(10, 7))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp21, r80_7ff_tmp3);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(10, 3))) {
                r400_4ff_tmp1 = simd_or(r80_7ff_tmp3, basis_bits.bit_6);
                byte_range_d0_d1 = simd_andc(r80_7ff_tmp21, r400_4ff_tmp1);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_range_d0_d1, carryQ.get_carry_in(10), r400_4ff_tmp2));
                byte_range_d0_d1_sfx = simd_and(r400_4ff_tmp2, byte_range_80_bf);
                struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, byte_range_d0_d1_sfx);
                byte_d2 = simd_and(r80_7ff_tmp21, r80_7ff_tmp5);
                r400_4ff_tmp3 = simd_andc(byte_range_80_bf, r80_7ff_tmp1);
                r400_4ff_tmp4 = simd_andc(r400_4ff_tmp3, r80_7ff_tmp3);
                byte_range_80_82 = simd_andc(r400_4ff_tmp4, tmp3);
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(11), r400_4ff_tmp5));
                byte_d2_byte_range_80_82 = simd_and(r400_4ff_tmp5, byte_range_80_82);
                struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, byte_d2_byte_range_80_82);
                byte_d3 = simd_and(r80_7ff_tmp21, r80_7ff_tmp18);
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(12), r400_4ff_tmp6));
                byte_d3_byte_range_80_bf = simd_and(r400_4ff_tmp6, byte_range_80_bf);
                struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, byte_d3_byte_range_80_bf);
              }
              else {
                carryQ.CarryDequeueEnqueue(10, 3);
              }
              r400_5ff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r400_5ff_tmp2 = simd_andc(r400_5ff_tmp1, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp21, r400_5ff_tmp2);
              r400_5ff_tmp3 = simd_and(r400_5ff_tmp1, r80_7ff_tmp4);
              byte_d6 = simd_and(r80_7ff_tmp21, r400_5ff_tmp3);
              byte_range_80_8f = simd_andc(byte_range_80_bf, r80_7ff_tmp1);
              carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(13), r400_5ff_tmp4));
              r400_5ff_tmp5 = simd_and(r400_5ff_tmp4, byte_range_80_8f);
              r400_5ff_tmp6 = simd_or(byte_range_d4_d5, r400_5ff_tmp5);
              if ((bitblock::any(r400_5ff_tmp6) || carryQ.CarryTest(14, 2))) {
                r500_58f_tmp1 = simd_andc(r400_5ff_tmp1, r80_7ff_tmp9);
                byte_d4 = simd_and(r80_7ff_tmp21, r500_58f_tmp1);
                byte_range_80_af = simd_andc(byte_range_80_bf, tmp1);
                carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(14), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp3)) {
                  byte_d4_adv = r500_58f_tmp2;
                  r500_52f_tmp1 = simd_and(byte_d4_adv, byte_range_80_af);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r500_52f_tmp1);
                }
                byte_range_b0_bf = simd_and(byte_range_80_bf, tmp1);
                r500_58f_tmp4 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                r500_58f_tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r500_58f_tmp6 = simd_and(r400_5ff_tmp1, r500_58f_tmp5);
                byte_d5 = simd_and(r80_7ff_tmp21, r500_58f_tmp6);
                r500_58f_tmp7 = simd_or(r500_58f_tmp4, byte_d5);
                r500_58f_tmp8 = simd_or(r500_58f_tmp7, r400_5ff_tmp5);
                if ((bitblock::any(r500_58f_tmp8) || carryQ.CarryTest(15, 1))) {
                  r530_58f_tmp1 = simd_or(basis_bits.bit_5, r80_7ff_tmp9);
                  r530_58f_tmp2 = simd_or(basis_bits.bit_4, r530_58f_tmp1);
                  byte_range_b1_bf = simd_and(byte_range_b0_bf, r530_58f_tmp2);
                  byte_d4_adv = r500_58f_tmp2;
                  r530_58f_tmp3 = simd_and(byte_d4_adv, byte_range_b1_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r530_58f_tmp3);
                  r530_58f_tmp4 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r530_58f_tmp5 = simd_and(basis_bits.bit_5, tmp3);
                  r530_58f_tmp6 = simd_or(basis_bits.bit_4, r530_58f_tmp5);
                  r530_58f_tmp7 = simd_and(basis_bits.bit_3, r530_58f_tmp6);
                  r530_58f_tmp8 = simd_andc(r530_58f_tmp4, r530_58f_tmp7);
                  r530_58f_tmp9 = simd_and(byte_range_80_bf, r80_7ff_tmp20);
                  r530_58f_tmp10 = simd_and(r530_58f_tmp9, basis_bits.bit_4);
                  r530_58f_tmp11 = simd_and(r530_58f_tmp10, r530_58f_tmp1);
                  r530_58f_tmp12 = simd_or(r530_58f_tmp8, r530_58f_tmp11);
                  r530_58f_tmp13 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  r530_58f_tmp14 = simd_or(r80_7ff_tmp3, r80_7ff_tmp9);
                  r530_58f_tmp15 = simd_or(basis_bits.bit_3, r530_58f_tmp14);
                  r530_58f_tmp16 = simd_and(r530_58f_tmp13, r530_58f_tmp15);
                  cc_range_540_561_2 = simd_or(r530_58f_tmp12, r530_58f_tmp16);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(15), byte_d5_adv));
                  r530_58f_tmp17 = simd_and(byte_d5_adv, cc_range_540_561_2);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r530_58f_tmp17);
                  r530_58f_tmp18 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  r530_58f_tmp19 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r530_58f_tmp20 = simd_and(byte_range_80_8f, r530_58f_tmp19);
                  r530_58f_tmp21 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r530_58f_tmp22 = simd_and(r530_58f_tmp20, r530_58f_tmp21);
                  r530_58f_tmp23 = simd_or(r530_58f_tmp18, r530_58f_tmp22);
                  r530_58f_tmp24 = simd_and(byte_range_80_8f, tmp2);
                  r530_58f_tmp25 = simd_and(r530_58f_tmp24, r80_7ff_tmp9);
                  cc_range_580_58d_2 = simd_or(r530_58f_tmp23, r530_58f_tmp25);
                  byte_d6_adv = r400_5ff_tmp4;
                  r530_58f_tmp26 = simd_and(byte_d6_adv, cc_range_580_58d_2);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r530_58f_tmp26);
                }
                else {
                  carryQ.CarryDequeueEnqueue(15, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(14, 2);
              }
              byte_range_90_bf = simd_and(byte_range_80_bf, r80_7ff_tmp1);
              r400_5ff_tmp7 = simd_and(r400_5ff_tmp4, byte_range_90_bf);
              r400_5ff_tmp8 = simd_and(r400_5ff_tmp1, tmp3);
              byte_d7 = simd_and(r80_7ff_tmp21, r400_5ff_tmp8);
              r400_5ff_tmp9 = simd_or(r400_5ff_tmp7, byte_d7);
              if ((bitblock::any(r400_5ff_tmp9) || carryQ.CarryTest(16, 1))) {
                r590_5ff_tmp1 = simd_and(byte_range_80_bf, tmp1);
                r590_5ff_tmp2 = simd_and(tmp2, r80_7ff_tmp4);
                byte_be = simd_and(r590_5ff_tmp1, r590_5ff_tmp2);
                byte_d6_adv = r400_5ff_tmp4;
                r590_5ff_tmp3 = simd_and(byte_d6_adv, byte_be);
                struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r590_5ff_tmp3);
                r590_5ff_tmp4 = simd_or(r80_7ff_tmp3, r80_7ff_tmp9);
                r590_5ff_tmp5 = simd_andc(r590_5ff_tmp4, r80_7ff_tmp18);
                r590_5ff_tmp6 = simd_andc(r590_5ff_tmp5, r400_5ff_tmp3);
                r590_5ff_tmp7 = simd_andc(byte_range_80_8f, r590_5ff_tmp6);
                r590_5ff_tmp8 = simd_or(basis_bits.bit_5, tmp3);
                r590_5ff_tmp9 = simd_and(basis_bits.bit_4, r590_5ff_tmp8);
                r590_5ff_tmp10 = simd_or(basis_bits.bit_3, r590_5ff_tmp9);
                r590_5ff_tmp11 = simd_not(r590_5ff_tmp10);
                r590_5ff_tmp12 = simd_or(simd_and(basis_bits.bit_2, r590_5ff_tmp11), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                r590_5ff_tmp13 = simd_and(byte_range_80_bf, r590_5ff_tmp12);
                r590_5ff_tmp14 = simd_or(r590_5ff_tmp7, r590_5ff_tmp13);
                r590_5ff_tmp15 = simd_andc(r590_5ff_tmp1, basis_bits.bit_4);
                r590_5ff_tmp16 = simd_andc(r590_5ff_tmp15, r80_7ff_tmp10);
                cc_range_5c0_5f0_2 = simd_or(r590_5ff_tmp14, r590_5ff_tmp16);
                carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(16), byte_d7_adv));
                r590_5ff_tmp17 = simd_and(byte_d7_adv, cc_range_5c0_5f0_2);
                struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r590_5ff_tmp17);
              }
              else {
                carryQ.CarryDequeueEnqueue(16, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(10, 7);
            }
            r80_7ff_tmp22 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_d8_db = simd_and(r80_7ff_tmp21, r80_7ff_tmp22);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(17, 4))) {
              r600_6ff_tmp1 = simd_andc(r80_7ff_tmp22, r80_7ff_tmp9);
              byte_d8 = simd_and(r80_7ff_tmp21, r600_6ff_tmp1);
              r600_6ff_tmp2 = simd_andc(byte_range_80_bf, r80_7ff_tmp1);
              r600_6ff_tmp3 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              r600_6ff_tmp4 = simd_or(basis_bits.bit_4, r600_6ff_tmp3);
              r600_6ff_tmp5 = simd_and(r600_6ff_tmp2, r600_6ff_tmp4);
              r600_6ff_tmp6 = simd_and(byte_range_80_bf, r80_7ff_tmp20);
              r600_6ff_tmp7 = simd_and(r80_7ff_tmp22, tmp3);
              r600_6ff_tmp8 = simd_and(r600_6ff_tmp6, r600_6ff_tmp7);
              r600_6ff_tmp9 = simd_or(r600_6ff_tmp5, r600_6ff_tmp8);
              r600_6ff_tmp10 = simd_and(basis_bits.bit_3, r80_7ff_tmp14);
              r600_6ff_tmp11 = simd_or(basis_bits.bit_2, r600_6ff_tmp10);
              r600_6ff_tmp12 = simd_and(byte_range_80_bf, r600_6ff_tmp11);
              cc_range_606_61e_2 = simd_or(r600_6ff_tmp9, r600_6ff_tmp12);
              carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(17), byte_d8_adv));
              r600_6ff_tmp13 = simd_and(byte_d8_adv, cc_range_606_61e_2);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r600_6ff_tmp13);
              r600_6ff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r600_6ff_tmp15 = simd_and(r80_7ff_tmp22, r600_6ff_tmp14);
              byte_d9 = simd_and(r80_7ff_tmp21, r600_6ff_tmp15);
              r600_6ff_tmp16 = simd_or(basis_bits.bit_5, tmp3);
              r600_6ff_tmp17 = simd_and(basis_bits.bit_4, r600_6ff_tmp16);
              r600_6ff_tmp18 = simd_andc(r600_6ff_tmp2, r600_6ff_tmp17);
              r600_6ff_tmp19 = simd_and(byte_range_80_bf, r80_7ff_tmp7);
              r600_6ff_tmp20 = simd_or(r600_6ff_tmp18, r600_6ff_tmp19);
              r600_6ff_tmp21 = simd_and(byte_range_80_bf, tmp1);
              r600_6ff_tmp22 = simd_or(basis_bits.bit_5, r80_7ff_tmp9);
              r600_6ff_tmp23 = simd_or(basis_bits.bit_4, r600_6ff_tmp22);
              r600_6ff_tmp24 = simd_and(r600_6ff_tmp21, r600_6ff_tmp23);
              cc_range_640_671_2 = simd_or(r600_6ff_tmp20, r600_6ff_tmp24);
              carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(18), byte_d9_adv));
              r600_6ff_tmp25 = simd_and(byte_d9_adv, cc_range_640_671_2);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r600_6ff_tmp25);
              r600_6ff_tmp26 = simd_and(r80_7ff_tmp22, r80_7ff_tmp4);
              byte_da = simd_and(r80_7ff_tmp21, r600_6ff_tmp26);
              carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_da, carryQ.get_carry_in(19), byte_da_adv));
              r600_6ff_tmp27 = simd_and(byte_da_adv, byte_range_80_bf);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r600_6ff_tmp27);
              byte_db = simd_and(r80_7ff_tmp21, r600_6ff_tmp7);
              r600_6ff_tmp28 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              r600_6ff_tmp29 = simd_and(basis_bits.bit_3, r600_6ff_tmp4);
              r600_6ff_tmp30 = simd_andc(r600_6ff_tmp28, r600_6ff_tmp29);
              r600_6ff_tmp31 = simd_and(tmp2, r80_7ff_tmp4);
              r600_6ff_tmp32 = simd_and(r600_6ff_tmp6, r600_6ff_tmp31);
              r600_6ff_tmp33 = simd_or(r600_6ff_tmp30, r600_6ff_tmp32);
              r600_6ff_tmp34 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
              r600_6ff_tmp35 = simd_and(r600_6ff_tmp19, r600_6ff_tmp34);
              r600_6ff_tmp36 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
              r600_6ff_tmp37 = simd_and(r600_6ff_tmp35, r600_6ff_tmp36);
              r600_6ff_tmp38 = simd_or(r600_6ff_tmp33, r600_6ff_tmp37);
              r600_6ff_tmp39 = simd_and(r600_6ff_tmp19, r600_6ff_tmp15);
              r600_6ff_tmp40 = simd_or(r600_6ff_tmp38, r600_6ff_tmp39);
              r600_6ff_tmp41 = simd_and(byte_range_80_bf, basis_bits.bit_2);
              r600_6ff_tmp42 = simd_and(r600_6ff_tmp41, r80_7ff_tmp15);
              cc_range_6c0_6ee_2 = simd_or(r600_6ff_tmp40, r600_6ff_tmp42);
              carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(20), byte_db_adv));
              r600_6ff_tmp43 = simd_and(byte_db_adv, cc_range_6c0_6ee_2);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r600_6ff_tmp43);
            }
            else {
              carryQ.CarryDequeueEnqueue(17, 4);
            }
            r80_7ff_tmp23 = simd_andc(tmp2, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp21, r80_7ff_tmp23);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(21, 2))) {
              r700_77f_tmp1 = simd_andc(tmp2, r80_7ff_tmp9);
              byte_dc = simd_and(r80_7ff_tmp21, r700_77f_tmp1);
              r700_77f_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r700_77f_tmp3 = simd_and(tmp2, r700_77f_tmp2);
              byte_dd = simd_and(r80_7ff_tmp21, r700_77f_tmp3);
              byte_range_80_8f = simd_andc(byte_range_80_bf, r80_7ff_tmp1);
              carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(21), r700_77f_tmp4));
              r700_77f_tmp5 = simd_and(r700_77f_tmp4, byte_range_80_8f);
              r700_77f_tmp6 = simd_or(byte_dc, r700_77f_tmp5);
              if ((bitblock::any(r700_77f_tmp6) || carryQ.CarryTest(22, 1))) {
                r700_74f_tmp1 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r700_74f_tmp2 = simd_and(basis_bits.bit_4, r700_74f_tmp1);
                r700_74f_tmp3 = simd_andc(byte_range_80_8f, r700_74f_tmp2);
                r700_74f_tmp4 = simd_and(byte_range_80_bf, r80_7ff_tmp20);
                r700_74f_tmp5 = simd_or(r80_7ff_tmp3, r80_7ff_tmp9);
                r700_74f_tmp6 = simd_andc(r700_74f_tmp4, r700_74f_tmp5);
                r700_74f_tmp7 = simd_or(r700_74f_tmp3, r700_74f_tmp6);
                r700_74f_tmp8 = simd_not(basis_bits.bit_3);
                r700_74f_tmp9 = simd_or(r80_7ff_tmp3, basis_bits.bit_6);
                r700_74f_tmp10 = simd_and(basis_bits.bit_3, r700_74f_tmp9);
                r700_74f_tmp11 = simd_or(simd_and(basis_bits.bit_2, r700_74f_tmp8), simd_andc(r700_74f_tmp10, basis_bits.bit_2));
                r700_74f_tmp12 = simd_and(byte_range_80_bf, r700_74f_tmp11);
                cc_range_700_712_2 = simd_or(r700_74f_tmp7, r700_74f_tmp12);
                carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(22), byte_dc_adv));
                r700_74f_tmp13 = simd_and(byte_dc_adv, cc_range_700_712_2);
                struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r700_74f_tmp13);
                r700_74f_tmp14 = simd_and(byte_range_80_8f, tmp2);
                byte_range_8d_8f = simd_and(r700_74f_tmp14, r80_7ff_tmp9);
                byte_dd_adv = r700_77f_tmp4;
                r700_74f_tmp15 = simd_and(byte_dd_adv, byte_range_8d_8f);
                struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r700_74f_tmp15);
              }
              else {
                carryQ.CarryDequeueEnqueue(22, 1);
              }
              byte_range_90_bf = simd_and(byte_range_80_bf, r80_7ff_tmp1);
              r700_77f_tmp7 = simd_and(r700_77f_tmp4, byte_range_90_bf);
              if (bitblock::any(r700_77f_tmp7)) {
                byte_dd_adv = r700_77f_tmp4;
                r750_77f_tmp1 = simd_and(byte_dd_adv, byte_range_90_bf);
                struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r750_77f_tmp1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(21, 2);
            }
            byte_range_de_df = simd_and(r80_7ff_tmp21, r80_7ff_tmp14);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(23, 2))) {
              r780_7ff_tmp1 = simd_and(tmp2, r80_7ff_tmp4);
              byte_de = simd_and(r80_7ff_tmp21, r780_7ff_tmp1);
              if ((bitblock::any(byte_de) || carryQ.CarryTest(23, 1))) {
                r780_7bf_tmp1 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r780_7bf_tmp2 = simd_or(basis_bits.bit_4, r780_7bf_tmp1);
                r780_7bf_tmp3 = simd_or(basis_bits.bit_3, r780_7bf_tmp2);
                r780_7bf_tmp4 = simd_and(basis_bits.bit_2, r780_7bf_tmp3);
                r780_7bf_tmp5 = simd_andc(byte_range_80_bf, r780_7bf_tmp4);
                r780_7bf_tmp6 = simd_and(byte_range_80_bf, tmp1);
                r780_7bf_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r780_7bf_tmp8 = simd_andc(r780_7bf_tmp7, r80_7ff_tmp3);
                r780_7bf_tmp9 = simd_and(r780_7bf_tmp6, r780_7bf_tmp8);
                cc_range_780_7b1_2 = simd_or(r780_7bf_tmp5, r780_7bf_tmp9);
                carryQ.cq[23] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(23), byte_de_adv));
                r780_7bf_tmp10 = simd_and(byte_de_adv, cc_range_780_7b1_2);
                struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r780_7bf_tmp10);
              }
              else {
                carryQ.CarryDequeueEnqueue(23, 1);
              }
              byte_df = simd_and(r80_7ff_tmp21, tmp4);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(24, 1))) {
                r7c0_7ff_tmp1 = simd_or(basis_bits.bit_5, tmp3);
                r7c0_7ff_tmp2 = simd_and(basis_bits.bit_4, r7c0_7ff_tmp1);
                r7c0_7ff_tmp3 = simd_or(basis_bits.bit_3, r7c0_7ff_tmp2);
                r7c0_7ff_tmp4 = simd_and(basis_bits.bit_2, r7c0_7ff_tmp3);
                r7c0_7ff_tmp5 = simd_andc(byte_range_80_bf, r7c0_7ff_tmp4);
                r7c0_7ff_tmp6 = simd_and(byte_range_80_bf, tmp1);
                r7c0_7ff_tmp7 = simd_not(r7c0_7ff_tmp1);
                r7c0_7ff_tmp8 = simd_or(simd_and(basis_bits.bit_4, r7c0_7ff_tmp7), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                r7c0_7ff_tmp9 = simd_and(r7c0_7ff_tmp6, r7c0_7ff_tmp8);
                cc_range_7c0_7f4_2 = simd_or(r7c0_7ff_tmp5, r7c0_7ff_tmp9);
                carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(24), byte_df_adv));
                r7c0_7ff_tmp10 = simd_and(byte_df_adv, cc_range_7c0_7f4_2);
                struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r7c0_7ff_tmp10);
              }
              else {
                carryQ.CarryDequeueEnqueue(24, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(23, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 25);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(25, 179))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(25), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(26, 120))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(26, 76))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(26, 32))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r800_fff_tmp1, r800_1fff_tmp1);
                  carryQ.cq[26] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(26), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp4 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp5 = simd_or(basis_bits.bit_4, r800_fff_tmp4);
                  r800_fff_tmp6 = simd_and(basis_bits.bit_3, r800_fff_tmp5);
                  r800_fff_tmp7 = simd_andc(r800_fff_tmp3, r800_fff_tmp6);
                  r800_fff_tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r800_fff_tmp9 = simd_and(r800_ffff_tmp5, r800_fff_tmp8);
                  r800_fff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp12 = simd_and(r800_fff_tmp10, r800_fff_tmp11);
                  r800_fff_tmp13 = simd_and(r800_fff_tmp9, r800_fff_tmp12);
                  r800_fff_tmp14 = simd_or(r800_fff_tmp7, r800_fff_tmp13);
                  r800_fff_tmp15 = simd_and(r800_fff_tmp1, r800_ffff_tmp4);
                  r800_fff_tmp16 = simd_or(r800_fff_tmp14, r800_fff_tmp15);
                  r800_fff_tmp17 = simd_andc(r800_fff_tmp10, r800_ffff_tmp3);
                  r800_fff_tmp18 = simd_and(r800_fff_tmp1, r800_fff_tmp17);
                  r800_fff_tmp19 = simd_or(r800_fff_tmp16, r800_fff_tmp18);
                  r800_fff_tmp20 = simd_and(r800_ffff_tmp5, tmp1);
                  r800_fff_tmp21 = simd_and(basis_bits.bit_5, tmp3);
                  r800_fff_tmp22 = simd_and(basis_bits.bit_4, r800_fff_tmp21);
                  r800_fff_tmp23 = simd_andc(r800_fff_tmp20, r800_fff_tmp22);
                  cc_range_800_830_3 = simd_or(r800_fff_tmp19, r800_fff_tmp23);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(27), sequence_e0_a0_adv));
                  r800_fff_tmp24 = simd_and(sequence_e0_a0_adv, cc_range_800_830_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp24);
                  r800_fff_tmp25 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp26 = simd_andc(r800_fff_tmp25, r800_ffff_tmp1);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp26);
                  sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
                  r800_fff_tmp27 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp28 = simd_and(basis_bits.bit_4, r800_fff_tmp27);
                  r800_fff_tmp29 = simd_and(basis_bits.bit_3, r800_fff_tmp28);
                  r800_fff_tmp30 = simd_andc(r800_fff_tmp3, r800_fff_tmp29);
                  r800_fff_tmp31 = simd_and(tmp2, r800_fff_tmp11);
                  r800_fff_tmp32 = simd_and(r800_fff_tmp9, r800_fff_tmp31);
                  cc_range_840_85e_3 = simd_or(r800_fff_tmp30, r800_fff_tmp32);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(28), sequence_e0_a1_adv));
                  r800_fff_tmp33 = simd_and(sequence_e0_a1_adv, cc_range_840_85e_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp33);
                  r800_fff_tmp34 = simd_andc(r800_fff_tmp11, r800_ffff_tmp1);
                  byte_a2 = simd_and(r800_fff_tmp1, r800_fff_tmp34);
                  sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
                  r800_fff_tmp35 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r800_fff_tmp36 = simd_or(r800_ffff_tmp1, tmp3);
                  r800_fff_tmp37 = simd_and(basis_bits.bit_3, r800_fff_tmp36);
                  byte_range_a0_b2 = simd_andc(r800_fff_tmp35, r800_fff_tmp37);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_a2, carryQ.get_carry_in(29), sequence_e0_a2_adv));
                  r800_fff_tmp38 = simd_and(sequence_e0_a2_adv, byte_range_a0_b2);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp38);
                  byte_a4 = r800_fff_tmp15;
                  sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
                  r800_fff_tmp39 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp40 = simd_and(basis_bits.bit_4, r800_fff_tmp39);
                  r800_fff_tmp41 = simd_and(basis_bits.bit_3, r800_fff_tmp40);
                  r800_fff_tmp42 = simd_not(r800_fff_tmp41);
                  r800_fff_tmp43 = simd_or(basis_bits.bit_3, r800_fff_tmp36);
                  r800_fff_tmp44 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp42), simd_andc(r800_fff_tmp43, basis_bits.bit_2));
                  r800_fff_tmp45 = simd_and(r800_ffff_tmp5, r800_fff_tmp44);
                  r800_fff_tmp46 = simd_and(r800_fff_tmp10, tmp3);
                  r800_fff_tmp47 = simd_and(r800_fff_tmp20, r800_fff_tmp46);
                  r800_fff_tmp48 = simd_or(r800_fff_tmp45, r800_fff_tmp47);
                  r800_fff_tmp49 = simd_and(r800_fff_tmp20, tmp2);
                  r800_fff_tmp50 = simd_and(r800_fff_tmp49, r800_ffff_tmp3);
                  cc_range_903_93d_3 = simd_or(r800_fff_tmp48, r800_fff_tmp50);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(30), sequence_e0_a4_adv));
                  r800_fff_tmp51 = simd_and(sequence_e0_a4_adv, cc_range_903_93d_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp51);
                  r800_fff_tmp52 = simd_and(r800_ffff_tmp2, r800_fff_tmp25);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp52);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  r800_fff_tmp53 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp54 = simd_andc(r800_ffff_tmp5, r800_fff_tmp53);
                  r800_fff_tmp55 = simd_andc(r800_fff_tmp54, r800_1fff_tmp1);
                  r800_fff_tmp56 = simd_and(r800_fff_tmp54, basis_bits.bit_4);
                  r800_fff_tmp57 = simd_xor(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp58 = simd_and(r800_fff_tmp56, r800_fff_tmp57);
                  r800_fff_tmp59 = simd_or(r800_fff_tmp55, r800_fff_tmp58);
                  r800_fff_tmp60 = simd_not(r800_1fff_tmp1);
                  r800_fff_tmp61 = simd_and(tmp2, basis_bits.bit_6);
                  r800_fff_tmp62 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp60), simd_andc(r800_fff_tmp61, basis_bits.bit_3));
                  r800_fff_tmp63 = simd_and(r800_fff_tmp3, r800_fff_tmp62);
                  r800_fff_tmp64 = simd_or(r800_fff_tmp59, r800_fff_tmp63);
                  r800_fff_tmp65 = simd_or(basis_bits.bit_3, r800_4dff_tmp1);
                  r800_fff_tmp66 = simd_not(r800_fff_tmp65);
                  r800_fff_tmp67 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp66), simd_andc(r800_ffff_tmp6, basis_bits.bit_2));
                  r800_fff_tmp68 = simd_and(r800_ffff_tmp5, r800_fff_tmp67);
                  r800_fff_tmp69 = simd_or(r800_fff_tmp64, r800_fff_tmp68);
                  r800_fff_tmp70 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
                  r800_fff_tmp71 = simd_and(r800_fff_tmp35, r800_fff_tmp70);
                  cc_range_940_964_3 = simd_or(r800_fff_tmp69, r800_fff_tmp71);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(31), sequence_e0_a5_adv));
                  r800_fff_tmp72 = simd_and(sequence_e0_a5_adv, cc_range_940_964_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp72);
                  r800_fff_tmp73 = simd_and(r800_ffff_tmp2, r800_fff_tmp11);
                  byte_a6 = simd_and(r800_fff_tmp1, r800_fff_tmp73);
                  sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
                  r800_fff_tmp74 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  r800_fff_tmp75 = simd_andc(r800_1fff_tmp1, r800_fff_tmp74);
                  r800_fff_tmp76 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r800_fff_tmp77 = simd_xor(basis_bits.bit_4, r800_fff_tmp76);
                  r800_fff_tmp78 = simd_andc(r800_fff_tmp75, r800_fff_tmp77);
                  r800_fff_tmp79 = simd_andc(r800_fff_tmp54, r800_fff_tmp78);
                  r800_fff_tmp80 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp60), simd_andc(tmp4, basis_bits.bit_3));
                  r800_fff_tmp81 = simd_and(r800_fff_tmp3, r800_fff_tmp80);
                  r800_fff_tmp82 = simd_or(r800_fff_tmp79, r800_fff_tmp81);
                  r800_fff_tmp83 = simd_or(basis_bits.bit_3, r800_fff_tmp28);
                  r800_fff_tmp84 = simd_not(r800_fff_tmp83);
                  r800_fff_tmp85 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp84), simd_andc(r800_fff_tmp37, basis_bits.bit_2));
                  r800_fff_tmp86 = simd_and(r800_ffff_tmp5, r800_fff_tmp85);
                  r800_fff_tmp87 = simd_or(r800_fff_tmp82, r800_fff_tmp86);
                  r800_fff_tmp88 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp60), simd_andc(r800_fff_tmp40, basis_bits.bit_3));
                  r800_fff_tmp89 = simd_and(r800_fff_tmp35, r800_fff_tmp88);
                  r800_fff_tmp90 = simd_or(r800_fff_tmp87, r800_fff_tmp89);
                  r800_fff_tmp91 = simd_and(r800_fff_tmp20, r800_fff_tmp34);
                  r800_fff_tmp92 = simd_or(r800_fff_tmp90, r800_fff_tmp91);
                  r800_fff_tmp93 = simd_not(r800_fff_tmp39);
                  r800_fff_tmp94 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp93), simd_andc(r800_fff_tmp4, basis_bits.bit_4));
                  r800_fff_tmp95 = simd_and(r800_fff_tmp20, r800_fff_tmp94);
                  r800_fff_tmp96 = simd_or(r800_fff_tmp92, r800_fff_tmp95);
                  r800_fff_tmp97 = simd_and(tmp2, r800_fff_tmp25);
                  r800_fff_tmp98 = simd_and(r800_fff_tmp20, r800_fff_tmp97);
                  r800_fff_tmp99 = simd_or(r800_fff_tmp96, r800_fff_tmp98);
                  r800_fff_tmp100 = simd_and(r800_fff_tmp20, tmp4);
                  cc_range_980_9bf_3 = simd_or(r800_fff_tmp99, r800_fff_tmp100);
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(32), sequence_e0_a6_adv));
                  r800_fff_tmp101 = simd_and(sequence_e0_a6_adv, cc_range_980_9bf_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp101);
                  r800_fff_tmp102 = simd_and(r800_ffff_tmp2, tmp3);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp102);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  r800_fff_tmp103 = simd_not(r800_fff_tmp27);
                  r800_fff_tmp104 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp103), simd_andc(r800_fff_tmp21, basis_bits.bit_4));
                  r800_fff_tmp105 = simd_andc(r800_1fff_tmp1, r800_fff_tmp104);
                  r800_fff_tmp106 = simd_andc(r800_fff_tmp54, r800_fff_tmp105);
                  r800_fff_tmp107 = simd_not(r800_ffff_tmp3);
                  r800_fff_tmp108 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp107), simd_andc(tmp3, basis_bits.bit_5));
                  r800_fff_tmp109 = simd_and(r800_fff_tmp56, r800_fff_tmp108);
                  r800_fff_tmp110 = simd_or(r800_fff_tmp106, r800_fff_tmp109);
                  r800_fff_tmp111 = simd_and(r800_fff_tmp54, r800_fff_tmp31);
                  r800_fff_tmp112 = simd_or(r800_fff_tmp110, r800_fff_tmp111);
                  r800_fff_tmp113 = simd_andc(tmp2, basis_bits.bit_6);
                  r800_fff_tmp114 = simd_and(r800_fff_tmp9, r800_fff_tmp113);
                  r800_fff_tmp115 = simd_or(r800_fff_tmp112, r800_fff_tmp114);
                  r800_fff_tmp116 = simd_and(basis_bits.bit_3, tmp4);
                  r800_fff_tmp117 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp66), simd_andc(r800_fff_tmp116, basis_bits.bit_2));
                  r800_fff_tmp118 = simd_and(r800_ffff_tmp5, r800_fff_tmp117);
                  r800_fff_tmp119 = simd_or(r800_fff_tmp115, r800_fff_tmp118);
                  r800_fff_tmp120 = simd_not(tmp2);
                  r800_fff_tmp121 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp120), simd_andc(r800_fff_tmp5, basis_bits.bit_3));
                  r800_fff_tmp122 = simd_and(r800_fff_tmp35, r800_fff_tmp121);
                  cc_range_9c0_9e6_3 = simd_or(r800_fff_tmp119, r800_fff_tmp122);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(33), sequence_e0_a7_adv));
                  r800_fff_tmp123 = simd_and(sequence_e0_a7_adv, cc_range_9c0_9e6_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp123);
                  byte_a8 = r800_fff_tmp18;
                  sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
                  r800_fff_tmp124 = simd_andc(tmp3, r800_ffff_tmp1);
                  r800_fff_tmp125 = simd_or(basis_bits.bit_5, tmp3);
                  r800_fff_tmp126 = simd_not(r800_fff_tmp125);
                  r800_fff_tmp127 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp126), simd_andc(r800_fff_tmp76, basis_bits.bit_4));
                  r800_fff_tmp128 = simd_or(r800_fff_tmp124, r800_fff_tmp127);
                  r800_fff_tmp129 = simd_and(r800_fff_tmp54, r800_fff_tmp128);
                  r800_fff_tmp130 = simd_or(r800_fff_tmp129, r800_fff_tmp81);
                  r800_fff_tmp131 = simd_or(r800_fff_tmp130, r800_fff_tmp86);
                  r800_fff_tmp132 = simd_or(r800_fff_tmp131, r800_fff_tmp89);
                  r800_fff_tmp133 = simd_and(r800_fff_tmp20, r800_fff_tmp74);
                  r800_fff_tmp134 = simd_or(r800_fff_tmp132, r800_fff_tmp133);
                  r800_fff_tmp135 = simd_and(r800_fff_tmp20, r800_ffff_tmp2);
                  r800_fff_tmp136 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp137 = simd_and(r800_fff_tmp135, r800_fff_tmp136);
                  r800_fff_tmp138 = simd_or(r800_fff_tmp134, r800_fff_tmp137);
                  r800_fff_tmp139 = simd_andc(r800_fff_tmp10, basis_bits.bit_6);
                  r800_fff_tmp140 = simd_and(r800_fff_tmp20, r800_fff_tmp139);
                  r800_fff_tmp141 = simd_or(r800_fff_tmp138, r800_fff_tmp140);
                  r800_fff_tmp142 = simd_and(r800_fff_tmp20, r800_fff_tmp61);
                  cc_range_a03_a3e_3 = simd_or(r800_fff_tmp141, r800_fff_tmp142);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(34), sequence_e0_a8_adv));
                  r800_fff_tmp143 = simd_and(sequence_e0_a8_adv, cc_range_a03_a3e_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp143);
                  r800_fff_tmp144 = simd_and(r800_fff_tmp10, r800_fff_tmp25);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp144);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  r800_fff_tmp145 = simd_and(r800_fff_tmp9, basis_bits.bit_4);
                  r800_fff_tmp146 = simd_and(r800_fff_tmp145, r800_fff_tmp57);
                  r800_fff_tmp147 = simd_or(r800_fff_tmp55, r800_fff_tmp146);
                  r800_fff_tmp148 = simd_or(r800_fff_tmp147, r800_fff_tmp32);
                  r800_fff_tmp149 = simd_and(r800_fff_tmp1, r800_fff_tmp5);
                  r800_fff_tmp150 = simd_or(r800_fff_tmp148, r800_fff_tmp149);
                  r800_fff_tmp151 = simd_andc(r800_fff_tmp20, basis_bits.bit_4);
                  r800_fff_tmp152 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp107), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r800_fff_tmp153 = simd_and(r800_fff_tmp151, r800_fff_tmp152);
                  cc_range_a40_a72_3 = simd_or(r800_fff_tmp150, r800_fff_tmp153);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(35), sequence_e0_a9_adv));
                  r800_fff_tmp154 = simd_and(sequence_e0_a9_adv, cc_range_a40_a72_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp154);
                  byte_aa = simd_and(r800_fff_tmp1, r800_fff_tmp12);
                  sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
                  r800_fff_tmp155 = simd_not(r800_fff_tmp4);
                  r800_fff_tmp156 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp155), simd_andc(r800_fff_tmp76, basis_bits.bit_4));
                  r800_fff_tmp157 = simd_or(r800_fff_tmp124, r800_fff_tmp156);
                  r800_fff_tmp158 = simd_and(r800_fff_tmp54, r800_fff_tmp157);
                  r800_fff_tmp159 = simd_not(r800_4dff_tmp1);
                  r800_fff_tmp160 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp159), simd_andc(tmp4, basis_bits.bit_3));
                  r800_fff_tmp161 = simd_and(r800_fff_tmp3, r800_fff_tmp160);
                  r800_fff_tmp162 = simd_or(r800_fff_tmp158, r800_fff_tmp161);
                  r800_fff_tmp163 = simd_or(r800_fff_tmp162, r800_fff_tmp86);
                  r800_fff_tmp164 = simd_or(r800_fff_tmp163, r800_fff_tmp89);
                  r800_fff_tmp165 = simd_or(r800_fff_tmp164, r800_fff_tmp133);
                  r800_fff_tmp166 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp93), simd_andc(r800_fff_tmp76, basis_bits.bit_4));
                  r800_fff_tmp167 = simd_and(r800_fff_tmp20, r800_fff_tmp166);
                  r800_fff_tmp168 = simd_or(r800_fff_tmp165, r800_fff_tmp167);
                  cc_range_a83_abd_3 = simd_or(r800_fff_tmp168, r800_fff_tmp50);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(36), sequence_e0_aa_adv));
                  r800_fff_tmp169 = simd_and(sequence_e0_aa_adv, cc_range_a83_abd_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp169);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp46);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  r800_fff_tmp170 = simd_andc(r800_1fff_tmp1, r800_fff_tmp144);
                  r800_fff_tmp171 = simd_andc(r800_fff_tmp54, r800_fff_tmp170);
                  r800_fff_tmp172 = simd_or(r800_fff_tmp171, r800_fff_tmp109);
                  r800_fff_tmp173 = simd_andc(r800_fff_tmp9, r800_1fff_tmp1);
                  r800_fff_tmp174 = simd_or(r800_fff_tmp172, r800_fff_tmp173);
                  r800_fff_tmp175 = simd_andc(r800_fff_tmp1, r800_4dff_tmp1);
                  r800_fff_tmp176 = simd_or(r800_fff_tmp174, r800_fff_tmp175);
                  r800_fff_tmp177 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp159), simd_andc(r800_fff_tmp5, basis_bits.bit_3));
                  r800_fff_tmp178 = simd_and(r800_fff_tmp35, r800_fff_tmp177);
                  cc_range_ac0_ae6_3 = simd_or(r800_fff_tmp176, r800_fff_tmp178);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(37), sequence_e0_ab_adv));
                  r800_fff_tmp179 = simd_and(sequence_e0_ab_adv, cc_range_ac0_ae6_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp179);
                  r800_fff_tmp180 = simd_andc(tmp2, r800_ffff_tmp3);
                  byte_ac = simd_and(r800_fff_tmp1, r800_fff_tmp180);
                  sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
                  r800_fff_tmp181 = simd_or(r800_fff_tmp74, r800_fff_tmp77);
                  r800_fff_tmp182 = simd_and(r800_fff_tmp54, r800_fff_tmp181);
                  r800_fff_tmp183 = simd_or(r800_fff_tmp182, r800_fff_tmp81);
                  r800_fff_tmp184 = simd_or(r800_fff_tmp183, r800_fff_tmp86);
                  r800_fff_tmp185 = simd_or(r800_fff_tmp184, r800_fff_tmp89);
                  r800_fff_tmp186 = simd_or(r800_fff_tmp185, r800_fff_tmp133);
                  r800_fff_tmp187 = simd_or(r800_fff_tmp186, r800_fff_tmp167);
                  cc_range_b02_b3d_3 = simd_or(r800_fff_tmp187, r800_fff_tmp98);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(38), sequence_e0_ac_adv));
                  r800_fff_tmp188 = simd_and(sequence_e0_ac_adv, cc_range_b02_b3d_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp188);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp97);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  r800_fff_tmp189 = simd_or(r800_fff_tmp110, r800_fff_tmp114);
                  r800_fff_tmp190 = simd_or(r800_fff_tmp189, r800_fff_tmp118);
                  r800_fff_tmp191 = simd_not(basis_bits.bit_4);
                  r800_fff_tmp192 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp191), simd_andc(r800_fff_tmp5, basis_bits.bit_3));
                  r800_fff_tmp193 = simd_and(r800_fff_tmp35, r800_fff_tmp192);
                  cc_range_b40_b66_3 = simd_or(r800_fff_tmp190, r800_fff_tmp193);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(39), sequence_e0_ad_adv));
                  r800_fff_tmp194 = simd_and(sequence_e0_ad_adv, cc_range_b40_b66_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp194);
                  byte_ae = simd_and(r800_fff_tmp1, r800_fff_tmp31);
                  sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
                  r800_fff_tmp195 = simd_or(r800_fff_tmp129, r800_fff_tmp63);
                  r800_fff_tmp196 = simd_andc(r800_fff_tmp9, basis_bits.bit_4);
                  r800_fff_tmp197 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp198 = simd_and(r800_fff_tmp196, r800_fff_tmp197);
                  r800_fff_tmp199 = simd_or(r800_fff_tmp195, r800_fff_tmp198);
                  r800_fff_tmp200 = simd_and(r800_fff_tmp9, r800_fff_tmp10);
                  r800_fff_tmp201 = simd_and(r800_fff_tmp200, r800_fff_tmp136);
                  r800_fff_tmp202 = simd_or(r800_fff_tmp199, r800_fff_tmp201);
                  r800_fff_tmp203 = simd_and(r800_fff_tmp9, r800_fff_tmp180);
                  r800_fff_tmp204 = simd_or(r800_fff_tmp202, r800_fff_tmp203);
                  r800_fff_tmp205 = simd_and(r800_fff_tmp9, r800_fff_tmp61);
                  r800_fff_tmp206 = simd_or(r800_fff_tmp204, r800_fff_tmp205);
                  r800_fff_tmp207 = simd_andc(r800_fff_tmp1, basis_bits.bit_4);
                  r800_fff_tmp208 = simd_and(r800_fff_tmp207, r800_fff_tmp108);
                  r800_fff_tmp209 = simd_or(r800_fff_tmp206, r800_fff_tmp208);
                  r800_fff_tmp210 = simd_and(r800_fff_tmp1, r800_fff_tmp10);
                  r800_fff_tmp211 = simd_andc(r800_fff_tmp210, tmp3);
                  r800_fff_tmp212 = simd_or(r800_fff_tmp209, r800_fff_tmp211);
                  r800_fff_tmp213 = simd_not(r800_fff_tmp40);
                  r800_fff_tmp214 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp213), simd_andc(r800_fff_tmp61, basis_bits.bit_3));
                  r800_fff_tmp215 = simd_and(r800_fff_tmp35, r800_fff_tmp214);
                  r800_fff_tmp216 = simd_or(r800_fff_tmp212, r800_fff_tmp215);
                  cc_range_b83_bbf_3 = simd_or(r800_fff_tmp216, r800_fff_tmp100);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(40), sequence_e0_ae_adv));
                  r800_fff_tmp217 = simd_and(sequence_e0_ae_adv, cc_range_b83_bbf_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp217);
                  byte_af = simd_and(r800_fff_tmp1, tmp4);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  r800_fff_tmp218 = simd_andc(r800_fff_tmp54, r800_ffff_tmp1);
                  r800_fff_tmp219 = simd_and(r800_fff_tmp218, r800_fff_tmp136);
                  r800_fff_tmp220 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp103), simd_andc(r800_fff_tmp4, basis_bits.bit_4));
                  r800_fff_tmp221 = simd_and(r800_fff_tmp54, r800_fff_tmp220);
                  r800_fff_tmp222 = simd_or(r800_fff_tmp219, r800_fff_tmp221);
                  r800_fff_tmp223 = simd_and(r800_fff_tmp56, r800_fff_tmp152);
                  r800_fff_tmp224 = simd_or(r800_fff_tmp222, r800_fff_tmp223);
                  r800_fff_tmp225 = simd_or(r800_fff_tmp224, r800_fff_tmp173);
                  r800_fff_tmp226 = simd_and(basis_bits.bit_4, r800_fff_tmp125);
                  r800_fff_tmp227 = simd_not(r800_fff_tmp226);
                  r800_fff_tmp228 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp227), simd_andc(r800_fff_tmp5, basis_bits.bit_3));
                  r800_fff_tmp229 = simd_and(r800_fff_tmp35, r800_fff_tmp228);
                  cc_range_bc1_be6_3 = simd_or(r800_fff_tmp225, r800_fff_tmp229);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(41), sequence_e0_af_adv));
                  r800_fff_tmp230 = simd_and(sequence_e0_af_adv, cc_range_bc1_be6_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp230);
                  byte_b0 = simd_andc(r800_fff_tmp20, r800_1fff_tmp1);
                  sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
                  r800_fff_tmp231 = simd_and(r800_fff_tmp218, r800_ffff_tmp3);
                  r800_fff_tmp232 = simd_and(r800_fff_tmp54, r800_fff_tmp77);
                  r800_fff_tmp233 = simd_or(r800_fff_tmp231, r800_fff_tmp232);
                  r800_fff_tmp234 = simd_or(r800_fff_tmp233, r800_fff_tmp63);
                  r800_fff_tmp235 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  r800_fff_tmp236 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp84), simd_andc(r800_fff_tmp235, basis_bits.bit_2));
                  r800_fff_tmp237 = simd_and(r800_ffff_tmp5, r800_fff_tmp236);
                  r800_fff_tmp238 = simd_or(r800_fff_tmp234, r800_fff_tmp237);
                  r800_fff_tmp239 = simd_xor(basis_bits.bit_3, r800_fff_tmp40);
                  r800_fff_tmp240 = simd_and(r800_fff_tmp35, r800_fff_tmp239);
                  r800_fff_tmp241 = simd_or(r800_fff_tmp238, r800_fff_tmp240);
                  cc_range_c01_c3d_3 = simd_or(r800_fff_tmp241, r800_fff_tmp98);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(42), sequence_e0_b0_adv));
                  r800_fff_tmp242 = simd_and(sequence_e0_b0_adv, cc_range_c01_c3d_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp242);
                  byte_b1 = simd_and(r800_fff_tmp20, r800_fff_tmp26);
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  r800_fff_tmp243 = simd_andc(r800_fff_tmp54, basis_bits.bit_4);
                  r800_fff_tmp244 = simd_and(r800_fff_tmp243, r800_fff_tmp57);
                  r800_fff_tmp245 = simd_and(r800_fff_tmp9, r800_fff_tmp139);
                  r800_fff_tmp246 = simd_or(r800_fff_tmp244, r800_fff_tmp245);
                  r800_fff_tmp247 = simd_or(r800_fff_tmp246, r800_fff_tmp175);
                  r800_fff_tmp248 = simd_or(r800_fff_tmp247, r800_fff_tmp149);
                  r800_fff_tmp249 = simd_and(r800_fff_tmp20, basis_bits.bit_4);
                  cc_range_c41_c78_3 = simd_or(r800_fff_tmp248, r800_fff_tmp249);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(43), sequence_e0_b1_adv));
                  r800_fff_tmp250 = simd_and(sequence_e0_b1_adv, cc_range_c41_c78_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp250);
                  byte_b2 = r800_fff_tmp91;
                  sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
                  r800_fff_tmp251 = simd_or(r800_fff_tmp182, r800_fff_tmp63);
                  r800_fff_tmp252 = simd_or(r800_fff_tmp251, r800_fff_tmp237);
                  r800_fff_tmp253 = simd_not(r800_ffff_tmp1);
                  r800_fff_tmp254 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp253), simd_andc(r800_fff_tmp40, basis_bits.bit_3));
                  r800_fff_tmp255 = simd_and(r800_fff_tmp35, r800_fff_tmp254);
                  r800_fff_tmp256 = simd_or(r800_fff_tmp252, r800_fff_tmp255);
                  r800_fff_tmp257 = simd_or(r800_fff_tmp256, r800_fff_tmp167);
                  r800_fff_tmp258 = simd_and(r800_fff_tmp49, r800_fff_tmp136);
                  cc_range_c82_cbd_3 = simd_or(r800_fff_tmp257, r800_fff_tmp258);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(44), sequence_e0_b2_adv));
                  r800_fff_tmp259 = simd_and(sequence_e0_b2_adv, cc_range_c82_cbd_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp259);
                  byte_b3 = simd_and(r800_fff_tmp20, r800_fff_tmp124);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  r800_fff_tmp260 = simd_andc(r800_fff_tmp54, r800_4dff_tmp1);
                  r800_fff_tmp261 = simd_and(r800_fff_tmp243, r800_fff_tmp108);
                  r800_fff_tmp262 = simd_or(r800_fff_tmp260, r800_fff_tmp261);
                  r800_fff_tmp263 = simd_and(r800_fff_tmp54, r800_fff_tmp104);
                  r800_fff_tmp264 = simd_or(r800_fff_tmp262, r800_fff_tmp263);
                  r800_fff_tmp265 = simd_and(r800_fff_tmp10, basis_bits.bit_6);
                  r800_fff_tmp266 = simd_and(r800_fff_tmp54, r800_fff_tmp265);
                  r800_fff_tmp267 = simd_or(r800_fff_tmp264, r800_fff_tmp266);
                  r800_fff_tmp268 = simd_or(r800_fff_tmp267, r800_fff_tmp32);
                  r800_fff_tmp269 = simd_or(r800_fff_tmp268, r800_fff_tmp175);
                  r800_fff_tmp270 = simd_or(r800_fff_tmp269, r800_fff_tmp149);
                  r800_fff_tmp271 = simd_andc(r800_fff_tmp20, r800_ffff_tmp1);
                  r800_fff_tmp272 = simd_and(r800_fff_tmp271, r800_fff_tmp136);
                  cc_range_cc0_cf1_3 = simd_or(r800_fff_tmp270, r800_fff_tmp272);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(45), sequence_e0_b3_adv));
                  r800_fff_tmp273 = simd_and(sequence_e0_b3_adv, cc_range_cc0_cf1_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp273);
                  byte_b4 = simd_and(r800_fff_tmp20, r800_ffff_tmp4);
                  sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
                  r800_fff_tmp274 = simd_and(basis_bits.bit_3, r800_fff_tmp226);
                  r800_fff_tmp275 = simd_not(r800_fff_tmp274);
                  r800_fff_tmp276 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp275), simd_andc(r800_fff_tmp235, basis_bits.bit_2));
                  r800_fff_tmp277 = simd_and(r800_ffff_tmp5, r800_fff_tmp276);
                  r800_fff_tmp278 = simd_or(r800_fff_tmp251, r800_fff_tmp277);
                  r800_fff_tmp279 = simd_or(r800_fff_tmp278, r800_fff_tmp98);
                  cc_range_d02_d3f_3 = simd_or(r800_fff_tmp279, r800_fff_tmp100);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(46), sequence_e0_b4_adv));
                  r800_fff_tmp280 = simd_and(sequence_e0_b4_adv, cc_range_d02_d3f_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp280);
                  byte_b5 = simd_and(r800_fff_tmp20, r800_fff_tmp52);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  r800_fff_tmp281 = simd_andc(r800_1fff_tmp1, r800_fff_tmp220);
                  r800_fff_tmp282 = simd_andc(r800_fff_tmp54, r800_fff_tmp281);
                  r800_fff_tmp283 = simd_or(r800_fff_tmp282, r800_fff_tmp223);
                  r800_fff_tmp284 = simd_or(r800_fff_tmp283, r800_fff_tmp111);
                  r800_fff_tmp285 = simd_or(r800_fff_tmp284, r800_fff_tmp175);
                  r800_fff_tmp286 = simd_xor(basis_bits.bit_3, r800_fff_tmp5);
                  r800_fff_tmp287 = simd_and(r800_fff_tmp35, r800_fff_tmp286);
                  r800_fff_tmp288 = simd_or(r800_fff_tmp285, r800_fff_tmp287);
                  r800_fff_tmp289 = simd_and(r800_fff_tmp249, r800_fff_tmp27);
                  cc_range_d40_d79_3 = simd_or(r800_fff_tmp288, r800_fff_tmp289);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(47), sequence_e0_b5_adv));
                  r800_fff_tmp290 = simd_and(sequence_e0_b5_adv, cc_range_d40_d79_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp290);
                  byte_b6 = simd_and(r800_fff_tmp20, r800_fff_tmp73);
                  sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
                  r800_fff_tmp291 = simd_and(r800_fff_tmp54, r800_fff_tmp74);
                  r800_fff_tmp292 = simd_or(basis_bits.bit_4, r800_fff_tmp21);
                  r800_fff_tmp293 = simd_not(r800_fff_tmp292);
                  r800_fff_tmp294 = simd_or(basis_bits.bit_4, r800_fff_tmp76);
                  r800_fff_tmp295 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp293), simd_andc(r800_fff_tmp294, basis_bits.bit_3));
                  r800_fff_tmp296 = simd_and(r800_fff_tmp3, r800_fff_tmp295);
                  r800_fff_tmp297 = simd_or(r800_fff_tmp291, r800_fff_tmp296);
                  r800_fff_tmp298 = simd_not(r800_fff_tmp235);
                  r800_fff_tmp299 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp298), simd_andc(r800_fff_tmp41, basis_bits.bit_2));
                  r800_fff_tmp300 = simd_and(r800_ffff_tmp5, r800_fff_tmp299);
                  r800_fff_tmp301 = simd_or(r800_fff_tmp297, r800_fff_tmp300);
                  r800_fff_tmp302 = simd_not(basis_bits.bit_5);
                  r800_fff_tmp303 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp302), simd_andc(r800_fff_tmp125, basis_bits.bit_4));
                  r800_fff_tmp304 = simd_and(r800_fff_tmp20, r800_fff_tmp303);
                  r800_fff_tmp305 = simd_or(r800_fff_tmp301, r800_fff_tmp304);
                  cc_range_d82_dbd_3 = simd_or(r800_fff_tmp305, r800_fff_tmp98);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(48), sequence_e0_b6_adv));
                  r800_fff_tmp306 = simd_and(sequence_e0_b6_adv, cc_range_d82_dbd_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp306);
                  byte_b7 = simd_and(r800_fff_tmp20, r800_fff_tmp102);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  r800_fff_tmp307 = simd_andc(r800_fff_tmp243, r800_fff_tmp21);
                  r800_fff_tmp308 = simd_andc(r800_fff_tmp9, r800_4dff_tmp1);
                  r800_fff_tmp309 = simd_or(r800_fff_tmp307, r800_fff_tmp308);
                  r800_fff_tmp310 = simd_andc(r800_fff_tmp145, r800_fff_tmp21);
                  r800_fff_tmp311 = simd_or(r800_fff_tmp309, r800_fff_tmp310);
                  r800_fff_tmp312 = simd_or(r800_fff_tmp311, r800_fff_tmp149);
                  cc_range_dc0_df2_3 = simd_or(r800_fff_tmp312, r800_fff_tmp153);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(49), sequence_e0_b7_adv));
                  r800_fff_tmp313 = simd_and(sequence_e0_b7_adv, cc_range_dc0_df2_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp313);
                  byte_b8 = simd_and(r800_fff_tmp20, r800_fff_tmp17);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  r800_fff_tmp314 = simd_and(basis_bits.bit_3, r800_1fff_tmp1);
                  r800_fff_tmp315 = simd_not(r800_fff_tmp314);
                  r800_fff_tmp316 = simd_or(basis_bits.bit_3, r800_1fff_tmp1);
                  r800_fff_tmp317 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp315), simd_andc(r800_fff_tmp316, basis_bits.bit_2));
                  r800_fff_tmp318 = simd_and(r800_ffff_tmp5, r800_fff_tmp317);
                  r800_fff_tmp319 = simd_or(r800_fff_tmp318, r800_fff_tmp133);
                  cc_range_e01_e3f_3 = simd_or(r800_fff_tmp319, r800_fff_tmp100);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(50), sequence_e0_b8_adv));
                  r800_fff_tmp320 = simd_and(sequence_e0_b8_adv, cc_range_e01_e3f_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp320);
                  byte_b9 = simd_and(r800_fff_tmp20, r800_fff_tmp144);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  r800_fff_tmp321 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp120), simd_andc(tmp4, basis_bits.bit_3));
                  r800_fff_tmp322 = simd_and(r800_fff_tmp3, r800_fff_tmp321);
                  cc_range_e40_e4f_3 = simd_or(r800_fff_tmp307, r800_fff_tmp322);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(51), sequence_e0_b9_adv));
                  r800_fff_tmp323 = simd_and(sequence_e0_b9_adv, cc_range_e40_e4f_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp323);
                  byte_ba = simd_and(r800_fff_tmp20, r800_fff_tmp12);
                  sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
                  r800_fff_tmp324 = simd_and(r800_fff_tmp54, r800_ffff_tmp4);
                  r800_fff_tmp325 = simd_or(r800_fff_tmp219, r800_fff_tmp324);
                  r800_fff_tmp326 = simd_or(r800_fff_tmp325, r800_fff_tmp263);
                  r800_fff_tmp327 = simd_and(r800_fff_tmp54, r800_fff_tmp12);
                  r800_fff_tmp328 = simd_or(r800_fff_tmp326, r800_fff_tmp327);
                  r800_fff_tmp329 = simd_and(r800_fff_tmp54, r800_fff_tmp97);
                  r800_fff_tmp330 = simd_or(r800_fff_tmp328, r800_fff_tmp329);
                  r800_fff_tmp331 = simd_and(r800_fff_tmp9, r800_ffff_tmp2);
                  r800_fff_tmp332 = simd_or(r800_fff_tmp330, r800_fff_tmp331);
                  r800_fff_tmp333 = simd_and(r800_fff_tmp145, r800_fff_tmp27);
                  r800_fff_tmp334 = simd_or(r800_fff_tmp332, r800_fff_tmp333);
                  r800_fff_tmp335 = simd_andc(r800_fff_tmp1, r800_ffff_tmp1);
                  r800_fff_tmp336 = simd_and(r800_fff_tmp335, r800_ffff_tmp3);
                  r800_fff_tmp337 = simd_or(r800_fff_tmp334, r800_fff_tmp336);
                  r800_fff_tmp338 = simd_or(r800_fff_tmp337, byte_a5);
                  r800_fff_tmp339 = simd_or(r800_fff_tmp338, byte_a7);
                  r800_fff_tmp340 = simd_and(r800_fff_tmp1, r800_fff_tmp265);
                  r800_fff_tmp341 = simd_or(r800_fff_tmp339, r800_fff_tmp340);
                  r800_fff_tmp342 = simd_and(tmp2, r800_ffff_tmp3);
                  r800_fff_tmp343 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp60), simd_andc(r800_fff_tmp342, basis_bits.bit_3));
                  r800_fff_tmp344 = simd_and(r800_fff_tmp35, r800_fff_tmp343);
                  r800_fff_tmp345 = simd_or(r800_fff_tmp341, r800_fff_tmp344);
                  r800_fff_tmp346 = simd_or(r800_fff_tmp345, r800_fff_tmp133);
                  cc_range_e81_ebd_3 = simd_or(r800_fff_tmp346, r800_fff_tmp98);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(52), sequence_e0_ba_adv));
                  r800_fff_tmp347 = simd_and(sequence_e0_ba_adv, cc_range_e81_ebd_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp347);
                  byte_bb = r800_fff_tmp47;
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  r800_fff_tmp348 = simd_andc(r800_fff_tmp243, r800_fff_tmp76);
                  r800_fff_tmp349 = simd_and(r800_fff_tmp54, r800_fff_tmp73);
                  r800_fff_tmp350 = simd_or(r800_fff_tmp348, r800_fff_tmp349);
                  r800_fff_tmp351 = simd_andc(r800_fff_tmp9, r800_fff_tmp40);
                  r800_fff_tmp352 = simd_or(r800_fff_tmp350, r800_fff_tmp351);
                  r800_fff_tmp353 = simd_and(r800_fff_tmp9, tmp2);
                  cc_range_ec0_edc_3 = simd_or(r800_fff_tmp352, r800_fff_tmp353);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(53), sequence_e0_bb_adv));
                  r800_fff_tmp354 = simd_and(sequence_e0_bb_adv, cc_range_ec0_edc_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp354);
                  byte_bc = simd_and(r800_fff_tmp20, r800_fff_tmp180);
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  r800_fff_tmp355 = simd_andc(r800_fff_tmp3, r800_ffff_tmp6);
                  r800_fff_tmp356 = simd_and(basis_bits.bit_3, r800_fff_tmp294);
                  r800_fff_tmp357 = simd_not(r800_fff_tmp356);
                  r800_fff_tmp358 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp357), simd_andc(r800_fff_tmp41, basis_bits.bit_2));
                  r800_fff_tmp359 = simd_and(r800_ffff_tmp5, r800_fff_tmp358);
                  r800_fff_tmp360 = simd_or(r800_fff_tmp355, r800_fff_tmp359);
                  r800_fff_tmp361 = simd_or(r800_fff_tmp360, byte_b6);
                  r800_fff_tmp362 = simd_or(r800_fff_tmp361, byte_b8);
                  r800_fff_tmp363 = simd_and(r800_fff_tmp249, r800_fff_tmp39);
                  cc_range_f00_f3a_3 = simd_or(r800_fff_tmp362, r800_fff_tmp363);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(54), sequence_e0_bc_adv));
                  r800_fff_tmp364 = simd_and(sequence_e0_bc_adv, cc_range_f00_f3a_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp364);
                  byte_bd = r800_fff_tmp98;
                  sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
                  r800_fff_tmp365 = simd_or(basis_bits.bit_3, r800_fff_tmp342);
                  r800_fff_tmp366 = simd_not(r800_fff_tmp365);
                  r800_fff_tmp367 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp366), simd_andc(r800_fff_tmp83, basis_bits.bit_2));
                  r800_fff_tmp368 = simd_and(r800_ffff_tmp5, r800_fff_tmp367);
                  r800_fff_tmp369 = simd_or(r800_fff_tmp243, r800_fff_tmp368);
                  cc_range_f40_f7f_3 = simd_or(r800_fff_tmp369, r800_fff_tmp100);
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(55), sequence_e0_bd_adv));
                  r800_fff_tmp370 = simd_and(sequence_e0_bd_adv, cc_range_f40_f7f_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp370);
                  byte_be = simd_and(r800_fff_tmp20, r800_fff_tmp31);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  r800_fff_tmp371 = simd_and(r800_fff_tmp54, r800_fff_tmp52);
                  r800_fff_tmp372 = simd_andc(r800_fff_tmp56, r800_fff_tmp76);
                  r800_fff_tmp373 = simd_or(r800_fff_tmp371, r800_fff_tmp372);
                  cc_range_f85_fbe_3 = simd_or(r800_fff_tmp373, r800_fff_tmp142);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(56), sequence_e0_be_adv));
                  r800_fff_tmp374 = simd_and(sequence_e0_be_adv, cc_range_f85_fbe_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp374);
                  byte_bf = r800_fff_tmp100;
                  sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
                  r800_fff_tmp375 = simd_andc(r800_fff_tmp243, r800_fff_tmp4);
                  r800_fff_tmp376 = simd_not(r800_fff_tmp76);
                  r800_fff_tmp377 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp376), simd_andc(r800_fff_tmp21, basis_bits.bit_4));
                  r800_fff_tmp378 = simd_and(r800_fff_tmp54, r800_fff_tmp377);
                  r800_fff_tmp379 = simd_or(r800_fff_tmp375, r800_fff_tmp378);
                  r800_fff_tmp380 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp227), simd_andc(r800_fff_tmp61, basis_bits.bit_3));
                  r800_fff_tmp381 = simd_and(r800_fff_tmp3, r800_fff_tmp380);
                  cc_range_fc0_fce_3 = simd_or(r800_fff_tmp379, r800_fff_tmp381);
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(57), sequence_e0_bf_adv));
                  r800_fff_tmp382 = simd_and(sequence_e0_bf_adv, cc_range_fc0_fce_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r800_fff_tmp382);
                }
                else {
                  carryQ.CarryDequeueEnqueue(26, 32);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(58, 44))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  byte_80 = simd_andc(r1000_1fff_tmp2, r800_1fff_tmp1);
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(58), r1000_1fff_tmp3));
                  sequence_e1_80 = simd_and(r1000_1fff_tmp3, byte_80);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_and(tmp2, r800_ffff_tmp3);
                  r1000_1fff_tmp5 = simd_or(basis_bits.bit_3, r1000_1fff_tmp4);
                  r1000_1fff_tmp6 = simd_and(basis_bits.bit_2, r1000_1fff_tmp5);
                  r1000_1fff_tmp7 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp6);
                  r1000_1fff_tmp8 = simd_and(r800_ffff_tmp5, tmp1);
                  r1000_1fff_tmp9 = simd_and(r1000_1fff_tmp8, r800_1fff_tmp3);
                  r1000_1fff_tmp10 = simd_or(r1000_1fff_tmp7, r1000_1fff_tmp9);
                  r1000_1fff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp12 = simd_andc(r1000_1fff_tmp11, r800_ffff_tmp3);
                  r1000_1fff_tmp13 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp12);
                  r1000_1fff_tmp14 = simd_or(r1000_1fff_tmp10, r1000_1fff_tmp13);
                  r1000_1fff_tmp15 = simd_and(r1000_1fff_tmp8, basis_bits.bit_4);
                  r1000_1fff_tmp16 = simd_not(r800_ffff_tmp3);
                  r1000_1fff_tmp17 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp16), simd_andc(tmp3, basis_bits.bit_5));
                  r1000_1fff_tmp18 = simd_and(r1000_1fff_tmp15, r1000_1fff_tmp17);
                  r1000_1fff_tmp19 = simd_or(r1000_1fff_tmp14, r1000_1fff_tmp18);
                  r1000_1fff_tmp20 = simd_and(r1000_1fff_tmp8, tmp4);
                  cc_range_1000_103f_3 = simd_or(r1000_1fff_tmp19, r1000_1fff_tmp20);
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(59), sequence_e1_80_adv));
                  r1000_1fff_tmp21 = simd_and(sequence_e1_80_adv, cc_range_1000_103f_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r1000_1fff_tmp21);
                  byte_81 = simd_and(r1000_1fff_tmp2, r800_1fff_tmp3);
                  sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
                  r1000_1fff_tmp22 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp23 = simd_andc(r1000_1fff_tmp22, r800_ffff_tmp6);
                  r1000_1fff_tmp24 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp25 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp24);
                  r1000_1fff_tmp26 = simd_and(r1000_1fff_tmp25, basis_bits.bit_4);
                  r1000_1fff_tmp27 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp28 = simd_and(r1000_1fff_tmp26, r1000_1fff_tmp27);
                  r1000_1fff_tmp29 = simd_or(r1000_1fff_tmp23, r1000_1fff_tmp28);
                  r1000_1fff_tmp30 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r1000_1fff_tmp31 = simd_xor(basis_bits.bit_3, r800_1fff_tmp1);
                  r1000_1fff_tmp32 = simd_and(r1000_1fff_tmp30, r1000_1fff_tmp31);
                  r1000_1fff_tmp33 = simd_or(r1000_1fff_tmp29, r1000_1fff_tmp32);
                  r1000_1fff_tmp34 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp35 = simd_or(basis_bits.bit_4, r1000_1fff_tmp34);
                  r1000_1fff_tmp36 = simd_and(r1000_1fff_tmp8, r1000_1fff_tmp35);
                  cc_range_1040_1075_3 = simd_or(r1000_1fff_tmp33, r1000_1fff_tmp36);
                  carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(60), sequence_e1_81_adv));
                  r1000_1fff_tmp37 = simd_and(sequence_e1_81_adv, cc_range_1040_1075_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r1000_1fff_tmp37);
                  r1000_1fff_tmp38 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp39 = simd_andc(r1000_1fff_tmp38, r800_ffff_tmp1);
                  byte_82 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp39);
                  sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
                  r1000_1fff_tmp40 = simd_andc(r1000_1fff_tmp2, r800_4dff_tmp1);
                  r1000_1fff_tmp41 = simd_andc(r1000_1fff_tmp2, basis_bits.bit_4);
                  r1000_1fff_tmp42 = simd_and(r1000_1fff_tmp41, r1000_1fff_tmp17);
                  r1000_1fff_tmp43 = simd_or(r1000_1fff_tmp40, r1000_1fff_tmp42);
                  r1000_1fff_tmp44 = simd_not(r1000_1fff_tmp34);
                  r1000_1fff_tmp45 = simd_and(basis_bits.bit_5, tmp3);
                  r1000_1fff_tmp46 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp44), simd_andc(r1000_1fff_tmp45, basis_bits.bit_4));
                  r1000_1fff_tmp47 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp46);
                  r1000_1fff_tmp48 = simd_or(r1000_1fff_tmp43, r1000_1fff_tmp47);
                  r1000_1fff_tmp49 = simd_not(r1000_1fff_tmp4);
                  r1000_1fff_tmp50 = simd_and(tmp2, basis_bits.bit_6);
                  r1000_1fff_tmp51 = simd_or(simd_and(basis_bits.bit_3, r1000_1fff_tmp49), simd_andc(r1000_1fff_tmp50, basis_bits.bit_3));
                  r1000_1fff_tmp52 = simd_and(r1000_1fff_tmp22, r1000_1fff_tmp51);
                  r1000_1fff_tmp53 = simd_or(r1000_1fff_tmp48, r1000_1fff_tmp52);
                  r1000_1fff_tmp54 = simd_and(basis_bits.bit_3, r1000_1fff_tmp50);
                  r1000_1fff_tmp55 = simd_or(basis_bits.bit_2, r1000_1fff_tmp54);
                  r1000_1fff_tmp56 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp55);
                  cc_range_1080_109e_3 = simd_or(r1000_1fff_tmp53, r1000_1fff_tmp56);
                  carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(61), sequence_e1_82_adv));
                  r1000_1fff_tmp57 = simd_and(sequence_e1_82_adv, cc_range_1080_109e_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r1000_1fff_tmp57);
                  r1000_1fff_tmp58 = simd_andc(tmp3, r800_ffff_tmp1);
                  byte_83 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp58);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  r1000_1fff_tmp59 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp60 = simd_andc(r1000_1fff_tmp41, r1000_1fff_tmp59);
                  r1000_1fff_tmp61 = simd_and(r800_ffff_tmp2, tmp3);
                  r1000_1fff_tmp62 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp61);
                  r1000_1fff_tmp63 = simd_or(r1000_1fff_tmp60, r1000_1fff_tmp62);
                  r1000_1fff_tmp64 = simd_and(tmp2, r800_1fff_tmp2);
                  r1000_1fff_tmp65 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp64);
                  r1000_1fff_tmp66 = simd_or(r1000_1fff_tmp63, r1000_1fff_tmp65);
                  r1000_1fff_tmp67 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp1);
                  cc_range_10c0_10d0_3 = simd_or(r1000_1fff_tmp66, r1000_1fff_tmp67);
                  carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(62), sequence_e1_83_adv));
                  r1000_1fff_tmp68 = simd_and(sequence_e1_83_adv, cc_range_10c0_10d0_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r1000_1fff_tmp68);
                  r1000_1fff_tmp69 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r1000_1fff_tmp70 = simd_not(r1000_1fff_tmp69);
                  r1000_1fff_tmp71 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp70), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_84_88 = simd_and(r1000_1fff_tmp2, r1000_1fff_tmp71);
                  byte_e1_byte_range_84_88 = simd_and(byte_e1_adv, byte_range_84_88);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[63] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_84_88, carryQ.get_carry_in(63), r1000_1fff_tmp72));
                  byte_e1_byte_range_84_88_sfx = simd_and(r1000_1fff_tmp72, byte_range_80_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, byte_e1_byte_range_84_88_sfx);
                  r1000_1fff_tmp73 = simd_andc(byte_range_80_bf, r1000_1fff_tmp1);
                  r1000_1fff_tmp74 = simd_and(r1000_1fff_tmp11, r800_1fff_tmp2);
                  byte_89 = simd_and(r1000_1fff_tmp73, r1000_1fff_tmp74);
                  sequence_e1_89 = simd_and(byte_e1_adv, byte_89);
                  r1000_1fff_tmp75 = simd_and(basis_bits.bit_4, r1000_1fff_tmp69);
                  byte_range_80_88 = simd_andc(r1000_1fff_tmp73, r1000_1fff_tmp75);
                  carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e1_89, carryQ.get_carry_in(64), r1000_1fff_tmp76));
                  sequence_e1_89_byte_range_80_88 = simd_and(r1000_1fff_tmp76, byte_range_80_88);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_89_byte_range_80_88);
                  r1000_1fff_tmp77 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp38);
                  byte_8a = simd_and(r1000_1fff_tmp73, r1000_1fff_tmp77);
                  sequence_e1_8a = simd_and(byte_e1_adv, byte_8a);
                  carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_e1_8a, carryQ.get_carry_in(65), r1000_1fff_tmp78));
                  sequence_e1_8a_byte_range_80_88 = simd_and(r1000_1fff_tmp78, byte_range_80_88);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_8a_byte_range_80_88);
                  r1000_1fff_tmp79 = simd_and(r1000_1fff_tmp11, tmp3);
                  byte_8b = simd_and(r1000_1fff_tmp73, r1000_1fff_tmp79);
                  sequence_e1_8b = simd_and(byte_e1_adv, byte_8b);
                  carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_e1_8b, carryQ.get_carry_in(66), r1000_1fff_tmp80));
                  sequence_e1_8b_80 = simd_and(r1000_1fff_tmp80, byte_80);
                  r1000_1fff_tmp81 = simd_andc(tmp2, r800_ffff_tmp3);
                  byte_8c = simd_and(r1000_1fff_tmp73, r1000_1fff_tmp81);
                  sequence_e1_8c = simd_and(byte_e1_adv, byte_8c);
                  r1000_1fff_tmp82 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r1000_1fff_tmp83 = simd_and(basis_bits.bit_3, r800_1fff_tmp1);
                  byte_range_80_90 = simd_andc(r1000_1fff_tmp82, r1000_1fff_tmp83);
                  carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e1_8c, carryQ.get_carry_in(67), r1000_1fff_tmp84));
                  sequence_e1_8c_byte_range_80_90 = simd_and(r1000_1fff_tmp84, byte_range_80_90);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_8c_byte_range_80_90);
                  byte_8d = simd_and(r1000_1fff_tmp73, r1000_1fff_tmp64);
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  r1000_1fff_tmp85 = simd_or(basis_bits.bit_5, tmp3);
                  r1000_1fff_tmp86 = simd_and(basis_bits.bit_4, r1000_1fff_tmp85);
                  r1000_1fff_tmp87 = simd_and(basis_bits.bit_3, r1000_1fff_tmp86);
                  byte_range_80_9a = simd_andc(r1000_1fff_tmp82, r1000_1fff_tmp87);
                  carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(68), r1000_1fff_tmp88));
                  sequence_e1_8d_byte_range_80_9a = simd_and(r1000_1fff_tmp88, byte_range_80_9a);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_8d_byte_range_80_9a);
                  r1000_1fff_tmp89 = simd_and(tmp2, r1000_1fff_tmp38);
                  byte_8e = simd_and(r1000_1fff_tmp73, r1000_1fff_tmp89);
                  sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
                  r1000_1fff_tmp90 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp91 = simd_and(basis_bits.bit_4, r1000_1fff_tmp90);
                  r1000_1fff_tmp92 = simd_and(basis_bits.bit_3, r1000_1fff_tmp91);
                  byte_range_80_99 = simd_andc(r1000_1fff_tmp82, r1000_1fff_tmp92);
                  carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(69), r1000_1fff_tmp93));
                  sequence_e1_8e_byte_range_80_99 = simd_and(r1000_1fff_tmp93, byte_range_80_99);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_8e_byte_range_80_99);
                  byte_8f = simd_and(r1000_1fff_tmp73, tmp4);
                  sequence_e1_8f = simd_and(byte_e1_adv, byte_8f);
                  r1000_1fff_tmp94 = simd_and(basis_bits.bit_3, r1000_1fff_tmp35);
                  r1000_1fff_tmp95 = simd_and(basis_bits.bit_2, r1000_1fff_tmp94);
                  byte_range_80_b4 = simd_andc(byte_range_80_bf, r1000_1fff_tmp95);
                  carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e1_8f, carryQ.get_carry_in(70), r1000_1fff_tmp96));
                  sequence_e1_8f_byte_range_80_b4 = simd_and(r1000_1fff_tmp96, byte_range_80_b4);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_8f_byte_range_80_b4);
                  r1000_1fff_tmp97 = simd_and(byte_range_80_bf, r1000_1fff_tmp24);
                  byte_90 = simd_andc(r1000_1fff_tmp97, r800_1fff_tmp1);
                  sequence_e1_90 = simd_and(byte_e1_adv, byte_90);
                  carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e1_90, carryQ.get_carry_in(71), r1000_1fff_tmp98));
                  sequence_e1_90_byte_range_80_bf = simd_and(r1000_1fff_tmp98, byte_range_80_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_90_byte_range_80_bf);
                  byte_9a = simd_and(r1000_1fff_tmp97, r1000_1fff_tmp77);
                  sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
                  r1000_1fff_tmp99 = simd_and(basis_bits.bit_3, r1000_1fff_tmp4);
                  byte_range_80_9c = simd_andc(r1000_1fff_tmp82, r1000_1fff_tmp99);
                  carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(72), r1000_1fff_tmp100));
                  sequence_e1_9a_byte_range_80_9c = simd_and(r1000_1fff_tmp100, byte_range_80_9c);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_9a_byte_range_80_9c);
                  byte_9b = simd_and(r1000_1fff_tmp97, r1000_1fff_tmp79);
                  sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
                  r1000_1fff_tmp101 = simd_and(basis_bits.bit_3, r1000_1fff_tmp75);
                  r1000_1fff_tmp102 = simd_and(basis_bits.bit_2, r1000_1fff_tmp101);
                  byte_range_80_b8 = simd_andc(byte_range_80_bf, r1000_1fff_tmp102);
                  carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(73), r1000_1fff_tmp103));
                  sequence_e1_9b_byte_range_80_b8 = simd_and(r1000_1fff_tmp103, byte_range_80_b8);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_9b_byte_range_80_b8);
                  byte_9c = simd_and(r1000_1fff_tmp97, r1000_1fff_tmp81);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  r1000_1fff_tmp104 = simd_and(basis_bits.bit_4, r1000_1fff_tmp34);
                  byte_range_80_8c = simd_andc(r1000_1fff_tmp73, r1000_1fff_tmp104);
                  carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(74), r1000_1fff_tmp105));
                  sequence_e1_9c_byte_range_80_8c = simd_and(r1000_1fff_tmp105, byte_range_80_8c);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_9c_byte_range_80_8c);
                  byte_9d = simd_and(r1000_1fff_tmp97, r1000_1fff_tmp64);
                  sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
                  r1000_1fff_tmp106 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  byte_range_80_91 = simd_andc(r1000_1fff_tmp82, r1000_1fff_tmp106);
                  carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(75), r1000_1fff_tmp107));
                  sequence_e1_9d_byte_range_80_91 = simd_and(r1000_1fff_tmp107, byte_range_80_91);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_9d_byte_range_80_91);
                  byte_9e = simd_and(r1000_1fff_tmp97, r1000_1fff_tmp89);
                  sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
                  r1000_1fff_tmp108 = simd_and(basis_bits.bit_3, r800_ffff_tmp1);
                  r1000_1fff_tmp109 = simd_and(basis_bits.bit_2, r1000_1fff_tmp108);
                  byte_range_80_b3 = simd_andc(byte_range_80_bf, r1000_1fff_tmp109);
                  carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(76), r1000_1fff_tmp110));
                  sequence_e1_9e_byte_range_80_b3 = simd_and(r1000_1fff_tmp110, byte_range_80_b3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_9e_byte_range_80_b3);
                  byte_9f = simd_and(r1000_1fff_tmp97, tmp4);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  r1000_1fff_tmp111 = simd_andc(r1000_1fff_tmp73, basis_bits.bit_4);
                  byte_range_80_85 = simd_andc(r1000_1fff_tmp111, r1000_1fff_tmp59);
                  carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(77), r1000_1fff_tmp112));
                  sequence_e1_9f_byte_range_80_85 = simd_and(r1000_1fff_tmp112, byte_range_80_85);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_9f_byte_range_80_85);
                  r1000_1fff_tmp113 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r1000_1fff_tmp113, r800_1fff_tmp1);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  byte_range_80_8a = simd_andc(r1000_1fff_tmp73, r1000_1fff_tmp86);
                  carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(78), r1000_1fff_tmp114));
                  sequence_e1_a0_byte_range_80_8a = simd_and(r1000_1fff_tmp114, byte_range_80_8a);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_a0_byte_range_80_8a);
                  byte_a1 = simd_and(r1000_1fff_tmp113, r800_1fff_tmp3);
                  sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
                  carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(79), r1000_1fff_tmp115));
                  sequence_e1_a1_byte_range_80_b7 = simd_and(r1000_1fff_tmp115, byte_range_80_b7);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_a1_byte_range_80_b7);
                  byte_a2 = simd_and(r1000_1fff_tmp113, r1000_1fff_tmp39);
                  sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
                  r1000_1fff_tmp116 = simd_or(basis_bits.bit_3, r1000_1fff_tmp75);
                  r1000_1fff_tmp117 = simd_and(basis_bits.bit_2, r1000_1fff_tmp116);
                  byte_range_80_a8 = simd_andc(byte_range_80_bf, r1000_1fff_tmp117);
                  carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(80), r1000_1fff_tmp118));
                  sequence_e1_a2_byte_range_80_a8 = simd_and(r1000_1fff_tmp118, byte_range_80_a8);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_a2_byte_range_80_a8);
                  byte_a3 = simd_and(r1000_1fff_tmp113, r1000_1fff_tmp58);
                  sequence_e1_a3 = simd_and(byte_e1_adv, byte_a3);
                  r1000_1fff_tmp119 = simd_or(basis_bits.bit_4, r1000_1fff_tmp59);
                  r1000_1fff_tmp120 = simd_and(basis_bits.bit_3, r1000_1fff_tmp119);
                  r1000_1fff_tmp121 = simd_and(basis_bits.bit_2, r1000_1fff_tmp120);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r1000_1fff_tmp121);
                  carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_e1_a3, carryQ.get_carry_in(81), r1000_1fff_tmp122));
                  sequence_e1_a3_byte_range_80_b5 = simd_and(r1000_1fff_tmp122, byte_range_80_b5);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_a3_byte_range_80_b5);
                  byte_a4 = simd_and(r1000_1fff_tmp113, r800_ffff_tmp4);
                  sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
                  r1000_1fff_tmp123 = simd_and(basis_bits.bit_3, tmp4);
                  byte_range_80_9e = simd_andc(r1000_1fff_tmp82, r1000_1fff_tmp123);
                  carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(82), r1000_1fff_tmp124));
                  sequence_e1_a4_byte_range_80_9e = simd_and(r1000_1fff_tmp124, byte_range_80_9e);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_a4_byte_range_80_9e);
                  r1000_1fff_tmp125 = simd_and(r800_ffff_tmp2, r800_1fff_tmp2);
                  byte_a5 = simd_and(r1000_1fff_tmp113, r1000_1fff_tmp125);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(83), r1000_1fff_tmp126));
                  sequence_e1_a5_80 = simd_and(r1000_1fff_tmp126, byte_80);
                  r1000_1fff_tmp127 = simd_and(r800_ffff_tmp2, r1000_1fff_tmp38);
                  byte_a6 = simd_and(r1000_1fff_tmp113, r1000_1fff_tmp127);
                  sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
                  r1000_1fff_tmp128 = simd_or(basis_bits.bit_3, tmp2);
                  r1000_1fff_tmp129 = simd_and(basis_bits.bit_2, r1000_1fff_tmp128);
                  byte_range_80_ab = simd_andc(byte_range_80_bf, r1000_1fff_tmp129);
                  carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(84), r1000_1fff_tmp130));
                  sequence_e1_a6_byte_range_80_ab = simd_and(r1000_1fff_tmp130, byte_range_80_ab);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_a6_byte_range_80_ab);
                  byte_a7 = simd_and(r1000_1fff_tmp113, r1000_1fff_tmp61);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  byte_range_80_89 = simd_andc(r1000_1fff_tmp73, r1000_1fff_tmp91);
                  carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(85), r1000_1fff_tmp131));
                  sequence_e1_a7_byte_range_80_89 = simd_and(r1000_1fff_tmp131, byte_range_80_89);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_a7_byte_range_80_89);
                  byte_a8 = simd_and(r1000_1fff_tmp113, r1000_1fff_tmp12);
                  sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
                  r1000_1fff_tmp132 = simd_or(basis_bits.bit_4, r1000_1fff_tmp45);
                  r1000_1fff_tmp133 = simd_and(basis_bits.bit_3, r1000_1fff_tmp132);
                  byte_range_80_96 = simd_andc(r1000_1fff_tmp82, r1000_1fff_tmp133);
                  carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(86), r1000_1fff_tmp134));
                  sequence_e1_a8_byte_range_80_96 = simd_and(r1000_1fff_tmp134, byte_range_80_96);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_a8_byte_range_80_96);
                  byte_a9 = simd_and(r1000_1fff_tmp113, r1000_1fff_tmp74);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  byte_range_80_95 = simd_andc(r1000_1fff_tmp82, r1000_1fff_tmp120);
                  carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(87), r1000_1fff_tmp135));
                  sequence_e1_a9_byte_range_80_95 = simd_and(r1000_1fff_tmp135, byte_range_80_95);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_a9_byte_range_80_95);
                  byte_aa = simd_and(r1000_1fff_tmp113, r1000_1fff_tmp77);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(88), r1000_1fff_tmp136));
                  sequence_e1_aa_byte_range_80_89 = simd_and(r1000_1fff_tmp136, byte_range_80_89);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_aa_byte_range_80_89);
                  byte_ac = simd_and(r1000_1fff_tmp113, r1000_1fff_tmp81);
                  sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
                  r1000_1fff_tmp137 = simd_not(r1000_1fff_tmp108);
                  r1000_1fff_tmp138 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
                  r1000_1fff_tmp139 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp137), simd_andc(r1000_1fff_tmp138, basis_bits.bit_2));
                  byte_range_84_b3 = simd_and(byte_range_80_bf, r1000_1fff_tmp139);
                  carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(89), r1000_1fff_tmp140));
                  sequence_e1_ac_byte_range_84_b3 = simd_and(r1000_1fff_tmp140, byte_range_84_b3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_ac_byte_range_84_b3);
                  byte_ad = simd_and(r1000_1fff_tmp113, r1000_1fff_tmp64);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  byte_range_80_81 = simd_andc(r1000_1fff_tmp73, r800_4dff_tmp1);
                  carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(90), r1000_1fff_tmp141));
                  sequence_e1_ad_byte_range_80_81 = simd_and(r1000_1fff_tmp141, byte_range_80_81);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_ad_byte_range_80_81);
                  byte_ae = simd_and(r1000_1fff_tmp113, r1000_1fff_tmp89);
                  sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
                  r1000_1fff_tmp142 = simd_or(basis_bits.bit_3, r800_4dff_tmp1);
                  r1000_1fff_tmp143 = simd_xor(basis_bits.bit_2, r1000_1fff_tmp142);
                  byte_range_82_a1 = simd_and(byte_range_80_bf, r1000_1fff_tmp143);
                  carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(91), r1000_1fff_tmp144));
                  sequence_e1_ae_byte_range_82_a1 = simd_and(r1000_1fff_tmp144, byte_range_82_a1);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_ae_byte_range_82_a1);
                  byte_af = simd_and(r1000_1fff_tmp113, tmp4);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  r1000_1fff_tmp145 = simd_or(basis_bits.bit_3, r1000_1fff_tmp119);
                  r1000_1fff_tmp146 = simd_and(basis_bits.bit_2, r1000_1fff_tmp145);
                  byte_range_80_a5 = simd_andc(byte_range_80_bf, r1000_1fff_tmp146);
                  carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(92), r1000_1fff_tmp147));
                  sequence_e1_af_byte_range_80_a5 = simd_and(r1000_1fff_tmp147, byte_range_80_a5);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_af_byte_range_80_a5);
                  r1000_1fff_tmp148 = simd_and(byte_range_80_bf, tmp1);
                  byte_b0 = simd_andc(r1000_1fff_tmp148, r800_1fff_tmp1);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(93), r1000_1fff_tmp149));
                  sequence_e1_b0_byte_range_80_ab = simd_and(r1000_1fff_tmp149, byte_range_80_ab);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_b0_byte_range_80_ab);
                  byte_b1 = simd_and(r1000_1fff_tmp148, r800_1fff_tmp3);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(94), r1000_1fff_tmp150));
                  sequence_e1_b1_byte_range_80_89 = simd_and(r1000_1fff_tmp150, byte_range_80_89);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_b1_byte_range_80_89);
                  byte_b3 = simd_and(r1000_1fff_tmp148, r1000_1fff_tmp58);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  byte_range_80_87 = r1000_1fff_tmp111;
                  carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(95), r1000_1fff_tmp151));
                  sequence_e1_b3_byte_range_80_87 = simd_and(r1000_1fff_tmp151, byte_range_80_87);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_b3_byte_range_80_87);
                  byte_b4 = simd_and(r1000_1fff_tmp148, r800_ffff_tmp4);
                  sequence_e1_b4 = simd_and(byte_e1_adv, byte_b4);
                  carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_e1_b4, carryQ.get_carry_in(96), r1000_1fff_tmp152));
                  sequence_e1_b4_byte_range_80_bf = simd_and(r1000_1fff_tmp152, byte_range_80_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_b4_byte_range_80_bf);
                  byte_b8 = simd_and(r1000_1fff_tmp148, r1000_1fff_tmp12);
                  sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
                  carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(97), r1000_1fff_tmp153));
                  sequence_e1_b8_byte_range_80_bf = simd_and(r1000_1fff_tmp153, byte_range_80_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_b8_byte_range_80_bf);
                  byte_bc = simd_and(r1000_1fff_tmp148, r1000_1fff_tmp81);
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(98), r1000_1fff_tmp154));
                  sequence_e1_bc_byte_range_80_95 = simd_and(r1000_1fff_tmp154, byte_range_80_95);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_bc_byte_range_80_95);
                  byte_bd = simd_and(r1000_1fff_tmp148, r1000_1fff_tmp64);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(99), r1000_1fff_tmp155));
                  sequence_e1_bd_byte_range_80_85 = simd_and(r1000_1fff_tmp155, byte_range_80_85);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_bd_byte_range_80_85);
                  byte_be = simd_and(r1000_1fff_tmp148, r1000_1fff_tmp89);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(100), r1000_1fff_tmp156));
                  sequence_e1_be_byte_range_80_b4 = simd_and(r1000_1fff_tmp156, byte_range_80_b4);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_be_byte_range_80_b4);
                  byte_bf = simd_and(r1000_1fff_tmp148, tmp4);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  byte_range_80_84 = simd_andc(byte_range_80_87, r1000_1fff_tmp34);
                  carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(101), r1000_1fff_tmp157));
                  sequence_e1_bf_byte_range_80_84 = simd_and(r1000_1fff_tmp157, byte_range_80_84);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e1_bf_byte_range_80_84);
                }
                else {
                  carryQ.CarryDequeueEnqueue(58, 44);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(26, 76);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(102, 44))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(102, 28))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp3);
                  carryQ.cq[102] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(102), r2000_2fff_tmp4));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp4, byte_80);
                  byte_e2_adv = r2000_2fff_tmp4;
                  r2000_2fff_tmp5 = simd_or(basis_bits.bit_5, tmp3);
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_4, r2000_2fff_tmp5);
                  r2000_2fff_tmp7 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp6);
                  r2000_2fff_tmp8 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
                  r2000_2fff_tmp9 = simd_not(r2000_2fff_tmp8);
                  r2000_2fff_tmp10 = simd_or(simd_and(basis_bits.bit_2, r2000_2fff_tmp9), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  r2000_2fff_tmp11 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp10);
                  r2000_2fff_tmp12 = simd_or(r2000_2fff_tmp7, r2000_2fff_tmp11);
                  r2000_2fff_tmp13 = simd_and(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp14 = simd_or(basis_bits.bit_3, tmp4);
                  r2000_2fff_tmp15 = simd_and(r2000_2fff_tmp13, r2000_2fff_tmp14);
                  cc_range_2000_202f_3 = simd_or(r2000_2fff_tmp12, r2000_2fff_tmp15);
                  carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(103), sequence_e2_80_adv));
                  r2000_2fff_tmp16 = simd_and(sequence_e2_80_adv, cc_range_2000_202f_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r2000_2fff_tmp16);
                  r2000_2fff_tmp17 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp18 = simd_andc(r2000_2fff_tmp17, r800_ffff_tmp1);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp18);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  r2000_2fff_tmp19 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r2000_2fff_tmp20 = simd_and(r800_ffff_tmp5, tmp1);
                  r2000_2fff_tmp21 = simd_andc(r2000_2fff_tmp20, r800_4dff_tmp1);
                  r2000_2fff_tmp22 = simd_or(r2000_2fff_tmp19, r2000_2fff_tmp21);
                  r2000_2fff_tmp23 = simd_and(r2000_2fff_tmp20, r800_ffff_tmp1);
                  cc_range_2040_2074_3 = simd_or(r2000_2fff_tmp22, r2000_2fff_tmp23);
                  carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(104), sequence_e2_81_adv));
                  r2000_2fff_tmp24 = simd_and(sequence_e2_81_adv, cc_range_2040_2074_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r2000_2fff_tmp24);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp25 = simd_and(basis_bits.bit_5, tmp3);
                  r2000_2fff_tmp26 = simd_and(basis_bits.bit_4, r2000_2fff_tmp25);
                  r2000_2fff_tmp27 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp26);
                  r2000_2fff_tmp28 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r2000_2fff_tmp29 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp28);
                  r2000_2fff_tmp30 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r2000_2fff_tmp31 = simd_and(basis_bits.bit_4, r2000_2fff_tmp30);
                  r2000_2fff_tmp32 = simd_andc(r2000_2fff_tmp29, r2000_2fff_tmp31);
                  r2000_2fff_tmp33 = simd_or(r2000_2fff_tmp27, r2000_2fff_tmp32);
                  r2000_2fff_tmp34 = simd_and(tmp2, basis_bits.bit_6);
                  r2000_2fff_tmp35 = simd_and(basis_bits.bit_3, r2000_2fff_tmp34);
                  r2000_2fff_tmp36 = simd_andc(r2000_2fff_tmp13, r2000_2fff_tmp35);
                  cc_range_2080_20a0_3 = simd_or(r2000_2fff_tmp33, r2000_2fff_tmp36);
                  carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(105), sequence_e2_82_adv));
                  r2000_2fff_tmp37 = simd_and(sequence_e2_82_adv, cc_range_2080_20a0_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r2000_2fff_tmp37);
                  r2000_2fff_tmp38 = simd_andc(r800_ffff_tmp2, basis_bits.bit_6);
                  byte_range_84_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp38);
                  byte_e2_byte_range_84_85 = simd_and(byte_e2_adv, byte_range_84_85);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[106] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_84_85, carryQ.get_carry_in(106), r2000_2fff_tmp39));
                  byte_e2_byte_range_84_85_sfx = simd_and(r2000_2fff_tmp39, byte_range_80_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, byte_e2_byte_range_84_85_sfx);
                  r2000_2fff_tmp40 = simd_andc(byte_range_80_bf, r2000_2fff_tmp1);
                  r2000_2fff_tmp41 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_86 = simd_and(r2000_2fff_tmp40, r2000_2fff_tmp41);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp42 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp43 = simd_and(basis_bits.bit_4, r2000_2fff_tmp42);
                  byte_range_80_89 = simd_andc(r2000_2fff_tmp40, r2000_2fff_tmp43);
                  carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(107), r2000_2fff_tmp44));
                  sequence_e2_86_byte_range_80_89 = simd_and(r2000_2fff_tmp44, byte_range_80_89);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_86_byte_range_80_89);
                  r2000_2fff_tmp45 = simd_and(r800_ffff_tmp2, tmp3);
                  byte_87 = simd_and(r2000_2fff_tmp40, r2000_2fff_tmp45);
                  sequence_e2_87 = simd_and(byte_e2_adv, byte_87);
                  carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_e2_87, carryQ.get_carry_in(108), r2000_2fff_tmp46));
                  sequence_e2_87_byte_range_80_bf = simd_and(r2000_2fff_tmp46, byte_range_80_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_87_byte_range_80_bf);
                  byte_8f = simd_and(r2000_2fff_tmp40, tmp4);
                  sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
                  r2000_2fff_tmp47 = simd_and(basis_bits.bit_3, r2000_2fff_tmp6);
                  r2000_2fff_tmp48 = simd_and(basis_bits.bit_2, r2000_2fff_tmp47);
                  byte_range_80_ba = simd_andc(byte_range_80_bf, r2000_2fff_tmp48);
                  carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_e2_8f, carryQ.get_carry_in(109), r2000_2fff_tmp49));
                  sequence_e2_8f_byte_range_80_ba = simd_and(r2000_2fff_tmp49, byte_range_80_ba);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_8f_byte_range_80_ba);
                  r2000_2fff_tmp50 = simd_and(byte_range_80_bf, r2000_2fff_tmp28);
                  byte_90 = simd_andc(r2000_2fff_tmp50, r2000_2fff_tmp3);
                  sequence_e2_90 = simd_and(byte_e2_adv, byte_90);
                  r2000_2fff_tmp51 = simd_or(basis_bits.bit_4, r2000_2fff_tmp25);
                  r2000_2fff_tmp52 = simd_or(basis_bits.bit_3, r2000_2fff_tmp51);
                  r2000_2fff_tmp53 = simd_and(basis_bits.bit_2, r2000_2fff_tmp52);
                  byte_range_80_a6 = simd_andc(byte_range_80_bf, r2000_2fff_tmp53);
                  carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_e2_90, carryQ.get_carry_in(110), r2000_2fff_tmp54));
                  sequence_e2_90_byte_range_80_a6 = simd_and(r2000_2fff_tmp54, byte_range_80_a6);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_90_byte_range_80_a6);
                  byte_91 = simd_and(r2000_2fff_tmp50, r2000_2fff_tmp18);
                  sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
                  byte_range_80_8a = simd_andc(r2000_2fff_tmp40, r2000_2fff_tmp6);
                  carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_e2_91, carryQ.get_carry_in(111), r2000_2fff_tmp55));
                  sequence_e2_91_byte_range_80_8a = simd_and(r2000_2fff_tmp55, byte_range_80_8a);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_91_byte_range_80_8a);
                  byte_92 = simd_and(r2000_2fff_tmp50, r2000_4dff_tmp2);
                  sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
                  carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_e2_92, carryQ.get_carry_in(112), r2000_2fff_tmp56));
                  sequence_e2_92_byte_range_80_bf = simd_and(r2000_2fff_tmp56, byte_range_80_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_92_byte_range_80_bf);
                  r2000_2fff_tmp57 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r2000_2fff_tmp58 = simd_and(tmp2, r2000_2fff_tmp17);
                  byte_ad = simd_and(r2000_2fff_tmp57, r2000_2fff_tmp58);
                  sequence_e2_ad = simd_and(byte_e2_adv, byte_ad);
                  r2000_2fff_tmp59 = simd_and(basis_bits.bit_3, r800_ffff_tmp1);
                  r2000_2fff_tmp60 = simd_and(basis_bits.bit_2, r2000_2fff_tmp59);
                  byte_range_80_b3 = simd_andc(byte_range_80_bf, r2000_2fff_tmp60);
                  carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_e2_ad, carryQ.get_carry_in(113), r2000_2fff_tmp61));
                  sequence_e2_ad_byte_range_80_b3 = simd_and(r2000_2fff_tmp61, byte_range_80_b3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_ad_byte_range_80_b3);
                  r2000_2fff_tmp62 = simd_and(tmp2, r2000_4dff_tmp1);
                  byte_ae = simd_and(r2000_2fff_tmp57, r2000_2fff_tmp62);
                  sequence_e2_ae = simd_and(byte_e2_adv, byte_ae);
                  r2000_2fff_tmp63 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r2000_2fff_tmp64 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp65 = simd_or(basis_bits.bit_4, r2000_2fff_tmp64);
                  r2000_2fff_tmp66 = simd_and(basis_bits.bit_3, r2000_2fff_tmp65);
                  byte_range_80_95 = simd_andc(r2000_2fff_tmp63, r2000_2fff_tmp66);
                  carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_e2_ae, carryQ.get_carry_in(114), r2000_2fff_tmp67));
                  sequence_e2_ae_byte_range_80_95 = simd_and(r2000_2fff_tmp67, byte_range_80_95);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_ae_byte_range_80_95);
                  byte_af = simd_and(r2000_2fff_tmp57, tmp4);
                  sequence_e2_af = simd_and(byte_e2_adv, byte_af);
                  r2000_2fff_tmp68 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r2000_2fff_tmp69 = simd_and(basis_bits.bit_4, r2000_2fff_tmp68);
                  byte_range_80_88 = simd_andc(r2000_2fff_tmp40, r2000_2fff_tmp69);
                  carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_e2_af, carryQ.get_carry_in(115), r2000_2fff_tmp70));
                  sequence_e2_af_byte_range_80_88 = simd_and(r2000_2fff_tmp70, byte_range_80_88);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_af_byte_range_80_88);
                  r2000_2fff_tmp71 = simd_and(byte_range_80_bf, tmp1);
                  byte_b0 = simd_andc(r2000_2fff_tmp71, r2000_2fff_tmp3);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  r2000_2fff_tmp72 = simd_and(basis_bits.bit_2, r2000_2fff_tmp14);
                  byte_range_80_ae = simd_andc(byte_range_80_bf, r2000_2fff_tmp72);
                  carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(116), r2000_2fff_tmp73));
                  sequence_e2_b0_byte_range_80_ae = simd_and(r2000_2fff_tmp73, byte_range_80_ae);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_b0_byte_range_80_ae);
                  byte_b1 = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp18);
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp74 = simd_and(basis_bits.bit_3, tmp4);
                  byte_range_80_9e = simd_andc(r2000_2fff_tmp63, r2000_2fff_tmp74);
                  carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(117), r2000_2fff_tmp75));
                  sequence_e2_b1_byte_range_80_9e = simd_and(r2000_2fff_tmp75, byte_range_80_9e);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_b1_byte_range_80_9e);
                  byte_b2 = simd_and(r2000_2fff_tmp71, r2000_4dff_tmp2);
                  sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
                  carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(118), r2000_2fff_tmp76));
                  sequence_e2_b2_byte_range_80_bf = simd_and(r2000_2fff_tmp76, byte_range_80_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_b2_byte_range_80_bf);
                  r2000_2fff_tmp77 = simd_andc(tmp3, r800_ffff_tmp1);
                  byte_b3 = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp77);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(119), r2000_2fff_tmp78));
                  sequence_e2_b3_byte_range_80_ae = simd_and(r2000_2fff_tmp78, byte_range_80_ae);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_b3_byte_range_80_ae);
                  byte_b4 = simd_and(r2000_2fff_tmp71, r800_ffff_tmp4);
                  sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
                  r2000_2fff_tmp79 = simd_or(basis_bits.bit_3, r2000_2fff_tmp65);
                  r2000_2fff_tmp80 = simd_and(basis_bits.bit_2, r2000_2fff_tmp79);
                  byte_range_80_a5 = simd_andc(byte_range_80_bf, r2000_2fff_tmp80);
                  carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(120), r2000_2fff_tmp81));
                  sequence_e2_b4_byte_range_80_a5 = simd_and(r2000_2fff_tmp81, byte_range_80_a5);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_b4_byte_range_80_a5);
                  r2000_2fff_tmp82 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp17);
                  byte_b5 = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp82);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  r2000_2fff_tmp83 = simd_and(basis_bits.bit_2, r2000_2fff_tmp8);
                  byte_range_80_a7 = simd_andc(byte_range_80_bf, r2000_2fff_tmp83);
                  carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(121), r2000_2fff_tmp84));
                  sequence_e2_b5_byte_range_80_a7 = simd_and(r2000_2fff_tmp84, byte_range_80_a7);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_b5_byte_range_80_a7);
                  byte_b6 = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp41);
                  sequence_e2_b6 = simd_and(byte_e2_adv, byte_b6);
                  r2000_2fff_tmp85 = simd_and(basis_bits.bit_3, r2000_2fff_tmp51);
                  byte_range_80_96 = simd_andc(r2000_2fff_tmp63, r2000_2fff_tmp85);
                  carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_e2_b6, carryQ.get_carry_in(122), r2000_2fff_tmp86));
                  sequence_e2_b6_byte_range_80_96 = simd_and(r2000_2fff_tmp86, byte_range_80_96);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_b6_byte_range_80_96);
                  byte_b7 = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp45);
                  sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
                  r2000_2fff_tmp87 = simd_andc(r2000_2fff_tmp40, basis_bits.bit_4);
                  byte_range_80_86 = simd_andc(r2000_2fff_tmp87, r2000_2fff_tmp25);
                  carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(123), r2000_2fff_tmp88));
                  sequence_e2_b7_byte_range_80_86 = simd_and(r2000_2fff_tmp88, byte_range_80_86);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_b7_byte_range_80_86);
                  r2000_2fff_tmp89 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp90 = simd_andc(r2000_2fff_tmp89, r800_ffff_tmp3);
                  byte_b8 = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp90);
                  sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
                  carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(124), r2000_2fff_tmp91));
                  sequence_e2_b8_byte_range_80_bf = simd_and(r2000_2fff_tmp91, byte_range_80_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_b8_byte_range_80_bf);
                  r2000_2fff_tmp92 = simd_and(r2000_2fff_tmp89, r2000_2fff_tmp17);
                  byte_b9 = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp92);
                  sequence_e2_b9 = simd_and(byte_e2_adv, byte_b9);
                  r2000_2fff_tmp93 = simd_andc(r2000_2fff_tmp40, r800_ffff_tmp1);
                  byte_range_80_82 = simd_andc(r2000_2fff_tmp93, tmp3);
                  carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_e2_b9, carryQ.get_carry_in(125), r2000_2fff_tmp94));
                  sequence_e2_b9_byte_range_80_82 = simd_and(r2000_2fff_tmp94, byte_range_80_82);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_b9_byte_range_80_82);
                  r2000_2fff_tmp95 = simd_and(r2000_2fff_tmp89, r2000_4dff_tmp1);
                  byte_ba = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp95);
                  sequence_e2_ba = simd_and(byte_e2_adv, byte_ba);
                  r2000_2fff_tmp96 = simd_and(basis_bits.bit_3, r2000_2fff_tmp43);
                  byte_range_80_99 = simd_andc(r2000_2fff_tmp63, r2000_2fff_tmp96);
                  carryQ.cq[126] = carryout2carry(pablo_blk_Advance(sequence_e2_ba, carryQ.get_carry_in(126), r2000_2fff_tmp97));
                  sequence_e2_ba_byte_range_80_99 = simd_and(r2000_2fff_tmp97, byte_range_80_99);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_ba_byte_range_80_99);
                  r2000_2fff_tmp98 = simd_and(r2000_2fff_tmp89, tmp3);
                  byte_bb = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp98);
                  sequence_e2_bb = simd_and(byte_e2_adv, byte_bb);
                  carryQ.cq[127] = carryout2carry(pablo_blk_Advance(sequence_e2_bb, carryQ.get_carry_in(127), r2000_2fff_tmp99));
                  sequence_e2_bb_byte_range_80_b3 = simd_and(r2000_2fff_tmp99, byte_range_80_b3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_bb_byte_range_80_b3);
                  r2000_2fff_tmp100 = simd_andc(tmp2, r800_ffff_tmp3);
                  byte_bc = simd_and(r2000_2fff_tmp71, r2000_2fff_tmp100);
                  sequence_e2_bc = simd_and(byte_e2_adv, byte_bc);
                  carryQ.cq[128] = carryout2carry(pablo_blk_Advance(sequence_e2_bc, carryQ.get_carry_in(128), r2000_2fff_tmp101));
                  sequence_e2_bc_byte_range_80_bf = simd_and(r2000_2fff_tmp101, byte_range_80_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_bc_byte_range_80_bf);
                  byte_bf = simd_and(r2000_2fff_tmp71, tmp4);
                  sequence_e2_bf = simd_and(byte_e2_adv, byte_bf);
                  carryQ.cq[129] = carryout2carry(pablo_blk_Advance(sequence_e2_bf, carryQ.get_carry_in(129), r2000_2fff_tmp102));
                  sequence_e2_bf_byte_range_80_95 = simd_and(r2000_2fff_tmp102, byte_range_80_95);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e2_bf_byte_range_80_95);
                }
                else {
                  carryQ.CarryDequeueEnqueue(102, 28);
                }
                r2000_4dff_tmp3 = simd_andc(tmp3, r800_ffff_tmp1);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp3);
                r2000_4dff_tmp4 = simd_or(byte_e3, r800_ffff_tmp9);
                if ((bitblock::any(r2000_4dff_tmp4) || carryQ.CarryTest(130, 16))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp1);
                  r3000_4dff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                  byte_80 = simd_andc(r3000_4dff_tmp2, r3000_4dff_tmp3);
                  carryQ.cq[130] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(130), r3000_4dff_tmp4));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp4, byte_80);
                  byte_e3_adv = r3000_4dff_tmp4;
                  r3000_4dff_tmp5 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp6 = simd_and(basis_bits.bit_4, r3000_4dff_tmp5);
                  r3000_4dff_tmp7 = simd_or(basis_bits.bit_3, r3000_4dff_tmp6);
                  r3000_4dff_tmp8 = simd_and(basis_bits.bit_2, r3000_4dff_tmp7);
                  r3000_4dff_tmp9 = simd_andc(r3000_4dff_tmp8, tmp1);
                  cc_range_3000_3030_3 = simd_andc(r800_ffff_tmp5, r3000_4dff_tmp9);
                  carryQ.cq[131] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(131), sequence_e3_80_adv));
                  r3000_4dff_tmp10 = simd_and(sequence_e3_80_adv, cc_range_3000_3030_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r3000_4dff_tmp10);
                  r3000_4dff_tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp12 = simd_andc(r3000_4dff_tmp11, r800_ffff_tmp1);
                  byte_81 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp12);
                  sequence_e3_81 = simd_and(byte_e3_adv, byte_81);
                  r3000_4dff_tmp13 = simd_or(basis_bits.bit_3, r3000_4dff_tmp3);
                  r3000_4dff_tmp14 = simd_or(basis_bits.bit_2, r3000_4dff_tmp13);
                  byte_range_81_bf = simd_and(r800_ffff_tmp5, r3000_4dff_tmp14);
                  carryQ.cq[132] = carryout2carry(pablo_blk_Advance(sequence_e3_81, carryQ.get_carry_in(132), sequence_e3_81_adv));
                  r3000_4dff_tmp15 = simd_and(sequence_e3_81_adv, byte_range_81_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r3000_4dff_tmp15);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp16 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
                  r3000_4dff_tmp17 = simd_and(basis_bits.bit_5, tmp3);
                  r3000_4dff_tmp18 = simd_or(basis_bits.bit_4, r3000_4dff_tmp17);
                  r3000_4dff_tmp19 = simd_and(basis_bits.bit_3, r3000_4dff_tmp18);
                  r3000_4dff_tmp20 = simd_andc(r3000_4dff_tmp16, r3000_4dff_tmp19);
                  r3000_4dff_tmp21 = simd_or(basis_bits.bit_5, tmp3);
                  r3000_4dff_tmp22 = simd_and(basis_bits.bit_4, r3000_4dff_tmp21);
                  r3000_4dff_tmp23 = simd_and(basis_bits.bit_3, r3000_4dff_tmp22);
                  r3000_4dff_tmp24 = simd_or(basis_bits.bit_2, r3000_4dff_tmp23);
                  r3000_4dff_tmp25 = simd_and(r800_ffff_tmp5, r3000_4dff_tmp24);
                  cc_range_3080_309b_3 = simd_or(r3000_4dff_tmp20, r3000_4dff_tmp25);
                  carryQ.cq[133] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(133), sequence_e3_82_adv));
                  r3000_4dff_tmp26 = simd_and(sequence_e3_82_adv, cc_range_3080_309b_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r3000_4dff_tmp26);
                  byte_83 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp3);
                  sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
                  byte_range_80_bf = r800_ffff_tmp5;
                  carryQ.cq[134] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(134), sequence_e3_83_adv));
                  r3000_4dff_tmp27 = simd_and(sequence_e3_83_adv, byte_range_80_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r3000_4dff_tmp27);
                  r3000_4dff_tmp28 = simd_andc(byte_range_80_bf, r3000_4dff_tmp1);
                  byte_84 = simd_and(r3000_4dff_tmp28, r800_ffff_tmp4);
                  sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
                  r3000_4dff_tmp29 = simd_and(tmp2, basis_bits.bit_6);
                  r3000_4dff_tmp30 = simd_or(basis_bits.bit_3, r3000_4dff_tmp29);
                  r3000_4dff_tmp31 = simd_not(r3000_4dff_tmp30);
                  r3000_4dff_tmp32 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
                  r3000_4dff_tmp33 = simd_or(basis_bits.bit_4, r3000_4dff_tmp32);
                  r3000_4dff_tmp34 = simd_or(basis_bits.bit_3, r3000_4dff_tmp33);
                  r3000_4dff_tmp35 = simd_or(simd_and(basis_bits.bit_2, r3000_4dff_tmp31), simd_andc(r3000_4dff_tmp34, basis_bits.bit_2));
                  r3000_4dff_tmp36 = simd_and(byte_range_80_bf, r3000_4dff_tmp35);
                  r3000_4dff_tmp37 = simd_and(byte_range_80_bf, tmp1);
                  r3000_4dff_tmp38 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
                  r3000_4dff_tmp39 = simd_or(basis_bits.bit_4, r3000_4dff_tmp38);
                  r3000_4dff_tmp40 = simd_and(r3000_4dff_tmp37, r3000_4dff_tmp39);
                  cc_range_3105_3131_3 = simd_or(r3000_4dff_tmp36, r3000_4dff_tmp40);
                  carryQ.cq[135] = carryout2carry(pablo_blk_Advance(sequence_e3_84, carryQ.get_carry_in(135), sequence_e3_84_adv));
                  r3000_4dff_tmp41 = simd_and(sequence_e3_84_adv, cc_range_3105_3131_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r3000_4dff_tmp41);
                  r3000_4dff_tmp42 = simd_and(r800_ffff_tmp2, r3000_4dff_tmp11);
                  byte_85 = simd_and(r3000_4dff_tmp28, r3000_4dff_tmp42);
                  sequence_e3_85 = simd_and(byte_e3_adv, byte_85);
                  carryQ.cq[136] = carryout2carry(pablo_blk_Advance(sequence_e3_85, carryQ.get_carry_in(136), sequence_e3_85_adv));
                  r3000_4dff_tmp43 = simd_and(sequence_e3_85_adv, byte_range_80_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r3000_4dff_tmp43);
                  r3000_4dff_tmp44 = simd_and(r800_ffff_tmp2, r2000_4dff_tmp1);
                  byte_86 = simd_and(r3000_4dff_tmp28, r3000_4dff_tmp44);
                  sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
                  r3000_4dff_tmp45 = simd_and(basis_bits.bit_4, r3000_4dff_tmp17);
                  r3000_4dff_tmp46 = simd_andc(r3000_4dff_tmp28, r3000_4dff_tmp45);
                  r3000_4dff_tmp47 = simd_not(r3000_4dff_tmp23);
                  r3000_4dff_tmp48 = simd_or(simd_and(basis_bits.bit_2, r3000_4dff_tmp47), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  r3000_4dff_tmp49 = simd_and(byte_range_80_bf, r3000_4dff_tmp48);
                  cc_range_3180_3190_3 = simd_or(r3000_4dff_tmp46, r3000_4dff_tmp49);
                  carryQ.cq[137] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(137), sequence_e3_86_adv));
                  r3000_4dff_tmp50 = simd_and(sequence_e3_86_adv, cc_range_3180_3190_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r3000_4dff_tmp50);
                  r3000_4dff_tmp51 = simd_and(r800_ffff_tmp2, tmp3);
                  byte_87 = simd_and(r3000_4dff_tmp28, r3000_4dff_tmp51);
                  sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
                  r3000_4dff_tmp52 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
                  r3000_4dff_tmp53 = simd_and(basis_bits.bit_2, r3000_4dff_tmp52);
                  r3000_4dff_tmp54 = simd_andc(r3000_4dff_tmp53, tmp1);
                  cc_range_31c0_31f0_3 = simd_andc(byte_range_80_bf, r3000_4dff_tmp54);
                  carryQ.cq[138] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(138), sequence_e3_87_adv));
                  r3000_4dff_tmp55 = simd_and(sequence_e3_87_adv, cc_range_31c0_31f0_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r3000_4dff_tmp55);
                  r3000_4dff_tmp56 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp57 = simd_andc(r3000_4dff_tmp56, r800_ffff_tmp3);
                  byte_88 = simd_and(r3000_4dff_tmp28, r3000_4dff_tmp57);
                  sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
                  r3000_4dff_tmp58 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r3000_4dff_tmp59 = simd_and(basis_bits.bit_3, tmp4);
                  r3000_4dff_tmp60 = simd_andc(r3000_4dff_tmp58, r3000_4dff_tmp59);
                  r3000_4dff_tmp61 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  cc_range_3200_3220_3 = simd_or(r3000_4dff_tmp60, r3000_4dff_tmp61);
                  carryQ.cq[139] = carryout2carry(pablo_blk_Advance(sequence_e3_88, carryQ.get_carry_in(139), sequence_e3_88_adv));
                  r3000_4dff_tmp62 = simd_and(sequence_e3_88_adv, cc_range_3200_3220_3);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r3000_4dff_tmp62);
                  r3000_4dff_tmp63 = simd_and(r3000_4dff_tmp28, r3000_4dff_tmp56);
                  r3000_4dff_tmp64 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_89_8a = simd_and(r3000_4dff_tmp63, r3000_4dff_tmp64);
                  byte_e3_byte_range_89_8a = simd_and(byte_e3_adv, byte_range_89_8a);
                  carryQ.cq[140] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_89_8a, carryQ.get_carry_in(140), r3000_4dff_tmp65));
                  byte_e3_byte_range_89_8a_sfx = simd_and(r3000_4dff_tmp65, byte_range_80_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, byte_e3_byte_range_89_8a_sfx);
                  r3000_4dff_tmp66 = simd_and(r3000_4dff_tmp56, tmp3);
                  byte_8b = simd_and(r3000_4dff_tmp28, r3000_4dff_tmp66);
                  sequence_e3_8b = simd_and(byte_e3_adv, byte_8b);
                  r3000_4dff_tmp67 = simd_and(basis_bits.bit_2, r3000_4dff_tmp59);
                  byte_range_80_be = simd_andc(byte_range_80_bf, r3000_4dff_tmp67);
                  carryQ.cq[141] = carryout2carry(pablo_blk_Advance(sequence_e3_8b, carryQ.get_carry_in(141), r3000_4dff_tmp68));
                  sequence_e3_8b_byte_range_80_be = simd_and(r3000_4dff_tmp68, byte_range_80_be);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e3_8b_byte_range_80_be);
                  r3000_4dff_tmp69 = simd_andc(tmp2, r800_ffff_tmp3);
                  byte_8c = simd_and(r3000_4dff_tmp28, r3000_4dff_tmp69);
                  sequence_e3_8c = simd_and(byte_e3_adv, byte_8c);
                  carryQ.cq[142] = carryout2carry(pablo_blk_Advance(sequence_e3_8c, carryQ.get_carry_in(142), r3000_4dff_tmp70));
                  sequence_e3_8c_byte_range_80_bf = simd_and(r3000_4dff_tmp70, byte_range_80_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e3_8c_byte_range_80_bf);
                  r3000_4dff_tmp71 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp72 = simd_or(basis_bits.bit_4, r3000_4dff_tmp71);
                  r3000_4dff_tmp73 = simd_and(basis_bits.bit_3, r3000_4dff_tmp72);
                  r3000_4dff_tmp74 = simd_and(basis_bits.bit_2, r3000_4dff_tmp73);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r3000_4dff_tmp74);
                  byte_e4_byte_range_80_b5 = simd_and(r800_ffff_tmp8, byte_range_80_b5);
                  carryQ.cq[143] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_80_b5, carryQ.get_carry_in(143), r3000_4dff_tmp75));
                  byte_e4_byte_range_80_b5_sfx = simd_and(r3000_4dff_tmp75, byte_range_80_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, byte_e4_byte_range_80_b5_sfx);
                  byte_b6 = simd_and(r3000_4dff_tmp37, r3000_4dff_tmp44);
                  byte_e4_adv = r800_ffff_tmp8;
                  sequence_e4_b6 = simd_and(byte_e4_adv, byte_b6);
                  carryQ.cq[144] = carryout2carry(pablo_blk_Advance(sequence_e4_b6, carryQ.get_carry_in(144), r3000_4dff_tmp76));
                  sequence_e4_b6_byte_range_80_b5 = simd_and(r3000_4dff_tmp76, byte_range_80_b5);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e4_b6_byte_range_80_b5);
                  byte_b7 = simd_and(r3000_4dff_tmp37, r3000_4dff_tmp51);
                  sequence_e4_b7 = simd_and(byte_e4_adv, byte_b7);
                  carryQ.cq[145] = carryout2carry(pablo_blk_Advance(sequence_e4_b7, carryQ.get_carry_in(145), r3000_4dff_tmp77));
                  sequence_e4_b7_byte_range_80_bf = simd_and(r3000_4dff_tmp77, byte_range_80_bf);
                  struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e4_b7_byte_range_80_bf);
                }
                else {
                  carryQ.CarryDequeueEnqueue(130, 16);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(102, 44);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(26, 120);
            }
            r800_ffff_tmp11 = simd_and(r800_ffff_tmp5, tmp1);
            byte_range_b8_bf = simd_and(r800_ffff_tmp11, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_and(r800_ffff_tmp8, byte_range_b8_bf);
            r800_ffff_tmp13 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r800_ffff_tmp14 = simd_not(r800_ffff_tmp13);
            r800_ffff_tmp15 = simd_and(basis_bits.bit_5, r800_ffff_tmp3);
            r800_ffff_tmp16 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp14), simd_andc(r800_ffff_tmp15, basis_bits.bit_4));
            byte_range_e5_e9 = simd_and(byte_range_e0_ef, r800_ffff_tmp16);
            r800_ffff_tmp17 = simd_or(r800_ffff_tmp12, byte_range_e5_e9);
            if ((bitblock::any(r800_ffff_tmp17) || carryQ.CarryTest(146, 5))) {
              byte_e4_byte_range_b8_bf = r800_ffff_tmp12;
              byte_range_80_bf = r800_ffff_tmp5;
              carryQ.cq[146] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_b8_bf, carryQ.get_carry_in(146), r4e00_9fff_tmp1));
              byte_e4_byte_range_b8_bf_sfx = simd_and(r4e00_9fff_tmp1, byte_range_80_bf);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, byte_e4_byte_range_b8_bf_sfx);
              r4e00_9fff_tmp2 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
              r4e00_9fff_tmp3 = simd_not(r4e00_9fff_tmp2);
              r4e00_9fff_tmp4 = simd_or(simd_and(basis_bits.bit_4, r4e00_9fff_tmp3), simd_andc(r800_ffff_tmp15, basis_bits.bit_4));
              byte_range_e5_e8 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp4);
              carryQ.cq[147] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8, carryQ.get_carry_in(147), r4e00_9fff_tmp5));
              byte_range_e5_e8_sfx = simd_and(r4e00_9fff_tmp5, byte_range_80_bf);
              carryQ.cq[148] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8_sfx, carryQ.get_carry_in(148), r4e00_9fff_tmp6));
              byte_range_e5_e8_sfx_sfx = simd_and(r4e00_9fff_tmp6, byte_range_80_bf);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, byte_range_e5_e8_sfx_sfx);
              r4e00_9fff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              r4e00_9fff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r4e00_9fff_tmp9 = simd_and(r4e00_9fff_tmp7, r4e00_9fff_tmp8);
              byte_e9 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp9);
              r4e00_9fff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              r4e00_9fff_tmp11 = simd_andc(byte_range_80_bf, r4e00_9fff_tmp10);
              r4e00_9fff_tmp12 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_80 = simd_andc(r4e00_9fff_tmp11, r4e00_9fff_tmp12);
              carryQ.cq[149] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(149), byte_e9_adv));
              sequence_e9_80 = simd_and(byte_e9_adv, byte_80);
              r4e00_9fff_tmp13 = simd_and(basis_bits.bit_4, r800_ffff_tmp15);
              byte_range_80_8c = simd_andc(r4e00_9fff_tmp11, r4e00_9fff_tmp13);
              carryQ.cq[150] = carryout2carry(pablo_blk_Advance(sequence_e9_80, carryQ.get_carry_in(150), r4e00_9fff_tmp14));
              sequence_e9_80_byte_range_80_8c = simd_and(r4e00_9fff_tmp14, byte_range_80_8c);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_e9_80_byte_range_80_8c);
            }
            else {
              carryQ.CarryDequeueEnqueue(146, 5);
            }
            r800_ffff_tmp18 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            byte_range_ea_ef = simd_and(r800_ffff_tmp18, r800_ffff_tmp13);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(151, 53))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(r800_ffff_tmp5, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              ra000_ffff_tmp6 = simd_and(basis_bits.bit_3, ra000_ffff_tmp5);
              byte_range_80_91 = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp6);
              carryQ.cq[151] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(151), ra000_ffff_tmp7));
              byte_ea_byte_range_80_91 = simd_and(ra000_ffff_tmp7, byte_range_80_91);
              byte_range_80_bf = r800_ffff_tmp5;
              carryQ.cq[152] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_80_91, carryQ.get_carry_in(152), ra000_ffff_tmp8));
              byte_ea_byte_range_80_91_sfx = simd_and(ra000_ffff_tmp8, byte_range_80_bf);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, byte_ea_byte_range_80_91_sfx);
              ra000_ffff_tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp10 = simd_and(byte_range_80_bf, ra000_ffff_tmp9);
              ra000_ffff_tmp11 = simd_andc(ra000_ffff_tmp2, r800_ffff_tmp1);
              byte_92 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp11);
              byte_ea_adv = ra000_ffff_tmp7;
              sequence_ea_92 = simd_and(byte_ea_adv, byte_92);
              ra000_ffff_tmp12 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp13 = simd_andc(byte_range_80_bf, ra000_ffff_tmp12);
              ra000_ffff_tmp14 = simd_and(basis_bits.bit_4, r800_ffff_tmp15);
              byte_range_80_8c = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp14);
              carryQ.cq[153] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(153), ra000_ffff_tmp15));
              sequence_ea_92_byte_range_80_8c = simd_and(ra000_ffff_tmp15, byte_range_80_8c);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_92_byte_range_80_8c);
              ra000_ffff_tmp16 = simd_andc(tmp3, r800_ffff_tmp1);
              byte_93 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp16);
              sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
              ra000_ffff_tmp17 = simd_andc(ra000_ffff_tmp13, basis_bits.bit_4);
              ra000_ffff_tmp18 = simd_and(basis_bits.bit_5, tmp3);
              byte_range_80_86 = simd_andc(ra000_ffff_tmp17, ra000_ffff_tmp18);
              carryQ.cq[154] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(154), ra000_ffff_tmp19));
              sequence_ea_93_byte_range_80_86 = simd_and(ra000_ffff_tmp19, byte_range_80_86);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_93_byte_range_80_86);
              byte_94 = simd_and(ra000_ffff_tmp10, r800_ffff_tmp4);
              sequence_ea_94 = simd_and(byte_ea_adv, byte_94);
              carryQ.cq[155] = carryout2carry(pablo_blk_Advance(sequence_ea_94, carryQ.get_carry_in(155), ra000_ffff_tmp20));
              sequence_ea_94_byte_range_80_bf = simd_and(ra000_ffff_tmp20, byte_range_80_bf);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_94_byte_range_80_bf);
              ra000_ffff_tmp21 = simd_andc(ra000_ffff_tmp1, r800_ffff_tmp3);
              byte_98 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp21);
              sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
              ra000_ffff_tmp22 = simd_or(basis_bits.bit_3, tmp2);
              ra000_ffff_tmp23 = simd_and(basis_bits.bit_2, ra000_ffff_tmp22);
              byte_range_80_ab = simd_andc(byte_range_80_bf, ra000_ffff_tmp23);
              carryQ.cq[156] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(156), ra000_ffff_tmp24));
              sequence_ea_98_byte_range_80_ab = simd_and(ra000_ffff_tmp24, byte_range_80_ab);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_98_byte_range_80_ab);
              ra000_ffff_tmp25 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp26 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp25);
              byte_99 = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp26);
              sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
              ra000_ffff_tmp27 = simd_or(basis_bits.bit_3, tmp4);
              ra000_ffff_tmp28 = simd_and(basis_bits.bit_2, ra000_ffff_tmp27);
              byte_range_80_ae = simd_andc(byte_range_80_bf, ra000_ffff_tmp28);
              carryQ.cq[157] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(157), ra000_ffff_tmp29));
              sequence_ea_99_byte_range_80_ae = simd_and(ra000_ffff_tmp29, byte_range_80_ae);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_99_byte_range_80_ae);
              byte_9a = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp30 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              ra000_ffff_tmp31 = simd_and(tmp2, basis_bits.bit_6);
              ra000_ffff_tmp32 = simd_and(basis_bits.bit_3, ra000_ffff_tmp31);
              byte_range_80_9d = simd_andc(ra000_ffff_tmp30, ra000_ffff_tmp32);
              carryQ.cq[158] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(158), ra000_ffff_tmp33));
              sequence_ea_9a_byte_range_80_9d = simd_and(ra000_ffff_tmp33, byte_range_80_9d);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_9a_byte_range_80_9d);
              ra000_ffff_tmp34 = simd_and(ra000_ffff_tmp1, tmp3);
              byte_9b = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp34);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              byte_range_80_af = simd_andc(byte_range_80_bf, tmp1);
              carryQ.cq[159] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(159), ra000_ffff_tmp35));
              sequence_ea_9b_byte_range_80_af = simd_and(ra000_ffff_tmp35, byte_range_80_af);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_9b_byte_range_80_af);
              ra000_ffff_tmp36 = simd_andc(tmp2, r800_ffff_tmp3);
              byte_9c = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp36);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              carryQ.cq[160] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(160), ra000_ffff_tmp37));
              sequence_ea_9c_byte_range_80_bf = simd_and(ra000_ffff_tmp37, byte_range_80_bf);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_9c_byte_range_80_bf);
              ra000_ffff_tmp38 = simd_and(tmp2, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp10, ra000_ffff_tmp38);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp39 = simd_and(basis_bits.bit_4, ra000_ffff_tmp18);
              byte_range_80_8e = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp39);
              carryQ.cq[161] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(161), ra000_ffff_tmp40));
              sequence_ea_9e_byte_range_80_8e = simd_and(ra000_ffff_tmp40, byte_range_80_8e);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_9e_byte_range_80_8e);
              byte_9f = simd_and(ra000_ffff_tmp10, tmp4);
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              ra000_ffff_tmp41 = simd_and(byte_range_80_bf, tmp1);
              ra000_ffff_tmp42 = simd_or(basis_bits.bit_4, ra000_ffff_tmp18);
              byte_range_b7_bf = simd_and(ra000_ffff_tmp41, ra000_ffff_tmp42);
              carryQ.cq[162] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(162), ra000_ffff_tmp43));
              sequence_ea_9f_byte_range_b7_bf = simd_and(ra000_ffff_tmp43, byte_range_b7_bf);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_9f_byte_range_b7_bf);
              ra000_ffff_tmp44 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              ra000_ffff_tmp45 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_a0 = simd_andc(ra000_ffff_tmp44, ra000_ffff_tmp45);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              byte_range_80_81 = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp5);
              carryQ.cq[163] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(163), ra000_ffff_tmp46));
              sequence_ea_a0_byte_range_80_81 = simd_and(ra000_ffff_tmp46, byte_range_80_81);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_a0_byte_range_80_81);
              ra000_ffff_tmp47 = simd_andc(ra000_ffff_tmp25, r800_ffff_tmp1);
              byte_a1 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp47);
              sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
              carryQ.cq[164] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(164), ra000_ffff_tmp48));
              sequence_ea_a1_byte_range_80_b7 = simd_and(ra000_ffff_tmp48, byte_range_80_b7);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_a1_byte_range_80_b7);
              byte_a2 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp11);
              sequence_ea_a2 = simd_and(byte_ea_adv, byte_a2);
              carryQ.cq[165] = carryout2carry(pablo_blk_Advance(sequence_ea_a2, carryQ.get_carry_in(165), ra000_ffff_tmp49));
              sequence_ea_a2_byte_range_80_bf = simd_and(ra000_ffff_tmp49, byte_range_80_bf);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_a2_byte_range_80_bf);
              byte_a3 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp16);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              byte_range_80_83 = simd_andc(ra000_ffff_tmp13, r800_ffff_tmp1);
              carryQ.cq[166] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(166), ra000_ffff_tmp50));
              sequence_ea_a3_byte_range_80_83 = simd_and(ra000_ffff_tmp50, byte_range_80_83);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_a3_byte_range_80_83);
              byte_a4 = simd_and(ra000_ffff_tmp44, r800_ffff_tmp4);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              ra000_ffff_tmp51 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp52 = simd_or(basis_bits.bit_4, ra000_ffff_tmp51);
              ra000_ffff_tmp53 = simd_or(basis_bits.bit_3, ra000_ffff_tmp52);
              ra000_ffff_tmp54 = simd_and(basis_bits.bit_2, ra000_ffff_tmp53);
              byte_range_80_a5 = simd_andc(byte_range_80_bf, ra000_ffff_tmp54);
              carryQ.cq[167] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(167), ra000_ffff_tmp55));
              sequence_ea_a4_byte_range_80_a5 = simd_and(ra000_ffff_tmp55, byte_range_80_a5);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_a4_byte_range_80_a5);
              ra000_ffff_tmp56 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp25);
              byte_a5 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp56);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              carryQ.cq[168] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(168), ra000_ffff_tmp57));
              sequence_ea_a5_byte_range_80_86 = simd_and(ra000_ffff_tmp57, byte_range_80_86);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_a5_byte_range_80_86);
              ra000_ffff_tmp58 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp2);
              byte_a6 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp58);
              sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
              ra000_ffff_tmp59 = simd_or(r800_ffff_tmp1, tmp3);
              ra000_ffff_tmp60 = simd_and(basis_bits.bit_3, ra000_ffff_tmp59);
              ra000_ffff_tmp61 = simd_not(ra000_ffff_tmp60);
              ra000_ffff_tmp62 = simd_or(basis_bits.bit_3, ra000_ffff_tmp59);
              ra000_ffff_tmp63 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp61), simd_andc(ra000_ffff_tmp62, basis_bits.bit_2));
              byte_range_83_b2 = simd_and(byte_range_80_bf, ra000_ffff_tmp63);
              carryQ.cq[169] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(169), ra000_ffff_tmp64));
              sequence_ea_a6_byte_range_83_b2 = simd_and(ra000_ffff_tmp64, byte_range_83_b2);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_a6_byte_range_83_b2);
              ra000_ffff_tmp65 = simd_and(r800_ffff_tmp2, tmp3);
              byte_a7 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp65);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              ra000_ffff_tmp66 = simd_and(basis_bits.bit_4, ra000_ffff_tmp51);
              byte_range_80_8d = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp66);
              carryQ.cq[170] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(170), ra000_ffff_tmp67));
              sequence_ea_a7_byte_range_80_8d = simd_and(ra000_ffff_tmp67, byte_range_80_8d);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_a7_byte_range_80_8d);
              byte_a8 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp21);
              sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
              ra000_ffff_tmp68 = simd_or(basis_bits.bit_5, r800_ffff_tmp3);
              ra000_ffff_tmp69 = simd_and(basis_bits.bit_4, ra000_ffff_tmp68);
              ra000_ffff_tmp70 = simd_or(basis_bits.bit_3, ra000_ffff_tmp69);
              ra000_ffff_tmp71 = simd_and(basis_bits.bit_2, ra000_ffff_tmp70);
              byte_range_80_a8 = simd_andc(byte_range_80_bf, ra000_ffff_tmp71);
              carryQ.cq[171] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(171), ra000_ffff_tmp72));
              sequence_ea_a8_byte_range_80_a8 = simd_and(ra000_ffff_tmp72, byte_range_80_a8);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_a8_byte_range_80_a8);
              byte_a9 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp26);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              byte_range_80_82 = simd_andc(byte_range_80_83, tmp3);
              carryQ.cq[172] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(172), ra000_ffff_tmp73));
              sequence_ea_a9_byte_range_80_82 = simd_and(ra000_ffff_tmp73, byte_range_80_82);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_a9_byte_range_80_82);
              byte_aa = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp3);
              sequence_ea_aa = simd_and(byte_ea_adv, byte_aa);
              carryQ.cq[173] = carryout2carry(pablo_blk_Advance(sequence_ea_aa, carryQ.get_carry_in(173), ra000_ffff_tmp74));
              sequence_ea_aa_byte_range_80_af = simd_and(ra000_ffff_tmp74, byte_range_80_af);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_aa_byte_range_80_af);
              byte_ab = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp34);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              byte_80 = simd_andc(ra000_ffff_tmp13, ra000_ffff_tmp45);
              carryQ.cq[174] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(174), ra000_ffff_tmp75));
              sequence_ea_ab_80 = simd_and(ra000_ffff_tmp75, byte_80);
              byte_ac = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp36);
              sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
              ra000_ffff_tmp76 = simd_not(tmp3);
              ra000_ffff_tmp77 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp76), simd_andc(r800_ffff_tmp3, basis_bits.bit_5));
              byte_range_81_86 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp77);
              carryQ.cq[175] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(175), ra000_ffff_tmp78));
              sequence_ea_ac_byte_range_81_86 = simd_and(ra000_ffff_tmp78, byte_range_81_86);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_ac_byte_range_81_86);
              ra000_ffff_tmp79 = simd_and(tmp2, ra000_ffff_tmp25);
              byte_ad = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp79);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              byte_range_80_9f = ra000_ffff_tmp30;
              carryQ.cq[176] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(176), ra000_ffff_tmp80));
              sequence_ea_ad_byte_range_80_9f = simd_and(ra000_ffff_tmp80, byte_range_80_9f);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_ad_byte_range_80_9f);
              byte_af = simd_and(ra000_ffff_tmp44, tmp4);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              ra000_ffff_tmp81 = simd_or(basis_bits.bit_4, r800_ffff_tmp15);
              ra000_ffff_tmp82 = simd_or(basis_bits.bit_3, ra000_ffff_tmp81);
              ra000_ffff_tmp83 = simd_and(basis_bits.bit_2, ra000_ffff_tmp82);
              byte_range_80_a4 = simd_andc(byte_range_80_bf, ra000_ffff_tmp83);
              carryQ.cq[177] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(177), ra000_ffff_tmp84));
              sequence_ea_af_byte_range_80_a4 = simd_and(ra000_ffff_tmp84, byte_range_80_a4);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_af_byte_range_80_a4);
              byte_b0 = simd_andc(ra000_ffff_tmp41, ra000_ffff_tmp45);
              sequence_ea_b0 = simd_and(byte_ea_adv, byte_b0);
              carryQ.cq[178] = carryout2carry(pablo_blk_Advance(sequence_ea_b0, carryQ.get_carry_in(178), ra000_ffff_tmp85));
              sequence_ea_b0_byte_range_80_bf = simd_and(ra000_ffff_tmp85, byte_range_80_bf);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ea_b0_byte_range_80_bf);
              ra000_ffff_tmp86 = simd_not(r800_ffff_tmp3);
              ra000_ffff_tmp87 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp86), simd_andc(tmp3, basis_bits.bit_5));
              byte_range_eb_ec = simd_and(r800_ffff_tmp18, ra000_ffff_tmp87);
              carryQ.cq[179] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec, carryQ.get_carry_in(179), ra000_ffff_tmp88));
              byte_range_eb_ec_sfx = simd_and(ra000_ffff_tmp88, byte_range_80_bf);
              carryQ.cq[180] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec_sfx, carryQ.get_carry_in(180), ra000_ffff_tmp89));
              byte_range_eb_ec_sfx_sfx = simd_and(ra000_ffff_tmp89, byte_range_80_bf);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, byte_range_eb_ec_sfx_sfx);
              byte_ed = simd_and(byte_range_e0_ef, ra000_ffff_tmp79);
              carryQ.cq[181] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(181), byte_ed_adv));
              sequence_ed_80 = simd_and(byte_ed_adv, byte_80);
              ra000_ffff_tmp90 = simd_or(basis_bits.bit_3, r800_ffff_tmp1);
              ra000_ffff_tmp91 = simd_and(basis_bits.bit_2, ra000_ffff_tmp90);
              byte_range_80_a3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp91);
              carryQ.cq[182] = carryout2carry(pablo_blk_Advance(sequence_ed_80, carryQ.get_carry_in(182), ra000_ffff_tmp92));
              sequence_ed_80_byte_range_80_a3 = simd_and(ra000_ffff_tmp92, byte_range_80_a3);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ed_80_byte_range_80_a3);
              byte_ef = simd_and(byte_range_e0_ef, tmp4);
              ra000_ffff_tmp93 = simd_not(ra000_ffff_tmp68);
              ra000_ffff_tmp94 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp93), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
              byte_range_a4_a8 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp94);
              carryQ.cq[183] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(183), ra000_ffff_tmp95));
              byte_ef_byte_range_a4_a8 = simd_and(ra000_ffff_tmp95, byte_range_a4_a8);
              carryQ.cq[184] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_a4_a8, carryQ.get_carry_in(184), ra000_ffff_tmp96));
              byte_ef_byte_range_a4_a8_sfx = simd_and(ra000_ffff_tmp96, byte_range_80_bf);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, byte_ef_byte_range_a4_a8_sfx);
              byte_ef_adv = ra000_ffff_tmp95;
              sequence_ef_a9 = simd_and(byte_ef_adv, byte_a9);
              ra000_ffff_tmp97 = simd_or(basis_bits.bit_3, ra000_ffff_tmp31);
              ra000_ffff_tmp98 = simd_and(basis_bits.bit_2, ra000_ffff_tmp97);
              byte_range_80_ad = simd_andc(byte_range_80_bf, ra000_ffff_tmp98);
              carryQ.cq[185] = carryout2carry(pablo_blk_Advance(sequence_ef_a9, carryQ.get_carry_in(185), ra000_ffff_tmp99));
              sequence_ef_a9_byte_range_80_ad = simd_and(ra000_ffff_tmp99, byte_range_80_ad);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ef_a9_byte_range_80_ad);
              sequence_ef_aa = simd_and(byte_ef_adv, byte_aa);
              carryQ.cq[186] = carryout2carry(pablo_blk_Advance(sequence_ef_aa, carryQ.get_carry_in(186), ra000_ffff_tmp100));
              sequence_ef_aa_byte_range_80_bf = simd_and(ra000_ffff_tmp100, byte_range_80_bf);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ef_aa_byte_range_80_bf);
              sequence_ef_ab = simd_and(byte_ef_adv, byte_ab);
              ra000_ffff_tmp101 = simd_and(basis_bits.bit_4, r800_ffff_tmp13);
              ra000_ffff_tmp102 = simd_and(basis_bits.bit_3, ra000_ffff_tmp101);
              byte_range_80_99 = simd_andc(byte_range_80_9f, ra000_ffff_tmp102);
              carryQ.cq[187] = carryout2carry(pablo_blk_Advance(sequence_ef_ab, carryQ.get_carry_in(187), ra000_ffff_tmp103));
              sequence_ef_ab_byte_range_80_99 = simd_and(ra000_ffff_tmp103, byte_range_80_99);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ef_ab_byte_range_80_99);
              sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
              carryQ.cq[188] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(188), ra000_ffff_tmp104));
              sequence_ef_ac_byte_range_80_86 = simd_and(ra000_ffff_tmp104, byte_range_80_86);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ef_ac_byte_range_80_86);
              sequence_ef_ad = simd_and(byte_ef_adv, byte_ad);
              carryQ.cq[189] = carryout2carry(pablo_blk_Advance(sequence_ef_ad, carryQ.get_carry_in(189), ra000_ffff_tmp105));
              sequence_ef_ad_byte_range_80_81 = simd_and(ra000_ffff_tmp105, byte_range_80_81);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ef_ad_byte_range_80_81);
              byte_ae = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp38);
              sequence_ef_ae = simd_and(byte_ef_adv, byte_ae);
              carryQ.cq[190] = carryout2carry(pablo_blk_Advance(sequence_ef_ae, carryQ.get_carry_in(190), ra000_ffff_tmp106));
              sequence_ef_ae_byte_range_80_bf = simd_and(ra000_ffff_tmp106, byte_range_80_bf);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ef_ae_byte_range_80_bf);
              sequence_ef_af = simd_and(byte_ef_adv, byte_af);
              carryQ.cq[191] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(191), ra000_ffff_tmp107));
              sequence_ef_af_byte_range_80_81 = simd_and(ra000_ffff_tmp107, byte_range_80_81);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ef_af_byte_range_80_81);
              sequence_ef_b0 = simd_and(byte_ef_adv, byte_b0);
              carryQ.cq[192] = carryout2carry(pablo_blk_Advance(sequence_ef_b0, carryQ.get_carry_in(192), ra000_ffff_tmp108));
              sequence_ef_b0_byte_range_80_bf = simd_and(ra000_ffff_tmp108, byte_range_80_bf);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ef_b0_byte_range_80_bf);
              byte_b5 = simd_and(ra000_ffff_tmp41, ra000_ffff_tmp56);
              sequence_ef_b5 = simd_and(byte_ef_adv, byte_b5);
              byte_range_90_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp12);
              carryQ.cq[193] = carryout2carry(pablo_blk_Advance(sequence_ef_b5, carryQ.get_carry_in(193), ra000_ffff_tmp109));
              sequence_ef_b5_byte_range_90_bf = simd_and(ra000_ffff_tmp109, byte_range_90_bf);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ef_b5_byte_range_90_bf);
              byte_b6 = simd_and(ra000_ffff_tmp41, ra000_ffff_tmp58);
              sequence_ef_b6 = simd_and(byte_ef_adv, byte_b6);
              byte_range_80_8f = ra000_ffff_tmp13;
              carryQ.cq[194] = carryout2carry(pablo_blk_Advance(sequence_ef_b6, carryQ.get_carry_in(194), ra000_ffff_tmp110));
              sequence_ef_b6_byte_range_80_8f = simd_and(ra000_ffff_tmp110, byte_range_80_8f);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ef_b6_byte_range_80_8f);
              byte_b7 = simd_and(ra000_ffff_tmp41, ra000_ffff_tmp65);
              sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
              byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
              carryQ.cq[195] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(195), ra000_ffff_tmp111));
              sequence_ef_b7_byte_range_80_87 = simd_and(ra000_ffff_tmp111, byte_range_80_87);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ef_b7_byte_range_80_87);
              byte_b8 = simd_and(ra000_ffff_tmp41, ra000_ffff_tmp21);
              sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
              byte_range_90_99 = simd_andc(ra000_ffff_tmp10, ra000_ffff_tmp101);
              carryQ.cq[196] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(196), ra000_ffff_tmp112));
              sequence_ef_b8_byte_range_90_99 = simd_and(ra000_ffff_tmp112, byte_range_90_99);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ef_b8_byte_range_90_99);
              byte_b9 = simd_and(ra000_ffff_tmp41, ra000_ffff_tmp26);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              byte_range_80_92 = simd_andc(byte_range_80_9f, ra000_ffff_tmp60);
              carryQ.cq[197] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(197), ra000_ffff_tmp113));
              sequence_ef_b9_byte_range_80_92 = simd_and(ra000_ffff_tmp113, byte_range_80_92);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ef_b9_byte_range_80_92);
              byte_ba = simd_and(ra000_ffff_tmp41, ra000_ffff_tmp3);
              sequence_ef_ba = simd_and(byte_ef_adv, byte_ba);
              carryQ.cq[198] = carryout2carry(pablo_blk_Advance(sequence_ef_ba, carryQ.get_carry_in(198), ra000_ffff_tmp114));
              sequence_ef_ba_byte_range_80_bf = simd_and(ra000_ffff_tmp114, byte_range_80_bf);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ef_ba_byte_range_80_bf);
              byte_bb = simd_and(ra000_ffff_tmp41, ra000_ffff_tmp34);
              sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
              ra000_ffff_tmp115 = simd_and(tmp2, r800_ffff_tmp3);
              ra000_ffff_tmp116 = simd_and(basis_bits.bit_3, ra000_ffff_tmp115);
              ra000_ffff_tmp117 = simd_and(basis_bits.bit_2, ra000_ffff_tmp116);
              byte_range_80_bc = simd_andc(byte_range_80_bf, ra000_ffff_tmp117);
              carryQ.cq[199] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(199), ra000_ffff_tmp118));
              sequence_ef_bb_byte_range_80_bc = simd_and(ra000_ffff_tmp118, byte_range_80_bc);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ef_bb_byte_range_80_bc);
              byte_bc = simd_and(ra000_ffff_tmp41, ra000_ffff_tmp36);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              ra000_ffff_tmp119 = simd_or(basis_bits.bit_3, ra000_ffff_tmp45);
              ra000_ffff_tmp120 = simd_or(basis_bits.bit_2, ra000_ffff_tmp119);
              byte_range_81_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp120);
              carryQ.cq[200] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(200), ra000_ffff_tmp121));
              sequence_ef_bc_byte_range_81_bf = simd_and(ra000_ffff_tmp121, byte_range_81_bf);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ef_bc_byte_range_81_bf);
              byte_bd = simd_and(ra000_ffff_tmp41, ra000_ffff_tmp79);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              carryQ.cq[201] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(201), ra000_ffff_tmp122));
              sequence_ef_bd_byte_range_80_bf = simd_and(ra000_ffff_tmp122, byte_range_80_bf);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ef_bd_byte_range_80_bf);
              byte_be = simd_and(ra000_ffff_tmp41, ra000_ffff_tmp38);
              sequence_ef_be = simd_and(byte_ef_adv, byte_be);
              carryQ.cq[202] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(202), ra000_ffff_tmp123));
              sequence_ef_be_byte_range_80_9d = simd_and(ra000_ffff_tmp123, byte_range_80_9d);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ef_be_byte_range_80_9d);
              byte_bf = simd_and(ra000_ffff_tmp41, tmp4);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              byte_range_82_87 = simd_and(byte_range_80_87, r800_ffff_tmp13);
              carryQ.cq[203] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(203), ra000_ffff_tmp124));
              sequence_ef_bf_byte_range_82_87 = simd_and(ra000_ffff_tmp124, byte_range_82_87);
              struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_ef_bf_byte_range_82_87);
            }
            else {
              carryQ.CarryDequeueEnqueue(151, 53);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(25, 179);
          }
          byte_range_f0_ff = simd_and(byte_range_c0_ff, tmp1);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(204, 154))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[204] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(204), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp9 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp8);
            byte_80 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp3);
            carryQ.cq[205] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(205), r10000_10ffff_tmp10));
            sequence_f0_90_80 = simd_and(r10000_10ffff_tmp10, byte_80);
            sequence_f0_90_adv = r10000_10ffff_tmp10;
            r10000_10ffff_tmp11 = simd_andc(r10000_10ffff_tmp9, tmp2);
            r10000_10ffff_tmp12 = simd_and(basis_bits.bit_5, tmp3);
            r10000_10ffff_tmp13 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp12);
            r10000_10ffff_tmp14 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp13);
            r10000_10ffff_tmp15 = simd_not(r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_and(tmp2, r10000_10ffff_tmp2);
            r10000_10ffff_tmp17 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp16);
            r10000_10ffff_tmp18 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp15), simd_andc(r10000_10ffff_tmp17, basis_bits.bit_2));
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp18);
            r10000_10ffff_tmp20 = simd_or(r10000_10ffff_tmp11, r10000_10ffff_tmp19);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp4, basis_bits.bit_2);
            r10000_10ffff_tmp22 = simd_or(basis_bits.bit_5, tmp3);
            r10000_10ffff_tmp23 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp22);
            r10000_10ffff_tmp24 = simd_not(r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp24), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
            r10000_10ffff_tmp26 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp25);
            r10000_10ffff_tmp27 = simd_or(r10000_10ffff_tmp20, r10000_10ffff_tmp26);
            r10000_10ffff_tmp28 = simd_and(r10000_10ffff_tmp4, tmp1);
            r10000_10ffff_tmp29 = simd_andc(tmp2, basis_bits.bit_6);
            r10000_10ffff_tmp30 = simd_and(r10000_10ffff_tmp28, r10000_10ffff_tmp29);
            r10000_10ffff_tmp31 = simd_or(r10000_10ffff_tmp27, r10000_10ffff_tmp30);
            r10000_10ffff_tmp32 = simd_and(r10000_10ffff_tmp28, tmp4);
            cc_range_10000_1003f_4 = simd_or(r10000_10ffff_tmp31, r10000_10ffff_tmp32);
            carryQ.cq[206] = carryout2carry(pablo_blk_Advance(sequence_f0_90_80, carryQ.get_carry_in(206), sequence_f0_90_80_adv));
            r10000_10ffff_tmp33 = simd_and(sequence_f0_90_80_adv, cc_range_10000_1003f_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp33);
            r10000_10ffff_tmp34 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp35 = simd_andc(r10000_10ffff_tmp34, r10000_10ffff_tmp1);
            byte_81 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp35);
            sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
            r10000_10ffff_tmp36 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp37 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp36);
            r10000_10ffff_tmp38 = simd_andc(r10000_10ffff_tmp8, r10000_10ffff_tmp5);
            r10000_10ffff_tmp39 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp38);
            cc_range_10040_10050_4 = simd_andc(r10000_10ffff_tmp39, r10000_10ffff_tmp37);
            carryQ.cq[207] = carryout2carry(pablo_blk_Advance(sequence_f0_90_81, carryQ.get_carry_in(207), sequence_f0_90_81_adv));
            r10000_10ffff_tmp40 = simd_and(sequence_f0_90_81_adv, cc_range_10040_10050_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp40);
            r10000_10ffff_tmp41 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp42 = simd_andc(r10000_10ffff_tmp41, r10000_10ffff_tmp1);
            byte_82 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp42);
            sequence_f0_90_82 = simd_and(sequence_f0_90_adv, byte_82);
            byte_range_80_bf = r10000_10ffff_tmp4;
            carryQ.cq[208] = carryout2carry(pablo_blk_Advance(sequence_f0_90_82, carryQ.get_carry_in(208), sequence_f0_90_82_adv));
            r10000_10ffff_tmp43 = simd_and(sequence_f0_90_82_adv, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp43);
            r10000_10ffff_tmp44 = simd_and(byte_range_80_bf, r10000_10ffff_tmp5);
            r10000_10ffff_tmp45 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp8);
            r10000_10ffff_tmp46 = simd_andc(tmp3, r10000_10ffff_tmp1);
            byte_83 = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp46);
            sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
            r10000_10ffff_tmp47 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp23);
            r10000_10ffff_tmp48 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp47);
            byte_range_80_ba = simd_andc(byte_range_80_bf, r10000_10ffff_tmp48);
            carryQ.cq[209] = carryout2carry(pablo_blk_Advance(sequence_f0_90_83, carryQ.get_carry_in(209), sequence_f0_90_83_adv));
            r10000_10ffff_tmp49 = simd_and(sequence_f0_90_83_adv, byte_range_80_ba);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp49);
            r10000_10ffff_tmp50 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp51 = simd_andc(r10000_10ffff_tmp50, r10000_10ffff_tmp2);
            byte_84 = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp51);
            sequence_f0_90_84 = simd_and(sequence_f0_90_adv, byte_84);
            r10000_10ffff_tmp52 = simd_andc(r10000_10ffff_tmp45, r10000_10ffff_tmp1);
            r10000_10ffff_tmp53 = simd_andc(r10000_10ffff_tmp52, tmp3);
            r10000_10ffff_tmp54 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp1);
            r10000_10ffff_tmp55 = simd_not(r10000_10ffff_tmp54);
            r10000_10ffff_tmp56 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp55), simd_andc(r10000_10ffff_tmp14, basis_bits.bit_2));
            r10000_10ffff_tmp57 = simd_and(byte_range_80_bf, r10000_10ffff_tmp56);
            r10000_10ffff_tmp58 = simd_or(r10000_10ffff_tmp53, r10000_10ffff_tmp57);
            r10000_10ffff_tmp59 = simd_and(byte_range_80_bf, tmp1);
            r10000_10ffff_tmp60 = simd_and(r10000_10ffff_tmp59, r10000_10ffff_tmp13);
            cc_range_10100_10137_4 = simd_or(r10000_10ffff_tmp58, r10000_10ffff_tmp60);
            carryQ.cq[210] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(210), sequence_f0_90_84_adv));
            r10000_10ffff_tmp61 = simd_and(sequence_f0_90_84_adv, cc_range_10100_10137_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp61);
            r10000_10ffff_tmp62 = simd_and(r10000_10ffff_tmp50, r10000_10ffff_tmp34);
            byte_85 = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp62);
            sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
            carryQ.cq[211] = carryout2carry(pablo_blk_Advance(sequence_f0_90_85, carryQ.get_carry_in(211), sequence_f0_90_85_adv));
            r10000_10ffff_tmp63 = simd_and(sequence_f0_90_85_adv, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp63);
            r10000_10ffff_tmp64 = simd_and(r10000_10ffff_tmp50, r10000_10ffff_tmp41);
            byte_86 = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp64);
            sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
            r10000_10ffff_tmp65 = simd_and(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp66 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp65);
            r10000_10ffff_tmp67 = simd_andc(r10000_10ffff_tmp45, r10000_10ffff_tmp66);
            r10000_10ffff_tmp68 = simd_andc(r10000_10ffff_tmp44, tmp2);
            r10000_10ffff_tmp69 = simd_or(r10000_10ffff_tmp67, r10000_10ffff_tmp68);
            r10000_10ffff_tmp70 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp71 = simd_andc(r10000_10ffff_tmp70, r10000_10ffff_tmp3);
            cc_range_10180_101a0_4 = simd_or(r10000_10ffff_tmp69, r10000_10ffff_tmp71);
            carryQ.cq[212] = carryout2carry(pablo_blk_Advance(sequence_f0_90_86, carryQ.get_carry_in(212), sequence_f0_90_86_adv));
            r10000_10ffff_tmp72 = simd_and(sequence_f0_90_86_adv, cc_range_10180_101a0_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp72);
            r10000_10ffff_tmp73 = simd_and(r10000_10ffff_tmp50, tmp3);
            byte_87 = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp73);
            sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
            r10000_10ffff_tmp74 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp16);
            r10000_10ffff_tmp75 = simd_not(r10000_10ffff_tmp74);
            r10000_10ffff_tmp76 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp75), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_bc = simd_and(byte_range_80_bf, r10000_10ffff_tmp76);
            carryQ.cq[213] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(213), sequence_f0_90_87_adv));
            r10000_10ffff_tmp77 = simd_and(sequence_f0_90_87_adv, byte_range_90_bc);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp77);
            r10000_10ffff_tmp78 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp79 = simd_and(r10000_10ffff_tmp78, r10000_10ffff_tmp41);
            byte_8a = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp79);
            sequence_f0_90_8a = simd_and(sequence_f0_90_adv, byte_8a);
            r10000_10ffff_tmp80 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp81 = simd_andc(r10000_10ffff_tmp80, r10000_10ffff_tmp74);
            r10000_10ffff_tmp82 = simd_and(byte_range_80_bf, basis_bits.bit_2);
            cc_range_10280_102a0_4 = simd_or(r10000_10ffff_tmp81, r10000_10ffff_tmp82);
            carryQ.cq[214] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8a, carryQ.get_carry_in(214), sequence_f0_90_8a_adv));
            r10000_10ffff_tmp83 = simd_and(sequence_f0_90_8a_adv, cc_range_10280_102a0_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp83);
            r10000_10ffff_tmp84 = simd_and(r10000_10ffff_tmp78, tmp3);
            byte_8b = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp84);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp85 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp3);
            r10000_10ffff_tmp86 = simd_andc(r10000_10ffff_tmp80, r10000_10ffff_tmp85);
            r10000_10ffff_tmp87 = simd_not(tmp2);
            r10000_10ffff_tmp88 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp87), simd_andc(r10000_10ffff_tmp3, basis_bits.bit_3));
            r10000_10ffff_tmp89 = simd_and(r10000_10ffff_tmp82, r10000_10ffff_tmp88);
            cc_range_102c0_102e1_4 = simd_or(r10000_10ffff_tmp86, r10000_10ffff_tmp89);
            carryQ.cq[215] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(215), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp90 = simd_and(sequence_f0_90_8b_adv, cc_range_102c0_102e1_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp90);
            r10000_10ffff_tmp91 = simd_andc(tmp2, r10000_10ffff_tmp2);
            byte_8c = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp91);
            sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
            r10000_10ffff_tmp92 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp1);
            r10000_10ffff_tmp93 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp92);
            r10000_10ffff_tmp94 = simd_andc(r10000_10ffff_tmp93, tmp1);
            cc_range_10300_10330_4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp94);
            carryQ.cq[216] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(216), sequence_f0_90_8c_adv));
            r10000_10ffff_tmp95 = simd_and(sequence_f0_90_8c_adv, cc_range_10300_10330_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp95);
            r10000_10ffff_tmp96 = simd_and(tmp2, r10000_10ffff_tmp34);
            byte_8d = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp96);
            sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
            r10000_10ffff_tmp97 = simd_andc(r10000_10ffff_tmp45, r10000_10ffff_tmp23);
            r10000_10ffff_tmp98 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp36);
            r10000_10ffff_tmp99 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp98);
            r10000_10ffff_tmp100 = simd_not(r10000_10ffff_tmp99);
            r10000_10ffff_tmp101 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp100), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp102 = simd_and(byte_range_80_bf, r10000_10ffff_tmp101);
            cc_range_10340_10350_4 = simd_or(r10000_10ffff_tmp97, r10000_10ffff_tmp102);
            carryQ.cq[217] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(217), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp103 = simd_and(sequence_f0_90_8d_adv, cc_range_10340_10350_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp103);
            r10000_10ffff_tmp104 = simd_and(tmp2, r10000_10ffff_tmp41);
            byte_8e = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp104);
            sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
            r10000_10ffff_tmp105 = simd_and(tmp2, basis_bits.bit_6);
            r10000_10ffff_tmp106 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp105);
            r10000_10ffff_tmp107 = simd_andc(r10000_10ffff_tmp80, r10000_10ffff_tmp106);
            r10000_10ffff_tmp108 = simd_and(basis_bits.bit_3, tmp4);
            r10000_10ffff_tmp109 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp108);
            r10000_10ffff_tmp110 = simd_and(byte_range_80_bf, r10000_10ffff_tmp109);
            cc_range_10380_1039f_4 = simd_or(r10000_10ffff_tmp107, r10000_10ffff_tmp110);
            carryQ.cq[218] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(218), sequence_f0_90_8e_adv));
            r10000_10ffff_tmp111 = simd_and(sequence_f0_90_8e_adv, cc_range_10380_1039f_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp111);
            byte_8f = simd_and(r10000_10ffff_tmp45, tmp4);
            sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
            r10000_10ffff_tmp112 = simd_not(r10000_10ffff_tmp98);
            r10000_10ffff_tmp113 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp112), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
            r10000_10ffff_tmp114 = simd_and(r10000_10ffff_tmp80, r10000_10ffff_tmp113);
            cc_range_103c0_103c8_4 = simd_or(r10000_10ffff_tmp52, r10000_10ffff_tmp114);
            carryQ.cq[219] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(219), sequence_f0_90_8f_adv));
            r10000_10ffff_tmp115 = simd_and(sequence_f0_90_8f_adv, cc_range_103c0_103c8_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp115);
            r10000_10ffff_tmp116 = simd_or(r10000_10ffff_tmp1, basis_bits.bit_6);
            byte_range_90_91 = simd_andc(r10000_10ffff_tmp44, r10000_10ffff_tmp116);
            sequence_f0_90_byte_range_90_91 = simd_and(sequence_f0_90_adv, byte_range_90_91);
            carryQ.cq[220] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_90_91, carryQ.get_carry_in(220), r10000_10ffff_tmp117));
            sequence_f0_90_byte_range_90_91_sfx = simd_and(r10000_10ffff_tmp117, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_byte_range_90_91_sfx);
            byte_92 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp42);
            sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
            byte_range_80_9d = r10000_10ffff_tmp107;
            carryQ.cq[221] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(221), r10000_10ffff_tmp118));
            sequence_f0_90_92_byte_range_80_9d = simd_and(r10000_10ffff_tmp118, byte_range_80_9d);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_92_byte_range_80_9d);
            byte_94 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp51);
            sequence_f0_90_94 = simd_and(sequence_f0_90_adv, byte_94);
            r10000_10ffff_tmp119 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp120 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp119);
            byte_range_80_a7 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp120);
            carryQ.cq[222] = carryout2carry(pablo_blk_Advance(sequence_f0_90_94, carryQ.get_carry_in(222), r10000_10ffff_tmp121));
            sequence_f0_90_94_byte_range_80_a7 = simd_and(r10000_10ffff_tmp121, byte_range_80_a7);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_94_byte_range_80_a7);
            byte_95 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp62);
            sequence_f0_90_95 = simd_and(sequence_f0_90_adv, byte_95);
            byte_range_80_a3 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp93);
            carryQ.cq[223] = carryout2carry(pablo_blk_Advance(sequence_f0_90_95, carryQ.get_carry_in(223), r10000_10ffff_tmp122));
            sequence_f0_90_95_byte_range_80_a3 = simd_and(r10000_10ffff_tmp122, byte_range_80_a3);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_95_byte_range_80_a3);
            r10000_10ffff_tmp123 = simd_andc(r10000_10ffff_tmp78, r10000_10ffff_tmp2);
            byte_98 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp123);
            sequence_f0_90_98 = simd_and(sequence_f0_90_adv, byte_98);
            carryQ.cq[224] = carryout2carry(pablo_blk_Advance(sequence_f0_90_98, carryQ.get_carry_in(224), r10000_10ffff_tmp124));
            sequence_f0_90_98_byte_range_80_bf = simd_and(r10000_10ffff_tmp124, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_98_byte_range_80_bf);
            byte_9c = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp91);
            sequence_f0_90_9c = simd_and(sequence_f0_90_adv, byte_9c);
            r10000_10ffff_tmp125 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp13);
            r10000_10ffff_tmp126 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp125);
            byte_range_80_b6 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp126);
            carryQ.cq[225] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9c, carryQ.get_carry_in(225), r10000_10ffff_tmp127));
            sequence_f0_90_9c_byte_range_80_b6 = simd_and(r10000_10ffff_tmp127, byte_range_80_b6);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_9c_byte_range_80_b6);
            byte_9d = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp96);
            sequence_f0_90_9d = simd_and(sequence_f0_90_adv, byte_9d);
            byte_range_80_95 = simd_andc(r10000_10ffff_tmp80, r10000_10ffff_tmp99);
            carryQ.cq[226] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9d, carryQ.get_carry_in(226), r10000_10ffff_tmp128));
            sequence_f0_90_9d_byte_range_80_95 = simd_and(r10000_10ffff_tmp128, byte_range_80_95);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_9d_byte_range_80_95);
            byte_a0 = r10000_10ffff_tmp71;
            sequence_f0_90_a0 = simd_and(sequence_f0_90_adv, byte_a0);
            r10000_10ffff_tmp129 = simd_andc(r10000_10ffff_tmp45, basis_bits.bit_4);
            byte_range_80_85 = simd_andc(r10000_10ffff_tmp129, r10000_10ffff_tmp36);
            carryQ.cq[227] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a0, carryQ.get_carry_in(227), r10000_10ffff_tmp130));
            sequence_f0_90_a0_byte_range_80_85 = simd_and(r10000_10ffff_tmp130, byte_range_80_85);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_a0_byte_range_80_85);
            byte_a1 = simd_and(r10000_10ffff_tmp70, r10000_10ffff_tmp35);
            sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
            carryQ.cq[228] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(228), r10000_10ffff_tmp131));
            sequence_f0_90_a1_byte_range_80_95 = simd_and(r10000_10ffff_tmp131, byte_range_80_95);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_a1_byte_range_80_95);
            byte_a2 = simd_and(r10000_10ffff_tmp70, r10000_10ffff_tmp42);
            sequence_f0_90_a2 = simd_and(sequence_f0_90_adv, byte_a2);
            byte_range_80_9e = simd_andc(r10000_10ffff_tmp80, r10000_10ffff_tmp108);
            carryQ.cq[229] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a2, carryQ.get_carry_in(229), r10000_10ffff_tmp132));
            sequence_f0_90_a2_byte_range_80_9e = simd_and(r10000_10ffff_tmp132, byte_range_80_9e);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_a2_byte_range_80_9e);
            byte_a4 = simd_and(r10000_10ffff_tmp70, r10000_10ffff_tmp51);
            sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
            r10000_10ffff_tmp133 = simd_and(basis_bits.bit_3, tmp2);
            byte_range_80_9b = simd_andc(r10000_10ffff_tmp80, r10000_10ffff_tmp133);
            carryQ.cq[230] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(230), r10000_10ffff_tmp134));
            sequence_f0_90_a4_byte_range_80_9b = simd_and(r10000_10ffff_tmp134, byte_range_80_9b);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_a4_byte_range_80_9b);
            byte_a6 = simd_and(r10000_10ffff_tmp70, r10000_10ffff_tmp64);
            sequence_f0_90_a6 = simd_and(sequence_f0_90_adv, byte_a6);
            r10000_10ffff_tmp135 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp136 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp135);
            byte_range_80_b7 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp136);
            carryQ.cq[231] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a6, carryQ.get_carry_in(231), r10000_10ffff_tmp137));
            sequence_f0_90_a6_byte_range_80_b7 = simd_and(r10000_10ffff_tmp137, byte_range_80_b7);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_a6_byte_range_80_b7);
            byte_a8 = simd_and(r10000_10ffff_tmp70, r10000_10ffff_tmp123);
            sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
            carryQ.cq[232] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(232), r10000_10ffff_tmp138));
            sequence_f0_90_a8_80 = simd_and(r10000_10ffff_tmp138, byte_80);
            r10000_10ffff_tmp139 = simd_and(r10000_10ffff_tmp78, r10000_10ffff_tmp34);
            byte_a9 = simd_and(r10000_10ffff_tmp70, r10000_10ffff_tmp139);
            sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
            byte_range_80_87 = r10000_10ffff_tmp129;
            carryQ.cq[233] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(233), r10000_10ffff_tmp140));
            sequence_f0_90_a9_byte_range_80_87 = simd_and(r10000_10ffff_tmp140, byte_range_80_87);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_a9_byte_range_80_87);
            byte_aa = simd_and(r10000_10ffff_tmp70, r10000_10ffff_tmp79);
            sequence_f0_90_aa = simd_and(sequence_f0_90_adv, byte_aa);
            byte_range_80_9f = r10000_10ffff_tmp80;
            carryQ.cq[234] = carryout2carry(pablo_blk_Advance(sequence_f0_90_aa, carryQ.get_carry_in(234), r10000_10ffff_tmp141));
            sequence_f0_90_aa_byte_range_80_9f = simd_and(r10000_10ffff_tmp141, byte_range_80_9f);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_aa_byte_range_80_9f);
            byte_ab = simd_and(r10000_10ffff_tmp70, r10000_10ffff_tmp84);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            r10000_10ffff_tmp142 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp65);
            r10000_10ffff_tmp143 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp142);
            r10000_10ffff_tmp144 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp143);
            byte_range_80_a4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp144);
            carryQ.cq[235] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(235), r10000_10ffff_tmp145));
            sequence_f0_90_ab_byte_range_80_a4 = simd_and(r10000_10ffff_tmp145, byte_range_80_a4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_ab_byte_range_80_a4);
            byte_ac = simd_and(r10000_10ffff_tmp70, r10000_10ffff_tmp91);
            sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
            r10000_10ffff_tmp146 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp99);
            byte_range_80_b5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp146);
            carryQ.cq[236] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(236), r10000_10ffff_tmp147));
            sequence_f0_90_ac_byte_range_80_b5 = simd_and(r10000_10ffff_tmp147, byte_range_80_b5);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_ac_byte_range_80_b5);
            byte_ad = simd_and(r10000_10ffff_tmp70, r10000_10ffff_tmp96);
            sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
            carryQ.cq[237] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(237), r10000_10ffff_tmp148));
            sequence_f0_90_ad_byte_range_80_95 = simd_and(r10000_10ffff_tmp148, byte_range_80_95);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_ad_byte_range_80_95);
            byte_ae = simd_and(r10000_10ffff_tmp70, r10000_10ffff_tmp104);
            sequence_f0_90_ae = simd_and(sequence_f0_90_adv, byte_ae);
            r10000_10ffff_tmp149 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp116);
            byte_range_80_91 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp149);
            carryQ.cq[238] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(238), r10000_10ffff_tmp150));
            sequence_f0_90_ae_byte_range_80_91 = simd_and(r10000_10ffff_tmp150, byte_range_80_91);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_ae_byte_range_80_91);
            byte_b0 = simd_andc(r10000_10ffff_tmp59, r10000_10ffff_tmp3);
            sequence_f0_90_b0 = simd_and(sequence_f0_90_adv, byte_b0);
            carryQ.cq[239] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b0, carryQ.get_carry_in(239), r10000_10ffff_tmp151));
            sequence_f0_90_b0_byte_range_80_bf = simd_and(r10000_10ffff_tmp151, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_b0_byte_range_80_bf);
            byte_b1 = simd_and(r10000_10ffff_tmp59, r10000_10ffff_tmp35);
            sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
            r10000_10ffff_tmp152 = simd_or(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp153 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp152);
            byte_range_80_88 = simd_andc(r10000_10ffff_tmp45, r10000_10ffff_tmp153);
            carryQ.cq[240] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b1, carryQ.get_carry_in(240), r10000_10ffff_tmp154));
            sequence_f0_90_b1_byte_range_80_88 = simd_and(r10000_10ffff_tmp154, byte_range_80_88);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_b1_byte_range_80_88);
            byte_b9 = simd_and(r10000_10ffff_tmp59, r10000_10ffff_tmp139);
            sequence_f0_90_b9 = simd_and(sequence_f0_90_adv, byte_b9);
            byte_range_a0_be = simd_andc(r10000_10ffff_tmp82, r10000_10ffff_tmp108);
            carryQ.cq[241] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b9, carryQ.get_carry_in(241), r10000_10ffff_tmp155));
            sequence_f0_90_b9_byte_range_a0_be = simd_and(r10000_10ffff_tmp155, byte_range_a0_be);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_90_b9_byte_range_a0_be);
            byte_91 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp35);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            carryQ.cq[242] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(242), r10000_10ffff_tmp156));
            sequence_f0_91_80 = simd_and(r10000_10ffff_tmp156, byte_80);
            sequence_f0_91_adv = r10000_10ffff_tmp156;
            r10000_10ffff_tmp157 = simd_andc(r10000_10ffff_tmp45, r10000_10ffff_tmp3);
            r10000_10ffff_tmp158 = simd_not(r10000_10ffff_tmp135);
            r10000_10ffff_tmp159 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp116);
            r10000_10ffff_tmp160 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp158), simd_andc(r10000_10ffff_tmp159, basis_bits.bit_2));
            r10000_10ffff_tmp161 = simd_and(byte_range_80_bf, r10000_10ffff_tmp160);
            cc_range_11000_11002_4 = simd_or(r10000_10ffff_tmp157, r10000_10ffff_tmp161);
            carryQ.cq[243] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(243), sequence_f0_91_80_adv));
            r10000_10ffff_tmp162 = simd_and(sequence_f0_91_80_adv, cc_range_11000_11002_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp162);
            sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
            r10000_10ffff_tmp163 = simd_not(r10000_10ffff_tmp36);
            r10000_10ffff_tmp164 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp163), simd_andc(r10000_10ffff_tmp12, basis_bits.bit_4));
            r10000_10ffff_tmp165 = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp164);
            r10000_10ffff_tmp166 = simd_not(basis_bits.bit_3);
            r10000_10ffff_tmp167 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp166), simd_andc(r10000_10ffff_tmp149, basis_bits.bit_2));
            r10000_10ffff_tmp168 = simd_and(byte_range_80_bf, r10000_10ffff_tmp167);
            cc_range_11047_11052_4 = simd_or(r10000_10ffff_tmp165, r10000_10ffff_tmp168);
            carryQ.cq[244] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(244), sequence_f0_91_81_adv));
            r10000_10ffff_tmp169 = simd_and(sequence_f0_91_81_adv, cc_range_11047_11052_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp169);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            r10000_10ffff_tmp170 = simd_or(r10000_10ffff_tmp1, tmp3);
            r10000_10ffff_tmp171 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp170);
            r10000_10ffff_tmp172 = simd_not(r10000_10ffff_tmp171);
            r10000_10ffff_tmp173 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp172), simd_andc(r10000_10ffff_tmp159, basis_bits.bit_2));
            r10000_10ffff_tmp174 = simd_and(byte_range_80_bf, r10000_10ffff_tmp173);
            r10000_10ffff_tmp175 = simd_not(r10000_10ffff_tmp152);
            r10000_10ffff_tmp176 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp175), simd_andc(r10000_10ffff_tmp12, basis_bits.bit_4));
            r10000_10ffff_tmp177 = simd_and(r10000_10ffff_tmp59, r10000_10ffff_tmp176);
            r10000_10ffff_tmp178 = simd_or(r10000_10ffff_tmp174, r10000_10ffff_tmp177);
            r10000_10ffff_tmp179 = simd_and(r10000_10ffff_tmp59, basis_bits.bit_4);
            r10000_10ffff_tmp180 = simd_not(r10000_10ffff_tmp2);
            r10000_10ffff_tmp181 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp180), simd_andc(tmp3, basis_bits.bit_5));
            r10000_10ffff_tmp182 = simd_and(r10000_10ffff_tmp179, r10000_10ffff_tmp181);
            r10000_10ffff_tmp183 = simd_or(r10000_10ffff_tmp178, r10000_10ffff_tmp182);
            r10000_10ffff_tmp184 = simd_and(r10000_10ffff_tmp59, r10000_10ffff_tmp105);
            cc_range_11082_110be_4 = simd_or(r10000_10ffff_tmp183, r10000_10ffff_tmp184);
            carryQ.cq[245] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(245), sequence_f0_91_82_adv));
            r10000_10ffff_tmp185 = simd_and(sequence_f0_91_82_adv, cc_range_11082_110be_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp185);
            sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
            r10000_10ffff_tmp186 = simd_andc(r10000_10ffff_tmp45, r10000_10ffff_tmp116);
            r10000_10ffff_tmp187 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp153);
            r10000_10ffff_tmp188 = simd_not(r10000_10ffff_tmp187);
            r10000_10ffff_tmp189 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp188), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp190 = simd_and(byte_range_80_bf, r10000_10ffff_tmp189);
            r10000_10ffff_tmp191 = simd_or(r10000_10ffff_tmp186, r10000_10ffff_tmp190);
            r10000_10ffff_tmp192 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp193 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp192);
            r10000_10ffff_tmp194 = simd_andc(r10000_10ffff_tmp59, r10000_10ffff_tmp193);
            cc_range_110c0_110f0_4 = simd_or(r10000_10ffff_tmp191, r10000_10ffff_tmp194);
            carryQ.cq[246] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(246), sequence_f0_91_83_adv));
            r10000_10ffff_tmp195 = simd_and(sequence_f0_91_83_adv, cc_range_110c0_110f0_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp195);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            r10000_10ffff_tmp196 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp170);
            r10000_10ffff_tmp197 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp15), simd_andc(r10000_10ffff_tmp196, basis_bits.bit_2));
            r10000_10ffff_tmp198 = simd_and(byte_range_80_bf, r10000_10ffff_tmp197);
            r10000_10ffff_tmp199 = simd_or(r10000_10ffff_tmp198, byte_ac);
            r10000_10ffff_tmp200 = simd_and(r10000_10ffff_tmp59, r10000_10ffff_tmp98);
            cc_range_11103_11136_4 = simd_or(r10000_10ffff_tmp199, r10000_10ffff_tmp200);
            carryQ.cq[247] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(247), sequence_f0_91_84_adv));
            r10000_10ffff_tmp201 = simd_and(sequence_f0_91_84_adv, cc_range_11103_11136_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp201);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            r10000_10ffff_tmp202 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp172), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp203 = simd_and(byte_range_80_bf, r10000_10ffff_tmp202);
            r10000_10ffff_tmp204 = simd_or(r10000_10ffff_tmp52, r10000_10ffff_tmp203);
            r10000_10ffff_tmp205 = simd_and(r10000_10ffff_tmp59, r10000_10ffff_tmp50);
            r10000_10ffff_tmp206 = simd_andc(r10000_10ffff_tmp205, tmp3);
            cc_range_11140_11174_4 = simd_or(r10000_10ffff_tmp204, r10000_10ffff_tmp206);
            carryQ.cq[248] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(248), sequence_f0_91_85_adv));
            r10000_10ffff_tmp207 = simd_and(sequence_f0_91_85_adv, cc_range_11140_11174_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp207);
            sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
            r10000_10ffff_tmp208 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp100), simd_andc(r10000_10ffff_tmp159, basis_bits.bit_2));
            r10000_10ffff_tmp209 = simd_and(byte_range_80_bf, r10000_10ffff_tmp208);
            r10000_10ffff_tmp210 = simd_and(r10000_10ffff_tmp59, tmp4);
            cc_range_11182_111bf_4 = simd_or(r10000_10ffff_tmp209, r10000_10ffff_tmp210);
            carryQ.cq[249] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(249), sequence_f0_91_86_adv));
            r10000_10ffff_tmp211 = simd_and(sequence_f0_91_86_adv, cc_range_11182_111bf_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp211);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            r10000_10ffff_tmp212 = simd_andc(r10000_10ffff_tmp153, r10000_10ffff_tmp96);
            r10000_10ffff_tmp213 = simd_andc(r10000_10ffff_tmp45, r10000_10ffff_tmp212);
            r10000_10ffff_tmp214 = simd_andc(r10000_10ffff_tmp44, r10000_10ffff_tmp23);
            r10000_10ffff_tmp215 = simd_or(r10000_10ffff_tmp213, r10000_10ffff_tmp214);
            r10000_10ffff_tmp216 = simd_not(r10000_10ffff_tmp142);
            r10000_10ffff_tmp217 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp216), simd_andc(r10000_10ffff_tmp3, basis_bits.bit_3));
            r10000_10ffff_tmp218 = simd_and(r10000_10ffff_tmp82, r10000_10ffff_tmp217);
            cc_range_111c0_111e1_4 = simd_or(r10000_10ffff_tmp215, r10000_10ffff_tmp218);
            carryQ.cq[250] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(250), sequence_f0_91_87_adv));
            r10000_10ffff_tmp219 = simd_and(sequence_f0_91_87_adv, cc_range_111c0_111e1_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp219);
            byte_88 = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp123);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            r10000_10ffff_tmp220 = simd_or(basis_bits.bit_3, tmp4);
            r10000_10ffff_tmp221 = simd_not(r10000_10ffff_tmp220);
            r10000_10ffff_tmp222 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp221), simd_andc(r10000_10ffff_tmp171, basis_bits.bit_2));
            r10000_10ffff_tmp223 = simd_and(byte_range_80_bf, r10000_10ffff_tmp222);
            r10000_10ffff_tmp224 = simd_or(byte_range_80_91, r10000_10ffff_tmp223);
            r10000_10ffff_tmp225 = simd_andc(basis_bits.bit_6, r10000_10ffff_tmp1);
            r10000_10ffff_tmp226 = simd_and(r10000_10ffff_tmp59, r10000_10ffff_tmp225);
            r10000_10ffff_tmp227 = simd_or(r10000_10ffff_tmp224, r10000_10ffff_tmp226);
            r10000_10ffff_tmp228 = simd_and(r10000_10ffff_tmp59, r10000_10ffff_tmp62);
            r10000_10ffff_tmp229 = simd_or(r10000_10ffff_tmp227, r10000_10ffff_tmp228);
            r10000_10ffff_tmp230 = simd_andc(r10000_10ffff_tmp179, r10000_10ffff_tmp36);
            cc_range_11200_11238_4 = simd_or(r10000_10ffff_tmp229, r10000_10ffff_tmp230);
            carryQ.cq[251] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(251), sequence_f0_91_88_adv));
            r10000_10ffff_tmp231 = simd_and(sequence_f0_91_88_adv, cc_range_11200_11238_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp231);
            sequence_f0_91_8a = simd_and(sequence_f0_91_adv, byte_8a);
            byte_range_b0_bf = r10000_10ffff_tmp59;
            carryQ.cq[252] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8a, carryQ.get_carry_in(252), sequence_f0_91_8a_adv));
            r10000_10ffff_tmp232 = simd_and(sequence_f0_91_8a_adv, byte_range_b0_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp232);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            r10000_10ffff_tmp233 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp108);
            r10000_10ffff_tmp234 = simd_andc(r10000_10ffff_tmp70, r10000_10ffff_tmp1);
            r10000_10ffff_tmp235 = simd_andc(r10000_10ffff_tmp234, tmp3);
            r10000_10ffff_tmp236 = simd_or(r10000_10ffff_tmp233, r10000_10ffff_tmp235);
            r10000_10ffff_tmp237 = simd_andc(byte_range_b0_bf, r10000_10ffff_tmp193);
            cc_range_112c0_112f0_4 = simd_or(r10000_10ffff_tmp236, r10000_10ffff_tmp237);
            carryQ.cq[253] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(253), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp238 = simd_and(sequence_f0_91_8b_adv, cc_range_112c0_112f0_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp238);
            sequence_f0_91_8c = simd_and(sequence_f0_91_adv, byte_8c);
            r10000_10ffff_tmp239 = simd_xor(basis_bits.bit_4, r10000_10ffff_tmp65);
            r10000_10ffff_tmp240 = simd_or(r10000_10ffff_tmp225, r10000_10ffff_tmp239);
            r10000_10ffff_tmp241 = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp240);
            r10000_10ffff_tmp242 = simd_not(r10000_10ffff_tmp3);
            r10000_10ffff_tmp243 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp242), simd_andc(tmp4, basis_bits.bit_3));
            r10000_10ffff_tmp244 = simd_and(byte_range_80_9f, r10000_10ffff_tmp243);
            r10000_10ffff_tmp245 = simd_or(r10000_10ffff_tmp241, r10000_10ffff_tmp244);
            r10000_10ffff_tmp246 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp188), simd_andc(r10000_10ffff_tmp171, basis_bits.bit_2));
            r10000_10ffff_tmp247 = simd_and(byte_range_80_bf, r10000_10ffff_tmp246);
            r10000_10ffff_tmp248 = simd_or(r10000_10ffff_tmp245, r10000_10ffff_tmp247);
            r10000_10ffff_tmp249 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp242), simd_andc(r10000_10ffff_tmp193, basis_bits.bit_3));
            r10000_10ffff_tmp250 = simd_and(r10000_10ffff_tmp82, r10000_10ffff_tmp249);
            r10000_10ffff_tmp251 = simd_or(r10000_10ffff_tmp248, r10000_10ffff_tmp250);
            r10000_10ffff_tmp252 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp225);
            r10000_10ffff_tmp253 = simd_or(r10000_10ffff_tmp251, r10000_10ffff_tmp252);
            r10000_10ffff_tmp254 = simd_not(r10000_10ffff_tmp192);
            r10000_10ffff_tmp255 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp254), simd_andc(r10000_10ffff_tmp65, basis_bits.bit_4));
            r10000_10ffff_tmp256 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp255);
            r10000_10ffff_tmp257 = simd_or(r10000_10ffff_tmp253, r10000_10ffff_tmp256);
            r10000_10ffff_tmp258 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp96);
            r10000_10ffff_tmp259 = simd_or(r10000_10ffff_tmp257, r10000_10ffff_tmp258);
            r10000_10ffff_tmp260 = simd_and(byte_range_b0_bf, tmp4);
            cc_range_11302_1133f_4 = simd_or(r10000_10ffff_tmp259, r10000_10ffff_tmp260);
            carryQ.cq[254] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(254), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp261 = simd_and(sequence_f0_91_8c_adv, cc_range_11302_1133f_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp261);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            r10000_10ffff_tmp262 = simd_xor(basis_bits.bit_5, r10000_10ffff_tmp2);
            r10000_10ffff_tmp263 = simd_and(byte_range_80_87, r10000_10ffff_tmp262);
            r10000_10ffff_tmp264 = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp176);
            r10000_10ffff_tmp265 = simd_or(r10000_10ffff_tmp263, r10000_10ffff_tmp264);
            r10000_10ffff_tmp266 = simd_and(r10000_10ffff_tmp45, basis_bits.bit_4);
            r10000_10ffff_tmp267 = simd_not(basis_bits.bit_6);
            r10000_10ffff_tmp268 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp267), simd_andc(tmp3, basis_bits.bit_5));
            r10000_10ffff_tmp269 = simd_and(r10000_10ffff_tmp266, r10000_10ffff_tmp268);
            r10000_10ffff_tmp270 = simd_or(r10000_10ffff_tmp265, r10000_10ffff_tmp269);
            r10000_10ffff_tmp271 = simd_not(r10000_10ffff_tmp92);
            r10000_10ffff_tmp272 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp271), simd_andc(r10000_10ffff_tmp74, basis_bits.bit_2));
            r10000_10ffff_tmp273 = simd_and(byte_range_80_bf, r10000_10ffff_tmp272);
            cc_range_11341_1135d_4 = simd_or(r10000_10ffff_tmp270, r10000_10ffff_tmp273);
            carryQ.cq[255] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(255), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp274 = simd_and(sequence_f0_91_8d_adv, cc_range_11341_1135d_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp274);
            sequence_f0_91_92 = simd_and(sequence_f0_91_adv, byte_92);
            r10000_10ffff_tmp275 = simd_andc(byte_range_80_bf, tmp1);
            r10000_10ffff_tmp276 = simd_andc(byte_range_b0_bf, r10000_10ffff_tmp1);
            r10000_10ffff_tmp277 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp278 = simd_and(r10000_10ffff_tmp276, r10000_10ffff_tmp277);
            r10000_10ffff_tmp279 = simd_or(r10000_10ffff_tmp275, r10000_10ffff_tmp278);
            r10000_10ffff_tmp280 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp139);
            r10000_10ffff_tmp281 = simd_or(r10000_10ffff_tmp279, r10000_10ffff_tmp280);
            r10000_10ffff_tmp282 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
            r10000_10ffff_tmp283 = simd_and(r10000_10ffff_tmp282, r10000_10ffff_tmp181);
            r10000_10ffff_tmp284 = simd_or(r10000_10ffff_tmp281, r10000_10ffff_tmp283);
            r10000_10ffff_tmp285 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp104);
            cc_range_11480_114be_4 = simd_or(r10000_10ffff_tmp284, r10000_10ffff_tmp285);
            carryQ.cq[256] = carryout2carry(pablo_blk_Advance(sequence_f0_91_92, carryQ.get_carry_in(256), sequence_f0_91_92_adv));
            r10000_10ffff_tmp286 = simd_and(sequence_f0_91_92_adv, cc_range_11480_114be_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp286);
            byte_93 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp46);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            r10000_10ffff_tmp287 = simd_or(r10000_10ffff_tmp35, r10000_10ffff_tmp50);
            r10000_10ffff_tmp288 = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp287);
            r10000_10ffff_tmp289 = simd_andc(r10000_10ffff_tmp44, r10000_10ffff_tmp193);
            cc_range_114c1_114d0_4 = simd_or(r10000_10ffff_tmp288, r10000_10ffff_tmp289);
            carryQ.cq[257] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(257), sequence_f0_91_93_adv));
            r10000_10ffff_tmp290 = simd_and(sequence_f0_91_93_adv, cc_range_114c1_114d0_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp290);
            byte_96 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp64);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            r10000_10ffff_tmp291 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp220);
            r10000_10ffff_tmp292 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp291);
            r10000_10ffff_tmp293 = simd_andc(byte_range_b0_bf, r10000_10ffff_tmp116);
            r10000_10ffff_tmp294 = simd_or(r10000_10ffff_tmp292, r10000_10ffff_tmp293);
            r10000_10ffff_tmp295 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp78);
            r10000_10ffff_tmp296 = simd_or(r10000_10ffff_tmp294, r10000_10ffff_tmp295);
            cc_range_11580_115be_4 = simd_or(r10000_10ffff_tmp296, r10000_10ffff_tmp285);
            carryQ.cq[258] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(258), sequence_f0_91_96_adv));
            r10000_10ffff_tmp297 = simd_and(sequence_f0_91_96_adv, cc_range_11580_115be_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp297);
            byte_97 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp73);
            sequence_f0_91_97 = simd_and(sequence_f0_91_adv, byte_97);
            r10000_10ffff_tmp298 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp254), simd_andc(r10000_10ffff_tmp152, basis_bits.bit_4));
            byte_range_81_89 = simd_and(r10000_10ffff_tmp45, r10000_10ffff_tmp298);
            carryQ.cq[259] = carryout2carry(pablo_blk_Advance(sequence_f0_91_97, carryQ.get_carry_in(259), sequence_f0_91_97_adv));
            r10000_10ffff_tmp299 = simd_and(sequence_f0_91_97_adv, byte_range_81_89);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp299);
            sequence_f0_91_98 = simd_and(sequence_f0_91_adv, byte_98);
            r10000_10ffff_tmp300 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp171);
            r10000_10ffff_tmp301 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp300);
            r10000_10ffff_tmp302 = simd_or(r10000_10ffff_tmp301, r10000_10ffff_tmp283);
            cc_range_11600_1163e_4 = simd_or(r10000_10ffff_tmp302, r10000_10ffff_tmp285);
            carryQ.cq[260] = carryout2carry(pablo_blk_Advance(sequence_f0_91_98, carryQ.get_carry_in(260), sequence_f0_91_98_adv));
            r10000_10ffff_tmp303 = simd_and(sequence_f0_91_98_adv, cc_range_11600_1163e_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp303);
            byte_99 = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp139);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            cc_range_11641_11650_4 = simd_or(r10000_10ffff_tmp263, r10000_10ffff_tmp289);
            carryQ.cq[261] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(261), sequence_f0_91_99_adv));
            r10000_10ffff_tmp304 = simd_and(sequence_f0_91_99_adv, cc_range_11641_11650_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp304);
            byte_9a = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp79);
            sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
            r10000_10ffff_tmp305 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp23);
            r10000_10ffff_tmp306 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp305);
            r10000_10ffff_tmp307 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp306);
            r10000_10ffff_tmp308 = simd_or(r10000_10ffff_tmp307, byte_ac);
            r10000_10ffff_tmp309 = simd_and(r10000_10ffff_tmp70, r10000_10ffff_tmp105);
            r10000_10ffff_tmp310 = simd_or(r10000_10ffff_tmp308, r10000_10ffff_tmp309);
            r10000_10ffff_tmp311 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp64);
            cc_range_11680_116b6_4 = simd_or(r10000_10ffff_tmp310, r10000_10ffff_tmp311);
            carryQ.cq[262] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(262), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp312 = simd_and(sequence_f0_91_9a_adv, cc_range_11680_116b6_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp312);
            byte_9b = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp84);
            sequence_f0_91_9b = simd_and(sequence_f0_91_adv, byte_9b);
            byte_range_80_89 = simd_andc(r10000_10ffff_tmp45, r10000_10ffff_tmp193);
            carryQ.cq[263] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9b, carryQ.get_carry_in(263), sequence_f0_91_9b_adv));
            r10000_10ffff_tmp313 = simd_and(sequence_f0_91_9b_adv, byte_range_80_89);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp313);
            sequence_f0_91_a2 = simd_and(sequence_f0_91_adv, byte_a2);
            byte_range_a0_bf = r10000_10ffff_tmp82;
            carryQ.cq[264] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(264), sequence_f0_91_a2_adv));
            r10000_10ffff_tmp314 = simd_and(sequence_f0_91_a2_adv, byte_range_a0_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp314);
            byte_a3 = simd_and(r10000_10ffff_tmp70, r10000_10ffff_tmp46);
            sequence_f0_91_a3 = simd_and(sequence_f0_91_adv, byte_a3);
            cc_range_118c0_118ff_4 = simd_or(r10000_10ffff_tmp301, r10000_10ffff_tmp260);
            carryQ.cq[265] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(265), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp315 = simd_and(sequence_f0_91_a3_adv, cc_range_118c0_118ff_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp315);
            sequence_f0_91_ab = simd_and(sequence_f0_91_adv, byte_ab);
            r10000_10ffff_tmp316 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp153);
            r10000_10ffff_tmp317 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp316);
            byte_range_80_b8 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp317);
            carryQ.cq[266] = carryout2carry(pablo_blk_Advance(sequence_f0_91_ab, carryQ.get_carry_in(266), sequence_f0_91_ab_adv));
            r10000_10ffff_tmp318 = simd_and(sequence_f0_91_ab_adv, byte_range_80_b8);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp318);
            sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
            byte_range_80_8d = simd_andc(r10000_10ffff_tmp45, r10000_10ffff_tmp37);
            carryQ.cq[267] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(267), r10000_10ffff_tmp319));
            sequence_f0_92_byte_range_80_8d = simd_and(r10000_10ffff_tmp319, byte_range_80_8d);
            carryQ.cq[268] = carryout2carry(pablo_blk_Advance(sequence_f0_92_byte_range_80_8d, carryQ.get_carry_in(268), r10000_10ffff_tmp320));
            sequence_f0_92_byte_range_80_8d_sfx = simd_and(r10000_10ffff_tmp320, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_92_byte_range_80_8d_sfx);
            sequence_f0_92_adv = r10000_10ffff_tmp319;
            sequence_f0_92_8e = simd_and(sequence_f0_92_adv, byte_8e);
            byte_range_80_98 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp316);
            carryQ.cq[269] = carryout2carry(pablo_blk_Advance(sequence_f0_92_8e, carryQ.get_carry_in(269), r10000_10ffff_tmp321));
            sequence_f0_92_8e_byte_range_80_98 = simd_and(r10000_10ffff_tmp321, byte_range_80_98);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_92_8e_byte_range_80_98);
            sequence_f0_92_90 = simd_and(sequence_f0_92_adv, byte_90);
            carryQ.cq[270] = carryout2carry(pablo_blk_Advance(sequence_f0_92_90, carryQ.get_carry_in(270), r10000_10ffff_tmp322));
            sequence_f0_92_90_byte_range_80_bf = simd_and(r10000_10ffff_tmp322, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_92_90_byte_range_80_bf);
            sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
            byte_range_80_ae = r10000_10ffff_tmp292;
            carryQ.cq[271] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(271), r10000_10ffff_tmp323));
            sequence_f0_92_91_byte_range_80_ae = simd_and(r10000_10ffff_tmp323, byte_range_80_ae);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_92_91_byte_range_80_ae);
            sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
            byte_range_80_8f = r10000_10ffff_tmp45;
            carryQ.cq[272] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(272), r10000_10ffff_tmp324));
            sequence_f0_93_byte_range_80_8f = simd_and(r10000_10ffff_tmp324, byte_range_80_8f);
            carryQ.cq[273] = carryout2carry(pablo_blk_Advance(sequence_f0_93_byte_range_80_8f, carryQ.get_carry_in(273), r10000_10ffff_tmp325));
            sequence_f0_93_byte_range_80_8f_sfx = simd_and(r10000_10ffff_tmp325, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_93_byte_range_80_8f_sfx);
            sequence_f0_93_adv = r10000_10ffff_tmp324;
            sequence_f0_93_90 = simd_and(sequence_f0_93_adv, byte_90);
            carryQ.cq[274] = carryout2carry(pablo_blk_Advance(sequence_f0_93_90, carryQ.get_carry_in(274), r10000_10ffff_tmp326));
            sequence_f0_93_90_byte_range_80_ae = simd_and(r10000_10ffff_tmp326, byte_range_80_ae);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_93_90_byte_range_80_ae);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            byte_range_a0_a7 = simd_andc(r10000_10ffff_tmp70, basis_bits.bit_4);
            carryQ.cq[275] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(275), r10000_10ffff_tmp327));
            sequence_f0_96_byte_range_a0_a7 = simd_and(r10000_10ffff_tmp327, byte_range_a0_a7);
            carryQ.cq[276] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_a0_a7, carryQ.get_carry_in(276), r10000_10ffff_tmp328));
            sequence_f0_96_byte_range_a0_a7_sfx = simd_and(r10000_10ffff_tmp328, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_96_byte_range_a0_a7_sfx);
            sequence_f0_96_adv = r10000_10ffff_tmp327;
            sequence_f0_96_a8 = simd_and(sequence_f0_96_adv, byte_a8);
            carryQ.cq[277] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a8, carryQ.get_carry_in(277), r10000_10ffff_tmp329));
            sequence_f0_96_a8_byte_range_80_b8 = simd_and(r10000_10ffff_tmp329, byte_range_80_b8);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_96_a8_byte_range_80_b8);
            sequence_f0_96_a9 = simd_and(sequence_f0_96_adv, byte_a9);
            carryQ.cq[278] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a9, carryQ.get_carry_in(278), r10000_10ffff_tmp330));
            sequence_f0_96_a9_byte_range_80_9e = simd_and(r10000_10ffff_tmp330, byte_range_80_9e);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_96_a9_byte_range_80_9e);
            sequence_f0_96_ab = simd_and(sequence_f0_96_adv, byte_ab);
            r10000_10ffff_tmp331 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp105);
            r10000_10ffff_tmp332 = simd_not(r10000_10ffff_tmp331);
            r10000_10ffff_tmp333 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp332), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ad = simd_and(byte_range_80_bf, r10000_10ffff_tmp333);
            carryQ.cq[279] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(279), r10000_10ffff_tmp334));
            sequence_f0_96_ab_byte_range_90_ad = simd_and(r10000_10ffff_tmp334, byte_range_90_ad);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_96_ab_byte_range_90_ad);
            sequence_f0_96_ac = simd_and(sequence_f0_96_adv, byte_ac);
            byte_range_80_af = r10000_10ffff_tmp275;
            carryQ.cq[280] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(280), r10000_10ffff_tmp335));
            sequence_f0_96_ac_byte_range_80_af = simd_and(r10000_10ffff_tmp335, byte_range_80_af);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_96_ac_byte_range_80_af);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            r10000_10ffff_tmp336 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
            carryQ.cq[281] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(281), r10000_10ffff_tmp337));
            sequence_f0_96_ad_byte_range_80_85 = simd_and(r10000_10ffff_tmp337, byte_range_80_85);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_96_ad_byte_range_80_85);
            sequence_f0_96_ae = simd_and(sequence_f0_96_adv, byte_ae);
            carryQ.cq[282] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ae, carryQ.get_carry_in(282), r10000_10ffff_tmp338));
            sequence_f0_96_ae_byte_range_80_8f = simd_and(r10000_10ffff_tmp338, byte_range_80_8f);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_96_ae_byte_range_80_8f);
            byte_bc = simd_and(byte_range_b0_bf, r10000_10ffff_tmp91);
            sequence_f0_96_bc = simd_and(sequence_f0_96_adv, byte_bc);
            carryQ.cq[283] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bc, carryQ.get_carry_in(283), r10000_10ffff_tmp339));
            sequence_f0_96_bc_byte_range_80_bf = simd_and(r10000_10ffff_tmp339, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_96_bc_byte_range_80_bf);
            byte_bd = r10000_10ffff_tmp258;
            sequence_f0_96_bd = simd_and(sequence_f0_96_adv, byte_bd);
            byte_range_80_84 = simd_andc(r10000_10ffff_tmp336, r10000_10ffff_tmp65);
            carryQ.cq[284] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bd, carryQ.get_carry_in(284), r10000_10ffff_tmp340));
            sequence_f0_96_bd_byte_range_80_84 = simd_and(r10000_10ffff_tmp340, byte_range_80_84);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_96_bd_byte_range_80_84);
            byte_be = r10000_10ffff_tmp285;
            sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
            r10000_10ffff_tmp341 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp22);
            byte_range_93_9f = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp341);
            carryQ.cq[285] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(285), r10000_10ffff_tmp342));
            sequence_f0_96_be_byte_range_93_9f = simd_and(r10000_10ffff_tmp342, byte_range_93_9f);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_96_be_byte_range_93_9f);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            carryQ.cq[286] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(286), r10000_10ffff_tmp343));
            sequence_f0_9b_80 = simd_and(r10000_10ffff_tmp343, byte_80);
            sequence_f0_9b_adv = r10000_10ffff_tmp343;
            byte_range_80_81 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp116);
            carryQ.cq[287] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_80, carryQ.get_carry_in(287), sequence_f0_9b_80_adv));
            r10000_10ffff_tmp344 = simd_and(sequence_f0_9b_80_adv, byte_range_80_81);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp344);
            sequence_f0_9b_b0 = simd_and(sequence_f0_9b_adv, byte_b0);
            carryQ.cq[288] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b0, carryQ.get_carry_in(288), sequence_f0_9b_b0_adv));
            r10000_10ffff_tmp345 = simd_and(sequence_f0_9b_b0_adv, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp345);
            sequence_f0_9b_b1 = simd_and(sequence_f0_9b_adv, byte_b1);
            r10000_10ffff_tmp346 = simd_andc(byte_range_b0_bf, r10000_10ffff_tmp66);
            cc_range_1bc40_1bc70_4 = simd_or(r10000_10ffff_tmp307, r10000_10ffff_tmp346);
            carryQ.cq[289] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b1, carryQ.get_carry_in(289), sequence_f0_9b_b1_adv));
            r10000_10ffff_tmp347 = simd_and(sequence_f0_9b_b1_adv, cc_range_1bc40_1bc70_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp347);
            byte_b2 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp42);
            sequence_f0_9b_b2 = simd_and(sequence_f0_9b_adv, byte_b2);
            r10000_10ffff_tmp348 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp153);
            r10000_10ffff_tmp349 = simd_or(r10000_10ffff_tmp348, r10000_10ffff_tmp289);
            r10000_10ffff_tmp350 = simd_or(r10000_10ffff_tmp349, byte_9c);
            r10000_10ffff_tmp351 = simd_and(r10000_10ffff_tmp44, tmp4);
            cc_range_1bc80_1bc9f_4 = simd_or(r10000_10ffff_tmp350, r10000_10ffff_tmp351);
            carryQ.cq[290] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(290), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp352 = simd_and(sequence_f0_9b_b2_adv, cc_range_1bc80_1bc9f_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp352);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            r10000_10ffff_tmp353 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp1);
            byte_range_80_82 = simd_andc(r10000_10ffff_tmp353, tmp3);
            carryQ.cq[291] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(291), r10000_10ffff_tmp354));
            sequence_f0_9d_byte_range_80_82 = simd_and(r10000_10ffff_tmp354, byte_range_80_82);
            carryQ.cq[292] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_80_82, carryQ.get_carry_in(292), r10000_10ffff_tmp355));
            sequence_f0_9d_byte_range_80_82_sfx = simd_and(r10000_10ffff_tmp355, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_byte_range_80_82_sfx);
            sequence_f0_9d_adv = r10000_10ffff_tmp354;
            sequence_f0_9d_83 = simd_and(sequence_f0_9d_adv, byte_83);
            carryQ.cq[293] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_83, carryQ.get_carry_in(293), r10000_10ffff_tmp356));
            sequence_f0_9d_83_byte_range_80_b5 = simd_and(r10000_10ffff_tmp356, byte_range_80_b5);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_83_byte_range_80_b5);
            sequence_f0_9d_84 = simd_and(sequence_f0_9d_adv, byte_84);
            r10000_10ffff_tmp357 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp14);
            byte_range_80_a6 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp357);
            carryQ.cq[294] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_84, carryQ.get_carry_in(294), r10000_10ffff_tmp358));
            sequence_f0_9d_84_byte_range_80_a6 = simd_and(r10000_10ffff_tmp358, byte_range_80_a6);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_84_byte_range_80_a6);
            sequence_f0_9d_85 = simd_and(sequence_f0_9d_adv, byte_85);
            carryQ.cq[295] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(295), r10000_10ffff_tmp359));
            sequence_f0_9d_85_byte_range_80_a4 = simd_and(r10000_10ffff_tmp359, byte_range_80_a4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_85_byte_range_80_a4);
            sequence_f0_9d_86 = simd_and(sequence_f0_9d_adv, byte_86);
            byte_range_83_84 = simd_and(r10000_10ffff_tmp336, r10000_10ffff_tmp181);
            carryQ.cq[296] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_86, carryQ.get_carry_in(296), r10000_10ffff_tmp360));
            sequence_f0_9d_86_byte_range_83_84 = simd_and(r10000_10ffff_tmp360, byte_range_83_84);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_86_byte_range_83_84);
            sequence_f0_9d_87 = simd_and(sequence_f0_9d_adv, byte_87);
            carryQ.cq[297] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_87, carryQ.get_carry_in(297), r10000_10ffff_tmp361));
            sequence_f0_9d_87_byte_range_80_9d = simd_and(r10000_10ffff_tmp361, byte_range_80_9d);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_87_byte_range_80_9d);
            sequence_f0_9d_88 = simd_and(sequence_f0_9d_adv, byte_88);
            carryQ.cq[298] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_88, carryQ.get_carry_in(298), r10000_10ffff_tmp362));
            sequence_f0_9d_88_byte_range_80_bf = simd_and(r10000_10ffff_tmp362, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_88_byte_range_80_bf);
            byte_89 = simd_and(byte_range_80_8f, r10000_10ffff_tmp139);
            sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
            carryQ.cq[299] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_89, carryQ.get_carry_in(299), r10000_10ffff_tmp363));
            sequence_f0_9d_89_byte_range_80_81 = simd_and(r10000_10ffff_tmp363, byte_range_80_81);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_89_byte_range_80_81);
            sequence_f0_9d_8c = simd_and(sequence_f0_9d_adv, byte_8c);
            carryQ.cq[300] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8c, carryQ.get_carry_in(300), r10000_10ffff_tmp364));
            sequence_f0_9d_8c_byte_range_80_bf = simd_and(r10000_10ffff_tmp364, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_8c_byte_range_80_bf);
            sequence_f0_9d_8d = simd_and(sequence_f0_9d_adv, byte_8d);
            byte_range_80_96 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp125);
            carryQ.cq[301] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8d, carryQ.get_carry_in(301), r10000_10ffff_tmp365));
            sequence_f0_9d_8d_byte_range_80_96 = simd_and(r10000_10ffff_tmp365, byte_range_80_96);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_8d_byte_range_80_96);
            sequence_f0_9d_90 = simd_and(sequence_f0_9d_adv, byte_90);
            carryQ.cq[302] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(302), r10000_10ffff_tmp366));
            sequence_f0_9d_90_byte_range_80_bf = simd_and(r10000_10ffff_tmp366, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_90_byte_range_80_bf);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            r10000_10ffff_tmp367 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp142);
            byte_range_80_94 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp367);
            carryQ.cq[303] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(303), r10000_10ffff_tmp368));
            sequence_f0_9d_91_byte_range_80_94 = simd_and(r10000_10ffff_tmp368, byte_range_80_94);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_91_byte_range_80_94);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            byte_range_80_9c = simd_andc(byte_range_80_9f, r10000_10ffff_tmp74);
            carryQ.cq[304] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(304), r10000_10ffff_tmp369));
            sequence_f0_9d_92_byte_range_80_9c = simd_and(r10000_10ffff_tmp369, byte_range_80_9c);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_92_byte_range_80_9c);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            byte_range_80_83 = r10000_10ffff_tmp353;
            carryQ.cq[305] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(305), r10000_10ffff_tmp370));
            sequence_f0_9d_93_byte_range_80_83 = simd_and(r10000_10ffff_tmp370, byte_range_80_83);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_93_byte_range_80_83);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            carryQ.cq[306] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(306), r10000_10ffff_tmp371));
            sequence_f0_9d_94_byte_range_80_85 = simd_and(r10000_10ffff_tmp371, byte_range_80_85);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_94_byte_range_80_85);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            carryQ.cq[307] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(307), r10000_10ffff_tmp372));
            sequence_f0_9d_95_byte_range_80_84 = simd_and(r10000_10ffff_tmp372, byte_range_80_84);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_95_byte_range_80_84);
            sequence_f0_9d_96 = simd_and(sequence_f0_9d_adv, byte_96);
            carryQ.cq[308] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_96, carryQ.get_carry_in(308), r10000_10ffff_tmp373));
            sequence_f0_9d_96_byte_range_80_bf = simd_and(r10000_10ffff_tmp373, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_96_byte_range_80_bf);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            r10000_10ffff_tmp374 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp98);
            r10000_10ffff_tmp375 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp374);
            byte_range_80_a5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp375);
            carryQ.cq[309] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(309), r10000_10ffff_tmp376));
            sequence_f0_9d_9a_byte_range_80_a5 = simd_and(r10000_10ffff_tmp376, byte_range_80_a5);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_9a_byte_range_80_a5);
            sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
            carryQ.cq[310] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(310), r10000_10ffff_tmp377));
            sequence_f0_9d_9b_byte_range_80_bf = simd_and(r10000_10ffff_tmp377, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_9b_byte_range_80_bf);
            byte_9f = r10000_10ffff_tmp351;
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            byte_range_80_8b = simd_andc(byte_range_80_8f, tmp2);
            carryQ.cq[311] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(311), r10000_10ffff_tmp378));
            sequence_f0_9d_9f_byte_range_80_8b = simd_and(r10000_10ffff_tmp378, byte_range_80_8b);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9d_9f_byte_range_80_8b);
            byte_9e = simd_and(r10000_10ffff_tmp44, r10000_10ffff_tmp104);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            byte_range_a0_a2 = r10000_10ffff_tmp235;
            carryQ.cq[312] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(312), r10000_10ffff_tmp379));
            sequence_f0_9e_byte_range_a0_a2 = simd_and(r10000_10ffff_tmp379, byte_range_a0_a2);
            carryQ.cq[313] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_a0_a2, carryQ.get_carry_in(313), r10000_10ffff_tmp380));
            sequence_f0_9e_byte_range_a0_a2_sfx = simd_and(r10000_10ffff_tmp380, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9e_byte_range_a0_a2_sfx);
            sequence_f0_9e_adv = r10000_10ffff_tmp379;
            sequence_f0_9e_a3 = simd_and(sequence_f0_9e_adv, byte_a3);
            carryQ.cq[314] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(314), r10000_10ffff_tmp381));
            sequence_f0_9e_a3_byte_range_80_84 = simd_and(r10000_10ffff_tmp381, byte_range_80_84);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9e_a3_byte_range_80_84);
            byte_b8 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp123);
            sequence_f0_9e_b8 = simd_and(sequence_f0_9e_adv, byte_b8);
            carryQ.cq[315] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b8, carryQ.get_carry_in(315), r10000_10ffff_tmp382));
            sequence_f0_9e_b8_byte_range_80_83 = simd_and(r10000_10ffff_tmp382, byte_range_80_83);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9e_b8_byte_range_80_83);
            sequence_f0_9e_b9 = simd_and(sequence_f0_9e_adv, byte_b9);
            carryQ.cq[316] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b9, carryQ.get_carry_in(316), r10000_10ffff_tmp383));
            sequence_f0_9e_b9_82 = simd_and(r10000_10ffff_tmp383, byte_82);
            byte_ba = simd_and(byte_range_b0_bf, r10000_10ffff_tmp79);
            sequence_f0_9e_ba = simd_and(sequence_f0_9e_adv, byte_ba);
            carryQ.cq[317] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_ba, carryQ.get_carry_in(317), r10000_10ffff_tmp384));
            sequence_f0_9e_ba_byte_range_80_89 = simd_and(r10000_10ffff_tmp384, byte_range_80_89);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9e_ba_byte_range_80_89);
            byte_bb = simd_and(byte_range_b0_bf, r10000_10ffff_tmp84);
            sequence_f0_9e_bb = simd_and(sequence_f0_9e_adv, byte_bb);
            byte_range_b0_b1 = r10000_10ffff_tmp293;
            carryQ.cq[318] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_bb, carryQ.get_carry_in(318), r10000_10ffff_tmp385));
            sequence_f0_9e_bb_byte_range_b0_b1 = simd_and(r10000_10ffff_tmp385, byte_range_b0_b1);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9e_bb_byte_range_b0_b1);
            sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
            carryQ.cq[319] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(319), r10000_10ffff_tmp386));
            sequence_f0_9f_80 = simd_and(r10000_10ffff_tmp386, byte_80);
            sequence_f0_9f_adv = r10000_10ffff_tmp386;
            r10000_10ffff_tmp387 = simd_or(basis_bits.bit_3, tmp2);
            r10000_10ffff_tmp388 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp387);
            r10000_10ffff_tmp389 = simd_andc(r10000_10ffff_tmp388, tmp1);
            cc_range_1f000_1f030_4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp389);
            carryQ.cq[320] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_80, carryQ.get_carry_in(320), sequence_f0_9f_80_adv));
            r10000_10ffff_tmp390 = simd_and(sequence_f0_9f_80_adv, cc_range_1f000_1f030_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp390);
            sequence_f0_9f_81 = simd_and(sequence_f0_9f_adv, byte_81);
            carryQ.cq[321] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_81, carryQ.get_carry_in(321), sequence_f0_9f_81_adv));
            r10000_10ffff_tmp391 = simd_and(sequence_f0_9f_81_adv, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp391);
            sequence_f0_9f_82 = simd_and(sequence_f0_9f_adv, byte_82);
            r10000_10ffff_tmp392 = simd_andc(byte_range_80_9f, r10000_10ffff_tmp54);
            r10000_10ffff_tmp393 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp12);
            r10000_10ffff_tmp394 = simd_andc(r10000_10ffff_tmp70, r10000_10ffff_tmp393);
            r10000_10ffff_tmp395 = simd_or(r10000_10ffff_tmp392, r10000_10ffff_tmp394);
            r10000_10ffff_tmp396 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp152);
            r10000_10ffff_tmp397 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp396);
            cc_range_1f080_1f0b1_4 = simd_or(r10000_10ffff_tmp395, r10000_10ffff_tmp397);
            carryQ.cq[322] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_82, carryQ.get_carry_in(322), sequence_f0_9f_82_adv));
            r10000_10ffff_tmp398 = simd_and(sequence_f0_9f_82_adv, cc_range_1f080_1f0b1_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp398);
            sequence_f0_9f_83 = simd_and(sequence_f0_9f_adv, byte_83);
            r10000_10ffff_tmp399 = simd_and(byte_range_80_8f, r10000_10ffff_tmp396);
            r10000_10ffff_tmp400 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp100), simd_andc(r10000_10ffff_tmp85, basis_bits.bit_2));
            r10000_10ffff_tmp401 = simd_and(byte_range_80_bf, r10000_10ffff_tmp400);
            cc_range_1f0c1_1f0d1_4 = simd_or(r10000_10ffff_tmp399, r10000_10ffff_tmp401);
            carryQ.cq[323] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_83, carryQ.get_carry_in(323), sequence_f0_9f_83_adv));
            r10000_10ffff_tmp402 = simd_and(sequence_f0_9f_83_adv, cc_range_1f0c1_1f0d1_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp402);
            sequence_f0_9f_84 = simd_and(sequence_f0_9f_adv, byte_84);
            r10000_10ffff_tmp403 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp66);
            r10000_10ffff_tmp404 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp221), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp405 = simd_and(byte_range_80_bf, r10000_10ffff_tmp404);
            r10000_10ffff_tmp406 = simd_or(r10000_10ffff_tmp403, r10000_10ffff_tmp405);
            cc_range_1f100_1f130_4 = simd_or(r10000_10ffff_tmp406, byte_range_b0_bf);
            carryQ.cq[324] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_84, carryQ.get_carry_in(324), sequence_f0_9f_84_adv));
            r10000_10ffff_tmp407 = simd_and(sequence_f0_9f_84_adv, cc_range_1f100_1f130_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp407);
            sequence_f0_9f_85 = simd_and(sequence_f0_9f_adv, byte_85);
            cc_range_1f140_1f170_4 = cc_range_1f000_1f030_4;
            carryQ.cq[325] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_85, carryQ.get_carry_in(325), sequence_f0_9f_85_adv));
            r10000_10ffff_tmp408 = simd_and(sequence_f0_9f_85_adv, cc_range_1f140_1f170_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp408);
            sequence_f0_9f_86 = simd_and(sequence_f0_9f_adv, byte_86);
            byte_range_80_9a = simd_andc(byte_range_80_9f, r10000_10ffff_tmp47);
            carryQ.cq[326] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_86, carryQ.get_carry_in(326), sequence_f0_9f_86_adv));
            r10000_10ffff_tmp409 = simd_and(sequence_f0_9f_86_adv, byte_range_80_9a);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp409);
            sequence_f0_9f_87 = simd_and(sequence_f0_9f_adv, byte_87);
            byte_range_a6_bf = simd_and(byte_range_a0_bf, r10000_10ffff_tmp374);
            carryQ.cq[327] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_87, carryQ.get_carry_in(327), sequence_f0_9f_87_adv));
            r10000_10ffff_tmp410 = simd_and(sequence_f0_9f_87_adv, byte_range_a6_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp410);
            sequence_f0_9f_88 = simd_and(sequence_f0_9f_adv, byte_88);
            r10000_10ffff_tmp411 = simd_andc(byte_range_80_83, tmp3);
            r10000_10ffff_tmp412 = simd_not(r10000_10ffff_tmp47);
            r10000_10ffff_tmp413 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp412), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp414 = simd_and(byte_range_80_bf, r10000_10ffff_tmp413);
            cc_range_1f200_1f210_4 = simd_or(r10000_10ffff_tmp411, r10000_10ffff_tmp414);
            carryQ.cq[328] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_88, carryQ.get_carry_in(328), sequence_f0_9f_88_adv));
            r10000_10ffff_tmp415 = simd_and(sequence_f0_9f_88_adv, cc_range_1f200_1f210_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp415);
            sequence_f0_9f_89 = simd_and(sequence_f0_9f_adv, byte_89);
            cc_range_1f240_1f250_4 = simd_or(r10000_10ffff_tmp348, byte_range_90_91);
            carryQ.cq[329] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_89, carryQ.get_carry_in(329), sequence_f0_9f_89_adv));
            r10000_10ffff_tmp416 = simd_and(sequence_f0_9f_89_adv, cc_range_1f240_1f250_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp416);
            sequence_f0_9f_8c = simd_and(sequence_f0_9f_adv, byte_8c);
            r10000_10ffff_tmp417 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp17);
            r10000_10ffff_tmp418 = simd_andc(r10000_10ffff_tmp417, tmp1);
            cc_range_1f300_1f330_4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp418);
            carryQ.cq[330] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8c, carryQ.get_carry_in(330), sequence_f0_9f_8c_adv));
            r10000_10ffff_tmp419 = simd_and(sequence_f0_9f_8c_adv, cc_range_1f300_1f330_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp419);
            sequence_f0_9f_8d = simd_and(sequence_f0_9f_adv, byte_8d);
            r10000_10ffff_tmp420 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp106);
            byte_range_80_bd = simd_andc(byte_range_80_bf, r10000_10ffff_tmp420);
            carryQ.cq[331] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8d, carryQ.get_carry_in(331), sequence_f0_9f_8d_adv));
            r10000_10ffff_tmp421 = simd_and(sequence_f0_9f_8d_adv, byte_range_80_bd);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp421);
            sequence_f0_9f_8e = simd_and(sequence_f0_9f_adv, byte_8e);
            carryQ.cq[332] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8e, carryQ.get_carry_in(332), sequence_f0_9f_8e_adv));
            r10000_10ffff_tmp422 = simd_and(sequence_f0_9f_8e_adv, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp422);
            sequence_f0_9f_8f = simd_and(sequence_f0_9f_adv, byte_8f);
            r10000_10ffff_tmp423 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp393);
            r10000_10ffff_tmp424 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp158), simd_andc(r10000_10ffff_tmp54, basis_bits.bit_2));
            r10000_10ffff_tmp425 = simd_and(byte_range_80_bf, r10000_10ffff_tmp424);
            cc_range_1f3c0_1f3d4_4 = simd_or(r10000_10ffff_tmp423, r10000_10ffff_tmp425);
            carryQ.cq[333] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8f, carryQ.get_carry_in(333), sequence_f0_9f_8f_adv));
            r10000_10ffff_tmp426 = simd_and(sequence_f0_9f_8f_adv, cc_range_1f3c0_1f3d4_4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, r10000_10ffff_tmp426);
            r10000_10ffff_tmp427 = simd_andc(r10000_10ffff_tmp44, r10000_10ffff_tmp1);
            byte_range_90_92 = simd_andc(r10000_10ffff_tmp427, tmp3);
            sequence_f0_9f_byte_range_90_92 = simd_and(sequence_f0_9f_adv, byte_range_90_92);
            carryQ.cq[334] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_byte_range_90_92, carryQ.get_carry_in(334), r10000_10ffff_tmp428));
            sequence_f0_9f_byte_range_90_92_sfx = simd_and(r10000_10ffff_tmp428, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9f_byte_range_90_92_sfx);
            sequence_f0_9f_93 = simd_and(sequence_f0_9f_adv, byte_93);
            r10000_10ffff_tmp429 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp108);
            byte_range_80_be = simd_andc(byte_range_80_bf, r10000_10ffff_tmp429);
            carryQ.cq[335] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_93, carryQ.get_carry_in(335), r10000_10ffff_tmp430));
            sequence_f0_9f_93_byte_range_80_be = simd_and(r10000_10ffff_tmp430, byte_range_80_be);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9f_93_byte_range_80_be);
            sequence_f0_9f_94 = simd_and(sequence_f0_9f_adv, byte_94);
            carryQ.cq[336] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_94, carryQ.get_carry_in(336), r10000_10ffff_tmp431));
            sequence_f0_9f_94_byte_range_80_bf = simd_and(r10000_10ffff_tmp431, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9f_94_byte_range_80_bf);
            sequence_f0_9f_95 = simd_and(sequence_f0_9f_adv, byte_95);
            byte_range_80_8a = simd_andc(byte_range_80_8f, r10000_10ffff_tmp23);
            carryQ.cq[337] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_95, carryQ.get_carry_in(337), r10000_10ffff_tmp432));
            sequence_f0_9f_95_byte_range_80_8a = simd_and(r10000_10ffff_tmp432, byte_range_80_8a);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9f_95_byte_range_80_8a);
            sequence_f0_9f_96 = simd_and(sequence_f0_9f_adv, byte_96);
            carryQ.cq[338] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_96, carryQ.get_carry_in(338), r10000_10ffff_tmp433));
            sequence_f0_9f_96_byte_range_80_a3 = simd_and(r10000_10ffff_tmp433, byte_range_80_a3);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9f_96_byte_range_80_a3);
            sequence_f0_9f_97 = simd_and(sequence_f0_9f_adv, byte_97);
            carryQ.cq[339] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_97, carryQ.get_carry_in(339), r10000_10ffff_tmp434));
            sequence_f0_9f_97_byte_range_80_bf = simd_and(r10000_10ffff_tmp434, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9f_97_byte_range_80_bf);
            sequence_f0_9f_99 = simd_and(sequence_f0_9f_adv, byte_99);
            carryQ.cq[340] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_99, carryQ.get_carry_in(340), r10000_10ffff_tmp435));
            sequence_f0_9f_99_byte_range_80_82 = simd_and(r10000_10ffff_tmp435, byte_range_80_82);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9f_99_byte_range_80_82);
            sequence_f0_9f_9a = simd_and(sequence_f0_9f_adv, byte_9a);
            carryQ.cq[341] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9a, carryQ.get_carry_in(341), r10000_10ffff_tmp436));
            sequence_f0_9f_9a_byte_range_80_bf = simd_and(r10000_10ffff_tmp436, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9f_9a_byte_range_80_bf);
            sequence_f0_9f_9b = simd_and(sequence_f0_9f_adv, byte_9b);
            carryQ.cq[342] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9b, carryQ.get_carry_in(342), r10000_10ffff_tmp437));
            sequence_f0_9f_9b_byte_range_80_8f = simd_and(r10000_10ffff_tmp437, byte_range_80_8f);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9f_9b_byte_range_80_8f);
            sequence_f0_9f_9c = simd_and(sequence_f0_9f_adv, byte_9c);
            carryQ.cq[343] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9c, carryQ.get_carry_in(343), r10000_10ffff_tmp438));
            sequence_f0_9f_9c_byte_range_80_bf = simd_and(r10000_10ffff_tmp438, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9f_9c_byte_range_80_bf);
            sequence_f0_9f_9d = simd_and(sequence_f0_9f_adv, byte_9d);
            r10000_10ffff_tmp439 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp54);
            byte_range_80_b3 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp439);
            carryQ.cq[344] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9d, carryQ.get_carry_in(344), r10000_10ffff_tmp440));
            sequence_f0_9f_9d_byte_range_80_b3 = simd_and(r10000_10ffff_tmp440, byte_range_80_b3);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9f_9d_byte_range_80_b3);
            sequence_f0_9f_9e = simd_and(sequence_f0_9f_adv, byte_9e);
            carryQ.cq[345] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9e, carryQ.get_carry_in(345), r10000_10ffff_tmp441));
            sequence_f0_9f_9e_byte_range_80_bf = simd_and(r10000_10ffff_tmp441, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9f_9e_byte_range_80_bf);
            sequence_f0_9f_9f = simd_and(sequence_f0_9f_adv, byte_9f);
            carryQ.cq[346] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9f, carryQ.get_carry_in(346), r10000_10ffff_tmp442));
            sequence_f0_9f_9f_byte_range_80_94 = simd_and(r10000_10ffff_tmp442, byte_range_80_94);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9f_9f_byte_range_80_94);
            sequence_f0_9f_a0 = simd_and(sequence_f0_9f_adv, byte_a0);
            carryQ.cq[347] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a0, carryQ.get_carry_in(347), r10000_10ffff_tmp443));
            sequence_f0_9f_a0_byte_range_80_8b = simd_and(r10000_10ffff_tmp443, byte_range_80_8b);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9f_a0_byte_range_80_8b);
            sequence_f0_9f_a1 = simd_and(sequence_f0_9f_adv, byte_a1);
            carryQ.cq[348] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a1, carryQ.get_carry_in(348), r10000_10ffff_tmp444));
            sequence_f0_9f_a1_byte_range_80_87 = simd_and(r10000_10ffff_tmp444, byte_range_80_87);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9f_a1_byte_range_80_87);
            sequence_f0_9f_a2 = simd_and(sequence_f0_9f_adv, byte_a2);
            carryQ.cq[349] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_a2, carryQ.get_carry_in(349), r10000_10ffff_tmp445));
            sequence_f0_9f_a2_byte_range_80_87 = simd_and(r10000_10ffff_tmp445, byte_range_80_87);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_9f_a2_byte_range_80_87);
            byte_range_a0_a9 = simd_andc(r10000_10ffff_tmp70, r10000_10ffff_tmp193);
            byte_f0_byte_range_a0_a9 = simd_and(byte_f0_adv, byte_range_a0_a9);
            carryQ.cq[350] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9, carryQ.get_carry_in(350), r10000_10ffff_tmp446));
            byte_f0_byte_range_a0_a9_sfx = simd_and(r10000_10ffff_tmp446, byte_range_80_bf);
            carryQ.cq[351] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9_sfx, carryQ.get_carry_in(351), r10000_10ffff_tmp447));
            byte_f0_byte_range_a0_a9_sfx_sfx = simd_and(r10000_10ffff_tmp447, byte_range_80_bf);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, byte_f0_byte_range_a0_a9_sfx_sfx);
            sequence_f0_aa = simd_and(byte_f0_adv, byte_aa);
            carryQ.cq[352] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(352), sequence_f0_aa_adv));
            sequence_f0_aa_80 = simd_and(sequence_f0_aa_adv, byte_80);
            carryQ.cq[353] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_80, carryQ.get_carry_in(353), r10000_10ffff_tmp448));
            sequence_f0_aa_80_byte_range_80_96 = simd_and(r10000_10ffff_tmp448, byte_range_80_96);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_aa_80_byte_range_80_96);
            sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
            carryQ.cq[354] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(354), sequence_f0_ab_adv));
            sequence_f0_ab_80 = simd_and(sequence_f0_ab_adv, byte_80);
            r10000_10ffff_tmp449 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp367);
            byte_range_80_b4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp449);
            carryQ.cq[355] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_80, carryQ.get_carry_in(355), r10000_10ffff_tmp450));
            sequence_f0_ab_80_byte_range_80_b4 = simd_and(r10000_10ffff_tmp450, byte_range_80_b4);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_ab_80_byte_range_80_b4);
            byte_af = simd_and(r10000_10ffff_tmp70, tmp4);
            sequence_f0_af = simd_and(byte_f0_adv, byte_af);
            carryQ.cq[356] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(356), sequence_f0_af_adv));
            sequence_f0_af_a0 = simd_and(sequence_f0_af_adv, byte_a0);
            carryQ.cq[357] = carryout2carry(pablo_blk_Advance(sequence_f0_af_a0, carryQ.get_carry_in(357), r10000_10ffff_tmp451));
            sequence_f0_af_a0_byte_range_80_9d = simd_and(r10000_10ffff_tmp451, byte_range_80_9d);
            struct_gr_base_Y.cc = simd_or(struct_gr_base_Y.cc, sequence_f0_af_a0_byte_range_80_9d);
          }
          else {
            carryQ.CarryDequeueEnqueue(204, 154);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 358);
        }
        carryQ.CarryQ_Adjust(358);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<358, 0> carryQ;
  };

  struct Property_gr_link_Y {
  Property_gr_link_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_gr_link_Y & struct_gr_link_Y) {
		BitBlock byte_range_c0_ff, r80_10ffff_tmp1, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock byte_range_e0_e3, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock byte_e4, r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7;
		BitBlock byte_range_80_b7, r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, r800_1fff_tmp1, byte_e0;
		BitBlock r800_fff_tmp1, r800_fff_tmp2, r800_fff_tmp3, byte_a5, r800_fff_tmp4;
		BitBlock sequence_e0_a5, byte_e0_adv, r800_fff_tmp5, r800_fff_tmp6;
		BitBlock r800_fff_tmp7, r800_fff_tmp8, byte_8d, sequence_e0_a5_adv;
		BitBlock r800_fff_tmp9, r800_fff_tmp10, r800_fff_tmp11, byte_a7;
		BitBlock sequence_e0_a7, sequence_e0_a7_adv, r800_fff_tmp12, r800_fff_tmp13;
		BitBlock r800_fff_tmp14, byte_a9, sequence_e0_a9, sequence_e0_a9_adv;
		BitBlock r800_fff_tmp15, r800_fff_tmp16, byte_ab, sequence_e0_ab;
		BitBlock sequence_e0_ab_adv, r800_fff_tmp17, byte_ad, sequence_e0_ad;
		BitBlock sequence_e0_ad_adv, r800_fff_tmp18, r800_fff_tmp19, byte_af;
		BitBlock sequence_e0_af, sequence_e0_af_adv, r800_fff_tmp20, r800_fff_tmp21;
		BitBlock r800_fff_tmp22, r800_fff_tmp23, byte_b1, sequence_e0_b1;
		BitBlock sequence_e0_b1_adv, r800_fff_tmp24, r800_fff_tmp25, byte_b3;
		BitBlock sequence_e0_b3, sequence_e0_b3_adv, r800_fff_tmp26, byte_b5;
		BitBlock sequence_e0_b5, sequence_e0_b5_adv, r800_fff_tmp27, byte_b7;
		BitBlock sequence_e0_b7, r800_fff_tmp28, r800_fff_tmp29, byte_8a;
		BitBlock sequence_e0_b7_adv, r800_fff_tmp30, r800_fff_tmp31, byte_b8;
		BitBlock sequence_e0_b8, byte_ba, sequence_e0_b8_adv, r800_fff_tmp32;
		BitBlock r800_fff_tmp33, byte_be, sequence_e0_be, byte_84, sequence_e0_be_adv;
		BitBlock r800_fff_tmp34, r800_1fff_tmp2, r800_1fff_tmp3, byte_e1;
		BitBlock r1000_1fff_tmp1, r1000_1fff_tmp2, byte_80, r1000_1fff_tmp3;
		BitBlock sequence_e1_80, byte_e1_adv, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock r1000_1fff_tmp6, r1000_1fff_tmp7, r1000_1fff_tmp8, byte_range_b9_ba;
		BitBlock sequence_e1_80_adv, r1000_1fff_tmp9, r1000_1fff_tmp10;
		BitBlock r1000_1fff_tmp11, r1000_1fff_tmp12, r1000_1fff_tmp13, byte_9c;
		BitBlock sequence_e1_9c, r1000_1fff_tmp14, cc_range_1714_1734_3;
		BitBlock sequence_e1_9c_adv, r1000_1fff_tmp15, r1000_1fff_tmp16;
		BitBlock r1000_1fff_tmp17, byte_9f, sequence_e1_9f, r1000_1fff_tmp18;
		BitBlock r1000_1fff_tmp19, byte_92, sequence_e1_9f_adv, r1000_1fff_tmp20;
		BitBlock r1000_1fff_tmp21, r1000_1fff_tmp22, sequence_e1_a9, byte_a0;
		BitBlock sequence_e1_a9_adv, r1000_1fff_tmp23, r1000_1fff_tmp24;
		BitBlock sequence_e1_ad, sequence_e1_ad_adv, r1000_1fff_tmp25;
		BitBlock r1000_1fff_tmp26, byte_ae, sequence_e1_ae, r1000_1fff_tmp27;
		BitBlock byte_range_aa_ab, sequence_e1_ae_adv, r1000_1fff_tmp28;
		BitBlock sequence_e1_af, r1000_1fff_tmp29, byte_range_b2_b3;
		BitBlock sequence_e1_af_adv, r1000_1fff_tmp30, r800_4dff_tmp2;
		BitBlock byte_range_e2_e3, r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2;
		BitBlock byte_e2, r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3;
		BitBlock r2000_2fff_tmp4, r2000_2fff_tmp5, sequence_e2_b5, byte_e2_adv;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, r2000_2fff_tmp8, byte_bf;
		BitBlock sequence_e2_b5_adv, r2000_2fff_tmp9, r800_ffff_tmp11, r800_ffff_tmp12;
		BitBlock byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2, ra000_ffff_tmp3;
		BitBlock byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5, ra000_ffff_tmp6;
		BitBlock sequence_ea_a0, byte_ea_adv, ra000_ffff_tmp7, ra000_ffff_tmp8;
		BitBlock ra000_ffff_tmp9, byte_86, sequence_ea_a0_adv, ra000_ffff_tmp10;
		BitBlock ra000_ffff_tmp11, ra000_ffff_tmp12, byte_a3, sequence_ea_a3;
		BitBlock sequence_ea_a3_adv, ra000_ffff_tmp13, ra000_ffff_tmp14;
		BitBlock ra000_ffff_tmp15, sequence_ea_a5, ra000_ffff_tmp16, ra000_ffff_tmp17;
		BitBlock byte_93, sequence_ea_a5_adv, ra000_ffff_tmp18, ra000_ffff_tmp19;
		BitBlock sequence_ea_a7, sequence_ea_a7_adv, ra000_ffff_tmp20;
		BitBlock ra000_ffff_tmp21, sequence_ea_ab, ra000_ffff_tmp22, ra000_ffff_tmp23;
		BitBlock byte_b6, sequence_ea_ab_adv, ra000_ffff_tmp24, ra000_ffff_tmp25;
		BitBlock ra000_ffff_tmp26, sequence_ea_af, ra000_ffff_tmp27;
		BitBlock sequence_ea_af_adv, ra000_ffff_tmp28, r80_10ffff_tmp2;
		BitBlock byte_range_f0_ff, r10000_10ffff_tmp1, r10000_10ffff_tmp2;
		BitBlock r10000_10ffff_tmp3, byte_f0, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, byte_90, r10000_10ffff_tmp7, sequence_f0_90;
		BitBlock byte_f0_adv, r10000_10ffff_tmp8, r10000_10ffff_tmp9;
		BitBlock r10000_10ffff_tmp10, byte_a8, r10000_10ffff_tmp11, sequence_f0_90_a8;
		BitBlock sequence_f0_90_adv, r10000_10ffff_tmp12, r10000_10ffff_tmp13;
		BitBlock r10000_10ffff_tmp14, r10000_10ffff_tmp15, sequence_f0_90_a8_adv;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock byte_91, sequence_f0_91, r10000_10ffff_tmp19, r10000_10ffff_tmp20;
		BitBlock byte_81, r10000_10ffff_tmp21, sequence_f0_91_81, sequence_f0_91_adv;
		BitBlock r10000_10ffff_tmp22, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock r10000_10ffff_tmp25, cc_range_11046_1107f_4, sequence_f0_91_81_adv;
		BitBlock r10000_10ffff_tmp26, r10000_10ffff_tmp27, byte_82, sequence_f0_91_82;
		BitBlock r10000_10ffff_tmp28, byte_b9, sequence_f0_91_82_adv;
		BitBlock r10000_10ffff_tmp29, r10000_10ffff_tmp30, sequence_f0_91_84;
		BitBlock r10000_10ffff_tmp31, r10000_10ffff_tmp32, r10000_10ffff_tmp33;
		BitBlock byte_range_b3_b4, sequence_f0_91_84_adv, r10000_10ffff_tmp34;
		BitBlock r10000_10ffff_tmp35, byte_87, sequence_f0_91_87;
		BitBlock sequence_f0_91_87_adv, r10000_10ffff_tmp36, byte_88;
		BitBlock sequence_f0_91_88, r10000_10ffff_tmp37, sequence_f0_91_88_adv;
		BitBlock r10000_10ffff_tmp38, r10000_10ffff_tmp39, byte_8b, sequence_f0_91_8b;
		BitBlock r10000_10ffff_tmp40, byte_aa, sequence_f0_91_8b_adv;
		BitBlock r10000_10ffff_tmp41, r10000_10ffff_tmp42, sequence_f0_91_8d;
		BitBlock sequence_f0_91_8d_adv, r10000_10ffff_tmp43, r10000_10ffff_tmp44;
		BitBlock sequence_f0_91_93, sequence_f0_91_93_adv, r10000_10ffff_tmp45;
		BitBlock byte_96, sequence_f0_91_96, sequence_f0_91_96_adv;
		BitBlock r10000_10ffff_tmp46, byte_98, sequence_f0_91_98;
		BitBlock sequence_f0_91_98_adv, r10000_10ffff_tmp47, byte_9a;
		BitBlock sequence_f0_91_9a, sequence_f0_91_9a_adv, r10000_10ffff_tmp48;




        struct_gr_link_Y.cc = simd<1>::constant<0>();
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 46))) {
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 31))) {
            r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, r800_ffff_tmp1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp3 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp4 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp3);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
            r800_ffff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp6 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_and(basis_bits.bit_2, r800_ffff_tmp6);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(0), r800_ffff_tmp8));
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp8, byte_range_80_b7);
            r800_ffff_tmp10 = simd_or(byte_range_e0_e3, r800_ffff_tmp9);
            if ((bitblock::any(r800_ffff_tmp10) || carryQ.CarryTest(1, 23))) {
              r800_4dff_tmp1 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(1, 21))) {
                r800_1fff_tmp1 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
                byte_e0 = simd_andc(byte_range_e0_ef, r800_1fff_tmp1);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(1, 13))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r800_fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp3 = simd_and(r800_ffff_tmp2, r800_fff_tmp2);
                  byte_a5 = simd_and(r800_fff_tmp1, r800_fff_tmp3);
                  carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), r800_fff_tmp4));
                  sequence_e0_a5 = simd_and(r800_fff_tmp4, byte_a5);
                  byte_e0_adv = r800_fff_tmp4;
                  r800_fff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp6 = simd_andc(r800_ffff_tmp5, r800_fff_tmp5);
                  r800_fff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp8 = simd_and(r800_fff_tmp7, r800_fff_tmp2);
                  byte_8d = simd_and(r800_fff_tmp6, r800_fff_tmp8);
                  carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(2), sequence_e0_a5_adv));
                  r800_fff_tmp9 = simd_and(sequence_e0_a5_adv, byte_8d);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r800_fff_tmp9);
                  r800_fff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp11 = simd_and(r800_ffff_tmp2, r800_fff_tmp10);
                  byte_a7 = simd_and(r800_fff_tmp1, r800_fff_tmp11);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(3), sequence_e0_a7_adv));
                  r800_fff_tmp12 = simd_and(sequence_e0_a7_adv, byte_8d);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r800_fff_tmp12);
                  r800_fff_tmp13 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp14 = simd_and(r800_fff_tmp13, r800_fff_tmp2);
                  byte_a9 = simd_and(r800_fff_tmp1, r800_fff_tmp14);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(4), sequence_e0_a9_adv));
                  r800_fff_tmp15 = simd_and(sequence_e0_a9_adv, byte_8d);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r800_fff_tmp15);
                  r800_fff_tmp16 = simd_and(r800_fff_tmp13, r800_fff_tmp10);
                  byte_ab = simd_and(r800_fff_tmp1, r800_fff_tmp16);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(5), sequence_e0_ab_adv));
                  r800_fff_tmp17 = simd_and(sequence_e0_ab_adv, byte_8d);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r800_fff_tmp17);
                  byte_ad = simd_and(r800_fff_tmp1, r800_fff_tmp8);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(6), sequence_e0_ad_adv));
                  r800_fff_tmp18 = simd_and(sequence_e0_ad_adv, byte_8d);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r800_fff_tmp18);
                  r800_fff_tmp19 = simd_and(r800_fff_tmp7, r800_fff_tmp10);
                  byte_af = simd_and(r800_fff_tmp1, r800_fff_tmp19);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(7), sequence_e0_af_adv));
                  r800_fff_tmp20 = simd_and(sequence_e0_af_adv, byte_8d);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r800_fff_tmp20);
                  r800_fff_tmp21 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp22 = simd_and(r800_ffff_tmp5, r800_fff_tmp21);
                  r800_fff_tmp23 = simd_andc(r800_fff_tmp2, r800_ffff_tmp1);
                  byte_b1 = simd_and(r800_fff_tmp22, r800_fff_tmp23);
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(8), sequence_e0_b1_adv));
                  r800_fff_tmp24 = simd_and(sequence_e0_b1_adv, byte_8d);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r800_fff_tmp24);
                  r800_fff_tmp25 = simd_andc(r800_fff_tmp10, r800_ffff_tmp1);
                  byte_b3 = simd_and(r800_fff_tmp22, r800_fff_tmp25);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(9), sequence_e0_b3_adv));
                  r800_fff_tmp26 = simd_and(sequence_e0_b3_adv, byte_8d);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r800_fff_tmp26);
                  byte_b5 = simd_and(r800_fff_tmp22, r800_fff_tmp3);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(10), sequence_e0_b5_adv));
                  r800_fff_tmp27 = simd_and(sequence_e0_b5_adv, byte_8d);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r800_fff_tmp27);
                  byte_b7 = simd_and(r800_fff_tmp22, r800_fff_tmp11);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  r800_fff_tmp28 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp29 = simd_and(r800_fff_tmp13, r800_fff_tmp28);
                  byte_8a = simd_and(r800_fff_tmp6, r800_fff_tmp29);
                  carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(11), sequence_e0_b7_adv));
                  r800_fff_tmp30 = simd_and(sequence_e0_b7_adv, byte_8a);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r800_fff_tmp30);
                  r800_fff_tmp31 = simd_andc(r800_fff_tmp13, r800_ffff_tmp3);
                  byte_b8 = simd_and(r800_fff_tmp22, r800_fff_tmp31);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  byte_ba = simd_and(r800_fff_tmp22, r800_fff_tmp29);
                  carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(12), sequence_e0_b8_adv));
                  r800_fff_tmp32 = simd_and(sequence_e0_b8_adv, byte_ba);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r800_fff_tmp32);
                  r800_fff_tmp33 = simd_and(r800_fff_tmp7, r800_fff_tmp28);
                  byte_be = simd_and(r800_fff_tmp22, r800_fff_tmp33);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  byte_84 = simd_and(r800_fff_tmp6, r800_ffff_tmp4);
                  carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(13), sequence_e0_be_adv));
                  r800_fff_tmp34 = simd_and(sequence_e0_be_adv, byte_84);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r800_fff_tmp34);
                }
                else {
                  carryQ.CarryDequeueEnqueue(1, 13);
                }
                r800_1fff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp3 = simd_andc(r800_1fff_tmp2, r800_ffff_tmp1);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp3);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(14, 8))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp5, r1000_1fff_tmp1);
                  byte_80 = simd_andc(r1000_1fff_tmp2, r800_1fff_tmp1);
                  carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(14), r1000_1fff_tmp3));
                  sequence_e1_80 = simd_and(r1000_1fff_tmp3, byte_80);
                  byte_e1_adv = r1000_1fff_tmp3;
                  r1000_1fff_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp5 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp4);
                  r1000_1fff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp7 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp6);
                  r1000_1fff_tmp8 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  byte_range_b9_ba = simd_and(r1000_1fff_tmp7, r1000_1fff_tmp8);
                  carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(15), sequence_e1_80_adv));
                  r1000_1fff_tmp9 = simd_and(sequence_e1_80_adv, byte_range_b9_ba);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r1000_1fff_tmp9);
                  r1000_1fff_tmp10 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                  r1000_1fff_tmp11 = simd_and(r800_ffff_tmp5, r1000_1fff_tmp10);
                  r1000_1fff_tmp12 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp13 = simd_andc(r1000_1fff_tmp12, r800_ffff_tmp3);
                  byte_9c = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp13);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  r1000_1fff_tmp14 = simd_and(r800_ffff_tmp5, basis_bits.bit_3);
                  cc_range_1714_1734_3 = simd_and(r800_ffff_tmp4, r1000_1fff_tmp14);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(16), sequence_e1_9c_adv));
                  r1000_1fff_tmp15 = simd_and(sequence_e1_9c_adv, cc_range_1714_1734_3);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r1000_1fff_tmp15);
                  r1000_1fff_tmp16 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp17 = simd_and(r1000_1fff_tmp12, r1000_1fff_tmp16);
                  byte_9f = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp17);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  r1000_1fff_tmp18 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp19 = simd_andc(r1000_1fff_tmp18, r800_ffff_tmp1);
                  byte_92 = simd_and(r1000_1fff_tmp11, r1000_1fff_tmp19);
                  carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(17), sequence_e1_9f_adv));
                  r1000_1fff_tmp20 = simd_and(sequence_e1_9f_adv, byte_92);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r1000_1fff_tmp20);
                  r1000_1fff_tmp21 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
                  r1000_1fff_tmp22 = simd_and(r1000_1fff_tmp6, r800_1fff_tmp2);
                  byte_a9 = simd_and(r1000_1fff_tmp21, r1000_1fff_tmp22);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  byte_a0 = simd_andc(r1000_1fff_tmp21, r800_1fff_tmp1);
                  carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(18), sequence_e1_a9_adv));
                  r1000_1fff_tmp23 = simd_and(sequence_e1_a9_adv, byte_a0);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r1000_1fff_tmp23);
                  r1000_1fff_tmp24 = simd_and(r1000_1fff_tmp12, r800_1fff_tmp2);
                  byte_ad = simd_and(r1000_1fff_tmp21, r1000_1fff_tmp24);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  byte_84 = simd_and(r1000_1fff_tmp2, r800_ffff_tmp4);
                  carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(19), sequence_e1_ad_adv));
                  r1000_1fff_tmp25 = simd_and(sequence_e1_ad_adv, byte_84);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r1000_1fff_tmp25);
                  r1000_1fff_tmp26 = simd_and(r1000_1fff_tmp12, r1000_1fff_tmp18);
                  byte_ae = simd_and(r1000_1fff_tmp21, r1000_1fff_tmp26);
                  sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
                  r1000_1fff_tmp27 = simd_and(r1000_1fff_tmp6, basis_bits.bit_6);
                  byte_range_aa_ab = simd_and(r1000_1fff_tmp21, r1000_1fff_tmp27);
                  carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(20), sequence_e1_ae_adv));
                  r1000_1fff_tmp28 = simd_and(sequence_e1_ae_adv, byte_range_aa_ab);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r1000_1fff_tmp28);
                  byte_af = simd_and(r1000_1fff_tmp21, r1000_1fff_tmp17);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  r1000_1fff_tmp29 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
                  byte_range_b2_b3 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp29);
                  carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(21), sequence_e1_af_adv));
                  r1000_1fff_tmp30 = simd_and(sequence_e1_af_adv, byte_range_b2_b3);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r1000_1fff_tmp30);
                }
                else {
                  carryQ.CarryDequeueEnqueue(14, 8);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(1, 21);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp9);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(22, 2))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, r800_ffff_tmp1);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(22, 2))) {
                  r2000_2fff_tmp1 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_and(r800_ffff_tmp5, r2000_2fff_tmp1);
                  r2000_2fff_tmp3 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp4 = simd_and(r800_ffff_tmp2, r2000_2fff_tmp3);
                  byte_b5 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp4);
                  carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(22), r2000_2fff_tmp5));
                  sequence_e2_b5 = simd_and(r2000_2fff_tmp5, byte_b5);
                  byte_e2_adv = r2000_2fff_tmp5;
                  r2000_2fff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r2000_2fff_tmp8 = simd_and(r2000_2fff_tmp6, r2000_2fff_tmp7);
                  byte_bf = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp8);
                  carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(23), sequence_e2_b5_adv));
                  r2000_2fff_tmp9 = simd_and(sequence_e2_b5_adv, byte_bf);
                  struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r2000_2fff_tmp9);
                }
                else {
                  carryQ.CarryDequeueEnqueue(22, 2);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(22, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(1, 23);
            }
            r800_ffff_tmp11 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            r800_ffff_tmp12 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
            byte_range_ea_ef = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(24, 7))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_and(r800_ffff_tmp5, r80_10ffff_tmp1);
              ra000_ffff_tmp5 = simd_or(r800_ffff_tmp1, r800_ffff_tmp3);
              byte_a0 = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp5);
              carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(24), ra000_ffff_tmp6));
              sequence_ea_a0 = simd_and(ra000_ffff_tmp6, byte_a0);
              byte_ea_adv = ra000_ffff_tmp6;
              ra000_ffff_tmp7 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp8 = simd_andc(r800_ffff_tmp5, ra000_ffff_tmp7);
              ra000_ffff_tmp9 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp2);
              byte_86 = simd_and(ra000_ffff_tmp8, ra000_ffff_tmp9);
              carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(25), sequence_ea_a0_adv));
              ra000_ffff_tmp10 = simd_and(sequence_ea_a0_adv, byte_86);
              struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, ra000_ffff_tmp10);
              ra000_ffff_tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp12 = simd_andc(ra000_ffff_tmp11, r800_ffff_tmp1);
              byte_a3 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp12);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              byte_84 = simd_and(ra000_ffff_tmp8, r800_ffff_tmp4);
              carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(26), sequence_ea_a3_adv));
              ra000_ffff_tmp13 = simd_and(sequence_ea_a3_adv, byte_84);
              struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, ra000_ffff_tmp13);
              ra000_ffff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp15 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp14);
              byte_a5 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp15);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              ra000_ffff_tmp16 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              ra000_ffff_tmp17 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp16);
              byte_93 = simd_and(ra000_ffff_tmp17, ra000_ffff_tmp12);
              carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(27), sequence_ea_a5_adv));
              ra000_ffff_tmp18 = simd_and(sequence_ea_a5_adv, byte_93);
              struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, ra000_ffff_tmp18);
              ra000_ffff_tmp19 = simd_and(r800_ffff_tmp2, ra000_ffff_tmp11);
              byte_a7 = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp19);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              byte_80 = simd_andc(ra000_ffff_tmp8, ra000_ffff_tmp5);
              carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(28), sequence_ea_a7_adv));
              ra000_ffff_tmp20 = simd_and(sequence_ea_a7_adv, byte_80);
              struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, ra000_ffff_tmp20);
              ra000_ffff_tmp21 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp11);
              byte_ab = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp21);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              ra000_ffff_tmp22 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp23 = simd_and(r800_ffff_tmp5, ra000_ffff_tmp22);
              byte_b6 = simd_and(ra000_ffff_tmp23, ra000_ffff_tmp9);
              carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(29), sequence_ea_ab_adv));
              ra000_ffff_tmp24 = simd_and(sequence_ea_ab_adv, byte_b6);
              struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, ra000_ffff_tmp24);
              ra000_ffff_tmp25 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp26 = simd_and(ra000_ffff_tmp25, ra000_ffff_tmp11);
              byte_af = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp26);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              ra000_ffff_tmp27 = simd_and(ra000_ffff_tmp25, ra000_ffff_tmp14);
              byte_ad = simd_and(ra000_ffff_tmp4, ra000_ffff_tmp27);
              carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(30), sequence_ea_af_adv));
              ra000_ffff_tmp28 = simd_and(sequence_ea_af_adv, byte_ad);
              struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, ra000_ffff_tmp28);
            }
            else {
              carryQ.CarryDequeueEnqueue(24, 7);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 31);
          }
          r80_10ffff_tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_f0_ff = simd_and(byte_range_c0_ff, r80_10ffff_tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(31, 15))) {
            r10000_10ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp3 = simd_or(r10000_10ffff_tmp1, r10000_10ffff_tmp2);
            byte_f0 = simd_andc(byte_range_f0_ff, r10000_10ffff_tmp3);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp6 = simd_and(r10000_10ffff_tmp4, r10000_10ffff_tmp5);
            byte_90 = simd_andc(r10000_10ffff_tmp6, r10000_10ffff_tmp3);
            carryQ.cq[31] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(31), r10000_10ffff_tmp7));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp7, byte_90);
            byte_f0_adv = r10000_10ffff_tmp7;
            r10000_10ffff_tmp8 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp1);
            r10000_10ffff_tmp9 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp10 = simd_andc(r10000_10ffff_tmp9, r10000_10ffff_tmp2);
            byte_a8 = simd_and(r10000_10ffff_tmp8, r10000_10ffff_tmp10);
            carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(32), r10000_10ffff_tmp11));
            sequence_f0_90_a8 = simd_and(r10000_10ffff_tmp11, byte_a8);
            sequence_f0_90_adv = r10000_10ffff_tmp11;
            r10000_10ffff_tmp12 = simd_and(r10000_10ffff_tmp4, r80_10ffff_tmp2);
            r10000_10ffff_tmp13 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp14 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp14);
            byte_bf = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp15);
            carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(33), sequence_f0_90_a8_adv));
            r10000_10ffff_tmp16 = simd_and(sequence_f0_90_a8_adv, byte_bf);
            struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r10000_10ffff_tmp16);
            r10000_10ffff_tmp17 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp18 = simd_andc(r10000_10ffff_tmp17, r10000_10ffff_tmp1);
            byte_91 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp18);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            r10000_10ffff_tmp19 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp20 = simd_andc(r10000_10ffff_tmp4, r10000_10ffff_tmp19);
            byte_81 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp18);
            carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(34), r10000_10ffff_tmp21));
            sequence_f0_91_81 = simd_and(r10000_10ffff_tmp21, byte_81);
            sequence_f0_91_adv = r10000_10ffff_tmp21;
            r10000_10ffff_tmp22 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp23 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp24 = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp24);
            cc_range_11046_1107f_4 = simd_or(r10000_10ffff_tmp25, byte_bf);
            carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(35), sequence_f0_91_81_adv));
            r10000_10ffff_tmp26 = simd_and(sequence_f0_91_81_adv, cc_range_11046_1107f_4);
            struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r10000_10ffff_tmp26);
            r10000_10ffff_tmp27 = simd_andc(r10000_10ffff_tmp23, r10000_10ffff_tmp1);
            byte_82 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp27);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            r10000_10ffff_tmp28 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp17);
            byte_b9 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp28);
            carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(36), sequence_f0_91_82_adv));
            r10000_10ffff_tmp29 = simd_and(sequence_f0_91_82_adv, byte_b9);
            struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r10000_10ffff_tmp29);
            r10000_10ffff_tmp30 = simd_andc(r10000_10ffff_tmp22, r10000_10ffff_tmp2);
            byte_84 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp30);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            r10000_10ffff_tmp31 = simd_andc(r10000_10ffff_tmp12, basis_bits.bit_4);
            r10000_10ffff_tmp32 = simd_not(r10000_10ffff_tmp2);
            r10000_10ffff_tmp33 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp32), simd_andc(r10000_10ffff_tmp14, basis_bits.bit_5));
            byte_range_b3_b4 = simd_and(r10000_10ffff_tmp31, r10000_10ffff_tmp33);
            carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(37), sequence_f0_91_84_adv));
            r10000_10ffff_tmp34 = simd_and(sequence_f0_91_84_adv, byte_range_b3_b4);
            struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r10000_10ffff_tmp34);
            r10000_10ffff_tmp35 = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp14);
            byte_87 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp35);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            byte_80 = simd_andc(r10000_10ffff_tmp20, r10000_10ffff_tmp3);
            carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(38), sequence_f0_91_87_adv));
            r10000_10ffff_tmp36 = simd_and(sequence_f0_91_87_adv, byte_80);
            struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r10000_10ffff_tmp36);
            byte_88 = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp10);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            r10000_10ffff_tmp37 = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp17);
            byte_b5 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp37);
            carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(39), sequence_f0_91_88_adv));
            r10000_10ffff_tmp38 = simd_and(sequence_f0_91_88_adv, byte_b5);
            struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r10000_10ffff_tmp38);
            r10000_10ffff_tmp39 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp14);
            byte_8b = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp39);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            r10000_10ffff_tmp40 = simd_and(r10000_10ffff_tmp9, r10000_10ffff_tmp23);
            byte_aa = simd_and(r10000_10ffff_tmp8, r10000_10ffff_tmp40);
            carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(40), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp41 = simd_and(sequence_f0_91_8b_adv, byte_aa);
            struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r10000_10ffff_tmp41);
            r10000_10ffff_tmp42 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp17);
            byte_8d = simd_and(r10000_10ffff_tmp20, r10000_10ffff_tmp42);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(41), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp43 = simd_and(sequence_f0_91_8d_adv, byte_8d);
            struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r10000_10ffff_tmp43);
            r10000_10ffff_tmp44 = simd_andc(r10000_10ffff_tmp14, r10000_10ffff_tmp1);
            byte_93 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp44);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(42), sequence_f0_91_93_adv));
            r10000_10ffff_tmp45 = simd_and(sequence_f0_91_93_adv, byte_82);
            struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r10000_10ffff_tmp45);
            byte_96 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp24);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(43), sequence_f0_91_96_adv));
            r10000_10ffff_tmp46 = simd_and(sequence_f0_91_96_adv, byte_bf);
            struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r10000_10ffff_tmp46);
            byte_98 = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp10);
            sequence_f0_91_98 = simd_and(sequence_f0_91_adv, byte_98);
            carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_f0_91_98, carryQ.get_carry_in(44), sequence_f0_91_98_adv));
            r10000_10ffff_tmp47 = simd_and(sequence_f0_91_98_adv, byte_bf);
            struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r10000_10ffff_tmp47);
            byte_9a = simd_and(r10000_10ffff_tmp6, r10000_10ffff_tmp40);
            sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
            byte_b6 = simd_and(r10000_10ffff_tmp12, r10000_10ffff_tmp24);
            carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(45), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp48 = simd_and(sequence_f0_91_9a_adv, byte_b6);
            struct_gr_link_Y.cc = simd_or(struct_gr_link_Y.cc, r10000_10ffff_tmp48);
          }
          else {
            carryQ.CarryDequeueEnqueue(31, 15);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 46);
        }
        carryQ.CarryQ_Adjust(46);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<46, 0> carryQ;
  };

  struct Property_xidc_Y {
  Property_xidc_Y() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_xidc_Y & struct_xidc_Y) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp21;
		BitBlock tmp22, tmp23, tmp24, tmp25, tmp26, cc_range_30_61_1, byte_range_c0_ff;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, byte_c2, r80_7ff_tmp5, r80_7ff_tmp6, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10, r80_7ff_tmp11;
		BitBlock r80_7ff_tmp12, r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15;
		BitBlock r80_7ff_tmp16, r80_7ff_tmp17, r80_7ff_tmp18, r80_7ff_tmp19;
		BitBlock r80_7ff_tmp20, cc_range_aa_ba_2, byte_c2_adv, r80_7ff_tmp21;
		BitBlock r80_7ff_tmp22, byte_c3, r80_7ff_tmp23, r80_7ff_tmp24, r80_7ff_tmp25;
		BitBlock r80_7ff_tmp26, r80_7ff_tmp27, r80_7ff_tmp28, r80_7ff_tmp29;
		BitBlock r80_7ff_tmp30, r80_7ff_tmp31, r80_7ff_tmp32, r80_7ff_tmp33;
		BitBlock cc_range_c0_f8_2, byte_c3_adv, r80_7ff_tmp34, byte_range_c4_cf;
		BitBlock r100_3ff_tmp1, byte_range_c4_cb, r100_2ff_tmp1, r100_2ff_tmp2;
		BitBlock r100_2ff_tmp3, byte_range_c4_c8, r100_2ff_tmp4, byte_c9;
		BitBlock byte_range_80_8f, r100_2ff_tmp5, r100_2ff_tmp6, r100_2ff_tmp7;
		BitBlock r100_24f_tmp1, byte_range_c4_c5, byte_range_80_bf, r100_17f_tmp1;
		BitBlock byte_range_c4_c5_sfx, r100_24f_tmp2, r100_24f_tmp3, byte_range_c6_c8;
		BitBlock r100_24f_tmp4, r180_24f_tmp1, byte_range_c6_c8_sfx;
		BitBlock byte_c9_byte_range_80_8f, byte_range_90_bf, r100_2ff_tmp8, byte_ca;
		BitBlock byte_range_80_af, r100_2ff_tmp9, r100_2ff_tmp10, r100_2ff_tmp11;
		BitBlock byte_c9_adv, r250_2af_tmp1, byte_ca_adv, r250_2af_tmp2;
		BitBlock byte_range_b0_bf, r100_2ff_tmp12, r100_2ff_tmp13, byte_cb;
		BitBlock r100_2ff_tmp14, r2b0_2ff_tmp1, r2b0_2ff_tmp2, r2b0_2ff_tmp3;
		BitBlock r2b0_2ff_tmp4, r2b0_2ff_tmp5, r2b0_2ff_tmp6, r2b0_2ff_tmp7;
		BitBlock r2b0_2ff_tmp8, r2b0_2ff_tmp9, r2b0_2ff_tmp10, r2b0_2ff_tmp11;
		BitBlock r2b0_2ff_tmp12, r2b0_2ff_tmp13, r2b0_2ff_tmp14, r2b0_2ff_tmp15;
		BitBlock r2b0_2ff_tmp16, r2b0_2ff_tmp17, r2b0_2ff_tmp18, cc_range_2c0_2ee_2;
		BitBlock byte_cb_adv, r2b0_2ff_tmp19, r100_3ff_tmp2, byte_cc, r100_3ff_tmp3;
		BitBlock byte_cd, r100_3ff_tmp4, r100_3ff_tmp5, r100_3ff_tmp6, byte_cc_adv;
		BitBlock r300_36f_tmp1, byte_cd_adv, r300_36f_tmp2, r100_3ff_tmp7;
		BitBlock r100_3ff_tmp8, byte_range_ce_cf, r100_3ff_tmp9, r370_3ff_tmp1;
		BitBlock r370_3ff_tmp2, r370_3ff_tmp3, r370_3ff_tmp4, r370_3ff_tmp5;
		BitBlock r370_3ff_tmp6, r370_3ff_tmp7, r370_3ff_tmp8, r370_3ff_tmp9;
		BitBlock r370_3ff_tmp10, r370_3ff_tmp11, r370_3ff_tmp12, cc_range_370_37f_2;
		BitBlock r370_3ff_tmp13, r370_3ff_tmp14, byte_ce, r370_3ff_tmp15;
		BitBlock r370_3ff_tmp16, r370_3ff_tmp17, r370_3ff_tmp18, r370_3ff_tmp19;
		BitBlock r370_3ff_tmp20, r370_3ff_tmp21, r370_3ff_tmp22, r370_3ff_tmp23;
		BitBlock r370_3ff_tmp24, r370_3ff_tmp25, r370_3ff_tmp26, r370_3ff_tmp27;
		BitBlock r370_3ff_tmp28, r370_3ff_tmp29, r370_3ff_tmp30, r370_3ff_tmp31;
		BitBlock cc_range_386_3a3_2, byte_ce_adv, r370_3ff_tmp32, byte_cf;
		BitBlock r370_3ff_tmp33, r370_3ff_tmp34, r370_3ff_tmp35, r370_3ff_tmp36;
		BitBlock r370_3ff_tmp37, cc_range_3c0_3f7_2, byte_cf_adv, r370_3ff_tmp38;
		BitBlock r80_7ff_tmp35, byte_range_d0_d7, byte_range_d0_d3, r400_4ff_tmp1;
		BitBlock byte_range_d0_d1, r400_4ff_tmp2, byte_range_d0_d1_sfx, byte_d2;
		BitBlock r400_4ff_tmp3, byte_range_80_81, r400_4ff_tmp4;
		BitBlock byte_d2_byte_range_80_81, byte_d3, r400_4ff_tmp5;
		BitBlock byte_d3_byte_range_80_bf, r400_5ff_tmp1, byte_range_d4_d5;
		BitBlock r400_5ff_tmp2, byte_d6, r400_5ff_tmp3, r400_5ff_tmp4, r400_5ff_tmp5;
		BitBlock r500_58f_tmp1, byte_d4, r500_58f_tmp2, r500_58f_tmp3, byte_d4_adv;
		BitBlock r500_52f_tmp1, r500_58f_tmp4, byte_d5, r500_58f_tmp5, r500_58f_tmp6;
		BitBlock r530_58f_tmp1, r530_58f_tmp2, byte_range_b1_bf, r530_58f_tmp3;
		BitBlock r530_58f_tmp4, r530_58f_tmp5, r530_58f_tmp6, r530_58f_tmp7;
		BitBlock r530_58f_tmp8, r530_58f_tmp9, r530_58f_tmp10, cc_range_540_561_2;
		BitBlock byte_d5_adv, r530_58f_tmp11, byte_range_80_87, byte_d6_adv;
		BitBlock r530_58f_tmp12, r400_5ff_tmp6, byte_d7, r400_5ff_tmp7, r590_5ff_tmp1;
		BitBlock r590_5ff_tmp2, r590_5ff_tmp3, r590_5ff_tmp4, r590_5ff_tmp5;
		BitBlock r590_5ff_tmp6, r590_5ff_tmp7, cc_range_591_5bf_2, r590_5ff_tmp8;
		BitBlock r590_5ff_tmp9, r590_5ff_tmp10, r590_5ff_tmp11, r590_5ff_tmp12;
		BitBlock r590_5ff_tmp13, r590_5ff_tmp14, r590_5ff_tmp15, r590_5ff_tmp16;
		BitBlock r590_5ff_tmp17, r590_5ff_tmp18, r590_5ff_tmp19, r590_5ff_tmp20;
		BitBlock r590_5ff_tmp21, r590_5ff_tmp22, cc_range_5c1_5f0_2, byte_d7_adv;
		BitBlock r590_5ff_tmp23, byte_range_d8_db, r600_6ff_tmp1, byte_d8;
		BitBlock r600_6ff_tmp2, r600_6ff_tmp3, r600_6ff_tmp4, cc_range_610_620_2;
		BitBlock byte_d8_adv, r600_6ff_tmp5, r600_6ff_tmp6, byte_d9, r600_6ff_tmp7;
		BitBlock r600_6ff_tmp8, r600_6ff_tmp9, r600_6ff_tmp10, r600_6ff_tmp11;
		BitBlock r600_6ff_tmp12, cc_range_640_66e_2, byte_d9_adv, r600_6ff_tmp13;
		BitBlock byte_da, byte_da_adv, r600_6ff_tmp14, r600_6ff_tmp15, byte_db;
		BitBlock r600_6ff_tmp16, r600_6ff_tmp17, r600_6ff_tmp18, r600_6ff_tmp19;
		BitBlock r600_6ff_tmp20, r600_6ff_tmp21, r600_6ff_tmp22, r600_6ff_tmp23;
		BitBlock r600_6ff_tmp24, r600_6ff_tmp25, r600_6ff_tmp26, r600_6ff_tmp27;
		BitBlock r600_6ff_tmp28, r600_6ff_tmp29, r600_6ff_tmp30, r600_6ff_tmp31;
		BitBlock r600_6ff_tmp32, r600_6ff_tmp33, r600_6ff_tmp34, r600_6ff_tmp35;
		BitBlock r600_6ff_tmp36, r600_6ff_tmp37, r600_6ff_tmp38, r600_6ff_tmp39;
		BitBlock cc_range_6c0_6ff_2, byte_db_adv, r600_6ff_tmp40, r80_7ff_tmp36;
		BitBlock byte_range_dc_dd, r700_77f_tmp1, byte_dc, r700_77f_tmp2, byte_dd;
		BitBlock r700_77f_tmp3, r700_77f_tmp4, r700_77f_tmp5, byte_dc_adv;
		BitBlock r700_74f_tmp1, r700_74f_tmp2, r700_74f_tmp3, r700_74f_tmp4;
		BitBlock cc_range_740_74d_2, byte_dd_adv, r700_74f_tmp5, r700_77f_tmp6;
		BitBlock r750_77f_tmp1, r80_7ff_tmp37, byte_range_de_df, r780_7ff_tmp1;
		BitBlock byte_de, r780_7bf_tmp1, r780_7bf_tmp2, r780_7bf_tmp3;
		BitBlock byte_range_80_b1, byte_de_adv, r780_7bf_tmp4, byte_df, r7c0_7ff_tmp1;
		BitBlock r7c0_7ff_tmp2, r7c0_7ff_tmp3, r7c0_7ff_tmp4, r7c0_7ff_tmp5;
		BitBlock cc_range_7c0_7fa_2, byte_df_adv, r7c0_7ff_tmp6, r80_10ffff_tmp1;
		BitBlock byte_range_e0_ef, byte_range_e0_e3, r800_ffff_tmp1, r800_ffff_tmp2;
		BitBlock byte_e4, r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock byte_range_80_b7, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock r800_4dff_tmp1, byte_range_e0_e1, byte_e0, r800_fff_tmp1, byte_a0;
		BitBlock r800_fff_tmp2, sequence_e0_a0, byte_e0_adv, r800_fff_tmp3;
		BitBlock r800_fff_tmp4, r800_fff_tmp5, byte_range_80_ad, sequence_e0_a0_adv;
		BitBlock r800_fff_tmp6, r800_fff_tmp7, r800_fff_tmp8, byte_a1, sequence_e0_a1;
		BitBlock r800_fff_tmp9, r800_fff_tmp10, byte_range_80_9b, sequence_e0_a1_adv;
		BitBlock r800_fff_tmp11, r800_fff_tmp12, r800_fff_tmp13, byte_a2;
		BitBlock sequence_e0_a2, r800_fff_tmp14, r800_fff_tmp15, r800_fff_tmp16;
		BitBlock byte_range_a0_b2, sequence_e0_a2_adv, r800_fff_tmp17, r800_fff_tmp18;
		BitBlock byte_a3, sequence_e0_a3, r800_fff_tmp19, byte_range_a4_bf;
		BitBlock sequence_e0_a3_adv, r800_fff_tmp20, byte_a4, sequence_e0_a4;
		BitBlock sequence_e0_a4_adv, r800_fff_tmp21, r800_fff_tmp22, r800_fff_tmp23;
		BitBlock byte_a5, sequence_e0_a5, r800_fff_tmp24, r800_fff_tmp25;
		BitBlock r800_fff_tmp26, r800_fff_tmp27, r800_fff_tmp28, r800_fff_tmp29;
		BitBlock r800_fff_tmp30, r800_fff_tmp31, r800_fff_tmp32, r800_fff_tmp33;
		BitBlock cc_range_940_971_3, sequence_e0_a5_adv, r800_fff_tmp34;
		BitBlock r800_fff_tmp35, byte_a6, sequence_e0_a6, r800_fff_tmp36;
		BitBlock r800_fff_tmp37, r800_fff_tmp38, r800_fff_tmp39, r800_fff_tmp40;
		BitBlock r800_fff_tmp41, r800_fff_tmp42, r800_fff_tmp43, r800_fff_tmp44;
		BitBlock r800_fff_tmp45, r800_fff_tmp46, r800_fff_tmp47, r800_fff_tmp48;
		BitBlock r800_fff_tmp49, r800_fff_tmp50, r800_fff_tmp51, r800_fff_tmp52;
		BitBlock r800_fff_tmp53, r800_fff_tmp54, r800_fff_tmp55, r800_fff_tmp56;
		BitBlock r800_fff_tmp57, r800_fff_tmp58, r800_fff_tmp59, r800_fff_tmp60;
		BitBlock r800_fff_tmp61, r800_fff_tmp62, r800_fff_tmp63, cc_range_980_9bc_3;
		BitBlock sequence_e0_a6_adv, r800_fff_tmp64, r800_fff_tmp65, byte_a7;
		BitBlock sequence_e0_a7, r800_fff_tmp66, r800_fff_tmp67, r800_fff_tmp68;
		BitBlock r800_fff_tmp69, r800_fff_tmp70, r800_fff_tmp71, r800_fff_tmp72;
		BitBlock r800_fff_tmp73, r800_fff_tmp74, r800_fff_tmp75, r800_fff_tmp76;
		BitBlock r800_fff_tmp77, r800_fff_tmp78, r800_fff_tmp79, r800_fff_tmp80;
		BitBlock r800_fff_tmp81, r800_fff_tmp82, r800_fff_tmp83, r800_fff_tmp84;
		BitBlock r800_fff_tmp85, r800_fff_tmp86, r800_fff_tmp87, r800_fff_tmp88;
		BitBlock r800_fff_tmp89, r800_fff_tmp90, cc_range_9c0_9e6_3;
		BitBlock sequence_e0_a7_adv, r800_fff_tmp91, r800_fff_tmp92, r800_fff_tmp93;
		BitBlock byte_a8, sequence_e0_a8, r800_fff_tmp94, r800_fff_tmp95;
		BitBlock r800_fff_tmp96, r800_fff_tmp97, r800_fff_tmp98, r800_fff_tmp99;
		BitBlock r800_fff_tmp100, r800_fff_tmp101, r800_fff_tmp102, r800_fff_tmp103;
		BitBlock r800_fff_tmp104, r800_fff_tmp105, r800_fff_tmp106, r800_fff_tmp107;
		BitBlock r800_fff_tmp108, r800_fff_tmp109, r800_fff_tmp110, r800_fff_tmp111;
		BitBlock r800_fff_tmp112, r800_fff_tmp113, r800_fff_tmp114, r800_fff_tmp115;
		BitBlock r800_fff_tmp116, cc_range_a01_a3e_3, sequence_e0_a8_adv;
		BitBlock r800_fff_tmp117, r800_fff_tmp118, byte_a9, sequence_e0_a9;
		BitBlock r800_fff_tmp119, r800_fff_tmp120, r800_fff_tmp121, r800_fff_tmp122;
		BitBlock r800_fff_tmp123, r800_fff_tmp124, r800_fff_tmp125, r800_fff_tmp126;
		BitBlock r800_fff_tmp127, r800_fff_tmp128, r800_fff_tmp129, r800_fff_tmp130;
		BitBlock r800_fff_tmp131, r800_fff_tmp132, r800_fff_tmp133, r800_fff_tmp134;
		BitBlock r800_fff_tmp135, cc_range_a40_a66_3, sequence_e0_a9_adv;
		BitBlock r800_fff_tmp136, r800_fff_tmp137, byte_aa, sequence_e0_aa;
		BitBlock r800_fff_tmp138, r800_fff_tmp139, r800_fff_tmp140, r800_fff_tmp141;
		BitBlock r800_fff_tmp142, r800_fff_tmp143, r800_fff_tmp144, r800_fff_tmp145;
		BitBlock r800_fff_tmp146, r800_fff_tmp147, r800_fff_tmp148, r800_fff_tmp149;
		BitBlock r800_fff_tmp150, cc_range_a81_abc_3, sequence_e0_aa_adv;
		BitBlock r800_fff_tmp151, r800_fff_tmp152, byte_ab, sequence_e0_ab;
		BitBlock r800_fff_tmp153, r800_fff_tmp154, r800_fff_tmp155, r800_fff_tmp156;
		BitBlock r800_fff_tmp157, r800_fff_tmp158, r800_fff_tmp159, r800_fff_tmp160;
		BitBlock r800_fff_tmp161, cc_range_ac0_ae6_3, sequence_e0_ab_adv;
		BitBlock r800_fff_tmp162, byte_ac, sequence_e0_ac, r800_fff_tmp163;
		BitBlock r800_fff_tmp164, r800_fff_tmp165, r800_fff_tmp166, r800_fff_tmp167;
		BitBlock r800_fff_tmp168, r800_fff_tmp169, cc_range_b01_b3c_3;
		BitBlock sequence_e0_ac_adv, r800_fff_tmp170, r800_fff_tmp171, byte_ad;
		BitBlock sequence_e0_ad, r800_fff_tmp172, r800_fff_tmp173, r800_fff_tmp174;
		BitBlock r800_fff_tmp175, r800_fff_tmp176, r800_fff_tmp177, r800_fff_tmp178;
		BitBlock r800_fff_tmp179, cc_range_b40_b71_3, sequence_e0_ad_adv;
		BitBlock r800_fff_tmp180, byte_ae, sequence_e0_ae, r800_fff_tmp181;
		BitBlock r800_fff_tmp182, r800_fff_tmp183, r800_fff_tmp184, r800_fff_tmp185;
		BitBlock r800_fff_tmp186, r800_fff_tmp187, r800_fff_tmp188, r800_fff_tmp189;
		BitBlock r800_fff_tmp190, r800_fff_tmp191, r800_fff_tmp192, r800_fff_tmp193;
		BitBlock r800_fff_tmp194, r800_fff_tmp195, r800_fff_tmp196, r800_fff_tmp197;
		BitBlock r800_fff_tmp198, r800_fff_tmp199, r800_fff_tmp200, r800_fff_tmp201;
		BitBlock r800_fff_tmp202, r800_fff_tmp203, r800_fff_tmp204, r800_fff_tmp205;
		BitBlock r800_fff_tmp206, r800_fff_tmp207, r800_fff_tmp208, cc_range_b82_bbe_3;
		BitBlock sequence_e0_ae_adv, r800_fff_tmp209, byte_af, sequence_e0_af;
		BitBlock r800_fff_tmp210, r800_fff_tmp211, r800_fff_tmp212, r800_fff_tmp213;
		BitBlock r800_fff_tmp214, r800_fff_tmp215, r800_fff_tmp216, cc_range_bc0_be6_3;
		BitBlock sequence_e0_af_adv, r800_fff_tmp217, byte_b0, sequence_e0_b0;
		BitBlock r800_fff_tmp218, r800_fff_tmp219, r800_fff_tmp220, r800_fff_tmp221;
		BitBlock r800_fff_tmp222, r800_fff_tmp223, r800_fff_tmp224, r800_fff_tmp225;
		BitBlock r800_fff_tmp226, cc_range_c00_c3d_3, sequence_e0_b0_adv;
		BitBlock r800_fff_tmp227, byte_b1, sequence_e0_b1, r800_fff_tmp228;
		BitBlock r800_fff_tmp229, r800_fff_tmp230, r800_fff_tmp231, r800_fff_tmp232;
		BitBlock r800_fff_tmp233, r800_fff_tmp234, r800_fff_tmp235, cc_range_c40_c66_3;
		BitBlock sequence_e0_b1_adv, r800_fff_tmp236, byte_b2, sequence_e0_b2;
		BitBlock r800_fff_tmp237, r800_fff_tmp238, r800_fff_tmp239, r800_fff_tmp240;
		BitBlock r800_fff_tmp241, r800_fff_tmp242, r800_fff_tmp243, cc_range_c81_cbc_3;
		BitBlock sequence_e0_b2_adv, r800_fff_tmp244, byte_b3, sequence_e0_b3;
		BitBlock r800_fff_tmp245, r800_fff_tmp246, r800_fff_tmp247, r800_fff_tmp248;
		BitBlock r800_fff_tmp249, cc_range_cc0_cf1_3, sequence_e0_b3_adv;
		BitBlock r800_fff_tmp250, byte_b4, sequence_e0_b4, r800_fff_tmp251;
		BitBlock r800_fff_tmp252, r800_fff_tmp253, r800_fff_tmp254, r800_fff_tmp255;
		BitBlock cc_range_d01_d3d_3, sequence_e0_b4_adv, r800_fff_tmp256, byte_b5;
		BitBlock sequence_e0_b5, r800_fff_tmp257, r800_fff_tmp258, r800_fff_tmp259;
		BitBlock r800_fff_tmp260, r800_fff_tmp261, r800_fff_tmp262, r800_fff_tmp263;
		BitBlock r800_fff_tmp264, r800_fff_tmp265, cc_range_d40_d7a_3;
		BitBlock sequence_e0_b5_adv, r800_fff_tmp266, byte_b6, sequence_e0_b6;
		BitBlock r800_fff_tmp267, r800_fff_tmp268, r800_fff_tmp269, r800_fff_tmp270;
		BitBlock r800_fff_tmp271, r800_fff_tmp272, r800_fff_tmp273, r800_fff_tmp274;
		BitBlock r800_fff_tmp275, r800_fff_tmp276, r800_fff_tmp277, r800_fff_tmp278;
		BitBlock r800_fff_tmp279, r800_fff_tmp280, r800_fff_tmp281, r800_fff_tmp282;
		BitBlock r800_fff_tmp283, cc_range_d82_dbd_3, sequence_e0_b6_adv;
		BitBlock r800_fff_tmp284, byte_b7, sequence_e0_b7, r800_fff_tmp285;
		BitBlock r800_fff_tmp286, r800_fff_tmp287, r800_fff_tmp288, r800_fff_tmp289;
		BitBlock r800_fff_tmp290, r800_fff_tmp291, r800_fff_tmp292, r800_fff_tmp293;
		BitBlock r800_fff_tmp294, r800_fff_tmp295, cc_range_dc0_df2_3;
		BitBlock sequence_e0_b7_adv, r800_fff_tmp296, byte_b8, sequence_e0_b8;
		BitBlock r800_fff_tmp297, r800_fff_tmp298, byte_range_81_ba;
		BitBlock sequence_e0_b8_adv, r800_fff_tmp299, byte_b9, sequence_e0_b9;
		BitBlock r800_fff_tmp300, r800_fff_tmp301, r800_fff_tmp302, cc_range_e40_e50_3;
		BitBlock sequence_e0_b9_adv, r800_fff_tmp303, byte_ba, sequence_e0_ba;
		BitBlock r800_fff_tmp304, r800_fff_tmp305, r800_fff_tmp306, r800_fff_tmp307;
		BitBlock r800_fff_tmp308, r800_fff_tmp309, r800_fff_tmp310, r800_fff_tmp311;
		BitBlock r800_fff_tmp312, r800_fff_tmp313, r800_fff_tmp314, r800_fff_tmp315;
		BitBlock r800_fff_tmp316, r800_fff_tmp317, r800_fff_tmp318, r800_fff_tmp319;
		BitBlock r800_fff_tmp320, r800_fff_tmp321, r800_fff_tmp322, r800_fff_tmp323;
		BitBlock r800_fff_tmp324, r800_fff_tmp325, cc_range_e81_ebb_3;
		BitBlock sequence_e0_ba_adv, r800_fff_tmp326, byte_bb, sequence_e0_bb;
		BitBlock r800_fff_tmp327, r800_fff_tmp328, r800_fff_tmp329, r800_fff_tmp330;
		BitBlock r800_fff_tmp331, r800_fff_tmp332, cc_range_ec0_edc_3;
		BitBlock sequence_e0_bb_adv, r800_fff_tmp333, byte_bc, sequence_e0_bc;
		BitBlock r800_fff_tmp334, r800_fff_tmp335, r800_fff_tmp336, r800_fff_tmp337;
		BitBlock r800_fff_tmp338, r800_fff_tmp339, r800_fff_tmp340, cc_range_f00_f3e_3;
		BitBlock sequence_e0_bc_adv, r800_fff_tmp341, byte_bd, sequence_e0_bd;
		BitBlock r800_fff_tmp342, r800_fff_tmp343, r800_fff_tmp344, r800_fff_tmp345;
		BitBlock r800_fff_tmp346, cc_range_f40_f71_3, sequence_e0_bd_adv;
		BitBlock r800_fff_tmp347, byte_be, sequence_e0_be, r800_fff_tmp348;
		BitBlock r800_fff_tmp349, r800_fff_tmp350, r800_fff_tmp351, r800_fff_tmp352;
		BitBlock r800_fff_tmp353, r800_fff_tmp354, r800_fff_tmp355, r800_fff_tmp356;
		BitBlock cc_range_f80_f99_3, sequence_e0_be_adv, r800_fff_tmp357, byte_bf;
		BitBlock sequence_e0_bf, byte_86, sequence_e0_bf_adv, r800_fff_tmp358;
		BitBlock r800_1fff_tmp1, r800_1fff_tmp2, byte_e1, r1000_1fff_tmp1;
		BitBlock r1000_1fff_tmp2, byte_80, r1000_1fff_tmp3, sequence_e1_80;
		BitBlock byte_e1_adv, sequence_e1_80_adv, r1000_1fff_tmp4, r1000_1fff_tmp5;
		BitBlock byte_81, sequence_e1_81, r1000_1fff_tmp6, r1000_1fff_tmp7;
		BitBlock cc_range_1040_1050_3, sequence_e1_81_adv, r1000_1fff_tmp8;
		BitBlock r1000_1fff_tmp9, r1000_1fff_tmp10, byte_82, sequence_e1_82;
		BitBlock r1000_1fff_tmp11, r1000_1fff_tmp12, r1000_1fff_tmp13;
		BitBlock r1000_1fff_tmp14, r1000_1fff_tmp15, cc_range_1080_10a0_3;
		BitBlock sequence_e1_82_adv, r1000_1fff_tmp16, r1000_1fff_tmp17, byte_83;
		BitBlock sequence_e1_83, r1000_1fff_tmp18, r1000_1fff_tmp19, r1000_1fff_tmp20;
		BitBlock r1000_1fff_tmp21, r1000_1fff_tmp22, r1000_1fff_tmp23;
		BitBlock r1000_1fff_tmp24, r1000_1fff_tmp25, r1000_1fff_tmp26;
		BitBlock r1000_1fff_tmp27, r1000_1fff_tmp28, r1000_1fff_tmp29;
		BitBlock r1000_1fff_tmp30, r1000_1fff_tmp31, r1000_1fff_tmp32;
		BitBlock r1000_1fff_tmp33, cc_range_10c0_10fc_3, sequence_e1_83_adv;
		BitBlock r1000_1fff_tmp34, r1000_1fff_tmp35, r1000_1fff_tmp36;
		BitBlock r1000_1fff_tmp37, byte_range_84_88, byte_e1_byte_range_84_88;
		BitBlock r1000_1fff_tmp38, byte_e1_byte_range_84_88_sfx, r1000_1fff_tmp39;
		BitBlock r1000_1fff_tmp40, byte_89, sequence_e1_89, r1000_1fff_tmp41;
		BitBlock byte_range_80_88, r1000_1fff_tmp42, sequence_e1_89_byte_range_80_88;
		BitBlock r1000_1fff_tmp43, byte_8a, sequence_e1_8a, r1000_1fff_tmp44;
		BitBlock sequence_e1_8a_byte_range_80_88, r1000_1fff_tmp45, byte_8b;
		BitBlock sequence_e1_8b, r1000_1fff_tmp46, sequence_e1_8b_80, r1000_1fff_tmp47;
		BitBlock byte_8c, sequence_e1_8c, r1000_1fff_tmp48, byte_range_80_90;
		BitBlock r1000_1fff_tmp49, sequence_e1_8c_byte_range_80_90, byte_8d;
		BitBlock sequence_e1_8d, byte_range_80_9a, r1000_1fff_tmp50;
		BitBlock sequence_e1_8d_byte_range_80_9a, r1000_1fff_tmp51, byte_8e;
		BitBlock sequence_e1_8e, r1000_1fff_tmp52, sequence_e1_8e_byte_range_80_8f;
		BitBlock byte_8f, sequence_e1_8f, r1000_1fff_tmp53, r1000_1fff_tmp54;
		BitBlock r1000_1fff_tmp55, r1000_1fff_tmp56, byte_range_80_b4;
		BitBlock r1000_1fff_tmp57, sequence_e1_8f_byte_range_80_b4, r1000_1fff_tmp58;
		BitBlock byte_90, sequence_e1_90, r1000_1fff_tmp59, r1000_1fff_tmp60;
		BitBlock byte_range_81_bf, r1000_1fff_tmp61, sequence_e1_90_byte_range_81_bf;
		BitBlock byte_91, sequence_e1_91, r1000_1fff_tmp62;
		BitBlock sequence_e1_91_byte_range_80_bf, byte_99, sequence_e1_99;
		BitBlock r1000_1fff_tmp63, r1000_1fff_tmp64, r1000_1fff_tmp65;
		BitBlock byte_range_80_ac, r1000_1fff_tmp66, sequence_e1_99_byte_range_80_ac;
		BitBlock byte_9a, sequence_e1_9a, byte_range_81_9a, r1000_1fff_tmp67;
		BitBlock sequence_e1_9a_byte_range_81_9a, byte_9b, sequence_e1_9b;
		BitBlock r1000_1fff_tmp68, r1000_1fff_tmp69, byte_range_80_aa;
		BitBlock r1000_1fff_tmp70, sequence_e1_9b_byte_range_80_aa, byte_9c;
		BitBlock sequence_e1_9c, r1000_1fff_tmp71, byte_range_80_8c, r1000_1fff_tmp72;
		BitBlock sequence_e1_9c_byte_range_80_8c, byte_9d, sequence_e1_9d;
		BitBlock r1000_1fff_tmp73, byte_range_80_93, r1000_1fff_tmp74;
		BitBlock sequence_e1_9d_byte_range_80_93, byte_9e, sequence_e1_9e;
		BitBlock r1000_1fff_tmp75, sequence_e1_9e_byte_range_80_bf, byte_9f;
		BitBlock sequence_e1_9f, r1000_1fff_tmp76, sequence_e1_9f_byte_range_80_93;
		BitBlock r1000_1fff_tmp77, sequence_e1_a0, r1000_1fff_tmp78, r1000_1fff_tmp79;
		BitBlock r1000_1fff_tmp80, byte_range_8b_8d, r1000_1fff_tmp81;
		BitBlock sequence_e1_a0_byte_range_8b_8d, sequence_e1_a1, r1000_1fff_tmp82;
		BitBlock sequence_e1_a1_byte_range_80_b7, sequence_e1_a2, r1000_1fff_tmp83;
		BitBlock sequence_e1_a2_byte_range_80_aa, sequence_e1_a3, r1000_1fff_tmp84;
		BitBlock r1000_1fff_tmp85, r1000_1fff_tmp86, byte_range_80_b5;
		BitBlock r1000_1fff_tmp87, sequence_e1_a3_byte_range_80_b5, sequence_e1_a4;
		BitBlock r1000_1fff_tmp88, byte_range_80_9e, r1000_1fff_tmp89;
		BitBlock sequence_e1_a4_byte_range_80_9e, r1000_1fff_tmp90, sequence_e1_a5;
		BitBlock r1000_1fff_tmp91, r1000_1fff_tmp92, r1000_1fff_tmp93;
		BitBlock r1000_1fff_tmp94, byte_range_86_ad, r1000_1fff_tmp95;
		BitBlock sequence_e1_a5_byte_range_86_ad, r1000_1fff_tmp96, sequence_e1_a6;
		BitBlock r1000_1fff_tmp97, r1000_1fff_tmp98, byte_range_80_ab;
		BitBlock r1000_1fff_tmp99, sequence_e1_a6_byte_range_80_ab, sequence_e1_a7;
		BitBlock byte_range_80_89, r1000_1fff_tmp100, sequence_e1_a7_byte_range_80_89;
		BitBlock r1000_1fff_tmp101, sequence_e1_a8, r1000_1fff_tmp102;
		BitBlock r1000_1fff_tmp103, sequence_e1_a8_byte_range_80_9b, sequence_e1_a9;
		BitBlock r1000_1fff_tmp104, sequence_e1_a9_byte_range_80_9e, sequence_e1_aa;
		BitBlock r1000_1fff_tmp105, sequence_e1_aa_byte_range_80_89, sequence_e1_ac;
		BitBlock r1000_1fff_tmp106, sequence_e1_ac_byte_range_80_bf, sequence_e1_ad;
		BitBlock byte_range_80_8b, r1000_1fff_tmp107, sequence_e1_ad_byte_range_80_8b;
		BitBlock sequence_e1_ae, r1000_1fff_tmp108, sequence_e1_ae_byte_range_80_bf;
		BitBlock sequence_e1_af, r1000_1fff_tmp109, byte_range_80_b3;
		BitBlock r1000_1fff_tmp110, sequence_e1_af_byte_range_80_b3, sequence_e1_b0;
		BitBlock r1000_1fff_tmp111, sequence_e1_b0_byte_range_80_b7, sequence_e1_b1;
		BitBlock r1000_1fff_tmp112, sequence_e1_b1_byte_range_80_89, sequence_e1_b3;
		BitBlock r1000_1fff_tmp113, byte_range_90_92, r1000_1fff_tmp114;
		BitBlock sequence_e1_b3_byte_range_90_92, sequence_e1_b4, r1000_1fff_tmp115;
		BitBlock sequence_e1_b4_byte_range_80_bf, sequence_e1_b7, r1000_1fff_tmp116;
		BitBlock sequence_e1_b7_byte_range_80_b5, sequence_e1_b8, r1000_1fff_tmp117;
		BitBlock sequence_e1_b8_byte_range_80_bf, sequence_e1_bc, byte_range_80_95;
		BitBlock r1000_1fff_tmp118, sequence_e1_bc_byte_range_80_95, sequence_e1_bd;
		BitBlock r1000_1fff_tmp119, byte_range_80_85, r1000_1fff_tmp120;
		BitBlock sequence_e1_bd_byte_range_80_85, sequence_e1_be, r1000_1fff_tmp121;
		BitBlock sequence_e1_be_byte_range_80_b4, sequence_e1_bf, r1000_1fff_tmp122;
		BitBlock r1000_1fff_tmp123, byte_range_82_84, r1000_1fff_tmp124;
		BitBlock sequence_e1_bf_byte_range_82_84, r800_4dff_tmp2, byte_range_e2_e3;
		BitBlock r800_4dff_tmp3, r2000_4dff_tmp1, r2000_4dff_tmp2, byte_e2;
		BitBlock r2000_2fff_tmp1, r2000_2fff_tmp2, r2000_2fff_tmp3, sequence_e2_80;
		BitBlock byte_e2_adv, r2000_2fff_tmp4, sequence_e2_80_adv, r2000_2fff_tmp5;
		BitBlock r2000_2fff_tmp6, r2000_2fff_tmp7, sequence_e2_81, r2000_2fff_tmp8;
		BitBlock r2000_2fff_tmp9, r2000_2fff_tmp10, r2000_2fff_tmp11, r2000_2fff_tmp12;
		BitBlock cc_range_2040_207f_3, sequence_e2_81_adv, r2000_2fff_tmp13;
		BitBlock sequence_e2_82, r2000_2fff_tmp14, r2000_2fff_tmp15, byte_range_90_9c;
		BitBlock sequence_e2_82_adv, r2000_2fff_tmp16, r2000_2fff_tmp17;
		BitBlock sequence_e2_83, r2000_2fff_tmp18, r2000_2fff_tmp19, r2000_2fff_tmp20;
		BitBlock r2000_2fff_tmp21, r2000_2fff_tmp22, r2000_2fff_tmp23;
		BitBlock r2000_2fff_tmp24, r2000_2fff_tmp25, cc_range_20d0_20e5_3;
		BitBlock sequence_e2_83_adv, r2000_2fff_tmp26, byte_84, sequence_e2_84;
		BitBlock r2000_2fff_tmp27, r2000_2fff_tmp28, r2000_2fff_tmp29;
		BitBlock r2000_2fff_tmp30, r2000_2fff_tmp31, r2000_2fff_tmp32;
		BitBlock r2000_2fff_tmp33, r2000_2fff_tmp34, r2000_2fff_tmp35;
		BitBlock r2000_2fff_tmp36, r2000_2fff_tmp37, r2000_2fff_tmp38;
		BitBlock r2000_2fff_tmp39, r2000_2fff_tmp40, r2000_2fff_tmp41;
		BitBlock r2000_2fff_tmp42, r2000_2fff_tmp43, r2000_2fff_tmp44;
		BitBlock r2000_2fff_tmp45, r2000_2fff_tmp46, r2000_2fff_tmp47;
		BitBlock r2000_2fff_tmp48, r2000_2fff_tmp49, r2000_2fff_tmp50;
		BitBlock r2000_2fff_tmp51, r2000_2fff_tmp52, r2000_2fff_tmp53;
		BitBlock r2000_2fff_tmp54, cc_range_2102_213c_3, sequence_e2_84_adv;
		BitBlock r2000_2fff_tmp55, byte_85, sequence_e2_85, r2000_2fff_tmp56;
		BitBlock r2000_2fff_tmp57, r2000_2fff_tmp58, r2000_2fff_tmp59;
		BitBlock r2000_2fff_tmp60, cc_range_2145_2160_3, sequence_e2_85_adv;
		BitBlock r2000_2fff_tmp61, sequence_e2_86, r2000_2fff_tmp62, r2000_2fff_tmp63;
		BitBlock sequence_e2_86_adv, r2000_2fff_tmp64, sequence_e2_b0;
		BitBlock r2000_2fff_tmp65, r2000_2fff_tmp66, r2000_2fff_tmp67;
		BitBlock cc_range_2c00_2c30_3, sequence_e2_b0_adv, r2000_2fff_tmp68;
		BitBlock sequence_e2_b1, r2000_2fff_tmp69, r2000_2fff_tmp70;
		BitBlock cc_range_2c40_2c60_3, sequence_e2_b1_adv, r2000_2fff_tmp71;
		BitBlock sequence_e2_b2, sequence_e2_b2_adv, r2000_2fff_tmp72;
		BitBlock r2000_2fff_tmp73, sequence_e2_b3, r2000_2fff_tmp74, r2000_2fff_tmp75;
		BitBlock r2000_2fff_tmp76, r2000_2fff_tmp77, r2000_2fff_tmp78;
		BitBlock r2000_2fff_tmp79, cc_range_2cc0_2ceb_3, sequence_e2_b3_adv;
		BitBlock r2000_2fff_tmp80, sequence_e2_b4, r2000_2fff_tmp81, r2000_2fff_tmp82;
		BitBlock r2000_2fff_tmp83, r2000_2fff_tmp84, r2000_2fff_tmp85;
		BitBlock r2000_2fff_tmp86, r2000_2fff_tmp87, r2000_2fff_tmp88;
		BitBlock r2000_2fff_tmp89, r2000_2fff_tmp90, cc_range_2d00_2d30_3;
		BitBlock sequence_e2_b4_adv, r2000_2fff_tmp91, sequence_e2_b5;
		BitBlock r2000_2fff_tmp92, r2000_2fff_tmp93, r2000_2fff_tmp94;
		BitBlock r2000_2fff_tmp95, r2000_2fff_tmp96, r2000_2fff_tmp97;
		BitBlock cc_range_2d40_2d7f_3, sequence_e2_b5_adv, r2000_2fff_tmp98;
		BitBlock sequence_e2_b6, r2000_2fff_tmp99, r2000_2fff_tmp100;
		BitBlock r2000_2fff_tmp101, r2000_2fff_tmp102, r2000_2fff_tmp103;
		BitBlock r2000_2fff_tmp104, r2000_2fff_tmp105, r2000_2fff_tmp106;
		BitBlock r2000_2fff_tmp107, r2000_2fff_tmp108, r2000_2fff_tmp109;
		BitBlock r2000_2fff_tmp110, r2000_2fff_tmp111, r2000_2fff_tmp112;
		BitBlock r2000_2fff_tmp113, r2000_2fff_tmp114, cc_range_2d80_2db8_3;
		BitBlock sequence_e2_b6_adv, r2000_2fff_tmp115, sequence_e2_b7;
		BitBlock r2000_2fff_tmp116, r2000_2fff_tmp117, r2000_2fff_tmp118;
		BitBlock r2000_2fff_tmp119, r2000_2fff_tmp120, r2000_2fff_tmp121;
		BitBlock r2000_2fff_tmp122, cc_range_2dc0_2de0_3, sequence_e2_b7_adv;
		BitBlock r2000_2fff_tmp123, r2000_4dff_tmp3, byte_e3, r2000_4dff_tmp4;
		BitBlock r3000_4dff_tmp1, r3000_4dff_tmp2, r3000_4dff_tmp3, sequence_e3_80;
		BitBlock byte_e3_adv, r3000_4dff_tmp4, r3000_4dff_tmp5, r3000_4dff_tmp6;
		BitBlock r3000_4dff_tmp7, r3000_4dff_tmp8, r3000_4dff_tmp9, r3000_4dff_tmp10;
		BitBlock r3000_4dff_tmp11, r3000_4dff_tmp12, r3000_4dff_tmp13;
		BitBlock r3000_4dff_tmp14, r3000_4dff_tmp15, r3000_4dff_tmp16;
		BitBlock r3000_4dff_tmp17, r3000_4dff_tmp18, r3000_4dff_tmp19;
		BitBlock cc_range_3005_3038_3, sequence_e3_80_adv, r3000_4dff_tmp20;
		BitBlock r3000_4dff_tmp21, r3000_4dff_tmp22, sequence_e3_81, r3000_4dff_tmp23;
		BitBlock r3000_4dff_tmp24, sequence_e3_81_adv, r3000_4dff_tmp25;
		BitBlock sequence_e3_82, r3000_4dff_tmp26, r3000_4dff_tmp27, r3000_4dff_tmp28;
		BitBlock r3000_4dff_tmp29, r3000_4dff_tmp30, r3000_4dff_tmp31;
		BitBlock r3000_4dff_tmp32, r3000_4dff_tmp33, r3000_4dff_tmp34;
		BitBlock r3000_4dff_tmp35, r3000_4dff_tmp36, r3000_4dff_tmp37;
		BitBlock r3000_4dff_tmp38, r3000_4dff_tmp39, r3000_4dff_tmp40;
		BitBlock r3000_4dff_tmp41, cc_range_3080_30a1_3, sequence_e3_82_adv;
		BitBlock r3000_4dff_tmp42, sequence_e3_83, r3000_4dff_tmp43, r3000_4dff_tmp44;
		BitBlock r3000_4dff_tmp45, r3000_4dff_tmp46, cc_range_30c0_30fc_3;
		BitBlock sequence_e3_83_adv, r3000_4dff_tmp47, sequence_e3_84;
		BitBlock r3000_4dff_tmp48, r3000_4dff_tmp49, r3000_4dff_tmp50;
		BitBlock r3000_4dff_tmp51, r3000_4dff_tmp52, r3000_4dff_tmp53;
		BitBlock r3000_4dff_tmp54, r3000_4dff_tmp55, cc_range_3105_3131_3;
		BitBlock sequence_e3_84_adv, r3000_4dff_tmp56, r3000_4dff_tmp57;
		BitBlock sequence_e3_85, sequence_e3_85_adv, r3000_4dff_tmp58;
		BitBlock r3000_4dff_tmp59, r3000_4dff_tmp60, sequence_e3_86, r3000_4dff_tmp61;
		BitBlock r3000_4dff_tmp62, r3000_4dff_tmp63, r3000_4dff_tmp64;
		BitBlock cc_range_3180_31a0_3, sequence_e3_86_adv, r3000_4dff_tmp65;
		BitBlock r3000_4dff_tmp66, byte_87, sequence_e3_87, sequence_e3_87_adv;
		BitBlock r3000_4dff_tmp67, byte_e3_byte_range_90_bf, r3000_4dff_tmp68;
		BitBlock byte_e3_byte_range_90_bf_sfx, r3000_4dff_tmp69, r3000_4dff_tmp70;
		BitBlock r3000_4dff_tmp71, r3000_4dff_tmp72, byte_e4_byte_range_80_b5;
		BitBlock r3000_4dff_tmp73, byte_e4_byte_range_80_b5_sfx, byte_e4_adv;
		BitBlock sequence_e4_b6, r3000_4dff_tmp74, sequence_e4_b6_byte_range_80_b5;
		BitBlock r800_ffff_tmp9, byte_range_b8_bf, r800_ffff_tmp10, r800_ffff_tmp11;
		BitBlock r800_ffff_tmp12, r800_ffff_tmp13, byte_range_e5_e9, r800_ffff_tmp14;
		BitBlock byte_e4_byte_range_b8_bf, r4e00_9fff_tmp1;
		BitBlock byte_e4_byte_range_b8_bf_sfx, r4e00_9fff_tmp2, r4e00_9fff_tmp3;
		BitBlock r4e00_9fff_tmp4, byte_range_e5_e8, r4e00_9fff_tmp5;
		BitBlock byte_range_e5_e8_sfx, r4e00_9fff_tmp6, byte_range_e5_e8_sfx_sfx;
		BitBlock r4e00_9fff_tmp7, r4e00_9fff_tmp8, r4e00_9fff_tmp9, byte_e9;
		BitBlock r4e00_9fff_tmp10, r4e00_9fff_tmp11, byte_e9_adv, sequence_e9_80;
		BitBlock r4e00_9fff_tmp12, r4e00_9fff_tmp13, sequence_e9_80_byte_range_80_8c;
		BitBlock r800_ffff_tmp15, byte_range_ea_ef, ra000_ffff_tmp1, ra000_ffff_tmp2;
		BitBlock ra000_ffff_tmp3, byte_ea, ra000_ffff_tmp4, ra000_ffff_tmp5;
		BitBlock ra000_ffff_tmp6, byte_range_80_91, ra000_ffff_tmp7;
		BitBlock byte_ea_byte_range_80_91, ra000_ffff_tmp8;
		BitBlock byte_ea_byte_range_80_91_sfx, ra000_ffff_tmp9, ra000_ffff_tmp10;
		BitBlock byte_92, byte_ea_adv, sequence_ea_92, ra000_ffff_tmp11;
		BitBlock ra000_ffff_tmp12, ra000_ffff_tmp13, ra000_ffff_tmp14;
		BitBlock sequence_ea_92_byte_range_80_8c, ra000_ffff_tmp15, byte_93;
		BitBlock sequence_ea_93, ra000_ffff_tmp16, ra000_ffff_tmp17, ra000_ffff_tmp18;
		BitBlock ra000_ffff_tmp19, byte_range_90_bd, ra000_ffff_tmp20;
		BitBlock sequence_ea_93_byte_range_90_bd, byte_94, sequence_ea_94;
		BitBlock ra000_ffff_tmp21, sequence_ea_94_byte_range_80_bf, ra000_ffff_tmp22;
		BitBlock byte_98, sequence_ea_98, ra000_ffff_tmp23;
		BitBlock sequence_ea_98_byte_range_80_8c, ra000_ffff_tmp24, ra000_ffff_tmp25;
		BitBlock sequence_ea_99, ra000_ffff_tmp26, sequence_ea_99_byte_range_80_af;
		BitBlock sequence_ea_9a, ra000_ffff_tmp27, byte_range_80_9d, ra000_ffff_tmp28;
		BitBlock sequence_ea_9a_byte_range_80_9d, ra000_ffff_tmp29, sequence_ea_9b;
		BitBlock ra000_ffff_tmp30, ra000_ffff_tmp31, sequence_ea_9b_byte_range_80_b1;
		BitBlock ra000_ffff_tmp32, sequence_ea_9c, ra000_ffff_tmp33, ra000_ffff_tmp34;
		BitBlock byte_range_97_9f, ra000_ffff_tmp35, sequence_ea_9c_byte_range_97_9f;
		BitBlock ra000_ffff_tmp36, sequence_ea_9d, ra000_ffff_tmp37;
		BitBlock sequence_ea_9d_byte_range_80_bf, ra000_ffff_tmp38, sequence_ea_9e;
		BitBlock ra000_ffff_tmp39, ra000_ffff_tmp40, ra000_ffff_tmp41;
		BitBlock sequence_ea_9e_byte_range_80_88, sequence_ea_9f, ra000_ffff_tmp42;
		BitBlock byte_range_b7_bf, ra000_ffff_tmp43, sequence_ea_9f_byte_range_b7_bf;
		BitBlock ra000_ffff_tmp44, sequence_ea_a0, ra000_ffff_tmp45, ra000_ffff_tmp46;
		BitBlock byte_range_80_a7, ra000_ffff_tmp47, sequence_ea_a0_byte_range_80_a7;
		BitBlock ra000_ffff_tmp48, sequence_ea_a1, ra000_ffff_tmp49, ra000_ffff_tmp50;
		BitBlock ra000_ffff_tmp51, sequence_ea_a1_byte_range_80_b3, sequence_ea_a2;
		BitBlock ra000_ffff_tmp52, sequence_ea_a2_byte_range_80_bf, sequence_ea_a3;
		BitBlock ra000_ffff_tmp53, byte_range_80_84, ra000_ffff_tmp54;
		BitBlock sequence_ea_a3_byte_range_80_84, sequence_ea_a4, ra000_ffff_tmp55;
		BitBlock ra000_ffff_tmp56, ra000_ffff_tmp57, sequence_ea_a4_byte_range_80_ad;
		BitBlock ra000_ffff_tmp58, sequence_ea_a5, ra000_ffff_tmp59;
		BitBlock sequence_ea_a5_byte_range_80_93, ra000_ffff_tmp60, sequence_ea_a6;
		BitBlock ra000_ffff_tmp61, sequence_ea_a6_byte_range_80_bf, ra000_ffff_tmp62;
		BitBlock sequence_ea_a7, ra000_ffff_tmp63, sequence_ea_a7_80, sequence_ea_a8;
		BitBlock ra000_ffff_tmp64, ra000_ffff_tmp65, byte_range_80_b6;
		BitBlock ra000_ffff_tmp66, sequence_ea_a8_byte_range_80_b6, sequence_ea_a9;
		BitBlock ra000_ffff_tmp67, ra000_ffff_tmp68, byte_range_80_8d;
		BitBlock ra000_ffff_tmp69, sequence_ea_a9_byte_range_80_8d, sequence_ea_aa;
		BitBlock ra000_ffff_tmp70, sequence_ea_aa_byte_range_80_bf, sequence_ea_ab;
		BitBlock ra000_ffff_tmp71, byte_range_80_82, ra000_ffff_tmp72;
		BitBlock sequence_ea_ab_byte_range_80_82, sequence_ea_ac, ra000_ffff_tmp73;
		BitBlock ra000_ffff_tmp74, byte_range_81_86, ra000_ffff_tmp75;
		BitBlock sequence_ea_ac_byte_range_81_86, sequence_ea_ad, ra000_ffff_tmp76;
		BitBlock ra000_ffff_tmp77, sequence_ea_ad_byte_range_80_9a, sequence_ea_af;
		BitBlock ra000_ffff_tmp78, ra000_ffff_tmp79, ra000_ffff_tmp80;
		BitBlock sequence_ea_af_byte_range_80_aa, sequence_ea_b0, ra000_ffff_tmp81;
		BitBlock sequence_ea_b0_byte_range_80_bf, ra000_ffff_tmp82, ra000_ffff_tmp83;
		BitBlock byte_range_eb_ec, ra000_ffff_tmp84, byte_range_eb_ec_sfx;
		BitBlock ra000_ffff_tmp85, byte_range_eb_ec_sfx_sfx, byte_ed, byte_ed_adv;
		BitBlock sequence_ed_80, ra000_ffff_tmp86, ra000_ffff_tmp87, byte_range_80_a3;
		BitBlock ra000_ffff_tmp88, sequence_ed_80_byte_range_80_a3, byte_ef;
		BitBlock ra000_ffff_tmp89, ra000_ffff_tmp90, byte_range_a4_a8;
		BitBlock ra000_ffff_tmp91, byte_ef_byte_range_a4_a8, ra000_ffff_tmp92;
		BitBlock byte_ef_byte_range_a4_a8_sfx, byte_ef_adv, sequence_ef_a9;
		BitBlock ra000_ffff_tmp93, sequence_ef_a9_byte_range_80_ad, sequence_ef_aa;
		BitBlock ra000_ffff_tmp94, sequence_ef_aa_byte_range_80_bf, sequence_ef_ab;
		BitBlock ra000_ffff_tmp95, byte_range_80_99, ra000_ffff_tmp96;
		BitBlock sequence_ef_ab_byte_range_80_99, sequence_ef_ac, byte_range_80_86;
		BitBlock ra000_ffff_tmp97, sequence_ef_ac_byte_range_80_86, sequence_ef_ad;
		BitBlock ra000_ffff_tmp98, sequence_ef_ad_byte_range_80_81, sequence_ef_ae;
		BitBlock ra000_ffff_tmp99, sequence_ef_ae_byte_range_80_b1, sequence_ef_af;
		BitBlock ra000_ffff_tmp100, ra000_ffff_tmp101, ra000_ffff_tmp102;
		BitBlock byte_range_93_bf, ra000_ffff_tmp103, sequence_ef_af_byte_range_93_bf;
		BitBlock sequence_ef_b0, ra000_ffff_tmp104, sequence_ef_b0_byte_range_80_bf;
		BitBlock sequence_ef_b1, ra000_ffff_tmp105, sequence_ef_b1_byte_range_80_9d;
		BitBlock sequence_ef_b2, ra000_ffff_tmp106, sequence_ef_b2_byte_range_80_bf;
		BitBlock sequence_ef_b4, ra000_ffff_tmp107, byte_range_80_bd;
		BitBlock ra000_ffff_tmp108, sequence_ef_b4_byte_range_80_bd, sequence_ef_b5;
		BitBlock ra000_ffff_tmp109, sequence_ef_b5_byte_range_90_bf, sequence_ef_b6;
		BitBlock ra000_ffff_tmp110, sequence_ef_b6_byte_range_80_8f, sequence_ef_b7;
		BitBlock ra000_ffff_tmp111, sequence_ef_b7_byte_range_80_87, sequence_ef_b8;
		BitBlock ra000_ffff_tmp112, sequence_ef_b8_byte_range_80_8f, sequence_ef_b9;
		BitBlock ra000_ffff_tmp113, byte_range_8d_8f, ra000_ffff_tmp114;
		BitBlock sequence_ef_b9_byte_range_8d_8f, sequence_ef_ba, ra000_ffff_tmp115;
		BitBlock sequence_ef_ba_byte_range_80_bf, sequence_ef_bb, ra000_ffff_tmp116;
		BitBlock ra000_ffff_tmp117, ra000_ffff_tmp118, byte_range_80_bc;
		BitBlock ra000_ffff_tmp119, sequence_ef_bb_byte_range_80_bc, sequence_ef_bc;
		BitBlock byte_range_90_99, ra000_ffff_tmp120, sequence_ef_bc_byte_range_90_99;
		BitBlock sequence_ef_bd, ra000_ffff_tmp121, sequence_ef_bd_byte_range_81_9a;
		BitBlock sequence_ef_be, ra000_ffff_tmp122, ra000_ffff_tmp123;
		BitBlock byte_range_80_be, ra000_ffff_tmp124, sequence_ef_be_byte_range_80_be;
		BitBlock sequence_ef_bf, byte_range_82_87, ra000_ffff_tmp125;
		BitBlock sequence_ef_bf_byte_range_82_87, byte_range_f0_ff, byte_f0;
		BitBlock r10000_10ffff_tmp1, r10000_10ffff_tmp2, r10000_10ffff_tmp3;
		BitBlock sequence_f0_90, byte_f0_adv, r10000_10ffff_tmp4, r10000_10ffff_tmp5;
		BitBlock r10000_10ffff_tmp6, sequence_f0_90_80, sequence_f0_90_adv;
		BitBlock r10000_10ffff_tmp7, r10000_10ffff_tmp8, r10000_10ffff_tmp9;
		BitBlock r10000_10ffff_tmp10, r10000_10ffff_tmp11, r10000_10ffff_tmp12;
		BitBlock r10000_10ffff_tmp13, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, r10000_10ffff_tmp17, r10000_10ffff_tmp18;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, r10000_10ffff_tmp21;
		BitBlock r10000_10ffff_tmp22, r10000_10ffff_tmp23, r10000_10ffff_tmp24;
		BitBlock r10000_10ffff_tmp25, cc_range_10000_1003f_4, sequence_f0_90_80_adv;
		BitBlock r10000_10ffff_tmp26, r10000_10ffff_tmp27, r10000_10ffff_tmp28;
		BitBlock sequence_f0_90_81, r10000_10ffff_tmp29, r10000_10ffff_tmp30;
		BitBlock r10000_10ffff_tmp31, r10000_10ffff_tmp32, cc_range_10040_10050_4;
		BitBlock sequence_f0_90_81_adv, r10000_10ffff_tmp33, r10000_10ffff_tmp34;
		BitBlock r10000_10ffff_tmp35, sequence_f0_90_82, sequence_f0_90_82_adv;
		BitBlock r10000_10ffff_tmp36, r10000_10ffff_tmp37, r10000_10ffff_tmp38;
		BitBlock r10000_10ffff_tmp39, sequence_f0_90_83, r10000_10ffff_tmp40;
		BitBlock r10000_10ffff_tmp41, byte_range_80_ba, sequence_f0_90_83_adv;
		BitBlock r10000_10ffff_tmp42, r10000_10ffff_tmp43, r10000_10ffff_tmp44;
		BitBlock sequence_f0_90_85, r10000_10ffff_tmp45, r10000_10ffff_tmp46;
		BitBlock r10000_10ffff_tmp47, r10000_10ffff_tmp48, sequence_f0_90_85_adv;
		BitBlock r10000_10ffff_tmp49, r10000_10ffff_tmp50, sequence_f0_90_87;
		BitBlock r10000_10ffff_tmp51, r10000_10ffff_tmp52, sequence_f0_90_87_adv;
		BitBlock r10000_10ffff_tmp53, r10000_10ffff_tmp54, r10000_10ffff_tmp55;
		BitBlock sequence_f0_90_8a, r10000_10ffff_tmp56, r10000_10ffff_tmp57;
		BitBlock r10000_10ffff_tmp58, r10000_10ffff_tmp59, cc_range_10280_102a0_4;
		BitBlock sequence_f0_90_8a_adv, r10000_10ffff_tmp60, r10000_10ffff_tmp61;
		BitBlock sequence_f0_90_8b, r10000_10ffff_tmp62, r10000_10ffff_tmp63;
		BitBlock r10000_10ffff_tmp64, r10000_10ffff_tmp65, cc_range_102c0_102e0_4;
		BitBlock sequence_f0_90_8b_adv, r10000_10ffff_tmp66, r10000_10ffff_tmp67;
		BitBlock sequence_f0_90_8c, r10000_10ffff_tmp68, cc_range_10300_10330_4;
		BitBlock sequence_f0_90_8c_adv, r10000_10ffff_tmp69, sequence_f0_90_8d;
		BitBlock r10000_10ffff_tmp70, r10000_10ffff_tmp71, r10000_10ffff_tmp72;
		BitBlock r10000_10ffff_tmp73, cc_range_10340_10350_4, sequence_f0_90_8d_adv;
		BitBlock r10000_10ffff_tmp74, r10000_10ffff_tmp75, sequence_f0_90_8e;
		BitBlock r10000_10ffff_tmp76, r10000_10ffff_tmp77, r10000_10ffff_tmp78;
		BitBlock cc_range_10380_103a0_4, sequence_f0_90_8e_adv, r10000_10ffff_tmp79;
		BitBlock sequence_f0_90_8f, r10000_10ffff_tmp80, r10000_10ffff_tmp81;
		BitBlock r10000_10ffff_tmp82, r10000_10ffff_tmp83, r10000_10ffff_tmp84;
		BitBlock r10000_10ffff_tmp85, cc_range_103c0_103d1_4, sequence_f0_90_8f_adv;
		BitBlock r10000_10ffff_tmp86, r10000_10ffff_tmp87, byte_range_90_91;
		BitBlock sequence_f0_90_byte_range_90_91, r10000_10ffff_tmp88;
		BitBlock sequence_f0_90_byte_range_90_91_sfx, sequence_f0_90_92;
		BitBlock r10000_10ffff_tmp89, sequence_f0_90_92_byte_range_80_9d;
		BitBlock r10000_10ffff_tmp90, sequence_f0_90_94, r10000_10ffff_tmp91;
		BitBlock r10000_10ffff_tmp92, r10000_10ffff_tmp93;
		BitBlock sequence_f0_90_94_byte_range_80_a7, byte_95, sequence_f0_90_95;
		BitBlock r10000_10ffff_tmp94, r10000_10ffff_tmp95, r10000_10ffff_tmp96;
		BitBlock sequence_f0_90_95_byte_range_80_a3, r10000_10ffff_tmp97;
		BitBlock sequence_f0_90_98, r10000_10ffff_tmp98;
		BitBlock sequence_f0_90_98_byte_range_80_bf, sequence_f0_90_9c;
		BitBlock r10000_10ffff_tmp99, r10000_10ffff_tmp100, r10000_10ffff_tmp101;
		BitBlock sequence_f0_90_9c_byte_range_80_b6, sequence_f0_90_9d;
		BitBlock r10000_10ffff_tmp102, r10000_10ffff_tmp103, r10000_10ffff_tmp104;
		BitBlock sequence_f0_90_9d_byte_range_80_95, sequence_f0_90_a0;
		BitBlock r10000_10ffff_tmp105, r10000_10ffff_tmp106;
		BitBlock sequence_f0_90_a0_byte_range_80_85, sequence_f0_90_a1;
		BitBlock r10000_10ffff_tmp107, sequence_f0_90_a1_byte_range_80_95;
		BitBlock sequence_f0_90_a2, r10000_10ffff_tmp108, r10000_10ffff_tmp109;
		BitBlock sequence_f0_90_a2_byte_range_80_9e, sequence_f0_90_a4;
		BitBlock r10000_10ffff_tmp110, sequence_f0_90_a4_byte_range_80_95;
		BitBlock r10000_10ffff_tmp111, sequence_f0_90_a6, r10000_10ffff_tmp112;
		BitBlock r10000_10ffff_tmp113, r10000_10ffff_tmp114;
		BitBlock sequence_f0_90_a6_byte_range_80_b7, sequence_f0_90_a8;
		BitBlock byte_range_80_83, r10000_10ffff_tmp115;
		BitBlock sequence_f0_90_a8_byte_range_80_83, r10000_10ffff_tmp116;
		BitBlock sequence_f0_90_a9, byte_range_a0_bc, r10000_10ffff_tmp117;
		BitBlock sequence_f0_90_a9_byte_range_a0_bc, sequence_f0_90_aa;
		BitBlock byte_range_80_9c, r10000_10ffff_tmp118;
		BitBlock sequence_f0_90_aa_byte_range_80_9c, sequence_f0_90_ab;
		BitBlock r10000_10ffff_tmp119, sequence_f0_90_ab_byte_range_80_87;
		BitBlock sequence_f0_90_ac, r10000_10ffff_tmp120, r10000_10ffff_tmp121;
		BitBlock sequence_f0_90_ac_byte_range_80_b5, sequence_f0_90_ad;
		BitBlock r10000_10ffff_tmp122, sequence_f0_90_ad_byte_range_80_95;
		BitBlock sequence_f0_90_ae, r10000_10ffff_tmp123, r10000_10ffff_tmp124;
		BitBlock sequence_f0_90_ae_byte_range_80_91, sequence_f0_90_b0;
		BitBlock r10000_10ffff_tmp125, sequence_f0_90_b0_byte_range_80_bf;
		BitBlock sequence_f0_90_b1, r10000_10ffff_tmp126, r10000_10ffff_tmp127;
		BitBlock r10000_10ffff_tmp128, sequence_f0_90_b1_byte_range_80_88;
		BitBlock sequence_f0_91, r10000_10ffff_tmp129, sequence_f0_91_80;
		BitBlock sequence_f0_91_adv, sequence_f0_91_80_adv, r10000_10ffff_tmp130;
		BitBlock sequence_f0_91_81, r10000_10ffff_tmp131, r10000_10ffff_tmp132;
		BitBlock r10000_10ffff_tmp133, r10000_10ffff_tmp134, cc_range_11040_1107f_4;
		BitBlock sequence_f0_91_81_adv, r10000_10ffff_tmp135, sequence_f0_91_82;
		BitBlock sequence_f0_91_82_adv, r10000_10ffff_tmp136, sequence_f0_91_83;
		BitBlock r10000_10ffff_tmp137, r10000_10ffff_tmp138, r10000_10ffff_tmp139;
		BitBlock r10000_10ffff_tmp140, r10000_10ffff_tmp141, cc_range_110d0_110f0_4;
		BitBlock sequence_f0_91_83_adv, r10000_10ffff_tmp142, sequence_f0_91_84;
		BitBlock r10000_10ffff_tmp143, cc_range_11100_11136_4, sequence_f0_91_84_adv;
		BitBlock r10000_10ffff_tmp144, sequence_f0_91_85, r10000_10ffff_tmp145;
		BitBlock r10000_10ffff_tmp146, r10000_10ffff_tmp147, r10000_10ffff_tmp148;
		BitBlock r10000_10ffff_tmp149, cc_range_11150_11176_4, sequence_f0_91_85_adv;
		BitBlock r10000_10ffff_tmp150, sequence_f0_91_86, sequence_f0_91_86_adv;
		BitBlock r10000_10ffff_tmp151, sequence_f0_91_87, r10000_10ffff_tmp152;
		BitBlock r10000_10ffff_tmp153, cc_range_111c0_111d0_4, sequence_f0_91_87_adv;
		BitBlock r10000_10ffff_tmp154, byte_88, sequence_f0_91_88;
		BitBlock r10000_10ffff_tmp155, r10000_10ffff_tmp156, r10000_10ffff_tmp157;
		BitBlock r10000_10ffff_tmp158, r10000_10ffff_tmp159, cc_range_11200_11213_4;
		BitBlock sequence_f0_91_88_adv, r10000_10ffff_tmp160, sequence_f0_91_8a;
		BitBlock sequence_f0_91_8a_adv, r10000_10ffff_tmp161, sequence_f0_91_8b;
		BitBlock r10000_10ffff_tmp162, r10000_10ffff_tmp163, r10000_10ffff_tmp164;
		BitBlock r10000_10ffff_tmp165, cc_range_112c0_112f0_4, sequence_f0_91_8b_adv;
		BitBlock r10000_10ffff_tmp166, sequence_f0_91_8c, r10000_10ffff_tmp167;
		BitBlock r10000_10ffff_tmp168, r10000_10ffff_tmp169, r10000_10ffff_tmp170;
		BitBlock r10000_10ffff_tmp171, r10000_10ffff_tmp172, r10000_10ffff_tmp173;
		BitBlock r10000_10ffff_tmp174, r10000_10ffff_tmp175, r10000_10ffff_tmp176;
		BitBlock r10000_10ffff_tmp177, r10000_10ffff_tmp178, r10000_10ffff_tmp179;
		BitBlock r10000_10ffff_tmp180, r10000_10ffff_tmp181, r10000_10ffff_tmp182;
		BitBlock r10000_10ffff_tmp183, r10000_10ffff_tmp184, r10000_10ffff_tmp185;
		BitBlock r10000_10ffff_tmp186, r10000_10ffff_tmp187, r10000_10ffff_tmp188;
		BitBlock cc_range_11301_1133c_4, sequence_f0_91_8c_adv, r10000_10ffff_tmp189;
		BitBlock sequence_f0_91_8d, r10000_10ffff_tmp190, r10000_10ffff_tmp191;
		BitBlock r10000_10ffff_tmp192, r10000_10ffff_tmp193, r10000_10ffff_tmp194;
		BitBlock r10000_10ffff_tmp195, r10000_10ffff_tmp196, r10000_10ffff_tmp197;
		BitBlock r10000_10ffff_tmp198, r10000_10ffff_tmp199, r10000_10ffff_tmp200;
		BitBlock r10000_10ffff_tmp201, r10000_10ffff_tmp202, r10000_10ffff_tmp203;
		BitBlock r10000_10ffff_tmp204, r10000_10ffff_tmp205, r10000_10ffff_tmp206;
		BitBlock r10000_10ffff_tmp207, r10000_10ffff_tmp208, r10000_10ffff_tmp209;
		BitBlock cc_range_11340_11370_4, sequence_f0_91_8d_adv, r10000_10ffff_tmp210;
		BitBlock sequence_f0_91_92, sequence_f0_91_92_adv, r10000_10ffff_tmp211;
		BitBlock sequence_f0_91_93, r10000_10ffff_tmp212, r10000_10ffff_tmp213;
		BitBlock r10000_10ffff_tmp214, cc_range_114c0_114d0_4, sequence_f0_91_93_adv;
		BitBlock r10000_10ffff_tmp215, byte_96, sequence_f0_91_96;
		BitBlock r10000_10ffff_tmp216, cc_range_11580_115b8_4, sequence_f0_91_96_adv;
		BitBlock r10000_10ffff_tmp217, byte_97, sequence_f0_91_97;
		BitBlock sequence_f0_91_97_adv, r10000_10ffff_tmp218, sequence_f0_91_98;
		BitBlock sequence_f0_91_98_adv, r10000_10ffff_tmp219, sequence_f0_91_99;
		BitBlock r10000_10ffff_tmp220, r10000_10ffff_tmp221, cc_range_11640_11650_4;
		BitBlock sequence_f0_91_99_adv, r10000_10ffff_tmp222, sequence_f0_91_9a;
		BitBlock sequence_f0_91_9a_adv, r10000_10ffff_tmp223, sequence_f0_91_9b;
		BitBlock sequence_f0_91_9b_adv, r10000_10ffff_tmp224, sequence_f0_91_a2;
		BitBlock byte_range_a0_bf, sequence_f0_91_a2_adv, r10000_10ffff_tmp225;
		BitBlock sequence_f0_91_a3, r10000_10ffff_tmp226, r10000_10ffff_tmp227;
		BitBlock r10000_10ffff_tmp228, r10000_10ffff_tmp229, cc_range_118c0_118ff_4;
		BitBlock sequence_f0_91_a3_adv, r10000_10ffff_tmp230, sequence_f0_91_ab;
		BitBlock r10000_10ffff_tmp231, r10000_10ffff_tmp232, byte_range_80_b8;
		BitBlock sequence_f0_91_ab_adv, r10000_10ffff_tmp233, sequence_f0_92;
		BitBlock r10000_10ffff_tmp234, sequence_f0_92_byte_range_80_8d;
		BitBlock r10000_10ffff_tmp235, sequence_f0_92_byte_range_80_8d_sfx;
		BitBlock sequence_f0_92_adv, sequence_f0_92_8e, byte_range_80_98;
		BitBlock r10000_10ffff_tmp236, sequence_f0_92_8e_byte_range_80_98;
		BitBlock sequence_f0_92_90, r10000_10ffff_tmp237;
		BitBlock sequence_f0_92_90_byte_range_80_bf, sequence_f0_92_91;
		BitBlock r10000_10ffff_tmp238, r10000_10ffff_tmp239, byte_range_80_ae;
		BitBlock r10000_10ffff_tmp240, sequence_f0_92_91_byte_range_80_ae;
		BitBlock sequence_f0_93, r10000_10ffff_tmp241, sequence_f0_93_byte_range_80_8f;
		BitBlock r10000_10ffff_tmp242, sequence_f0_93_byte_range_80_8f_sfx;
		BitBlock sequence_f0_93_adv, sequence_f0_93_90, r10000_10ffff_tmp243;
		BitBlock sequence_f0_93_90_byte_range_80_ae, sequence_f0_96, byte_range_a0_a7;
		BitBlock r10000_10ffff_tmp244, sequence_f0_96_byte_range_a0_a7;
		BitBlock r10000_10ffff_tmp245, sequence_f0_96_byte_range_a0_a7_sfx;
		BitBlock sequence_f0_96_adv, sequence_f0_96_a8, r10000_10ffff_tmp246;
		BitBlock sequence_f0_96_a8_byte_range_80_b8, sequence_f0_96_a9;
		BitBlock r10000_10ffff_tmp247, sequence_f0_96_a9_byte_range_80_9e;
		BitBlock sequence_f0_96_ab, r10000_10ffff_tmp248, r10000_10ffff_tmp249;
		BitBlock r10000_10ffff_tmp250, byte_range_90_ad, r10000_10ffff_tmp251;
		BitBlock sequence_f0_96_ab_byte_range_90_ad, sequence_f0_96_ac;
		BitBlock r10000_10ffff_tmp252, sequence_f0_96_ac_byte_range_80_b6;
		BitBlock sequence_f0_96_ad, r10000_10ffff_tmp253;
		BitBlock sequence_f0_96_ad_byte_range_80_83, sequence_f0_96_ae;
		BitBlock r10000_10ffff_tmp254, sequence_f0_96_ae_byte_range_80_8f;
		BitBlock sequence_f0_96_bc, r10000_10ffff_tmp255;
		BitBlock sequence_f0_96_bc_byte_range_80_bf, sequence_f0_96_bd;
		BitBlock r10000_10ffff_tmp256, r10000_10ffff_tmp257;
		BitBlock sequence_f0_96_bd_byte_range_80_84, sequence_f0_96_be;
		BitBlock byte_range_8f_9f, r10000_10ffff_tmp258;
		BitBlock sequence_f0_96_be_byte_range_8f_9f, sequence_f0_9b;
		BitBlock r10000_10ffff_tmp259, sequence_f0_9b_80, sequence_f0_9b_adv;
		BitBlock sequence_f0_9b_80_adv, r10000_10ffff_tmp260, sequence_f0_9b_b0;
		BitBlock sequence_f0_9b_b0_adv, r10000_10ffff_tmp261, sequence_f0_9b_b1;
		BitBlock r10000_10ffff_tmp262, r10000_10ffff_tmp263, cc_range_1bc40_1bc70_4;
		BitBlock sequence_f0_9b_b1_adv, r10000_10ffff_tmp264, sequence_f0_9b_b2;
		BitBlock r10000_10ffff_tmp265, r10000_10ffff_tmp266, r10000_10ffff_tmp267;
		BitBlock r10000_10ffff_tmp268, r10000_10ffff_tmp269, cc_range_1bc80_1bc9d_4;
		BitBlock sequence_f0_9b_b2_adv, r10000_10ffff_tmp270, sequence_f0_9d;
		BitBlock r10000_10ffff_tmp271, sequence_f0_9d_85, sequence_f0_9d_adv;
		BitBlock r10000_10ffff_tmp272, r10000_10ffff_tmp273, r10000_10ffff_tmp274;
		BitBlock r10000_10ffff_tmp275, r10000_10ffff_tmp276, r10000_10ffff_tmp277;
		BitBlock cc_range_1d165_1d17b_4, sequence_f0_9d_85_adv, r10000_10ffff_tmp278;
		BitBlock sequence_f0_9d_86, r10000_10ffff_tmp279, r10000_10ffff_tmp280;
		BitBlock r10000_10ffff_tmp281, r10000_10ffff_tmp282, r10000_10ffff_tmp283;
		BitBlock r10000_10ffff_tmp284, r10000_10ffff_tmp285, r10000_10ffff_tmp286;
		BitBlock r10000_10ffff_tmp287, cc_range_1d180_1d1aa_4, sequence_f0_9d_86_adv;
		BitBlock r10000_10ffff_tmp288, sequence_f0_9d_89, r10000_10ffff_tmp289;
		BitBlock r10000_10ffff_tmp290, sequence_f0_9d_89_adv, r10000_10ffff_tmp291;
		BitBlock sequence_f0_9d_90, sequence_f0_9d_90_adv, r10000_10ffff_tmp292;
		BitBlock sequence_f0_9d_91, r10000_10ffff_tmp293, r10000_10ffff_tmp294;
		BitBlock r10000_10ffff_tmp295, cc_range_1d440_1d456_4, sequence_f0_9d_91_adv;
		BitBlock r10000_10ffff_tmp296, sequence_f0_9d_92, r10000_10ffff_tmp297;
		BitBlock r10000_10ffff_tmp298, r10000_10ffff_tmp299, r10000_10ffff_tmp300;
		BitBlock r10000_10ffff_tmp301, r10000_10ffff_tmp302, r10000_10ffff_tmp303;
		BitBlock r10000_10ffff_tmp304, r10000_10ffff_tmp305, r10000_10ffff_tmp306;
		BitBlock r10000_10ffff_tmp307, r10000_10ffff_tmp308, r10000_10ffff_tmp309;
		BitBlock r10000_10ffff_tmp310, r10000_10ffff_tmp311, r10000_10ffff_tmp312;
		BitBlock cc_range_1d480_1d4bd_4, sequence_f0_9d_92_adv, r10000_10ffff_tmp313;
		BitBlock sequence_f0_9d_93, r10000_10ffff_tmp314, r10000_10ffff_tmp315;
		BitBlock r10000_10ffff_tmp316, cc_range_1d4c0_1d4c5_4, sequence_f0_9d_93_adv;
		BitBlock r10000_10ffff_tmp317, sequence_f0_9d_94, r10000_10ffff_tmp318;
		BitBlock r10000_10ffff_tmp319, r10000_10ffff_tmp320, r10000_10ffff_tmp321;
		BitBlock r10000_10ffff_tmp322, r10000_10ffff_tmp323, r10000_10ffff_tmp324;
		BitBlock r10000_10ffff_tmp325, r10000_10ffff_tmp326, r10000_10ffff_tmp327;
		BitBlock r10000_10ffff_tmp328, r10000_10ffff_tmp329, r10000_10ffff_tmp330;
		BitBlock r10000_10ffff_tmp331, r10000_10ffff_tmp332, r10000_10ffff_tmp333;
		BitBlock r10000_10ffff_tmp334, r10000_10ffff_tmp335, cc_range_1d500_1d53b_4;
		BitBlock sequence_f0_9d_94_adv, r10000_10ffff_tmp336, sequence_f0_9d_95;
		BitBlock r10000_10ffff_tmp337, r10000_10ffff_tmp338, r10000_10ffff_tmp339;
		BitBlock r10000_10ffff_tmp340, r10000_10ffff_tmp341, r10000_10ffff_tmp342;
		BitBlock cc_range_1d540_1d552_4, sequence_f0_9d_95_adv, r10000_10ffff_tmp343;
		BitBlock r10000_10ffff_tmp344, byte_range_96_99;
		BitBlock sequence_f0_9d_byte_range_96_99, r10000_10ffff_tmp345;
		BitBlock sequence_f0_9d_byte_range_96_99_sfx, sequence_f0_9d_9a;
		BitBlock r10000_10ffff_tmp346, r10000_10ffff_tmp347, byte_range_80_a5;
		BitBlock r10000_10ffff_tmp348, sequence_f0_9d_9a_byte_range_80_a5;
		BitBlock sequence_f0_9d_9b, r10000_10ffff_tmp349, sequence_f0_9d_9b_80;
		BitBlock sequence_f0_9d_9c, byte_range_80_94, r10000_10ffff_tmp350;
		BitBlock sequence_f0_9d_9c_byte_range_80_94, sequence_f0_9d_9d;
		BitBlock r10000_10ffff_tmp351, byte_range_80_8e, r10000_10ffff_tmp352;
		BitBlock sequence_f0_9d_9d_byte_range_80_8e, sequence_f0_9d_9e;
		BitBlock r10000_10ffff_tmp353, sequence_f0_9d_9e_byte_range_80_88;
		BitBlock sequence_f0_9d_9f, r10000_10ffff_tmp354;
		BitBlock sequence_f0_9d_9f_byte_range_80_82, sequence_f0_9e;
		BitBlock r10000_10ffff_tmp355, byte_range_a0_a2, r10000_10ffff_tmp356;
		BitBlock sequence_f0_9e_byte_range_a0_a2, r10000_10ffff_tmp357;
		BitBlock sequence_f0_9e_byte_range_a0_a2_sfx, sequence_f0_9e_adv;
		BitBlock sequence_f0_9e_a3, r10000_10ffff_tmp358;
		BitBlock sequence_f0_9e_a3_byte_range_80_84, sequence_f0_9e_b8;
		BitBlock r10000_10ffff_tmp359, sequence_f0_9e_b8_byte_range_80_83;
		BitBlock sequence_f0_9e_b9, r10000_10ffff_tmp360, sequence_f0_9e_b9_82;
		BitBlock sequence_f0_9e_ba, r10000_10ffff_tmp361;
		BitBlock sequence_f0_9e_ba_byte_range_80_89, byte_range_a0_a9;
		BitBlock byte_f0_byte_range_a0_a9, r10000_10ffff_tmp362;
		BitBlock byte_f0_byte_range_a0_a9_sfx, r10000_10ffff_tmp363;
		BitBlock byte_f0_byte_range_a0_a9_sfx_sfx, sequence_f0_aa, sequence_f0_aa_adv;
		BitBlock sequence_f0_aa_80, byte_range_80_96, r10000_10ffff_tmp364;
		BitBlock sequence_f0_aa_80_byte_range_80_96, sequence_f0_ab;
		BitBlock sequence_f0_ab_adv, sequence_f0_ab_80, r10000_10ffff_tmp365;
		BitBlock sequence_f0_ab_80_byte_range_80_b4, sequence_f0_af;
		BitBlock sequence_f0_af_adv, sequence_f0_af_a0, r10000_10ffff_tmp366;
		BitBlock sequence_f0_af_a0_byte_range_80_9d, byte_f3, r10000_10ffff_tmp367;
		BitBlock sequence_f3_a0, byte_f3_adv, r10000_10ffff_tmp368, byte_range_84_86;
		BitBlock r10000_10ffff_tmp369, sequence_f3_a0_byte_range_84_86;
		BitBlock r10000_10ffff_tmp370, sequence_f3_a0_byte_range_84_86_sfx;
		BitBlock sequence_f3_a0_adv, sequence_f3_a0_87, r10000_10ffff_tmp371;
		BitBlock sequence_f3_a0_87_byte_range_80_af;




        struct_xidc_Y.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        tmp6 = simd_andc(tmp3, tmp5);
        tmp7 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp8 = simd_andc(tmp7, basis_bits.bit_2);
        tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp10 = simd_or(basis_bits.bit_5, tmp9);
        tmp11 = simd_and(basis_bits.bit_4, tmp10);
        tmp12 = simd_not(tmp11);
        tmp13 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp14 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp15 = simd_or(tmp13, tmp14);
        tmp16 = simd_or(simd_and(basis_bits.bit_3, tmp12), simd_andc(tmp15, basis_bits.bit_3));
        tmp17 = simd_and(tmp8, tmp16);
        tmp18 = simd_or(tmp6, tmp17);
        tmp19 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp20 = simd_and(tmp7, tmp19);
        tmp21 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp22 = simd_and(tmp21, tmp9);
        tmp23 = simd_and(tmp20, tmp22);
        tmp24 = simd_or(tmp18, tmp23);
        tmp25 = simd_and(tmp7, basis_bits.bit_2);
        tmp26 = simd_and(tmp25, tmp16);
        cc_range_30_61_1 = simd_or(tmp24, tmp26);
        struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, cc_range_30_61_1);
        byte_range_c0_ff = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        if ((bitblock::any(byte_range_c0_ff) || carryQ.CarryTest(0, 316))) {
          byte_range_c0_df = simd_andc(byte_range_c0_ff, basis_bits.bit_2);
          if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 26))) {
            r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp2 = simd_andc(byte_range_c0_ff, r80_7ff_tmp1);
            r80_7ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, tmp13);
            byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
            r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp6 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r80_7ff_tmp7 = simd_and(r80_7ff_tmp5, r80_7ff_tmp6);
            r80_7ff_tmp8 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r80_7ff_tmp9 = simd_and(r80_7ff_tmp8, r80_7ff_tmp3);
            r80_7ff_tmp10 = simd_and(r80_7ff_tmp7, r80_7ff_tmp9);
            r80_7ff_tmp11 = simd_and(r80_7ff_tmp5, tmp2);
            r80_7ff_tmp12 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r80_7ff_tmp13 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r80_7ff_tmp14 = simd_and(r80_7ff_tmp12, r80_7ff_tmp13);
            r80_7ff_tmp15 = simd_and(r80_7ff_tmp11, r80_7ff_tmp14);
            r80_7ff_tmp16 = simd_or(r80_7ff_tmp10, r80_7ff_tmp15);
            r80_7ff_tmp17 = simd_and(r80_7ff_tmp12, tmp9);
            r80_7ff_tmp18 = simd_and(r80_7ff_tmp11, r80_7ff_tmp17);
            r80_7ff_tmp19 = simd_or(r80_7ff_tmp16, r80_7ff_tmp18);
            r80_7ff_tmp20 = simd_and(r80_7ff_tmp11, r80_7ff_tmp9);
            cc_range_aa_ba_2 = simd_or(r80_7ff_tmp19, r80_7ff_tmp20);
            carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
            r80_7ff_tmp21 = simd_and(byte_c2_adv, cc_range_aa_ba_2);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r80_7ff_tmp21);
            r80_7ff_tmp22 = simd_andc(tmp9, tmp13);
            byte_c3 = simd_and(r80_7ff_tmp2, r80_7ff_tmp22);
            r80_7ff_tmp23 = simd_andc(r80_7ff_tmp5, basis_bits.bit_2);
            r80_7ff_tmp24 = simd_and(basis_bits.bit_5, tmp9);
            r80_7ff_tmp25 = simd_or(basis_bits.bit_4, r80_7ff_tmp24);
            r80_7ff_tmp26 = simd_and(basis_bits.bit_3, r80_7ff_tmp25);
            r80_7ff_tmp27 = simd_andc(r80_7ff_tmp23, r80_7ff_tmp26);
            r80_7ff_tmp28 = simd_not(r80_7ff_tmp26);
            r80_7ff_tmp29 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r80_7ff_tmp30 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp28), simd_andc(r80_7ff_tmp29, basis_bits.bit_2));
            r80_7ff_tmp31 = simd_and(r80_7ff_tmp5, r80_7ff_tmp30);
            r80_7ff_tmp32 = simd_or(r80_7ff_tmp27, r80_7ff_tmp31);
            r80_7ff_tmp33 = simd_and(r80_7ff_tmp11, basis_bits.bit_4);
            cc_range_c0_f8_2 = simd_or(r80_7ff_tmp32, r80_7ff_tmp33);
            carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(1), byte_c3_adv));
            r80_7ff_tmp34 = simd_and(byte_c3_adv, cc_range_c0_f8_2);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r80_7ff_tmp34);
            byte_range_c4_cf = simd_and(r80_7ff_tmp2, tmp13);
            if ((bitblock::any(byte_range_c4_cf) || carryQ.CarryTest(2, 9))) {
              r100_3ff_tmp1 = simd_xor(basis_bits.bit_4, basis_bits.bit_5);
              byte_range_c4_cb = simd_and(r80_7ff_tmp2, r100_3ff_tmp1);
              if ((bitblock::any(byte_range_c4_cb) || carryQ.CarryTest(2, 5))) {
                r100_2ff_tmp1 = simd_or(basis_bits.bit_5, tmp14);
                r100_2ff_tmp2 = simd_not(r100_2ff_tmp1);
                r100_2ff_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                byte_range_c4_c8 = simd_and(r80_7ff_tmp2, r100_2ff_tmp3);
                r100_2ff_tmp4 = simd_and(r80_7ff_tmp8, r80_7ff_tmp13);
                byte_c9 = simd_and(r80_7ff_tmp2, r100_2ff_tmp4);
                byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(2), r100_2ff_tmp5));
                r100_2ff_tmp6 = simd_and(r100_2ff_tmp5, byte_range_80_8f);
                r100_2ff_tmp7 = simd_or(byte_range_c4_c8, r100_2ff_tmp6);
                if ((bitblock::any(r100_2ff_tmp7) || carryQ.CarryTest(3, 2))) {
                  r100_24f_tmp1 = simd_andc(r80_7ff_tmp12, basis_bits.bit_6);
                  byte_range_c4_c5 = simd_and(r80_7ff_tmp2, r100_24f_tmp1);
                  if ((bitblock::any(byte_range_c4_c5) || carryQ.CarryTest(3, 1))) {
                    byte_range_80_bf = r80_7ff_tmp5;
                    carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_range_c4_c5, carryQ.get_carry_in(3), r100_17f_tmp1));
                    byte_range_c4_c5_sfx = simd_and(r100_17f_tmp1, byte_range_80_bf);
                    struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, byte_range_c4_c5_sfx);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(3, 1);
                  }
                  r100_24f_tmp2 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r100_24f_tmp3 = simd_or(simd_and(basis_bits.bit_4, r100_2ff_tmp2), simd_andc(r100_24f_tmp2, basis_bits.bit_4));
                  byte_range_c6_c8 = simd_and(r80_7ff_tmp2, r100_24f_tmp3);
                  r100_24f_tmp4 = simd_or(byte_range_c6_c8, r100_2ff_tmp6);
                  if ((bitblock::any(r100_24f_tmp4) || carryQ.CarryTest(4, 1))) {
                    byte_range_80_bf = r80_7ff_tmp5;
                    carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_range_c6_c8, carryQ.get_carry_in(4), r180_24f_tmp1));
                    byte_range_c6_c8_sfx = simd_and(r180_24f_tmp1, byte_range_80_bf);
                    struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, byte_range_c6_c8_sfx);
                    byte_c9_byte_range_80_8f = r100_2ff_tmp6;
                    struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, byte_c9_byte_range_80_8f);
                  }
                  else {
                    carryQ.CarryDequeueEnqueue(4, 1);
                  }
                }
                else {
                  carryQ.CarryDequeueEnqueue(3, 2);
                }
                byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
                r100_2ff_tmp8 = simd_and(r100_2ff_tmp5, byte_range_90_bf);
                byte_ca = simd_and(r80_7ff_tmp2, r80_7ff_tmp9);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, tmp2);
                carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(5), r100_2ff_tmp9));
                r100_2ff_tmp10 = simd_and(r100_2ff_tmp9, byte_range_80_af);
                r100_2ff_tmp11 = simd_or(r100_2ff_tmp8, r100_2ff_tmp10);
                if (bitblock::any(r100_2ff_tmp11)) {
                  byte_c9_adv = r100_2ff_tmp5;
                  r250_2af_tmp1 = simd_and(byte_c9_adv, byte_range_90_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r250_2af_tmp1);
                  byte_ca_adv = r100_2ff_tmp9;
                  r250_2af_tmp2 = simd_and(byte_ca_adv, byte_range_80_af);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r250_2af_tmp2);
                }
                byte_range_b0_bf = r80_7ff_tmp11;
                r100_2ff_tmp12 = simd_and(r100_2ff_tmp9, byte_range_b0_bf);
                r100_2ff_tmp13 = simd_and(r80_7ff_tmp8, tmp9);
                byte_cb = simd_and(r80_7ff_tmp2, r100_2ff_tmp13);
                r100_2ff_tmp14 = simd_or(r100_2ff_tmp12, byte_cb);
                if ((bitblock::any(r100_2ff_tmp14) || carryQ.CarryTest(6, 1))) {
                  byte_ca_adv = r100_2ff_tmp9;
                  r2b0_2ff_tmp1 = simd_and(byte_ca_adv, byte_range_b0_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r2b0_2ff_tmp1);
                  r2b0_2ff_tmp2 = simd_or(tmp13, basis_bits.bit_6);
                  r2b0_2ff_tmp3 = simd_andc(byte_range_80_8f, r2b0_2ff_tmp2);
                  r2b0_2ff_tmp4 = simd_not(r2b0_2ff_tmp2);
                  r2b0_2ff_tmp5 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2b0_2ff_tmp6 = simd_or(basis_bits.bit_4, r2b0_2ff_tmp5);
                  r2b0_2ff_tmp7 = simd_or(simd_and(basis_bits.bit_3, r2b0_2ff_tmp4), simd_andc(r2b0_2ff_tmp6, basis_bits.bit_3));
                  r2b0_2ff_tmp8 = simd_and(r80_7ff_tmp23, r2b0_2ff_tmp7);
                  r2b0_2ff_tmp9 = simd_or(r2b0_2ff_tmp3, r2b0_2ff_tmp8);
                  r2b0_2ff_tmp10 = simd_andc(r80_7ff_tmp7, basis_bits.bit_4);
                  r2b0_2ff_tmp11 = simd_and(basis_bits.bit_5, tmp14);
                  r2b0_2ff_tmp12 = simd_andc(r2b0_2ff_tmp10, r2b0_2ff_tmp11);
                  r2b0_2ff_tmp13 = simd_or(r2b0_2ff_tmp9, r2b0_2ff_tmp12);
                  r2b0_2ff_tmp14 = simd_andc(tmp21, tmp14);
                  r2b0_2ff_tmp15 = simd_and(r80_7ff_tmp7, r2b0_2ff_tmp14);
                  r2b0_2ff_tmp16 = simd_or(r2b0_2ff_tmp13, r2b0_2ff_tmp15);
                  r2b0_2ff_tmp17 = simd_and(tmp21, r80_7ff_tmp3);
                  r2b0_2ff_tmp18 = simd_and(r80_7ff_tmp7, r2b0_2ff_tmp17);
                  cc_range_2c0_2ee_2 = simd_or(r2b0_2ff_tmp16, r2b0_2ff_tmp18);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(6), byte_cb_adv));
                  r2b0_2ff_tmp19 = simd_and(byte_cb_adv, cc_range_2c0_2ee_2);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r2b0_2ff_tmp19);
                }
                else {
                  carryQ.CarryDequeueEnqueue(6, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(2, 5);
              }
              r100_3ff_tmp2 = simd_andc(tmp21, tmp14);
              byte_cc = simd_and(r80_7ff_tmp2, r100_3ff_tmp2);
              r100_3ff_tmp3 = simd_and(tmp21, r80_7ff_tmp13);
              byte_cd = simd_and(r80_7ff_tmp2, r100_3ff_tmp3);
              byte_range_80_af = simd_andc(r80_7ff_tmp5, tmp2);
              carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(7), r100_3ff_tmp4));
              r100_3ff_tmp5 = simd_and(r100_3ff_tmp4, byte_range_80_af);
              r100_3ff_tmp6 = simd_or(byte_cc, r100_3ff_tmp5);
              if ((bitblock::any(r100_3ff_tmp6) || carryQ.CarryTest(8, 1))) {
                byte_range_80_bf = r80_7ff_tmp5;
                carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_cc, carryQ.get_carry_in(8), byte_cc_adv));
                r300_36f_tmp1 = simd_and(byte_cc_adv, byte_range_80_bf);
                struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r300_36f_tmp1);
                byte_cd_adv = r100_3ff_tmp4;
                r300_36f_tmp2 = simd_and(byte_cd_adv, byte_range_80_af);
                struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r300_36f_tmp2);
              }
              else {
                carryQ.CarryDequeueEnqueue(8, 1);
              }
              byte_range_b0_bf = r80_7ff_tmp11;
              r100_3ff_tmp7 = simd_and(r100_3ff_tmp4, byte_range_b0_bf);
              r100_3ff_tmp8 = simd_and(tmp21, basis_bits.bit_6);
              byte_range_ce_cf = simd_and(r80_7ff_tmp2, r100_3ff_tmp8);
              r100_3ff_tmp9 = simd_or(r100_3ff_tmp7, byte_range_ce_cf);
              if ((bitblock::any(r100_3ff_tmp9) || carryQ.CarryTest(9, 2))) {
                r370_3ff_tmp1 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp2 = simd_and(basis_bits.bit_5, tmp14);
                r370_3ff_tmp3 = simd_andc(r370_3ff_tmp1, r370_3ff_tmp2);
                r370_3ff_tmp4 = simd_and(r80_7ff_tmp12, basis_bits.bit_6);
                r370_3ff_tmp5 = simd_and(byte_range_b0_bf, r370_3ff_tmp4);
                r370_3ff_tmp6 = simd_or(r370_3ff_tmp3, r370_3ff_tmp5);
                r370_3ff_tmp7 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
                r370_3ff_tmp8 = simd_not(basis_bits.bit_6);
                r370_3ff_tmp9 = simd_or(simd_and(basis_bits.bit_5, r370_3ff_tmp8), simd_andc(tmp9, basis_bits.bit_5));
                r370_3ff_tmp10 = simd_and(r370_3ff_tmp7, r370_3ff_tmp9);
                r370_3ff_tmp11 = simd_or(r370_3ff_tmp6, r370_3ff_tmp10);
                r370_3ff_tmp12 = simd_and(byte_range_b0_bf, tmp22);
                cc_range_370_37f_2 = simd_or(r370_3ff_tmp11, r370_3ff_tmp12);
                byte_cd_adv = r100_3ff_tmp4;
                r370_3ff_tmp13 = simd_and(byte_cd_adv, cc_range_370_37f_2);
                struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r370_3ff_tmp13);
                r370_3ff_tmp14 = simd_and(tmp21, r80_7ff_tmp3);
                byte_ce = simd_and(r80_7ff_tmp2, r370_3ff_tmp14);
                r370_3ff_tmp15 = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
                r370_3ff_tmp16 = simd_not(tmp10);
                r370_3ff_tmp17 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r370_3ff_tmp18 = simd_or(simd_and(basis_bits.bit_4, r370_3ff_tmp16), simd_andc(r370_3ff_tmp17, basis_bits.bit_4));
                r370_3ff_tmp19 = simd_or(r370_3ff_tmp18, r100_3ff_tmp2);
                r370_3ff_tmp20 = simd_and(r370_3ff_tmp15, r370_3ff_tmp19);
                r370_3ff_tmp21 = simd_or(tmp13, basis_bits.bit_6);
                r370_3ff_tmp22 = simd_or(basis_bits.bit_3, r370_3ff_tmp21);
                r370_3ff_tmp23 = simd_not(r370_3ff_tmp22);
                r370_3ff_tmp24 = simd_or(basis_bits.bit_3, r100_3ff_tmp8);
                r370_3ff_tmp25 = simd_or(simd_and(basis_bits.bit_2, r370_3ff_tmp23), simd_andc(r370_3ff_tmp24, basis_bits.bit_2));
                r370_3ff_tmp26 = simd_and(r80_7ff_tmp5, r370_3ff_tmp25);
                r370_3ff_tmp27 = simd_or(r370_3ff_tmp20, r370_3ff_tmp26);
                r370_3ff_tmp28 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                r370_3ff_tmp29 = simd_or(tmp13, tmp9);
                r370_3ff_tmp30 = simd_or(basis_bits.bit_3, r370_3ff_tmp29);
                r370_3ff_tmp31 = simd_and(r370_3ff_tmp28, r370_3ff_tmp30);
                cc_range_386_3a3_2 = simd_or(r370_3ff_tmp27, r370_3ff_tmp31);
                carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(9), byte_ce_adv));
                r370_3ff_tmp32 = simd_and(byte_ce_adv, cc_range_386_3a3_2);
                struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r370_3ff_tmp32);
                byte_cf = simd_and(r80_7ff_tmp2, tmp22);
                r370_3ff_tmp33 = simd_or(basis_bits.bit_4, r370_3ff_tmp17);
                r370_3ff_tmp34 = simd_and(basis_bits.bit_3, r370_3ff_tmp33);
                r370_3ff_tmp35 = simd_and(basis_bits.bit_2, r370_3ff_tmp34);
                r370_3ff_tmp36 = simd_andc(r80_7ff_tmp5, r370_3ff_tmp35);
                r370_3ff_tmp37 = simd_and(byte_range_b0_bf, r80_7ff_tmp25);
                cc_range_3c0_3f7_2 = simd_or(r370_3ff_tmp36, r370_3ff_tmp37);
                carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(10), byte_cf_adv));
                r370_3ff_tmp38 = simd_and(byte_cf_adv, cc_range_3c0_3f7_2);
                struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r370_3ff_tmp38);
              }
              else {
                carryQ.CarryDequeueEnqueue(9, 2);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(2, 9);
            }
            r80_7ff_tmp35 = simd_and(byte_range_c0_ff, tmp19);
            byte_range_d0_d7 = simd_andc(r80_7ff_tmp35, basis_bits.bit_4);
            if ((bitblock::any(byte_range_d0_d7) || carryQ.CarryTest(11, 7))) {
              byte_range_d0_d3 = simd_andc(r80_7ff_tmp35, tmp13);
              if ((bitblock::any(byte_range_d0_d3) || carryQ.CarryTest(11, 3))) {
                r400_4ff_tmp1 = simd_or(tmp13, basis_bits.bit_6);
                byte_range_d0_d1 = simd_andc(r80_7ff_tmp35, r400_4ff_tmp1);
                byte_range_80_bf = r80_7ff_tmp5;
                carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_range_d0_d1, carryQ.get_carry_in(11), r400_4ff_tmp2));
                byte_range_d0_d1_sfx = simd_and(r400_4ff_tmp2, byte_range_80_bf);
                struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, byte_range_d0_d1_sfx);
                byte_d2 = simd_and(r80_7ff_tmp35, r80_7ff_tmp4);
                r400_4ff_tmp3 = simd_andc(byte_range_80_bf, r80_7ff_tmp1);
                byte_range_80_81 = simd_andc(r400_4ff_tmp3, r400_4ff_tmp1);
                carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(12), r400_4ff_tmp4));
                byte_d2_byte_range_80_81 = simd_and(r400_4ff_tmp4, byte_range_80_81);
                struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, byte_d2_byte_range_80_81);
                byte_d3 = simd_and(r80_7ff_tmp35, r80_7ff_tmp22);
                carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(13), r400_4ff_tmp5));
                byte_d3_byte_range_80_bf = simd_and(r400_4ff_tmp5, byte_range_80_bf);
                struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, byte_d3_byte_range_80_bf);
              }
              else {
                carryQ.CarryDequeueEnqueue(11, 3);
              }
              r400_5ff_tmp1 = simd_andc(r80_7ff_tmp12, basis_bits.bit_6);
              byte_range_d4_d5 = simd_and(r80_7ff_tmp35, r400_5ff_tmp1);
              r400_5ff_tmp2 = simd_and(r80_7ff_tmp12, r80_7ff_tmp3);
              byte_d6 = simd_and(r80_7ff_tmp35, r400_5ff_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(14), r400_5ff_tmp3));
              r400_5ff_tmp4 = simd_and(r400_5ff_tmp3, byte_range_80_8f);
              r400_5ff_tmp5 = simd_or(byte_range_d4_d5, r400_5ff_tmp4);
              if ((bitblock::any(r400_5ff_tmp5) || carryQ.CarryTest(15, 2))) {
                r500_58f_tmp1 = simd_andc(r80_7ff_tmp12, tmp14);
                byte_d4 = simd_and(r80_7ff_tmp35, r500_58f_tmp1);
                byte_range_80_af = simd_andc(r80_7ff_tmp5, tmp2);
                carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(15), r500_58f_tmp2));
                r500_58f_tmp3 = simd_and(r500_58f_tmp2, byte_range_80_af);
                if (bitblock::any(r500_58f_tmp3)) {
                  byte_d4_adv = r500_58f_tmp2;
                  r500_52f_tmp1 = simd_and(byte_d4_adv, byte_range_80_af);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r500_52f_tmp1);
                }
                byte_range_b0_bf = r80_7ff_tmp11;
                r500_58f_tmp4 = simd_and(r500_58f_tmp2, byte_range_b0_bf);
                byte_d5 = simd_and(r80_7ff_tmp35, r80_7ff_tmp14);
                r500_58f_tmp5 = simd_or(r500_58f_tmp4, byte_d5);
                r500_58f_tmp6 = simd_or(r500_58f_tmp5, r400_5ff_tmp4);
                if ((bitblock::any(r500_58f_tmp6) || carryQ.CarryTest(16, 1))) {
                  r530_58f_tmp1 = simd_or(basis_bits.bit_5, tmp14);
                  r530_58f_tmp2 = simd_or(basis_bits.bit_4, r530_58f_tmp1);
                  byte_range_b1_bf = simd_and(byte_range_b0_bf, r530_58f_tmp2);
                  byte_d4_adv = r500_58f_tmp2;
                  r530_58f_tmp3 = simd_and(byte_d4_adv, byte_range_b1_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r530_58f_tmp3);
                  r530_58f_tmp4 = simd_and(r80_7ff_tmp5, tmp19);
                  r530_58f_tmp5 = simd_and(r80_7ff_tmp8, r80_7ff_tmp13);
                  r530_58f_tmp6 = simd_and(r530_58f_tmp4, r530_58f_tmp5);
                  r530_58f_tmp7 = simd_or(r80_7ff_tmp27, r530_58f_tmp6);
                  r530_58f_tmp8 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
                  r530_58f_tmp9 = simd_or(basis_bits.bit_3, tmp15);
                  r530_58f_tmp10 = simd_and(r530_58f_tmp8, r530_58f_tmp9);
                  cc_range_540_561_2 = simd_or(r530_58f_tmp7, r530_58f_tmp10);
                  carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(16), byte_d5_adv));
                  r530_58f_tmp11 = simd_and(byte_d5_adv, cc_range_540_561_2);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r530_58f_tmp11);
                  byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_d6_adv = r400_5ff_tmp3;
                  r530_58f_tmp12 = simd_and(byte_d6_adv, byte_range_80_87);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r530_58f_tmp12);
                }
                else {
                  carryQ.CarryDequeueEnqueue(16, 1);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(15, 2);
              }
              byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
              r400_5ff_tmp6 = simd_and(r400_5ff_tmp3, byte_range_90_bf);
              byte_d7 = simd_and(r80_7ff_tmp35, r80_7ff_tmp17);
              r400_5ff_tmp7 = simd_or(r400_5ff_tmp6, byte_d7);
              if ((bitblock::any(r400_5ff_tmp7) || carryQ.CarryTest(17, 1))) {
                r590_5ff_tmp1 = simd_and(tmp21, basis_bits.bit_6);
                r590_5ff_tmp2 = simd_and(basis_bits.bit_3, r590_5ff_tmp1);
                r590_5ff_tmp3 = simd_not(r590_5ff_tmp2);
                r590_5ff_tmp4 = simd_and(basis_bits.bit_3, tmp15);
                r590_5ff_tmp5 = simd_or(simd_and(basis_bits.bit_2, r590_5ff_tmp3), simd_andc(r590_5ff_tmp4, basis_bits.bit_2));
                r590_5ff_tmp6 = simd_and(r80_7ff_tmp5, r590_5ff_tmp5);
                r590_5ff_tmp7 = simd_and(r80_7ff_tmp11, tmp22);
                cc_range_591_5bf_2 = simd_or(r590_5ff_tmp6, r590_5ff_tmp7);
                byte_d6_adv = r400_5ff_tmp3;
                r590_5ff_tmp8 = simd_and(byte_d6_adv, cc_range_591_5bf_2);
                struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r590_5ff_tmp8);
                r590_5ff_tmp9 = simd_andc(byte_range_80_8f, tmp13);
                r590_5ff_tmp10 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                r590_5ff_tmp11 = simd_and(r590_5ff_tmp9, r590_5ff_tmp10);
                r590_5ff_tmp12 = simd_and(byte_range_80_8f, r400_5ff_tmp1);
                r590_5ff_tmp13 = simd_or(r590_5ff_tmp11, r590_5ff_tmp12);
                r590_5ff_tmp14 = simd_and(byte_range_80_8f, r80_7ff_tmp17);
                r590_5ff_tmp15 = simd_or(r590_5ff_tmp13, r590_5ff_tmp14);
                r590_5ff_tmp16 = simd_or(basis_bits.bit_3, tmp11);
                r590_5ff_tmp17 = simd_not(r590_5ff_tmp16);
                r590_5ff_tmp18 = simd_or(simd_and(basis_bits.bit_2, r590_5ff_tmp17), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                r590_5ff_tmp19 = simd_and(r80_7ff_tmp5, r590_5ff_tmp18);
                r590_5ff_tmp20 = simd_or(r590_5ff_tmp15, r590_5ff_tmp19);
                r590_5ff_tmp21 = simd_andc(r80_7ff_tmp11, tmp13);
                r590_5ff_tmp22 = simd_andc(r590_5ff_tmp21, tmp9);
                cc_range_5c1_5f0_2 = simd_or(r590_5ff_tmp20, r590_5ff_tmp22);
                carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(17), byte_d7_adv));
                r590_5ff_tmp23 = simd_and(byte_d7_adv, cc_range_5c1_5f0_2);
                struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r590_5ff_tmp23);
              }
              else {
                carryQ.CarryDequeueEnqueue(17, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(11, 7);
            }
            byte_range_d8_db = simd_and(r80_7ff_tmp35, r80_7ff_tmp8);
            if ((bitblock::any(byte_range_d8_db) || carryQ.CarryTest(18, 4))) {
              r600_6ff_tmp1 = simd_andc(r80_7ff_tmp8, tmp14);
              byte_d8 = simd_and(r80_7ff_tmp35, r600_6ff_tmp1);
              r600_6ff_tmp2 = simd_and(r80_7ff_tmp5, tmp19);
              r600_6ff_tmp3 = simd_andc(r600_6ff_tmp2, tmp11);
              r600_6ff_tmp4 = simd_and(r80_7ff_tmp5, basis_bits.bit_2);
              cc_range_610_620_2 = simd_or(r600_6ff_tmp3, r600_6ff_tmp4);
              carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(18), byte_d8_adv));
              r600_6ff_tmp5 = simd_and(byte_d8_adv, cc_range_610_620_2);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r600_6ff_tmp5);
              r600_6ff_tmp6 = simd_and(r80_7ff_tmp8, r80_7ff_tmp13);
              byte_d9 = simd_and(r80_7ff_tmp35, r600_6ff_tmp6);
              r600_6ff_tmp7 = simd_or(basis_bits.bit_3, tmp5);
              r600_6ff_tmp8 = simd_and(basis_bits.bit_2, r600_6ff_tmp7);
              r600_6ff_tmp9 = simd_andc(r80_7ff_tmp5, r600_6ff_tmp8);
              r600_6ff_tmp10 = simd_and(tmp21, basis_bits.bit_6);
              r600_6ff_tmp11 = simd_or(basis_bits.bit_3, r600_6ff_tmp10);
              r600_6ff_tmp12 = simd_and(r600_6ff_tmp4, r600_6ff_tmp11);
              cc_range_640_66e_2 = simd_or(r600_6ff_tmp9, r600_6ff_tmp12);
              carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(19), byte_d9_adv));
              r600_6ff_tmp13 = simd_and(byte_d9_adv, cc_range_640_66e_2);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r600_6ff_tmp13);
              byte_da = simd_and(r80_7ff_tmp35, r80_7ff_tmp9);
              byte_range_80_bf = r80_7ff_tmp5;
              carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_da, carryQ.get_carry_in(20), byte_da_adv));
              r600_6ff_tmp14 = simd_and(byte_da_adv, byte_range_80_bf);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r600_6ff_tmp14);
              r600_6ff_tmp15 = simd_and(r80_7ff_tmp8, tmp9);
              byte_db = simd_and(r80_7ff_tmp35, r600_6ff_tmp15);
              r600_6ff_tmp16 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              r600_6ff_tmp17 = simd_and(basis_bits.bit_3, tmp13);
              r600_6ff_tmp18 = simd_andc(r600_6ff_tmp16, r600_6ff_tmp17);
              r600_6ff_tmp19 = simd_and(byte_range_80_bf, tmp19);
              r600_6ff_tmp20 = simd_and(basis_bits.bit_5, tmp14);
              r600_6ff_tmp21 = simd_xor(basis_bits.bit_4, r600_6ff_tmp20);
              r600_6ff_tmp22 = simd_and(r600_6ff_tmp19, r600_6ff_tmp21);
              r600_6ff_tmp23 = simd_or(r600_6ff_tmp18, r600_6ff_tmp22);
              r600_6ff_tmp24 = simd_or(basis_bits.bit_5, tmp14);
              r600_6ff_tmp25 = simd_and(basis_bits.bit_4, r600_6ff_tmp24);
              r600_6ff_tmp26 = simd_or(basis_bits.bit_3, r600_6ff_tmp25);
              r600_6ff_tmp27 = simd_not(r600_6ff_tmp26);
              r600_6ff_tmp28 = simd_and(basis_bits.bit_3, tmp22);
              r600_6ff_tmp29 = simd_or(simd_and(basis_bits.bit_2, r600_6ff_tmp27), simd_andc(r600_6ff_tmp28, basis_bits.bit_2));
              r600_6ff_tmp30 = simd_and(byte_range_80_bf, r600_6ff_tmp29);
              r600_6ff_tmp31 = simd_or(r600_6ff_tmp23, r600_6ff_tmp30);
              r600_6ff_tmp32 = simd_and(byte_range_80_bf, basis_bits.bit_2);
              r600_6ff_tmp33 = simd_and(tmp21, tmp14);
              r600_6ff_tmp34 = simd_not(r600_6ff_tmp33);
              r600_6ff_tmp35 = simd_or(simd_and(basis_bits.bit_3, r600_6ff_tmp34), simd_andc(tmp5, basis_bits.bit_3));
              r600_6ff_tmp36 = simd_and(r600_6ff_tmp32, r600_6ff_tmp35);
              r600_6ff_tmp37 = simd_or(r600_6ff_tmp31, r600_6ff_tmp36);
              r600_6ff_tmp38 = simd_and(byte_range_80_bf, tmp2);
              r600_6ff_tmp39 = simd_and(r600_6ff_tmp38, tmp22);
              cc_range_6c0_6ff_2 = simd_or(r600_6ff_tmp37, r600_6ff_tmp39);
              carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(21), byte_db_adv));
              r600_6ff_tmp40 = simd_and(byte_db_adv, cc_range_6c0_6ff_2);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r600_6ff_tmp40);
            }
            else {
              carryQ.CarryDequeueEnqueue(18, 4);
            }
            r80_7ff_tmp36 = simd_andc(tmp21, basis_bits.bit_6);
            byte_range_dc_dd = simd_and(r80_7ff_tmp35, r80_7ff_tmp36);
            if ((bitblock::any(byte_range_dc_dd) || carryQ.CarryTest(22, 2))) {
              r700_77f_tmp1 = simd_andc(tmp21, tmp14);
              byte_dc = simd_and(r80_7ff_tmp35, r700_77f_tmp1);
              r700_77f_tmp2 = simd_and(tmp21, r80_7ff_tmp13);
              byte_dd = simd_and(r80_7ff_tmp35, r700_77f_tmp2);
              byte_range_80_8f = simd_andc(r80_7ff_tmp5, r80_7ff_tmp1);
              carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(22), r700_77f_tmp3));
              r700_77f_tmp4 = simd_and(r700_77f_tmp3, byte_range_80_8f);
              r700_77f_tmp5 = simd_or(byte_dc, r700_77f_tmp4);
              if ((bitblock::any(r700_77f_tmp5) || carryQ.CarryTest(23, 1))) {
                byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
                carryQ.cq[23] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(23), byte_dc_adv));
                r700_74f_tmp1 = simd_and(byte_dc_adv, byte_range_90_bf);
                struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r700_74f_tmp1);
                r700_74f_tmp2 = simd_andc(byte_range_80_8f, tmp11);
                r700_74f_tmp3 = simd_and(byte_range_80_8f, tmp21);
                r700_74f_tmp4 = simd_and(r700_74f_tmp3, tmp14);
                cc_range_740_74d_2 = simd_or(r700_74f_tmp2, r700_74f_tmp4);
                byte_dd_adv = r700_77f_tmp3;
                r700_74f_tmp5 = simd_and(byte_dd_adv, cc_range_740_74d_2);
                struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r700_74f_tmp5);
              }
              else {
                carryQ.CarryDequeueEnqueue(23, 1);
              }
              byte_range_90_bf = simd_and(r80_7ff_tmp5, r80_7ff_tmp1);
              r700_77f_tmp6 = simd_and(r700_77f_tmp3, byte_range_90_bf);
              if (bitblock::any(r700_77f_tmp6)) {
                byte_dd_adv = r700_77f_tmp3;
                r750_77f_tmp1 = simd_and(byte_dd_adv, byte_range_90_bf);
                struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r750_77f_tmp1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(22, 2);
            }
            r80_7ff_tmp37 = simd_and(tmp21, basis_bits.bit_6);
            byte_range_de_df = simd_and(r80_7ff_tmp35, r80_7ff_tmp37);
            if ((bitblock::any(byte_range_de_df) || carryQ.CarryTest(24, 2))) {
              r780_7ff_tmp1 = simd_and(tmp21, r80_7ff_tmp3);
              byte_de = simd_and(r80_7ff_tmp35, r780_7ff_tmp1);
              if ((bitblock::any(byte_de) || carryQ.CarryTest(24, 1))) {
                r780_7bf_tmp1 = simd_or(tmp13, basis_bits.bit_6);
                r780_7bf_tmp2 = simd_and(basis_bits.bit_3, r780_7bf_tmp1);
                r780_7bf_tmp3 = simd_and(basis_bits.bit_2, r780_7bf_tmp2);
                byte_range_80_b1 = simd_andc(r80_7ff_tmp5, r780_7bf_tmp3);
                carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(24), byte_de_adv));
                r780_7bf_tmp4 = simd_and(byte_de_adv, byte_range_80_b1);
                struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r780_7bf_tmp4);
              }
              else {
                carryQ.CarryDequeueEnqueue(24, 1);
              }
              byte_df = simd_and(r80_7ff_tmp35, tmp22);
              if ((bitblock::any(byte_df) || carryQ.CarryTest(25, 1))) {
                r7c0_7ff_tmp1 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                r7c0_7ff_tmp2 = simd_or(basis_bits.bit_4, r7c0_7ff_tmp1);
                r7c0_7ff_tmp3 = simd_and(basis_bits.bit_3, r7c0_7ff_tmp2);
                r7c0_7ff_tmp4 = simd_and(basis_bits.bit_2, r7c0_7ff_tmp3);
                r7c0_7ff_tmp5 = simd_andc(r80_7ff_tmp5, r7c0_7ff_tmp4);
                cc_range_7c0_7fa_2 = simd_or(r7c0_7ff_tmp5, r80_7ff_tmp20);
                carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(25), byte_df_adv));
                r7c0_7ff_tmp6 = simd_and(byte_df_adv, cc_range_7c0_7fa_2);
                struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r7c0_7ff_tmp6);
              }
              else {
                carryQ.CarryDequeueEnqueue(25, 1);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(24, 2);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(0, 26);
          }
          r80_10ffff_tmp1 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          byte_range_e0_ef = simd_and(byte_range_c0_ff, r80_10ffff_tmp1);
          if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(26, 171))) {
            byte_range_e0_e3 = simd_andc(byte_range_e0_ef, tmp13);
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp14);
            byte_e4 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
            r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r800_ffff_tmp5 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
            byte_range_80_b7 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp5);
            carryQ.cq[26] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(26), r800_ffff_tmp6));
            r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, byte_range_80_b7);
            r800_ffff_tmp8 = simd_or(byte_range_e0_e3, r800_ffff_tmp7);
            if ((bitblock::any(r800_ffff_tmp8) || carryQ.CarryTest(27, 108))) {
              r800_4dff_tmp1 = simd_or(tmp13, basis_bits.bit_6);
              byte_range_e0_e1 = simd_andc(byte_range_e0_ef, r800_4dff_tmp1);
              if ((bitblock::any(byte_range_e0_e1) || carryQ.CarryTest(27, 80))) {
                byte_e0 = simd_andc(byte_range_e0_ef, tmp15);
                if ((bitblock::any(byte_e0) || carryQ.CarryTest(27, 33))) {
                  r800_fff_tmp1 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r800_fff_tmp1, tmp15);
                  carryQ.cq[27] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(27), r800_fff_tmp2));
                  sequence_e0_a0 = simd_and(r800_fff_tmp2, byte_a0);
                  byte_e0_adv = r800_fff_tmp2;
                  r800_fff_tmp3 = simd_and(tmp21, basis_bits.bit_6);
                  r800_fff_tmp4 = simd_or(basis_bits.bit_3, r800_fff_tmp3);
                  r800_fff_tmp5 = simd_and(basis_bits.bit_2, r800_fff_tmp4);
                  byte_range_80_ad = simd_andc(r800_ffff_tmp3, r800_fff_tmp5);
                  carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(28), sequence_e0_a0_adv));
                  r800_fff_tmp6 = simd_and(sequence_e0_a0_adv, byte_range_80_ad);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp6);
                  r800_fff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r800_fff_tmp8 = simd_andc(r800_fff_tmp7, tmp13);
                  byte_a1 = simd_and(r800_fff_tmp1, r800_fff_tmp8);
                  sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
                  r800_fff_tmp9 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r800_fff_tmp10 = simd_and(basis_bits.bit_3, tmp21);
                  byte_range_80_9b = simd_andc(r800_fff_tmp9, r800_fff_tmp10);
                  carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(29), sequence_e0_a1_adv));
                  r800_fff_tmp11 = simd_and(sequence_e0_a1_adv, byte_range_80_9b);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp11);
                  r800_fff_tmp12 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp13 = simd_andc(r800_fff_tmp12, tmp13);
                  byte_a2 = simd_and(r800_fff_tmp1, r800_fff_tmp13);
                  sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
                  r800_fff_tmp14 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r800_fff_tmp15 = simd_or(tmp13, tmp9);
                  r800_fff_tmp16 = simd_and(basis_bits.bit_3, r800_fff_tmp15);
                  byte_range_a0_b2 = simd_andc(r800_fff_tmp14, r800_fff_tmp16);
                  carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_a2, carryQ.get_carry_in(30), sequence_e0_a2_adv));
                  r800_fff_tmp17 = simd_and(sequence_e0_a2_adv, byte_range_a0_b2);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp17);
                  r800_fff_tmp18 = simd_andc(tmp9, tmp13);
                  byte_a3 = simd_and(r800_fff_tmp1, r800_fff_tmp18);
                  sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
                  r800_fff_tmp19 = simd_or(basis_bits.bit_3, tmp13);
                  byte_range_a4_bf = simd_and(r800_fff_tmp14, r800_fff_tmp19);
                  carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_a3, carryQ.get_carry_in(31), sequence_e0_a3_adv));
                  r800_fff_tmp20 = simd_and(sequence_e0_a3_adv, byte_range_a4_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp20);
                  byte_a4 = simd_and(r800_fff_tmp1, r800_ffff_tmp2);
                  sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(32), sequence_e0_a4_adv));
                  r800_fff_tmp21 = simd_and(sequence_e0_a4_adv, byte_range_80_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp21);
                  r800_fff_tmp22 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r800_fff_tmp23 = simd_and(r800_ffff_tmp1, r800_fff_tmp7);
                  byte_a5 = simd_and(r800_fff_tmp22, r800_fff_tmp23);
                  sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
                  r800_fff_tmp24 = simd_and(basis_bits.bit_2, r800_fff_tmp19);
                  r800_fff_tmp25 = simd_andc(byte_range_80_bf, r800_fff_tmp24);
                  r800_fff_tmp26 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp27 = simd_or(basis_bits.bit_4, r800_fff_tmp26);
                  r800_fff_tmp28 = simd_and(r800_fff_tmp22, r800_fff_tmp27);
                  r800_fff_tmp29 = simd_or(r800_fff_tmp25, r800_fff_tmp28);
                  r800_fff_tmp30 = simd_and(byte_range_80_bf, tmp2);
                  r800_fff_tmp31 = simd_or(basis_bits.bit_5, tmp14);
                  r800_fff_tmp32 = simd_or(basis_bits.bit_4, r800_fff_tmp31);
                  r800_fff_tmp33 = simd_and(r800_fff_tmp30, r800_fff_tmp32);
                  cc_range_940_971_3 = simd_or(r800_fff_tmp29, r800_fff_tmp33);
                  carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(33), sequence_e0_a5_adv));
                  r800_fff_tmp34 = simd_and(sequence_e0_a5_adv, cc_range_940_971_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp34);
                  r800_fff_tmp35 = simd_and(r800_ffff_tmp1, r800_fff_tmp12);
                  byte_a6 = simd_and(r800_fff_tmp22, r800_fff_tmp35);
                  sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
                  r800_fff_tmp36 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r800_fff_tmp37 = simd_andc(byte_range_80_bf, r800_fff_tmp36);
                  r800_fff_tmp38 = simd_and(basis_bits.bit_5, tmp14);
                  r800_fff_tmp39 = simd_xor(basis_bits.bit_4, r800_fff_tmp38);
                  r800_fff_tmp40 = simd_andc(tmp13, r800_fff_tmp39);
                  r800_fff_tmp41 = simd_andc(r800_fff_tmp37, r800_fff_tmp40);
                  r800_fff_tmp42 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r800_fff_tmp43 = simd_not(tmp15);
                  r800_fff_tmp44 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp43), simd_andc(tmp22, basis_bits.bit_3));
                  r800_fff_tmp45 = simd_and(r800_fff_tmp42, r800_fff_tmp44);
                  r800_fff_tmp46 = simd_or(r800_fff_tmp41, r800_fff_tmp45);
                  r800_fff_tmp47 = simd_and(basis_bits.bit_4, r800_fff_tmp31);
                  r800_fff_tmp48 = simd_or(basis_bits.bit_3, r800_fff_tmp47);
                  r800_fff_tmp49 = simd_not(r800_fff_tmp48);
                  r800_fff_tmp50 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp49), simd_andc(r800_fff_tmp16, basis_bits.bit_2));
                  r800_fff_tmp51 = simd_and(byte_range_80_bf, r800_fff_tmp50);
                  r800_fff_tmp52 = simd_or(r800_fff_tmp46, r800_fff_tmp51);
                  r800_fff_tmp53 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  r800_fff_tmp54 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp43), simd_andc(tmp5, basis_bits.bit_3));
                  r800_fff_tmp55 = simd_and(r800_fff_tmp53, r800_fff_tmp54);
                  r800_fff_tmp56 = simd_or(r800_fff_tmp52, r800_fff_tmp55);
                  r800_fff_tmp57 = simd_and(r800_fff_tmp30, r800_fff_tmp13);
                  r800_fff_tmp58 = simd_or(r800_fff_tmp56, r800_fff_tmp57);
                  r800_fff_tmp59 = simd_not(tmp4);
                  r800_fff_tmp60 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp59), simd_andc(r800_fff_tmp26, basis_bits.bit_4));
                  r800_fff_tmp61 = simd_and(r800_fff_tmp30, r800_fff_tmp60);
                  r800_fff_tmp62 = simd_or(r800_fff_tmp58, r800_fff_tmp61);
                  r800_fff_tmp63 = simd_and(r800_fff_tmp30, tmp21);
                  cc_range_980_9bc_3 = simd_or(r800_fff_tmp62, r800_fff_tmp63);
                  carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(34), sequence_e0_a6_adv));
                  r800_fff_tmp64 = simd_and(sequence_e0_a6_adv, cc_range_980_9bc_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp64);
                  r800_fff_tmp65 = simd_and(r800_ffff_tmp1, tmp9);
                  byte_a7 = simd_and(r800_fff_tmp22, r800_fff_tmp65);
                  sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
                  r800_fff_tmp66 = simd_andc(r800_fff_tmp37, basis_bits.bit_4);
                  r800_fff_tmp67 = simd_andc(r800_fff_tmp66, r800_fff_tmp38);
                  r800_fff_tmp68 = simd_not(r800_fff_tmp31);
                  r800_fff_tmp69 = simd_and(basis_bits.bit_5, tmp9);
                  r800_fff_tmp70 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp68), simd_andc(r800_fff_tmp69, basis_bits.bit_4));
                  r800_fff_tmp71 = simd_and(r800_fff_tmp37, r800_fff_tmp70);
                  r800_fff_tmp72 = simd_or(r800_fff_tmp67, r800_fff_tmp71);
                  r800_fff_tmp73 = simd_and(r800_fff_tmp37, basis_bits.bit_4);
                  r800_fff_tmp74 = simd_xor(basis_bits.bit_5, tmp9);
                  r800_fff_tmp75 = simd_and(r800_fff_tmp73, r800_fff_tmp74);
                  r800_fff_tmp76 = simd_or(r800_fff_tmp72, r800_fff_tmp75);
                  r800_fff_tmp77 = simd_and(byte_range_80_bf, tmp19);
                  r800_fff_tmp78 = simd_and(r800_fff_tmp77, r800_fff_tmp65);
                  r800_fff_tmp79 = simd_or(r800_fff_tmp76, r800_fff_tmp78);
                  r800_fff_tmp80 = simd_andc(tmp21, basis_bits.bit_6);
                  r800_fff_tmp81 = simd_and(r800_fff_tmp77, r800_fff_tmp80);
                  r800_fff_tmp82 = simd_or(r800_fff_tmp79, r800_fff_tmp81);
                  r800_fff_tmp83 = simd_not(r800_fff_tmp19);
                  r800_fff_tmp84 = simd_and(basis_bits.bit_3, tmp22);
                  r800_fff_tmp85 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp83), simd_andc(r800_fff_tmp84, basis_bits.bit_2));
                  r800_fff_tmp86 = simd_and(byte_range_80_bf, r800_fff_tmp85);
                  r800_fff_tmp87 = simd_or(r800_fff_tmp82, r800_fff_tmp86);
                  r800_fff_tmp88 = simd_not(r800_4dff_tmp1);
                  r800_fff_tmp89 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp88), simd_andc(r800_fff_tmp27, basis_bits.bit_3));
                  r800_fff_tmp90 = simd_and(r800_fff_tmp53, r800_fff_tmp89);
                  cc_range_9c0_9e6_3 = simd_or(r800_fff_tmp87, r800_fff_tmp90);
                  carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(35), sequence_e0_a7_adv));
                  r800_fff_tmp91 = simd_and(sequence_e0_a7_adv, cc_range_9c0_9e6_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp91);
                  r800_fff_tmp92 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r800_fff_tmp93 = simd_andc(r800_fff_tmp92, tmp14);
                  byte_a8 = simd_and(r800_fff_tmp22, r800_fff_tmp93);
                  sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
                  r800_fff_tmp94 = simd_andc(r800_fff_tmp37, tmp13);
                  r800_fff_tmp95 = simd_and(r800_fff_tmp94, tmp14);
                  r800_fff_tmp96 = simd_not(tmp10);
                  r800_fff_tmp97 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp96), simd_andc(r800_fff_tmp38, basis_bits.bit_4));
                  r800_fff_tmp98 = simd_and(r800_fff_tmp37, r800_fff_tmp97);
                  r800_fff_tmp99 = simd_or(r800_fff_tmp95, r800_fff_tmp98);
                  r800_fff_tmp100 = simd_or(r800_fff_tmp99, r800_fff_tmp45);
                  r800_fff_tmp101 = simd_or(r800_fff_tmp100, r800_fff_tmp51);
                  r800_fff_tmp102 = simd_or(r800_fff_tmp101, r800_fff_tmp55);
                  r800_fff_tmp103 = simd_andc(basis_bits.bit_6, tmp13);
                  r800_fff_tmp104 = simd_and(r800_fff_tmp30, r800_fff_tmp103);
                  r800_fff_tmp105 = simd_or(r800_fff_tmp102, r800_fff_tmp104);
                  r800_fff_tmp106 = simd_and(r800_fff_tmp30, r800_ffff_tmp1);
                  r800_fff_tmp107 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r800_fff_tmp108 = simd_and(r800_fff_tmp106, r800_fff_tmp107);
                  r800_fff_tmp109 = simd_or(r800_fff_tmp105, r800_fff_tmp108);
                  r800_fff_tmp110 = simd_andc(r800_fff_tmp92, basis_bits.bit_6);
                  r800_fff_tmp111 = simd_and(r800_fff_tmp30, r800_fff_tmp110);
                  r800_fff_tmp112 = simd_or(r800_fff_tmp109, r800_fff_tmp111);
                  r800_fff_tmp113 = simd_andc(tmp21, tmp14);
                  r800_fff_tmp114 = simd_and(r800_fff_tmp30, r800_fff_tmp113);
                  r800_fff_tmp115 = simd_or(r800_fff_tmp112, r800_fff_tmp114);
                  r800_fff_tmp116 = simd_and(r800_fff_tmp30, r800_fff_tmp3);
                  cc_range_a01_a3e_3 = simd_or(r800_fff_tmp115, r800_fff_tmp116);
                  carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(36), sequence_e0_a8_adv));
                  r800_fff_tmp117 = simd_and(sequence_e0_a8_adv, cc_range_a01_a3e_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp117);
                  r800_fff_tmp118 = simd_and(r800_fff_tmp92, r800_fff_tmp7);
                  byte_a9 = simd_and(r800_fff_tmp22, r800_fff_tmp118);
                  sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
                  r800_fff_tmp119 = simd_andc(r800_fff_tmp94, tmp9);
                  r800_fff_tmp120 = simd_or(r800_fff_tmp119, r800_fff_tmp71);
                  r800_fff_tmp121 = simd_not(basis_bits.bit_6);
                  r800_fff_tmp122 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp121), simd_andc(tmp9, basis_bits.bit_5));
                  r800_fff_tmp123 = simd_and(r800_fff_tmp73, r800_fff_tmp122);
                  r800_fff_tmp124 = simd_or(r800_fff_tmp120, r800_fff_tmp123);
                  r800_fff_tmp125 = simd_and(r800_fff_tmp77, r800_fff_tmp8);
                  r800_fff_tmp126 = simd_or(r800_fff_tmp124, r800_fff_tmp125);
                  r800_fff_tmp127 = simd_and(r800_fff_tmp77, basis_bits.bit_4);
                  r800_fff_tmp128 = simd_xor(basis_bits.bit_5, tmp14);
                  r800_fff_tmp129 = simd_and(r800_fff_tmp127, r800_fff_tmp128);
                  r800_fff_tmp130 = simd_or(r800_fff_tmp126, r800_fff_tmp129);
                  r800_fff_tmp131 = simd_and(tmp21, r800_fff_tmp12);
                  r800_fff_tmp132 = simd_and(r800_fff_tmp77, r800_fff_tmp131);
                  r800_fff_tmp133 = simd_or(r800_fff_tmp130, r800_fff_tmp132);
                  r800_fff_tmp134 = simd_xor(basis_bits.bit_3, r800_fff_tmp27);
                  r800_fff_tmp135 = simd_and(r800_fff_tmp53, r800_fff_tmp134);
                  cc_range_a40_a66_3 = simd_or(r800_fff_tmp133, r800_fff_tmp135);
                  carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(37), sequence_e0_a9_adv));
                  r800_fff_tmp136 = simd_and(sequence_e0_a9_adv, cc_range_a40_a66_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp136);
                  r800_fff_tmp137 = simd_and(r800_fff_tmp92, r800_fff_tmp12);
                  byte_aa = simd_and(r800_fff_tmp22, r800_fff_tmp137);
                  sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
                  r800_fff_tmp138 = simd_not(r800_fff_tmp26);
                  r800_fff_tmp139 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp138), simd_andc(r800_fff_tmp38, basis_bits.bit_4));
                  r800_fff_tmp140 = simd_and(r800_fff_tmp37, r800_fff_tmp139);
                  r800_fff_tmp141 = simd_or(r800_fff_tmp95, r800_fff_tmp140);
                  r800_fff_tmp142 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp88), simd_andc(tmp22, basis_bits.bit_3));
                  r800_fff_tmp143 = simd_and(r800_fff_tmp42, r800_fff_tmp142);
                  r800_fff_tmp144 = simd_or(r800_fff_tmp141, r800_fff_tmp143);
                  r800_fff_tmp145 = simd_or(r800_fff_tmp144, r800_fff_tmp51);
                  r800_fff_tmp146 = simd_or(r800_fff_tmp145, r800_fff_tmp55);
                  r800_fff_tmp147 = simd_or(r800_fff_tmp146, r800_fff_tmp104);
                  r800_fff_tmp148 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp59), simd_andc(r800_fff_tmp38, basis_bits.bit_4));
                  r800_fff_tmp149 = simd_and(r800_fff_tmp30, r800_fff_tmp148);
                  r800_fff_tmp150 = simd_or(r800_fff_tmp147, r800_fff_tmp149);
                  cc_range_a81_abc_3 = simd_or(r800_fff_tmp150, r800_fff_tmp63);
                  carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(38), sequence_e0_aa_adv));
                  r800_fff_tmp151 = simd_and(sequence_e0_aa_adv, cc_range_a81_abc_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp151);
                  r800_fff_tmp152 = simd_and(r800_fff_tmp92, tmp9);
                  byte_ab = simd_and(r800_fff_tmp22, r800_fff_tmp152);
                  sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
                  r800_fff_tmp153 = simd_andc(r800_fff_tmp66, r800_fff_tmp26);
                  r800_fff_tmp154 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp59), simd_andc(r800_fff_tmp69, basis_bits.bit_4));
                  r800_fff_tmp155 = simd_and(r800_fff_tmp37, r800_fff_tmp154);
                  r800_fff_tmp156 = simd_or(r800_fff_tmp153, r800_fff_tmp155);
                  r800_fff_tmp157 = simd_or(r800_fff_tmp156, r800_fff_tmp123);
                  r800_fff_tmp158 = simd_andc(r800_fff_tmp77, tmp15);
                  r800_fff_tmp159 = simd_or(r800_fff_tmp157, r800_fff_tmp158);
                  r800_fff_tmp160 = simd_andc(r800_fff_tmp22, tmp13);
                  r800_fff_tmp161 = simd_or(r800_fff_tmp159, r800_fff_tmp160);
                  cc_range_ac0_ae6_3 = simd_or(r800_fff_tmp161, r800_fff_tmp28);
                  carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(39), sequence_e0_ab_adv));
                  r800_fff_tmp162 = simd_and(sequence_e0_ab_adv, cc_range_ac0_ae6_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp162);
                  byte_ac = simd_and(r800_fff_tmp22, r800_fff_tmp113);
                  sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
                  r800_fff_tmp163 = simd_and(r800_fff_tmp37, r800_fff_tmp39);
                  r800_fff_tmp164 = simd_or(r800_fff_tmp95, r800_fff_tmp163);
                  r800_fff_tmp165 = simd_or(r800_fff_tmp164, r800_fff_tmp45);
                  r800_fff_tmp166 = simd_or(r800_fff_tmp165, r800_fff_tmp51);
                  r800_fff_tmp167 = simd_or(r800_fff_tmp166, r800_fff_tmp55);
                  r800_fff_tmp168 = simd_or(r800_fff_tmp167, r800_fff_tmp104);
                  r800_fff_tmp169 = simd_or(r800_fff_tmp168, r800_fff_tmp149);
                  cc_range_b01_b3c_3 = simd_or(r800_fff_tmp169, r800_fff_tmp63);
                  carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(40), sequence_e0_ac_adv));
                  r800_fff_tmp170 = simd_and(sequence_e0_ac_adv, cc_range_b01_b3c_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp170);
                  r800_fff_tmp171 = simd_and(tmp21, r800_fff_tmp7);
                  byte_ad = simd_and(r800_fff_tmp22, r800_fff_tmp171);
                  sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
                  r800_fff_tmp172 = simd_or(r800_fff_tmp72, r800_fff_tmp123);
                  r800_fff_tmp173 = simd_and(r800_ffff_tmp1, basis_bits.bit_6);
                  r800_fff_tmp174 = simd_and(r800_fff_tmp77, r800_fff_tmp173);
                  r800_fff_tmp175 = simd_or(r800_fff_tmp172, r800_fff_tmp174);
                  r800_fff_tmp176 = simd_or(r800_fff_tmp175, r800_fff_tmp81);
                  r800_fff_tmp177 = simd_or(r800_fff_tmp176, r800_fff_tmp86);
                  r800_fff_tmp178 = simd_or(r800_fff_tmp177, r800_fff_tmp28);
                  r800_fff_tmp179 = simd_and(r800_fff_tmp30, r800_fff_tmp8);
                  cc_range_b40_b71_3 = simd_or(r800_fff_tmp178, r800_fff_tmp179);
                  carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(41), sequence_e0_ad_adv));
                  r800_fff_tmp180 = simd_and(sequence_e0_ad_adv, cc_range_b40_b71_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp180);
                  byte_ae = simd_and(r800_fff_tmp22, r800_fff_tmp131);
                  sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
                  r800_fff_tmp181 = simd_or(r800_fff_tmp103, r800_fff_tmp97);
                  r800_fff_tmp182 = simd_and(r800_fff_tmp37, r800_fff_tmp181);
                  r800_fff_tmp183 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp43), simd_andc(r800_fff_tmp3, basis_bits.bit_3));
                  r800_fff_tmp184 = simd_and(r800_fff_tmp42, r800_fff_tmp183);
                  r800_fff_tmp185 = simd_or(r800_fff_tmp182, r800_fff_tmp184);
                  r800_fff_tmp186 = simd_andc(r800_fff_tmp77, basis_bits.bit_4);
                  r800_fff_tmp187 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
                  r800_fff_tmp188 = simd_and(r800_fff_tmp186, r800_fff_tmp187);
                  r800_fff_tmp189 = simd_or(r800_fff_tmp185, r800_fff_tmp188);
                  r800_fff_tmp190 = simd_and(r800_fff_tmp77, r800_fff_tmp92);
                  r800_fff_tmp191 = simd_and(r800_fff_tmp190, r800_fff_tmp107);
                  r800_fff_tmp192 = simd_or(r800_fff_tmp189, r800_fff_tmp191);
                  r800_fff_tmp193 = simd_and(r800_fff_tmp77, r800_fff_tmp113);
                  r800_fff_tmp194 = simd_or(r800_fff_tmp192, r800_fff_tmp193);
                  r800_fff_tmp195 = simd_and(r800_fff_tmp77, r800_fff_tmp3);
                  r800_fff_tmp196 = simd_or(r800_fff_tmp194, r800_fff_tmp195);
                  r800_fff_tmp197 = simd_andc(r800_fff_tmp22, basis_bits.bit_4);
                  r800_fff_tmp198 = simd_not(tmp14);
                  r800_fff_tmp199 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp198), simd_andc(tmp9, basis_bits.bit_5));
                  r800_fff_tmp200 = simd_and(r800_fff_tmp197, r800_fff_tmp199);
                  r800_fff_tmp201 = simd_or(r800_fff_tmp196, r800_fff_tmp200);
                  r800_fff_tmp202 = simd_and(r800_fff_tmp22, r800_fff_tmp92);
                  r800_fff_tmp203 = simd_andc(r800_fff_tmp202, tmp9);
                  r800_fff_tmp204 = simd_or(r800_fff_tmp201, r800_fff_tmp203);
                  r800_fff_tmp205 = simd_not(tmp5);
                  r800_fff_tmp206 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp205), simd_andc(r800_fff_tmp3, basis_bits.bit_3));
                  r800_fff_tmp207 = simd_and(r800_fff_tmp53, r800_fff_tmp206);
                  r800_fff_tmp208 = simd_or(r800_fff_tmp204, r800_fff_tmp207);
                  cc_range_b82_bbe_3 = simd_or(r800_fff_tmp208, r800_fff_tmp116);
                  carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(42), sequence_e0_ae_adv));
                  r800_fff_tmp209 = simd_and(sequence_e0_ae_adv, cc_range_b82_bbe_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp209);
                  byte_af = simd_and(r800_fff_tmp22, tmp22);
                  sequence_e0_af = simd_and(byte_e0_adv, byte_af);
                  r800_fff_tmp210 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp68), simd_andc(r800_fff_tmp26, basis_bits.bit_4));
                  r800_fff_tmp211 = simd_and(r800_fff_tmp37, r800_fff_tmp210);
                  r800_fff_tmp212 = simd_or(r800_fff_tmp119, r800_fff_tmp211);
                  r800_fff_tmp213 = simd_and(r800_fff_tmp73, r800_fff_tmp187);
                  r800_fff_tmp214 = simd_or(r800_fff_tmp212, r800_fff_tmp213);
                  r800_fff_tmp215 = simd_or(r800_fff_tmp214, r800_fff_tmp158);
                  r800_fff_tmp216 = simd_or(r800_fff_tmp215, r800_fff_tmp78);
                  cc_range_bc0_be6_3 = simd_or(r800_fff_tmp216, r800_fff_tmp28);
                  carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(43), sequence_e0_af_adv));
                  r800_fff_tmp217 = simd_and(sequence_e0_af_adv, cc_range_bc0_be6_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp217);
                  byte_b0 = simd_andc(r800_fff_tmp30, tmp15);
                  sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
                  r800_fff_tmp218 = simd_or(r800_fff_tmp41, r800_fff_tmp184);
                  r800_fff_tmp219 = simd_and(basis_bits.bit_3, r800_4dff_tmp1);
                  r800_fff_tmp220 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp49), simd_andc(r800_fff_tmp219, basis_bits.bit_2));
                  r800_fff_tmp221 = simd_and(byte_range_80_bf, r800_fff_tmp220);
                  r800_fff_tmp222 = simd_or(r800_fff_tmp218, r800_fff_tmp221);
                  r800_fff_tmp223 = simd_xor(basis_bits.bit_3, tmp5);
                  r800_fff_tmp224 = simd_and(r800_fff_tmp53, r800_fff_tmp223);
                  r800_fff_tmp225 = simd_or(r800_fff_tmp222, r800_fff_tmp224);
                  r800_fff_tmp226 = simd_and(r800_fff_tmp63, tmp14);
                  cc_range_c00_c3d_3 = simd_or(r800_fff_tmp225, r800_fff_tmp226);
                  carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(44), sequence_e0_b0_adv));
                  r800_fff_tmp227 = simd_and(sequence_e0_b0_adv, cc_range_c00_c3d_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp227);
                  byte_b1 = r800_fff_tmp179;
                  sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
                  r800_fff_tmp228 = simd_or(r800_fff_tmp67, r800_fff_tmp211);
                  r800_fff_tmp229 = simd_or(r800_fff_tmp228, r800_fff_tmp213);
                  r800_fff_tmp230 = simd_and(r800_fff_tmp77, r800_ffff_tmp1);
                  r800_fff_tmp231 = simd_and(r800_fff_tmp230, r800_fff_tmp107);
                  r800_fff_tmp232 = simd_or(r800_fff_tmp229, r800_fff_tmp231);
                  r800_fff_tmp233 = simd_and(r800_fff_tmp77, r800_fff_tmp110);
                  r800_fff_tmp234 = simd_or(r800_fff_tmp232, r800_fff_tmp233);
                  r800_fff_tmp235 = simd_or(r800_fff_tmp234, r800_fff_tmp160);
                  cc_range_c40_c66_3 = simd_or(r800_fff_tmp235, r800_fff_tmp28);
                  carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(45), sequence_e0_b1_adv));
                  r800_fff_tmp236 = simd_and(sequence_e0_b1_adv, cc_range_c40_c66_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp236);
                  byte_b2 = r800_fff_tmp57;
                  sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
                  r800_fff_tmp237 = simd_or(r800_fff_tmp164, r800_fff_tmp184);
                  r800_fff_tmp238 = simd_or(r800_fff_tmp237, r800_fff_tmp221);
                  r800_fff_tmp239 = simd_not(tmp13);
                  r800_fff_tmp240 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp239), simd_andc(tmp5, basis_bits.bit_3));
                  r800_fff_tmp241 = simd_and(r800_fff_tmp53, r800_fff_tmp240);
                  r800_fff_tmp242 = simd_or(r800_fff_tmp238, r800_fff_tmp241);
                  r800_fff_tmp243 = simd_or(r800_fff_tmp242, r800_fff_tmp149);
                  cc_range_c81_cbc_3 = simd_or(r800_fff_tmp243, r800_fff_tmp63);
                  carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(46), sequence_e0_b2_adv));
                  r800_fff_tmp244 = simd_and(sequence_e0_b2_adv, cc_range_c81_cbc_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp244);
                  byte_b3 = simd_and(r800_fff_tmp30, r800_fff_tmp18);
                  sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
                  r800_fff_tmp245 = simd_or(r800_fff_tmp232, r800_fff_tmp132);
                  r800_fff_tmp246 = simd_or(r800_fff_tmp245, r800_fff_tmp160);
                  r800_fff_tmp247 = simd_or(r800_fff_tmp246, r800_fff_tmp28);
                  r800_fff_tmp248 = simd_andc(r800_fff_tmp30, tmp13);
                  r800_fff_tmp249 = simd_and(r800_fff_tmp248, r800_fff_tmp107);
                  cc_range_cc0_cf1_3 = simd_or(r800_fff_tmp247, r800_fff_tmp249);
                  carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(47), sequence_e0_b3_adv));
                  r800_fff_tmp250 = simd_and(sequence_e0_b3_adv, cc_range_cc0_cf1_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp250);
                  byte_b4 = simd_and(r800_fff_tmp30, r800_ffff_tmp2);
                  sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
                  r800_fff_tmp251 = simd_and(basis_bits.bit_3, tmp11);
                  r800_fff_tmp252 = simd_not(r800_fff_tmp251);
                  r800_fff_tmp253 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp252), simd_andc(r800_fff_tmp219, basis_bits.bit_2));
                  r800_fff_tmp254 = simd_and(byte_range_80_bf, r800_fff_tmp253);
                  r800_fff_tmp255 = simd_or(r800_fff_tmp237, r800_fff_tmp254);
                  cc_range_d01_d3d_3 = simd_or(r800_fff_tmp255, r800_fff_tmp226);
                  carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(48), sequence_e0_b4_adv));
                  r800_fff_tmp256 = simd_and(sequence_e0_b4_adv, cc_range_d01_d3d_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp256);
                  byte_b5 = simd_and(r800_fff_tmp30, r800_fff_tmp23);
                  sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
                  r800_fff_tmp257 = simd_not(tmp9);
                  r800_fff_tmp258 = simd_or(simd_and(basis_bits.bit_5, r800_fff_tmp257), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  r800_fff_tmp259 = simd_and(r800_fff_tmp73, r800_fff_tmp258);
                  r800_fff_tmp260 = simd_or(r800_fff_tmp228, r800_fff_tmp259);
                  r800_fff_tmp261 = simd_or(r800_fff_tmp260, r800_fff_tmp78);
                  r800_fff_tmp262 = simd_or(r800_fff_tmp261, r800_fff_tmp160);
                  r800_fff_tmp263 = simd_or(r800_fff_tmp262, r800_fff_tmp28);
                  r800_fff_tmp264 = simd_and(r800_fff_tmp30, basis_bits.bit_4);
                  r800_fff_tmp265 = simd_and(r800_fff_tmp264, tmp4);
                  cc_range_d40_d7a_3 = simd_or(r800_fff_tmp263, r800_fff_tmp265);
                  carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(49), sequence_e0_b5_adv));
                  r800_fff_tmp266 = simd_and(sequence_e0_b5_adv, cc_range_d40_d7a_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp266);
                  byte_b6 = simd_and(r800_fff_tmp30, r800_fff_tmp35);
                  sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
                  r800_fff_tmp267 = simd_and(r800_fff_tmp37, r800_fff_tmp103);
                  r800_fff_tmp268 = simd_or(basis_bits.bit_4, r800_fff_tmp69);
                  r800_fff_tmp269 = simd_not(r800_fff_tmp268);
                  r800_fff_tmp270 = simd_or(basis_bits.bit_4, r800_fff_tmp38);
                  r800_fff_tmp271 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp269), simd_andc(r800_fff_tmp270, basis_bits.bit_3));
                  r800_fff_tmp272 = simd_and(r800_fff_tmp42, r800_fff_tmp271);
                  r800_fff_tmp273 = simd_or(r800_fff_tmp267, r800_fff_tmp272);
                  r800_fff_tmp274 = simd_not(r800_fff_tmp219);
                  r800_fff_tmp275 = simd_and(basis_bits.bit_3, tmp5);
                  r800_fff_tmp276 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp274), simd_andc(r800_fff_tmp275, basis_bits.bit_2));
                  r800_fff_tmp277 = simd_and(byte_range_80_bf, r800_fff_tmp276);
                  r800_fff_tmp278 = simd_or(r800_fff_tmp273, r800_fff_tmp277);
                  r800_fff_tmp279 = simd_not(basis_bits.bit_5);
                  r800_fff_tmp280 = simd_or(simd_and(basis_bits.bit_4, r800_fff_tmp279), simd_andc(tmp10, basis_bits.bit_4));
                  r800_fff_tmp281 = simd_and(r800_fff_tmp30, r800_fff_tmp280);
                  r800_fff_tmp282 = simd_or(r800_fff_tmp278, r800_fff_tmp281);
                  r800_fff_tmp283 = simd_and(r800_fff_tmp30, r800_fff_tmp171);
                  cc_range_d82_dbd_3 = simd_or(r800_fff_tmp282, r800_fff_tmp283);
                  carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(50), sequence_e0_b6_adv));
                  r800_fff_tmp284 = simd_and(sequence_e0_b6_adv, cc_range_d82_dbd_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp284);
                  byte_b7 = simd_and(r800_fff_tmp30, r800_fff_tmp65);
                  sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
                  r800_fff_tmp285 = simd_andc(r800_fff_tmp66, r800_fff_tmp69);
                  r800_fff_tmp286 = simd_and(r800_fff_tmp37, r800_fff_tmp137);
                  r800_fff_tmp287 = simd_or(r800_fff_tmp285, r800_fff_tmp286);
                  r800_fff_tmp288 = simd_not(r800_fff_tmp270);
                  r800_fff_tmp289 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp288), simd_andc(tmp22, basis_bits.bit_3));
                  r800_fff_tmp290 = simd_and(r800_fff_tmp42, r800_fff_tmp289);
                  r800_fff_tmp291 = simd_or(r800_fff_tmp287, r800_fff_tmp290);
                  r800_fff_tmp292 = simd_and(r800_fff_tmp77, r800_fff_tmp35);
                  r800_fff_tmp293 = simd_or(r800_fff_tmp291, r800_fff_tmp292);
                  r800_fff_tmp294 = simd_or(r800_fff_tmp293, r800_fff_tmp127);
                  r800_fff_tmp295 = simd_or(r800_fff_tmp294, r800_fff_tmp28);
                  cc_range_dc0_df2_3 = simd_or(r800_fff_tmp295, r800_fff_tmp104);
                  carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(51), sequence_e0_b7_adv));
                  r800_fff_tmp296 = simd_and(sequence_e0_b7_adv, cc_range_dc0_df2_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp296);
                  byte_b8 = simd_and(r800_fff_tmp30, r800_fff_tmp93);
                  sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
                  r800_fff_tmp297 = simd_or(basis_bits.bit_3, tmp15);
                  r800_fff_tmp298 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp252), simd_andc(r800_fff_tmp297, basis_bits.bit_2));
                  byte_range_81_ba = simd_and(byte_range_80_bf, r800_fff_tmp298);
                  carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(52), sequence_e0_b8_adv));
                  r800_fff_tmp299 = simd_and(sequence_e0_b8_adv, byte_range_81_ba);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp299);
                  byte_b9 = simd_and(r800_fff_tmp30, r800_fff_tmp118);
                  sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
                  r800_fff_tmp300 = simd_and(basis_bits.bit_4, r800_fff_tmp69);
                  r800_fff_tmp301 = simd_andc(r800_fff_tmp37, r800_fff_tmp300);
                  r800_fff_tmp302 = simd_andc(r800_fff_tmp77, tmp5);
                  cc_range_e40_e50_3 = simd_or(r800_fff_tmp301, r800_fff_tmp302);
                  carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(53), sequence_e0_b9_adv));
                  r800_fff_tmp303 = simd_and(sequence_e0_b9_adv, cc_range_e40_e50_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp303);
                  byte_ba = simd_and(r800_fff_tmp30, r800_fff_tmp137);
                  sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
                  r800_fff_tmp304 = simd_and(r800_fff_tmp94, r800_fff_tmp107);
                  r800_fff_tmp305 = simd_and(r800_fff_tmp37, r800_ffff_tmp2);
                  r800_fff_tmp306 = simd_or(r800_fff_tmp304, r800_fff_tmp305);
                  r800_fff_tmp307 = simd_or(r800_fff_tmp306, r800_fff_tmp71);
                  r800_fff_tmp308 = simd_or(r800_fff_tmp307, r800_fff_tmp286);
                  r800_fff_tmp309 = simd_and(r800_fff_tmp37, r800_fff_tmp171);
                  r800_fff_tmp310 = simd_or(r800_fff_tmp308, r800_fff_tmp309);
                  r800_fff_tmp311 = simd_or(r800_fff_tmp310, r800_fff_tmp230);
                  r800_fff_tmp312 = simd_and(r800_fff_tmp127, r800_fff_tmp31);
                  r800_fff_tmp313 = simd_or(r800_fff_tmp311, r800_fff_tmp312);
                  r800_fff_tmp314 = simd_and(r800_fff_tmp160, tmp14);
                  r800_fff_tmp315 = simd_or(r800_fff_tmp313, r800_fff_tmp314);
                  r800_fff_tmp316 = simd_or(r800_fff_tmp315, byte_a5);
                  r800_fff_tmp317 = simd_or(r800_fff_tmp316, byte_a7);
                  r800_fff_tmp318 = simd_and(r800_fff_tmp92, basis_bits.bit_6);
                  r800_fff_tmp319 = simd_and(r800_fff_tmp22, r800_fff_tmp318);
                  r800_fff_tmp320 = simd_or(r800_fff_tmp317, r800_fff_tmp319);
                  r800_fff_tmp321 = simd_and(tmp21, tmp14);
                  r800_fff_tmp322 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp205), simd_andc(r800_fff_tmp321, basis_bits.bit_3));
                  r800_fff_tmp323 = simd_and(r800_fff_tmp53, r800_fff_tmp322);
                  r800_fff_tmp324 = simd_or(r800_fff_tmp320, r800_fff_tmp323);
                  r800_fff_tmp325 = simd_and(r800_fff_tmp264, r800_fff_tmp122);
                  cc_range_e81_ebb_3 = simd_or(r800_fff_tmp324, r800_fff_tmp325);
                  carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(54), sequence_e0_ba_adv));
                  r800_fff_tmp326 = simd_and(sequence_e0_ba_adv, cc_range_e81_ebb_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp326);
                  byte_bb = simd_and(r800_fff_tmp30, r800_fff_tmp152);
                  sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
                  r800_fff_tmp327 = simd_and(r800_fff_tmp37, r800_fff_tmp35);
                  r800_fff_tmp328 = simd_or(r800_fff_tmp67, r800_fff_tmp327);
                  r800_fff_tmp329 = simd_andc(r800_fff_tmp73, r800_fff_tmp26);
                  r800_fff_tmp330 = simd_or(r800_fff_tmp328, r800_fff_tmp329);
                  r800_fff_tmp331 = simd_or(r800_fff_tmp330, r800_fff_tmp302);
                  r800_fff_tmp332 = simd_and(r800_fff_tmp77, tmp21);
                  cc_range_ec0_edc_3 = simd_or(r800_fff_tmp331, r800_fff_tmp332);
                  carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(55), sequence_e0_bb_adv));
                  r800_fff_tmp333 = simd_and(sequence_e0_bb_adv, cc_range_ec0_edc_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp333);
                  byte_bc = r800_fff_tmp114;
                  sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
                  r800_fff_tmp334 = simd_andc(r800_fff_tmp37, tmp15);
                  r800_fff_tmp335 = simd_or(r800_fff_tmp334, r800_fff_tmp233);
                  r800_fff_tmp336 = simd_andc(r800_fff_tmp22, tmp5);
                  r800_fff_tmp337 = simd_or(r800_fff_tmp335, r800_fff_tmp336);
                  r800_fff_tmp338 = simd_or(r800_fff_tmp337, byte_b5);
                  r800_fff_tmp339 = simd_or(r800_fff_tmp338, byte_b7);
                  r800_fff_tmp340 = simd_or(r800_fff_tmp339, byte_b9);
                  cc_range_f00_f3e_3 = simd_or(r800_fff_tmp340, r800_fff_tmp116);
                  carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(56), sequence_e0_bc_adv));
                  r800_fff_tmp341 = simd_and(sequence_e0_bc_adv, cc_range_f00_f3e_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp341);
                  byte_bd = r800_fff_tmp283;
                  sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
                  r800_fff_tmp342 = simd_or(basis_bits.bit_3, r800_fff_tmp321);
                  r800_fff_tmp343 = simd_not(r800_fff_tmp342);
                  r800_fff_tmp344 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp343), simd_andc(r800_fff_tmp48, basis_bits.bit_2));
                  r800_fff_tmp345 = simd_and(byte_range_80_bf, r800_fff_tmp344);
                  r800_fff_tmp346 = simd_or(r800_fff_tmp66, r800_fff_tmp345);
                  cc_range_f40_f71_3 = simd_or(r800_fff_tmp346, r800_fff_tmp33);
                  carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(57), sequence_e0_bd_adv));
                  r800_fff_tmp347 = simd_and(sequence_e0_bd_adv, cc_range_f40_f71_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp347);
                  byte_be = simd_and(r800_fff_tmp30, r800_fff_tmp131);
                  sequence_e0_be = simd_and(byte_e0_adv, byte_be);
                  r800_fff_tmp348 = simd_not(basis_bits.bit_4);
                  r800_fff_tmp349 = simd_or(simd_and(basis_bits.bit_3, r800_fff_tmp348), simd_andc(r800_fff_tmp27, basis_bits.bit_3));
                  r800_fff_tmp350 = simd_and(r800_fff_tmp42, r800_fff_tmp349);
                  r800_fff_tmp351 = simd_or(r800_fff_tmp67, r800_fff_tmp350);
                  r800_fff_tmp352 = simd_and(basis_bits.bit_3, r800_fff_tmp321);
                  r800_fff_tmp353 = simd_not(r800_fff_tmp352);
                  r800_fff_tmp354 = simd_and(basis_bits.bit_3, r800_fff_tmp47);
                  r800_fff_tmp355 = simd_or(simd_and(basis_bits.bit_2, r800_fff_tmp353), simd_andc(r800_fff_tmp354, basis_bits.bit_2));
                  r800_fff_tmp356 = simd_and(byte_range_80_bf, r800_fff_tmp355);
                  cc_range_f80_f99_3 = simd_or(r800_fff_tmp351, r800_fff_tmp356);
                  carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(58), sequence_e0_be_adv));
                  r800_fff_tmp357 = simd_and(sequence_e0_be_adv, cc_range_f80_f99_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp357);
                  byte_bf = simd_and(r800_fff_tmp30, tmp22);
                  sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
                  byte_86 = r800_fff_tmp327;
                  carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(59), sequence_e0_bf_adv));
                  r800_fff_tmp358 = simd_and(sequence_e0_bf_adv, byte_86);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r800_fff_tmp358);
                }
                else {
                  carryQ.CarryDequeueEnqueue(27, 33);
                }
                r800_1fff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r800_1fff_tmp2 = simd_andc(r800_1fff_tmp1, tmp13);
                byte_e1 = simd_and(byte_range_e0_ef, r800_1fff_tmp2);
                if ((bitblock::any(byte_e1) || carryQ.CarryTest(60, 47))) {
                  r1000_1fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r1000_1fff_tmp2 = simd_andc(r800_ffff_tmp3, r1000_1fff_tmp1);
                  byte_80 = simd_andc(r1000_1fff_tmp2, tmp15);
                  carryQ.cq[60] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(60), r1000_1fff_tmp3));
                  sequence_e1_80 = simd_and(r1000_1fff_tmp3, byte_80);
                  byte_e1_adv = r1000_1fff_tmp3;
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(61), sequence_e1_80_adv));
                  r1000_1fff_tmp4 = simd_and(sequence_e1_80_adv, byte_range_80_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r1000_1fff_tmp4);
                  r1000_1fff_tmp5 = simd_andc(byte_range_80_bf, r1000_1fff_tmp1);
                  byte_81 = simd_and(r1000_1fff_tmp5, r800_1fff_tmp2);
                  sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
                  r1000_1fff_tmp6 = simd_andc(r1000_1fff_tmp5, tmp5);
                  r1000_1fff_tmp7 = simd_and(byte_range_80_bf, r1000_1fff_tmp1);
                  cc_range_1040_1050_3 = simd_or(r1000_1fff_tmp6, r1000_1fff_tmp7);
                  carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(62), sequence_e1_81_adv));
                  r1000_1fff_tmp8 = simd_and(sequence_e1_81_adv, cc_range_1040_1050_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r1000_1fff_tmp8);
                  r1000_1fff_tmp9 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                  r1000_1fff_tmp10 = simd_andc(r1000_1fff_tmp9, tmp13);
                  byte_82 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp10);
                  sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
                  r1000_1fff_tmp11 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r1000_1fff_tmp12 = simd_and(tmp21, basis_bits.bit_6);
                  r1000_1fff_tmp13 = simd_and(basis_bits.bit_3, r1000_1fff_tmp12);
                  r1000_1fff_tmp14 = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp13);
                  r1000_1fff_tmp15 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  cc_range_1080_10a0_3 = simd_or(r1000_1fff_tmp14, r1000_1fff_tmp15);
                  carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(63), sequence_e1_82_adv));
                  r1000_1fff_tmp16 = simd_and(sequence_e1_82_adv, cc_range_1080_10a0_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r1000_1fff_tmp16);
                  r1000_1fff_tmp17 = simd_andc(tmp9, tmp13);
                  byte_83 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp17);
                  sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
                  r1000_1fff_tmp18 = simd_andc(r1000_1fff_tmp5, basis_bits.bit_4);
                  r1000_1fff_tmp19 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r1000_1fff_tmp20 = simd_andc(r1000_1fff_tmp18, r1000_1fff_tmp19);
                  r1000_1fff_tmp21 = simd_and(r800_ffff_tmp1, tmp9);
                  r1000_1fff_tmp22 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp21);
                  r1000_1fff_tmp23 = simd_or(r1000_1fff_tmp20, r1000_1fff_tmp22);
                  r1000_1fff_tmp24 = simd_and(tmp21, r800_1fff_tmp1);
                  r1000_1fff_tmp25 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp24);
                  r1000_1fff_tmp26 = simd_or(r1000_1fff_tmp23, r1000_1fff_tmp25);
                  r1000_1fff_tmp27 = simd_and(basis_bits.bit_3, tmp11);
                  r1000_1fff_tmp28 = simd_not(r1000_1fff_tmp27);
                  r1000_1fff_tmp29 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp28), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
                  r1000_1fff_tmp30 = simd_and(byte_range_80_bf, r1000_1fff_tmp29);
                  r1000_1fff_tmp31 = simd_or(r1000_1fff_tmp26, r1000_1fff_tmp30);
                  r1000_1fff_tmp32 = simd_and(byte_range_80_bf, tmp2);
                  r1000_1fff_tmp33 = simd_and(r1000_1fff_tmp32, tmp21);
                  cc_range_10c0_10fc_3 = simd_or(r1000_1fff_tmp31, r1000_1fff_tmp33);
                  carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(64), sequence_e1_83_adv));
                  r1000_1fff_tmp34 = simd_and(sequence_e1_83_adv, cc_range_10c0_10fc_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r1000_1fff_tmp34);
                  r1000_1fff_tmp35 = simd_or(basis_bits.bit_5, tmp14);
                  r1000_1fff_tmp36 = simd_not(r1000_1fff_tmp35);
                  r1000_1fff_tmp37 = simd_or(simd_and(basis_bits.bit_4, r1000_1fff_tmp36), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
                  byte_range_84_88 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp37);
                  byte_e1_byte_range_84_88 = simd_and(byte_e1_adv, byte_range_84_88);
                  carryQ.cq[65] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_84_88, carryQ.get_carry_in(65), r1000_1fff_tmp38));
                  byte_e1_byte_range_84_88_sfx = simd_and(r1000_1fff_tmp38, byte_range_80_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, byte_e1_byte_range_84_88_sfx);
                  r1000_1fff_tmp39 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r1000_1fff_tmp40 = simd_and(r1000_1fff_tmp39, r800_1fff_tmp1);
                  byte_89 = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp40);
                  sequence_e1_89 = simd_and(byte_e1_adv, byte_89);
                  r1000_1fff_tmp41 = simd_and(basis_bits.bit_4, r1000_1fff_tmp35);
                  byte_range_80_88 = simd_andc(r1000_1fff_tmp5, r1000_1fff_tmp41);
                  carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_e1_89, carryQ.get_carry_in(66), r1000_1fff_tmp42));
                  sequence_e1_89_byte_range_80_88 = simd_and(r1000_1fff_tmp42, byte_range_80_88);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_89_byte_range_80_88);
                  r1000_1fff_tmp43 = simd_and(r1000_1fff_tmp39, r1000_1fff_tmp9);
                  byte_8a = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp43);
                  sequence_e1_8a = simd_and(byte_e1_adv, byte_8a);
                  carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e1_8a, carryQ.get_carry_in(67), r1000_1fff_tmp44));
                  sequence_e1_8a_byte_range_80_88 = simd_and(r1000_1fff_tmp44, byte_range_80_88);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_8a_byte_range_80_88);
                  r1000_1fff_tmp45 = simd_and(r1000_1fff_tmp39, tmp9);
                  byte_8b = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp45);
                  sequence_e1_8b = simd_and(byte_e1_adv, byte_8b);
                  carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e1_8b, carryQ.get_carry_in(68), r1000_1fff_tmp46));
                  sequence_e1_8b_80 = simd_and(r1000_1fff_tmp46, byte_80);
                  r1000_1fff_tmp47 = simd_andc(tmp21, tmp14);
                  byte_8c = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp47);
                  sequence_e1_8c = simd_and(byte_e1_adv, byte_8c);
                  r1000_1fff_tmp48 = simd_and(basis_bits.bit_3, tmp15);
                  byte_range_80_90 = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp48);
                  carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e1_8c, carryQ.get_carry_in(69), r1000_1fff_tmp49));
                  sequence_e1_8c_byte_range_80_90 = simd_and(r1000_1fff_tmp49, byte_range_80_90);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_8c_byte_range_80_90);
                  byte_8d = r1000_1fff_tmp25;
                  sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
                  byte_range_80_9a = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp27);
                  carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(70), r1000_1fff_tmp50));
                  sequence_e1_8d_byte_range_80_9a = simd_and(r1000_1fff_tmp50, byte_range_80_9a);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_8d_byte_range_80_9a);
                  r1000_1fff_tmp51 = simd_and(tmp21, r1000_1fff_tmp9);
                  byte_8e = simd_and(r1000_1fff_tmp5, r1000_1fff_tmp51);
                  sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
                  byte_range_80_8f = r1000_1fff_tmp5;
                  carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(71), r1000_1fff_tmp52));
                  sequence_e1_8e_byte_range_80_8f = simd_and(r1000_1fff_tmp52, byte_range_80_8f);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_8e_byte_range_80_8f);
                  byte_8f = simd_and(byte_range_80_8f, tmp22);
                  sequence_e1_8f = simd_and(byte_e1_adv, byte_8f);
                  r1000_1fff_tmp53 = simd_and(basis_bits.bit_5, tmp14);
                  r1000_1fff_tmp54 = simd_or(basis_bits.bit_4, r1000_1fff_tmp53);
                  r1000_1fff_tmp55 = simd_and(basis_bits.bit_3, r1000_1fff_tmp54);
                  r1000_1fff_tmp56 = simd_and(basis_bits.bit_2, r1000_1fff_tmp55);
                  byte_range_80_b4 = simd_andc(byte_range_80_bf, r1000_1fff_tmp56);
                  carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e1_8f, carryQ.get_carry_in(72), r1000_1fff_tmp57));
                  sequence_e1_8f_byte_range_80_b4 = simd_and(r1000_1fff_tmp57, byte_range_80_b4);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_8f_byte_range_80_b4);
                  r1000_1fff_tmp58 = simd_and(byte_range_80_bf, tmp19);
                  byte_90 = simd_andc(r1000_1fff_tmp58, tmp15);
                  sequence_e1_90 = simd_and(byte_e1_adv, byte_90);
                  r1000_1fff_tmp59 = simd_or(basis_bits.bit_3, tmp15);
                  r1000_1fff_tmp60 = simd_or(basis_bits.bit_2, r1000_1fff_tmp59);
                  byte_range_81_bf = simd_and(byte_range_80_bf, r1000_1fff_tmp60);
                  carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e1_90, carryQ.get_carry_in(73), r1000_1fff_tmp61));
                  sequence_e1_90_byte_range_81_bf = simd_and(r1000_1fff_tmp61, byte_range_81_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_90_byte_range_81_bf);
                  byte_91 = simd_and(r1000_1fff_tmp58, r800_1fff_tmp2);
                  sequence_e1_91 = simd_and(byte_e1_adv, byte_91);
                  carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e1_91, carryQ.get_carry_in(74), r1000_1fff_tmp62));
                  sequence_e1_91_byte_range_80_bf = simd_and(r1000_1fff_tmp62, byte_range_80_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_91_byte_range_80_bf);
                  byte_99 = simd_and(r1000_1fff_tmp58, r1000_1fff_tmp40);
                  sequence_e1_99 = simd_and(byte_e1_adv, byte_99);
                  r1000_1fff_tmp63 = simd_and(tmp21, tmp14);
                  r1000_1fff_tmp64 = simd_or(basis_bits.bit_3, r1000_1fff_tmp63);
                  r1000_1fff_tmp65 = simd_and(basis_bits.bit_2, r1000_1fff_tmp64);
                  byte_range_80_ac = simd_andc(byte_range_80_bf, r1000_1fff_tmp65);
                  carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e1_99, carryQ.get_carry_in(75), r1000_1fff_tmp66));
                  sequence_e1_99_byte_range_80_ac = simd_and(r1000_1fff_tmp66, byte_range_80_ac);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_99_byte_range_80_ac);
                  byte_9a = simd_and(r1000_1fff_tmp58, r1000_1fff_tmp43);
                  sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
                  byte_range_81_9a = simd_and(r1000_1fff_tmp11, tmp16);
                  carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(76), r1000_1fff_tmp67));
                  sequence_e1_9a_byte_range_81_9a = simd_and(r1000_1fff_tmp67, byte_range_81_9a);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_9a_byte_range_81_9a);
                  byte_9b = simd_and(r1000_1fff_tmp58, r1000_1fff_tmp45);
                  sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
                  r1000_1fff_tmp68 = simd_or(basis_bits.bit_3, tmp11);
                  r1000_1fff_tmp69 = simd_and(basis_bits.bit_2, r1000_1fff_tmp68);
                  byte_range_80_aa = simd_andc(byte_range_80_bf, r1000_1fff_tmp69);
                  carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(77), r1000_1fff_tmp70));
                  sequence_e1_9b_byte_range_80_aa = simd_and(r1000_1fff_tmp70, byte_range_80_aa);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_9b_byte_range_80_aa);
                  byte_9c = simd_and(r1000_1fff_tmp58, r1000_1fff_tmp47);
                  sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
                  r1000_1fff_tmp71 = simd_and(basis_bits.bit_4, r1000_1fff_tmp53);
                  byte_range_80_8c = simd_andc(byte_range_80_8f, r1000_1fff_tmp71);
                  carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(78), r1000_1fff_tmp72));
                  sequence_e1_9c_byte_range_80_8c = simd_and(r1000_1fff_tmp72, byte_range_80_8c);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_9c_byte_range_80_8c);
                  byte_9d = simd_and(r1000_1fff_tmp58, r1000_1fff_tmp24);
                  sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
                  r1000_1fff_tmp73 = simd_and(basis_bits.bit_3, tmp13);
                  byte_range_80_93 = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp73);
                  carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(79), r1000_1fff_tmp74));
                  sequence_e1_9d_byte_range_80_93 = simd_and(r1000_1fff_tmp74, byte_range_80_93);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_9d_byte_range_80_93);
                  byte_9e = simd_and(r1000_1fff_tmp58, r1000_1fff_tmp51);
                  sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
                  carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(80), r1000_1fff_tmp75));
                  sequence_e1_9e_byte_range_80_bf = simd_and(r1000_1fff_tmp75, byte_range_80_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_9e_byte_range_80_bf);
                  byte_9f = simd_and(r1000_1fff_tmp58, tmp22);
                  sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
                  carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(81), r1000_1fff_tmp76));
                  sequence_e1_9f_byte_range_80_93 = simd_and(r1000_1fff_tmp76, byte_range_80_93);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_9f_byte_range_80_93);
                  r1000_1fff_tmp77 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  byte_a0 = simd_andc(r1000_1fff_tmp77, tmp15);
                  sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
                  r1000_1fff_tmp78 = simd_and(byte_range_80_8f, basis_bits.bit_4);
                  r1000_1fff_tmp79 = simd_not(basis_bits.bit_6);
                  r1000_1fff_tmp80 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp79), simd_andc(tmp9, basis_bits.bit_5));
                  byte_range_8b_8d = simd_and(r1000_1fff_tmp78, r1000_1fff_tmp80);
                  carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(82), r1000_1fff_tmp81));
                  sequence_e1_a0_byte_range_8b_8d = simd_and(r1000_1fff_tmp81, byte_range_8b_8d);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_a0_byte_range_8b_8d);
                  byte_a1 = simd_and(r1000_1fff_tmp77, r800_1fff_tmp2);
                  sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
                  carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(83), r1000_1fff_tmp82));
                  sequence_e1_a1_byte_range_80_b7 = simd_and(r1000_1fff_tmp82, byte_range_80_b7);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_a1_byte_range_80_b7);
                  byte_a2 = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp10);
                  sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
                  carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(84), r1000_1fff_tmp83));
                  sequence_e1_a2_byte_range_80_aa = simd_and(r1000_1fff_tmp83, byte_range_80_aa);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_a2_byte_range_80_aa);
                  byte_a3 = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp17);
                  sequence_e1_a3 = simd_and(byte_e1_adv, byte_a3);
                  r1000_1fff_tmp84 = simd_or(basis_bits.bit_4, r1000_1fff_tmp19);
                  r1000_1fff_tmp85 = simd_and(basis_bits.bit_3, r1000_1fff_tmp84);
                  r1000_1fff_tmp86 = simd_and(basis_bits.bit_2, r1000_1fff_tmp85);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r1000_1fff_tmp86);
                  carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e1_a3, carryQ.get_carry_in(85), r1000_1fff_tmp87));
                  sequence_e1_a3_byte_range_80_b5 = simd_and(r1000_1fff_tmp87, byte_range_80_b5);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_a3_byte_range_80_b5);
                  byte_a4 = simd_and(r1000_1fff_tmp77, r800_ffff_tmp2);
                  sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
                  r1000_1fff_tmp88 = simd_and(basis_bits.bit_3, tmp22);
                  byte_range_80_9e = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp88);
                  carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(86), r1000_1fff_tmp89));
                  sequence_e1_a4_byte_range_80_9e = simd_and(r1000_1fff_tmp89, byte_range_80_9e);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_a4_byte_range_80_9e);
                  r1000_1fff_tmp90 = simd_and(r800_ffff_tmp1, r800_1fff_tmp1);
                  byte_a5 = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp90);
                  sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
                  r1000_1fff_tmp91 = simd_or(basis_bits.bit_3, r1000_1fff_tmp12);
                  r1000_1fff_tmp92 = simd_not(r1000_1fff_tmp91);
                  r1000_1fff_tmp93 = simd_or(basis_bits.bit_3, r1000_1fff_tmp84);
                  r1000_1fff_tmp94 = simd_or(simd_and(basis_bits.bit_2, r1000_1fff_tmp92), simd_andc(r1000_1fff_tmp93, basis_bits.bit_2));
                  byte_range_86_ad = simd_and(byte_range_80_bf, r1000_1fff_tmp94);
                  carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(87), r1000_1fff_tmp95));
                  sequence_e1_a5_byte_range_86_ad = simd_and(r1000_1fff_tmp95, byte_range_86_ad);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_a5_byte_range_86_ad);
                  r1000_1fff_tmp96 = simd_and(r800_ffff_tmp1, r1000_1fff_tmp9);
                  byte_a6 = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp96);
                  sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
                  r1000_1fff_tmp97 = simd_or(basis_bits.bit_3, tmp21);
                  r1000_1fff_tmp98 = simd_and(basis_bits.bit_2, r1000_1fff_tmp97);
                  byte_range_80_ab = simd_andc(byte_range_80_bf, r1000_1fff_tmp98);
                  carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(88), r1000_1fff_tmp99));
                  sequence_e1_a6_byte_range_80_ab = simd_and(r1000_1fff_tmp99, byte_range_80_ab);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_a6_byte_range_80_ab);
                  byte_a7 = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp21);
                  sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
                  byte_range_80_89 = simd_andc(byte_range_80_8f, tmp5);
                  carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(89), r1000_1fff_tmp100));
                  sequence_e1_a7_byte_range_80_89 = simd_and(r1000_1fff_tmp100, byte_range_80_89);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_a7_byte_range_80_89);
                  r1000_1fff_tmp101 = simd_andc(r1000_1fff_tmp39, tmp14);
                  byte_a8 = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp101);
                  sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
                  r1000_1fff_tmp102 = simd_and(basis_bits.bit_3, tmp21);
                  byte_range_80_9b = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp102);
                  carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(90), r1000_1fff_tmp103));
                  sequence_e1_a8_byte_range_80_9b = simd_and(r1000_1fff_tmp103, byte_range_80_9b);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_a8_byte_range_80_9b);
                  byte_a9 = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp40);
                  sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
                  carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(91), r1000_1fff_tmp104));
                  sequence_e1_a9_byte_range_80_9e = simd_and(r1000_1fff_tmp104, byte_range_80_9e);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_a9_byte_range_80_9e);
                  byte_aa = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp43);
                  sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
                  carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(92), r1000_1fff_tmp105));
                  sequence_e1_aa_byte_range_80_89 = simd_and(r1000_1fff_tmp105, byte_range_80_89);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_aa_byte_range_80_89);
                  byte_ac = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp47);
                  sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
                  carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(93), r1000_1fff_tmp106));
                  sequence_e1_ac_byte_range_80_bf = simd_and(r1000_1fff_tmp106, byte_range_80_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_ac_byte_range_80_bf);
                  byte_ad = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp24);
                  sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
                  byte_range_80_8b = simd_andc(byte_range_80_8f, tmp21);
                  carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(94), r1000_1fff_tmp107));
                  sequence_e1_ad_byte_range_80_8b = simd_and(r1000_1fff_tmp107, byte_range_80_8b);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_ad_byte_range_80_8b);
                  byte_ae = simd_and(r1000_1fff_tmp77, r1000_1fff_tmp51);
                  sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
                  carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(95), r1000_1fff_tmp108));
                  sequence_e1_ae_byte_range_80_bf = simd_and(r1000_1fff_tmp108, byte_range_80_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_ae_byte_range_80_bf);
                  byte_af = simd_and(r1000_1fff_tmp77, tmp22);
                  sequence_e1_af = simd_and(byte_e1_adv, byte_af);
                  r1000_1fff_tmp109 = simd_and(basis_bits.bit_2, r1000_1fff_tmp73);
                  byte_range_80_b3 = simd_andc(byte_range_80_bf, r1000_1fff_tmp109);
                  carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(96), r1000_1fff_tmp110));
                  sequence_e1_af_byte_range_80_b3 = simd_and(r1000_1fff_tmp110, byte_range_80_b3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_af_byte_range_80_b3);
                  byte_b0 = simd_andc(r1000_1fff_tmp32, tmp15);
                  sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
                  carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(97), r1000_1fff_tmp111));
                  sequence_e1_b0_byte_range_80_b7 = simd_and(r1000_1fff_tmp111, byte_range_80_b7);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_b0_byte_range_80_b7);
                  byte_b1 = simd_and(r1000_1fff_tmp32, r800_1fff_tmp2);
                  sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
                  carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(98), r1000_1fff_tmp112));
                  sequence_e1_b1_byte_range_80_89 = simd_and(r1000_1fff_tmp112, byte_range_80_89);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_b1_byte_range_80_89);
                  byte_b3 = simd_and(r1000_1fff_tmp32, r1000_1fff_tmp17);
                  sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
                  r1000_1fff_tmp113 = simd_andc(r1000_1fff_tmp58, tmp13);
                  byte_range_90_92 = simd_andc(r1000_1fff_tmp113, tmp9);
                  carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(99), r1000_1fff_tmp114));
                  sequence_e1_b3_byte_range_90_92 = simd_and(r1000_1fff_tmp114, byte_range_90_92);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_b3_byte_range_90_92);
                  byte_b4 = simd_and(r1000_1fff_tmp32, r800_ffff_tmp2);
                  sequence_e1_b4 = simd_and(byte_e1_adv, byte_b4);
                  carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_e1_b4, carryQ.get_carry_in(100), r1000_1fff_tmp115));
                  sequence_e1_b4_byte_range_80_bf = simd_and(r1000_1fff_tmp115, byte_range_80_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_b4_byte_range_80_bf);
                  byte_b7 = simd_and(r1000_1fff_tmp32, r1000_1fff_tmp21);
                  sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
                  carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_e1_b7, carryQ.get_carry_in(101), r1000_1fff_tmp116));
                  sequence_e1_b7_byte_range_80_b5 = simd_and(r1000_1fff_tmp116, byte_range_80_b5);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_b7_byte_range_80_b5);
                  byte_b8 = simd_and(r1000_1fff_tmp32, r1000_1fff_tmp101);
                  sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
                  carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(102), r1000_1fff_tmp117));
                  sequence_e1_b8_byte_range_80_bf = simd_and(r1000_1fff_tmp117, byte_range_80_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_b8_byte_range_80_bf);
                  byte_bc = simd_and(r1000_1fff_tmp32, r1000_1fff_tmp47);
                  sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
                  byte_range_80_95 = simd_andc(r1000_1fff_tmp11, r1000_1fff_tmp85);
                  carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(103), r1000_1fff_tmp118));
                  sequence_e1_bc_byte_range_80_95 = simd_and(r1000_1fff_tmp118, byte_range_80_95);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_bc_byte_range_80_95);
                  byte_bd = simd_and(r1000_1fff_tmp32, r1000_1fff_tmp24);
                  sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
                  r1000_1fff_tmp119 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
                  byte_range_80_85 = simd_andc(r1000_1fff_tmp119, r1000_1fff_tmp19);
                  carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(104), r1000_1fff_tmp120));
                  sequence_e1_bd_byte_range_80_85 = simd_and(r1000_1fff_tmp120, byte_range_80_85);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_bd_byte_range_80_85);
                  byte_be = simd_and(r1000_1fff_tmp32, r1000_1fff_tmp51);
                  sequence_e1_be = simd_and(byte_e1_adv, byte_be);
                  carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(105), r1000_1fff_tmp121));
                  sequence_e1_be_byte_range_80_b4 = simd_and(r1000_1fff_tmp121, byte_range_80_b4);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_be_byte_range_80_b4);
                  byte_bf = simd_and(r1000_1fff_tmp32, tmp22);
                  sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
                  r1000_1fff_tmp122 = simd_not(tmp14);
                  r1000_1fff_tmp123 = simd_or(simd_and(basis_bits.bit_5, r1000_1fff_tmp122), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
                  byte_range_82_84 = simd_and(r1000_1fff_tmp119, r1000_1fff_tmp123);
                  carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(106), r1000_1fff_tmp124));
                  sequence_e1_bf_byte_range_82_84 = simd_and(r1000_1fff_tmp124, byte_range_82_84);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e1_bf_byte_range_82_84);
                }
                else {
                  carryQ.CarryDequeueEnqueue(60, 47);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(27, 80);
              }
              r800_4dff_tmp2 = simd_andc(basis_bits.bit_6, tmp13);
              byte_range_e2_e3 = simd_and(byte_range_e0_ef, r800_4dff_tmp2);
              r800_4dff_tmp3 = simd_or(byte_range_e2_e3, r800_ffff_tmp7);
              if ((bitblock::any(r800_4dff_tmp3) || carryQ.CarryTest(107, 28))) {
                r2000_4dff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
                r2000_4dff_tmp2 = simd_andc(r2000_4dff_tmp1, tmp13);
                byte_e2 = simd_and(byte_range_e0_ef, r2000_4dff_tmp2);
                if ((bitblock::any(byte_e2) || carryQ.CarryTest(107, 16))) {
                  r2000_2fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r2000_2fff_tmp2 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp1);
                  byte_80 = simd_andc(r2000_2fff_tmp2, tmp15);
                  carryQ.cq[107] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(107), r2000_2fff_tmp3));
                  sequence_e2_80 = simd_and(r2000_2fff_tmp3, byte_80);
                  byte_e2_adv = r2000_2fff_tmp3;
                  r2000_2fff_tmp4 = simd_and(r800_ffff_tmp3, tmp2);
                  byte_bf = simd_and(r2000_2fff_tmp4, tmp22);
                  carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(108), sequence_e2_80_adv));
                  r2000_2fff_tmp5 = simd_and(sequence_e2_80_adv, byte_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r2000_2fff_tmp5);
                  r2000_2fff_tmp6 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r2000_2fff_tmp7 = simd_andc(r2000_2fff_tmp6, tmp13);
                  byte_81 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp7);
                  sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
                  r2000_2fff_tmp8 = simd_and(r800_ffff_tmp3, tmp19);
                  r2000_2fff_tmp9 = simd_and(r2000_2fff_tmp8, r800_ffff_tmp2);
                  r2000_2fff_tmp10 = simd_or(byte_80, r2000_2fff_tmp9);
                  r2000_2fff_tmp11 = simd_and(r2000_2fff_tmp4, r2000_2fff_tmp7);
                  r2000_2fff_tmp12 = simd_or(r2000_2fff_tmp10, r2000_2fff_tmp11);
                  cc_range_2040_207f_3 = simd_or(r2000_2fff_tmp12, byte_bf);
                  carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(109), sequence_e2_81_adv));
                  r2000_2fff_tmp13 = simd_and(sequence_e2_81_adv, cc_range_2040_207f_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r2000_2fff_tmp13);
                  byte_82 = simd_and(r2000_2fff_tmp2, r2000_4dff_tmp2);
                  sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
                  r2000_2fff_tmp14 = simd_and(basis_bits.bit_5, tmp14);
                  r2000_2fff_tmp15 = simd_and(basis_bits.bit_4, r2000_2fff_tmp14);
                  byte_range_90_9c = simd_andc(r2000_2fff_tmp8, r2000_2fff_tmp15);
                  carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(110), sequence_e2_82_adv));
                  r2000_2fff_tmp16 = simd_and(sequence_e2_82_adv, byte_range_90_9c);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r2000_2fff_tmp16);
                  r2000_2fff_tmp17 = simd_andc(tmp9, tmp13);
                  byte_83 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp17);
                  sequence_e2_83 = simd_and(byte_e2_adv, byte_83);
                  r2000_2fff_tmp18 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r2000_2fff_tmp19 = simd_and(r2000_2fff_tmp18, r2000_2fff_tmp7);
                  r2000_2fff_tmp20 = simd_or(byte_range_90_9c, r2000_2fff_tmp19);
                  r2000_2fff_tmp21 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp22 = simd_not(tmp15);
                  r2000_2fff_tmp23 = simd_or(basis_bits.bit_4, r2000_2fff_tmp14);
                  r2000_2fff_tmp24 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp22), simd_andc(r2000_2fff_tmp23, basis_bits.bit_3));
                  r2000_2fff_tmp25 = simd_and(r2000_2fff_tmp21, r2000_2fff_tmp24);
                  cc_range_20d0_20e5_3 = simd_or(r2000_2fff_tmp20, r2000_2fff_tmp25);
                  carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(111), sequence_e2_83_adv));
                  r2000_2fff_tmp26 = simd_and(sequence_e2_83_adv, cc_range_20d0_20e5_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r2000_2fff_tmp26);
                  byte_84 = simd_and(r2000_2fff_tmp2, r800_ffff_tmp2);
                  sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
                  r2000_2fff_tmp27 = simd_and(r800_ffff_tmp1, tmp9);
                  r2000_2fff_tmp28 = simd_or(r2000_4dff_tmp2, r2000_2fff_tmp27);
                  r2000_2fff_tmp29 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp28);
                  r2000_2fff_tmp30 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r2000_2fff_tmp31 = simd_not(tmp13);
                  r2000_2fff_tmp32 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp31), simd_andc(tmp5, basis_bits.bit_3));
                  r2000_2fff_tmp33 = simd_and(r2000_2fff_tmp30, r2000_2fff_tmp32);
                  r2000_2fff_tmp34 = simd_or(r2000_2fff_tmp29, r2000_2fff_tmp33);
                  r2000_2fff_tmp35 = simd_and(r800_ffff_tmp1, r2000_2fff_tmp6);
                  r2000_2fff_tmp36 = simd_and(r2000_2fff_tmp8, r2000_2fff_tmp35);
                  r2000_2fff_tmp37 = simd_or(r2000_2fff_tmp34, r2000_2fff_tmp36);
                  r2000_2fff_tmp38 = simd_and(r2000_2fff_tmp8, basis_bits.bit_4);
                  r2000_2fff_tmp39 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r2000_2fff_tmp40 = simd_andc(r2000_2fff_tmp38, r2000_2fff_tmp39);
                  r2000_2fff_tmp41 = simd_or(r2000_2fff_tmp37, r2000_2fff_tmp40);
                  r2000_2fff_tmp42 = simd_and(r2000_2fff_tmp18, r800_ffff_tmp2);
                  r2000_2fff_tmp43 = simd_or(r2000_2fff_tmp41, r2000_2fff_tmp42);
                  r2000_2fff_tmp44 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  r2000_2fff_tmp45 = simd_and(r2000_2fff_tmp18, r2000_2fff_tmp44);
                  r2000_2fff_tmp46 = simd_or(r2000_2fff_tmp43, r2000_2fff_tmp45);
                  r2000_2fff_tmp47 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r2000_2fff_tmp48 = simd_andc(r2000_2fff_tmp47, tmp14);
                  r2000_2fff_tmp49 = simd_and(r2000_2fff_tmp18, r2000_2fff_tmp48);
                  r2000_2fff_tmp50 = simd_or(r2000_2fff_tmp46, r2000_2fff_tmp49);
                  r2000_2fff_tmp51 = simd_xor(basis_bits.bit_3, tmp5);
                  r2000_2fff_tmp52 = simd_and(r2000_2fff_tmp21, r2000_2fff_tmp51);
                  r2000_2fff_tmp53 = simd_or(r2000_2fff_tmp50, r2000_2fff_tmp52);
                  r2000_2fff_tmp54 = simd_and(r2000_2fff_tmp4, tmp21);
                  cc_range_2102_213c_3 = simd_or(r2000_2fff_tmp53, r2000_2fff_tmp54);
                  carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(112), sequence_e2_84_adv));
                  r2000_2fff_tmp55 = simd_and(sequence_e2_84_adv, cc_range_2102_213c_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r2000_2fff_tmp55);
                  byte_85 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp35);
                  sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
                  r2000_2fff_tmp56 = simd_not(tmp4);
                  r2000_2fff_tmp57 = simd_or(simd_and(basis_bits.bit_4, r2000_2fff_tmp56), simd_andc(r2000_2fff_tmp14, basis_bits.bit_4));
                  r2000_2fff_tmp58 = simd_and(tmp21, r2000_4dff_tmp1);
                  r2000_2fff_tmp59 = simd_or(r2000_2fff_tmp57, r2000_2fff_tmp58);
                  r2000_2fff_tmp60 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp59);
                  cc_range_2145_2160_3 = simd_or(r2000_2fff_tmp60, r2000_2fff_tmp21);
                  carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(113), sequence_e2_85_adv));
                  r2000_2fff_tmp61 = simd_and(sequence_e2_85_adv, cc_range_2145_2160_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r2000_2fff_tmp61);
                  byte_86 = simd_and(r2000_2fff_tmp2, r2000_2fff_tmp44);
                  sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
                  r2000_2fff_tmp62 = simd_or(basis_bits.bit_5, tmp14);
                  r2000_2fff_tmp63 = simd_and(basis_bits.bit_4, r2000_2fff_tmp62);
                  byte_range_80_88 = simd_andc(r2000_2fff_tmp2, r2000_2fff_tmp63);
                  carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(114), sequence_e2_86_adv));
                  r2000_2fff_tmp64 = simd_and(sequence_e2_86_adv, byte_range_80_88);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r2000_2fff_tmp64);
                  byte_b0 = simd_andc(r2000_2fff_tmp4, tmp15);
                  sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
                  r2000_2fff_tmp65 = simd_or(basis_bits.bit_3, tmp22);
                  r2000_2fff_tmp66 = simd_and(basis_bits.bit_2, r2000_2fff_tmp65);
                  r2000_2fff_tmp67 = simd_andc(r2000_2fff_tmp66, tmp2);
                  cc_range_2c00_2c30_3 = simd_andc(r800_ffff_tmp3, r2000_2fff_tmp67);
                  carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(115), sequence_e2_b0_adv));
                  r2000_2fff_tmp68 = simd_and(sequence_e2_b0_adv, cc_range_2c00_2c30_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r2000_2fff_tmp68);
                  byte_b1 = r2000_2fff_tmp11;
                  sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
                  r2000_2fff_tmp69 = simd_and(basis_bits.bit_3, tmp22);
                  r2000_2fff_tmp70 = simd_andc(r2000_2fff_tmp30, r2000_2fff_tmp69);
                  cc_range_2c40_2c60_3 = simd_or(r2000_2fff_tmp70, r2000_2fff_tmp21);
                  carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(116), sequence_e2_b1_adv));
                  r2000_2fff_tmp71 = simd_and(sequence_e2_b1_adv, cc_range_2c40_2c60_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r2000_2fff_tmp71);
                  byte_b2 = simd_and(r2000_2fff_tmp4, r2000_4dff_tmp2);
                  sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(117), sequence_e2_b2_adv));
                  r2000_2fff_tmp72 = simd_and(sequence_e2_b2_adv, byte_range_80_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r2000_2fff_tmp72);
                  r2000_2fff_tmp73 = simd_and(byte_range_80_bf, tmp2);
                  byte_b3 = simd_and(r2000_2fff_tmp73, r2000_2fff_tmp17);
                  sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
                  r2000_2fff_tmp74 = simd_or(basis_bits.bit_3, r2000_2fff_tmp23);
                  r2000_2fff_tmp75 = simd_and(basis_bits.bit_2, r2000_2fff_tmp74);
                  r2000_2fff_tmp76 = simd_andc(byte_range_80_bf, r2000_2fff_tmp75);
                  r2000_2fff_tmp77 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  r2000_2fff_tmp78 = simd_or(simd_and(basis_bits.bit_3, r2000_2fff_tmp31), simd_andc(tmp11, basis_bits.bit_3));
                  r2000_2fff_tmp79 = simd_and(r2000_2fff_tmp77, r2000_2fff_tmp78);
                  cc_range_2cc0_2ceb_3 = simd_or(r2000_2fff_tmp76, r2000_2fff_tmp79);
                  carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(118), sequence_e2_b3_adv));
                  r2000_2fff_tmp80 = simd_and(sequence_e2_b3_adv, cc_range_2cc0_2ceb_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r2000_2fff_tmp80);
                  byte_b4 = simd_and(r2000_2fff_tmp73, r800_ffff_tmp2);
                  sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
                  r2000_2fff_tmp81 = simd_or(basis_bits.bit_4, r2000_2fff_tmp39);
                  r2000_2fff_tmp82 = simd_or(basis_bits.bit_3, r2000_2fff_tmp81);
                  r2000_2fff_tmp83 = simd_and(basis_bits.bit_2, r2000_2fff_tmp82);
                  r2000_2fff_tmp84 = simd_andc(byte_range_80_bf, r2000_2fff_tmp83);
                  r2000_2fff_tmp85 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
                  r2000_2fff_tmp86 = simd_and(r2000_2fff_tmp85, r2000_2fff_tmp27);
                  r2000_2fff_tmp87 = simd_or(r2000_2fff_tmp84, r2000_2fff_tmp86);
                  r2000_2fff_tmp88 = simd_and(tmp21, r2000_2fff_tmp6);
                  r2000_2fff_tmp89 = simd_and(r2000_2fff_tmp85, r2000_2fff_tmp88);
                  r2000_2fff_tmp90 = simd_or(r2000_2fff_tmp87, r2000_2fff_tmp89);
                  cc_range_2d00_2d30_3 = simd_or(r2000_2fff_tmp90, r2000_2fff_tmp73);
                  carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(119), sequence_e2_b4_adv));
                  r2000_2fff_tmp91 = simd_and(sequence_e2_b4_adv, cc_range_2d00_2d30_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r2000_2fff_tmp91);
                  byte_b5 = simd_and(r2000_2fff_tmp73, r2000_2fff_tmp35);
                  sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
                  r2000_2fff_tmp92 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
                  r2000_2fff_tmp93 = simd_and(basis_bits.bit_2, r2000_2fff_tmp92);
                  r2000_2fff_tmp94 = simd_andc(byte_range_80_bf, r2000_2fff_tmp93);
                  r2000_2fff_tmp95 = simd_and(r2000_2fff_tmp85, tmp22);
                  r2000_2fff_tmp96 = simd_or(r2000_2fff_tmp94, r2000_2fff_tmp95);
                  r2000_2fff_tmp97 = simd_and(r2000_2fff_tmp73, tmp22);
                  cc_range_2d40_2d7f_3 = simd_or(r2000_2fff_tmp96, r2000_2fff_tmp97);
                  carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(120), sequence_e2_b5_adv));
                  r2000_2fff_tmp98 = simd_and(sequence_e2_b5_adv, cc_range_2d40_2d7f_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r2000_2fff_tmp98);
                  byte_b6 = simd_and(r2000_2fff_tmp73, r2000_2fff_tmp44);
                  sequence_e2_b6 = simd_and(byte_e2_adv, byte_b6);
                  r2000_2fff_tmp99 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
                  r2000_2fff_tmp100 = simd_and(basis_bits.bit_5, tmp9);
                  r2000_2fff_tmp101 = simd_or(basis_bits.bit_4, r2000_2fff_tmp100);
                  r2000_2fff_tmp102 = simd_and(basis_bits.bit_3, r2000_2fff_tmp101);
                  r2000_2fff_tmp103 = simd_andc(r2000_2fff_tmp99, r2000_2fff_tmp102);
                  r2000_2fff_tmp104 = simd_andc(r2000_2fff_tmp85, basis_bits.bit_4);
                  r2000_2fff_tmp105 = simd_andc(r2000_2fff_tmp104, r2000_2fff_tmp100);
                  r2000_2fff_tmp106 = simd_or(r2000_2fff_tmp103, r2000_2fff_tmp105);
                  r2000_2fff_tmp107 = simd_and(r2000_2fff_tmp85, basis_bits.bit_4);
                  r2000_2fff_tmp108 = simd_andc(r2000_2fff_tmp107, r2000_2fff_tmp100);
                  r2000_2fff_tmp109 = simd_or(r2000_2fff_tmp106, r2000_2fff_tmp108);
                  r2000_2fff_tmp110 = simd_andc(r2000_2fff_tmp73, basis_bits.bit_4);
                  r2000_2fff_tmp111 = simd_andc(r2000_2fff_tmp110, r2000_2fff_tmp100);
                  r2000_2fff_tmp112 = simd_or(r2000_2fff_tmp109, r2000_2fff_tmp111);
                  r2000_2fff_tmp113 = simd_and(r2000_2fff_tmp73, basis_bits.bit_4);
                  r2000_2fff_tmp114 = simd_andc(r2000_2fff_tmp113, r2000_2fff_tmp100);
                  cc_range_2d80_2db8_3 = simd_or(r2000_2fff_tmp112, r2000_2fff_tmp114);
                  carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_e2_b6, carryQ.get_carry_in(121), sequence_e2_b6_adv));
                  r2000_2fff_tmp115 = simd_and(sequence_e2_b6_adv, cc_range_2d80_2db8_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r2000_2fff_tmp115);
                  byte_b7 = simd_and(r2000_2fff_tmp73, r2000_2fff_tmp27);
                  sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
                  r2000_2fff_tmp116 = simd_andc(byte_range_80_bf, r2000_2fff_tmp1);
                  r2000_2fff_tmp117 = simd_and(byte_range_80_bf, tmp19);
                  r2000_2fff_tmp118 = simd_andc(r2000_2fff_tmp117, basis_bits.bit_4);
                  r2000_2fff_tmp119 = simd_or(r2000_2fff_tmp116, r2000_2fff_tmp118);
                  r2000_2fff_tmp120 = simd_and(r2000_2fff_tmp117, basis_bits.bit_4);
                  r2000_2fff_tmp121 = simd_or(r2000_2fff_tmp119, r2000_2fff_tmp120);
                  r2000_2fff_tmp122 = simd_andc(r2000_2fff_tmp121, r2000_2fff_tmp100);
                  cc_range_2dc0_2de0_3 = simd_or(r2000_2fff_tmp122, r2000_2fff_tmp77);
                  carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(122), sequence_e2_b7_adv));
                  r2000_2fff_tmp123 = simd_and(sequence_e2_b7_adv, cc_range_2dc0_2de0_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r2000_2fff_tmp123);
                }
                else {
                  carryQ.CarryDequeueEnqueue(107, 16);
                }
                r2000_4dff_tmp3 = simd_andc(tmp9, tmp13);
                byte_e3 = simd_and(byte_range_e0_ef, r2000_4dff_tmp3);
                r2000_4dff_tmp4 = simd_or(byte_e3, r800_ffff_tmp7);
                if ((bitblock::any(r2000_4dff_tmp4) || carryQ.CarryTest(123, 12))) {
                  r3000_4dff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r3000_4dff_tmp2 = simd_andc(r800_ffff_tmp3, r3000_4dff_tmp1);
                  byte_80 = simd_andc(r3000_4dff_tmp2, tmp15);
                  carryQ.cq[123] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(123), r3000_4dff_tmp3));
                  sequence_e3_80 = simd_and(r3000_4dff_tmp3, byte_80);
                  byte_e3_adv = r3000_4dff_tmp3;
                  r3000_4dff_tmp4 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp1);
                  r3000_4dff_tmp5 = simd_and(r3000_4dff_tmp4, tmp14);
                  r3000_4dff_tmp6 = simd_and(r800_ffff_tmp3, r80_10ffff_tmp1);
                  r3000_4dff_tmp7 = simd_or(basis_bits.bit_5, tmp14);
                  r3000_4dff_tmp8 = simd_or(basis_bits.bit_4, r3000_4dff_tmp7);
                  r3000_4dff_tmp9 = simd_and(r3000_4dff_tmp6, r3000_4dff_tmp8);
                  r3000_4dff_tmp10 = simd_or(r3000_4dff_tmp5, r3000_4dff_tmp9);
                  r3000_4dff_tmp11 = simd_and(r800_ffff_tmp3, tmp2);
                  r3000_4dff_tmp12 = simd_andc(r3000_4dff_tmp11, basis_bits.bit_4);
                  r3000_4dff_tmp13 = simd_not(basis_bits.bit_6);
                  r3000_4dff_tmp14 = simd_or(simd_and(basis_bits.bit_5, r3000_4dff_tmp13), simd_andc(tmp14, basis_bits.bit_5));
                  r3000_4dff_tmp15 = simd_and(r3000_4dff_tmp12, r3000_4dff_tmp14);
                  r3000_4dff_tmp16 = simd_or(r3000_4dff_tmp10, r3000_4dff_tmp15);
                  r3000_4dff_tmp17 = simd_and(r3000_4dff_tmp11, basis_bits.bit_4);
                  r3000_4dff_tmp18 = simd_and(basis_bits.bit_5, tmp14);
                  r3000_4dff_tmp19 = simd_andc(r3000_4dff_tmp17, r3000_4dff_tmp18);
                  cc_range_3005_3038_3 = simd_or(r3000_4dff_tmp16, r3000_4dff_tmp19);
                  carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(124), sequence_e3_80_adv));
                  r3000_4dff_tmp20 = simd_and(sequence_e3_80_adv, cc_range_3005_3038_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r3000_4dff_tmp20);
                  r3000_4dff_tmp21 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                  r3000_4dff_tmp22 = simd_andc(r3000_4dff_tmp21, tmp13);
                  byte_81 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp22);
                  sequence_e3_81 = simd_and(byte_e3_adv, byte_81);
                  r3000_4dff_tmp23 = simd_or(basis_bits.bit_3, tmp15);
                  r3000_4dff_tmp24 = simd_or(basis_bits.bit_2, r3000_4dff_tmp23);
                  byte_range_81_bf = simd_and(r800_ffff_tmp3, r3000_4dff_tmp24);
                  carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_e3_81, carryQ.get_carry_in(125), sequence_e3_81_adv));
                  r3000_4dff_tmp25 = simd_and(sequence_e3_81_adv, byte_range_81_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r3000_4dff_tmp25);
                  byte_82 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp2);
                  sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
                  r3000_4dff_tmp26 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
                  r3000_4dff_tmp27 = simd_and(basis_bits.bit_5, tmp9);
                  r3000_4dff_tmp28 = simd_or(basis_bits.bit_4, r3000_4dff_tmp27);
                  r3000_4dff_tmp29 = simd_and(basis_bits.bit_3, r3000_4dff_tmp28);
                  r3000_4dff_tmp30 = simd_andc(r3000_4dff_tmp26, r3000_4dff_tmp29);
                  r3000_4dff_tmp31 = simd_and(r800_ffff_tmp3, tmp19);
                  r3000_4dff_tmp32 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                  r3000_4dff_tmp33 = simd_and(r3000_4dff_tmp31, r3000_4dff_tmp32);
                  r3000_4dff_tmp34 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
                  r3000_4dff_tmp35 = simd_and(r3000_4dff_tmp33, r3000_4dff_tmp34);
                  r3000_4dff_tmp36 = simd_or(r3000_4dff_tmp30, r3000_4dff_tmp35);
                  r3000_4dff_tmp37 = simd_and(r3000_4dff_tmp31, tmp21);
                  r3000_4dff_tmp38 = simd_and(r3000_4dff_tmp37, tmp14);
                  r3000_4dff_tmp39 = simd_or(r3000_4dff_tmp36, r3000_4dff_tmp38);
                  r3000_4dff_tmp40 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
                  r3000_4dff_tmp41 = simd_and(r3000_4dff_tmp40, r3000_4dff_tmp23);
                  cc_range_3080_30a1_3 = simd_or(r3000_4dff_tmp39, r3000_4dff_tmp41);
                  carryQ.cq[126] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(126), sequence_e3_82_adv));
                  r3000_4dff_tmp42 = simd_and(sequence_e3_82_adv, cc_range_3080_30a1_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r3000_4dff_tmp42);
                  byte_83 = simd_and(r3000_4dff_tmp2, r2000_4dff_tmp3);
                  sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
                  r3000_4dff_tmp43 = simd_and(basis_bits.bit_3, tmp11);
                  r3000_4dff_tmp44 = simd_and(basis_bits.bit_2, r3000_4dff_tmp43);
                  r3000_4dff_tmp45 = simd_andc(r800_ffff_tmp3, r3000_4dff_tmp44);
                  r3000_4dff_tmp46 = simd_and(r3000_4dff_tmp11, tmp21);
                  cc_range_30c0_30fc_3 = simd_or(r3000_4dff_tmp45, r3000_4dff_tmp46);
                  carryQ.cq[127] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(127), sequence_e3_83_adv));
                  r3000_4dff_tmp47 = simd_and(sequence_e3_83_adv, cc_range_30c0_30fc_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r3000_4dff_tmp47);
                  byte_84 = simd_and(r3000_4dff_tmp2, r800_ffff_tmp2);
                  sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
                  r3000_4dff_tmp48 = simd_and(tmp21, basis_bits.bit_6);
                  r3000_4dff_tmp49 = simd_or(basis_bits.bit_3, r3000_4dff_tmp48);
                  r3000_4dff_tmp50 = simd_not(r3000_4dff_tmp49);
                  r3000_4dff_tmp51 = simd_or(basis_bits.bit_4, r3000_4dff_tmp18);
                  r3000_4dff_tmp52 = simd_or(basis_bits.bit_3, r3000_4dff_tmp51);
                  r3000_4dff_tmp53 = simd_or(simd_and(basis_bits.bit_2, r3000_4dff_tmp50), simd_andc(r3000_4dff_tmp52, basis_bits.bit_2));
                  r3000_4dff_tmp54 = simd_and(r800_ffff_tmp3, r3000_4dff_tmp53);
                  r3000_4dff_tmp55 = simd_and(r3000_4dff_tmp11, r3000_4dff_tmp8);
                  cc_range_3105_3131_3 = simd_or(r3000_4dff_tmp54, r3000_4dff_tmp55);
                  carryQ.cq[128] = carryout2carry(pablo_blk_Advance(sequence_e3_84, carryQ.get_carry_in(128), sequence_e3_84_adv));
                  r3000_4dff_tmp56 = simd_and(sequence_e3_84_adv, cc_range_3105_3131_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r3000_4dff_tmp56);
                  r3000_4dff_tmp57 = simd_and(r800_ffff_tmp1, r3000_4dff_tmp21);
                  byte_85 = simd_and(r3000_4dff_tmp2, r3000_4dff_tmp57);
                  sequence_e3_85 = simd_and(byte_e3_adv, byte_85);
                  byte_range_80_bf = r800_ffff_tmp3;
                  carryQ.cq[129] = carryout2carry(pablo_blk_Advance(sequence_e3_85, carryQ.get_carry_in(129), sequence_e3_85_adv));
                  r3000_4dff_tmp58 = simd_and(sequence_e3_85_adv, byte_range_80_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r3000_4dff_tmp58);
                  r3000_4dff_tmp59 = simd_andc(byte_range_80_bf, r3000_4dff_tmp1);
                  r3000_4dff_tmp60 = simd_and(r800_ffff_tmp1, r2000_4dff_tmp1);
                  byte_86 = simd_and(r3000_4dff_tmp59, r3000_4dff_tmp60);
                  sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
                  r3000_4dff_tmp61 = simd_and(basis_bits.bit_4, r3000_4dff_tmp27);
                  r3000_4dff_tmp62 = simd_andc(r3000_4dff_tmp59, r3000_4dff_tmp61);
                  r3000_4dff_tmp63 = simd_and(byte_range_80_bf, basis_bits.bit_2);
                  r3000_4dff_tmp64 = simd_andc(r3000_4dff_tmp63, r3000_4dff_tmp43);
                  cc_range_3180_31a0_3 = simd_or(r3000_4dff_tmp62, r3000_4dff_tmp64);
                  carryQ.cq[130] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(130), sequence_e3_86_adv));
                  r3000_4dff_tmp65 = simd_and(sequence_e3_86_adv, cc_range_3180_31a0_3);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r3000_4dff_tmp65);
                  r3000_4dff_tmp66 = simd_and(r800_ffff_tmp1, tmp9);
                  byte_87 = simd_and(r3000_4dff_tmp59, r3000_4dff_tmp66);
                  sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
                  byte_range_b0_bf = simd_and(byte_range_80_bf, tmp2);
                  carryQ.cq[131] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(131), sequence_e3_87_adv));
                  r3000_4dff_tmp67 = simd_and(sequence_e3_87_adv, byte_range_b0_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r3000_4dff_tmp67);
                  byte_range_90_bf = simd_and(byte_range_80_bf, r3000_4dff_tmp1);
                  byte_e3_byte_range_90_bf = simd_and(byte_e3_adv, byte_range_90_bf);
                  carryQ.cq[132] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_90_bf, carryQ.get_carry_in(132), r3000_4dff_tmp68));
                  byte_e3_byte_range_90_bf_sfx = simd_and(r3000_4dff_tmp68, byte_range_80_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, byte_e3_byte_range_90_bf_sfx);
                  r3000_4dff_tmp69 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
                  r3000_4dff_tmp70 = simd_or(basis_bits.bit_4, r3000_4dff_tmp69);
                  r3000_4dff_tmp71 = simd_and(basis_bits.bit_3, r3000_4dff_tmp70);
                  r3000_4dff_tmp72 = simd_and(basis_bits.bit_2, r3000_4dff_tmp71);
                  byte_range_80_b5 = simd_andc(byte_range_80_bf, r3000_4dff_tmp72);
                  byte_e4_byte_range_80_b5 = simd_and(r800_ffff_tmp6, byte_range_80_b5);
                  carryQ.cq[133] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_80_b5, carryQ.get_carry_in(133), r3000_4dff_tmp73));
                  byte_e4_byte_range_80_b5_sfx = simd_and(r3000_4dff_tmp73, byte_range_80_bf);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, byte_e4_byte_range_80_b5_sfx);
                  byte_b6 = simd_and(byte_range_b0_bf, r3000_4dff_tmp60);
                  byte_e4_adv = r800_ffff_tmp6;
                  sequence_e4_b6 = simd_and(byte_e4_adv, byte_b6);
                  carryQ.cq[134] = carryout2carry(pablo_blk_Advance(sequence_e4_b6, carryQ.get_carry_in(134), r3000_4dff_tmp74));
                  sequence_e4_b6_byte_range_80_b5 = simd_and(r3000_4dff_tmp74, byte_range_80_b5);
                  struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e4_b6_byte_range_80_b5);
                }
                else {
                  carryQ.CarryDequeueEnqueue(123, 12);
                }
              }
              else {
                carryQ.CarryDequeueEnqueue(107, 28);
              }
            }
            else {
              carryQ.CarryDequeueEnqueue(27, 108);
            }
            r800_ffff_tmp9 = simd_and(r800_ffff_tmp3, tmp2);
            byte_range_b8_bf = simd_and(r800_ffff_tmp9, basis_bits.bit_4);
            r800_ffff_tmp10 = simd_and(r800_ffff_tmp6, byte_range_b8_bf);
            r800_ffff_tmp11 = simd_not(tmp4);
            r800_ffff_tmp12 = simd_and(basis_bits.bit_5, tmp14);
            r800_ffff_tmp13 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp11), simd_andc(r800_ffff_tmp12, basis_bits.bit_4));
            byte_range_e5_e9 = simd_and(byte_range_e0_ef, r800_ffff_tmp13);
            r800_ffff_tmp14 = simd_or(r800_ffff_tmp10, byte_range_e5_e9);
            if ((bitblock::any(r800_ffff_tmp14) || carryQ.CarryTest(135, 5))) {
              byte_e4_byte_range_b8_bf = r800_ffff_tmp10;
              byte_range_80_bf = r800_ffff_tmp3;
              carryQ.cq[135] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_b8_bf, carryQ.get_carry_in(135), r4e00_9fff_tmp1));
              byte_e4_byte_range_b8_bf_sfx = simd_and(r4e00_9fff_tmp1, byte_range_80_bf);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, byte_e4_byte_range_b8_bf_sfx);
              r4e00_9fff_tmp2 = simd_or(basis_bits.bit_5, tmp14);
              r4e00_9fff_tmp3 = simd_not(r4e00_9fff_tmp2);
              r4e00_9fff_tmp4 = simd_or(simd_and(basis_bits.bit_4, r4e00_9fff_tmp3), simd_andc(r800_ffff_tmp12, basis_bits.bit_4));
              byte_range_e5_e8 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp4);
              carryQ.cq[136] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8, carryQ.get_carry_in(136), r4e00_9fff_tmp5));
              byte_range_e5_e8_sfx = simd_and(r4e00_9fff_tmp5, byte_range_80_bf);
              carryQ.cq[137] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8_sfx, carryQ.get_carry_in(137), r4e00_9fff_tmp6));
              byte_range_e5_e8_sfx_sfx = simd_and(r4e00_9fff_tmp6, byte_range_80_bf);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, byte_range_e5_e8_sfx_sfx);
              r4e00_9fff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              r4e00_9fff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              r4e00_9fff_tmp9 = simd_and(r4e00_9fff_tmp7, r4e00_9fff_tmp8);
              byte_e9 = simd_and(byte_range_e0_ef, r4e00_9fff_tmp9);
              r4e00_9fff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              r4e00_9fff_tmp11 = simd_andc(byte_range_80_bf, r4e00_9fff_tmp10);
              byte_80 = simd_andc(r4e00_9fff_tmp11, tmp15);
              carryQ.cq[138] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(138), byte_e9_adv));
              sequence_e9_80 = simd_and(byte_e9_adv, byte_80);
              r4e00_9fff_tmp12 = simd_and(basis_bits.bit_4, r800_ffff_tmp12);
              byte_range_80_8c = simd_andc(r4e00_9fff_tmp11, r4e00_9fff_tmp12);
              carryQ.cq[139] = carryout2carry(pablo_blk_Advance(sequence_e9_80, carryQ.get_carry_in(139), r4e00_9fff_tmp13));
              sequence_e9_80_byte_range_80_8c = simd_and(r4e00_9fff_tmp13, byte_range_80_8c);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_e9_80_byte_range_80_8c);
            }
            else {
              carryQ.CarryDequeueEnqueue(135, 5);
            }
            r800_ffff_tmp15 = simd_and(byte_range_e0_ef, basis_bits.bit_4);
            byte_range_ea_ef = simd_and(r800_ffff_tmp15, tmp4);
            if ((bitblock::any(byte_range_ea_ef) || carryQ.CarryTest(140, 57))) {
              ra000_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              ra000_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
              ra000_ffff_tmp3 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp2);
              byte_ea = simd_and(byte_range_e0_ef, ra000_ffff_tmp3);
              ra000_ffff_tmp4 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
              ra000_ffff_tmp5 = simd_or(tmp13, basis_bits.bit_6);
              ra000_ffff_tmp6 = simd_and(basis_bits.bit_3, ra000_ffff_tmp5);
              byte_range_80_91 = simd_andc(ra000_ffff_tmp4, ra000_ffff_tmp6);
              carryQ.cq[140] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(140), ra000_ffff_tmp7));
              byte_ea_byte_range_80_91 = simd_and(ra000_ffff_tmp7, byte_range_80_91);
              byte_range_80_bf = r800_ffff_tmp3;
              carryQ.cq[141] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_80_91, carryQ.get_carry_in(141), ra000_ffff_tmp8));
              byte_ea_byte_range_80_91_sfx = simd_and(ra000_ffff_tmp8, byte_range_80_bf);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, byte_ea_byte_range_80_91_sfx);
              ra000_ffff_tmp9 = simd_and(byte_range_80_bf, tmp19);
              ra000_ffff_tmp10 = simd_andc(ra000_ffff_tmp2, tmp13);
              byte_92 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp10);
              byte_ea_adv = ra000_ffff_tmp7;
              sequence_ea_92 = simd_and(byte_ea_adv, byte_92);
              ra000_ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
              ra000_ffff_tmp12 = simd_andc(byte_range_80_bf, ra000_ffff_tmp11);
              ra000_ffff_tmp13 = simd_and(basis_bits.bit_4, r800_ffff_tmp12);
              byte_range_80_8c = simd_andc(ra000_ffff_tmp12, ra000_ffff_tmp13);
              carryQ.cq[142] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(142), ra000_ffff_tmp14));
              sequence_ea_92_byte_range_80_8c = simd_and(ra000_ffff_tmp14, byte_range_80_8c);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_92_byte_range_80_8c);
              ra000_ffff_tmp15 = simd_andc(tmp9, tmp13);
              byte_93 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp15);
              sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
              ra000_ffff_tmp16 = simd_and(tmp21, basis_bits.bit_6);
              ra000_ffff_tmp17 = simd_and(basis_bits.bit_3, ra000_ffff_tmp16);
              ra000_ffff_tmp18 = simd_not(ra000_ffff_tmp17);
              ra000_ffff_tmp19 = simd_or(simd_and(basis_bits.bit_2, ra000_ffff_tmp18), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
              byte_range_90_bd = simd_and(byte_range_80_bf, ra000_ffff_tmp19);
              carryQ.cq[143] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(143), ra000_ffff_tmp20));
              sequence_ea_93_byte_range_90_bd = simd_and(ra000_ffff_tmp20, byte_range_90_bd);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_93_byte_range_90_bd);
              byte_94 = simd_and(ra000_ffff_tmp9, r800_ffff_tmp2);
              sequence_ea_94 = simd_and(byte_ea_adv, byte_94);
              carryQ.cq[144] = carryout2carry(pablo_blk_Advance(sequence_ea_94, carryQ.get_carry_in(144), ra000_ffff_tmp21));
              sequence_ea_94_byte_range_80_bf = simd_and(ra000_ffff_tmp21, byte_range_80_bf);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_94_byte_range_80_bf);
              ra000_ffff_tmp22 = simd_andc(ra000_ffff_tmp1, tmp14);
              byte_98 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp22);
              sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
              carryQ.cq[145] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(145), ra000_ffff_tmp23));
              sequence_ea_98_byte_range_80_8c = simd_and(ra000_ffff_tmp23, byte_range_80_8c);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_98_byte_range_80_8c);
              ra000_ffff_tmp24 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
              ra000_ffff_tmp25 = simd_and(ra000_ffff_tmp1, ra000_ffff_tmp24);
              byte_99 = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp25);
              sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
              byte_range_80_af = simd_andc(byte_range_80_bf, tmp2);
              carryQ.cq[146] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(146), ra000_ffff_tmp26));
              sequence_ea_99_byte_range_80_af = simd_and(ra000_ffff_tmp26, byte_range_80_af);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_99_byte_range_80_af);
              byte_9a = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp3);
              sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
              ra000_ffff_tmp27 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
              byte_range_80_9d = simd_andc(ra000_ffff_tmp27, ra000_ffff_tmp17);
              carryQ.cq[147] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(147), ra000_ffff_tmp28));
              sequence_ea_9a_byte_range_80_9d = simd_and(ra000_ffff_tmp28, byte_range_80_9d);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_9a_byte_range_80_9d);
              ra000_ffff_tmp29 = simd_and(ra000_ffff_tmp1, tmp9);
              byte_9b = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp29);
              sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
              ra000_ffff_tmp30 = simd_and(basis_bits.bit_2, ra000_ffff_tmp6);
              byte_range_80_b1 = simd_andc(byte_range_80_bf, ra000_ffff_tmp30);
              carryQ.cq[148] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(148), ra000_ffff_tmp31));
              sequence_ea_9b_byte_range_80_b1 = simd_and(ra000_ffff_tmp31, byte_range_80_b1);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_9b_byte_range_80_b1);
              ra000_ffff_tmp32 = simd_andc(tmp21, tmp14);
              byte_9c = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp32);
              sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
              ra000_ffff_tmp33 = simd_and(basis_bits.bit_5, tmp9);
              ra000_ffff_tmp34 = simd_or(basis_bits.bit_4, ra000_ffff_tmp33);
              byte_range_97_9f = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp34);
              carryQ.cq[149] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(149), ra000_ffff_tmp35));
              sequence_ea_9c_byte_range_97_9f = simd_and(ra000_ffff_tmp35, byte_range_97_9f);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_9c_byte_range_97_9f);
              ra000_ffff_tmp36 = simd_and(tmp21, ra000_ffff_tmp24);
              byte_9d = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp36);
              sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
              carryQ.cq[150] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(150), ra000_ffff_tmp37));
              sequence_ea_9d_byte_range_80_bf = simd_and(ra000_ffff_tmp37, byte_range_80_bf);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_9d_byte_range_80_bf);
              ra000_ffff_tmp38 = simd_and(tmp21, ra000_ffff_tmp2);
              byte_9e = simd_and(ra000_ffff_tmp9, ra000_ffff_tmp38);
              sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
              ra000_ffff_tmp39 = simd_or(basis_bits.bit_5, tmp14);
              ra000_ffff_tmp40 = simd_and(basis_bits.bit_4, ra000_ffff_tmp39);
              byte_range_80_88 = simd_andc(ra000_ffff_tmp12, ra000_ffff_tmp40);
              carryQ.cq[151] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(151), ra000_ffff_tmp41));
              sequence_ea_9e_byte_range_80_88 = simd_and(ra000_ffff_tmp41, byte_range_80_88);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_9e_byte_range_80_88);
              byte_9f = simd_and(ra000_ffff_tmp9, tmp22);
              sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
              ra000_ffff_tmp42 = simd_and(byte_range_80_bf, tmp2);
              byte_range_b7_bf = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp34);
              carryQ.cq[152] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(152), ra000_ffff_tmp43));
              sequence_ea_9f_byte_range_b7_bf = simd_and(ra000_ffff_tmp43, byte_range_b7_bf);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_9f_byte_range_b7_bf);
              ra000_ffff_tmp44 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
              byte_a0 = simd_andc(ra000_ffff_tmp44, tmp15);
              sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
              ra000_ffff_tmp45 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
              ra000_ffff_tmp46 = simd_and(basis_bits.bit_2, ra000_ffff_tmp45);
              byte_range_80_a7 = simd_andc(byte_range_80_bf, ra000_ffff_tmp46);
              carryQ.cq[153] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(153), ra000_ffff_tmp47));
              sequence_ea_a0_byte_range_80_a7 = simd_and(ra000_ffff_tmp47, byte_range_80_a7);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_a0_byte_range_80_a7);
              ra000_ffff_tmp48 = simd_andc(ra000_ffff_tmp24, tmp13);
              byte_a1 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp48);
              sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
              ra000_ffff_tmp49 = simd_and(basis_bits.bit_3, tmp13);
              ra000_ffff_tmp50 = simd_and(basis_bits.bit_2, ra000_ffff_tmp49);
              byte_range_80_b3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp50);
              carryQ.cq[154] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(154), ra000_ffff_tmp51));
              sequence_ea_a1_byte_range_80_b3 = simd_and(ra000_ffff_tmp51, byte_range_80_b3);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_a1_byte_range_80_b3);
              byte_a2 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp10);
              sequence_ea_a2 = simd_and(byte_ea_adv, byte_a2);
              carryQ.cq[155] = carryout2carry(pablo_blk_Advance(sequence_ea_a2, carryQ.get_carry_in(155), ra000_ffff_tmp52));
              sequence_ea_a2_byte_range_80_bf = simd_and(ra000_ffff_tmp52, byte_range_80_bf);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_a2_byte_range_80_bf);
              byte_a3 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp15);
              sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
              ra000_ffff_tmp53 = simd_andc(ra000_ffff_tmp12, basis_bits.bit_4);
              byte_range_80_84 = simd_andc(ra000_ffff_tmp53, r800_ffff_tmp12);
              carryQ.cq[156] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(156), ra000_ffff_tmp54));
              sequence_ea_a3_byte_range_80_84 = simd_and(ra000_ffff_tmp54, byte_range_80_84);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_a3_byte_range_80_84);
              byte_a4 = simd_and(ra000_ffff_tmp44, r800_ffff_tmp2);
              sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
              ra000_ffff_tmp55 = simd_or(basis_bits.bit_3, ra000_ffff_tmp16);
              ra000_ffff_tmp56 = simd_and(basis_bits.bit_2, ra000_ffff_tmp55);
              byte_range_80_ad = simd_andc(byte_range_80_bf, ra000_ffff_tmp56);
              carryQ.cq[157] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(157), ra000_ffff_tmp57));
              sequence_ea_a4_byte_range_80_ad = simd_and(ra000_ffff_tmp57, byte_range_80_ad);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_a4_byte_range_80_ad);
              ra000_ffff_tmp58 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp24);
              byte_a5 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp58);
              sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
              byte_range_80_93 = simd_andc(ra000_ffff_tmp27, ra000_ffff_tmp49);
              carryQ.cq[158] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(158), ra000_ffff_tmp59));
              sequence_ea_a5_byte_range_80_93 = simd_and(ra000_ffff_tmp59, byte_range_80_93);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_a5_byte_range_80_93);
              ra000_ffff_tmp60 = simd_and(r800_ffff_tmp1, ra000_ffff_tmp2);
              byte_a6 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp60);
              sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
              carryQ.cq[159] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(159), ra000_ffff_tmp61));
              sequence_ea_a6_byte_range_80_bf = simd_and(ra000_ffff_tmp61, byte_range_80_bf);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_a6_byte_range_80_bf);
              ra000_ffff_tmp62 = simd_and(r800_ffff_tmp1, tmp9);
              byte_a7 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp62);
              sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
              byte_80 = simd_andc(ra000_ffff_tmp12, tmp15);
              carryQ.cq[160] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(160), ra000_ffff_tmp63));
              sequence_ea_a7_80 = simd_and(ra000_ffff_tmp63, byte_80);
              byte_a8 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp22);
              sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
              ra000_ffff_tmp64 = simd_and(basis_bits.bit_3, ra000_ffff_tmp34);
              ra000_ffff_tmp65 = simd_and(basis_bits.bit_2, ra000_ffff_tmp64);
              byte_range_80_b6 = simd_andc(byte_range_80_bf, ra000_ffff_tmp65);
              carryQ.cq[161] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(161), ra000_ffff_tmp66));
              sequence_ea_a8_byte_range_80_b6 = simd_and(ra000_ffff_tmp66, byte_range_80_b6);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_a8_byte_range_80_b6);
              byte_a9 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp25);
              sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
              ra000_ffff_tmp67 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
              ra000_ffff_tmp68 = simd_and(basis_bits.bit_4, ra000_ffff_tmp67);
              byte_range_80_8d = simd_andc(ra000_ffff_tmp12, ra000_ffff_tmp68);
              carryQ.cq[162] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(162), ra000_ffff_tmp69));
              sequence_ea_a9_byte_range_80_8d = simd_and(ra000_ffff_tmp69, byte_range_80_8d);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_a9_byte_range_80_8d);
              byte_aa = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp3);
              sequence_ea_aa = simd_and(byte_ea_adv, byte_aa);
              carryQ.cq[163] = carryout2carry(pablo_blk_Advance(sequence_ea_aa, carryQ.get_carry_in(163), ra000_ffff_tmp70));
              sequence_ea_aa_byte_range_80_bf = simd_and(ra000_ffff_tmp70, byte_range_80_bf);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_aa_byte_range_80_bf);
              byte_ab = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp29);
              sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
              ra000_ffff_tmp71 = simd_andc(ra000_ffff_tmp12, tmp13);
              byte_range_80_82 = simd_andc(ra000_ffff_tmp71, tmp9);
              carryQ.cq[164] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(164), ra000_ffff_tmp72));
              sequence_ea_ab_byte_range_80_82 = simd_and(ra000_ffff_tmp72, byte_range_80_82);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_ab_byte_range_80_82);
              byte_ac = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp32);
              sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
              ra000_ffff_tmp73 = simd_not(tmp9);
              ra000_ffff_tmp74 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp73), simd_andc(tmp14, basis_bits.bit_5));
              byte_range_81_86 = simd_and(ra000_ffff_tmp53, ra000_ffff_tmp74);
              carryQ.cq[165] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(165), ra000_ffff_tmp75));
              sequence_ea_ac_byte_range_81_86 = simd_and(ra000_ffff_tmp75, byte_range_81_86);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_ac_byte_range_81_86);
              byte_ad = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp36);
              sequence_ea_ad = simd_and(byte_ea_adv, byte_ad);
              ra000_ffff_tmp76 = simd_and(basis_bits.bit_3, tmp11);
              byte_range_80_9a = simd_andc(ra000_ffff_tmp27, ra000_ffff_tmp76);
              carryQ.cq[166] = carryout2carry(pablo_blk_Advance(sequence_ea_ad, carryQ.get_carry_in(166), ra000_ffff_tmp77));
              sequence_ea_ad_byte_range_80_9a = simd_and(ra000_ffff_tmp77, byte_range_80_9a);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_ad_byte_range_80_9a);
              byte_af = simd_and(ra000_ffff_tmp44, tmp22);
              sequence_ea_af = simd_and(byte_ea_adv, byte_af);
              ra000_ffff_tmp78 = simd_or(basis_bits.bit_3, tmp11);
              ra000_ffff_tmp79 = simd_and(basis_bits.bit_2, ra000_ffff_tmp78);
              byte_range_80_aa = simd_andc(byte_range_80_bf, ra000_ffff_tmp79);
              carryQ.cq[167] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(167), ra000_ffff_tmp80));
              sequence_ea_af_byte_range_80_aa = simd_and(ra000_ffff_tmp80, byte_range_80_aa);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_af_byte_range_80_aa);
              byte_b0 = simd_andc(ra000_ffff_tmp42, tmp15);
              sequence_ea_b0 = simd_and(byte_ea_adv, byte_b0);
              carryQ.cq[168] = carryout2carry(pablo_blk_Advance(sequence_ea_b0, carryQ.get_carry_in(168), ra000_ffff_tmp81));
              sequence_ea_b0_byte_range_80_bf = simd_and(ra000_ffff_tmp81, byte_range_80_bf);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ea_b0_byte_range_80_bf);
              ra000_ffff_tmp82 = simd_not(tmp14);
              ra000_ffff_tmp83 = simd_or(simd_and(basis_bits.bit_5, ra000_ffff_tmp82), simd_andc(tmp9, basis_bits.bit_5));
              byte_range_eb_ec = simd_and(r800_ffff_tmp15, ra000_ffff_tmp83);
              carryQ.cq[169] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec, carryQ.get_carry_in(169), ra000_ffff_tmp84));
              byte_range_eb_ec_sfx = simd_and(ra000_ffff_tmp84, byte_range_80_bf);
              carryQ.cq[170] = carryout2carry(pablo_blk_Advance(byte_range_eb_ec_sfx, carryQ.get_carry_in(170), ra000_ffff_tmp85));
              byte_range_eb_ec_sfx_sfx = simd_and(ra000_ffff_tmp85, byte_range_80_bf);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, byte_range_eb_ec_sfx_sfx);
              byte_ed = simd_and(byte_range_e0_ef, ra000_ffff_tmp36);
              carryQ.cq[171] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(171), byte_ed_adv));
              sequence_ed_80 = simd_and(byte_ed_adv, byte_80);
              ra000_ffff_tmp86 = simd_or(basis_bits.bit_3, tmp13);
              ra000_ffff_tmp87 = simd_and(basis_bits.bit_2, ra000_ffff_tmp86);
              byte_range_80_a3 = simd_andc(byte_range_80_bf, ra000_ffff_tmp87);
              carryQ.cq[172] = carryout2carry(pablo_blk_Advance(sequence_ed_80, carryQ.get_carry_in(172), ra000_ffff_tmp88));
              sequence_ed_80_byte_range_80_a3 = simd_and(ra000_ffff_tmp88, byte_range_80_a3);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ed_80_byte_range_80_a3);
              byte_ef = simd_and(byte_range_e0_ef, tmp22);
              ra000_ffff_tmp89 = simd_not(ra000_ffff_tmp39);
              ra000_ffff_tmp90 = simd_or(simd_and(basis_bits.bit_4, ra000_ffff_tmp89), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
              byte_range_a4_a8 = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp90);
              carryQ.cq[173] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(173), ra000_ffff_tmp91));
              byte_ef_byte_range_a4_a8 = simd_and(ra000_ffff_tmp91, byte_range_a4_a8);
              carryQ.cq[174] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_a4_a8, carryQ.get_carry_in(174), ra000_ffff_tmp92));
              byte_ef_byte_range_a4_a8_sfx = simd_and(ra000_ffff_tmp92, byte_range_80_bf);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, byte_ef_byte_range_a4_a8_sfx);
              byte_ef_adv = ra000_ffff_tmp91;
              sequence_ef_a9 = simd_and(byte_ef_adv, byte_a9);
              carryQ.cq[175] = carryout2carry(pablo_blk_Advance(sequence_ef_a9, carryQ.get_carry_in(175), ra000_ffff_tmp93));
              sequence_ef_a9_byte_range_80_ad = simd_and(ra000_ffff_tmp93, byte_range_80_ad);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_a9_byte_range_80_ad);
              sequence_ef_aa = simd_and(byte_ef_adv, byte_aa);
              carryQ.cq[176] = carryout2carry(pablo_blk_Advance(sequence_ef_aa, carryQ.get_carry_in(176), ra000_ffff_tmp94));
              sequence_ef_aa_byte_range_80_bf = simd_and(ra000_ffff_tmp94, byte_range_80_bf);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_aa_byte_range_80_bf);
              sequence_ef_ab = simd_and(byte_ef_adv, byte_ab);
              ra000_ffff_tmp95 = simd_and(basis_bits.bit_3, tmp5);
              byte_range_80_99 = simd_andc(ra000_ffff_tmp27, ra000_ffff_tmp95);
              carryQ.cq[177] = carryout2carry(pablo_blk_Advance(sequence_ef_ab, carryQ.get_carry_in(177), ra000_ffff_tmp96));
              sequence_ef_ab_byte_range_80_99 = simd_and(ra000_ffff_tmp96, byte_range_80_99);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_ab_byte_range_80_99);
              sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
              byte_range_80_86 = simd_andc(ra000_ffff_tmp53, ra000_ffff_tmp33);
              carryQ.cq[178] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(178), ra000_ffff_tmp97));
              sequence_ef_ac_byte_range_80_86 = simd_and(ra000_ffff_tmp97, byte_range_80_86);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_ac_byte_range_80_86);
              sequence_ef_ad = simd_and(byte_ef_adv, byte_ad);
              byte_range_80_81 = simd_andc(ra000_ffff_tmp12, ra000_ffff_tmp5);
              carryQ.cq[179] = carryout2carry(pablo_blk_Advance(sequence_ef_ad, carryQ.get_carry_in(179), ra000_ffff_tmp98));
              sequence_ef_ad_byte_range_80_81 = simd_and(ra000_ffff_tmp98, byte_range_80_81);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_ad_byte_range_80_81);
              byte_ae = simd_and(ra000_ffff_tmp44, ra000_ffff_tmp38);
              sequence_ef_ae = simd_and(byte_ef_adv, byte_ae);
              carryQ.cq[180] = carryout2carry(pablo_blk_Advance(sequence_ef_ae, carryQ.get_carry_in(180), ra000_ffff_tmp99));
              sequence_ef_ae_byte_range_80_b1 = simd_and(ra000_ffff_tmp99, byte_range_80_b1);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_ae_byte_range_80_b1);
              sequence_ef_af = simd_and(byte_ef_adv, byte_af);
              ra000_ffff_tmp100 = simd_or(tmp13, tmp9);
              ra000_ffff_tmp101 = simd_and(basis_bits.bit_3, ra000_ffff_tmp100);
              ra000_ffff_tmp102 = simd_or(basis_bits.bit_2, ra000_ffff_tmp101);
              byte_range_93_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp102);
              carryQ.cq[181] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(181), ra000_ffff_tmp103));
              sequence_ef_af_byte_range_93_bf = simd_and(ra000_ffff_tmp103, byte_range_93_bf);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_af_byte_range_93_bf);
              sequence_ef_b0 = simd_and(byte_ef_adv, byte_b0);
              carryQ.cq[182] = carryout2carry(pablo_blk_Advance(sequence_ef_b0, carryQ.get_carry_in(182), ra000_ffff_tmp104));
              sequence_ef_b0_byte_range_80_bf = simd_and(ra000_ffff_tmp104, byte_range_80_bf);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_b0_byte_range_80_bf);
              byte_b1 = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp48);
              sequence_ef_b1 = simd_and(byte_ef_adv, byte_b1);
              carryQ.cq[183] = carryout2carry(pablo_blk_Advance(sequence_ef_b1, carryQ.get_carry_in(183), ra000_ffff_tmp105));
              sequence_ef_b1_byte_range_80_9d = simd_and(ra000_ffff_tmp105, byte_range_80_9d);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_b1_byte_range_80_9d);
              byte_b2 = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp10);
              sequence_ef_b2 = simd_and(byte_ef_adv, byte_b2);
              carryQ.cq[184] = carryout2carry(pablo_blk_Advance(sequence_ef_b2, carryQ.get_carry_in(184), ra000_ffff_tmp106));
              sequence_ef_b2_byte_range_80_bf = simd_and(ra000_ffff_tmp106, byte_range_80_bf);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_b2_byte_range_80_bf);
              byte_b4 = simd_and(ra000_ffff_tmp42, r800_ffff_tmp2);
              sequence_ef_b4 = simd_and(byte_ef_adv, byte_b4);
              ra000_ffff_tmp107 = simd_and(basis_bits.bit_2, ra000_ffff_tmp17);
              byte_range_80_bd = simd_andc(byte_range_80_bf, ra000_ffff_tmp107);
              carryQ.cq[185] = carryout2carry(pablo_blk_Advance(sequence_ef_b4, carryQ.get_carry_in(185), ra000_ffff_tmp108));
              sequence_ef_b4_byte_range_80_bd = simd_and(ra000_ffff_tmp108, byte_range_80_bd);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_b4_byte_range_80_bd);
              byte_b5 = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp58);
              sequence_ef_b5 = simd_and(byte_ef_adv, byte_b5);
              byte_range_90_bf = simd_and(byte_range_80_bf, ra000_ffff_tmp11);
              carryQ.cq[186] = carryout2carry(pablo_blk_Advance(sequence_ef_b5, carryQ.get_carry_in(186), ra000_ffff_tmp109));
              sequence_ef_b5_byte_range_90_bf = simd_and(ra000_ffff_tmp109, byte_range_90_bf);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_b5_byte_range_90_bf);
              byte_b6 = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp60);
              sequence_ef_b6 = simd_and(byte_ef_adv, byte_b6);
              byte_range_80_8f = ra000_ffff_tmp12;
              carryQ.cq[187] = carryout2carry(pablo_blk_Advance(sequence_ef_b6, carryQ.get_carry_in(187), ra000_ffff_tmp110));
              sequence_ef_b6_byte_range_80_8f = simd_and(ra000_ffff_tmp110, byte_range_80_8f);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_b6_byte_range_80_8f);
              byte_b7 = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp62);
              sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
              byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
              carryQ.cq[188] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(188), ra000_ffff_tmp111));
              sequence_ef_b7_byte_range_80_87 = simd_and(ra000_ffff_tmp111, byte_range_80_87);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_b7_byte_range_80_87);
              byte_b8 = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp22);
              sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
              carryQ.cq[189] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(189), ra000_ffff_tmp112));
              sequence_ef_b8_byte_range_80_8f = simd_and(ra000_ffff_tmp112, byte_range_80_8f);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_b8_byte_range_80_8f);
              byte_b9 = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp25);
              sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
              ra000_ffff_tmp113 = simd_and(byte_range_80_8f, tmp21);
              byte_range_8d_8f = simd_and(ra000_ffff_tmp113, tmp14);
              carryQ.cq[190] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(190), ra000_ffff_tmp114));
              sequence_ef_b9_byte_range_8d_8f = simd_and(ra000_ffff_tmp114, byte_range_8d_8f);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_b9_byte_range_8d_8f);
              byte_ba = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp3);
              sequence_ef_ba = simd_and(byte_ef_adv, byte_ba);
              carryQ.cq[191] = carryout2carry(pablo_blk_Advance(sequence_ef_ba, carryQ.get_carry_in(191), ra000_ffff_tmp115));
              sequence_ef_ba_byte_range_80_bf = simd_and(ra000_ffff_tmp115, byte_range_80_bf);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_ba_byte_range_80_bf);
              byte_bb = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp29);
              sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
              ra000_ffff_tmp116 = simd_and(tmp21, tmp14);
              ra000_ffff_tmp117 = simd_and(basis_bits.bit_3, ra000_ffff_tmp116);
              ra000_ffff_tmp118 = simd_and(basis_bits.bit_2, ra000_ffff_tmp117);
              byte_range_80_bc = simd_andc(byte_range_80_bf, ra000_ffff_tmp118);
              carryQ.cq[192] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(192), ra000_ffff_tmp119));
              sequence_ef_bb_byte_range_80_bc = simd_and(ra000_ffff_tmp119, byte_range_80_bc);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_bb_byte_range_80_bc);
              byte_bc = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp32);
              sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
              byte_range_90_99 = simd_andc(ra000_ffff_tmp9, tmp5);
              carryQ.cq[193] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(193), ra000_ffff_tmp120));
              sequence_ef_bc_byte_range_90_99 = simd_and(ra000_ffff_tmp120, byte_range_90_99);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_bc_byte_range_90_99);
              byte_bd = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp36);
              sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
              byte_range_81_9a = simd_and(ra000_ffff_tmp27, tmp16);
              carryQ.cq[194] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(194), ra000_ffff_tmp121));
              sequence_ef_bd_byte_range_81_9a = simd_and(ra000_ffff_tmp121, byte_range_81_9a);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_bd_byte_range_81_9a);
              byte_be = simd_and(ra000_ffff_tmp42, ra000_ffff_tmp38);
              sequence_ef_be = simd_and(byte_ef_adv, byte_be);
              ra000_ffff_tmp122 = simd_and(basis_bits.bit_3, tmp22);
              ra000_ffff_tmp123 = simd_and(basis_bits.bit_2, ra000_ffff_tmp122);
              byte_range_80_be = simd_andc(byte_range_80_bf, ra000_ffff_tmp123);
              carryQ.cq[195] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(195), ra000_ffff_tmp124));
              sequence_ef_be_byte_range_80_be = simd_and(ra000_ffff_tmp124, byte_range_80_be);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_be_byte_range_80_be);
              byte_bf = simd_and(ra000_ffff_tmp42, tmp22);
              sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
              byte_range_82_87 = simd_and(byte_range_80_87, tmp4);
              carryQ.cq[196] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(196), ra000_ffff_tmp125));
              sequence_ef_bf_byte_range_82_87 = simd_and(ra000_ffff_tmp125, byte_range_82_87);
              struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_ef_bf_byte_range_82_87);
            }
            else {
              carryQ.CarryDequeueEnqueue(140, 57);
            }
          }
          else {
            carryQ.CarryDequeueEnqueue(26, 171);
          }
          byte_range_f0_ff = simd_and(byte_range_c0_ff, tmp2);
          if ((bitblock::any(byte_range_f0_ff) || carryQ.CarryTest(197, 119))) {
            byte_f0 = simd_andc(byte_range_f0_ff, tmp15);
            r10000_10ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r10000_10ffff_tmp2 = simd_and(r10000_10ffff_tmp1, tmp19);
            byte_90 = simd_andc(r10000_10ffff_tmp2, tmp15);
            carryQ.cq[197] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(197), r10000_10ffff_tmp3));
            sequence_f0_90 = simd_and(r10000_10ffff_tmp3, byte_90);
            byte_f0_adv = r10000_10ffff_tmp3;
            r10000_10ffff_tmp4 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp5 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp4);
            byte_80 = simd_andc(r10000_10ffff_tmp5, tmp15);
            carryQ.cq[198] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(198), r10000_10ffff_tmp6));
            sequence_f0_90_80 = simd_and(r10000_10ffff_tmp6, byte_80);
            sequence_f0_90_adv = r10000_10ffff_tmp6;
            r10000_10ffff_tmp7 = simd_andc(r10000_10ffff_tmp5, tmp21);
            r10000_10ffff_tmp8 = simd_and(basis_bits.bit_5, tmp9);
            r10000_10ffff_tmp9 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp8);
            r10000_10ffff_tmp10 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp9);
            r10000_10ffff_tmp11 = simd_not(r10000_10ffff_tmp10);
            r10000_10ffff_tmp12 = simd_and(tmp21, tmp14);
            r10000_10ffff_tmp13 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp12);
            r10000_10ffff_tmp14 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp11), simd_andc(r10000_10ffff_tmp13, basis_bits.bit_2));
            r10000_10ffff_tmp15 = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp14);
            r10000_10ffff_tmp16 = simd_or(r10000_10ffff_tmp7, r10000_10ffff_tmp15);
            r10000_10ffff_tmp17 = simd_and(r10000_10ffff_tmp1, basis_bits.bit_2);
            r10000_10ffff_tmp18 = simd_or(simd_and(basis_bits.bit_3, tmp12), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
            r10000_10ffff_tmp19 = simd_and(r10000_10ffff_tmp17, r10000_10ffff_tmp18);
            r10000_10ffff_tmp20 = simd_or(r10000_10ffff_tmp16, r10000_10ffff_tmp19);
            r10000_10ffff_tmp21 = simd_and(r10000_10ffff_tmp1, tmp2);
            r10000_10ffff_tmp22 = simd_andc(tmp21, basis_bits.bit_6);
            r10000_10ffff_tmp23 = simd_and(r10000_10ffff_tmp21, r10000_10ffff_tmp22);
            r10000_10ffff_tmp24 = simd_or(r10000_10ffff_tmp20, r10000_10ffff_tmp23);
            r10000_10ffff_tmp25 = simd_and(r10000_10ffff_tmp21, tmp22);
            cc_range_10000_1003f_4 = simd_or(r10000_10ffff_tmp24, r10000_10ffff_tmp25);
            carryQ.cq[199] = carryout2carry(pablo_blk_Advance(sequence_f0_90_80, carryQ.get_carry_in(199), sequence_f0_90_80_adv));
            r10000_10ffff_tmp26 = simd_and(sequence_f0_90_80_adv, cc_range_10000_1003f_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp26);
            r10000_10ffff_tmp27 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp28 = simd_andc(r10000_10ffff_tmp27, tmp13);
            byte_81 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp28);
            sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
            r10000_10ffff_tmp29 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp30 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp29);
            r10000_10ffff_tmp31 = simd_andc(r10000_10ffff_tmp4, tmp19);
            r10000_10ffff_tmp32 = simd_andc(r10000_10ffff_tmp1, r10000_10ffff_tmp31);
            cc_range_10040_10050_4 = simd_andc(r10000_10ffff_tmp32, r10000_10ffff_tmp30);
            carryQ.cq[200] = carryout2carry(pablo_blk_Advance(sequence_f0_90_81, carryQ.get_carry_in(200), sequence_f0_90_81_adv));
            r10000_10ffff_tmp33 = simd_and(sequence_f0_90_81_adv, cc_range_10040_10050_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp33);
            r10000_10ffff_tmp34 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp35 = simd_andc(r10000_10ffff_tmp34, tmp13);
            byte_82 = simd_and(r10000_10ffff_tmp5, r10000_10ffff_tmp35);
            sequence_f0_90_82 = simd_and(sequence_f0_90_adv, byte_82);
            byte_range_80_bf = r10000_10ffff_tmp1;
            carryQ.cq[201] = carryout2carry(pablo_blk_Advance(sequence_f0_90_82, carryQ.get_carry_in(201), sequence_f0_90_82_adv));
            r10000_10ffff_tmp36 = simd_and(sequence_f0_90_82_adv, byte_range_80_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp36);
            r10000_10ffff_tmp37 = simd_and(byte_range_80_bf, tmp19);
            r10000_10ffff_tmp38 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp4);
            r10000_10ffff_tmp39 = simd_andc(tmp9, tmp13);
            byte_83 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp39);
            sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
            r10000_10ffff_tmp40 = simd_and(basis_bits.bit_3, tmp11);
            r10000_10ffff_tmp41 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp40);
            byte_range_80_ba = simd_andc(byte_range_80_bf, r10000_10ffff_tmp41);
            carryQ.cq[202] = carryout2carry(pablo_blk_Advance(sequence_f0_90_83, carryQ.get_carry_in(202), sequence_f0_90_83_adv));
            r10000_10ffff_tmp42 = simd_and(sequence_f0_90_83_adv, byte_range_80_ba);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp42);
            r10000_10ffff_tmp43 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp44 = simd_and(r10000_10ffff_tmp43, r10000_10ffff_tmp27);
            byte_85 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp44);
            sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
            r10000_10ffff_tmp45 = simd_and(basis_bits.bit_5, tmp14);
            r10000_10ffff_tmp46 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp45);
            r10000_10ffff_tmp47 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp46);
            r10000_10ffff_tmp48 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp47);
            byte_range_80_b4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp48);
            carryQ.cq[203] = carryout2carry(pablo_blk_Advance(sequence_f0_90_85, carryQ.get_carry_in(203), sequence_f0_90_85_adv));
            r10000_10ffff_tmp49 = simd_and(sequence_f0_90_85_adv, byte_range_80_b4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp49);
            r10000_10ffff_tmp50 = simd_and(r10000_10ffff_tmp43, tmp9);
            byte_87 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp50);
            sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
            r10000_10ffff_tmp51 = simd_and(byte_range_80_bf, tmp2);
            r10000_10ffff_tmp52 = simd_and(tmp21, r10000_10ffff_tmp27);
            byte_bd = simd_and(r10000_10ffff_tmp51, r10000_10ffff_tmp52);
            carryQ.cq[204] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(204), sequence_f0_90_87_adv));
            r10000_10ffff_tmp53 = simd_and(sequence_f0_90_87_adv, byte_bd);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp53);
            r10000_10ffff_tmp54 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp55 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp34);
            byte_8a = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp55);
            sequence_f0_90_8a = simd_and(sequence_f0_90_adv, byte_8a);
            r10000_10ffff_tmp56 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
            r10000_10ffff_tmp57 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp12);
            r10000_10ffff_tmp58 = simd_andc(r10000_10ffff_tmp56, r10000_10ffff_tmp57);
            r10000_10ffff_tmp59 = simd_and(byte_range_80_bf, basis_bits.bit_2);
            cc_range_10280_102a0_4 = simd_or(r10000_10ffff_tmp58, r10000_10ffff_tmp59);
            carryQ.cq[205] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8a, carryQ.get_carry_in(205), sequence_f0_90_8a_adv));
            r10000_10ffff_tmp60 = simd_and(sequence_f0_90_8a_adv, cc_range_10280_102a0_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp60);
            r10000_10ffff_tmp61 = simd_and(r10000_10ffff_tmp54, tmp9);
            byte_8b = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp61);
            sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
            r10000_10ffff_tmp62 = simd_and(basis_bits.bit_3, tmp15);
            r10000_10ffff_tmp63 = simd_andc(r10000_10ffff_tmp56, r10000_10ffff_tmp62);
            r10000_10ffff_tmp64 = simd_and(byte_range_80_bf, r80_10ffff_tmp1);
            r10000_10ffff_tmp65 = simd_andc(r10000_10ffff_tmp64, tmp15);
            cc_range_102c0_102e0_4 = simd_or(r10000_10ffff_tmp63, r10000_10ffff_tmp65);
            carryQ.cq[206] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(206), sequence_f0_90_8b_adv));
            r10000_10ffff_tmp66 = simd_and(sequence_f0_90_8b_adv, cc_range_102c0_102e0_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp66);
            r10000_10ffff_tmp67 = simd_andc(tmp21, tmp14);
            byte_8c = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp67);
            sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
            r10000_10ffff_tmp68 = simd_andc(basis_bits.bit_2, tmp2);
            cc_range_10300_10330_4 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp68);
            carryQ.cq[207] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(207), sequence_f0_90_8c_adv));
            r10000_10ffff_tmp69 = simd_and(sequence_f0_90_8c_adv, cc_range_10300_10330_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp69);
            byte_8d = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp52);
            sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
            r10000_10ffff_tmp70 = simd_andc(r10000_10ffff_tmp38, tmp11);
            r10000_10ffff_tmp71 = simd_not(r10000_10ffff_tmp40);
            r10000_10ffff_tmp72 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp71), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp73 = simd_and(byte_range_80_bf, r10000_10ffff_tmp72);
            cc_range_10340_10350_4 = simd_or(r10000_10ffff_tmp70, r10000_10ffff_tmp73);
            carryQ.cq[208] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(208), sequence_f0_90_8d_adv));
            r10000_10ffff_tmp74 = simd_and(sequence_f0_90_8d_adv, cc_range_10340_10350_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp74);
            r10000_10ffff_tmp75 = simd_and(tmp21, r10000_10ffff_tmp34);
            byte_8e = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp75);
            sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
            r10000_10ffff_tmp76 = simd_and(tmp21, basis_bits.bit_6);
            r10000_10ffff_tmp77 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp76);
            r10000_10ffff_tmp78 = simd_andc(r10000_10ffff_tmp56, r10000_10ffff_tmp77);
            cc_range_10380_103a0_4 = simd_or(r10000_10ffff_tmp78, r10000_10ffff_tmp59);
            carryQ.cq[209] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(209), sequence_f0_90_8e_adv));
            r10000_10ffff_tmp79 = simd_and(sequence_f0_90_8e_adv, cc_range_10380_103a0_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp79);
            byte_8f = simd_and(r10000_10ffff_tmp38, tmp22);
            sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
            r10000_10ffff_tmp80 = simd_andc(tmp13, basis_bits.bit_4);
            r10000_10ffff_tmp81 = simd_andc(r10000_10ffff_tmp38, r10000_10ffff_tmp80);
            r10000_10ffff_tmp82 = simd_andc(r10000_10ffff_tmp37, basis_bits.bit_4);
            r10000_10ffff_tmp83 = simd_not(basis_bits.bit_6);
            r10000_10ffff_tmp84 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp83), simd_andc(tmp14, basis_bits.bit_5));
            r10000_10ffff_tmp85 = simd_and(r10000_10ffff_tmp82, r10000_10ffff_tmp84);
            cc_range_103c0_103d1_4 = simd_or(r10000_10ffff_tmp81, r10000_10ffff_tmp85);
            carryQ.cq[210] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(210), sequence_f0_90_8f_adv));
            r10000_10ffff_tmp86 = simd_and(sequence_f0_90_8f_adv, cc_range_103c0_103d1_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp86);
            r10000_10ffff_tmp87 = simd_or(tmp13, basis_bits.bit_6);
            byte_range_90_91 = simd_andc(r10000_10ffff_tmp37, r10000_10ffff_tmp87);
            sequence_f0_90_byte_range_90_91 = simd_and(sequence_f0_90_adv, byte_range_90_91);
            carryQ.cq[211] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_90_91, carryQ.get_carry_in(211), r10000_10ffff_tmp88));
            sequence_f0_90_byte_range_90_91_sfx = simd_and(r10000_10ffff_tmp88, byte_range_80_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_byte_range_90_91_sfx);
            byte_92 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp35);
            sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
            byte_range_80_9d = r10000_10ffff_tmp78;
            carryQ.cq[212] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(212), r10000_10ffff_tmp89));
            sequence_f0_90_92_byte_range_80_9d = simd_and(r10000_10ffff_tmp89, byte_range_80_9d);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_92_byte_range_80_9d);
            r10000_10ffff_tmp90 = simd_andc(r10000_10ffff_tmp43, tmp14);
            byte_94 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp90);
            sequence_f0_90_94 = simd_and(sequence_f0_90_adv, byte_94);
            r10000_10ffff_tmp91 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp92 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp91);
            byte_range_80_a7 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp92);
            carryQ.cq[213] = carryout2carry(pablo_blk_Advance(sequence_f0_90_94, carryQ.get_carry_in(213), r10000_10ffff_tmp93));
            sequence_f0_90_94_byte_range_80_a7 = simd_and(r10000_10ffff_tmp93, byte_range_80_a7);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_94_byte_range_80_a7);
            byte_95 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp44);
            sequence_f0_90_95 = simd_and(sequence_f0_90_adv, byte_95);
            r10000_10ffff_tmp94 = simd_or(basis_bits.bit_3, tmp13);
            r10000_10ffff_tmp95 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp94);
            byte_range_80_a3 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp95);
            carryQ.cq[214] = carryout2carry(pablo_blk_Advance(sequence_f0_90_95, carryQ.get_carry_in(214), r10000_10ffff_tmp96));
            sequence_f0_90_95_byte_range_80_a3 = simd_and(r10000_10ffff_tmp96, byte_range_80_a3);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_95_byte_range_80_a3);
            r10000_10ffff_tmp97 = simd_andc(r10000_10ffff_tmp54, tmp14);
            byte_98 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp97);
            sequence_f0_90_98 = simd_and(sequence_f0_90_adv, byte_98);
            carryQ.cq[215] = carryout2carry(pablo_blk_Advance(sequence_f0_90_98, carryQ.get_carry_in(215), r10000_10ffff_tmp98));
            sequence_f0_90_98_byte_range_80_bf = simd_and(r10000_10ffff_tmp98, byte_range_80_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_98_byte_range_80_bf);
            byte_9c = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp67);
            sequence_f0_90_9c = simd_and(sequence_f0_90_adv, byte_9c);
            r10000_10ffff_tmp99 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp9);
            r10000_10ffff_tmp100 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp99);
            byte_range_80_b6 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp100);
            carryQ.cq[216] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9c, carryQ.get_carry_in(216), r10000_10ffff_tmp101));
            sequence_f0_90_9c_byte_range_80_b6 = simd_and(r10000_10ffff_tmp101, byte_range_80_b6);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_9c_byte_range_80_b6);
            byte_9d = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp52);
            sequence_f0_90_9d = simd_and(sequence_f0_90_adv, byte_9d);
            r10000_10ffff_tmp102 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp29);
            r10000_10ffff_tmp103 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp102);
            byte_range_80_95 = simd_andc(r10000_10ffff_tmp56, r10000_10ffff_tmp103);
            carryQ.cq[217] = carryout2carry(pablo_blk_Advance(sequence_f0_90_9d, carryQ.get_carry_in(217), r10000_10ffff_tmp104));
            sequence_f0_90_9d_byte_range_80_95 = simd_and(r10000_10ffff_tmp104, byte_range_80_95);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_9d_byte_range_80_95);
            byte_a0 = r10000_10ffff_tmp65;
            sequence_f0_90_a0 = simd_and(sequence_f0_90_adv, byte_a0);
            r10000_10ffff_tmp105 = simd_andc(r10000_10ffff_tmp38, basis_bits.bit_4);
            byte_range_80_85 = simd_andc(r10000_10ffff_tmp105, r10000_10ffff_tmp29);
            carryQ.cq[218] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a0, carryQ.get_carry_in(218), r10000_10ffff_tmp106));
            sequence_f0_90_a0_byte_range_80_85 = simd_and(r10000_10ffff_tmp106, byte_range_80_85);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_a0_byte_range_80_85);
            byte_a1 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp28);
            sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
            carryQ.cq[219] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(219), r10000_10ffff_tmp107));
            sequence_f0_90_a1_byte_range_80_95 = simd_and(r10000_10ffff_tmp107, byte_range_80_95);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_a1_byte_range_80_95);
            byte_a2 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp35);
            sequence_f0_90_a2 = simd_and(sequence_f0_90_adv, byte_a2);
            r10000_10ffff_tmp108 = simd_and(basis_bits.bit_3, tmp22);
            byte_range_80_9e = simd_andc(r10000_10ffff_tmp56, r10000_10ffff_tmp108);
            carryQ.cq[220] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a2, carryQ.get_carry_in(220), r10000_10ffff_tmp109));
            sequence_f0_90_a2_byte_range_80_9e = simd_and(r10000_10ffff_tmp109, byte_range_80_9e);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_a2_byte_range_80_9e);
            byte_a4 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp90);
            sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
            carryQ.cq[221] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(221), r10000_10ffff_tmp110));
            sequence_f0_90_a4_byte_range_80_95 = simd_and(r10000_10ffff_tmp110, byte_range_80_95);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_a4_byte_range_80_95);
            r10000_10ffff_tmp111 = simd_and(r10000_10ffff_tmp43, r10000_10ffff_tmp34);
            byte_a6 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp111);
            sequence_f0_90_a6 = simd_and(sequence_f0_90_adv, byte_a6);
            r10000_10ffff_tmp112 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
            r10000_10ffff_tmp113 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp112);
            byte_range_80_b7 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp113);
            carryQ.cq[222] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a6, carryQ.get_carry_in(222), r10000_10ffff_tmp114));
            sequence_f0_90_a6_byte_range_80_b7 = simd_and(r10000_10ffff_tmp114, byte_range_80_b7);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_a6_byte_range_80_b7);
            byte_a8 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp97);
            sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
            byte_range_80_83 = simd_andc(r10000_10ffff_tmp38, tmp13);
            carryQ.cq[223] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(223), r10000_10ffff_tmp115));
            sequence_f0_90_a8_byte_range_80_83 = simd_and(r10000_10ffff_tmp115, byte_range_80_83);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_a8_byte_range_80_83);
            r10000_10ffff_tmp116 = simd_and(r10000_10ffff_tmp54, r10000_10ffff_tmp27);
            byte_a9 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp116);
            sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
            byte_range_a0_bc = simd_andc(r10000_10ffff_tmp59, r10000_10ffff_tmp57);
            carryQ.cq[224] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(224), r10000_10ffff_tmp117));
            sequence_f0_90_a9_byte_range_a0_bc = simd_and(r10000_10ffff_tmp117, byte_range_a0_bc);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_a9_byte_range_a0_bc);
            byte_aa = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp55);
            sequence_f0_90_aa = simd_and(sequence_f0_90_adv, byte_aa);
            byte_range_80_9c = r10000_10ffff_tmp58;
            carryQ.cq[225] = carryout2carry(pablo_blk_Advance(sequence_f0_90_aa, carryQ.get_carry_in(225), r10000_10ffff_tmp118));
            sequence_f0_90_aa_byte_range_80_9c = simd_and(r10000_10ffff_tmp118, byte_range_80_9c);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_aa_byte_range_80_9c);
            byte_ab = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp61);
            sequence_f0_90_ab = simd_and(sequence_f0_90_adv, byte_ab);
            byte_range_80_87 = r10000_10ffff_tmp105;
            carryQ.cq[226] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ab, carryQ.get_carry_in(226), r10000_10ffff_tmp119));
            sequence_f0_90_ab_byte_range_80_87 = simd_and(r10000_10ffff_tmp119, byte_range_80_87);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_ab_byte_range_80_87);
            byte_ac = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp67);
            sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
            r10000_10ffff_tmp120 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp103);
            byte_range_80_b5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp120);
            carryQ.cq[227] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(227), r10000_10ffff_tmp121));
            sequence_f0_90_ac_byte_range_80_b5 = simd_and(r10000_10ffff_tmp121, byte_range_80_b5);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_ac_byte_range_80_b5);
            byte_ad = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp52);
            sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
            carryQ.cq[228] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(228), r10000_10ffff_tmp122));
            sequence_f0_90_ad_byte_range_80_95 = simd_and(r10000_10ffff_tmp122, byte_range_80_95);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_ad_byte_range_80_95);
            byte_ae = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp75);
            sequence_f0_90_ae = simd_and(sequence_f0_90_adv, byte_ae);
            r10000_10ffff_tmp123 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp87);
            byte_range_80_91 = simd_andc(r10000_10ffff_tmp56, r10000_10ffff_tmp123);
            carryQ.cq[229] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(229), r10000_10ffff_tmp124));
            sequence_f0_90_ae_byte_range_80_91 = simd_and(r10000_10ffff_tmp124, byte_range_80_91);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_ae_byte_range_80_91);
            byte_b0 = simd_andc(r10000_10ffff_tmp51, tmp15);
            sequence_f0_90_b0 = simd_and(sequence_f0_90_adv, byte_b0);
            carryQ.cq[230] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b0, carryQ.get_carry_in(230), r10000_10ffff_tmp125));
            sequence_f0_90_b0_byte_range_80_bf = simd_and(r10000_10ffff_tmp125, byte_range_80_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_b0_byte_range_80_bf);
            byte_b1 = simd_and(r10000_10ffff_tmp51, r10000_10ffff_tmp28);
            sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
            r10000_10ffff_tmp126 = simd_or(basis_bits.bit_5, tmp14);
            r10000_10ffff_tmp127 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp126);
            byte_range_80_88 = simd_andc(r10000_10ffff_tmp38, r10000_10ffff_tmp127);
            carryQ.cq[231] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b1, carryQ.get_carry_in(231), r10000_10ffff_tmp128));
            sequence_f0_90_b1_byte_range_80_88 = simd_and(r10000_10ffff_tmp128, byte_range_80_88);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_90_b1_byte_range_80_88);
            byte_91 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp28);
            sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
            carryQ.cq[232] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(232), r10000_10ffff_tmp129));
            sequence_f0_91_80 = simd_and(r10000_10ffff_tmp129, byte_80);
            sequence_f0_91_adv = r10000_10ffff_tmp129;
            carryQ.cq[233] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(233), sequence_f0_91_80_adv));
            r10000_10ffff_tmp130 = simd_and(sequence_f0_91_80_adv, byte_range_80_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp130);
            sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
            r10000_10ffff_tmp131 = simd_andc(byte_range_80_87, r10000_10ffff_tmp8);
            r10000_10ffff_tmp132 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp102);
            r10000_10ffff_tmp133 = simd_or(r10000_10ffff_tmp131, r10000_10ffff_tmp132);
            r10000_10ffff_tmp134 = simd_and(r10000_10ffff_tmp51, tmp22);
            cc_range_11040_1107f_4 = simd_or(r10000_10ffff_tmp133, r10000_10ffff_tmp134);
            carryQ.cq[234] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(234), sequence_f0_91_81_adv));
            r10000_10ffff_tmp135 = simd_and(sequence_f0_91_81_adv, cc_range_11040_1107f_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp135);
            sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
            carryQ.cq[235] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(235), sequence_f0_91_82_adv));
            r10000_10ffff_tmp136 = simd_and(sequence_f0_91_82_adv, byte_range_80_ba);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp136);
            sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
            r10000_10ffff_tmp137 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp127);
            r10000_10ffff_tmp138 = simd_not(r10000_10ffff_tmp137);
            r10000_10ffff_tmp139 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp138), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp140 = simd_and(byte_range_80_bf, r10000_10ffff_tmp139);
            r10000_10ffff_tmp141 = simd_andc(r10000_10ffff_tmp51, tmp5);
            cc_range_110d0_110f0_4 = simd_or(r10000_10ffff_tmp140, r10000_10ffff_tmp141);
            carryQ.cq[236] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(236), sequence_f0_91_83_adv));
            r10000_10ffff_tmp142 = simd_and(sequence_f0_91_83_adv, cc_range_110d0_110f0_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp142);
            byte_84 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp90);
            sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
            r10000_10ffff_tmp143 = simd_and(r10000_10ffff_tmp51, r10000_10ffff_tmp102);
            cc_range_11100_11136_4 = simd_or(byte_range_80_b4, r10000_10ffff_tmp143);
            carryQ.cq[237] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(237), sequence_f0_91_84_adv));
            r10000_10ffff_tmp144 = simd_and(sequence_f0_91_84_adv, cc_range_11100_11136_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp144);
            sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
            r10000_10ffff_tmp145 = simd_and(basis_bits.bit_3, tmp13);
            r10000_10ffff_tmp146 = simd_not(r10000_10ffff_tmp145);
            r10000_10ffff_tmp147 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp146), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            r10000_10ffff_tmp148 = simd_and(byte_range_80_bf, r10000_10ffff_tmp147);
            r10000_10ffff_tmp149 = simd_and(r10000_10ffff_tmp51, r10000_10ffff_tmp111);
            cc_range_11150_11176_4 = simd_or(r10000_10ffff_tmp148, r10000_10ffff_tmp149);
            carryQ.cq[238] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(238), sequence_f0_91_85_adv));
            r10000_10ffff_tmp150 = simd_and(sequence_f0_91_85_adv, cc_range_11150_11176_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp150);
            byte_86 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp111);
            sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
            carryQ.cq[239] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(239), sequence_f0_91_86_adv));
            r10000_10ffff_tmp151 = simd_and(sequence_f0_91_86_adv, byte_range_80_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp151);
            sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
            r10000_10ffff_tmp152 = simd_andc(byte_range_80_87, r10000_10ffff_tmp45);
            r10000_10ffff_tmp153 = simd_andc(r10000_10ffff_tmp37, tmp11);
            cc_range_111c0_111d0_4 = simd_or(r10000_10ffff_tmp152, r10000_10ffff_tmp153);
            carryQ.cq[240] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(240), sequence_f0_91_87_adv));
            r10000_10ffff_tmp154 = simd_and(sequence_f0_91_87_adv, cc_range_111c0_111d0_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp154);
            byte_88 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp97);
            sequence_f0_91_88 = simd_and(sequence_f0_91_adv, byte_88);
            r10000_10ffff_tmp155 = simd_not(r10000_10ffff_tmp112);
            r10000_10ffff_tmp156 = simd_or(tmp13, tmp9);
            r10000_10ffff_tmp157 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp156);
            r10000_10ffff_tmp158 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp155), simd_andc(r10000_10ffff_tmp157, basis_bits.bit_2));
            r10000_10ffff_tmp159 = simd_and(byte_range_80_bf, r10000_10ffff_tmp158);
            cc_range_11200_11213_4 = simd_or(byte_range_80_91, r10000_10ffff_tmp159);
            carryQ.cq[241] = carryout2carry(pablo_blk_Advance(sequence_f0_91_88, carryQ.get_carry_in(241), sequence_f0_91_88_adv));
            r10000_10ffff_tmp160 = simd_and(sequence_f0_91_88_adv, cc_range_11200_11213_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp160);
            sequence_f0_91_8a = simd_and(sequence_f0_91_adv, byte_8a);
            byte_range_b0_bf = r10000_10ffff_tmp51;
            carryQ.cq[242] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8a, carryQ.get_carry_in(242), sequence_f0_91_8a_adv));
            r10000_10ffff_tmp161 = simd_and(sequence_f0_91_8a_adv, byte_range_b0_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp161);
            sequence_f0_91_8b = simd_and(sequence_f0_91_adv, byte_8b);
            r10000_10ffff_tmp162 = simd_or(basis_bits.bit_3, tmp11);
            r10000_10ffff_tmp163 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp162);
            r10000_10ffff_tmp164 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp163);
            r10000_10ffff_tmp165 = simd_andc(byte_range_b0_bf, tmp5);
            cc_range_112c0_112f0_4 = simd_or(r10000_10ffff_tmp164, r10000_10ffff_tmp165);
            carryQ.cq[243] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8b, carryQ.get_carry_in(243), sequence_f0_91_8b_adv));
            r10000_10ffff_tmp166 = simd_and(sequence_f0_91_8b_adv, cc_range_112c0_112f0_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp166);
            sequence_f0_91_8c = simd_and(sequence_f0_91_adv, byte_8c);
            r10000_10ffff_tmp167 = simd_and(byte_range_80_83, tmp14);
            r10000_10ffff_tmp168 = simd_xor(basis_bits.bit_4, r10000_10ffff_tmp45);
            r10000_10ffff_tmp169 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp168);
            r10000_10ffff_tmp170 = simd_or(r10000_10ffff_tmp167, r10000_10ffff_tmp169);
            r10000_10ffff_tmp171 = simd_not(tmp15);
            r10000_10ffff_tmp172 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp171), simd_andc(tmp22, basis_bits.bit_3));
            r10000_10ffff_tmp173 = simd_and(r10000_10ffff_tmp56, r10000_10ffff_tmp172);
            r10000_10ffff_tmp174 = simd_or(r10000_10ffff_tmp170, r10000_10ffff_tmp173);
            r10000_10ffff_tmp175 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp138), simd_andc(r10000_10ffff_tmp157, basis_bits.bit_2));
            r10000_10ffff_tmp176 = simd_and(byte_range_80_bf, r10000_10ffff_tmp175);
            r10000_10ffff_tmp177 = simd_or(r10000_10ffff_tmp174, r10000_10ffff_tmp176);
            r10000_10ffff_tmp178 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp171), simd_andc(tmp5, basis_bits.bit_3));
            r10000_10ffff_tmp179 = simd_and(r10000_10ffff_tmp59, r10000_10ffff_tmp178);
            r10000_10ffff_tmp180 = simd_or(r10000_10ffff_tmp177, r10000_10ffff_tmp179);
            r10000_10ffff_tmp181 = simd_andc(basis_bits.bit_6, tmp13);
            r10000_10ffff_tmp182 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp181);
            r10000_10ffff_tmp183 = simd_or(r10000_10ffff_tmp180, r10000_10ffff_tmp182);
            r10000_10ffff_tmp184 = simd_not(tmp4);
            r10000_10ffff_tmp185 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp184), simd_andc(r10000_10ffff_tmp45, basis_bits.bit_4));
            r10000_10ffff_tmp186 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp185);
            r10000_10ffff_tmp187 = simd_or(r10000_10ffff_tmp183, r10000_10ffff_tmp186);
            r10000_10ffff_tmp188 = simd_and(byte_range_b0_bf, tmp21);
            cc_range_11301_1133c_4 = simd_or(r10000_10ffff_tmp187, r10000_10ffff_tmp188);
            carryQ.cq[244] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8c, carryQ.get_carry_in(244), sequence_f0_91_8c_adv));
            r10000_10ffff_tmp189 = simd_and(sequence_f0_91_8c_adv, cc_range_11301_1133c_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp189);
            sequence_f0_91_8d = simd_and(sequence_f0_91_adv, byte_8d);
            r10000_10ffff_tmp190 = simd_not(r10000_10ffff_tmp126);
            r10000_10ffff_tmp191 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp190), simd_andc(r10000_10ffff_tmp8, basis_bits.bit_4));
            r10000_10ffff_tmp192 = simd_and(r10000_10ffff_tmp38, r10000_10ffff_tmp191);
            r10000_10ffff_tmp193 = simd_or(r10000_10ffff_tmp152, r10000_10ffff_tmp192);
            r10000_10ffff_tmp194 = simd_and(r10000_10ffff_tmp38, basis_bits.bit_4);
            r10000_10ffff_tmp195 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp83), simd_andc(tmp9, basis_bits.bit_5));
            r10000_10ffff_tmp196 = simd_and(r10000_10ffff_tmp194, r10000_10ffff_tmp195);
            r10000_10ffff_tmp197 = simd_or(r10000_10ffff_tmp193, r10000_10ffff_tmp196);
            r10000_10ffff_tmp198 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp50);
            r10000_10ffff_tmp199 = simd_or(r10000_10ffff_tmp197, r10000_10ffff_tmp198);
            r10000_10ffff_tmp200 = simd_not(r10000_10ffff_tmp94);
            r10000_10ffff_tmp201 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp200), simd_andc(r10000_10ffff_tmp57, basis_bits.bit_2));
            r10000_10ffff_tmp202 = simd_and(byte_range_80_bf, r10000_10ffff_tmp201);
            r10000_10ffff_tmp203 = simd_or(r10000_10ffff_tmp199, r10000_10ffff_tmp202);
            r10000_10ffff_tmp204 = simd_not(r10000_10ffff_tmp45);
            r10000_10ffff_tmp205 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp204), simd_andc(r10000_10ffff_tmp29, basis_bits.bit_4));
            r10000_10ffff_tmp206 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp205);
            r10000_10ffff_tmp207 = simd_or(r10000_10ffff_tmp203, r10000_10ffff_tmp206);
            r10000_10ffff_tmp208 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
            r10000_10ffff_tmp209 = simd_andc(r10000_10ffff_tmp208, r10000_10ffff_tmp45);
            cc_range_11340_11370_4 = simd_or(r10000_10ffff_tmp207, r10000_10ffff_tmp209);
            carryQ.cq[245] = carryout2carry(pablo_blk_Advance(sequence_f0_91_8d, carryQ.get_carry_in(245), sequence_f0_91_8d_adv));
            r10000_10ffff_tmp210 = simd_and(sequence_f0_91_8d_adv, cc_range_11340_11370_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp210);
            sequence_f0_91_92 = simd_and(sequence_f0_91_adv, byte_92);
            carryQ.cq[246] = carryout2carry(pablo_blk_Advance(sequence_f0_91_92, carryQ.get_carry_in(246), sequence_f0_91_92_adv));
            r10000_10ffff_tmp211 = simd_and(sequence_f0_91_92_adv, byte_range_80_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp211);
            byte_93 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp39);
            sequence_f0_91_93 = simd_and(sequence_f0_91_adv, byte_93);
            r10000_10ffff_tmp212 = simd_andc(byte_range_80_87, r10000_10ffff_tmp29);
            r10000_10ffff_tmp213 = simd_or(r10000_10ffff_tmp212, byte_87);
            r10000_10ffff_tmp214 = simd_andc(r10000_10ffff_tmp37, tmp5);
            cc_range_114c0_114d0_4 = simd_or(r10000_10ffff_tmp213, r10000_10ffff_tmp214);
            carryQ.cq[247] = carryout2carry(pablo_blk_Advance(sequence_f0_91_93, carryQ.get_carry_in(247), sequence_f0_91_93_adv));
            r10000_10ffff_tmp215 = simd_and(sequence_f0_91_93_adv, cc_range_114c0_114d0_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp215);
            byte_96 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp111);
            sequence_f0_91_96 = simd_and(sequence_f0_91_adv, byte_96);
            r10000_10ffff_tmp216 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
            cc_range_11580_115b8_4 = simd_or(byte_range_80_b5, r10000_10ffff_tmp216);
            carryQ.cq[248] = carryout2carry(pablo_blk_Advance(sequence_f0_91_96, carryQ.get_carry_in(248), sequence_f0_91_96_adv));
            r10000_10ffff_tmp217 = simd_and(sequence_f0_91_96_adv, cc_range_11580_115b8_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp217);
            byte_97 = r10000_10ffff_tmp198;
            sequence_f0_91_97 = simd_and(sequence_f0_91_adv, byte_97);
            carryQ.cq[249] = carryout2carry(pablo_blk_Advance(sequence_f0_91_97, carryQ.get_carry_in(249), sequence_f0_91_97_adv));
            r10000_10ffff_tmp218 = simd_and(sequence_f0_91_97_adv, byte_80);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp218);
            sequence_f0_91_98 = simd_and(sequence_f0_91_adv, byte_98);
            carryQ.cq[250] = carryout2carry(pablo_blk_Advance(sequence_f0_91_98, carryQ.get_carry_in(250), sequence_f0_91_98_adv));
            r10000_10ffff_tmp219 = simd_and(sequence_f0_91_98_adv, byte_range_80_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp219);
            byte_99 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp116);
            sequence_f0_91_99 = simd_and(sequence_f0_91_adv, byte_99);
            r10000_10ffff_tmp220 = simd_andc(tmp15, r10000_10ffff_tmp90);
            r10000_10ffff_tmp221 = simd_andc(r10000_10ffff_tmp38, r10000_10ffff_tmp220);
            cc_range_11640_11650_4 = simd_or(r10000_10ffff_tmp221, r10000_10ffff_tmp214);
            carryQ.cq[251] = carryout2carry(pablo_blk_Advance(sequence_f0_91_99, carryQ.get_carry_in(251), sequence_f0_91_99_adv));
            r10000_10ffff_tmp222 = simd_and(sequence_f0_91_99_adv, cc_range_11640_11650_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp222);
            byte_9a = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp55);
            sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
            carryQ.cq[252] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(252), sequence_f0_91_9a_adv));
            r10000_10ffff_tmp223 = simd_and(sequence_f0_91_9a_adv, byte_range_80_b7);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp223);
            byte_9b = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp61);
            sequence_f0_91_9b = simd_and(sequence_f0_91_adv, byte_9b);
            byte_range_80_89 = simd_andc(r10000_10ffff_tmp38, tmp5);
            carryQ.cq[253] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9b, carryQ.get_carry_in(253), sequence_f0_91_9b_adv));
            r10000_10ffff_tmp224 = simd_and(sequence_f0_91_9b_adv, byte_range_80_89);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp224);
            sequence_f0_91_a2 = simd_and(sequence_f0_91_adv, byte_a2);
            byte_range_a0_bf = r10000_10ffff_tmp59;
            carryQ.cq[254] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a2, carryQ.get_carry_in(254), sequence_f0_91_a2_adv));
            r10000_10ffff_tmp225 = simd_and(sequence_f0_91_a2_adv, byte_range_a0_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp225);
            byte_a3 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp39);
            sequence_f0_91_a3 = simd_and(sequence_f0_91_adv, byte_a3);
            r10000_10ffff_tmp226 = simd_or(basis_bits.bit_3, tmp5);
            r10000_10ffff_tmp227 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp226);
            r10000_10ffff_tmp228 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp227);
            r10000_10ffff_tmp229 = simd_and(byte_range_b0_bf, tmp22);
            cc_range_118c0_118ff_4 = simd_or(r10000_10ffff_tmp228, r10000_10ffff_tmp229);
            carryQ.cq[255] = carryout2carry(pablo_blk_Advance(sequence_f0_91_a3, carryQ.get_carry_in(255), sequence_f0_91_a3_adv));
            r10000_10ffff_tmp230 = simd_and(sequence_f0_91_a3_adv, cc_range_118c0_118ff_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp230);
            sequence_f0_91_ab = simd_and(sequence_f0_91_adv, byte_ab);
            r10000_10ffff_tmp231 = simd_and(basis_bits.bit_3, r10000_10ffff_tmp127);
            r10000_10ffff_tmp232 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp231);
            byte_range_80_b8 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp232);
            carryQ.cq[256] = carryout2carry(pablo_blk_Advance(sequence_f0_91_ab, carryQ.get_carry_in(256), sequence_f0_91_ab_adv));
            r10000_10ffff_tmp233 = simd_and(sequence_f0_91_ab_adv, byte_range_80_b8);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp233);
            sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
            byte_range_80_8d = simd_andc(r10000_10ffff_tmp38, r10000_10ffff_tmp30);
            carryQ.cq[257] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(257), r10000_10ffff_tmp234));
            sequence_f0_92_byte_range_80_8d = simd_and(r10000_10ffff_tmp234, byte_range_80_8d);
            carryQ.cq[258] = carryout2carry(pablo_blk_Advance(sequence_f0_92_byte_range_80_8d, carryQ.get_carry_in(258), r10000_10ffff_tmp235));
            sequence_f0_92_byte_range_80_8d_sfx = simd_and(r10000_10ffff_tmp235, byte_range_80_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_92_byte_range_80_8d_sfx);
            sequence_f0_92_adv = r10000_10ffff_tmp234;
            sequence_f0_92_8e = simd_and(sequence_f0_92_adv, byte_8e);
            byte_range_80_98 = simd_andc(r10000_10ffff_tmp56, r10000_10ffff_tmp231);
            carryQ.cq[259] = carryout2carry(pablo_blk_Advance(sequence_f0_92_8e, carryQ.get_carry_in(259), r10000_10ffff_tmp236));
            sequence_f0_92_8e_byte_range_80_98 = simd_and(r10000_10ffff_tmp236, byte_range_80_98);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_92_8e_byte_range_80_98);
            sequence_f0_92_90 = simd_and(sequence_f0_92_adv, byte_90);
            carryQ.cq[260] = carryout2carry(pablo_blk_Advance(sequence_f0_92_90, carryQ.get_carry_in(260), r10000_10ffff_tmp237));
            sequence_f0_92_90_byte_range_80_bf = simd_and(r10000_10ffff_tmp237, byte_range_80_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_92_90_byte_range_80_bf);
            sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
            r10000_10ffff_tmp238 = simd_or(basis_bits.bit_3, tmp22);
            r10000_10ffff_tmp239 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp238);
            byte_range_80_ae = simd_andc(byte_range_80_bf, r10000_10ffff_tmp239);
            carryQ.cq[261] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(261), r10000_10ffff_tmp240));
            sequence_f0_92_91_byte_range_80_ae = simd_and(r10000_10ffff_tmp240, byte_range_80_ae);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_92_91_byte_range_80_ae);
            sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
            byte_range_80_8f = r10000_10ffff_tmp38;
            carryQ.cq[262] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(262), r10000_10ffff_tmp241));
            sequence_f0_93_byte_range_80_8f = simd_and(r10000_10ffff_tmp241, byte_range_80_8f);
            carryQ.cq[263] = carryout2carry(pablo_blk_Advance(sequence_f0_93_byte_range_80_8f, carryQ.get_carry_in(263), r10000_10ffff_tmp242));
            sequence_f0_93_byte_range_80_8f_sfx = simd_and(r10000_10ffff_tmp242, byte_range_80_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_93_byte_range_80_8f_sfx);
            sequence_f0_93_adv = r10000_10ffff_tmp241;
            sequence_f0_93_90 = simd_and(sequence_f0_93_adv, byte_90);
            carryQ.cq[264] = carryout2carry(pablo_blk_Advance(sequence_f0_93_90, carryQ.get_carry_in(264), r10000_10ffff_tmp243));
            sequence_f0_93_90_byte_range_80_ae = simd_and(r10000_10ffff_tmp243, byte_range_80_ae);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_93_90_byte_range_80_ae);
            sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
            byte_range_a0_a7 = simd_andc(r10000_10ffff_tmp64, basis_bits.bit_4);
            carryQ.cq[265] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(265), r10000_10ffff_tmp244));
            sequence_f0_96_byte_range_a0_a7 = simd_and(r10000_10ffff_tmp244, byte_range_a0_a7);
            carryQ.cq[266] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_a0_a7, carryQ.get_carry_in(266), r10000_10ffff_tmp245));
            sequence_f0_96_byte_range_a0_a7_sfx = simd_and(r10000_10ffff_tmp245, byte_range_80_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_96_byte_range_a0_a7_sfx);
            sequence_f0_96_adv = r10000_10ffff_tmp244;
            sequence_f0_96_a8 = simd_and(sequence_f0_96_adv, byte_a8);
            carryQ.cq[267] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a8, carryQ.get_carry_in(267), r10000_10ffff_tmp246));
            sequence_f0_96_a8_byte_range_80_b8 = simd_and(r10000_10ffff_tmp246, byte_range_80_b8);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_96_a8_byte_range_80_b8);
            sequence_f0_96_a9 = simd_and(sequence_f0_96_adv, byte_a9);
            carryQ.cq[268] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a9, carryQ.get_carry_in(268), r10000_10ffff_tmp247));
            sequence_f0_96_a9_byte_range_80_9e = simd_and(r10000_10ffff_tmp247, byte_range_80_9e);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_96_a9_byte_range_80_9e);
            sequence_f0_96_ab = simd_and(sequence_f0_96_adv, byte_ab);
            r10000_10ffff_tmp248 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp76);
            r10000_10ffff_tmp249 = simd_not(r10000_10ffff_tmp248);
            r10000_10ffff_tmp250 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp249), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
            byte_range_90_ad = simd_and(byte_range_80_bf, r10000_10ffff_tmp250);
            carryQ.cq[269] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ab, carryQ.get_carry_in(269), r10000_10ffff_tmp251));
            sequence_f0_96_ab_byte_range_90_ad = simd_and(r10000_10ffff_tmp251, byte_range_90_ad);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_96_ab_byte_range_90_ad);
            sequence_f0_96_ac = simd_and(sequence_f0_96_adv, byte_ac);
            carryQ.cq[270] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ac, carryQ.get_carry_in(270), r10000_10ffff_tmp252));
            sequence_f0_96_ac_byte_range_80_b6 = simd_and(r10000_10ffff_tmp252, byte_range_80_b6);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_96_ac_byte_range_80_b6);
            sequence_f0_96_ad = simd_and(sequence_f0_96_adv, byte_ad);
            carryQ.cq[271] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ad, carryQ.get_carry_in(271), r10000_10ffff_tmp253));
            sequence_f0_96_ad_byte_range_80_83 = simd_and(r10000_10ffff_tmp253, byte_range_80_83);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_96_ad_byte_range_80_83);
            sequence_f0_96_ae = simd_and(sequence_f0_96_adv, byte_ae);
            carryQ.cq[272] = carryout2carry(pablo_blk_Advance(sequence_f0_96_ae, carryQ.get_carry_in(272), r10000_10ffff_tmp254));
            sequence_f0_96_ae_byte_range_80_8f = simd_and(r10000_10ffff_tmp254, byte_range_80_8f);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_96_ae_byte_range_80_8f);
            byte_bc = simd_and(byte_range_b0_bf, r10000_10ffff_tmp67);
            sequence_f0_96_bc = simd_and(sequence_f0_96_adv, byte_bc);
            carryQ.cq[273] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bc, carryQ.get_carry_in(273), r10000_10ffff_tmp255));
            sequence_f0_96_bc_byte_range_80_bf = simd_and(r10000_10ffff_tmp255, byte_range_80_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_96_bc_byte_range_80_bf);
            sequence_f0_96_bd = simd_and(sequence_f0_96_adv, byte_bd);
            r10000_10ffff_tmp256 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
            byte_range_80_84 = simd_andc(r10000_10ffff_tmp256, r10000_10ffff_tmp45);
            carryQ.cq[274] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bd, carryQ.get_carry_in(274), r10000_10ffff_tmp257));
            sequence_f0_96_bd_byte_range_80_84 = simd_and(r10000_10ffff_tmp257, byte_range_80_84);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_96_bd_byte_range_80_84);
            byte_be = simd_and(byte_range_b0_bf, r10000_10ffff_tmp75);
            sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
            byte_range_8f_9f = simd_and(r10000_10ffff_tmp56, r10000_10ffff_tmp238);
            carryQ.cq[275] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(275), r10000_10ffff_tmp258));
            sequence_f0_96_be_byte_range_8f_9f = simd_and(r10000_10ffff_tmp258, byte_range_8f_9f);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_96_be_byte_range_8f_9f);
            sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
            carryQ.cq[276] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(276), r10000_10ffff_tmp259));
            sequence_f0_9b_80 = simd_and(r10000_10ffff_tmp259, byte_80);
            sequence_f0_9b_adv = r10000_10ffff_tmp259;
            byte_range_80_81 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp87);
            carryQ.cq[277] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_80, carryQ.get_carry_in(277), sequence_f0_9b_80_adv));
            r10000_10ffff_tmp260 = simd_and(sequence_f0_9b_80_adv, byte_range_80_81);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp260);
            sequence_f0_9b_b0 = simd_and(sequence_f0_9b_adv, byte_b0);
            carryQ.cq[278] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b0, carryQ.get_carry_in(278), sequence_f0_9b_b0_adv));
            r10000_10ffff_tmp261 = simd_and(sequence_f0_9b_b0_adv, byte_range_80_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp261);
            sequence_f0_9b_b1 = simd_and(sequence_f0_9b_adv, byte_b1);
            r10000_10ffff_tmp262 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp45);
            r10000_10ffff_tmp263 = simd_andc(byte_range_b0_bf, r10000_10ffff_tmp262);
            cc_range_1bc40_1bc70_4 = simd_or(r10000_10ffff_tmp164, r10000_10ffff_tmp263);
            carryQ.cq[279] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b1, carryQ.get_carry_in(279), sequence_f0_9b_b1_adv));
            r10000_10ffff_tmp264 = simd_and(sequence_f0_9b_b1_adv, cc_range_1bc40_1bc70_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp264);
            byte_b2 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp35);
            sequence_f0_9b_b2 = simd_and(sequence_f0_9b_adv, byte_b2);
            r10000_10ffff_tmp265 = simd_andc(byte_range_80_8f, r10000_10ffff_tmp127);
            r10000_10ffff_tmp266 = simd_or(r10000_10ffff_tmp265, r10000_10ffff_tmp214);
            r10000_10ffff_tmp267 = simd_and(r10000_10ffff_tmp37, tmp21);
            r10000_10ffff_tmp268 = simd_xor(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp269 = simd_and(r10000_10ffff_tmp267, r10000_10ffff_tmp268);
            cc_range_1bc80_1bc9d_4 = simd_or(r10000_10ffff_tmp266, r10000_10ffff_tmp269);
            carryQ.cq[280] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_b2, carryQ.get_carry_in(280), sequence_f0_9b_b2_adv));
            r10000_10ffff_tmp270 = simd_and(sequence_f0_9b_b2_adv, cc_range_1bc80_1bc9d_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp270);
            sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
            carryQ.cq[281] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(281), r10000_10ffff_tmp271));
            sequence_f0_9d_85 = simd_and(r10000_10ffff_tmp271, byte_85);
            sequence_f0_9d_adv = r10000_10ffff_tmp271;
            r10000_10ffff_tmp272 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp185);
            r10000_10ffff_tmp273 = simd_not(r10000_10ffff_tmp156);
            r10000_10ffff_tmp274 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp273), simd_andc(r10000_10ffff_tmp12, basis_bits.bit_3));
            r10000_10ffff_tmp275 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp274);
            r10000_10ffff_tmp276 = simd_or(r10000_10ffff_tmp272, r10000_10ffff_tmp275);
            r10000_10ffff_tmp277 = simd_and(r10000_10ffff_tmp216, tmp10);
            cc_range_1d165_1d17b_4 = simd_or(r10000_10ffff_tmp276, r10000_10ffff_tmp277);
            carryQ.cq[282] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(282), sequence_f0_9d_85_adv));
            r10000_10ffff_tmp278 = simd_and(sequence_f0_9d_85_adv, cc_range_1d165_1d17b_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp278);
            sequence_f0_9d_86 = simd_and(sequence_f0_9d_adv, byte_86);
            r10000_10ffff_tmp279 = simd_andc(byte_range_80_8f, tmp13);
            r10000_10ffff_tmp280 = simd_andc(r10000_10ffff_tmp279, tmp9);
            r10000_10ffff_tmp281 = simd_not(basis_bits.bit_5);
            r10000_10ffff_tmp282 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp281), simd_andc(r10000_10ffff_tmp45, basis_bits.bit_4));
            r10000_10ffff_tmp283 = simd_and(byte_range_80_8f, r10000_10ffff_tmp282);
            r10000_10ffff_tmp284 = simd_or(r10000_10ffff_tmp280, r10000_10ffff_tmp283);
            r10000_10ffff_tmp285 = simd_and(r10000_10ffff_tmp64, basis_bits.bit_4);
            r10000_10ffff_tmp286 = simd_xor(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp287 = simd_and(r10000_10ffff_tmp285, r10000_10ffff_tmp286);
            cc_range_1d180_1d1aa_4 = simd_or(r10000_10ffff_tmp284, r10000_10ffff_tmp287);
            carryQ.cq[283] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_86, carryQ.get_carry_in(283), sequence_f0_9d_86_adv));
            r10000_10ffff_tmp288 = simd_and(sequence_f0_9d_86_adv, cc_range_1d180_1d1aa_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp288);
            byte_89 = simd_and(byte_range_80_8f, r10000_10ffff_tmp116);
            sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
            r10000_10ffff_tmp289 = simd_not(tmp14);
            r10000_10ffff_tmp290 = simd_or(simd_and(basis_bits.bit_5, r10000_10ffff_tmp289), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
            byte_range_82_84 = simd_and(r10000_10ffff_tmp256, r10000_10ffff_tmp290);
            carryQ.cq[284] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_89, carryQ.get_carry_in(284), sequence_f0_9d_89_adv));
            r10000_10ffff_tmp291 = simd_and(sequence_f0_9d_89_adv, byte_range_82_84);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp291);
            sequence_f0_9d_90 = simd_and(sequence_f0_9d_adv, byte_90);
            carryQ.cq[285] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(285), sequence_f0_9d_90_adv));
            r10000_10ffff_tmp292 = simd_and(sequence_f0_9d_90_adv, byte_range_80_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp292);
            sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
            r10000_10ffff_tmp293 = simd_andc(r10000_10ffff_tmp56, r10000_10ffff_tmp47);
            r10000_10ffff_tmp294 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp103);
            r10000_10ffff_tmp295 = simd_and(byte_range_80_bf, r10000_10ffff_tmp294);
            cc_range_1d440_1d456_4 = simd_or(r10000_10ffff_tmp293, r10000_10ffff_tmp295);
            carryQ.cq[286] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(286), sequence_f0_9d_91_adv));
            r10000_10ffff_tmp296 = simd_and(sequence_f0_9d_91_adv, cc_range_1d440_1d456_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp296);
            sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
            r10000_10ffff_tmp297 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp76);
            r10000_10ffff_tmp298 = simd_or(byte_range_80_9c, r10000_10ffff_tmp297);
            r10000_10ffff_tmp299 = simd_or(r10000_10ffff_tmp298, byte_a2);
            r10000_10ffff_tmp300 = simd_and(r10000_10ffff_tmp64, r10000_10ffff_tmp43);
            r10000_10ffff_tmp301 = simd_and(r10000_10ffff_tmp300, r10000_10ffff_tmp268);
            r10000_10ffff_tmp302 = simd_or(r10000_10ffff_tmp299, r10000_10ffff_tmp301);
            r10000_10ffff_tmp303 = simd_xor(basis_bits.bit_5, tmp14);
            r10000_10ffff_tmp304 = simd_and(r10000_10ffff_tmp285, r10000_10ffff_tmp303);
            r10000_10ffff_tmp305 = simd_or(r10000_10ffff_tmp302, r10000_10ffff_tmp304);
            r10000_10ffff_tmp306 = simd_not(tmp5);
            r10000_10ffff_tmp307 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp306), simd_andc(r10000_10ffff_tmp76, basis_bits.bit_3));
            r10000_10ffff_tmp308 = simd_and(byte_range_a0_bf, r10000_10ffff_tmp307);
            r10000_10ffff_tmp309 = simd_or(r10000_10ffff_tmp305, r10000_10ffff_tmp308);
            r10000_10ffff_tmp310 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp61);
            r10000_10ffff_tmp311 = simd_or(r10000_10ffff_tmp309, r10000_10ffff_tmp310);
            r10000_10ffff_tmp312 = simd_and(r10000_10ffff_tmp188, tmp14);
            cc_range_1d480_1d4bd_4 = simd_or(r10000_10ffff_tmp311, r10000_10ffff_tmp312);
            carryQ.cq[287] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(287), sequence_f0_9d_92_adv));
            r10000_10ffff_tmp313 = simd_and(sequence_f0_9d_92_adv, cc_range_1d480_1d4bd_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp313);
            sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
            r10000_10ffff_tmp314 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp46);
            r10000_10ffff_tmp315 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp314);
            r10000_10ffff_tmp316 = simd_and(byte_range_80_bf, r10000_10ffff_tmp315);
            cc_range_1d4c0_1d4c5_4 = simd_or(r10000_10ffff_tmp279, r10000_10ffff_tmp316);
            carryQ.cq[288] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(288), sequence_f0_9d_93_adv));
            r10000_10ffff_tmp317 = simd_and(sequence_f0_9d_93_adv, cc_range_1d4c0_1d4c5_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp317);
            sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
            r10000_10ffff_tmp318 = simd_andc(r10000_10ffff_tmp256, r10000_10ffff_tmp29);
            r10000_10ffff_tmp319 = simd_not(tmp10);
            r10000_10ffff_tmp320 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp319), simd_andc(r10000_10ffff_tmp8, basis_bits.bit_4));
            r10000_10ffff_tmp321 = simd_and(byte_range_80_8f, r10000_10ffff_tmp320);
            r10000_10ffff_tmp322 = simd_or(r10000_10ffff_tmp318, r10000_10ffff_tmp321);
            r10000_10ffff_tmp323 = simd_not(r10000_10ffff_tmp46);
            r10000_10ffff_tmp324 = simd_or(simd_and(basis_bits.bit_3, r10000_10ffff_tmp323), simd_andc(r10000_10ffff_tmp12, basis_bits.bit_3));
            r10000_10ffff_tmp325 = simd_and(r10000_10ffff_tmp56, r10000_10ffff_tmp324);
            r10000_10ffff_tmp326 = simd_or(r10000_10ffff_tmp322, r10000_10ffff_tmp325);
            r10000_10ffff_tmp327 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp205);
            r10000_10ffff_tmp328 = simd_or(r10000_10ffff_tmp326, r10000_10ffff_tmp327);
            r10000_10ffff_tmp329 = simd_and(basis_bits.bit_3, tmp5);
            r10000_10ffff_tmp330 = simd_not(r10000_10ffff_tmp329);
            r10000_10ffff_tmp331 = simd_or(simd_and(basis_bits.bit_2, r10000_10ffff_tmp330), simd_andc(r10000_10ffff_tmp77, basis_bits.bit_2));
            r10000_10ffff_tmp332 = simd_and(byte_range_80_bf, r10000_10ffff_tmp331);
            r10000_10ffff_tmp333 = simd_or(r10000_10ffff_tmp328, r10000_10ffff_tmp332);
            r10000_10ffff_tmp334 = simd_xor(basis_bits.bit_5, tmp9);
            r10000_10ffff_tmp335 = simd_and(r10000_10ffff_tmp216, r10000_10ffff_tmp334);
            cc_range_1d500_1d53b_4 = simd_or(r10000_10ffff_tmp333, r10000_10ffff_tmp335);
            carryQ.cq[289] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(289), sequence_f0_9d_94_adv));
            r10000_10ffff_tmp336 = simd_and(sequence_f0_9d_94_adv, cc_range_1d500_1d53b_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp336);
            sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
            r10000_10ffff_tmp337 = simd_and(byte_range_80_8f, r10000_10ffff_tmp111);
            r10000_10ffff_tmp338 = simd_or(byte_range_80_84, r10000_10ffff_tmp337);
            r10000_10ffff_tmp339 = simd_and(r10000_10ffff_tmp56, r10000_10ffff_tmp178);
            r10000_10ffff_tmp340 = simd_or(r10000_10ffff_tmp338, r10000_10ffff_tmp339);
            r10000_10ffff_tmp341 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp123);
            r10000_10ffff_tmp342 = simd_and(byte_range_80_bf, r10000_10ffff_tmp341);
            cc_range_1d540_1d552_4 = simd_or(r10000_10ffff_tmp340, r10000_10ffff_tmp342);
            carryQ.cq[290] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(290), sequence_f0_9d_95_adv));
            r10000_10ffff_tmp343 = simd_and(sequence_f0_9d_95_adv, cc_range_1d540_1d552_4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, r10000_10ffff_tmp343);
            r10000_10ffff_tmp344 = simd_or(simd_and(basis_bits.bit_4, r10000_10ffff_tmp184), simd_andc(r10000_10ffff_tmp29, basis_bits.bit_4));
            byte_range_96_99 = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp344);
            sequence_f0_9d_byte_range_96_99 = simd_and(sequence_f0_9d_adv, byte_range_96_99);
            carryQ.cq[291] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_96_99, carryQ.get_carry_in(291), r10000_10ffff_tmp345));
            sequence_f0_9d_byte_range_96_99_sfx = simd_and(r10000_10ffff_tmp345, byte_range_80_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_9d_byte_range_96_99_sfx);
            sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
            r10000_10ffff_tmp346 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp102);
            r10000_10ffff_tmp347 = simd_and(basis_bits.bit_2, r10000_10ffff_tmp346);
            byte_range_80_a5 = simd_andc(byte_range_80_bf, r10000_10ffff_tmp347);
            carryQ.cq[292] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(292), r10000_10ffff_tmp348));
            sequence_f0_9d_9a_byte_range_80_a5 = simd_and(r10000_10ffff_tmp348, byte_range_80_a5);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_9d_9a_byte_range_80_a5);
            sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
            carryQ.cq[293] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(293), r10000_10ffff_tmp349));
            sequence_f0_9d_9b_80 = simd_and(r10000_10ffff_tmp349, byte_80);
            sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
            byte_range_80_94 = r10000_10ffff_tmp293;
            carryQ.cq[294] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(294), r10000_10ffff_tmp350));
            sequence_f0_9d_9c_byte_range_80_94 = simd_and(r10000_10ffff_tmp350, byte_range_80_94);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_9d_9c_byte_range_80_94);
            sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
            r10000_10ffff_tmp351 = simd_and(basis_bits.bit_4, r10000_10ffff_tmp8);
            byte_range_80_8e = simd_andc(byte_range_80_8f, r10000_10ffff_tmp351);
            carryQ.cq[295] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(295), r10000_10ffff_tmp352));
            sequence_f0_9d_9d_byte_range_80_8e = simd_and(r10000_10ffff_tmp352, byte_range_80_8e);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_9d_9d_byte_range_80_8e);
            byte_9e = simd_and(r10000_10ffff_tmp37, r10000_10ffff_tmp75);
            sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
            carryQ.cq[296] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(296), r10000_10ffff_tmp353));
            sequence_f0_9d_9e_byte_range_80_88 = simd_and(r10000_10ffff_tmp353, byte_range_80_88);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_9d_9e_byte_range_80_88);
            byte_9f = simd_and(r10000_10ffff_tmp37, tmp22);
            sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
            byte_range_80_82 = r10000_10ffff_tmp280;
            carryQ.cq[297] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(297), r10000_10ffff_tmp354));
            sequence_f0_9d_9f_byte_range_80_82 = simd_and(r10000_10ffff_tmp354, byte_range_80_82);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_9d_9f_byte_range_80_82);
            sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
            r10000_10ffff_tmp355 = simd_andc(r10000_10ffff_tmp64, tmp13);
            byte_range_a0_a2 = simd_andc(r10000_10ffff_tmp355, tmp9);
            carryQ.cq[298] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(298), r10000_10ffff_tmp356));
            sequence_f0_9e_byte_range_a0_a2 = simd_and(r10000_10ffff_tmp356, byte_range_a0_a2);
            carryQ.cq[299] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_byte_range_a0_a2, carryQ.get_carry_in(299), r10000_10ffff_tmp357));
            sequence_f0_9e_byte_range_a0_a2_sfx = simd_and(r10000_10ffff_tmp357, byte_range_80_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_9e_byte_range_a0_a2_sfx);
            sequence_f0_9e_adv = r10000_10ffff_tmp356;
            sequence_f0_9e_a3 = simd_and(sequence_f0_9e_adv, byte_a3);
            carryQ.cq[300] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_a3, carryQ.get_carry_in(300), r10000_10ffff_tmp358));
            sequence_f0_9e_a3_byte_range_80_84 = simd_and(r10000_10ffff_tmp358, byte_range_80_84);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_9e_a3_byte_range_80_84);
            byte_b8 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp97);
            sequence_f0_9e_b8 = simd_and(sequence_f0_9e_adv, byte_b8);
            carryQ.cq[301] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b8, carryQ.get_carry_in(301), r10000_10ffff_tmp359));
            sequence_f0_9e_b8_byte_range_80_83 = simd_and(r10000_10ffff_tmp359, byte_range_80_83);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_9e_b8_byte_range_80_83);
            byte_b9 = simd_and(byte_range_b0_bf, r10000_10ffff_tmp116);
            sequence_f0_9e_b9 = simd_and(sequence_f0_9e_adv, byte_b9);
            carryQ.cq[302] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b9, carryQ.get_carry_in(302), r10000_10ffff_tmp360));
            sequence_f0_9e_b9_82 = simd_and(r10000_10ffff_tmp360, byte_82);
            byte_ba = simd_and(byte_range_b0_bf, r10000_10ffff_tmp55);
            sequence_f0_9e_ba = simd_and(sequence_f0_9e_adv, byte_ba);
            carryQ.cq[303] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_ba, carryQ.get_carry_in(303), r10000_10ffff_tmp361));
            sequence_f0_9e_ba_byte_range_80_89 = simd_and(r10000_10ffff_tmp361, byte_range_80_89);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_9e_ba_byte_range_80_89);
            byte_range_a0_a9 = simd_andc(r10000_10ffff_tmp64, tmp5);
            byte_f0_byte_range_a0_a9 = simd_and(byte_f0_adv, byte_range_a0_a9);
            carryQ.cq[304] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9, carryQ.get_carry_in(304), r10000_10ffff_tmp362));
            byte_f0_byte_range_a0_a9_sfx = simd_and(r10000_10ffff_tmp362, byte_range_80_bf);
            carryQ.cq[305] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9_sfx, carryQ.get_carry_in(305), r10000_10ffff_tmp363));
            byte_f0_byte_range_a0_a9_sfx_sfx = simd_and(r10000_10ffff_tmp363, byte_range_80_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, byte_f0_byte_range_a0_a9_sfx_sfx);
            sequence_f0_aa = simd_and(byte_f0_adv, byte_aa);
            carryQ.cq[306] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(306), sequence_f0_aa_adv));
            sequence_f0_aa_80 = simd_and(sequence_f0_aa_adv, byte_80);
            byte_range_80_96 = simd_andc(r10000_10ffff_tmp56, r10000_10ffff_tmp99);
            carryQ.cq[307] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_80, carryQ.get_carry_in(307), r10000_10ffff_tmp364));
            sequence_f0_aa_80_byte_range_80_96 = simd_and(r10000_10ffff_tmp364, byte_range_80_96);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_aa_80_byte_range_80_96);
            sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
            carryQ.cq[308] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(308), sequence_f0_ab_adv));
            sequence_f0_ab_80 = simd_and(sequence_f0_ab_adv, byte_80);
            carryQ.cq[309] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_80, carryQ.get_carry_in(309), r10000_10ffff_tmp365));
            sequence_f0_ab_80_byte_range_80_b4 = simd_and(r10000_10ffff_tmp365, byte_range_80_b4);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_ab_80_byte_range_80_b4);
            byte_af = simd_and(r10000_10ffff_tmp64, tmp22);
            sequence_f0_af = simd_and(byte_f0_adv, byte_af);
            carryQ.cq[310] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(310), sequence_f0_af_adv));
            sequence_f0_af_a0 = simd_and(sequence_f0_af_adv, byte_a0);
            carryQ.cq[311] = carryout2carry(pablo_blk_Advance(sequence_f0_af_a0, carryQ.get_carry_in(311), r10000_10ffff_tmp366));
            sequence_f0_af_a0_byte_range_80_9d = simd_and(r10000_10ffff_tmp366, byte_range_80_9d);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f0_af_a0_byte_range_80_9d);
            byte_f3 = simd_and(byte_range_f0_ff, r10000_10ffff_tmp39);
            carryQ.cq[312] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(312), r10000_10ffff_tmp367));
            sequence_f3_a0 = simd_and(r10000_10ffff_tmp367, byte_a0);
            byte_f3_adv = r10000_10ffff_tmp367;
            r10000_10ffff_tmp368 = simd_and(byte_range_80_8f, r10000_10ffff_tmp43);
            byte_range_84_86 = simd_andc(r10000_10ffff_tmp368, tmp9);
            carryQ.cq[313] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(313), r10000_10ffff_tmp369));
            sequence_f3_a0_byte_range_84_86 = simd_and(r10000_10ffff_tmp369, byte_range_84_86);
            carryQ.cq[314] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_84_86, carryQ.get_carry_in(314), r10000_10ffff_tmp370));
            sequence_f3_a0_byte_range_84_86_sfx = simd_and(r10000_10ffff_tmp370, byte_range_80_bf);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f3_a0_byte_range_84_86_sfx);
            sequence_f3_a0_adv = r10000_10ffff_tmp369;
            sequence_f3_a0_87 = simd_and(sequence_f3_a0_adv, byte_87);
            byte_range_80_af = simd_andc(byte_range_80_bf, tmp2);
            carryQ.cq[315] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_87, carryQ.get_carry_in(315), r10000_10ffff_tmp371));
            sequence_f3_a0_87_byte_range_80_af = simd_and(r10000_10ffff_tmp371, byte_range_80_af);
            struct_xidc_Y.cc = simd_or(struct_xidc_Y.cc, sequence_f3_a0_87_byte_range_80_af);
          }
          else {
            carryQ.CarryDequeueEnqueue(197, 119);
          }
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 316);
        }
        carryQ.CarryQ_Adjust(316);
  }
  IDISA_INLINE void clear() { 
 }
  
  CarryArray<316, 0> carryQ;
  };





Property_math_Y fmath_Y;

extern "C" {
    BitBlock __get_math_Y (Basis_bits & basis_bits) {
        Struct_math_Y output;
        fmath_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_alpha_Y falpha_Y;

extern "C" {
    BitBlock __get_alpha_Y (Basis_bits & basis_bits) {
        Struct_alpha_Y output;
        falpha_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_lower_Y flower_Y;

extern "C" {
    BitBlock __get_lower_Y (Basis_bits & basis_bits) {
        Struct_lower_Y output;
        flower_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_upper_Y fupper_Y;

extern "C" {
    BitBlock __get_upper_Y (Basis_bits & basis_bits) {
        Struct_upper_Y output;
        fupper_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_cased_Y fcased_Y;

extern "C" {
    BitBlock __get_cased_Y (Basis_bits & basis_bits) {
        Struct_cased_Y output;
        fcased_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_ci_Y fci_Y;

extern "C" {
    BitBlock __get_ci_Y (Basis_bits & basis_bits) {
        Struct_ci_Y output;
        fci_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_cwl_Y fcwl_Y;

extern "C" {
    BitBlock __get_cwl_Y (Basis_bits & basis_bits) {
        Struct_cwl_Y output;
        fcwl_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_cwu_Y fcwu_Y;

extern "C" {
    BitBlock __get_cwu_Y (Basis_bits & basis_bits) {
        Struct_cwu_Y output;
        fcwu_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_cwt_Y fcwt_Y;

extern "C" {
    BitBlock __get_cwt_Y (Basis_bits & basis_bits) {
        Struct_cwt_Y output;
        fcwt_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_cwcf_Y fcwcf_Y;

extern "C" {
    BitBlock __get_cwcf_Y (Basis_bits & basis_bits) {
        Struct_cwcf_Y output;
        fcwcf_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_cwcm_Y fcwcm_Y;

extern "C" {
    BitBlock __get_cwcm_Y (Basis_bits & basis_bits) {
        Struct_cwcm_Y output;
        fcwcm_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_ids_Y fids_Y;

extern "C" {
    BitBlock __get_ids_Y (Basis_bits & basis_bits) {
        Struct_ids_Y output;
        fids_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_idc_Y fidc_Y;

extern "C" {
    BitBlock __get_idc_Y (Basis_bits & basis_bits) {
        Struct_idc_Y output;
        fidc_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_xids_Y fxids_Y;

extern "C" {
    BitBlock __get_xids_Y (Basis_bits & basis_bits) {
        Struct_xids_Y output;
        fxids_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_xidc_Y fxidc_Y;

extern "C" {
    BitBlock __get_xidc_Y (Basis_bits & basis_bits) {
        Struct_xidc_Y output;
        fxidc_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_di_Y fdi_Y;

extern "C" {
    BitBlock __get_di_Y (Basis_bits & basis_bits) {
        Struct_di_Y output;
        fdi_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gr_ext_Y fgr_ext_Y;

extern "C" {
    BitBlock __get_gr_ext_Y (Basis_bits & basis_bits) {
        Struct_gr_ext_Y output;
        fgr_ext_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gr_base_Y fgr_base_Y;

extern "C" {
    BitBlock __get_gr_base_Y (Basis_bits & basis_bits) {
        Struct_gr_base_Y output;
        fgr_base_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

Property_gr_link_Y fgr_link_Y;

extern "C" {
    BitBlock __get_gr_link_Y (Basis_bits & basis_bits) {
        Struct_gr_link_Y output;
        fgr_link_Y . do_block(basis_bits, output);
        return output.cc;
    }
}

void install_property_DerivedCoreProperties_fn_ptrs(pablo::PabloCompiler & p) {
    p.InstallExternalFunction("__get_math_Y", (void *) & __get_math_Y);
  p.InstallExternalFunction("__get_alpha_Y", (void *) & __get_alpha_Y);
  p.InstallExternalFunction("__get_lower_Y", (void *) & __get_lower_Y);
  p.InstallExternalFunction("__get_upper_Y", (void *) & __get_upper_Y);
  p.InstallExternalFunction("__get_cased_Y", (void *) & __get_cased_Y);
  p.InstallExternalFunction("__get_ci_Y", (void *) & __get_ci_Y);
  p.InstallExternalFunction("__get_cwl_Y", (void *) & __get_cwl_Y);
  p.InstallExternalFunction("__get_cwu_Y", (void *) & __get_cwu_Y);
  p.InstallExternalFunction("__get_cwt_Y", (void *) & __get_cwt_Y);
  p.InstallExternalFunction("__get_cwcf_Y", (void *) & __get_cwcf_Y);
  p.InstallExternalFunction("__get_cwcm_Y", (void *) & __get_cwcm_Y);
  p.InstallExternalFunction("__get_ids_Y", (void *) & __get_ids_Y);
  p.InstallExternalFunction("__get_idc_Y", (void *) & __get_idc_Y);
  p.InstallExternalFunction("__get_xids_Y", (void *) & __get_xids_Y);
  p.InstallExternalFunction("__get_xidc_Y", (void *) & __get_xidc_Y);
  p.InstallExternalFunction("__get_di_Y", (void *) & __get_di_Y);
  p.InstallExternalFunction("__get_gr_ext_Y", (void *) & __get_gr_ext_Y);
  p.InstallExternalFunction("__get_gr_base_Y", (void *) & __get_gr_base_Y);
  p.InstallExternalFunction("__get_gr_link_Y", (void *) & __get_gr_link_Y);

}

#endif
