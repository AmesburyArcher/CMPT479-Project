#ifndef PROPERTYALIASES_H
#define PROPERTYALIASES_H
/*
 *  Copyright (c) 2014 International Characters, Inc.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters, Inc.
 *
 *  This file is generated by UCD_properties.py - manual edits may be lost.
 */

#include <string>
#include <vector>
#include <unordered_map>

namespace UCD {
  enum property_t {
cjkaccountingnumeric, cjkothernumeric, cjkprimarynumeric, nv, cf,
    cjkcompatibilityvariant, dm, fc_nfkc, lc, nfkc_cf, scf, slc, stc, suc,
    tc, uc, bmg, bpb, cjkiicore, cjkirg_gsource, cjkirg_hsource,
    cjkirg_jsource, cjkirg_kpsource, cjkirg_ksource, cjkirg_msource,
    cjkirg_tsource, cjkirg_usource, cjkirg_vsource, cjkrsunicode, isc, jsn,
    na, na1, name_alias, scx, age, blk, sc, bc, bpt, ccc, dt, ea, gc, gcb,
    hst, inmc, insc, jg, jt, lb, nfc_qc, nfd_qc, nfkc_qc, nfkd_qc, nt, sb,
    wb, ahex, alpha, bidi_c, bidi_m, cased, ce, ci, comp_ex, cwcf, cwcm,
    cwkcf, cwl, cwt, cwu, dash, dep, di, dia, ext, gr_base, gr_ext, gr_link,
    hex, hyphen, idc, ideo, ids, idsb, idst, join_c, loe, lower, math,
    nchar, oalpha, odi, ogr_ext, oidc, oids, olower, omath, oupper, pat_syn,
    pat_ws, qmark, radical, sd, sterm, term, uideo, upper, vs, wspace, xidc,
    xids, xo_nfc, xo_nfd, xo_nfkc, xo_nfkd
  };
  const std::vector<std::string> property_full_name = {
"kAccountingNumeric", "kOtherNumeric", "kPrimaryNumeric",
    "Numeric_Value", "Case_Folding", "kCompatibilityVariant",
    "Decomposition_Mapping", "FC_NFKC_Closure", "Lowercase_Mapping",
    "NFKC_Casefold", "Simple_Case_Folding", "Simple_Lowercase_Mapping",
    "Simple_Titlecase_Mapping", "Simple_Uppercase_Mapping",
    "Titlecase_Mapping", "Uppercase_Mapping", "Bidi_Mirroring_Glyph",
    "Bidi_Paired_Bracket", "kIICore", "kIRG_GSource", "kIRG_HSource",
    "kIRG_JSource", "kIRG_KPSource", "kIRG_KSource", "kIRG_MSource",
    "kIRG_TSource", "kIRG_USource", "kIRG_VSource", "kRSUnicode",
    "ISO_Comment", "Jamo_Short_Name", "Name", "Unicode_1_Name",
    "Name_Alias", "Script_Extensions", "Age", "Block", "Script",
    "Bidi_Class", "Bidi_Paired_Bracket_Type", "Canonical_Combining_Class",
    "Decomposition_Type", "East_Asian_Width", "General_Category",
    "Grapheme_Cluster_Break", "Hangul_Syllable_Type",
    "Indic_Matra_Category", "Indic_Syllabic_Category", "Joining_Group",
    "Joining_Type", "Line_Break", "NFC_Quick_Check", "NFD_Quick_Check",
    "NFKC_Quick_Check", "NFKD_Quick_Check", "Numeric_Type",
    "Sentence_Break", "Word_Break", "ASCII_Hex_Digit", "Alphabetic",
    "Bidi_Control", "Bidi_Mirrored", "Cased", "Composition_Exclusion",
    "Case_Ignorable", "Full_Composition_Exclusion",
    "Changes_When_Casefolded", "Changes_When_Casemapped",
    "Changes_When_NFKC_Casefolded", "Changes_When_Lowercased",
    "Changes_When_Titlecased", "Changes_When_Uppercased", "Dash",
    "Deprecated", "Default_Ignorable_Code_Point", "Diacritic", "Extender",
    "Grapheme_Base", "Grapheme_Extend", "Grapheme_Link", "Hex_Digit",
    "Hyphen", "ID_Continue", "Ideographic", "ID_Start",
    "IDS_Binary_Operator", "IDS_Trinary_Operator", "Join_Control",
    "Logical_Order_Exception", "Lowercase", "Math",
    "Noncharacter_Code_Point", "Other_Alphabetic",
    "Other_Default_Ignorable_Code_Point", "Other_Grapheme_Extend",
    "Other_ID_Continue", "Other_ID_Start", "Other_Lowercase", "Other_Math",
    "Other_Uppercase", "Pattern_Syntax", "Pattern_White_Space",
    "Quotation_Mark", "Radical", "Soft_Dotted", "STerm",
    "Terminal_Punctuation", "Unified_Ideograph", "Uppercase",
    "Variation_Selector", "White_Space", "XID_Continue", "XID_Start",
    "Expands_On_NFC", "Expands_On_NFD", "Expands_On_NFKC",
    "Expands_On_NFKD"
  };
  const std::unordered_map<std::string, property_t> alias_map = {
{"age", age}, {"ahex", ahex}, {"alpha", alpha}, {"alphabetic", alpha},
    {"asciihexdigit", ahex}, {"bc", bc}, {"bidic", bidi_c},
    {"bidiclass", bc}, {"bidicontrol", bidi_c}, {"bidim", bidi_m},
    {"bidimirrored", bidi_m}, {"bidimirroringglyph", bmg},
    {"bidipairedbracket", bpb}, {"bidipairedbrackettype", bpt},
    {"blk", blk}, {"block", blk}, {"bmg", bmg}, {"bpb", bpb}, {"bpt", bpt},
    {"c", isc}, {"canonicalcombiningclass", ccc}, {"cased", cased},
    {"casefolding", cf}, {"caseignorable", ci}, {"ccc", ccc}, {"ce", ce},
    {"cf", cf}, {"changeswhencasefolded", cwcf},
    {"changeswhencasemapped", cwcm}, {"changeswhenlowercased", cwl},
    {"changeswhennfkccasefolded", cwkcf}, {"changeswhentitlecased", cwt},
    {"changeswhenuppercased", cwu}, {"ci", ci},
    {"cjkaccountingnumeric", cjkaccountingnumeric},
    {"cjkcompatibilityvariant", cjkcompatibilityvariant},
    {"cjkiicore", cjkiicore}, {"cjkirggsource", cjkirg_gsource},
    {"cjkirghsource", cjkirg_hsource}, {"cjkirgjsource", cjkirg_jsource},
    {"cjkirgkpsource", cjkirg_kpsource}, {"cjkirgksource", cjkirg_ksource},
    {"cjkirgmsource", cjkirg_msource}, {"cjkirgtsource", cjkirg_tsource},
    {"cjkirgusource", cjkirg_usource}, {"cjkirgvsource", cjkirg_vsource},
    {"cjkothernumeric", cjkothernumeric},
    {"cjkprimarynumeric", cjkprimarynumeric},
    {"cjkrsunicode", cjkrsunicode}, {"compex", comp_ex},
    {"compositionexclusion", ce}, {"cwcf", cwcf}, {"cwcm", cwcm},
    {"cwkcf", cwkcf}, {"cwl", cwl}, {"cwt", cwt}, {"cwu", cwu},
    {"dash", dash}, {"decompositionmapping", dm}, {"decompositiontype", dt},
    {"defaultignorablecodepoint", di}, {"dep", dep}, {"deprecated", dep},
    {"di", di}, {"dia", dia}, {"diacritic", dia}, {"dm", dm}, {"dt", dt},
    {"ea", ea}, {"eastasianwidth", ea}, {"expandsonnfc", xo_nfc},
    {"expandsonnfd", xo_nfd}, {"expandsonnfkc", xo_nfkc},
    {"expandsonnfkd", xo_nfkd}, {"ext", ext}, {"extender", ext},
    {"fcnfkc", fc_nfkc}, {"fcnfkcclosure", fc_nfkc},
    {"fullcompositionexclusion", comp_ex}, {"gc", gc}, {"gcb", gcb},
    {"generalcategory", gc}, {"graphemebase", gr_base},
    {"graphemeclusterbreak", gcb}, {"graphemeextend", gr_ext},
    {"graphemelink", gr_link}, {"grbase", gr_base}, {"grext", gr_ext},
    {"grlink", gr_link}, {"hangulsyllabletype", hst}, {"hex", hex},
    {"hexdigit", hex}, {"hst", hst}, {"hyphen", hyphen}, {"idc", idc},
    {"idcontinue", idc}, {"ideo", ideo}, {"ideographic", ideo},
    {"ids", ids}, {"idsb", idsb}, {"idsbinaryoperator", idsb},
    {"idst", idst}, {"idstart", ids}, {"idstrinaryoperator", idst},
    {"indicmatracategory", inmc}, {"indicsyllabiccategory", insc},
    {"inmc", inmc}, {"insc", insc}, {"jamoshortname", jsn}, {"jg", jg},
    {"joinc", join_c}, {"joincontrol", join_c}, {"joininggroup", jg},
    {"joiningtype", jt}, {"jsn", jsn}, {"jt", jt},
    {"kaccountingnumeric", cjkaccountingnumeric},
    {"kcompatibilityvariant", cjkcompatibilityvariant},
    {"kiicore", cjkiicore}, {"kirggsource", cjkirg_gsource},
    {"kirghsource", cjkirg_hsource}, {"kirgjsource", cjkirg_jsource},
    {"kirgkpsource", cjkirg_kpsource}, {"kirgksource", cjkirg_ksource},
    {"kirgmsource", cjkirg_msource}, {"kirgtsource", cjkirg_tsource},
    {"kirgusource", cjkirg_usource}, {"kirgvsource", cjkirg_vsource},
    {"kothernumeric", cjkothernumeric},
    {"kprimarynumeric", cjkprimarynumeric}, {"krsunicode", cjkrsunicode},
    {"lb", lb}, {"lc", lc}, {"linebreak", lb}, {"loe", loe},
    {"logicalorderexception", loe}, {"lower", lower}, {"lowercase", lower},
    {"lowercasemapping", lc}, {"math", math}, {"na", na}, {"na1", na1},
    {"name", na}, {"namealias", name_alias}, {"nchar", nchar},
    {"nfcqc", nfc_qc}, {"nfcquickcheck", nfc_qc}, {"nfdqc", nfd_qc},
    {"nfdquickcheck", nfd_qc}, {"nfkccasefold", nfkc_cf},
    {"nfkccf", nfkc_cf}, {"nfkcqc", nfkc_qc}, {"nfkcquickcheck", nfkc_qc},
    {"nfkdqc", nfkd_qc}, {"nfkdquickcheck", nfkd_qc},
    {"noncharactercodepoint", nchar}, {"nt", nt}, {"numerictype", nt},
    {"numericvalue", nv}, {"nv", nv}, {"oalpha", oalpha}, {"ocomment", isc},
    {"odi", odi}, {"ogrext", ogr_ext}, {"oidc", oidc}, {"oids", oids},
    {"olower", olower}, {"omath", omath}, {"otheralphabetic", oalpha},
    {"otherdefaultignorablecodepoint", odi},
    {"othergraphemeextend", ogr_ext}, {"otheridcontinue", oidc},
    {"otheridstart", oids}, {"otherlowercase", olower},
    {"othermath", omath}, {"otheruppercase", oupper}, {"oupper", oupper},
    {"patsyn", pat_syn}, {"patternsyntax", pat_syn},
    {"patternwhitespace", pat_ws}, {"patws", pat_ws}, {"qmark", qmark},
    {"quotationmark", qmark}, {"radical", radical}, {"sb", sb}, {"sc", sc},
    {"scf", scf}, {"script", sc}, {"scriptextensions", scx}, {"scx", scx},
    {"sd", sd}, {"sentencebreak", sb}, {"sfc", scf},
    {"simplecasefolding", scf}, {"simplelowercasemapping", slc},
    {"simpletitlecasemapping", stc}, {"simpleuppercasemapping", suc},
    {"slc", slc}, {"softdotted", sd}, {"space", wspace}, {"stc", stc},
    {"sterm", sterm}, {"suc", suc}, {"tc", tc}, {"term", term},
    {"terminalpunctuation", term}, {"titlecasemapping", tc}, {"uc", uc},
    {"uideo", uideo}, {"unicode1name", na1},
    {"unicoderadicalstroke", cjkrsunicode}, {"unifiedideograph", uideo},
    {"upper", upper}, {"uppercase", upper}, {"uppercasemapping", uc},
    {"urs", cjkrsunicode}, {"variationselector", vs}, {"vs", vs},
    {"wb", wb}, {"whitespace", wspace}, {"wordbreak", wb},
    {"wspace", wspace}, {"xidc", xidc}, {"xidcontinue", xidc},
    {"xids", xids}, {"xidstart", xids}, {"xonfc", xo_nfc},
    {"xonfd", xo_nfd}, {"xonfkc", xo_nfkc}, {"xonfkd", xo_nfkd}
  };
}

#endif
