// Stream struct and function headers and definitions
#include "icgrep.h"

#include <simd-lib/bitblock.hpp>
#include <simd-lib/carryQ.hpp>
#include <simd-lib/pabloSupport.hpp>

#define LocalCarryDeclare(name, count)\
CarryArray<count, 0> name;\

//BitBlock EOF_mask = simd<1>::constant<1>();


  struct Struct_Nd {
  BitBlock cc;
};

struct Nd {
  Nd() { 
     // std::cout << "struct Nd constructor!" << std::endl;
 }
  ~Nd(){
     // std::cout << "struct Nd deconstruted!" << std::endl;
  }

  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Nd & struct_Nd) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, CC_Nd_30_39, tmp6, tmp7, tmp8, tmp9;
		BitBlock tmp10, bytetest_c2_df, tmp11, tmp12, tmp13, tmp14, tmp15;
		BitBlock bytetest_e1_ef, tmp16, bytetest_a0_bf, tmp17, bytetest_e0, tmp18;
		BitBlock bytetest_e0_adv, range_test_800_ffff_1, test_80_ffff, tmp19;
		BitBlock bytetest_80_8f, tmp20, tmp21, tmp22, bytetest_f4, tmp23;
		BitBlock bytetest_f4_adv, tmp24, bytetest_f1_f3, bytetest_90_bf, bytetest_f0;
		BitBlock tmp25, bytetest_f0_adv, range_test_10000_fffff_1;
		BitBlock range_test_10000_10ffff_1, test_80_10ffff, r80_10ffff_tmp1;
		BitBlock r80_10ffff_tmp2, r80_10ffff_tmp3, r80_10ffff_tmp4, r80_10ffff_tmp5;
		BitBlock r80_7ff_tmp1, r80_7ff_tmp2, bytetest_d0_df, r400_7ff_tmp1;
		BitBlock r400_7ff_tmp2, r400_7ff_tmp3, r400_7ff_tmp4, bytetest_d8_db;
		BitBlock r600_6ff_tmp1, r600_6ff_tmp2, r600_6ff_tmp3, CC_Nd_660_669_sfx;
		BitBlock r600_6ff_tmp4, r600_6ff_tmp5, r600_6ff_tmp6, r600_6ff_tmp7;
		BitBlock r600_6ff_tmp8, r600_6ff_tmp9, CC_d9, r600_6ff_tmp10, CC_Nd_660_669;
		BitBlock r600_6ff_tmp11, CC_Nd_6f0_6f9_sfx, r600_6ff_tmp12, r600_6ff_tmp13;
		BitBlock CC_db, r600_6ff_tmp14, CC_Nd_6f0_6f9, r400_7ff_tmp5, bytetest_dc_df;
		BitBlock bytetest_80_bf, r700_7ff_tmp1, r700_7ff_tmp2, r700_7ff_tmp3;
		BitBlock bytetest_df, r700_7ff_tmp4, bytetest_df_adv, r7c0_7ff_tmp1;
		BitBlock r7c0_7ff_tmp2, r7c0_7ff_tmp3, CC_Nd_7c0_7c9_sfx, r7c0_7ff_tmp4;
		BitBlock r7c0_7ff_tmp5, r7c0_7ff_tmp6, CC_df, r7c0_7ff_tmp7, CC_Nd_7c0_7c9;
		BitBlock r80_10ffff_tmp6, r80_10ffff_tmp7, r80_10ffff_tmp8, r80_10ffff_tmp9;
		BitBlock r80_10ffff_tmp10, r80_10ffff_tmp11, r80_10ffff_tmp12;
		BitBlock r80_10ffff_tmp13, r800_ffff_tmp1, r800_ffff_tmp2, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, r800_ffff_tmp5, CC_Nd_966_96f_sfx_sfx, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, r800_ffff_tmp8, CC_a5, r800_ffff_tmp9;
		BitBlock CC_Nd_966_96f_sfx, r800_ffff_tmp10, r800_ffff_tmp11, r800_ffff_tmp12;
		BitBlock CC_e0, r800_ffff_tmp13, CC_Nd_966_96f, CC_Nd_9e6_9ef_sfx_sfx;
		BitBlock r800_ffff_tmp14, r800_ffff_tmp15, CC_a7, r800_ffff_tmp16;
		BitBlock CC_Nd_9e6_9ef_sfx, CC_Nd_9e6_9ef, CC_Nd_a66_a6f_sfx_sfx;
		BitBlock r800_ffff_tmp17, r800_ffff_tmp18, CC_a9, r800_ffff_tmp19;
		BitBlock CC_Nd_a66_a6f_sfx, CC_Nd_a66_a6f, CC_Nd_ae6_aef_sfx_sfx;
		BitBlock r800_ffff_tmp20, CC_ab, r800_ffff_tmp21, CC_Nd_ae6_aef_sfx;
		BitBlock CC_Nd_ae6_aef, CC_Nd_b66_b6f_sfx_sfx, r800_ffff_tmp22;
		BitBlock r800_ffff_tmp23, CC_ad, r800_ffff_tmp24, CC_Nd_b66_b6f_sfx;
		BitBlock CC_Nd_b66_b6f, CC_Nd_be6_bef_sfx_sfx, r800_ffff_tmp25, CC_af;
		BitBlock r800_ffff_tmp26, CC_Nd_be6_bef_sfx, CC_Nd_be6_bef;
		BitBlock CC_Nd_c66_c6f_sfx_sfx, r800_ffff_tmp27, r800_ffff_tmp28, CC_b1;
		BitBlock r800_ffff_tmp29, CC_Nd_c66_c6f_sfx, CC_Nd_c66_c6f;
		BitBlock CC_Nd_ce6_cef_sfx_sfx, r800_ffff_tmp30, CC_b3, r800_ffff_tmp31;
		BitBlock CC_Nd_ce6_cef_sfx, CC_Nd_ce6_cef, CC_Nd_d66_d6f_sfx_sfx, CC_b5;
		BitBlock r800_ffff_tmp32, CC_Nd_d66_d6f_sfx, CC_Nd_d66_d6f, r800_ffff_tmp33;
		BitBlock r800_ffff_tmp34, CC_Nd_e50_e59_sfx_sfx, CC_b9, r800_ffff_tmp35;
		BitBlock CC_Nd_e50_e59_sfx, CC_Nd_e50_e59, CC_Nd_ed0_ed9_sfx_sfx, CC_bb;
		BitBlock r800_ffff_tmp36, CC_Nd_ed0_ed9_sfx, CC_Nd_ed0_ed9;
		BitBlock CC_Nd_f20_f29_sfx_sfx, r800_ffff_tmp37, CC_bc, r800_ffff_tmp38;
		BitBlock CC_Nd_f20_f29_sfx, CC_Nd_f20_f29, r800_ffff_tmp39, r800_ffff_tmp40;
		BitBlock CC_Nd_1040_1049_sfx_sfx, CC_81, r800_ffff_tmp41, CC_Nd_1040_1049_sfx;
		BitBlock CC_e1, r800_ffff_tmp42, CC_Nd_1040_1049, CC_Nd_1090_1099_sfx_sfx;
		BitBlock r800_ffff_tmp43, r800_ffff_tmp44, CC_82, r800_ffff_tmp45;
		BitBlock CC_Nd_1090_1099_sfx, CC_Nd_1090_1099, CC_Nd_17e0_17e9_sfx_sfx, CC_9f;
		BitBlock r800_ffff_tmp46, CC_Nd_17e0_17e9_sfx, CC_Nd_17e0_17e9;
		BitBlock CC_Nd_1810_1819_sfx_sfx, CC_a0, r800_ffff_tmp47, CC_Nd_1810_1819_sfx;
		BitBlock CC_Nd_1810_1819, CC_Nd_1946_194f_sfx_sfx, CC_Nd_1946_194f_sfx;
		BitBlock CC_Nd_1946_194f, CC_Nd_19d0_19d9_sfx_sfx, CC_Nd_19d0_19d9_sfx;
		BitBlock CC_Nd_19d0_19d9, CC_Nd_1a80_1a89_sfx_sfx, r800_ffff_tmp48, CC_aa;
		BitBlock r800_ffff_tmp49, CC_Nd_1a80_1a89_sfx, CC_Nd_1a80_1a89;
		BitBlock CC_Nd_1a90_1a99_sfx_sfx, CC_Nd_1a90_1a99_sfx, CC_Nd_1a90_1a99;
		BitBlock CC_Nd_1b50_1b59_sfx_sfx, CC_Nd_1b50_1b59_sfx, CC_Nd_1b50_1b59;
		BitBlock CC_Nd_1bb0_1bb9_sfx_sfx, r800_ffff_tmp50, CC_ae, r800_ffff_tmp51;
		BitBlock CC_Nd_1bb0_1bb9_sfx, CC_Nd_1bb0_1bb9, CC_Nd_1c40_1c49_sfx_sfx;
		BitBlock CC_Nd_1c40_1c49_sfx, CC_Nd_1c40_1c49, CC_Nd_1c50_1c59_sfx_sfx;
		BitBlock CC_Nd_1c50_1c59_sfx, CC_Nd_1c50_1c59, CC_Nd_a620_a629_sfx_sfx;
		BitBlock r800_ffff_tmp52, CC_98, r800_ffff_tmp53, CC_Nd_a620_a629_sfx, CC_ea;
		BitBlock r800_ffff_tmp54, CC_Nd_a620_a629, CC_Nd_a8d0_a8d9_sfx_sfx, CC_a3;
		BitBlock r800_ffff_tmp55, CC_Nd_a8d0_a8d9_sfx, CC_Nd_a8d0_a8d9;
		BitBlock CC_Nd_a900_a909_sfx_sfx, r800_ffff_tmp56, CC_a4, r800_ffff_tmp57;
		BitBlock CC_Nd_a900_a909_sfx, CC_Nd_a900_a909, CC_Nd_a9d0_a9d9_sfx_sfx;
		BitBlock CC_Nd_a9d0_a9d9_sfx, CC_Nd_a9d0_a9d9, CC_Nd_aa50_aa59_sfx_sfx;
		BitBlock CC_Nd_aa50_aa59_sfx, CC_Nd_aa50_aa59, CC_Nd_abf0_abf9_sfx_sfx;
		BitBlock CC_Nd_abf0_abf9_sfx, CC_Nd_abf0_abf9, CC_Nd_ff10_ff19_sfx_sfx;
		BitBlock CC_Nd_ff10_ff19_sfx, CC_ef, r800_ffff_tmp58, CC_Nd_ff10_ff19;
		BitBlock r80_10ffff_tmp14, r80_10ffff_tmp15, r80_10ffff_tmp16;
		BitBlock r80_10ffff_tmp17, r80_10ffff_tmp18, r80_10ffff_tmp19;
		BitBlock r80_10ffff_tmp20, r10000_10ffff_tmp1, CC_Nd_104a0_104a9_sfx_sfx_sfx;
		BitBlock r10000_10ffff_tmp2, r10000_10ffff_tmp3, r10000_10ffff_tmp4;
		BitBlock r10000_10ffff_tmp5, CC_92, r10000_10ffff_tmp6;
		BitBlock CC_Nd_104a0_104a9_sfx_sfx, CC_90, r10000_10ffff_tmp7;
		BitBlock CC_Nd_104a0_104a9_sfx, r10000_10ffff_tmp8, CC_f0, r10000_10ffff_tmp9;
		BitBlock CC_Nd_104a0_104a9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock CC_Nd_11066_1106f_sfx_sfx_sfx, r10000_10ffff_tmp12;
		BitBlock r10000_10ffff_tmp13, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, CC_Nd_11066_1106f_sfx_sfx, CC_91;
		BitBlock r10000_10ffff_tmp17, CC_Nd_11066_1106f_sfx, CC_Nd_11066_1106f;
		BitBlock r10000_10ffff_tmp18, CC_Nd_110f0_110f9_sfx_sfx_sfx;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, CC_83, r10000_10ffff_tmp21;
		BitBlock CC_Nd_110f0_110f9_sfx_sfx, CC_Nd_110f0_110f9_sfx, CC_Nd_110f0_110f9;
		BitBlock CC_Nd_11136_1113f_sfx_sfx_sfx, r10000_10ffff_tmp22;
		BitBlock r10000_10ffff_tmp23, CC_84, r10000_10ffff_tmp24;
		BitBlock CC_Nd_11136_1113f_sfx_sfx, CC_Nd_11136_1113f_sfx, CC_Nd_11136_1113f;
		BitBlock CC_Nd_111d0_111d9_sfx_sfx_sfx, r10000_10ffff_tmp25, CC_87;
		BitBlock r10000_10ffff_tmp26, CC_Nd_111d0_111d9_sfx_sfx, CC_Nd_111d0_111d9_sfx;
		BitBlock CC_Nd_111d0_111d9, CC_Nd_116c0_116c9_sfx_sfx_sfx, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, CC_9b, r10000_10ffff_tmp29;
		BitBlock CC_Nd_116c0_116c9_sfx_sfx, CC_Nd_116c0_116c9_sfx, CC_Nd_116c0_116c9;
		BitBlock r10000_10ffff_tmp30, r10000_10ffff_tmp31, r10000_10ffff_tmp32;
		BitBlock r10000_10ffff_tmp33, CC_Nd_1d7ce_1d7ff_sfx_sfx_sfx;
		BitBlock r10000_10ffff_tmp34, r10000_10ffff_tmp35, CC_Nd_1d7ce_1d7ff_sfx_sfx;
		BitBlock r10000_10ffff_tmp36, CC_9d, r10000_10ffff_tmp37;
		BitBlock CC_Nd_1d7ce_1d7ff_sfx, CC_Nd_1d7ce_1d7ff;




        struct_Nd.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        CC_Nd_30_39 = simd_andc(tmp3, tmp5);
        struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_30_39);
        tmp6 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp7 = simd_andc(tmp6, basis_bits.bit_2);
        tmp8 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp9 = simd_or(tmp8, basis_bits.bit_6);
        tmp10 = simd_or(basis_bits.bit_3, tmp9);
        bytetest_c2_df = simd_and(tmp7, tmp10);
        tmp11 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp12 = simd_and(tmp6, tmp11);
        tmp13 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp14 = simd_or(basis_bits.bit_5, tmp13);
        tmp15 = simd_or(basis_bits.bit_4, tmp14);
        bytetest_e1_ef = simd_and(tmp12, tmp15);
        tmp16 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        bytetest_a0_bf = simd_and(tmp16, basis_bits.bit_2);
        tmp17 = simd_or(tmp8, tmp13);
        bytetest_e0 = simd_andc(tmp12, tmp17);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(bytetest_e0, carryQ.get_carry_in(0), tmp18));
        bytetest_e0_adv = simd_and(tmp18, bytetest_a0_bf);
        range_test_800_ffff_1 = simd_or(bytetest_e1_ef, bytetest_e0_adv);
        test_80_ffff = simd_or(bytetest_c2_df, range_test_800_ffff_1);
        tmp19 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        bytetest_80_8f = simd_andc(tmp16, tmp19);
        tmp20 = simd_and(tmp6, tmp2);
        tmp21 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp22 = simd_andc(tmp21, tmp13);
        bytetest_f4 = simd_and(tmp20, tmp22);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(bytetest_f4, carryQ.get_carry_in(1), tmp23));
        bytetest_f4_adv = simd_and(tmp23, bytetest_80_8f);
        tmp24 = simd_andc(tmp20, tmp8);
        bytetest_f1_f3 = simd_and(tmp24, tmp13);
        bytetest_90_bf = simd_and(tmp16, tmp19);
        bytetest_f0 = simd_andc(tmp20, tmp17);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(bytetest_f0, carryQ.get_carry_in(2), tmp25));
        bytetest_f0_adv = simd_and(tmp25, bytetest_90_bf);
        range_test_10000_fffff_1 = simd_or(bytetest_f1_f3, bytetest_f0_adv);
        range_test_10000_10ffff_1 = simd_or(bytetest_f4_adv, range_test_10000_fffff_1);
        test_80_10ffff = simd_or(test_80_ffff, range_test_10000_10ffff_1);
        if (bitblock::any(test_80_10ffff)) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
          r80_10ffff_tmp2 = simd_andc(r80_10ffff_tmp1, basis_bits.bit_2);
          r80_10ffff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r80_10ffff_tmp4 = simd_or(r80_10ffff_tmp3, basis_bits.bit_6);
          r80_10ffff_tmp5 = simd_or(basis_bits.bit_3, r80_10ffff_tmp4);
          bytetest_c2_df = simd_and(r80_10ffff_tmp2, r80_10ffff_tmp5);
          if (bitblock::any(bytetest_c2_df)) {
            r80_7ff_tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            bytetest_d0_df = simd_and(r80_7ff_tmp1, r80_7ff_tmp2);
            if (bitblock::any(bytetest_d0_df)) {
              r400_7ff_tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
              r400_7ff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              r400_7ff_tmp3 = simd_and(r400_7ff_tmp1, r400_7ff_tmp2);
              r400_7ff_tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              bytetest_d8_db = simd_and(r400_7ff_tmp3, r400_7ff_tmp4);
              if (bitblock::any(bytetest_d8_db)) {
                r600_6ff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r600_6ff_tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r600_6ff_tmp3 = simd_and(r600_6ff_tmp1, r600_6ff_tmp2);
                CC_Nd_660_669_sfx = simd_andc(r600_6ff_tmp3, tmp5);
                r600_6ff_tmp4 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
                r600_6ff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                r600_6ff_tmp6 = simd_and(r600_6ff_tmp4, r600_6ff_tmp5);
                r600_6ff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r600_6ff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r600_6ff_tmp9 = simd_and(r600_6ff_tmp7, r600_6ff_tmp8);
                CC_d9 = simd_and(r600_6ff_tmp6, r600_6ff_tmp9);
                carryQ.cq[3] = carryout2carry(pablo_blk_Advance(CC_d9, carryQ.get_carry_in(3), r600_6ff_tmp10));
                CC_Nd_660_669 = simd_and(r600_6ff_tmp10, CC_Nd_660_669_sfx);
                struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_660_669);
                r600_6ff_tmp11 = simd_and(r600_6ff_tmp1, tmp2);
                CC_Nd_6f0_6f9_sfx = simd_andc(r600_6ff_tmp11, tmp5);
                r600_6ff_tmp12 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r600_6ff_tmp13 = simd_and(r600_6ff_tmp7, r600_6ff_tmp12);
                CC_db = simd_and(r600_6ff_tmp6, r600_6ff_tmp13);
                carryQ.cq[4] = carryout2carry(pablo_blk_Advance(CC_db, carryQ.get_carry_in(4), r600_6ff_tmp14));
                CC_Nd_6f0_6f9 = simd_and(r600_6ff_tmp14, CC_Nd_6f0_6f9_sfx);
                struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_6f0_6f9);
              }
              r400_7ff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              bytetest_dc_df = simd_and(r400_7ff_tmp3, r400_7ff_tmp5);
              if (bitblock::any(bytetest_dc_df)) {
                bytetest_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r700_7ff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                r700_7ff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r700_7ff_tmp3 = simd_and(r700_7ff_tmp1, r700_7ff_tmp2);
                bytetest_df = simd_and(r400_7ff_tmp3, r700_7ff_tmp3);
                carryQ.cq[5] = carryout2carry(pablo_blk_Advance(bytetest_df, carryQ.get_carry_in(5), r700_7ff_tmp4));
                bytetest_df_adv = simd_and(r700_7ff_tmp4, bytetest_80_bf);
                if (bitblock::any(bytetest_df_adv)) {
                  r7c0_7ff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                  r7c0_7ff_tmp2 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r7c0_7ff_tmp3 = simd_andc(r7c0_7ff_tmp1, r7c0_7ff_tmp2);
                  CC_Nd_7c0_7c9_sfx = simd_andc(r7c0_7ff_tmp3, tmp5);
                  r7c0_7ff_tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r7c0_7ff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r7c0_7ff_tmp6 = simd_and(r7c0_7ff_tmp4, r7c0_7ff_tmp5);
                  CC_df = simd_and(r400_7ff_tmp3, r7c0_7ff_tmp6);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(CC_df, carryQ.get_carry_in(6), r7c0_7ff_tmp7));
                  CC_Nd_7c0_7c9 = simd_and(r7c0_7ff_tmp7, CC_Nd_7c0_7c9_sfx);
                  struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_7c0_7c9);
                }
              }
            }
          }
          r80_10ffff_tmp6 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          r80_10ffff_tmp7 = simd_and(r80_10ffff_tmp1, r80_10ffff_tmp6);
          r80_10ffff_tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r80_10ffff_tmp9 = simd_or(basis_bits.bit_5, r80_10ffff_tmp8);
          r80_10ffff_tmp10 = simd_or(basis_bits.bit_4, r80_10ffff_tmp9);
          bytetest_e1_ef = simd_and(r80_10ffff_tmp7, r80_10ffff_tmp10);
          r80_10ffff_tmp11 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          bytetest_a0_bf = simd_and(r80_10ffff_tmp11, basis_bits.bit_2);
          r80_10ffff_tmp12 = simd_or(r80_10ffff_tmp3, r80_10ffff_tmp8);
          bytetest_e0 = simd_andc(r80_10ffff_tmp7, r80_10ffff_tmp12);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(bytetest_e0, carryQ.get_carry_in(7), r80_10ffff_tmp13));
          bytetest_e0_adv = simd_and(r80_10ffff_tmp13, bytetest_a0_bf);
          range_test_800_ffff_1 = simd_or(bytetest_e1_ef, bytetest_e0_adv);
          if (bitblock::any(range_test_800_ffff_1)) {
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r800_ffff_tmp3 = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r800_ffff_tmp5 = simd_or(basis_bits.bit_4, r800_ffff_tmp4);
            CC_Nd_966_96f_sfx_sfx = simd_and(r800_ffff_tmp3, r800_ffff_tmp5);
            r800_ffff_tmp6 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r800_ffff_tmp8 = simd_and(r800_ffff_tmp6, r800_ffff_tmp7);
            CC_a5 = simd_and(r800_ffff_tmp3, r800_ffff_tmp8);
            carryQ.cq[8] = carryout2carry(pablo_blk_Advance(CC_a5, carryQ.get_carry_in(8), r800_ffff_tmp9));
            CC_Nd_966_96f_sfx = simd_and(r800_ffff_tmp9, CC_Nd_966_96f_sfx_sfx);
            r800_ffff_tmp10 = simd_and(r80_10ffff_tmp1, r800_ffff_tmp2);
            r800_ffff_tmp11 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp12 = simd_or(r80_10ffff_tmp3, r800_ffff_tmp11);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            carryQ.cq[9] = carryout2carry(pablo_blk_Advance(CC_e0, carryQ.get_carry_in(9), r800_ffff_tmp13));
            CC_Nd_966_96f = simd_and(r800_ffff_tmp13, CC_Nd_966_96f_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_966_96f);
            CC_Nd_9e6_9ef_sfx_sfx = simd_and(r800_ffff_tmp3, r800_ffff_tmp5);
            r800_ffff_tmp14 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp15 = simd_and(r800_ffff_tmp6, r800_ffff_tmp14);
            CC_a7 = simd_and(r800_ffff_tmp3, r800_ffff_tmp15);
            carryQ.cq[10] = carryout2carry(pablo_blk_Advance(CC_a7, carryQ.get_carry_in(10), r800_ffff_tmp16));
            CC_Nd_9e6_9ef_sfx = simd_and(r800_ffff_tmp16, CC_Nd_9e6_9ef_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_9e6_9ef = simd_and(r800_ffff_tmp13, CC_Nd_9e6_9ef_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_9e6_9ef);
            CC_Nd_a66_a6f_sfx_sfx = simd_and(r800_ffff_tmp3, r800_ffff_tmp5);
            r800_ffff_tmp17 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r800_ffff_tmp18 = simd_and(r800_ffff_tmp17, r800_ffff_tmp7);
            CC_a9 = simd_and(r800_ffff_tmp3, r800_ffff_tmp18);
            carryQ.cq[11] = carryout2carry(pablo_blk_Advance(CC_a9, carryQ.get_carry_in(11), r800_ffff_tmp19));
            CC_Nd_a66_a6f_sfx = simd_and(r800_ffff_tmp19, CC_Nd_a66_a6f_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_a66_a6f = simd_and(r800_ffff_tmp13, CC_Nd_a66_a6f_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_a66_a6f);
            CC_Nd_ae6_aef_sfx_sfx = simd_and(r800_ffff_tmp3, r800_ffff_tmp5);
            r800_ffff_tmp20 = simd_and(r800_ffff_tmp17, r800_ffff_tmp14);
            CC_ab = simd_and(r800_ffff_tmp3, r800_ffff_tmp20);
            carryQ.cq[12] = carryout2carry(pablo_blk_Advance(CC_ab, carryQ.get_carry_in(12), r800_ffff_tmp21));
            CC_Nd_ae6_aef_sfx = simd_and(r800_ffff_tmp21, CC_Nd_ae6_aef_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_ae6_aef = simd_and(r800_ffff_tmp13, CC_Nd_ae6_aef_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_ae6_aef);
            CC_Nd_b66_b6f_sfx_sfx = simd_and(r800_ffff_tmp3, r800_ffff_tmp5);
            r800_ffff_tmp22 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r800_ffff_tmp23 = simd_and(r800_ffff_tmp22, r800_ffff_tmp7);
            CC_ad = simd_and(r800_ffff_tmp3, r800_ffff_tmp23);
            carryQ.cq[13] = carryout2carry(pablo_blk_Advance(CC_ad, carryQ.get_carry_in(13), r800_ffff_tmp24));
            CC_Nd_b66_b6f_sfx = simd_and(r800_ffff_tmp24, CC_Nd_b66_b6f_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_b66_b6f = simd_and(r800_ffff_tmp13, CC_Nd_b66_b6f_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_b66_b6f);
            CC_Nd_be6_bef_sfx_sfx = simd_and(r800_ffff_tmp3, r800_ffff_tmp5);
            r800_ffff_tmp25 = simd_and(r800_ffff_tmp22, r800_ffff_tmp14);
            CC_af = simd_and(r800_ffff_tmp3, r800_ffff_tmp25);
            carryQ.cq[14] = carryout2carry(pablo_blk_Advance(CC_af, carryQ.get_carry_in(14), r800_ffff_tmp26));
            CC_Nd_be6_bef_sfx = simd_and(r800_ffff_tmp26, CC_Nd_be6_bef_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_be6_bef = simd_and(r800_ffff_tmp13, CC_Nd_be6_bef_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_be6_bef);
            CC_Nd_c66_c6f_sfx_sfx = simd_and(r800_ffff_tmp3, r800_ffff_tmp5);
            r800_ffff_tmp27 = simd_and(r800_ffff_tmp1, tmp2);
            r800_ffff_tmp28 = simd_andc(r800_ffff_tmp7, r80_10ffff_tmp3);
            CC_b1 = simd_and(r800_ffff_tmp27, r800_ffff_tmp28);
            carryQ.cq[15] = carryout2carry(pablo_blk_Advance(CC_b1, carryQ.get_carry_in(15), r800_ffff_tmp29));
            CC_Nd_c66_c6f_sfx = simd_and(r800_ffff_tmp29, CC_Nd_c66_c6f_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_c66_c6f = simd_and(r800_ffff_tmp13, CC_Nd_c66_c6f_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_c66_c6f);
            CC_Nd_ce6_cef_sfx_sfx = simd_and(r800_ffff_tmp3, r800_ffff_tmp5);
            r800_ffff_tmp30 = simd_andc(r800_ffff_tmp14, r80_10ffff_tmp3);
            CC_b3 = simd_and(r800_ffff_tmp27, r800_ffff_tmp30);
            carryQ.cq[16] = carryout2carry(pablo_blk_Advance(CC_b3, carryQ.get_carry_in(16), r800_ffff_tmp31));
            CC_Nd_ce6_cef_sfx = simd_and(r800_ffff_tmp31, CC_Nd_ce6_cef_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_ce6_cef = simd_and(r800_ffff_tmp13, CC_Nd_ce6_cef_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_ce6_cef);
            CC_Nd_d66_d6f_sfx_sfx = simd_and(r800_ffff_tmp3, r800_ffff_tmp5);
            CC_b5 = simd_and(r800_ffff_tmp27, r800_ffff_tmp8);
            carryQ.cq[17] = carryout2carry(pablo_blk_Advance(CC_b5, carryQ.get_carry_in(17), r800_ffff_tmp32));
            CC_Nd_d66_d6f_sfx = simd_and(r800_ffff_tmp32, CC_Nd_d66_d6f_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_d66_d6f = simd_and(r800_ffff_tmp13, CC_Nd_d66_d6f_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_d66_d6f);
            r800_ffff_tmp33 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r800_ffff_tmp34 = simd_and(r800_ffff_tmp1, r800_ffff_tmp33);
            CC_Nd_e50_e59_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_b9 = simd_and(r800_ffff_tmp27, r800_ffff_tmp18);
            carryQ.cq[18] = carryout2carry(pablo_blk_Advance(CC_b9, carryQ.get_carry_in(18), r800_ffff_tmp35));
            CC_Nd_e50_e59_sfx = simd_and(r800_ffff_tmp35, CC_Nd_e50_e59_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_e50_e59 = simd_and(r800_ffff_tmp13, CC_Nd_e50_e59_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_e50_e59);
            CC_Nd_ed0_ed9_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_bb = simd_and(r800_ffff_tmp27, r800_ffff_tmp20);
            carryQ.cq[19] = carryout2carry(pablo_blk_Advance(CC_bb, carryQ.get_carry_in(19), r800_ffff_tmp36));
            CC_Nd_ed0_ed9_sfx = simd_and(r800_ffff_tmp36, CC_Nd_ed0_ed9_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_ed0_ed9 = simd_and(r800_ffff_tmp13, CC_Nd_ed0_ed9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_ed0_ed9);
            CC_Nd_f20_f29_sfx_sfx = simd_andc(r800_ffff_tmp3, tmp5);
            r800_ffff_tmp37 = simd_andc(r800_ffff_tmp22, r800_ffff_tmp11);
            CC_bc = simd_and(r800_ffff_tmp27, r800_ffff_tmp37);
            carryQ.cq[20] = carryout2carry(pablo_blk_Advance(CC_bc, carryQ.get_carry_in(20), r800_ffff_tmp38));
            CC_Nd_f20_f29_sfx = simd_and(r800_ffff_tmp38, CC_Nd_f20_f29_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_f20_f29 = simd_and(r800_ffff_tmp13, CC_Nd_f20_f29_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_f20_f29);
            r800_ffff_tmp39 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r800_ffff_tmp40 = simd_andc(r800_ffff_tmp1, r800_ffff_tmp39);
            CC_Nd_1040_1049_sfx_sfx = simd_andc(r800_ffff_tmp40, tmp5);
            CC_81 = simd_and(r800_ffff_tmp40, r800_ffff_tmp28);
            carryQ.cq[21] = carryout2carry(pablo_blk_Advance(CC_81, carryQ.get_carry_in(21), r800_ffff_tmp41));
            CC_Nd_1040_1049_sfx = simd_and(r800_ffff_tmp41, CC_Nd_1040_1049_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            carryQ.cq[22] = carryout2carry(pablo_blk_Advance(CC_e1, carryQ.get_carry_in(22), r800_ffff_tmp42));
            CC_Nd_1040_1049 = simd_and(r800_ffff_tmp42, CC_Nd_1040_1049_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1040_1049);
            CC_Nd_1090_1099_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            r800_ffff_tmp43 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp44 = simd_andc(r800_ffff_tmp43, r80_10ffff_tmp3);
            CC_82 = simd_and(r800_ffff_tmp40, r800_ffff_tmp44);
            carryQ.cq[23] = carryout2carry(pablo_blk_Advance(CC_82, carryQ.get_carry_in(23), r800_ffff_tmp45));
            CC_Nd_1090_1099_sfx = simd_and(r800_ffff_tmp45, CC_Nd_1090_1099_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_1090_1099 = simd_and(r800_ffff_tmp42, CC_Nd_1090_1099_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1090_1099);
            CC_Nd_17e0_17e9_sfx_sfx = simd_andc(r800_ffff_tmp3, tmp5);
            CC_9f = simd_and(r800_ffff_tmp34, r800_ffff_tmp25);
            carryQ.cq[24] = carryout2carry(pablo_blk_Advance(CC_9f, carryQ.get_carry_in(24), r800_ffff_tmp46));
            CC_Nd_17e0_17e9_sfx = simd_and(r800_ffff_tmp46, CC_Nd_17e0_17e9_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_17e0_17e9 = simd_and(r800_ffff_tmp42, CC_Nd_17e0_17e9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_17e0_17e9);
            CC_Nd_1810_1819_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_a0 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp12);
            carryQ.cq[25] = carryout2carry(pablo_blk_Advance(CC_a0, carryQ.get_carry_in(25), r800_ffff_tmp47));
            CC_Nd_1810_1819_sfx = simd_and(r800_ffff_tmp47, CC_Nd_1810_1819_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_1810_1819 = simd_and(r800_ffff_tmp42, CC_Nd_1810_1819_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1810_1819);
            CC_Nd_1946_194f_sfx_sfx = simd_and(r800_ffff_tmp40, r800_ffff_tmp5);
            CC_a5 = simd_and(r800_ffff_tmp3, r800_ffff_tmp8);
            CC_Nd_1946_194f_sfx = simd_and(r800_ffff_tmp9, CC_Nd_1946_194f_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_1946_194f = simd_and(r800_ffff_tmp42, CC_Nd_1946_194f_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1946_194f);
            CC_Nd_19d0_19d9_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_a7 = simd_and(r800_ffff_tmp3, r800_ffff_tmp15);
            CC_Nd_19d0_19d9_sfx = simd_and(r800_ffff_tmp16, CC_Nd_19d0_19d9_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_19d0_19d9 = simd_and(r800_ffff_tmp42, CC_Nd_19d0_19d9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_19d0_19d9);
            CC_Nd_1a80_1a89_sfx_sfx = simd_andc(r800_ffff_tmp40, tmp5);
            r800_ffff_tmp48 = simd_and(r800_ffff_tmp17, r800_ffff_tmp43);
            CC_aa = simd_and(r800_ffff_tmp3, r800_ffff_tmp48);
            carryQ.cq[26] = carryout2carry(pablo_blk_Advance(CC_aa, carryQ.get_carry_in(26), r800_ffff_tmp49));
            CC_Nd_1a80_1a89_sfx = simd_and(r800_ffff_tmp49, CC_Nd_1a80_1a89_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_1a80_1a89 = simd_and(r800_ffff_tmp42, CC_Nd_1a80_1a89_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1a80_1a89);
            CC_Nd_1a90_1a99_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_aa = simd_and(r800_ffff_tmp3, r800_ffff_tmp48);
            CC_Nd_1a90_1a99_sfx = simd_and(r800_ffff_tmp49, CC_Nd_1a90_1a99_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_1a90_1a99 = simd_and(r800_ffff_tmp42, CC_Nd_1a90_1a99_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1a90_1a99);
            CC_Nd_1b50_1b59_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_ad = simd_and(r800_ffff_tmp3, r800_ffff_tmp23);
            CC_Nd_1b50_1b59_sfx = simd_and(r800_ffff_tmp24, CC_Nd_1b50_1b59_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_1b50_1b59 = simd_and(r800_ffff_tmp42, CC_Nd_1b50_1b59_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1b50_1b59);
            CC_Nd_1bb0_1bb9_sfx_sfx = simd_andc(r800_ffff_tmp27, tmp5);
            r800_ffff_tmp50 = simd_and(r800_ffff_tmp22, r800_ffff_tmp43);
            CC_ae = simd_and(r800_ffff_tmp3, r800_ffff_tmp50);
            carryQ.cq[27] = carryout2carry(pablo_blk_Advance(CC_ae, carryQ.get_carry_in(27), r800_ffff_tmp51));
            CC_Nd_1bb0_1bb9_sfx = simd_and(r800_ffff_tmp51, CC_Nd_1bb0_1bb9_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_1bb0_1bb9 = simd_and(r800_ffff_tmp42, CC_Nd_1bb0_1bb9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1bb0_1bb9);
            CC_Nd_1c40_1c49_sfx_sfx = simd_andc(r800_ffff_tmp40, tmp5);
            CC_b1 = simd_and(r800_ffff_tmp27, r800_ffff_tmp28);
            CC_Nd_1c40_1c49_sfx = simd_and(r800_ffff_tmp29, CC_Nd_1c40_1c49_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_1c40_1c49 = simd_and(r800_ffff_tmp42, CC_Nd_1c40_1c49_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1c40_1c49);
            CC_Nd_1c50_1c59_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_b1 = simd_and(r800_ffff_tmp27, r800_ffff_tmp28);
            CC_Nd_1c50_1c59_sfx = simd_and(r800_ffff_tmp29, CC_Nd_1c50_1c59_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_1c50_1c59 = simd_and(r800_ffff_tmp42, CC_Nd_1c50_1c59_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1c50_1c59);
            CC_Nd_a620_a629_sfx_sfx = simd_andc(r800_ffff_tmp3, tmp5);
            r800_ffff_tmp52 = simd_andc(r800_ffff_tmp17, r800_ffff_tmp11);
            CC_98 = simd_and(r800_ffff_tmp34, r800_ffff_tmp52);
            carryQ.cq[28] = carryout2carry(pablo_blk_Advance(CC_98, carryQ.get_carry_in(28), r800_ffff_tmp53));
            CC_Nd_a620_a629_sfx = simd_and(r800_ffff_tmp53, CC_Nd_a620_a629_sfx_sfx);
            CC_ea = simd_and(r800_ffff_tmp10, r800_ffff_tmp48);
            carryQ.cq[29] = carryout2carry(pablo_blk_Advance(CC_ea, carryQ.get_carry_in(29), r800_ffff_tmp54));
            CC_Nd_a620_a629 = simd_and(r800_ffff_tmp54, CC_Nd_a620_a629_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_a620_a629);
            CC_Nd_a8d0_a8d9_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_a3 = simd_and(r800_ffff_tmp3, r800_ffff_tmp30);
            carryQ.cq[30] = carryout2carry(pablo_blk_Advance(CC_a3, carryQ.get_carry_in(30), r800_ffff_tmp55));
            CC_Nd_a8d0_a8d9_sfx = simd_and(r800_ffff_tmp55, CC_Nd_a8d0_a8d9_sfx_sfx);
            CC_ea = simd_and(r800_ffff_tmp10, r800_ffff_tmp48);
            CC_Nd_a8d0_a8d9 = simd_and(r800_ffff_tmp54, CC_Nd_a8d0_a8d9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_a8d0_a8d9);
            CC_Nd_a900_a909_sfx_sfx = simd_andc(r800_ffff_tmp40, tmp5);
            r800_ffff_tmp56 = simd_andc(r800_ffff_tmp6, r800_ffff_tmp11);
            CC_a4 = simd_and(r800_ffff_tmp3, r800_ffff_tmp56);
            carryQ.cq[31] = carryout2carry(pablo_blk_Advance(CC_a4, carryQ.get_carry_in(31), r800_ffff_tmp57));
            CC_Nd_a900_a909_sfx = simd_and(r800_ffff_tmp57, CC_Nd_a900_a909_sfx_sfx);
            CC_ea = simd_and(r800_ffff_tmp10, r800_ffff_tmp48);
            CC_Nd_a900_a909 = simd_and(r800_ffff_tmp54, CC_Nd_a900_a909_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_a900_a909);
            CC_Nd_a9d0_a9d9_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_a7 = simd_and(r800_ffff_tmp3, r800_ffff_tmp15);
            CC_Nd_a9d0_a9d9_sfx = simd_and(r800_ffff_tmp16, CC_Nd_a9d0_a9d9_sfx_sfx);
            CC_ea = simd_and(r800_ffff_tmp10, r800_ffff_tmp48);
            CC_Nd_a9d0_a9d9 = simd_and(r800_ffff_tmp54, CC_Nd_a9d0_a9d9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_a9d0_a9d9);
            CC_Nd_aa50_aa59_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_a9 = simd_and(r800_ffff_tmp3, r800_ffff_tmp18);
            CC_Nd_aa50_aa59_sfx = simd_and(r800_ffff_tmp19, CC_Nd_aa50_aa59_sfx_sfx);
            CC_ea = simd_and(r800_ffff_tmp10, r800_ffff_tmp48);
            CC_Nd_aa50_aa59 = simd_and(r800_ffff_tmp54, CC_Nd_aa50_aa59_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_aa50_aa59);
            CC_Nd_abf0_abf9_sfx_sfx = simd_andc(r800_ffff_tmp27, tmp5);
            CC_af = simd_and(r800_ffff_tmp3, r800_ffff_tmp25);
            CC_Nd_abf0_abf9_sfx = simd_and(r800_ffff_tmp26, CC_Nd_abf0_abf9_sfx_sfx);
            CC_ea = simd_and(r800_ffff_tmp10, r800_ffff_tmp48);
            CC_Nd_abf0_abf9 = simd_and(r800_ffff_tmp54, CC_Nd_abf0_abf9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_abf0_abf9);
            CC_Nd_ff10_ff19_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_bc = simd_and(r800_ffff_tmp27, r800_ffff_tmp37);
            CC_Nd_ff10_ff19_sfx = simd_and(r800_ffff_tmp38, CC_Nd_ff10_ff19_sfx_sfx);
            CC_ef = simd_and(r800_ffff_tmp10, r800_ffff_tmp25);
            carryQ.cq[32] = carryout2carry(pablo_blk_Advance(CC_ef, carryQ.get_carry_in(32), r800_ffff_tmp58));
            CC_Nd_ff10_ff19 = simd_and(r800_ffff_tmp58, CC_Nd_ff10_ff19_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_ff10_ff19);
          }
          r80_10ffff_tmp14 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          bytetest_80_8f = simd_andc(r80_10ffff_tmp11, r80_10ffff_tmp14);
          r80_10ffff_tmp15 = simd_and(r80_10ffff_tmp1, tmp2);
          r80_10ffff_tmp16 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r80_10ffff_tmp17 = simd_andc(r80_10ffff_tmp16, r80_10ffff_tmp8);
          bytetest_f4 = simd_and(r80_10ffff_tmp15, r80_10ffff_tmp17);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(bytetest_f4, carryQ.get_carry_in(33), r80_10ffff_tmp18));
          bytetest_f4_adv = simd_and(r80_10ffff_tmp18, bytetest_80_8f);
          r80_10ffff_tmp19 = simd_andc(r80_10ffff_tmp15, r80_10ffff_tmp3);
          bytetest_f1_f3 = simd_and(r80_10ffff_tmp19, r80_10ffff_tmp8);
          bytetest_90_bf = simd_and(r80_10ffff_tmp11, r80_10ffff_tmp14);
          bytetest_f0 = simd_andc(r80_10ffff_tmp15, r80_10ffff_tmp12);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(bytetest_f0, carryQ.get_carry_in(34), r80_10ffff_tmp20));
          bytetest_f0_adv = simd_and(r80_10ffff_tmp20, bytetest_90_bf);
          range_test_10000_fffff_1 = simd_or(bytetest_f1_f3, bytetest_f0_adv);
          range_test_10000_10ffff_1 = simd_or(bytetest_f4_adv, range_test_10000_fffff_1);
          if (bitblock::any(range_test_10000_10ffff_1)) {
            r10000_10ffff_tmp1 = simd_and(r80_10ffff_tmp11, r80_10ffff_tmp6);
            CC_Nd_104a0_104a9_sfx_sfx_sfx = simd_andc(r10000_10ffff_tmp1, tmp5);
            r10000_10ffff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp3 = simd_and(r80_10ffff_tmp11, r10000_10ffff_tmp2);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp5 = simd_andc(r10000_10ffff_tmp4, r80_10ffff_tmp3);
            CC_92 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp5);
            carryQ.cq[35] = carryout2carry(pablo_blk_Advance(CC_92, carryQ.get_carry_in(35), r10000_10ffff_tmp6));
            CC_Nd_104a0_104a9_sfx_sfx = simd_and(r10000_10ffff_tmp6, CC_Nd_104a0_104a9_sfx_sfx_sfx);
            CC_90 = simd_andc(r10000_10ffff_tmp3, r80_10ffff_tmp12);
            carryQ.cq[36] = carryout2carry(pablo_blk_Advance(CC_90, carryQ.get_carry_in(36), r10000_10ffff_tmp7));
            CC_Nd_104a0_104a9_sfx = simd_and(r10000_10ffff_tmp7, CC_Nd_104a0_104a9_sfx_sfx);
            r10000_10ffff_tmp8 = simd_and(r80_10ffff_tmp1, tmp2);
            CC_f0 = simd_andc(r10000_10ffff_tmp8, r80_10ffff_tmp12);
            carryQ.cq[37] = carryout2carry(pablo_blk_Advance(CC_f0, carryQ.get_carry_in(37), r10000_10ffff_tmp9));
            CC_Nd_104a0_104a9 = simd_and(r10000_10ffff_tmp9, CC_Nd_104a0_104a9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_104a0_104a9);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp10);
            CC_Nd_11066_1106f_sfx_sfx_sfx = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp11);
            r10000_10ffff_tmp12 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp13 = simd_andc(r80_10ffff_tmp11, r10000_10ffff_tmp12);
            r10000_10ffff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp15 = simd_andc(r10000_10ffff_tmp14, r80_10ffff_tmp3);
            CC_81 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp15);
            carryQ.cq[38] = carryout2carry(pablo_blk_Advance(CC_81, carryQ.get_carry_in(38), r10000_10ffff_tmp16));
            CC_Nd_11066_1106f_sfx_sfx = simd_and(r10000_10ffff_tmp16, CC_Nd_11066_1106f_sfx_sfx_sfx);
            CC_91 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp15);
            carryQ.cq[39] = carryout2carry(pablo_blk_Advance(CC_91, carryQ.get_carry_in(39), r10000_10ffff_tmp17));
            CC_Nd_11066_1106f_sfx = simd_and(r10000_10ffff_tmp17, CC_Nd_11066_1106f_sfx_sfx);
            CC_f0 = simd_andc(r10000_10ffff_tmp8, r80_10ffff_tmp12);
            CC_Nd_11066_1106f = simd_and(r10000_10ffff_tmp9, CC_Nd_11066_1106f_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_11066_1106f);
            r10000_10ffff_tmp18 = simd_and(r80_10ffff_tmp11, tmp2);
            CC_Nd_110f0_110f9_sfx_sfx_sfx = simd_andc(r10000_10ffff_tmp18, tmp5);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp20 = simd_andc(r10000_10ffff_tmp19, r80_10ffff_tmp3);
            CC_83 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp20);
            carryQ.cq[40] = carryout2carry(pablo_blk_Advance(CC_83, carryQ.get_carry_in(40), r10000_10ffff_tmp21));
            CC_Nd_110f0_110f9_sfx_sfx = simd_and(r10000_10ffff_tmp21, CC_Nd_110f0_110f9_sfx_sfx_sfx);
            CC_91 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp15);
            CC_Nd_110f0_110f9_sfx = simd_and(r10000_10ffff_tmp17, CC_Nd_110f0_110f9_sfx_sfx);
            CC_f0 = simd_andc(r10000_10ffff_tmp8, r80_10ffff_tmp12);
            CC_Nd_110f0_110f9 = simd_and(r10000_10ffff_tmp9, CC_Nd_110f0_110f9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_110f0_110f9);
            CC_Nd_11136_1113f_sfx_sfx_sfx = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp11);
            r10000_10ffff_tmp22 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp23 = simd_andc(r10000_10ffff_tmp22, r80_10ffff_tmp8);
            CC_84 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp23);
            carryQ.cq[41] = carryout2carry(pablo_blk_Advance(CC_84, carryQ.get_carry_in(41), r10000_10ffff_tmp24));
            CC_Nd_11136_1113f_sfx_sfx = simd_and(r10000_10ffff_tmp24, CC_Nd_11136_1113f_sfx_sfx_sfx);
            CC_91 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp15);
            CC_Nd_11136_1113f_sfx = simd_and(r10000_10ffff_tmp17, CC_Nd_11136_1113f_sfx_sfx);
            CC_f0 = simd_andc(r10000_10ffff_tmp8, r80_10ffff_tmp12);
            CC_Nd_11136_1113f = simd_and(r10000_10ffff_tmp9, CC_Nd_11136_1113f_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_11136_1113f);
            CC_Nd_111d0_111d9_sfx_sfx_sfx = simd_andc(r10000_10ffff_tmp3, tmp5);
            r10000_10ffff_tmp25 = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp19);
            CC_87 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp25);
            carryQ.cq[42] = carryout2carry(pablo_blk_Advance(CC_87, carryQ.get_carry_in(42), r10000_10ffff_tmp26));
            CC_Nd_111d0_111d9_sfx_sfx = simd_and(r10000_10ffff_tmp26, CC_Nd_111d0_111d9_sfx_sfx_sfx);
            CC_91 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp15);
            CC_Nd_111d0_111d9_sfx = simd_and(r10000_10ffff_tmp17, CC_Nd_111d0_111d9_sfx_sfx);
            CC_f0 = simd_andc(r10000_10ffff_tmp8, r80_10ffff_tmp12);
            CC_Nd_111d0_111d9 = simd_and(r10000_10ffff_tmp9, CC_Nd_111d0_111d9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_111d0_111d9);
            CC_Nd_116c0_116c9_sfx_sfx_sfx = simd_andc(r10000_10ffff_tmp13, tmp5);
            r10000_10ffff_tmp27 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp28 = simd_and(r10000_10ffff_tmp27, r10000_10ffff_tmp19);
            CC_9b = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp28);
            carryQ.cq[43] = carryout2carry(pablo_blk_Advance(CC_9b, carryQ.get_carry_in(43), r10000_10ffff_tmp29));
            CC_Nd_116c0_116c9_sfx_sfx = simd_and(r10000_10ffff_tmp29, CC_Nd_116c0_116c9_sfx_sfx_sfx);
            CC_91 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp15);
            CC_Nd_116c0_116c9_sfx = simd_and(r10000_10ffff_tmp17, CC_Nd_116c0_116c9_sfx_sfx);
            CC_f0 = simd_andc(r10000_10ffff_tmp8, r80_10ffff_tmp12);
            CC_Nd_116c0_116c9 = simd_and(r10000_10ffff_tmp9, CC_Nd_116c0_116c9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_116c0_116c9);
            r10000_10ffff_tmp30 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp31 = simd_and(r10000_10ffff_tmp30, basis_bits.bit_6);
            r10000_10ffff_tmp32 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp31);
            r10000_10ffff_tmp33 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp32);
            CC_Nd_1d7ce_1d7ff_sfx_sfx_sfx = simd_and(r80_10ffff_tmp11, r10000_10ffff_tmp33);
            r10000_10ffff_tmp34 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp19);
            CC_9f = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp34);
            carryQ.cq[44] = carryout2carry(pablo_blk_Advance(CC_9f, carryQ.get_carry_in(44), r10000_10ffff_tmp35));
            CC_Nd_1d7ce_1d7ff_sfx_sfx = simd_and(r10000_10ffff_tmp35, CC_Nd_1d7ce_1d7ff_sfx_sfx_sfx);
            r10000_10ffff_tmp36 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp14);
            CC_9d = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp36);
            carryQ.cq[45] = carryout2carry(pablo_blk_Advance(CC_9d, carryQ.get_carry_in(45), r10000_10ffff_tmp37));
            CC_Nd_1d7ce_1d7ff_sfx = simd_and(r10000_10ffff_tmp37, CC_Nd_1d7ce_1d7ff_sfx_sfx);
            CC_f0 = simd_andc(r10000_10ffff_tmp8, r80_10ffff_tmp12);
            CC_Nd_1d7ce_1d7ff = simd_and(r10000_10ffff_tmp9, CC_Nd_1d7ce_1d7ff_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1d7ce_1d7ff);
          }
        }
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Nd & struct_Nd, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, CC_Nd_30_39, tmp6, tmp7, tmp8, tmp9;
		BitBlock tmp10, bytetest_c2_df, tmp11, tmp12, tmp13, tmp14, tmp15;
		BitBlock bytetest_e1_ef, tmp16, bytetest_a0_bf, tmp17, bytetest_e0, tmp18;
		BitBlock bytetest_e0_adv, range_test_800_ffff_1, test_80_ffff, tmp19;
		BitBlock bytetest_80_8f, tmp20, tmp21, tmp22, bytetest_f4, tmp23;
		BitBlock bytetest_f4_adv, tmp24, bytetest_f1_f3, bytetest_90_bf, bytetest_f0;
		BitBlock tmp25, bytetest_f0_adv, range_test_10000_fffff_1;
		BitBlock range_test_10000_10ffff_1, test_80_10ffff, r80_10ffff_tmp1;
		BitBlock r80_10ffff_tmp2, r80_10ffff_tmp3, r80_10ffff_tmp4, r80_10ffff_tmp5;
		BitBlock r80_7ff_tmp1, r80_7ff_tmp2, bytetest_d0_df, r400_7ff_tmp1;
		BitBlock r400_7ff_tmp2, r400_7ff_tmp3, r400_7ff_tmp4, bytetest_d8_db;
		BitBlock r600_6ff_tmp1, r600_6ff_tmp2, r600_6ff_tmp3, CC_Nd_660_669_sfx;
		BitBlock r600_6ff_tmp4, r600_6ff_tmp5, r600_6ff_tmp6, r600_6ff_tmp7;
		BitBlock r600_6ff_tmp8, r600_6ff_tmp9, CC_d9, r600_6ff_tmp10, CC_Nd_660_669;
		BitBlock r600_6ff_tmp11, CC_Nd_6f0_6f9_sfx, r600_6ff_tmp12, r600_6ff_tmp13;
		BitBlock CC_db, r600_6ff_tmp14, CC_Nd_6f0_6f9, r400_7ff_tmp5, bytetest_dc_df;
		BitBlock bytetest_80_bf, r700_7ff_tmp1, r700_7ff_tmp2, r700_7ff_tmp3;
		BitBlock bytetest_df, r700_7ff_tmp4, bytetest_df_adv, r7c0_7ff_tmp1;
		BitBlock r7c0_7ff_tmp2, r7c0_7ff_tmp3, CC_Nd_7c0_7c9_sfx, r7c0_7ff_tmp4;
		BitBlock r7c0_7ff_tmp5, r7c0_7ff_tmp6, CC_df, r7c0_7ff_tmp7, CC_Nd_7c0_7c9;
		BitBlock r80_10ffff_tmp6, r80_10ffff_tmp7, r80_10ffff_tmp8, r80_10ffff_tmp9;
		BitBlock r80_10ffff_tmp10, r80_10ffff_tmp11, r80_10ffff_tmp12;
		BitBlock r80_10ffff_tmp13, r800_ffff_tmp1, r800_ffff_tmp2, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, r800_ffff_tmp5, CC_Nd_966_96f_sfx_sfx, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, r800_ffff_tmp8, CC_a5, r800_ffff_tmp9;
		BitBlock CC_Nd_966_96f_sfx, r800_ffff_tmp10, r800_ffff_tmp11, r800_ffff_tmp12;
		BitBlock CC_e0, r800_ffff_tmp13, CC_Nd_966_96f, CC_Nd_9e6_9ef_sfx_sfx;
		BitBlock r800_ffff_tmp14, r800_ffff_tmp15, CC_a7, r800_ffff_tmp16;
		BitBlock CC_Nd_9e6_9ef_sfx, CC_Nd_9e6_9ef, CC_Nd_a66_a6f_sfx_sfx;
		BitBlock r800_ffff_tmp17, r800_ffff_tmp18, CC_a9, r800_ffff_tmp19;
		BitBlock CC_Nd_a66_a6f_sfx, CC_Nd_a66_a6f, CC_Nd_ae6_aef_sfx_sfx;
		BitBlock r800_ffff_tmp20, CC_ab, r800_ffff_tmp21, CC_Nd_ae6_aef_sfx;
		BitBlock CC_Nd_ae6_aef, CC_Nd_b66_b6f_sfx_sfx, r800_ffff_tmp22;
		BitBlock r800_ffff_tmp23, CC_ad, r800_ffff_tmp24, CC_Nd_b66_b6f_sfx;
		BitBlock CC_Nd_b66_b6f, CC_Nd_be6_bef_sfx_sfx, r800_ffff_tmp25, CC_af;
		BitBlock r800_ffff_tmp26, CC_Nd_be6_bef_sfx, CC_Nd_be6_bef;
		BitBlock CC_Nd_c66_c6f_sfx_sfx, r800_ffff_tmp27, r800_ffff_tmp28, CC_b1;
		BitBlock r800_ffff_tmp29, CC_Nd_c66_c6f_sfx, CC_Nd_c66_c6f;
		BitBlock CC_Nd_ce6_cef_sfx_sfx, r800_ffff_tmp30, CC_b3, r800_ffff_tmp31;
		BitBlock CC_Nd_ce6_cef_sfx, CC_Nd_ce6_cef, CC_Nd_d66_d6f_sfx_sfx, CC_b5;
		BitBlock r800_ffff_tmp32, CC_Nd_d66_d6f_sfx, CC_Nd_d66_d6f, r800_ffff_tmp33;
		BitBlock r800_ffff_tmp34, CC_Nd_e50_e59_sfx_sfx, CC_b9, r800_ffff_tmp35;
		BitBlock CC_Nd_e50_e59_sfx, CC_Nd_e50_e59, CC_Nd_ed0_ed9_sfx_sfx, CC_bb;
		BitBlock r800_ffff_tmp36, CC_Nd_ed0_ed9_sfx, CC_Nd_ed0_ed9;
		BitBlock CC_Nd_f20_f29_sfx_sfx, r800_ffff_tmp37, CC_bc, r800_ffff_tmp38;
		BitBlock CC_Nd_f20_f29_sfx, CC_Nd_f20_f29, r800_ffff_tmp39, r800_ffff_tmp40;
		BitBlock CC_Nd_1040_1049_sfx_sfx, CC_81, r800_ffff_tmp41, CC_Nd_1040_1049_sfx;
		BitBlock CC_e1, r800_ffff_tmp42, CC_Nd_1040_1049, CC_Nd_1090_1099_sfx_sfx;
		BitBlock r800_ffff_tmp43, r800_ffff_tmp44, CC_82, r800_ffff_tmp45;
		BitBlock CC_Nd_1090_1099_sfx, CC_Nd_1090_1099, CC_Nd_17e0_17e9_sfx_sfx, CC_9f;
		BitBlock r800_ffff_tmp46, CC_Nd_17e0_17e9_sfx, CC_Nd_17e0_17e9;
		BitBlock CC_Nd_1810_1819_sfx_sfx, CC_a0, r800_ffff_tmp47, CC_Nd_1810_1819_sfx;
		BitBlock CC_Nd_1810_1819, CC_Nd_1946_194f_sfx_sfx, CC_Nd_1946_194f_sfx;
		BitBlock CC_Nd_1946_194f, CC_Nd_19d0_19d9_sfx_sfx, CC_Nd_19d0_19d9_sfx;
		BitBlock CC_Nd_19d0_19d9, CC_Nd_1a80_1a89_sfx_sfx, r800_ffff_tmp48, CC_aa;
		BitBlock r800_ffff_tmp49, CC_Nd_1a80_1a89_sfx, CC_Nd_1a80_1a89;
		BitBlock CC_Nd_1a90_1a99_sfx_sfx, CC_Nd_1a90_1a99_sfx, CC_Nd_1a90_1a99;
		BitBlock CC_Nd_1b50_1b59_sfx_sfx, CC_Nd_1b50_1b59_sfx, CC_Nd_1b50_1b59;
		BitBlock CC_Nd_1bb0_1bb9_sfx_sfx, r800_ffff_tmp50, CC_ae, r800_ffff_tmp51;
		BitBlock CC_Nd_1bb0_1bb9_sfx, CC_Nd_1bb0_1bb9, CC_Nd_1c40_1c49_sfx_sfx;
		BitBlock CC_Nd_1c40_1c49_sfx, CC_Nd_1c40_1c49, CC_Nd_1c50_1c59_sfx_sfx;
		BitBlock CC_Nd_1c50_1c59_sfx, CC_Nd_1c50_1c59, CC_Nd_a620_a629_sfx_sfx;
		BitBlock r800_ffff_tmp52, CC_98, r800_ffff_tmp53, CC_Nd_a620_a629_sfx, CC_ea;
		BitBlock r800_ffff_tmp54, CC_Nd_a620_a629, CC_Nd_a8d0_a8d9_sfx_sfx, CC_a3;
		BitBlock r800_ffff_tmp55, CC_Nd_a8d0_a8d9_sfx, CC_Nd_a8d0_a8d9;
		BitBlock CC_Nd_a900_a909_sfx_sfx, r800_ffff_tmp56, CC_a4, r800_ffff_tmp57;
		BitBlock CC_Nd_a900_a909_sfx, CC_Nd_a900_a909, CC_Nd_a9d0_a9d9_sfx_sfx;
		BitBlock CC_Nd_a9d0_a9d9_sfx, CC_Nd_a9d0_a9d9, CC_Nd_aa50_aa59_sfx_sfx;
		BitBlock CC_Nd_aa50_aa59_sfx, CC_Nd_aa50_aa59, CC_Nd_abf0_abf9_sfx_sfx;
		BitBlock CC_Nd_abf0_abf9_sfx, CC_Nd_abf0_abf9, CC_Nd_ff10_ff19_sfx_sfx;
		BitBlock CC_Nd_ff10_ff19_sfx, CC_ef, r800_ffff_tmp58, CC_Nd_ff10_ff19;
		BitBlock r80_10ffff_tmp14, r80_10ffff_tmp15, r80_10ffff_tmp16;
		BitBlock r80_10ffff_tmp17, r80_10ffff_tmp18, r80_10ffff_tmp19;
		BitBlock r80_10ffff_tmp20, r10000_10ffff_tmp1, CC_Nd_104a0_104a9_sfx_sfx_sfx;
		BitBlock r10000_10ffff_tmp2, r10000_10ffff_tmp3, r10000_10ffff_tmp4;
		BitBlock r10000_10ffff_tmp5, CC_92, r10000_10ffff_tmp6;
		BitBlock CC_Nd_104a0_104a9_sfx_sfx, CC_90, r10000_10ffff_tmp7;
		BitBlock CC_Nd_104a0_104a9_sfx, r10000_10ffff_tmp8, CC_f0, r10000_10ffff_tmp9;
		BitBlock CC_Nd_104a0_104a9, r10000_10ffff_tmp10, r10000_10ffff_tmp11;
		BitBlock CC_Nd_11066_1106f_sfx_sfx_sfx, r10000_10ffff_tmp12;
		BitBlock r10000_10ffff_tmp13, r10000_10ffff_tmp14, r10000_10ffff_tmp15;
		BitBlock r10000_10ffff_tmp16, CC_Nd_11066_1106f_sfx_sfx, CC_91;
		BitBlock r10000_10ffff_tmp17, CC_Nd_11066_1106f_sfx, CC_Nd_11066_1106f;
		BitBlock r10000_10ffff_tmp18, CC_Nd_110f0_110f9_sfx_sfx_sfx;
		BitBlock r10000_10ffff_tmp19, r10000_10ffff_tmp20, CC_83, r10000_10ffff_tmp21;
		BitBlock CC_Nd_110f0_110f9_sfx_sfx, CC_Nd_110f0_110f9_sfx, CC_Nd_110f0_110f9;
		BitBlock CC_Nd_11136_1113f_sfx_sfx_sfx, r10000_10ffff_tmp22;
		BitBlock r10000_10ffff_tmp23, CC_84, r10000_10ffff_tmp24;
		BitBlock CC_Nd_11136_1113f_sfx_sfx, CC_Nd_11136_1113f_sfx, CC_Nd_11136_1113f;
		BitBlock CC_Nd_111d0_111d9_sfx_sfx_sfx, r10000_10ffff_tmp25, CC_87;
		BitBlock r10000_10ffff_tmp26, CC_Nd_111d0_111d9_sfx_sfx, CC_Nd_111d0_111d9_sfx;
		BitBlock CC_Nd_111d0_111d9, CC_Nd_116c0_116c9_sfx_sfx_sfx, r10000_10ffff_tmp27;
		BitBlock r10000_10ffff_tmp28, CC_9b, r10000_10ffff_tmp29;
		BitBlock CC_Nd_116c0_116c9_sfx_sfx, CC_Nd_116c0_116c9_sfx, CC_Nd_116c0_116c9;
		BitBlock r10000_10ffff_tmp30, r10000_10ffff_tmp31, r10000_10ffff_tmp32;
		BitBlock r10000_10ffff_tmp33, CC_Nd_1d7ce_1d7ff_sfx_sfx_sfx;
		BitBlock r10000_10ffff_tmp34, r10000_10ffff_tmp35, CC_Nd_1d7ce_1d7ff_sfx_sfx;
		BitBlock r10000_10ffff_tmp36, CC_9d, r10000_10ffff_tmp37;
		BitBlock CC_Nd_1d7ce_1d7ff_sfx, CC_Nd_1d7ce_1d7ff;




        struct_Nd.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        CC_Nd_30_39 = simd_andc(tmp3, tmp5);
        struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_30_39);
        tmp6 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp7 = simd_andc(tmp6, basis_bits.bit_2);
        tmp8 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp9 = simd_or(tmp8, basis_bits.bit_6);
        tmp10 = simd_or(basis_bits.bit_3, tmp9);
        bytetest_c2_df = simd_and(tmp7, tmp10);
        tmp11 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp12 = simd_and(tmp6, tmp11);
        tmp13 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp14 = simd_or(basis_bits.bit_5, tmp13);
        tmp15 = simd_or(basis_bits.bit_4, tmp14);
        bytetest_e1_ef = simd_and(tmp12, tmp15);
        tmp16 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        bytetest_a0_bf = simd_and(tmp16, basis_bits.bit_2);
        tmp17 = simd_or(tmp8, tmp13);
        bytetest_e0 = simd_andc(tmp12, tmp17);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(bytetest_e0, carryQ.get_carry_in(0), tmp18));
        bytetest_e0_adv = simd_and(tmp18, bytetest_a0_bf);
        range_test_800_ffff_1 = simd_or(bytetest_e1_ef, bytetest_e0_adv);
        test_80_ffff = simd_or(bytetest_c2_df, range_test_800_ffff_1);
        tmp19 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        bytetest_80_8f = simd_andc(tmp16, tmp19);
        tmp20 = simd_and(tmp6, tmp2);
        tmp21 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp22 = simd_andc(tmp21, tmp13);
        bytetest_f4 = simd_and(tmp20, tmp22);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(bytetest_f4, carryQ.get_carry_in(1), tmp23));
        bytetest_f4_adv = simd_and(tmp23, bytetest_80_8f);
        tmp24 = simd_andc(tmp20, tmp8);
        bytetest_f1_f3 = simd_and(tmp24, tmp13);
        bytetest_90_bf = simd_and(tmp16, tmp19);
        bytetest_f0 = simd_andc(tmp20, tmp17);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(bytetest_f0, carryQ.get_carry_in(2), tmp25));
        bytetest_f0_adv = simd_and(tmp25, bytetest_90_bf);
        range_test_10000_fffff_1 = simd_or(bytetest_f1_f3, bytetest_f0_adv);
        range_test_10000_10ffff_1 = simd_or(bytetest_f4_adv, range_test_10000_fffff_1);
        test_80_10ffff = simd_or(test_80_ffff, range_test_10000_10ffff_1);
        if (bitblock::any(test_80_10ffff)) {
          r80_10ffff_tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
          r80_10ffff_tmp2 = simd_andc(r80_10ffff_tmp1, basis_bits.bit_2);
          r80_10ffff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r80_10ffff_tmp4 = simd_or(r80_10ffff_tmp3, basis_bits.bit_6);
          r80_10ffff_tmp5 = simd_or(basis_bits.bit_3, r80_10ffff_tmp4);
          bytetest_c2_df = simd_and(r80_10ffff_tmp2, r80_10ffff_tmp5);
          if (bitblock::any(bytetest_c2_df)) {
            r80_7ff_tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
            r80_7ff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            bytetest_d0_df = simd_and(r80_7ff_tmp1, r80_7ff_tmp2);
            if (bitblock::any(bytetest_d0_df)) {
              r400_7ff_tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
              r400_7ff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
              r400_7ff_tmp3 = simd_and(r400_7ff_tmp1, r400_7ff_tmp2);
              r400_7ff_tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
              bytetest_d8_db = simd_and(r400_7ff_tmp3, r400_7ff_tmp4);
              if (bitblock::any(bytetest_d8_db)) {
                r600_6ff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r600_6ff_tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
                r600_6ff_tmp3 = simd_and(r600_6ff_tmp1, r600_6ff_tmp2);
                CC_Nd_660_669_sfx = simd_andc(r600_6ff_tmp3, tmp5);
                r600_6ff_tmp4 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
                r600_6ff_tmp5 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
                r600_6ff_tmp6 = simd_and(r600_6ff_tmp4, r600_6ff_tmp5);
                r600_6ff_tmp7 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
                r600_6ff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
                r600_6ff_tmp9 = simd_and(r600_6ff_tmp7, r600_6ff_tmp8);
                CC_d9 = simd_and(r600_6ff_tmp6, r600_6ff_tmp9);
                carryQ.cq[3] = carryout2carry(pablo_blk_Advance(CC_d9, carryQ.get_carry_in(3), r600_6ff_tmp10));
                CC_Nd_660_669 = simd_and(r600_6ff_tmp10, CC_Nd_660_669_sfx);
                struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_660_669);
                r600_6ff_tmp11 = simd_and(r600_6ff_tmp1, tmp2);
                CC_Nd_6f0_6f9_sfx = simd_andc(r600_6ff_tmp11, tmp5);
                r600_6ff_tmp12 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r600_6ff_tmp13 = simd_and(r600_6ff_tmp7, r600_6ff_tmp12);
                CC_db = simd_and(r600_6ff_tmp6, r600_6ff_tmp13);
                carryQ.cq[4] = carryout2carry(pablo_blk_Advance(CC_db, carryQ.get_carry_in(4), r600_6ff_tmp14));
                CC_Nd_6f0_6f9 = simd_and(r600_6ff_tmp14, CC_Nd_6f0_6f9_sfx);
                struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_6f0_6f9);
              }
              r400_7ff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
              bytetest_dc_df = simd_and(r400_7ff_tmp3, r400_7ff_tmp5);
              if (bitblock::any(bytetest_dc_df)) {
                bytetest_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                r700_7ff_tmp1 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                r700_7ff_tmp2 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                r700_7ff_tmp3 = simd_and(r700_7ff_tmp1, r700_7ff_tmp2);
                bytetest_df = simd_and(r400_7ff_tmp3, r700_7ff_tmp3);
                carryQ.cq[5] = carryout2carry(pablo_blk_Advance(bytetest_df, carryQ.get_carry_in(5), r700_7ff_tmp4));
                bytetest_df_adv = simd_and(r700_7ff_tmp4, bytetest_80_bf);
                if (bitblock::any(bytetest_df_adv)) {
                  r7c0_7ff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
                  r7c0_7ff_tmp2 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
                  r7c0_7ff_tmp3 = simd_andc(r7c0_7ff_tmp1, r7c0_7ff_tmp2);
                  CC_Nd_7c0_7c9_sfx = simd_andc(r7c0_7ff_tmp3, tmp5);
                  r7c0_7ff_tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
                  r7c0_7ff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
                  r7c0_7ff_tmp6 = simd_and(r7c0_7ff_tmp4, r7c0_7ff_tmp5);
                  CC_df = simd_and(r400_7ff_tmp3, r7c0_7ff_tmp6);
                  carryQ.cq[6] = carryout2carry(pablo_blk_Advance(CC_df, carryQ.get_carry_in(6), r7c0_7ff_tmp7));
                  CC_Nd_7c0_7c9 = simd_and(r7c0_7ff_tmp7, CC_Nd_7c0_7c9_sfx);
                  struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_7c0_7c9);
                }
              }
            }
          }
          r80_10ffff_tmp6 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          r80_10ffff_tmp7 = simd_and(r80_10ffff_tmp1, r80_10ffff_tmp6);
          r80_10ffff_tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r80_10ffff_tmp9 = simd_or(basis_bits.bit_5, r80_10ffff_tmp8);
          r80_10ffff_tmp10 = simd_or(basis_bits.bit_4, r80_10ffff_tmp9);
          bytetest_e1_ef = simd_and(r80_10ffff_tmp7, r80_10ffff_tmp10);
          r80_10ffff_tmp11 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          bytetest_a0_bf = simd_and(r80_10ffff_tmp11, basis_bits.bit_2);
          r80_10ffff_tmp12 = simd_or(r80_10ffff_tmp3, r80_10ffff_tmp8);
          bytetest_e0 = simd_andc(r80_10ffff_tmp7, r80_10ffff_tmp12);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(bytetest_e0, carryQ.get_carry_in(7), r80_10ffff_tmp13));
          bytetest_e0_adv = simd_and(r80_10ffff_tmp13, bytetest_a0_bf);
          range_test_800_ffff_1 = simd_or(bytetest_e1_ef, bytetest_e0_adv);
          if (bitblock::any(range_test_800_ffff_1)) {
            r800_ffff_tmp1 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
            r800_ffff_tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
            r800_ffff_tmp3 = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
            r800_ffff_tmp4 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r800_ffff_tmp5 = simd_or(basis_bits.bit_4, r800_ffff_tmp4);
            CC_Nd_966_96f_sfx_sfx = simd_and(r800_ffff_tmp3, r800_ffff_tmp5);
            r800_ffff_tmp6 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r800_ffff_tmp7 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r800_ffff_tmp8 = simd_and(r800_ffff_tmp6, r800_ffff_tmp7);
            CC_a5 = simd_and(r800_ffff_tmp3, r800_ffff_tmp8);
            carryQ.cq[8] = carryout2carry(pablo_blk_Advance(CC_a5, carryQ.get_carry_in(8), r800_ffff_tmp9));
            CC_Nd_966_96f_sfx = simd_and(r800_ffff_tmp9, CC_Nd_966_96f_sfx_sfx);
            r800_ffff_tmp10 = simd_and(r80_10ffff_tmp1, r800_ffff_tmp2);
            r800_ffff_tmp11 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp12 = simd_or(r80_10ffff_tmp3, r800_ffff_tmp11);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            carryQ.cq[9] = carryout2carry(pablo_blk_Advance(CC_e0, carryQ.get_carry_in(9), r800_ffff_tmp13));
            CC_Nd_966_96f = simd_and(r800_ffff_tmp13, CC_Nd_966_96f_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_966_96f);
            CC_Nd_9e6_9ef_sfx_sfx = simd_and(r800_ffff_tmp3, r800_ffff_tmp5);
            r800_ffff_tmp14 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp15 = simd_and(r800_ffff_tmp6, r800_ffff_tmp14);
            CC_a7 = simd_and(r800_ffff_tmp3, r800_ffff_tmp15);
            carryQ.cq[10] = carryout2carry(pablo_blk_Advance(CC_a7, carryQ.get_carry_in(10), r800_ffff_tmp16));
            CC_Nd_9e6_9ef_sfx = simd_and(r800_ffff_tmp16, CC_Nd_9e6_9ef_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_9e6_9ef = simd_and(r800_ffff_tmp13, CC_Nd_9e6_9ef_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_9e6_9ef);
            CC_Nd_a66_a6f_sfx_sfx = simd_and(r800_ffff_tmp3, r800_ffff_tmp5);
            r800_ffff_tmp17 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r800_ffff_tmp18 = simd_and(r800_ffff_tmp17, r800_ffff_tmp7);
            CC_a9 = simd_and(r800_ffff_tmp3, r800_ffff_tmp18);
            carryQ.cq[11] = carryout2carry(pablo_blk_Advance(CC_a9, carryQ.get_carry_in(11), r800_ffff_tmp19));
            CC_Nd_a66_a6f_sfx = simd_and(r800_ffff_tmp19, CC_Nd_a66_a6f_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_a66_a6f = simd_and(r800_ffff_tmp13, CC_Nd_a66_a6f_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_a66_a6f);
            CC_Nd_ae6_aef_sfx_sfx = simd_and(r800_ffff_tmp3, r800_ffff_tmp5);
            r800_ffff_tmp20 = simd_and(r800_ffff_tmp17, r800_ffff_tmp14);
            CC_ab = simd_and(r800_ffff_tmp3, r800_ffff_tmp20);
            carryQ.cq[12] = carryout2carry(pablo_blk_Advance(CC_ab, carryQ.get_carry_in(12), r800_ffff_tmp21));
            CC_Nd_ae6_aef_sfx = simd_and(r800_ffff_tmp21, CC_Nd_ae6_aef_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_ae6_aef = simd_and(r800_ffff_tmp13, CC_Nd_ae6_aef_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_ae6_aef);
            CC_Nd_b66_b6f_sfx_sfx = simd_and(r800_ffff_tmp3, r800_ffff_tmp5);
            r800_ffff_tmp22 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r800_ffff_tmp23 = simd_and(r800_ffff_tmp22, r800_ffff_tmp7);
            CC_ad = simd_and(r800_ffff_tmp3, r800_ffff_tmp23);
            carryQ.cq[13] = carryout2carry(pablo_blk_Advance(CC_ad, carryQ.get_carry_in(13), r800_ffff_tmp24));
            CC_Nd_b66_b6f_sfx = simd_and(r800_ffff_tmp24, CC_Nd_b66_b6f_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_b66_b6f = simd_and(r800_ffff_tmp13, CC_Nd_b66_b6f_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_b66_b6f);
            CC_Nd_be6_bef_sfx_sfx = simd_and(r800_ffff_tmp3, r800_ffff_tmp5);
            r800_ffff_tmp25 = simd_and(r800_ffff_tmp22, r800_ffff_tmp14);
            CC_af = simd_and(r800_ffff_tmp3, r800_ffff_tmp25);
            carryQ.cq[14] = carryout2carry(pablo_blk_Advance(CC_af, carryQ.get_carry_in(14), r800_ffff_tmp26));
            CC_Nd_be6_bef_sfx = simd_and(r800_ffff_tmp26, CC_Nd_be6_bef_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_be6_bef = simd_and(r800_ffff_tmp13, CC_Nd_be6_bef_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_be6_bef);
            CC_Nd_c66_c6f_sfx_sfx = simd_and(r800_ffff_tmp3, r800_ffff_tmp5);
            r800_ffff_tmp27 = simd_and(r800_ffff_tmp1, tmp2);
            r800_ffff_tmp28 = simd_andc(r800_ffff_tmp7, r80_10ffff_tmp3);
            CC_b1 = simd_and(r800_ffff_tmp27, r800_ffff_tmp28);
            carryQ.cq[15] = carryout2carry(pablo_blk_Advance(CC_b1, carryQ.get_carry_in(15), r800_ffff_tmp29));
            CC_Nd_c66_c6f_sfx = simd_and(r800_ffff_tmp29, CC_Nd_c66_c6f_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_c66_c6f = simd_and(r800_ffff_tmp13, CC_Nd_c66_c6f_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_c66_c6f);
            CC_Nd_ce6_cef_sfx_sfx = simd_and(r800_ffff_tmp3, r800_ffff_tmp5);
            r800_ffff_tmp30 = simd_andc(r800_ffff_tmp14, r80_10ffff_tmp3);
            CC_b3 = simd_and(r800_ffff_tmp27, r800_ffff_tmp30);
            carryQ.cq[16] = carryout2carry(pablo_blk_Advance(CC_b3, carryQ.get_carry_in(16), r800_ffff_tmp31));
            CC_Nd_ce6_cef_sfx = simd_and(r800_ffff_tmp31, CC_Nd_ce6_cef_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_ce6_cef = simd_and(r800_ffff_tmp13, CC_Nd_ce6_cef_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_ce6_cef);
            CC_Nd_d66_d6f_sfx_sfx = simd_and(r800_ffff_tmp3, r800_ffff_tmp5);
            CC_b5 = simd_and(r800_ffff_tmp27, r800_ffff_tmp8);
            carryQ.cq[17] = carryout2carry(pablo_blk_Advance(CC_b5, carryQ.get_carry_in(17), r800_ffff_tmp32));
            CC_Nd_d66_d6f_sfx = simd_and(r800_ffff_tmp32, CC_Nd_d66_d6f_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_d66_d6f = simd_and(r800_ffff_tmp13, CC_Nd_d66_d6f_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_d66_d6f);
            r800_ffff_tmp33 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r800_ffff_tmp34 = simd_and(r800_ffff_tmp1, r800_ffff_tmp33);
            CC_Nd_e50_e59_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_b9 = simd_and(r800_ffff_tmp27, r800_ffff_tmp18);
            carryQ.cq[18] = carryout2carry(pablo_blk_Advance(CC_b9, carryQ.get_carry_in(18), r800_ffff_tmp35));
            CC_Nd_e50_e59_sfx = simd_and(r800_ffff_tmp35, CC_Nd_e50_e59_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_e50_e59 = simd_and(r800_ffff_tmp13, CC_Nd_e50_e59_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_e50_e59);
            CC_Nd_ed0_ed9_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_bb = simd_and(r800_ffff_tmp27, r800_ffff_tmp20);
            carryQ.cq[19] = carryout2carry(pablo_blk_Advance(CC_bb, carryQ.get_carry_in(19), r800_ffff_tmp36));
            CC_Nd_ed0_ed9_sfx = simd_and(r800_ffff_tmp36, CC_Nd_ed0_ed9_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_ed0_ed9 = simd_and(r800_ffff_tmp13, CC_Nd_ed0_ed9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_ed0_ed9);
            CC_Nd_f20_f29_sfx_sfx = simd_andc(r800_ffff_tmp3, tmp5);
            r800_ffff_tmp37 = simd_andc(r800_ffff_tmp22, r800_ffff_tmp11);
            CC_bc = simd_and(r800_ffff_tmp27, r800_ffff_tmp37);
            carryQ.cq[20] = carryout2carry(pablo_blk_Advance(CC_bc, carryQ.get_carry_in(20), r800_ffff_tmp38));
            CC_Nd_f20_f29_sfx = simd_and(r800_ffff_tmp38, CC_Nd_f20_f29_sfx_sfx);
            CC_e0 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp12);
            CC_Nd_f20_f29 = simd_and(r800_ffff_tmp13, CC_Nd_f20_f29_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_f20_f29);
            r800_ffff_tmp39 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r800_ffff_tmp40 = simd_andc(r800_ffff_tmp1, r800_ffff_tmp39);
            CC_Nd_1040_1049_sfx_sfx = simd_andc(r800_ffff_tmp40, tmp5);
            CC_81 = simd_and(r800_ffff_tmp40, r800_ffff_tmp28);
            carryQ.cq[21] = carryout2carry(pablo_blk_Advance(CC_81, carryQ.get_carry_in(21), r800_ffff_tmp41));
            CC_Nd_1040_1049_sfx = simd_and(r800_ffff_tmp41, CC_Nd_1040_1049_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            carryQ.cq[22] = carryout2carry(pablo_blk_Advance(CC_e1, carryQ.get_carry_in(22), r800_ffff_tmp42));
            CC_Nd_1040_1049 = simd_and(r800_ffff_tmp42, CC_Nd_1040_1049_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1040_1049);
            CC_Nd_1090_1099_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            r800_ffff_tmp43 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r800_ffff_tmp44 = simd_andc(r800_ffff_tmp43, r80_10ffff_tmp3);
            CC_82 = simd_and(r800_ffff_tmp40, r800_ffff_tmp44);
            carryQ.cq[23] = carryout2carry(pablo_blk_Advance(CC_82, carryQ.get_carry_in(23), r800_ffff_tmp45));
            CC_Nd_1090_1099_sfx = simd_and(r800_ffff_tmp45, CC_Nd_1090_1099_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_1090_1099 = simd_and(r800_ffff_tmp42, CC_Nd_1090_1099_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1090_1099);
            CC_Nd_17e0_17e9_sfx_sfx = simd_andc(r800_ffff_tmp3, tmp5);
            CC_9f = simd_and(r800_ffff_tmp34, r800_ffff_tmp25);
            carryQ.cq[24] = carryout2carry(pablo_blk_Advance(CC_9f, carryQ.get_carry_in(24), r800_ffff_tmp46));
            CC_Nd_17e0_17e9_sfx = simd_and(r800_ffff_tmp46, CC_Nd_17e0_17e9_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_17e0_17e9 = simd_and(r800_ffff_tmp42, CC_Nd_17e0_17e9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_17e0_17e9);
            CC_Nd_1810_1819_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_a0 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp12);
            carryQ.cq[25] = carryout2carry(pablo_blk_Advance(CC_a0, carryQ.get_carry_in(25), r800_ffff_tmp47));
            CC_Nd_1810_1819_sfx = simd_and(r800_ffff_tmp47, CC_Nd_1810_1819_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_1810_1819 = simd_and(r800_ffff_tmp42, CC_Nd_1810_1819_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1810_1819);
            CC_Nd_1946_194f_sfx_sfx = simd_and(r800_ffff_tmp40, r800_ffff_tmp5);
            CC_a5 = simd_and(r800_ffff_tmp3, r800_ffff_tmp8);
            CC_Nd_1946_194f_sfx = simd_and(r800_ffff_tmp9, CC_Nd_1946_194f_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_1946_194f = simd_and(r800_ffff_tmp42, CC_Nd_1946_194f_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1946_194f);
            CC_Nd_19d0_19d9_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_a7 = simd_and(r800_ffff_tmp3, r800_ffff_tmp15);
            CC_Nd_19d0_19d9_sfx = simd_and(r800_ffff_tmp16, CC_Nd_19d0_19d9_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_19d0_19d9 = simd_and(r800_ffff_tmp42, CC_Nd_19d0_19d9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_19d0_19d9);
            CC_Nd_1a80_1a89_sfx_sfx = simd_andc(r800_ffff_tmp40, tmp5);
            r800_ffff_tmp48 = simd_and(r800_ffff_tmp17, r800_ffff_tmp43);
            CC_aa = simd_and(r800_ffff_tmp3, r800_ffff_tmp48);
            carryQ.cq[26] = carryout2carry(pablo_blk_Advance(CC_aa, carryQ.get_carry_in(26), r800_ffff_tmp49));
            CC_Nd_1a80_1a89_sfx = simd_and(r800_ffff_tmp49, CC_Nd_1a80_1a89_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_1a80_1a89 = simd_and(r800_ffff_tmp42, CC_Nd_1a80_1a89_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1a80_1a89);
            CC_Nd_1a90_1a99_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_aa = simd_and(r800_ffff_tmp3, r800_ffff_tmp48);
            CC_Nd_1a90_1a99_sfx = simd_and(r800_ffff_tmp49, CC_Nd_1a90_1a99_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_1a90_1a99 = simd_and(r800_ffff_tmp42, CC_Nd_1a90_1a99_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1a90_1a99);
            CC_Nd_1b50_1b59_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_ad = simd_and(r800_ffff_tmp3, r800_ffff_tmp23);
            CC_Nd_1b50_1b59_sfx = simd_and(r800_ffff_tmp24, CC_Nd_1b50_1b59_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_1b50_1b59 = simd_and(r800_ffff_tmp42, CC_Nd_1b50_1b59_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1b50_1b59);
            CC_Nd_1bb0_1bb9_sfx_sfx = simd_andc(r800_ffff_tmp27, tmp5);
            r800_ffff_tmp50 = simd_and(r800_ffff_tmp22, r800_ffff_tmp43);
            CC_ae = simd_and(r800_ffff_tmp3, r800_ffff_tmp50);
            carryQ.cq[27] = carryout2carry(pablo_blk_Advance(CC_ae, carryQ.get_carry_in(27), r800_ffff_tmp51));
            CC_Nd_1bb0_1bb9_sfx = simd_and(r800_ffff_tmp51, CC_Nd_1bb0_1bb9_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_1bb0_1bb9 = simd_and(r800_ffff_tmp42, CC_Nd_1bb0_1bb9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1bb0_1bb9);
            CC_Nd_1c40_1c49_sfx_sfx = simd_andc(r800_ffff_tmp40, tmp5);
            CC_b1 = simd_and(r800_ffff_tmp27, r800_ffff_tmp28);
            CC_Nd_1c40_1c49_sfx = simd_and(r800_ffff_tmp29, CC_Nd_1c40_1c49_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_1c40_1c49 = simd_and(r800_ffff_tmp42, CC_Nd_1c40_1c49_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1c40_1c49);
            CC_Nd_1c50_1c59_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_b1 = simd_and(r800_ffff_tmp27, r800_ffff_tmp28);
            CC_Nd_1c50_1c59_sfx = simd_and(r800_ffff_tmp29, CC_Nd_1c50_1c59_sfx_sfx);
            CC_e1 = simd_and(r800_ffff_tmp10, r800_ffff_tmp28);
            CC_Nd_1c50_1c59 = simd_and(r800_ffff_tmp42, CC_Nd_1c50_1c59_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1c50_1c59);
            CC_Nd_a620_a629_sfx_sfx = simd_andc(r800_ffff_tmp3, tmp5);
            r800_ffff_tmp52 = simd_andc(r800_ffff_tmp17, r800_ffff_tmp11);
            CC_98 = simd_and(r800_ffff_tmp34, r800_ffff_tmp52);
            carryQ.cq[28] = carryout2carry(pablo_blk_Advance(CC_98, carryQ.get_carry_in(28), r800_ffff_tmp53));
            CC_Nd_a620_a629_sfx = simd_and(r800_ffff_tmp53, CC_Nd_a620_a629_sfx_sfx);
            CC_ea = simd_and(r800_ffff_tmp10, r800_ffff_tmp48);
            carryQ.cq[29] = carryout2carry(pablo_blk_Advance(CC_ea, carryQ.get_carry_in(29), r800_ffff_tmp54));
            CC_Nd_a620_a629 = simd_and(r800_ffff_tmp54, CC_Nd_a620_a629_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_a620_a629);
            CC_Nd_a8d0_a8d9_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_a3 = simd_and(r800_ffff_tmp3, r800_ffff_tmp30);
            carryQ.cq[30] = carryout2carry(pablo_blk_Advance(CC_a3, carryQ.get_carry_in(30), r800_ffff_tmp55));
            CC_Nd_a8d0_a8d9_sfx = simd_and(r800_ffff_tmp55, CC_Nd_a8d0_a8d9_sfx_sfx);
            CC_ea = simd_and(r800_ffff_tmp10, r800_ffff_tmp48);
            CC_Nd_a8d0_a8d9 = simd_and(r800_ffff_tmp54, CC_Nd_a8d0_a8d9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_a8d0_a8d9);
            CC_Nd_a900_a909_sfx_sfx = simd_andc(r800_ffff_tmp40, tmp5);
            r800_ffff_tmp56 = simd_andc(r800_ffff_tmp6, r800_ffff_tmp11);
            CC_a4 = simd_and(r800_ffff_tmp3, r800_ffff_tmp56);
            carryQ.cq[31] = carryout2carry(pablo_blk_Advance(CC_a4, carryQ.get_carry_in(31), r800_ffff_tmp57));
            CC_Nd_a900_a909_sfx = simd_and(r800_ffff_tmp57, CC_Nd_a900_a909_sfx_sfx);
            CC_ea = simd_and(r800_ffff_tmp10, r800_ffff_tmp48);
            CC_Nd_a900_a909 = simd_and(r800_ffff_tmp54, CC_Nd_a900_a909_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_a900_a909);
            CC_Nd_a9d0_a9d9_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_a7 = simd_and(r800_ffff_tmp3, r800_ffff_tmp15);
            CC_Nd_a9d0_a9d9_sfx = simd_and(r800_ffff_tmp16, CC_Nd_a9d0_a9d9_sfx_sfx);
            CC_ea = simd_and(r800_ffff_tmp10, r800_ffff_tmp48);
            CC_Nd_a9d0_a9d9 = simd_and(r800_ffff_tmp54, CC_Nd_a9d0_a9d9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_a9d0_a9d9);
            CC_Nd_aa50_aa59_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_a9 = simd_and(r800_ffff_tmp3, r800_ffff_tmp18);
            CC_Nd_aa50_aa59_sfx = simd_and(r800_ffff_tmp19, CC_Nd_aa50_aa59_sfx_sfx);
            CC_ea = simd_and(r800_ffff_tmp10, r800_ffff_tmp48);
            CC_Nd_aa50_aa59 = simd_and(r800_ffff_tmp54, CC_Nd_aa50_aa59_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_aa50_aa59);
            CC_Nd_abf0_abf9_sfx_sfx = simd_andc(r800_ffff_tmp27, tmp5);
            CC_af = simd_and(r800_ffff_tmp3, r800_ffff_tmp25);
            CC_Nd_abf0_abf9_sfx = simd_and(r800_ffff_tmp26, CC_Nd_abf0_abf9_sfx_sfx);
            CC_ea = simd_and(r800_ffff_tmp10, r800_ffff_tmp48);
            CC_Nd_abf0_abf9 = simd_and(r800_ffff_tmp54, CC_Nd_abf0_abf9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_abf0_abf9);
            CC_Nd_ff10_ff19_sfx_sfx = simd_andc(r800_ffff_tmp34, tmp5);
            CC_bc = simd_and(r800_ffff_tmp27, r800_ffff_tmp37);
            CC_Nd_ff10_ff19_sfx = simd_and(r800_ffff_tmp38, CC_Nd_ff10_ff19_sfx_sfx);
            CC_ef = simd_and(r800_ffff_tmp10, r800_ffff_tmp25);
            carryQ.cq[32] = carryout2carry(pablo_blk_Advance(CC_ef, carryQ.get_carry_in(32), r800_ffff_tmp58));
            CC_Nd_ff10_ff19 = simd_and(r800_ffff_tmp58, CC_Nd_ff10_ff19_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_ff10_ff19);
          }
          r80_10ffff_tmp14 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          bytetest_80_8f = simd_andc(r80_10ffff_tmp11, r80_10ffff_tmp14);
          r80_10ffff_tmp15 = simd_and(r80_10ffff_tmp1, tmp2);
          r80_10ffff_tmp16 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r80_10ffff_tmp17 = simd_andc(r80_10ffff_tmp16, r80_10ffff_tmp8);
          bytetest_f4 = simd_and(r80_10ffff_tmp15, r80_10ffff_tmp17);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(bytetest_f4, carryQ.get_carry_in(33), r80_10ffff_tmp18));
          bytetest_f4_adv = simd_and(r80_10ffff_tmp18, bytetest_80_8f);
          r80_10ffff_tmp19 = simd_andc(r80_10ffff_tmp15, r80_10ffff_tmp3);
          bytetest_f1_f3 = simd_and(r80_10ffff_tmp19, r80_10ffff_tmp8);
          bytetest_90_bf = simd_and(r80_10ffff_tmp11, r80_10ffff_tmp14);
          bytetest_f0 = simd_andc(r80_10ffff_tmp15, r80_10ffff_tmp12);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(bytetest_f0, carryQ.get_carry_in(34), r80_10ffff_tmp20));
          bytetest_f0_adv = simd_and(r80_10ffff_tmp20, bytetest_90_bf);
          range_test_10000_fffff_1 = simd_or(bytetest_f1_f3, bytetest_f0_adv);
          range_test_10000_10ffff_1 = simd_or(bytetest_f4_adv, range_test_10000_fffff_1);
          if (bitblock::any(range_test_10000_10ffff_1)) {
            r10000_10ffff_tmp1 = simd_and(r80_10ffff_tmp11, r80_10ffff_tmp6);
            CC_Nd_104a0_104a9_sfx_sfx_sfx = simd_andc(r10000_10ffff_tmp1, tmp5);
            r10000_10ffff_tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
            r10000_10ffff_tmp3 = simd_and(r80_10ffff_tmp11, r10000_10ffff_tmp2);
            r10000_10ffff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp5 = simd_andc(r10000_10ffff_tmp4, r80_10ffff_tmp3);
            CC_92 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp5);
            carryQ.cq[35] = carryout2carry(pablo_blk_Advance(CC_92, carryQ.get_carry_in(35), r10000_10ffff_tmp6));
            CC_Nd_104a0_104a9_sfx_sfx = simd_and(r10000_10ffff_tmp6, CC_Nd_104a0_104a9_sfx_sfx_sfx);
            CC_90 = simd_andc(r10000_10ffff_tmp3, r80_10ffff_tmp12);
            carryQ.cq[36] = carryout2carry(pablo_blk_Advance(CC_90, carryQ.get_carry_in(36), r10000_10ffff_tmp7));
            CC_Nd_104a0_104a9_sfx = simd_and(r10000_10ffff_tmp7, CC_Nd_104a0_104a9_sfx_sfx);
            r10000_10ffff_tmp8 = simd_and(r80_10ffff_tmp1, tmp2);
            CC_f0 = simd_andc(r10000_10ffff_tmp8, r80_10ffff_tmp12);
            carryQ.cq[37] = carryout2carry(pablo_blk_Advance(CC_f0, carryQ.get_carry_in(37), r10000_10ffff_tmp9));
            CC_Nd_104a0_104a9 = simd_and(r10000_10ffff_tmp9, CC_Nd_104a0_104a9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_104a0_104a9);
            r10000_10ffff_tmp10 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
            r10000_10ffff_tmp11 = simd_or(basis_bits.bit_4, r10000_10ffff_tmp10);
            CC_Nd_11066_1106f_sfx_sfx_sfx = simd_and(r10000_10ffff_tmp1, r10000_10ffff_tmp11);
            r10000_10ffff_tmp12 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
            r10000_10ffff_tmp13 = simd_andc(r80_10ffff_tmp11, r10000_10ffff_tmp12);
            r10000_10ffff_tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
            r10000_10ffff_tmp15 = simd_andc(r10000_10ffff_tmp14, r80_10ffff_tmp3);
            CC_81 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp15);
            carryQ.cq[38] = carryout2carry(pablo_blk_Advance(CC_81, carryQ.get_carry_in(38), r10000_10ffff_tmp16));
            CC_Nd_11066_1106f_sfx_sfx = simd_and(r10000_10ffff_tmp16, CC_Nd_11066_1106f_sfx_sfx_sfx);
            CC_91 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp15);
            carryQ.cq[39] = carryout2carry(pablo_blk_Advance(CC_91, carryQ.get_carry_in(39), r10000_10ffff_tmp17));
            CC_Nd_11066_1106f_sfx = simd_and(r10000_10ffff_tmp17, CC_Nd_11066_1106f_sfx_sfx);
            CC_f0 = simd_andc(r10000_10ffff_tmp8, r80_10ffff_tmp12);
            CC_Nd_11066_1106f = simd_and(r10000_10ffff_tmp9, CC_Nd_11066_1106f_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_11066_1106f);
            r10000_10ffff_tmp18 = simd_and(r80_10ffff_tmp11, tmp2);
            CC_Nd_110f0_110f9_sfx_sfx_sfx = simd_andc(r10000_10ffff_tmp18, tmp5);
            r10000_10ffff_tmp19 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
            r10000_10ffff_tmp20 = simd_andc(r10000_10ffff_tmp19, r80_10ffff_tmp3);
            CC_83 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp20);
            carryQ.cq[40] = carryout2carry(pablo_blk_Advance(CC_83, carryQ.get_carry_in(40), r10000_10ffff_tmp21));
            CC_Nd_110f0_110f9_sfx_sfx = simd_and(r10000_10ffff_tmp21, CC_Nd_110f0_110f9_sfx_sfx_sfx);
            CC_91 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp15);
            CC_Nd_110f0_110f9_sfx = simd_and(r10000_10ffff_tmp17, CC_Nd_110f0_110f9_sfx_sfx);
            CC_f0 = simd_andc(r10000_10ffff_tmp8, r80_10ffff_tmp12);
            CC_Nd_110f0_110f9 = simd_and(r10000_10ffff_tmp9, CC_Nd_110f0_110f9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_110f0_110f9);
            CC_Nd_11136_1113f_sfx_sfx_sfx = simd_and(r10000_10ffff_tmp18, r10000_10ffff_tmp11);
            r10000_10ffff_tmp22 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
            r10000_10ffff_tmp23 = simd_andc(r10000_10ffff_tmp22, r80_10ffff_tmp8);
            CC_84 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp23);
            carryQ.cq[41] = carryout2carry(pablo_blk_Advance(CC_84, carryQ.get_carry_in(41), r10000_10ffff_tmp24));
            CC_Nd_11136_1113f_sfx_sfx = simd_and(r10000_10ffff_tmp24, CC_Nd_11136_1113f_sfx_sfx_sfx);
            CC_91 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp15);
            CC_Nd_11136_1113f_sfx = simd_and(r10000_10ffff_tmp17, CC_Nd_11136_1113f_sfx_sfx);
            CC_f0 = simd_andc(r10000_10ffff_tmp8, r80_10ffff_tmp12);
            CC_Nd_11136_1113f = simd_and(r10000_10ffff_tmp9, CC_Nd_11136_1113f_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_11136_1113f);
            CC_Nd_111d0_111d9_sfx_sfx_sfx = simd_andc(r10000_10ffff_tmp3, tmp5);
            r10000_10ffff_tmp25 = simd_and(r10000_10ffff_tmp22, r10000_10ffff_tmp19);
            CC_87 = simd_and(r10000_10ffff_tmp13, r10000_10ffff_tmp25);
            carryQ.cq[42] = carryout2carry(pablo_blk_Advance(CC_87, carryQ.get_carry_in(42), r10000_10ffff_tmp26));
            CC_Nd_111d0_111d9_sfx_sfx = simd_and(r10000_10ffff_tmp26, CC_Nd_111d0_111d9_sfx_sfx_sfx);
            CC_91 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp15);
            CC_Nd_111d0_111d9_sfx = simd_and(r10000_10ffff_tmp17, CC_Nd_111d0_111d9_sfx_sfx);
            CC_f0 = simd_andc(r10000_10ffff_tmp8, r80_10ffff_tmp12);
            CC_Nd_111d0_111d9 = simd_and(r10000_10ffff_tmp9, CC_Nd_111d0_111d9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_111d0_111d9);
            CC_Nd_116c0_116c9_sfx_sfx_sfx = simd_andc(r10000_10ffff_tmp13, tmp5);
            r10000_10ffff_tmp27 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp28 = simd_and(r10000_10ffff_tmp27, r10000_10ffff_tmp19);
            CC_9b = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp28);
            carryQ.cq[43] = carryout2carry(pablo_blk_Advance(CC_9b, carryQ.get_carry_in(43), r10000_10ffff_tmp29));
            CC_Nd_116c0_116c9_sfx_sfx = simd_and(r10000_10ffff_tmp29, CC_Nd_116c0_116c9_sfx_sfx_sfx);
            CC_91 = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp15);
            CC_Nd_116c0_116c9_sfx = simd_and(r10000_10ffff_tmp17, CC_Nd_116c0_116c9_sfx_sfx);
            CC_f0 = simd_andc(r10000_10ffff_tmp8, r80_10ffff_tmp12);
            CC_Nd_116c0_116c9 = simd_and(r10000_10ffff_tmp9, CC_Nd_116c0_116c9_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_116c0_116c9);
            r10000_10ffff_tmp30 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
            r10000_10ffff_tmp31 = simd_and(r10000_10ffff_tmp30, basis_bits.bit_6);
            r10000_10ffff_tmp32 = simd_or(basis_bits.bit_3, r10000_10ffff_tmp31);
            r10000_10ffff_tmp33 = simd_or(basis_bits.bit_2, r10000_10ffff_tmp32);
            CC_Nd_1d7ce_1d7ff_sfx_sfx_sfx = simd_and(r80_10ffff_tmp11, r10000_10ffff_tmp33);
            r10000_10ffff_tmp34 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp19);
            CC_9f = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp34);
            carryQ.cq[44] = carryout2carry(pablo_blk_Advance(CC_9f, carryQ.get_carry_in(44), r10000_10ffff_tmp35));
            CC_Nd_1d7ce_1d7ff_sfx_sfx = simd_and(r10000_10ffff_tmp35, CC_Nd_1d7ce_1d7ff_sfx_sfx_sfx);
            r10000_10ffff_tmp36 = simd_and(r10000_10ffff_tmp30, r10000_10ffff_tmp14);
            CC_9d = simd_and(r10000_10ffff_tmp3, r10000_10ffff_tmp36);
            carryQ.cq[45] = carryout2carry(pablo_blk_Advance(CC_9d, carryQ.get_carry_in(45), r10000_10ffff_tmp37));
            CC_Nd_1d7ce_1d7ff_sfx = simd_and(r10000_10ffff_tmp37, CC_Nd_1d7ce_1d7ff_sfx_sfx);
            CC_f0 = simd_andc(r10000_10ffff_tmp8, r80_10ffff_tmp12);
            CC_Nd_1d7ce_1d7ff = simd_and(r10000_10ffff_tmp9, CC_Nd_1d7ce_1d7ff_sfx);
            struct_Nd.cc = simd_or(struct_Nd.cc, CC_Nd_1d7ce_1d7ff);
          }
        }
  }

    CarryArray<46, 0> carryQ;
  };




