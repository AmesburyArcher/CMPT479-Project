/*
 *  Copyright (c) 2014-15 International Characters.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters.
 */

#include <pablo/pablo_compiler.h>
#include <pablo/codegenstate.h>
#include <pablo/carry_data.h>
#include <pablo/printer_pablos.h>
#include <cc/cc_namemap.hpp>
#include <re/re_name.h>
#include <stdexcept>
#include <include/simd-lib/bitblock.hpp>
#include <sstream>
#include <llvm/IR/Verifier.h>
#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Passes.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DataLayout.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <llvm/Support/Casting.h>
#include <llvm/Support/Compiler.h>
#include <llvm/Support/Debug.h>
#include <llvm/Support/TargetSelect.h>
#include <llvm/Support/Host.h>
#include <llvm/Transforms/Scalar.h>
#include <llvm/ExecutionEngine/ExecutionEngine.h>
#include <llvm/ExecutionEngine/MCJIT.h>
#include <llvm/IRReader/IRReader.h>
#include <llvm/Bitcode/ReaderWriter.h>
#include <llvm/Support/MemoryBuffer.h>
#include <llvm/IR/IRBuilder.h>
#include <llvm/Support/CommandLine.h>
#include <llvm/ADT/Twine.h>
#include <iostream>

static cl::OptionCategory eIRDumpOptions("LLVM IR Dump Options", "These options control dumping of LLVM IR.");
static cl::opt<bool> DumpGeneratedIR("dump-generated-IR", cl::init(false), cl::desc("print LLVM IR generated by RE compilation"), cl::cat(eIRDumpOptions));

static cl::OptionCategory fTracingOptions("Run-time Tracing Options", "These options control execution traces.");
static cl::opt<bool> TraceNext("trace-next-nodes", cl::init(false), cl::desc("Generate dynamic traces of executed Next nodes (while control variables)."), cl::cat(fTracingOptions));
static cl::opt<bool> DumpTrace("dump-trace", cl::init(false), cl::desc("Generate dynamic traces of executed assignments."), cl::cat(fTracingOptions));

extern "C" {
  void wrapped_print_register(char * regName, BitBlock bit_block) {
      print_register<BitBlock>(regName, bit_block);
  }
}

namespace pablo {

PabloCompiler::PabloCompiler(const std::vector<Var*> & basisBits)
: mBasisBits(basisBits)
#ifdef USE_LLVM_3_5
, mMod(new Module("icgrep", getGlobalContext()))
#else
, mModOwner(make_unique<Module>("icgrep", getGlobalContext()))
, mMod(mModOwner.get())
#endif
, mBuilder(&LLVM_Builder)
, mExecutionEngine(nullptr)
, mBitBlockType(VectorType::get(IntegerType::get(mMod->getContext(), 64), BLOCK_SIZE / 64))
, mBasisBitsInputPtr(nullptr)
, mCarryDataPtr(nullptr)
, mBlockNo(nullptr)
, mWhileDepth(0)
, mIfDepth(0)
, mZeroInitializer(ConstantAggregateZero::get(mBitBlockType))
, mOneInitializer(ConstantVector::getAllOnesValue(mBitBlockType))
, mFunctionType(nullptr)
, mFunction(nullptr)
, mBasisBitsAddr(nullptr)
, mOutputAddrPtr(nullptr)
, mMaxWhileDepth(0)
, mPrintRegisterFunction(nullptr)
{
    //Create the jit execution engine.up
    InitializeNativeTarget();
    InitializeNativeTargetAsmPrinter();
    InitializeNativeTargetAsmParser();
    DefineTypes();
}

PabloCompiler::~PabloCompiler()
{

}
    
void PabloCompiler::InstallExternalFunction(std::string C_fn_name, void * fn_ptr) {
    mExternalMap.insert(std::make_pair(C_fn_name, fn_ptr));
}

void PabloCompiler::genPrintRegister(std::string regName, Value * bitblockValue) {
    Constant * regNameData = ConstantDataArray::getString(mMod->getContext(), regName);
    GlobalVariable *regStrVar = new GlobalVariable(*mMod, 
                                                   ArrayType::get(IntegerType::get(mMod->getContext(), 8), regName.length()+1),
                                                   /*isConstant=*/ true,
                                                   /*Linkage=*/ GlobalValue::PrivateLinkage,
                                                   /*Initializer=*/ regNameData);
    Value * regStrPtr = mBuilder->CreateGEP(regStrVar, {mBuilder->getInt64(0), mBuilder->getInt32(0)});
    mBuilder->CreateCall(mPrintRegisterFunction, {regStrPtr, bitblockValue});
}

CompiledPabloFunction PabloCompiler::compile(PabloBlock & pb)
{
    mWhileDepth = 0;
    mIfDepth = 0;
    mMaxWhileDepth = 0;
    // Get the total number of carry entries; add 1 extra element for the block number.
    unsigned totalCarryDataSize = pb.carryData.enumerate(pb) + 1;
    Examine(pb); 
    mCarryInVector.resize(totalCarryDataSize);
    mCarryOutVector.resize(totalCarryDataSize);
    mCarryDataSummaryIdx.resize(totalCarryDataSize);
    std::string errMessage;
#ifdef USE_LLVM_3_5
    EngineBuilder builder(mMod);
#else
    EngineBuilder builder(std::move(mModOwner));
#endif
    builder.setErrorStr(&errMessage);
    builder.setMCPU(sys::getHostCPUName());
#ifdef USE_LLVM_3_5
    builder.setUseMCJIT(true);
#endif
    builder.setOptLevel(mMaxWhileDepth ? CodeGenOpt::Level::Less : CodeGenOpt::Level::None);
    mExecutionEngine = builder.create();
    if (mExecutionEngine == nullptr) {
        throw std::runtime_error("Could not create ExecutionEngine: " + errMessage);
    }
    DeclareFunctions();

    DeclareCallFunctions();

    Function::arg_iterator args = mFunction->arg_begin();
    mBasisBitsAddr = args++;
    mBasisBitsAddr->setName("basis_bits");
    mCarryDataPtr = args++;
    mCarryDataPtr->setName("carry_data");
    mOutputAddrPtr = args++;
    mOutputAddrPtr->setName("output");

    mWhileDepth = 0;
    mIfDepth = 0;
    mMaxWhileDepth = 0;
    BasicBlock * b = BasicBlock::Create(mMod->getContext(), "parabix_entry", mFunction,0);
    mBuilder->SetInsertPoint(b);

    //The basis bits structure
    for (unsigned i = 0; i != mBasisBits.size(); ++i) {
        Value* indices[] = {mBuilder->getInt64(0), mBuilder->getInt32(i)};
        Value * gep = mBuilder->CreateGEP(mBasisBitsAddr, indices);
        LoadInst * basisBit = mBuilder->CreateAlignedLoad(gep, BLOCK_SIZE/8, false, mBasisBits[i]->getName()->to_string());
        mMarkerMap.insert(std::make_pair(mBasisBits[i], basisBit));
    }
    
    // The block number is a 64-bit integer at the end of the carry data area.
    Value * blockNoPtr = mBuilder->CreateBitCast(mBuilder->CreateGEP(mCarryDataPtr, mBuilder->getInt64(totalCarryDataSize - 1)), Type::getInt64PtrTy(mBuilder->getContext()));
    mBlockNo = mBuilder->CreateLoad(blockNoPtr);
    //Generate the IR instructions for the function.
    compileBlock(pb);
    
    mBuilder->CreateStore(mBuilder->CreateAdd(mBlockNo, mBuilder->getInt64(1)), blockNoPtr);

    if (DumpTrace || TraceNext) {
        genPrintRegister("blockNo", genCarryDataLoad(totalCarryDataSize - 1));
    }
    if (LLVM_UNLIKELY(mWhileDepth != 0)) {
        throw std::runtime_error("Non-zero nesting depth error (" + std::to_string(mWhileDepth) + ")");
    }

    //Terminate the block
    ReturnInst::Create(mMod->getContext(), mBuilder->GetInsertBlock());

    //Display the IR that has been generated by this module.
    if (LLVM_UNLIKELY(DumpGeneratedIR)) {
        mMod->dump();
    }
    //Create a verifier.  The verifier will print an error message if our module is malformed in any way.
    verifyModule(*mMod, &dbgs());

    mExecutionEngine->finalizeObject();

    //Return the required size of the carry data area to the process_block function.
    return CompiledPabloFunction(totalCarryDataSize * sizeof(BitBlock), mFunction, mExecutionEngine);
}

void PabloCompiler::DefineTypes()
{
    StructType * structBasisBits = mMod->getTypeByName("struct.Basis_bits");
    if (structBasisBits == nullptr) {
        structBasisBits = StructType::create(mMod->getContext(), "struct.Basis_bits");
    }
    std::vector<Type*>StructTy_struct_Basis_bits_fields;
    for (int i = 0; i != mBasisBits.size(); i++)
    {
        StructTy_struct_Basis_bits_fields.push_back(mBitBlockType);
    }
    if (structBasisBits->isOpaque()) {
        structBasisBits->setBody(StructTy_struct_Basis_bits_fields, /*isPacked=*/false);
    }
    mBasisBitsInputPtr = PointerType::get(structBasisBits, 0);

    std::vector<Type*>functionTypeArgs;
    functionTypeArgs.push_back(mBasisBitsInputPtr);

    //The carry data array.
    //A pointer to the BitBlock vector.
    functionTypeArgs.push_back(PointerType::get(mBitBlockType, 0));

    //The output structure.
    StructType * outputStruct = mMod->getTypeByName("struct.Output");
    if (!outputStruct) {
        outputStruct = StructType::create(mMod->getContext(), "struct.Output");
    }
    if (outputStruct->isOpaque()) {
        std::vector<Type*>fields;
        fields.push_back(mBitBlockType);
        fields.push_back(mBitBlockType);
        outputStruct->setBody(fields, /*isPacked=*/false);
    }
    PointerType* outputStructPtr = PointerType::get(outputStruct, 0);

    //The &output parameter.
    functionTypeArgs.push_back(outputStructPtr);

    mFunctionType = FunctionType::get(
     /*Result=*/Type::getVoidTy(mMod->getContext()),
     /*Params=*/functionTypeArgs,
     /*isVarArg=*/false);
}

void PabloCompiler::DeclareFunctions()
{
    //This function can be used for testing to print the contents of a register from JIT'd code to the terminal window.
    mPrintRegisterFunction = mMod->getOrInsertFunction("wrapped_print_register", Type::getVoidTy(getGlobalContext()), Type::getInt8PtrTy(getGlobalContext()), mBitBlockType, NULL);
    mExecutionEngine->addGlobalMapping(cast<GlobalValue>(mPrintRegisterFunction), (void *)&wrapped_print_register);
    // to call->  mBuilder->CreateCall(mFunc_print_register, unicode_category);

#ifdef USE_UADD_OVERFLOW
#ifdef USE_TWO_UADD_OVERFLOW
    // Type Definitions for llvm.uadd.with.overflow.carryin.i128 or .i256
    std::vector<Type*>StructTy_0_fields;
    StructTy_0_fields.push_back(IntegerType::get(mMod->getContext(), BLOCK_SIZE));
    StructTy_0_fields.push_back(IntegerType::get(mMod->getContext(), 1));
    StructType *StructTy_0 = StructType::get(mMod->getContext(), StructTy_0_fields, /*isPacked=*/false);

    std::vector<Type*>FuncTy_1_args;
    FuncTy_1_args.push_back(IntegerType::get(mMod->getContext(), BLOCK_SIZE));
    FuncTy_1_args.push_back(IntegerType::get(mMod->getContext(), BLOCK_SIZE));
    FunctionType* FuncTy_1 = FunctionType::get(
                                              /*Result=*/StructTy_0,
                                              /*Params=*/FuncTy_1_args,
                                              /*isVarArg=*/false);

    mFunctionUaddOverflow = mMod->getFunction("llvm.uadd.with.overflow.i" +
                                              std::to_string(BLOCK_SIZE));
    if (!mFunctionUaddOverflow) {
        mFunctionUaddOverflow= Function::Create(
          /*Type=*/ FuncTy_1,
          /*Linkage=*/ GlobalValue::ExternalLinkage,
          /*Name=*/ "llvm.uadd.with.overflow.i" + std::to_string(BLOCK_SIZE), mMod); // (external, no body)
        mFunctionUaddOverflow->setCallingConv(CallingConv::C);
    }
    AttributeSet mFunctionUaddOverflowPAL;
    {
        SmallVector<AttributeSet, 4> Attrs;
        AttributeSet PAS;
        {
          AttrBuilder B;
          B.addAttribute(Attribute::NoUnwind);
          B.addAttribute(Attribute::ReadNone);
          PAS = AttributeSet::get(mMod->getContext(), ~0U, B);
        }

        Attrs.push_back(PAS);
        mFunctionUaddOverflowPAL = AttributeSet::get(mMod->getContext(), Attrs);
    }
    mFunctionUaddOverflow->setAttributes(mFunctionUaddOverflowPAL);
#else
    // Type Definitions for llvm.uadd.with.overflow.carryin.i128 or .i256
    std::vector<Type*>StructTy_0_fields;
    StructTy_0_fields.push_back(IntegerType::get(mMod->getContext(), BLOCK_SIZE));
    StructTy_0_fields.push_back(IntegerType::get(mMod->getContext(), 1));
    StructType *StructTy_0 = StructType::get(mMod->getContext(), StructTy_0_fields, /*isPacked=*/false);

    std::vector<Type*>FuncTy_1_args;
    FuncTy_1_args.push_back(IntegerType::get(mMod->getContext(), BLOCK_SIZE));
    FuncTy_1_args.push_back(IntegerType::get(mMod->getContext(), BLOCK_SIZE));
    FuncTy_1_args.push_back(IntegerType::get(mMod->getContext(), 1));
    FunctionType* FuncTy_1 = FunctionType::get(
                                              /*Result=*/StructTy_0,
                                              /*Params=*/FuncTy_1_args,
                                              /*isVarArg=*/false);

    mFunctionUaddOverflowCarryin = mMod->getFunction("llvm.uadd.with.overflow.carryin.i" +
                                              std::to_string(BLOCK_SIZE));
    if (!mFunctionUaddOverflowCarryin) {
        mFunctionUaddOverflowCarryin = Function::Create(
          /*Type=*/ FuncTy_1,
          /*Linkage=*/ GlobalValue::ExternalLinkage,
          /*Name=*/ "llvm.uadd.with.overflow.carryin.i" + std::to_string(BLOCK_SIZE), mMod); // (external, no body)
        mFunctionUaddOverflowCarryin->setCallingConv(CallingConv::C);
    }
    AttributeSet mFunctionUaddOverflowCarryinPAL;
    {
        SmallVector<AttributeSet, 4> Attrs;
        AttributeSet PAS;
        {
          AttrBuilder B;
          B.addAttribute(Attribute::NoUnwind);
          B.addAttribute(Attribute::ReadNone);
          PAS = AttributeSet::get(mMod->getContext(), ~0U, B);
        }

        Attrs.push_back(PAS);
        mFunctionUaddOverflowCarryinPAL = AttributeSet::get(mMod->getContext(), Attrs);
    }
    mFunctionUaddOverflowCarryin->setAttributes(mFunctionUaddOverflowCarryinPAL);
#endif
#endif

    //Starts on process_block
    SmallVector<AttributeSet, 4> Attrs;
    AttributeSet PAS;
    {
        AttrBuilder B;
        B.addAttribute(Attribute::ReadOnly);
        B.addAttribute(Attribute::NoCapture);
        PAS = AttributeSet::get(mMod->getContext(), 1U, B);
    }
    Attrs.push_back(PAS);
    {
        AttrBuilder B;
        B.addAttribute(Attribute::NoCapture);
        PAS = AttributeSet::get(mMod->getContext(), 2U, B);
    }
    Attrs.push_back(PAS);
    {
        AttrBuilder B;
        B.addAttribute(Attribute::NoCapture);
        PAS = AttributeSet::get(mMod->getContext(), 3U, B);
    }
    Attrs.push_back(PAS);
    {
        AttrBuilder B;
        B.addAttribute(Attribute::NoUnwind);
        B.addAttribute(Attribute::UWTable);
        PAS = AttributeSet::get(mMod->getContext(), ~0U, B);
    }
    AttributeSet AttrSet = AttributeSet::get(mMod->getContext(), Attrs);

    //Create the function that will be generated.
    mFunction = mMod->getFunction("process_block");
    if (!mFunction) {
        mFunction = Function::Create(
            /*Type=*/mFunctionType,
            /*Linkage=*/GlobalValue::ExternalLinkage,
            /*Name=*/"process_block", mMod);
        mFunction->setCallingConv(CallingConv::C);
    }
    mFunction->setAttributes(AttrSet);
}
    
void PabloCompiler::Examine(PabloBlock & blk) {
    for (Statement * stmt : blk) {
        if (Call * call = dyn_cast<Call>(stmt)) {
            mCalleeMap.insert(std::make_pair(call->getCallee(), nullptr));
        }
        else if (If * ifStatement = dyn_cast<If>(stmt)) {
            ++mIfDepth;
            Examine(ifStatement->getBody());
            --mIfDepth;
        }
        else if (While * whileStatement = dyn_cast<While>(stmt)) {
            mMaxWhileDepth = std::max(mMaxWhileDepth, ++mWhileDepth);
            Examine(whileStatement->getBody());
            --mWhileDepth;
        }
    }
}

void PabloCompiler::DeclareCallFunctions() {
    for (auto mapping : mCalleeMap) {
        const String * callee = mapping.first;
        //std::cerr << callee->str() << " to be declared\n";
        auto ei = mExternalMap.find(callee->value());
        if (ei != mExternalMap.end()) {
            void * fn_ptr = ei->second;
            //std::cerr << "Ptr found:" <<  std::hex << ((intptr_t) fn_ptr) << std::endl;
            Value * externalValue = mMod->getOrInsertFunction(callee->value(), mBitBlockType, mBasisBitsInputPtr, NULL);
            if (LLVM_UNLIKELY(externalValue == nullptr)) {
                throw std::runtime_error("Could not create static method call for external function \"" + callee->to_string() + "\"");
            }
            mExecutionEngine->addGlobalMapping(cast<GlobalValue>(externalValue), fn_ptr);
            mCalleeMap[callee] = externalValue;
        }
        else {
            throw std::runtime_error("External function \"" + callee->to_string() + "\" not installed");
        }
    }
}

void PabloCompiler::compileBlock(PabloBlock & block) {
    mPabloBlock = &block;
    for (const Statement * statement : block) {
        compileStatement(statement);
    }
    mPabloBlock = block.getParent();
}


void PabloCompiler::compileIf(const If * ifStatement) {        
        //
        //  The If-ElseZero stmt:
        //  if <predicate:expr> then <body:stmt>* elsezero <defined:var>* endif
        //  If the value of the predicate is nonzero, then determine the values of variables
        //  <var>* by executing the given statements.  Otherwise, the value of the
        //  variables are all zero.  Requirements: (a) no variable that is defined within
        //  the body of the if may be accessed outside unless it is explicitly
        //  listed in the variable list, (b) every variable in the defined list receives
        //  a value within the body, and (c) the logical consequence of executing
        //  the statements in the event that the predicate is zero is that the
        //  values of all defined variables indeed work out to be 0.
        //
        //  Simple Implementation with Phi nodes:  a phi node in the if exit block
        //  is inserted for each variable in the defined variable list.  It receives
        //  a zero value from the ifentry block and the defined value from the if
        //  body.
        //
        BasicBlock * ifEntryBlock = mBuilder->GetInsertBlock();
        BasicBlock * ifBodyBlock = BasicBlock::Create(mMod->getContext(), "if.body", mFunction, 0);
        BasicBlock * ifEndBlock = BasicBlock::Create(mMod->getContext(), "if.end", mFunction, 0);
        
        const PabloBlockCarryData & cd = ifStatement -> getBody().carryData;
    
        const unsigned baseCarryDataIdx = cd.getBlockCarryDataIndex();
        const unsigned carrySummaryIndex = cd.summaryCarryDataIndex();
        
        Value* if_test_value = compileExpression(ifStatement->getCondition());
        if (cd.blockHasCarries()) {
            // load the summary variable
            Value* last_if_pending_data = genCarryDataLoad(carrySummaryIndex);
            if_test_value = mBuilder->CreateOr(if_test_value, last_if_pending_data);
        }
        mBuilder->CreateCondBr(genBitBlockAny(if_test_value), ifEndBlock, ifBodyBlock);

        // Entry processing is complete, now handle the body of the if.
        mBuilder->SetInsertPoint(ifBodyBlock);
        compileBlock(ifStatement -> getBody());
    
        if (cd.explicitSummaryRequired()) {
            // If there was only one carry entry, then it also serves as the summary variable.
            // Otherwise, we need to combine entries to compute the summary.
            Value * carry_summary = mZeroInitializer;
            for (int c = baseCarryDataIdx; c < carrySummaryIndex; c++) {
                int s = mCarryDataSummaryIdx[c];
                if (s == -1) {
                    Value* carryq_value = mCarryOutVector[c];
                    if (carry_summary == mZeroInitializer) {
                        carry_summary = carryq_value;
                    }
                    else {
                        carry_summary = mBuilder->CreateOr(carry_summary, carryq_value);
                    }
                    mCarryDataSummaryIdx[c] = carrySummaryIndex;
                }
            }
            genCarryDataStore(carry_summary, carrySummaryIndex);
        }
        BasicBlock * ifBodyFinalBlock = mBuilder->GetInsertBlock();
        mBuilder->CreateBr(ifEndBlock);
        //End Block
        mBuilder->SetInsertPoint(ifEndBlock);
        for (const PabloAST * node : ifStatement->getDefined()) {
            const Assign * assign = cast<Assign>(node);
            PHINode * phi = mBuilder->CreatePHI(mBitBlockType, 2, assign->getName()->value());
            auto f = mMarkerMap.find(assign);
            assert (f != mMarkerMap.end());
            phi->addIncoming(mZeroInitializer, ifEntryBlock);
            phi->addIncoming(f->second, ifBodyFinalBlock);
            mMarkerMap[assign] = phi;
        }
        // Create the phi Node for the summary variable, if needed.
        if (cd.summaryNeededInParentBlock()) {
            PHINode * summary_phi = mBuilder->CreatePHI(mBitBlockType, 2, "summary");
            summary_phi->addIncoming(mZeroInitializer, ifEntryBlock);
            summary_phi->addIncoming(mCarryOutVector[carrySummaryIndex], ifBodyFinalBlock);
            mCarryOutVector[carrySummaryIndex] = summary_phi;
        }
        
}

//#define SET_WHILE_CARRY_IN_TO_ZERO_AFTER_FIRST_ITERATION

#define LOAD_WHILE_CARRIES \
        if (mWhileDepth == 0) { \
            for (auto i = baseCarryDataIdx; i < baseCarryDataIdx + carryDataSize; ++i) { \
                mCarryInVector[i] = mBuilder->CreateAlignedLoad(mBuilder->CreateGEP(mCarryDataPtr, mBuilder->getInt64(i)), BLOCK_SIZE/8, false); \
            } \
        }

#define INITIALIZE_CARRY_IN_PHIS  \
        std::vector<PHINode *> carryInPhis(carryDataSize);  \
        for (unsigned index = 0; index < carryDataSize; ++index) {  \
            PHINode * phi_in = mBuilder->CreatePHI(mBitBlockType, 2); \
            phi_in->addIncoming(mCarryInVector[baseCarryDataIdx + index], whileEntryBlock); \
            carryInPhis[index] = phi_in; \
        }

#define INITIALIZE_CARRY_OUT_ACCUMULATOR_PHIS \
        std::vector<PHINode *> carryOutAccumPhis(carryDataSize); \
        for (unsigned index = 0; index < carryDataSize; ++index) { \
            PHINode * phi_out = mBuilder->CreatePHI(mBitBlockType, 2); \
            phi_out->addIncoming(mZeroInitializer, whileEntryBlock); \
            carryOutAccumPhis[index] = phi_out; \
            mCarryOutVector[baseCarryDataIdx + index] = mZeroInitializer; \
        }

#define EXTEND_CARRY_IN_PHIS_TO_ZERO_FROM_WHILE_BODY_FINAL_BLOCK \
        for (unsigned index = 0; index < carryDataSize; ++index) { \
            carryInPhis[index]->addIncoming(mZeroInitializer, whileBodyFinalBlock); \
        }

#define EXTEND_CARRY_OUT_ACCUMULATOR_PHIS_TO_OR_COMBINE_CARRY_OUT \
        for (unsigned index = 0; index < carryDataSize; ++index) { \
            PHINode * phi = carryOutAccumPhis[index]; \
            Value * carryOut = mBuilder->CreateOr(phi, mCarryOutVector[baseCarryDataIdx + index]); \
            phi->addIncoming(carryOut, whileBodyFinalBlock); \
            mCarryOutVector[baseCarryDataIdx + index] = carryOut; \
        }

#define STORE_WHILE_CARRY_DATA \
        if (mWhileDepth == 0) { \
            for (unsigned index = baseCarryDataIdx; index < baseCarryDataIdx + carryDataSize; ++index) { \
                mBuilder->CreateAlignedStore(mCarryOutVector[index], mBuilder->CreateGEP(mCarryDataPtr, mBuilder->getInt64(index)), BLOCK_SIZE/8, false); \
            } \
        }


void PabloCompiler::compileWhile(const While * whileStatement) {
        //BasicBlock* whileEntryBlock = mBasicBlock;
        BasicBlock * whileEntryBlock = mBuilder->GetInsertBlock();
        BasicBlock * whileBodyBlock = BasicBlock::Create(mMod->getContext(), "while.body", mFunction, 0);
        BasicBlock * whileEndBlock = BasicBlock::Create(mMod->getContext(), "while.end", mFunction, 0);
    
    
        const PabloBlockCarryData & cd = whileStatement -> getBody().carryData;
        const unsigned baseCarryDataIdx = cd.getBlockCarryDataIndex();
        const unsigned carryDataSize = cd.getTotalCarryDataSize();


        LOAD_WHILE_CARRIES

        const auto & nextNodes = whileStatement->getVariants();
        std::vector<PHINode *> nextPhis;
        nextPhis.reserve(nextNodes.size());
    
        // On entry to the while structure, proceed to execute the first iteration
        // of the loop body unconditionally.   The while condition is tested at the end of
        // the loop.

        mBuilder->CreateBr(whileBodyBlock);
        mBuilder->SetInsertPoint(whileBodyBlock);
    
        //
        // There are 3 sets of Phi nodes for the while loop.
        // (1) Carry-ins: (a) incoming carry data first iterations, (b) zero thereafter
        // (2) Carry-out accumulators: (a) zero first iteration, (b) |= carry-out of each iteration
        // (3) Next nodes: (a) values set up before loop, (b) modified values calculated in loop.

#ifdef SET_WHILE_CARRY_IN_TO_ZERO_AFTER_FIRST_ITERATION
        INITIALIZE_CARRY_IN_PHIS
#endif

        INITIALIZE_CARRY_OUT_ACCUMULATOR_PHIS
    
        // for any Next nodes in the loop body, initialize to (a) pre-loop value.
        for (const Next * n : nextNodes) {
            PHINode * phi = mBuilder->CreatePHI(mBitBlockType, 2, n->getName()->value());
            auto f = mMarkerMap.find(n->getInitial());
            assert (f != mMarkerMap.end());
            phi->addIncoming(f->second, whileEntryBlock);
            mMarkerMap[n->getInitial()] = phi;
            nextPhis.push_back(phi);
        }

        //
        // Now compile the loop body proper.  Carry-out accumulated values
        // and iterated values of Next nodes will be computed.
        ++mWhileDepth;
        compileBlock(whileStatement->getBody());
    
        BasicBlock * whileBodyFinalBlock = mBuilder->GetInsertBlock();

#ifdef SET_WHILE_CARRY_IN_TO_ZERO_AFTER_FIRST_ITERATION
        EXTEND_CARRY_IN_PHIS_TO_ZERO_FROM_WHILE_BODY_FINAL_BLOCK
#endif

        EXTEND_CARRY_OUT_ACCUMULATOR_PHIS_TO_OR_COMBINE_CARRY_OUT

        // Terminate the while loop body with a conditional branch back.
        mBuilder->CreateCondBr(genBitBlockAny(compileExpression(whileStatement->getCondition())), whileEndBlock, whileBodyBlock);

        // and for any Next nodes in the loop body
        for (unsigned i = 0; i < nextNodes.size(); i++) {
            const Next * n = nextNodes[i];
            auto f = mMarkerMap.find(n->getExpr());
            if (LLVM_UNLIKELY(f == mMarkerMap.end())) {
                throw std::runtime_error("Next node expression was not compiled!");
            }
            nextPhis[i]->addIncoming(f->second, whileBodyFinalBlock);
        }

        // EXIT BLOCK
        mBuilder->SetInsertPoint(whileEndBlock);
        --mWhileDepth;

        STORE_WHILE_CARRY_DATA
}


void PabloCompiler::compileStatement(const Statement * stmt) {
    Value * expr = nullptr;
    if (const Assign * assign = dyn_cast<const Assign>(stmt)) {
        expr = compileExpression(assign->getExpr());
        if (DumpTrace) {
            genPrintRegister(assign->getName()->to_string(), expr);
        }
        if (LLVM_UNLIKELY(assign->isOutputAssignment())) {
            SetOutputValue(expr, assign->getOutputIndex());
        }
    }
    else if (const Next * next = dyn_cast<const Next>(stmt)) {
        expr = compileExpression(next->getExpr());
        if (TraceNext) {
            genPrintRegister(next->getName()->to_string(), expr);
        }
    }
    else if (const If * ifStatement = dyn_cast<const If>(stmt)) {
        compileIf(ifStatement);
        return;
    }
    else if (const While * whileStatement = dyn_cast<const While>(stmt)) {
        compileWhile(whileStatement);
        return;
    }
    else if (const Call* call = dyn_cast<Call>(stmt)) {
        //Call the callee once and store the result in the marker map.
        if (mMarkerMap.count(call) != 0) {
            return;
        }
        auto ci = mCalleeMap.find(call->getCallee());
        if (LLVM_UNLIKELY(ci == mCalleeMap.end())) {
            throw std::runtime_error("Unexpected error locating static function for \"" + call->getCallee()->to_string() + "\"");
        }
        expr = mBuilder->CreateCall(ci->second, mBasisBitsAddr);
    }
    else if (const And * pablo_and = dyn_cast<And>(stmt)) {
        expr = mBuilder->CreateAnd(compileExpression(pablo_and->getExpr1()), compileExpression(pablo_and->getExpr2()), "and");
        if (DumpTrace) {
            genPrintRegister(stmt->getName()->to_string(), expr);
        }
    }
    else if (const Or * pablo_or = dyn_cast<Or>(stmt)) {
        expr = mBuilder->CreateOr(compileExpression(pablo_or->getExpr1()), compileExpression(pablo_or->getExpr2()), "or");
        if (DumpTrace) {
            genPrintRegister(stmt->getName()->to_string(), expr);
        }
    }
    else if (const Xor * pablo_xor = dyn_cast<Xor>(stmt)) {
        expr = mBuilder->CreateXor(compileExpression(pablo_xor->getExpr1()), compileExpression(pablo_xor->getExpr2()), "xor");
    }
    else if (const Sel * sel = dyn_cast<Sel>(stmt)) {
        Value* ifMask = compileExpression(sel->getCondition());
        Value* ifTrue = mBuilder->CreateAnd(ifMask, compileExpression(sel->getTrueExpr()));
        Value* ifFalse = mBuilder->CreateAnd(genNot(ifMask), compileExpression(sel->getFalseExpr()));
        expr = mBuilder->CreateOr(ifTrue, ifFalse);
        if (DumpTrace) {
            genPrintRegister(stmt->getName()->to_string(), expr);
        }
    }
    else if (const Not * pablo_not = dyn_cast<Not>(stmt)) {
        expr = genNot(compileExpression(pablo_not->getExpr()));
        if (DumpTrace) {
            genPrintRegister(stmt->getName()->to_string(), expr);
        }
    }
    else if (const Advance * adv = dyn_cast<Advance>(stmt)) {
        Value* value = compileExpression(adv->getExpr());
        int shift = adv->getAdvanceAmount();
        unsigned advance_index = adv->getLocalAdvanceIndex();
        expr = genAdvanceWithCarry(value, shift, advance_index);
        if (DumpTrace) {
            genPrintRegister(stmt->getName()->to_string(), expr);
        }
    }
    else if (const MatchStar * mstar = dyn_cast<MatchStar>(stmt)) {
        Value * marker = compileExpression(mstar->getMarker());
        Value * cc = compileExpression(mstar->getCharClass());
        Value * marker_and_cc = mBuilder->CreateAnd(marker, cc);
        unsigned carry_index = mstar->getLocalCarryIndex();
        expr = mBuilder->CreateOr(mBuilder->CreateXor(genAddWithCarry(marker_and_cc, cc, carry_index), cc), marker, "matchstar");
        if (DumpTrace) {
            genPrintRegister(stmt->getName()->to_string(), expr);
        }
    }
    else if (const ScanThru * sthru = dyn_cast<ScanThru>(stmt)) {
        Value * marker_expr = compileExpression(sthru->getScanFrom());
        Value * cc_expr = compileExpression(sthru->getScanThru());
        unsigned carry_index = sthru->getLocalCarryIndex();
        expr = mBuilder->CreateAnd(genAddWithCarry(marker_expr, cc_expr, carry_index), genNot(cc_expr), "scanthru");
        if (DumpTrace) {
            genPrintRegister(stmt->getName()->to_string(), expr);
        }
    }
    else {
        llvm::raw_os_ostream cerr(std::cerr);
        PabloPrinter::print(stmt, cerr);
        throw std::runtime_error("Unrecognized Pablo Statement! can't compile.");
    }
    mMarkerMap[stmt] = expr;
}

Value * PabloCompiler::compileExpression(const PabloAST * expr) {
    if (isa<Ones>(expr)) {
        return mOneInitializer;
    }
    else if (isa<Zeroes>(expr)) {
        return mZeroInitializer;
    }
    auto f = mMarkerMap.find(expr);
    if (LLVM_UNLIKELY(f == mMarkerMap.end())) {
        std::string o;
        llvm::raw_string_ostream str(o);
        str << "\"";
        PabloPrinter::print(expr, str);
        str << "\" was used before definition!";
        throw std::runtime_error(str.str());
    }
    return f->second;
}


#ifdef USE_UADD_OVERFLOW
#ifdef USE_TWO_UADD_OVERFLOW
PabloCompiler::SumWithOverflowPack PabloCompiler::callUaddOverflow(Value* int128_e1, Value* int128_e2) {
    std::vector<Value*> struct_res_params;
    struct_res_params.push_back(int128_e1);
    struct_res_params.push_back(int128_e2);
    CallInst* struct_res = CallInst::Create(mFunctionUaddOverflow, struct_res_params, "uadd_overflow_res", mBasicBlock);
    struct_res->setCallingConv(CallingConv::C);
    struct_res->setTailCall(false);
    AttributeSet struct_res_PAL;
    struct_res->setAttributes(struct_res_PAL);

    SumWithOverflowPack ret;

    std::vector<unsigned> int128_sum_indices;
    int128_sum_indices.push_back(0);
    ret.sum = ExtractValueInst::Create(struct_res, int128_sum_indices, "sum", mBasicBlock);

    std::vector<unsigned> int1_obit_indices;
    int1_obit_indices.push_back(1);
    ret.obit = ExtractValueInst::Create(struct_res, int1_obit_indices, "obit", mBasicBlock);

    return ret;
}
#else
PabloCompiler::SumWithOverflowPack PabloCompiler::callUaddOverflow(Value* int128_e1, Value* int128_e2, Value* int1_cin) {
    std::vector<Value*> struct_res_params;
    struct_res_params.push_back(int128_e1);
    struct_res_params.push_back(int128_e2);
    struct_res_params.push_back(int1_cin);
    CallInst* struct_res = CallInst::Create(mFunctionUaddOverflowCarryin, struct_res_params, "uadd_overflow_res", mBasicBlock);
    struct_res->setCallingConv(CallingConv::C);
    struct_res->setTailCall(false);
    AttributeSet struct_res_PAL;
    struct_res->setAttributes(struct_res_PAL);

    SumWithOverflowPack ret;

    std::vector<unsigned> int128_sum_indices;
    int128_sum_indices.push_back(0);
    ret.sum = ExtractValueInst::Create(struct_res, int128_sum_indices, "sum", mBasicBlock);

    std::vector<unsigned> int1_obit_indices;
    int1_obit_indices.push_back(1);
    ret.obit = ExtractValueInst::Create(struct_res, int1_obit_indices, "obit", mBasicBlock);

    return ret;
}
#endif
#endif


Value* PabloCompiler::genAddWithCarry(Value* e1, Value* e2, unsigned localIndex) {
    const PabloBlockCarryData & cd = mPabloBlock->carryData;
    const unsigned carryIdx = cd.carryOpCarryDataOffset(localIndex);
    Value* carryq_value = genCarryDataLoad(carryIdx);
#ifdef USE_TWO_UADD_OVERFLOW
    //This is the ideal implementation, which uses two uadd.with.overflow
    //The back end should be able to recognize this pattern and combine it into uadd.with.overflow.carryin
    CastInst* int128_e1 = new BitCastInst(e1, mBuilder->getIntNTy(BLOCK_SIZE), "e1_128", mBasicBlock);
    CastInst* int128_e2 = new BitCastInst(e2, mBuilder->getIntNTy(BLOCK_SIZE), "e2_128", mBasicBlock);
    CastInst* int128_carryq_value = new BitCastInst(carryq_value, mBuilder->getIntNTy(BLOCK_SIZE), "carryq_128", mBasicBlock);

    SumWithOverflowPack sumpack0, sumpack1;

    sumpack0 = callUaddOverflow(int128_e1, int128_e2);
    sumpack1 = callUaddOverflow(sumpack0.sum, int128_carryq_value);

    Value* obit = mBuilder->CreateOr(sumpack0.obit, sumpack1.obit, "carry_bit");
    Value* sum = mBuilder->CreateBitCast(sumpack1.sum, mBitBlockType, "ret_sum");

    /*obit is the i1 carryout, zero extend and insert it into a v2i64 or v4i64 vector.*/
    ConstantAggregateZero* const_packed_5 = ConstantAggregateZero::get(mBitBlockType);
    ConstantInt* const_int32_6 = ConstantInt::get(mMod->getContext(), APInt(32, StringRef("0"), 10));
    CastInst* int64_o0 = new ZExtInst(obit, IntegerType::get(mMod->getContext(), 64), "o0", mBasicBlock);
    InsertElementInst* carry_out = InsertElementInst::Create(const_packed_5, int64_o0, const_int32_6, "carry_out", mBasicBlock);

#elif defined USE_UADD_OVERFLOW
    //use llvm.uadd.with.overflow.i128 or i256
    CastInst* int128_e1 = new BitCastInst(e1, mBuilder->getIntNTy(BLOCK_SIZE), "e1_128", mBasicBlock);
    CastInst* int128_e2 = new BitCastInst(e2, mBuilder->getIntNTy(BLOCK_SIZE), "e2_128", mBasicBlock);

    //get i1 carryin from iBLOCK_SIZE
    ConstantInt* const_int32_6 = ConstantInt::get(mMod->getContext(), APInt(32, StringRef("0"), 10));
    ExtractElementInst * int64_carryq_value = ExtractElementInst::Create(carryq_value, const_int32_6, "carryq_64", mBasicBlock);
    CastInst* int1_carryq_value = new TruncInst(int64_carryq_value, IntegerType::get(mMod->getContext(), 1), "carryq_1", mBasicBlock);

    SumWithOverflowPack sumpack0;
    sumpack0 = callUaddOverflow(int128_e1, int128_e2, int1_carryq_value);
    Value* obit = sumpack0.obit;
    Value* sum = mBuilder->CreateBitCast(sumpack0.sum, mBitBlockType, "sum");

    /*obit is the i1 carryout, zero extend and insert it into a v2i64 or v4i64 vector.*/
    ConstantAggregateZero* const_packed_5 = ConstantAggregateZero::get(mBitBlockType);
    CastInst* int64_o0 = new ZExtInst(obit, IntegerType::get(mMod->getContext(), 64), "o0", mBasicBlock);
    InsertElementInst* carry_out = InsertElementInst::Create(const_packed_5, int64_o0, const_int32_6, "carry_out", mBasicBlock);
#elif (BLOCK_SIZE == 128)
    //calculate carry through logical ops
    Value* carrygen = mBuilder->CreateAnd(e1, e2, "carrygen");
    Value* carryprop = mBuilder->CreateOr(e1, e2, "carryprop");
    Value* digitsum = mBuilder->CreateAdd(e1, e2, "digitsum");
    Value* partial = mBuilder->CreateAdd(digitsum, carryq_value, "partial");
    Value* digitcarry = mBuilder->CreateOr(carrygen, mBuilder->CreateAnd(carryprop, genNot(partial)));
    Value* mid_carry_in = genShiftLeft64(mBuilder->CreateLShr(digitcarry, 63), "mid_carry_in");

    Value* sum = mBuilder->CreateAdd(partial, mid_carry_in, "sum");
    Value* carry_out = genShiftHighbitToLow(BLOCK_SIZE, mBuilder->CreateOr(carrygen, mBuilder->CreateAnd(carryprop, genNot(sum))));
#else
    //BLOCK_SIZE == 256, there is no other implementation
    static_assert(false, "Add with carry for 256-bit bitblock requires USE_UADD_OVERFLOW");
#endif //USE_TWO_UADD_OVERFLOW

    genCarryDataStore(carry_out, carryIdx);
    return sum;
}
//#define CARRY_DEBUG
Value* PabloCompiler::genCarryDataLoad(const unsigned index) {
    assert (index < mCarryInVector.size());
    if (mWhileDepth == 0) {
        mCarryInVector[index] = mBuilder->CreateAlignedLoad(mBuilder->CreateGEP(mCarryDataPtr, mBuilder->getInt64(index)), BLOCK_SIZE/8, false);
    }
#ifdef CARRY_DEBUG
    std::cerr << "genCarryDataLoad " << index << std::endl;
    genPrintRegister("carry_in_" + std::to_string(index), mCarryInVector[index]);
#endif
    return mCarryInVector[index];
}

void PabloCompiler::genCarryDataStore(Value* carryOut, const unsigned index ) {
    assert (carryOut);
    assert (index < mCarryOutVector.size());
    if (mWhileDepth == 0) {
        mBuilder->CreateAlignedStore(carryOut, mBuilder->CreateGEP(mCarryDataPtr, mBuilder->getInt64(index)), BLOCK_SIZE/8, false);
    }
    mCarryDataSummaryIdx[index] = -1;
    mCarryOutVector[index] = carryOut;
#ifdef CARRY_DEBUG
    std::cerr << "genCarryDataStore " << index << std::endl;
    genPrintRegister("carry_out_" + std::to_string(index), mCarryOutVector[index]);
#endif
    //std::cerr << "mCarryOutVector[" << index << "]]\n";
}

inline Value* PabloCompiler::genBitBlockAny(Value* test) {
    Value* cast_marker_value_1 = mBuilder->CreateBitCast(test, mBuilder->getIntNTy(BLOCK_SIZE));
    return mBuilder->CreateICmpEQ(cast_marker_value_1, ConstantInt::get(mBuilder->getIntNTy(BLOCK_SIZE), 0));
}

Value * PabloCompiler::genShiftHighbitToLow(unsigned FieldWidth, Value * op) {
    unsigned FieldCount = BLOCK_SIZE/FieldWidth;
    VectorType * vType = VectorType::get(IntegerType::get(mMod->getContext(), FieldWidth), FieldCount);
    Value * v = mBuilder->CreateBitCast(op, vType);
    return mBuilder->CreateBitCast(mBuilder->CreateLShr(v, FieldWidth - 1), mBitBlockType);
}

Value* PabloCompiler::genShiftLeft64(Value* e, const Twine &namehint) {
    Value* i128_val = mBuilder->CreateBitCast(e, mBuilder->getIntNTy(BLOCK_SIZE));
    return mBuilder->CreateBitCast(mBuilder->CreateShl(i128_val, 64, namehint), mBitBlockType);
}

inline Value* PabloCompiler::genNot(Value* expr) {
    return mBuilder->CreateXor(expr, mOneInitializer, "not");
}

Value* PabloCompiler::genAdvanceWithCarry(Value* strm_value, int shift_amount, unsigned localIndex) {
    if (shift_amount >= LongAdvanceBase) {
        return genLongAdvanceWithCarry(strm_value, shift_amount, localIndex);
    }
    else if (shift_amount == 1) {
        return genUnitAdvanceWithCarry(strm_value, localIndex);
    }
    const PabloBlockCarryData & cd = mPabloBlock->carryData;
    const auto advanceIndex = cd.shortAdvanceCarryDataOffset(localIndex);
    Value* result_value;
    
    if (shift_amount == 0) {
        result_value = genCarryDataLoad(advanceIndex);
    }
    else {
        Value* advanceq_longint = mBuilder->CreateBitCast(genCarryDataLoad(advanceIndex), mBuilder->getIntNTy(BLOCK_SIZE));
        Value* strm_longint = mBuilder->CreateBitCast(strm_value, mBuilder->getIntNTy(BLOCK_SIZE));
        Value* adv_longint = mBuilder->CreateOr(mBuilder->CreateShl(strm_longint, shift_amount), mBuilder->CreateLShr(advanceq_longint, BLOCK_SIZE - shift_amount), "advance");
        result_value = mBuilder->CreateBitCast(adv_longint, mBitBlockType);
    }
    genCarryDataStore(strm_value, advanceIndex);
    return result_value;
}
                    
Value* PabloCompiler::genUnitAdvanceWithCarry(Value* strm_value, unsigned localIndex) {
    const PabloBlockCarryData & cd = mPabloBlock->carryData;
    const auto advanceIndex = cd.unitAdvanceCarryDataOffset(localIndex);
    Value* result_value;
    
#if (BLOCK_SIZE == 128) && !defined(USE_LONG_INTEGER_SHIFT)
    Value* advanceq_value = genShiftHighbitToLow(BLOCK_SIZE, genCarryDataLoad(advanceIndex));
    Value* srli_1_value = mBuilder->CreateLShr(strm_value, 63);
    Value* packed_shuffle;
    Constant* const_packed_1_elems [] = {mBuilder->getInt32(0), mBuilder->getInt32(2)};
    Constant* const_packed_1 = ConstantVector::get(const_packed_1_elems);
    packed_shuffle = mBuilder->CreateShuffleVector(advanceq_value, srli_1_value, const_packed_1);
    
    Constant* const_packed_2_elems[] = {mBuilder->getInt64(1), mBuilder->getInt64(1)};
    Constant* const_packed_2 = ConstantVector::get(const_packed_2_elems);
    
    Value* shl_value = mBuilder->CreateShl(strm_value, const_packed_2);
    result_value = mBuilder->CreateOr(shl_value, packed_shuffle, "advance");
#else
    Value* advanceq_longint = mBuilder->CreateBitCast(genCarryDataLoad(advanceIndex), mBuilder->getIntNTy(BLOCK_SIZE));
    Value* strm_longint = mBuilder->CreateBitCast(strm_value, mBuilder->getIntNTy(BLOCK_SIZE));
    Value* adv_longint = mBuilder->CreateOr(mBuilder->CreateShl(strm_longint, 1), mBuilder->CreateLShr(advanceq_longint, BLOCK_SIZE - 1), "advance");
    result_value = mBuilder->CreateBitCast(adv_longint, mBitBlockType);
    
#endif
    genCarryDataStore(strm_value, advanceIndex);
    return result_value;
}
                    
//
// Generate code for long advances >= LongAdvanceBase
//
Value* PabloCompiler::genLongAdvanceWithCarry(Value* strm_value, int shift_amount, unsigned localIndex) {
    const PabloBlockCarryData & cd = mPabloBlock->carryData;
    const unsigned block_shift = shift_amount % BLOCK_SIZE;
    const unsigned advanceEntries = cd.longAdvanceEntries(shift_amount);
    const unsigned bufsize = cd.longAdvanceBufferSize(shift_amount);
    //std::cerr << "shift_amount = " << shift_amount << " bufsize = " << bufsize << std::endl;
    Value * indexMask = mBuilder->getInt64(bufsize - 1);  // A mask to implement circular buffer indexing
    Value * advBaseIndex = mBuilder->getInt64(cd.longAdvanceCarryDataOffset(localIndex));
    Value * storeIndex = mBuilder->CreateAdd(mBuilder->CreateAnd(mBlockNo, indexMask), advBaseIndex);
    Value * loadIndex = mBuilder->CreateAdd(mBuilder->CreateAnd(mBuilder->CreateSub(mBlockNo, mBuilder->getInt64(advanceEntries)), indexMask), advBaseIndex);
    Value * storePtr = mBuilder->CreateGEP(mCarryDataPtr, storeIndex);
    Value * loadPtr = mBuilder->CreateGEP(mCarryDataPtr, loadIndex);
    Value* result_value;

    if (block_shift == 0) {
        result_value = mBuilder->CreateAlignedLoad(loadPtr, BLOCK_SIZE/8);
    }
    else if (advanceEntries == 1) {
        Value* advanceq_longint = mBuilder->CreateBitCast(mBuilder->CreateAlignedLoad(loadPtr, BLOCK_SIZE/8), mBuilder->getIntNTy(BLOCK_SIZE));
        Value* strm_longint = mBuilder->CreateBitCast(strm_value, mBuilder->getIntNTy(BLOCK_SIZE));
        Value* adv_longint = mBuilder->CreateOr(mBuilder->CreateShl(strm_longint, block_shift), mBuilder->CreateLShr(advanceq_longint, BLOCK_SIZE - block_shift), "advance");
        result_value = mBuilder->CreateBitCast(adv_longint, mBitBlockType);
    }
    else {
        // The advance is based on the two oldest bit blocks in the advance buffer.
        // The buffer is maintained as a circular buffer of size bufsize.
        // Indexes within the buffer are computed by bitwise and with the indexMask.
        Value * loadIndex2 = mBuilder->CreateAdd(mBuilder->CreateAnd(mBuilder->CreateSub(mBlockNo, mBuilder->getInt64(advanceEntries-1)), indexMask), advBaseIndex);
        Value * loadPtr2 = mBuilder->CreateGEP(mCarryDataPtr, loadIndex2);
        Value* advanceq_longint = mBuilder->CreateBitCast(mBuilder->CreateAlignedLoad(loadPtr, BLOCK_SIZE/8), mBuilder->getIntNTy(BLOCK_SIZE));
        //genPrintRegister("advanceq_longint", mBuilder->CreateBitCast(advanceq_longint, mBitBlockType));
        Value* strm_longint = mBuilder->CreateBitCast(mBuilder->CreateAlignedLoad(loadPtr2, BLOCK_SIZE/8), mBuilder->getIntNTy(BLOCK_SIZE));
        //genPrintRegister("strm_longint", mBuilder->CreateBitCast(strm_longint, mBitBlockType));
        Value* adv_longint = mBuilder->CreateOr(mBuilder->CreateShl(strm_longint, block_shift), mBuilder->CreateLShr(advanceq_longint, BLOCK_SIZE - block_shift), "longadvance");
        result_value = mBuilder->CreateBitCast(adv_longint, mBitBlockType);
    }
    mBuilder->CreateAlignedStore(strm_value, storePtr, BLOCK_SIZE/8);
    return result_value;
}
    
void PabloCompiler::SetOutputValue(Value * marker, const unsigned index) {
    if (marker->getType()->isPointerTy()) {
        marker = mBuilder->CreateAlignedLoad(marker, BLOCK_SIZE/8, false);
    }
    Value* indices[] = {mBuilder->getInt64(0), mBuilder->getInt32(index)};
    Value* gep = mBuilder->CreateGEP(mOutputAddrPtr, indices);
    mBuilder->CreateAlignedStore(marker, gep, BLOCK_SIZE/8, false);
}

CompiledPabloFunction::CompiledPabloFunction(size_t carryDataSize, Function * function, ExecutionEngine * executionEngine)
: CarryDataSize(carryDataSize)
, FunctionPointer(executionEngine->getPointerToFunction(function))
, mFunction(function)
, mExecutionEngine(executionEngine)
{

}

// Clean up the memory for the compiled function once we're finished using it.
CompiledPabloFunction::~CompiledPabloFunction() {
    if (mExecutionEngine) {
        assert (mFunction);
        // mExecutionEngine->freeMachineCodeForFunction(mFunction); // This function only prints a "not supported" message. Reevaluate with LLVM 3.6.
        delete mExecutionEngine;
    }
}

}
