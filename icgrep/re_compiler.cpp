/*
 *  Copyright (c) 2014 International Characters.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters.
 */

#include "re_compiler.h"

RE_Compiler::RE_Compiler(){}

LLVM_Gen_RetVal RE_Compiler::compile(bool show_compile_time, std::string basis_pattern, std::string gensym_pattern, UTF_Encoding encoding, std::string input_string)
{
    RE_Parser parser;

    ParseResult* parse_result = parser.parse_re(input_string);

    RE* parsed_re = 0;
    if (ParseSuccess* success = dynamic_cast<ParseSuccess*>(parse_result))
    {
        parsed_re = success->getRE();
    }
    else if (ParseFailure* failure = dynamic_cast<ParseFailure*>(parse_result))
    {
        std::cout << failure->getErrorMsg() << std::endl;
        exit(1);
    }
    else
    {
        std::cout << "An unexepected parser error has occured!" << std::endl;
        exit(1);
    }

    //Print to the terminal the AST that was generated by the parser before adding the UTF encoding:
    //std::cout << "\n" + Printer_RE::PrintRE(parsed_re) + "\n" << std::endl;

    //Add the UTF encoding.
    RE* utf_encoded_re = 0;
    if (encoding.getName().compare("UTF-8") == 0)
    {
        UTF8_Encoder utf8_encoder;
        utf_encoded_re = utf8_encoder.toUTF8(parsed_re);
    }
    else
    {
        std::cout << "Invalid encoding!" << std::endl;
        exit(1);
    }

    //Print to the terminal the AST that was generated by the utf8 encoder.
    //std::cout << "\n" + Printer_RE::PrintRE(utf_encoded_re) + "\n" << std::endl;

    //Build our list of predefined characters.
    std::list<CC*> predefined_characters;
    CC* cc_lf = new CC("lex.cclf", '\n');
    predefined_characters.push_back(cc_lf);

    CC_Compiler cc_compiler(encoding);
    std::list<PabloS*> cc_stmtsl = cc_compiler.compile(basis_pattern, gensym_pattern, utf_encoded_re, predefined_characters);

    //Print to the terminal the AST that was generated by the character class compiler.
    //std::cout << "\n" << "(" << StatementPrinter::Print_CC_PabloStmts(cc_stmtsl) << ")" << "\n" << std::endl;

    Pbix_Compiler pbix_compiler;
    CodeGenState cg_state = pbix_compiler.compile(utf_encoded_re);

    //Print to the terminal the AST that was generated by the pararallel bit-stream compiler.
    //std::cout << "\n" << "(" << StatementPrinter::PrintStmts(cg_state) << ")" << "\n" << std::endl;

    LLVM_Generator irgen(basis_pattern, encoding.getBits());

    double timer = 0;
    if (show_compile_time) timer = getElapsedTime();
    LLVM_Gen_RetVal retVal = irgen.Generate_LLVMIR(cg_state, cc_stmtsl);
    if (show_compile_time)
    {
        timer = getElapsedTime() - timer;
        std::cout << "LLVM Compile Time: " << timer <<  " seconds" << std::endl;
    }

    return retVal;
}

