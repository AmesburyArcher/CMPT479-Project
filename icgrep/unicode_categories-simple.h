/*
 *  Copyright (c) 2014 International Characters.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters.
 *
 *  This is a generated file, produced by unicode_category_compiler.py.
 *  
 */

#ifndef UNICODE_CATEGORIES_H
#define UNICODE_CATEGORIES_H


#include "icgrep.h"

#define LocalCarryDeclare(name, count)\
CarryArray<count, 0> name;\



  struct Struct_Ps {
  BitBlock cc;
};

  struct Struct_Nl {
  BitBlock cc;
};

  struct Struct_No {
  BitBlock cc;
};

  struct Struct_Lo {
  BitBlock cc;
};

  struct Struct_Ll {
  BitBlock cc;
};

  struct Struct_Lm {
  BitBlock cc;
};

  struct Struct_Nd {
  BitBlock cc;
};

  struct Struct_Pc {
  BitBlock cc;
};

  struct Struct_Lt {
  BitBlock cc;
};

  struct Struct_Lu {
  BitBlock cc;
};

  struct Struct_Pf {
  BitBlock cc;
};

  struct Struct_Pd {
  BitBlock cc;
};

  struct Struct_Pe {
  BitBlock cc;
};

  struct Struct_Pi {
  BitBlock cc;
};

  struct Struct_Po {
  BitBlock cc;
};

  struct Struct_Me {
  BitBlock cc;
};

  struct Struct_Mc {
  BitBlock cc;
};

  struct Struct_Mn {
  BitBlock cc;
};

  struct Struct_Sk {
  BitBlock cc;
};

  struct Struct_So {
  BitBlock cc;
};

  struct Struct_Sm {
  BitBlock cc;
};

  struct Struct_Sc {
  BitBlock cc;
};

  struct Struct_Zl {
  BitBlock cc;
};

  struct Struct_Co {
  BitBlock cc;
};

  struct Struct_Cn {
  BitBlock cc;
};

  struct Struct_Cc {
  BitBlock cc;
};

  struct Struct_Cf {
  BitBlock cc;
};

  struct Struct_Cs {
  BitBlock cc;
};

  struct Struct_Zp {
  BitBlock cc;
};

  struct Struct_Zs {
  BitBlock cc;
};

  struct Ps {
  Ps() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Ps & struct_Ps) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, cc_range_28_7b_1, tmp18;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, r800_ffff_tmp2, byte_e0;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5, r800_ffff_tmp6;
		BitBlock byte_bc, r800_ffff_tmp7, sequence_e0_bc, byte_e0_adv, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, cc_range_f3a_f3c_3;
		BitBlock sequence_e0_bc_adv, r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13;
		BitBlock byte_e1, r800_ffff_tmp14, byte_9a, r800_ffff_tmp15, sequence_e1_9a;
		BitBlock byte_e1_adv, byte_9b, sequence_e1_9a_adv, r800_ffff_tmp16;
		BitBlock r800_ffff_tmp17, byte_e2, r800_ffff_tmp18, r800_ffff_tmp19, byte_80;
		BitBlock r800_ffff_tmp20, sequence_e2_80, byte_e2_adv, r800_ffff_tmp21;
		BitBlock cc_range_201a_201e_3, sequence_e2_80_adv, r800_ffff_tmp22, byte_81;
		BitBlock sequence_e2_81, r800_ffff_tmp23, r800_ffff_tmp24, r800_ffff_tmp25;
		BitBlock r800_ffff_tmp26, r800_ffff_tmp27, cc_range_2045_207d_3;
		BitBlock sequence_e2_81_adv, r800_ffff_tmp28, byte_82, sequence_e2_82, byte_8d;
		BitBlock sequence_e2_82_adv, r800_ffff_tmp29, byte_8c, sequence_e2_8c;
		BitBlock r800_ffff_tmp30, r800_ffff_tmp31, r800_ffff_tmp32, r800_ffff_tmp33;
		BitBlock r800_ffff_tmp34, r800_ffff_tmp35, cc_range_2308_2329_3;
		BitBlock sequence_e2_8c_adv, r800_ffff_tmp36, byte_9d, sequence_e2_9d;
		BitBlock r800_ffff_tmp37, r800_ffff_tmp38, r800_ffff_tmp39, r800_ffff_tmp40;
		BitBlock r800_ffff_tmp41, r800_ffff_tmp42, cc_range_2768_2774_3;
		BitBlock sequence_e2_9d_adv, r800_ffff_tmp43, r800_ffff_tmp44, byte_9f;
		BitBlock sequence_e2_9f, r800_ffff_tmp45, r800_ffff_tmp46, r800_ffff_tmp47;
		BitBlock r800_ffff_tmp48, r800_ffff_tmp49, r800_ffff_tmp50, r800_ffff_tmp51;
		BitBlock r800_ffff_tmp52, r800_ffff_tmp53, r800_ffff_tmp54, r800_ffff_tmp55;
		BitBlock cc_range_27c5_27ee_3, sequence_e2_9f_adv, r800_ffff_tmp56, byte_a6;
		BitBlock sequence_e2_a6, r800_ffff_tmp57, r800_ffff_tmp58, r800_ffff_tmp59;
		BitBlock r800_ffff_tmp60, r800_ffff_tmp61, cc_range_2983_2997_3;
		BitBlock sequence_e2_a6_adv, r800_ffff_tmp62, r800_ffff_tmp63, byte_a7;
		BitBlock sequence_e2_a7, r800_ffff_tmp64, cc_range_29d8_29fc_3;
		BitBlock sequence_e2_a7_adv, r800_ffff_tmp65, byte_b8, sequence_e2_b8;
		BitBlock r800_ffff_tmp66, r800_ffff_tmp67, r800_ffff_tmp68, r800_ffff_tmp69;
		BitBlock cc_range_2e22_2e28_3, sequence_e2_b8_adv, r800_ffff_tmp70;
		BitBlock r800_ffff_tmp71, byte_e3, r800_ffff_tmp72, sequence_e3_80;
		BitBlock byte_e3_adv, r800_ffff_tmp73, r800_ffff_tmp74, r800_ffff_tmp75;
		BitBlock r800_ffff_tmp76, r800_ffff_tmp77, r800_ffff_tmp78, r800_ffff_tmp79;
		BitBlock r800_ffff_tmp80, r800_ffff_tmp81, r800_ffff_tmp82, r800_ffff_tmp83;
		BitBlock r800_ffff_tmp84, r800_ffff_tmp85, cc_range_3008_301d_3;
		BitBlock sequence_e3_80_adv, r800_ffff_tmp86, byte_ef, byte_b4;
		BitBlock r800_ffff_tmp87, sequence_ef_b4, byte_ef_adv, byte_be;
		BitBlock sequence_ef_b4_adv, r800_ffff_tmp88, sequence_ef_b8, r800_ffff_tmp89;
		BitBlock r800_ffff_tmp90, r800_ffff_tmp91, r800_ffff_tmp92, r800_ffff_tmp93;
		BitBlock r800_ffff_tmp94, r800_ffff_tmp95, r800_ffff_tmp96, r800_ffff_tmp97;
		BitBlock r800_ffff_tmp98, r800_ffff_tmp99, cc_range_fe17_fe3f_3;
		BitBlock sequence_ef_b8_adv, r800_ffff_tmp100, byte_b9, sequence_ef_b9;
		BitBlock r800_ffff_tmp101, r800_ffff_tmp102, r800_ffff_tmp103;
		BitBlock r800_ffff_tmp104, r800_ffff_tmp105, r800_ffff_tmp106;
		BitBlock cc_range_fe41_fe5d_3, sequence_ef_b9_adv, r800_ffff_tmp107;
		BitBlock sequence_ef_bc, r800_ffff_tmp108, cc_range_ff08_ff3b_3;
		BitBlock sequence_ef_bc_adv, r800_ffff_tmp109, byte_bd, sequence_ef_bd;
		BitBlock r800_ffff_tmp110, r800_ffff_tmp111, r800_ffff_tmp112;
		BitBlock cc_range_ff5b_ff62_3, sequence_ef_bd_adv, r800_ffff_tmp113;




        struct_Ps.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_andc(tmp4, tmp5);
        tmp7 = simd_and(tmp3, tmp6);
        tmp8 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp10 = simd_and(tmp8, tmp9);
        tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp12 = simd_and(tmp4, tmp11);
        tmp13 = simd_and(tmp10, tmp12);
        tmp14 = simd_or(tmp7, tmp13);
        tmp15 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp16 = simd_and(tmp8, tmp15);
        tmp17 = simd_and(tmp16, tmp12);
        cc_range_28_7b_1 = simd_or(tmp14, tmp17);
        struct_Ps.cc = simd_or(struct_Ps.cc, cc_range_28_7b_1);
        tmp18 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_e0_ef = simd_and(tmp18, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 27))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_or(r800_ffff_tmp1, tmp5);
          byte_e0 = simd_andc(byte_range_e0_ef, r800_ffff_tmp2);
          r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp4 = simd_and(r800_ffff_tmp3, tmp15);
          r800_ffff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp6 = simd_andc(r800_ffff_tmp5, tmp5);
          byte_bc = simd_and(r800_ffff_tmp4, r800_ffff_tmp6);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(0), r800_ffff_tmp7));
          sequence_e0_bc = simd_and(r800_ffff_tmp7, byte_bc);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), byte_e0_adv));
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          r800_ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp9 = simd_and(tmp4, r800_ffff_tmp8);
          r800_ffff_tmp10 = simd_or(r800_ffff_tmp9, r800_ffff_tmp6);
          cc_range_f3a_f3c_3 = simd_and(r800_ffff_tmp4, r800_ffff_tmp10);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(2), sequence_e0_bc_adv));
          r800_ffff_tmp11 = simd_and(sequence_e0_bc_adv, cc_range_f3a_f3c_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp11);
          r800_ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp13 = simd_andc(r800_ffff_tmp12, r800_ffff_tmp1);
          byte_e1 = simd_and(byte_range_e0_ef, r800_ffff_tmp13);
          r800_ffff_tmp14 = simd_and(r800_ffff_tmp3, tmp9);
          byte_9a = simd_and(r800_ffff_tmp14, r800_ffff_tmp9);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(3), r800_ffff_tmp15));
          sequence_e1_9a = simd_and(r800_ffff_tmp15, byte_9a);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(4), byte_e1_adv));
          sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
          byte_9b = simd_and(r800_ffff_tmp14, tmp12);
          carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(5), sequence_e1_9a_adv));
          r800_ffff_tmp16 = simd_and(sequence_e1_9a_adv, byte_9b);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp16);
          r800_ffff_tmp17 = simd_andc(r800_ffff_tmp8, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp17);
          r800_ffff_tmp18 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp19 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp18);
          byte_80 = simd_andc(r800_ffff_tmp19, r800_ffff_tmp2);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(6), r800_ffff_tmp20));
          sequence_e2_80 = simd_and(r800_ffff_tmp20, byte_80);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(7), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp21 = simd_and(r800_ffff_tmp8, basis_bits.bit_4);
          cc_range_201a_201e_3 = simd_and(r800_ffff_tmp14, r800_ffff_tmp21);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(8), sequence_e2_80_adv));
          r800_ffff_tmp22 = simd_and(sequence_e2_80_adv, cc_range_201a_201e_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp22);
          byte_81 = simd_and(r800_ffff_tmp19, r800_ffff_tmp13);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          r800_ffff_tmp23 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r800_ffff_tmp24 = simd_and(r800_ffff_tmp23, r800_ffff_tmp12);
          r800_ffff_tmp25 = simd_and(r800_ffff_tmp19, r800_ffff_tmp24);
          r800_ffff_tmp26 = simd_and(r800_ffff_tmp5, r800_ffff_tmp12);
          r800_ffff_tmp27 = simd_and(r800_ffff_tmp4, r800_ffff_tmp26);
          cc_range_2045_207d_3 = simd_or(r800_ffff_tmp25, r800_ffff_tmp27);
          carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(9), sequence_e2_81_adv));
          r800_ffff_tmp28 = simd_and(sequence_e2_81_adv, cc_range_2045_207d_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp28);
          byte_82 = simd_and(r800_ffff_tmp19, r800_ffff_tmp17);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          byte_8d = simd_and(r800_ffff_tmp19, r800_ffff_tmp26);
          carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(10), sequence_e2_82_adv));
          r800_ffff_tmp29 = simd_and(sequence_e2_82_adv, byte_8d);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp29);
          byte_8c = simd_and(r800_ffff_tmp19, r800_ffff_tmp6);
          sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
          sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
          r800_ffff_tmp30 = simd_andc(tmp5, r800_ffff_tmp8);
          r800_ffff_tmp31 = simd_andc(tmp4, r800_ffff_tmp30);
          r800_ffff_tmp32 = simd_and(r800_ffff_tmp19, r800_ffff_tmp31);
          r800_ffff_tmp33 = simd_and(r800_ffff_tmp3, tmp2);
          r800_ffff_tmp34 = simd_and(tmp4, r800_ffff_tmp12);
          r800_ffff_tmp35 = simd_and(r800_ffff_tmp33, r800_ffff_tmp34);
          cc_range_2308_2329_3 = simd_or(r800_ffff_tmp32, r800_ffff_tmp35);
          carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e2_8c, carryQ.get_carry_in(11), sequence_e2_8c_adv));
          r800_ffff_tmp36 = simd_and(sequence_e2_8c_adv, cc_range_2308_2329_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp36);
          byte_9d = simd_and(r800_ffff_tmp14, r800_ffff_tmp26);
          sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
          sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
          r800_ffff_tmp37 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
          r800_ffff_tmp38 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp39 = simd_or(basis_bits.bit_4, r800_ffff_tmp38);
          r800_ffff_tmp40 = simd_not(r800_ffff_tmp39);
          r800_ffff_tmp41 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp40), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
          r800_ffff_tmp42 = simd_and(r800_ffff_tmp37, r800_ffff_tmp41);
          cc_range_2768_2774_3 = simd_andc(r800_ffff_tmp42, basis_bits.bit_7);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e2_9d, carryQ.get_carry_in(12), sequence_e2_9d_adv));
          r800_ffff_tmp43 = simd_and(sequence_e2_9d_adv, cc_range_2768_2774_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp43);
          r800_ffff_tmp44 = simd_and(r800_ffff_tmp5, tmp11);
          byte_9f = simd_and(r800_ffff_tmp14, r800_ffff_tmp44);
          sequence_e2_9f = simd_and(byte_e2_adv, byte_9f);
          sequence_e2_9f = simd_and(byte_e2_adv, byte_9f);
          r800_ffff_tmp45 = simd_and(r800_ffff_tmp23, r800_ffff_tmp8);
          r800_ffff_tmp46 = simd_and(r800_ffff_tmp33, r800_ffff_tmp45);
          r800_ffff_tmp47 = simd_or(r800_ffff_tmp25, r800_ffff_tmp46);
          r800_ffff_tmp48 = simd_and(r800_ffff_tmp33, tmp6);
          r800_ffff_tmp49 = simd_or(r800_ffff_tmp47, r800_ffff_tmp48);
          r800_ffff_tmp50 = simd_and(r800_ffff_tmp33, r800_ffff_tmp9);
          r800_ffff_tmp51 = simd_or(r800_ffff_tmp49, r800_ffff_tmp50);
          r800_ffff_tmp52 = simd_and(r800_ffff_tmp33, r800_ffff_tmp6);
          r800_ffff_tmp53 = simd_or(r800_ffff_tmp51, r800_ffff_tmp52);
          r800_ffff_tmp54 = simd_and(r800_ffff_tmp5, r800_ffff_tmp8);
          r800_ffff_tmp55 = simd_and(r800_ffff_tmp33, r800_ffff_tmp54);
          cc_range_27c5_27ee_3 = simd_or(r800_ffff_tmp53, r800_ffff_tmp55);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e2_9f, carryQ.get_carry_in(13), sequence_e2_9f_adv));
          r800_ffff_tmp56 = simd_and(sequence_e2_9f_adv, cc_range_27c5_27ee_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp56);
          byte_a6 = simd_and(r800_ffff_tmp33, r800_ffff_tmp45);
          sequence_e2_a6 = simd_and(byte_e2_adv, byte_a6);
          sequence_e2_a6 = simd_and(byte_e2_adv, byte_a6);
          r800_ffff_tmp57 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
          r800_ffff_tmp58 = simd_not(basis_bits.bit_4);
          r800_ffff_tmp59 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
          r800_ffff_tmp60 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp58), simd_andc(r800_ffff_tmp59, basis_bits.bit_3));
          r800_ffff_tmp61 = simd_and(r800_ffff_tmp57, r800_ffff_tmp60);
          cc_range_2983_2997_3 = simd_andc(r800_ffff_tmp61, basis_bits.bit_7);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e2_a6, carryQ.get_carry_in(14), sequence_e2_a6_adv));
          r800_ffff_tmp62 = simd_and(sequence_e2_a6_adv, cc_range_2983_2997_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp62);
          r800_ffff_tmp63 = simd_and(r800_ffff_tmp23, tmp11);
          byte_a7 = simd_and(r800_ffff_tmp33, r800_ffff_tmp63);
          sequence_e2_a7 = simd_and(byte_e2_adv, byte_a7);
          sequence_e2_a7 = simd_and(byte_e2_adv, byte_a7);
          r800_ffff_tmp64 = simd_and(r800_ffff_tmp14, r800_ffff_tmp31);
          cc_range_29d8_29fc_3 = simd_or(r800_ffff_tmp64, byte_bc);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e2_a7, carryQ.get_carry_in(15), sequence_e2_a7_adv));
          r800_ffff_tmp65 = simd_and(sequence_e2_a7_adv, cc_range_29d8_29fc_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp65);
          byte_b8 = simd_and(r800_ffff_tmp4, tmp6);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          r800_ffff_tmp66 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp67 = simd_not(r800_ffff_tmp66);
          r800_ffff_tmp68 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp67), simd_andc(r800_ffff_tmp66, basis_bits.bit_4));
          r800_ffff_tmp69 = simd_and(r800_ffff_tmp33, r800_ffff_tmp68);
          cc_range_2e22_2e28_3 = simd_andc(r800_ffff_tmp69, basis_bits.bit_7);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(16), sequence_e2_b8_adv));
          r800_ffff_tmp70 = simd_and(sequence_e2_b8_adv, cc_range_2e22_2e28_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp70);
          r800_ffff_tmp71 = simd_andc(tmp11, r800_ffff_tmp1);
          byte_e3 = simd_and(byte_range_e0_ef, r800_ffff_tmp71);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(17), r800_ffff_tmp72));
          sequence_e3_80 = simd_and(r800_ffff_tmp72, byte_80);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(18), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          r800_ffff_tmp73 = simd_or(r800_ffff_tmp31, r800_ffff_tmp6);
          r800_ffff_tmp74 = simd_or(r800_ffff_tmp73, r800_ffff_tmp54);
          r800_ffff_tmp75 = simd_and(r800_ffff_tmp19, r800_ffff_tmp74);
          r800_ffff_tmp76 = simd_andc(r800_ffff_tmp14, r800_ffff_tmp2);
          r800_ffff_tmp77 = simd_or(r800_ffff_tmp75, r800_ffff_tmp76);
          r800_ffff_tmp78 = simd_andc(r800_ffff_tmp23, tmp5);
          r800_ffff_tmp79 = simd_and(r800_ffff_tmp14, r800_ffff_tmp78);
          r800_ffff_tmp80 = simd_or(r800_ffff_tmp77, r800_ffff_tmp79);
          r800_ffff_tmp81 = simd_and(r800_ffff_tmp14, r800_ffff_tmp45);
          r800_ffff_tmp82 = simd_or(r800_ffff_tmp80, r800_ffff_tmp81);
          r800_ffff_tmp83 = simd_and(r800_ffff_tmp14, tmp6);
          r800_ffff_tmp84 = simd_or(r800_ffff_tmp82, r800_ffff_tmp83);
          r800_ffff_tmp85 = simd_or(r800_ffff_tmp84, byte_9a);
          cc_range_3008_301d_3 = simd_or(r800_ffff_tmp85, byte_9d);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(19), sequence_e3_80_adv));
          r800_ffff_tmp86 = simd_and(sequence_e3_80_adv, cc_range_3008_301d_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp86);
          byte_ef = simd_and(byte_range_e0_ef, r800_ffff_tmp44);
          byte_b4 = simd_and(r800_ffff_tmp4, r800_ffff_tmp78);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(20), r800_ffff_tmp87));
          sequence_ef_b4 = simd_and(r800_ffff_tmp87, byte_b4);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(21), byte_ef_adv));
          sequence_ef_b4 = simd_and(byte_ef_adv, byte_b4);
          byte_be = simd_and(r800_ffff_tmp4, r800_ffff_tmp54);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_ef_b4, carryQ.get_carry_in(22), sequence_ef_b4_adv));
          r800_ffff_tmp88 = simd_and(sequence_ef_b4_adv, byte_be);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp88);
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          r800_ffff_tmp89 = simd_and(r800_ffff_tmp14, r800_ffff_tmp63);
          r800_ffff_tmp90 = simd_and(r800_ffff_tmp4, r800_ffff_tmp24);
          r800_ffff_tmp91 = simd_or(r800_ffff_tmp89, r800_ffff_tmp90);
          r800_ffff_tmp92 = simd_and(r800_ffff_tmp4, r800_ffff_tmp63);
          r800_ffff_tmp93 = simd_or(r800_ffff_tmp91, r800_ffff_tmp92);
          r800_ffff_tmp94 = simd_and(r800_ffff_tmp4, r800_ffff_tmp34);
          r800_ffff_tmp95 = simd_or(r800_ffff_tmp93, r800_ffff_tmp94);
          r800_ffff_tmp96 = simd_and(r800_ffff_tmp4, tmp12);
          r800_ffff_tmp97 = simd_or(r800_ffff_tmp95, r800_ffff_tmp96);
          r800_ffff_tmp98 = simd_or(r800_ffff_tmp97, r800_ffff_tmp27);
          r800_ffff_tmp99 = simd_and(r800_ffff_tmp4, r800_ffff_tmp44);
          cc_range_fe17_fe3f_3 = simd_or(r800_ffff_tmp98, r800_ffff_tmp99);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(23), sequence_ef_b8_adv));
          r800_ffff_tmp100 = simd_and(sequence_ef_b8_adv, cc_range_fe17_fe3f_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp100);
          byte_b9 = simd_and(r800_ffff_tmp4, r800_ffff_tmp34);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          r800_ffff_tmp101 = simd_andc(basis_bits.bit_7, r800_ffff_tmp1);
          r800_ffff_tmp102 = simd_or(r800_ffff_tmp101, r800_ffff_tmp63);
          r800_ffff_tmp103 = simd_and(r800_ffff_tmp19, r800_ffff_tmp102);
          r800_ffff_tmp104 = simd_and(r800_ffff_tmp14, r800_ffff_tmp34);
          r800_ffff_tmp105 = simd_or(r800_ffff_tmp103, r800_ffff_tmp104);
          r800_ffff_tmp106 = simd_or(r800_ffff_tmp105, byte_9b);
          cc_range_fe41_fe5d_3 = simd_or(r800_ffff_tmp106, byte_9d);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(24), sequence_ef_b9_adv));
          r800_ffff_tmp107 = simd_and(sequence_ef_b9_adv, cc_range_fe41_fe5d_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp107);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          r800_ffff_tmp108 = simd_and(r800_ffff_tmp19, tmp6);
          cc_range_ff08_ff3b_3 = simd_or(r800_ffff_tmp108, r800_ffff_tmp96);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(25), sequence_ef_bc_adv));
          r800_ffff_tmp109 = simd_and(sequence_ef_bc_adv, cc_range_ff08_ff3b_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp109);
          byte_bd = simd_and(r800_ffff_tmp4, r800_ffff_tmp26);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          r800_ffff_tmp110 = simd_and(tmp11, basis_bits.bit_4);
          r800_ffff_tmp111 = simd_and(r800_ffff_tmp14, r800_ffff_tmp110);
          r800_ffff_tmp112 = simd_and(r800_ffff_tmp33, r800_ffff_tmp17);
          cc_range_ff5b_ff62_3 = simd_or(r800_ffff_tmp111, r800_ffff_tmp112);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(26), sequence_ef_bd_adv));
          r800_ffff_tmp113 = simd_and(sequence_ef_bd_adv, cc_range_ff5b_ff62_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp113);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 27);
        }
        carryQ.CarryQ_Adjust(27);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Ps & struct_Ps, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, cc_range_28_7b_1, tmp18;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, r800_ffff_tmp2, byte_e0;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5, r800_ffff_tmp6;
		BitBlock byte_bc, r800_ffff_tmp7, sequence_e0_bc, byte_e0_adv, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, cc_range_f3a_f3c_3;
		BitBlock sequence_e0_bc_adv, r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13;
		BitBlock byte_e1, r800_ffff_tmp14, byte_9a, r800_ffff_tmp15, sequence_e1_9a;
		BitBlock byte_e1_adv, byte_9b, sequence_e1_9a_adv, r800_ffff_tmp16;
		BitBlock r800_ffff_tmp17, byte_e2, r800_ffff_tmp18, r800_ffff_tmp19, byte_80;
		BitBlock r800_ffff_tmp20, sequence_e2_80, byte_e2_adv, r800_ffff_tmp21;
		BitBlock cc_range_201a_201e_3, sequence_e2_80_adv, r800_ffff_tmp22, byte_81;
		BitBlock sequence_e2_81, r800_ffff_tmp23, r800_ffff_tmp24, r800_ffff_tmp25;
		BitBlock r800_ffff_tmp26, r800_ffff_tmp27, cc_range_2045_207d_3;
		BitBlock sequence_e2_81_adv, r800_ffff_tmp28, byte_82, sequence_e2_82, byte_8d;
		BitBlock sequence_e2_82_adv, r800_ffff_tmp29, byte_8c, sequence_e2_8c;
		BitBlock r800_ffff_tmp30, r800_ffff_tmp31, r800_ffff_tmp32, r800_ffff_tmp33;
		BitBlock r800_ffff_tmp34, r800_ffff_tmp35, cc_range_2308_2329_3;
		BitBlock sequence_e2_8c_adv, r800_ffff_tmp36, byte_9d, sequence_e2_9d;
		BitBlock r800_ffff_tmp37, r800_ffff_tmp38, r800_ffff_tmp39, r800_ffff_tmp40;
		BitBlock r800_ffff_tmp41, r800_ffff_tmp42, cc_range_2768_2774_3;
		BitBlock sequence_e2_9d_adv, r800_ffff_tmp43, r800_ffff_tmp44, byte_9f;
		BitBlock sequence_e2_9f, r800_ffff_tmp45, r800_ffff_tmp46, r800_ffff_tmp47;
		BitBlock r800_ffff_tmp48, r800_ffff_tmp49, r800_ffff_tmp50, r800_ffff_tmp51;
		BitBlock r800_ffff_tmp52, r800_ffff_tmp53, r800_ffff_tmp54, r800_ffff_tmp55;
		BitBlock cc_range_27c5_27ee_3, sequence_e2_9f_adv, r800_ffff_tmp56, byte_a6;
		BitBlock sequence_e2_a6, r800_ffff_tmp57, r800_ffff_tmp58, r800_ffff_tmp59;
		BitBlock r800_ffff_tmp60, r800_ffff_tmp61, cc_range_2983_2997_3;
		BitBlock sequence_e2_a6_adv, r800_ffff_tmp62, r800_ffff_tmp63, byte_a7;
		BitBlock sequence_e2_a7, r800_ffff_tmp64, cc_range_29d8_29fc_3;
		BitBlock sequence_e2_a7_adv, r800_ffff_tmp65, byte_b8, sequence_e2_b8;
		BitBlock r800_ffff_tmp66, r800_ffff_tmp67, r800_ffff_tmp68, r800_ffff_tmp69;
		BitBlock cc_range_2e22_2e28_3, sequence_e2_b8_adv, r800_ffff_tmp70;
		BitBlock r800_ffff_tmp71, byte_e3, r800_ffff_tmp72, sequence_e3_80;
		BitBlock byte_e3_adv, r800_ffff_tmp73, r800_ffff_tmp74, r800_ffff_tmp75;
		BitBlock r800_ffff_tmp76, r800_ffff_tmp77, r800_ffff_tmp78, r800_ffff_tmp79;
		BitBlock r800_ffff_tmp80, r800_ffff_tmp81, r800_ffff_tmp82, r800_ffff_tmp83;
		BitBlock r800_ffff_tmp84, r800_ffff_tmp85, cc_range_3008_301d_3;
		BitBlock sequence_e3_80_adv, r800_ffff_tmp86, byte_ef, byte_b4;
		BitBlock r800_ffff_tmp87, sequence_ef_b4, byte_ef_adv, byte_be;
		BitBlock sequence_ef_b4_adv, r800_ffff_tmp88, sequence_ef_b8, r800_ffff_tmp89;
		BitBlock r800_ffff_tmp90, r800_ffff_tmp91, r800_ffff_tmp92, r800_ffff_tmp93;
		BitBlock r800_ffff_tmp94, r800_ffff_tmp95, r800_ffff_tmp96, r800_ffff_tmp97;
		BitBlock r800_ffff_tmp98, r800_ffff_tmp99, cc_range_fe17_fe3f_3;
		BitBlock sequence_ef_b8_adv, r800_ffff_tmp100, byte_b9, sequence_ef_b9;
		BitBlock r800_ffff_tmp101, r800_ffff_tmp102, r800_ffff_tmp103;
		BitBlock r800_ffff_tmp104, r800_ffff_tmp105, r800_ffff_tmp106;
		BitBlock cc_range_fe41_fe5d_3, sequence_ef_b9_adv, r800_ffff_tmp107;
		BitBlock sequence_ef_bc, r800_ffff_tmp108, cc_range_ff08_ff3b_3;
		BitBlock sequence_ef_bc_adv, r800_ffff_tmp109, byte_bd, sequence_ef_bd;
		BitBlock r800_ffff_tmp110, r800_ffff_tmp111, r800_ffff_tmp112;
		BitBlock cc_range_ff5b_ff62_3, sequence_ef_bd_adv, r800_ffff_tmp113;




        struct_Ps.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_andc(tmp4, tmp5);
        tmp7 = simd_and(tmp3, tmp6);
        tmp8 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp10 = simd_and(tmp8, tmp9);
        tmp11 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp12 = simd_and(tmp4, tmp11);
        tmp13 = simd_and(tmp10, tmp12);
        tmp14 = simd_or(tmp7, tmp13);
        tmp15 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp16 = simd_and(tmp8, tmp15);
        tmp17 = simd_and(tmp16, tmp12);
        cc_range_28_7b_1 = simd_or(tmp14, tmp17);
        struct_Ps.cc = simd_or(struct_Ps.cc, cc_range_28_7b_1);
        tmp18 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_e0_ef = simd_and(tmp18, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 27))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_or(r800_ffff_tmp1, tmp5);
          byte_e0 = simd_andc(byte_range_e0_ef, r800_ffff_tmp2);
          r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp4 = simd_and(r800_ffff_tmp3, tmp15);
          r800_ffff_tmp5 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp6 = simd_andc(r800_ffff_tmp5, tmp5);
          byte_bc = simd_and(r800_ffff_tmp4, r800_ffff_tmp6);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(0), r800_ffff_tmp7));
          sequence_e0_bc = simd_and(r800_ffff_tmp7, byte_bc);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), byte_e0_adv));
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          r800_ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp9 = simd_and(tmp4, r800_ffff_tmp8);
          r800_ffff_tmp10 = simd_or(r800_ffff_tmp9, r800_ffff_tmp6);
          cc_range_f3a_f3c_3 = simd_and(r800_ffff_tmp4, r800_ffff_tmp10);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(2), sequence_e0_bc_adv));
          r800_ffff_tmp11 = simd_and(sequence_e0_bc_adv, cc_range_f3a_f3c_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp11);
          r800_ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp13 = simd_andc(r800_ffff_tmp12, r800_ffff_tmp1);
          byte_e1 = simd_and(byte_range_e0_ef, r800_ffff_tmp13);
          r800_ffff_tmp14 = simd_and(r800_ffff_tmp3, tmp9);
          byte_9a = simd_and(r800_ffff_tmp14, r800_ffff_tmp9);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(3), r800_ffff_tmp15));
          sequence_e1_9a = simd_and(r800_ffff_tmp15, byte_9a);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(4), byte_e1_adv));
          sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
          byte_9b = simd_and(r800_ffff_tmp14, tmp12);
          carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(5), sequence_e1_9a_adv));
          r800_ffff_tmp16 = simd_and(sequence_e1_9a_adv, byte_9b);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp16);
          r800_ffff_tmp17 = simd_andc(r800_ffff_tmp8, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp17);
          r800_ffff_tmp18 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp19 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp18);
          byte_80 = simd_andc(r800_ffff_tmp19, r800_ffff_tmp2);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(6), r800_ffff_tmp20));
          sequence_e2_80 = simd_and(r800_ffff_tmp20, byte_80);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(7), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp21 = simd_and(r800_ffff_tmp8, basis_bits.bit_4);
          cc_range_201a_201e_3 = simd_and(r800_ffff_tmp14, r800_ffff_tmp21);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(8), sequence_e2_80_adv));
          r800_ffff_tmp22 = simd_and(sequence_e2_80_adv, cc_range_201a_201e_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp22);
          byte_81 = simd_and(r800_ffff_tmp19, r800_ffff_tmp13);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          r800_ffff_tmp23 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r800_ffff_tmp24 = simd_and(r800_ffff_tmp23, r800_ffff_tmp12);
          r800_ffff_tmp25 = simd_and(r800_ffff_tmp19, r800_ffff_tmp24);
          r800_ffff_tmp26 = simd_and(r800_ffff_tmp5, r800_ffff_tmp12);
          r800_ffff_tmp27 = simd_and(r800_ffff_tmp4, r800_ffff_tmp26);
          cc_range_2045_207d_3 = simd_or(r800_ffff_tmp25, r800_ffff_tmp27);
          carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(9), sequence_e2_81_adv));
          r800_ffff_tmp28 = simd_and(sequence_e2_81_adv, cc_range_2045_207d_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp28);
          byte_82 = simd_and(r800_ffff_tmp19, r800_ffff_tmp17);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          byte_8d = simd_and(r800_ffff_tmp19, r800_ffff_tmp26);
          carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(10), sequence_e2_82_adv));
          r800_ffff_tmp29 = simd_and(sequence_e2_82_adv, byte_8d);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp29);
          byte_8c = simd_and(r800_ffff_tmp19, r800_ffff_tmp6);
          sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
          sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
          r800_ffff_tmp30 = simd_andc(tmp5, r800_ffff_tmp8);
          r800_ffff_tmp31 = simd_andc(tmp4, r800_ffff_tmp30);
          r800_ffff_tmp32 = simd_and(r800_ffff_tmp19, r800_ffff_tmp31);
          r800_ffff_tmp33 = simd_and(r800_ffff_tmp3, tmp2);
          r800_ffff_tmp34 = simd_and(tmp4, r800_ffff_tmp12);
          r800_ffff_tmp35 = simd_and(r800_ffff_tmp33, r800_ffff_tmp34);
          cc_range_2308_2329_3 = simd_or(r800_ffff_tmp32, r800_ffff_tmp35);
          carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e2_8c, carryQ.get_carry_in(11), sequence_e2_8c_adv));
          r800_ffff_tmp36 = simd_and(sequence_e2_8c_adv, cc_range_2308_2329_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp36);
          byte_9d = simd_and(r800_ffff_tmp14, r800_ffff_tmp26);
          sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
          sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
          r800_ffff_tmp37 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
          r800_ffff_tmp38 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp39 = simd_or(basis_bits.bit_4, r800_ffff_tmp38);
          r800_ffff_tmp40 = simd_not(r800_ffff_tmp39);
          r800_ffff_tmp41 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp40), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
          r800_ffff_tmp42 = simd_and(r800_ffff_tmp37, r800_ffff_tmp41);
          cc_range_2768_2774_3 = simd_andc(r800_ffff_tmp42, basis_bits.bit_7);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e2_9d, carryQ.get_carry_in(12), sequence_e2_9d_adv));
          r800_ffff_tmp43 = simd_and(sequence_e2_9d_adv, cc_range_2768_2774_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp43);
          r800_ffff_tmp44 = simd_and(r800_ffff_tmp5, tmp11);
          byte_9f = simd_and(r800_ffff_tmp14, r800_ffff_tmp44);
          sequence_e2_9f = simd_and(byte_e2_adv, byte_9f);
          sequence_e2_9f = simd_and(byte_e2_adv, byte_9f);
          r800_ffff_tmp45 = simd_and(r800_ffff_tmp23, r800_ffff_tmp8);
          r800_ffff_tmp46 = simd_and(r800_ffff_tmp33, r800_ffff_tmp45);
          r800_ffff_tmp47 = simd_or(r800_ffff_tmp25, r800_ffff_tmp46);
          r800_ffff_tmp48 = simd_and(r800_ffff_tmp33, tmp6);
          r800_ffff_tmp49 = simd_or(r800_ffff_tmp47, r800_ffff_tmp48);
          r800_ffff_tmp50 = simd_and(r800_ffff_tmp33, r800_ffff_tmp9);
          r800_ffff_tmp51 = simd_or(r800_ffff_tmp49, r800_ffff_tmp50);
          r800_ffff_tmp52 = simd_and(r800_ffff_tmp33, r800_ffff_tmp6);
          r800_ffff_tmp53 = simd_or(r800_ffff_tmp51, r800_ffff_tmp52);
          r800_ffff_tmp54 = simd_and(r800_ffff_tmp5, r800_ffff_tmp8);
          r800_ffff_tmp55 = simd_and(r800_ffff_tmp33, r800_ffff_tmp54);
          cc_range_27c5_27ee_3 = simd_or(r800_ffff_tmp53, r800_ffff_tmp55);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e2_9f, carryQ.get_carry_in(13), sequence_e2_9f_adv));
          r800_ffff_tmp56 = simd_and(sequence_e2_9f_adv, cc_range_27c5_27ee_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp56);
          byte_a6 = simd_and(r800_ffff_tmp33, r800_ffff_tmp45);
          sequence_e2_a6 = simd_and(byte_e2_adv, byte_a6);
          sequence_e2_a6 = simd_and(byte_e2_adv, byte_a6);
          r800_ffff_tmp57 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
          r800_ffff_tmp58 = simd_not(basis_bits.bit_4);
          r800_ffff_tmp59 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
          r800_ffff_tmp60 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp58), simd_andc(r800_ffff_tmp59, basis_bits.bit_3));
          r800_ffff_tmp61 = simd_and(r800_ffff_tmp57, r800_ffff_tmp60);
          cc_range_2983_2997_3 = simd_andc(r800_ffff_tmp61, basis_bits.bit_7);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e2_a6, carryQ.get_carry_in(14), sequence_e2_a6_adv));
          r800_ffff_tmp62 = simd_and(sequence_e2_a6_adv, cc_range_2983_2997_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp62);
          r800_ffff_tmp63 = simd_and(r800_ffff_tmp23, tmp11);
          byte_a7 = simd_and(r800_ffff_tmp33, r800_ffff_tmp63);
          sequence_e2_a7 = simd_and(byte_e2_adv, byte_a7);
          sequence_e2_a7 = simd_and(byte_e2_adv, byte_a7);
          r800_ffff_tmp64 = simd_and(r800_ffff_tmp14, r800_ffff_tmp31);
          cc_range_29d8_29fc_3 = simd_or(r800_ffff_tmp64, byte_bc);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e2_a7, carryQ.get_carry_in(15), sequence_e2_a7_adv));
          r800_ffff_tmp65 = simd_and(sequence_e2_a7_adv, cc_range_29d8_29fc_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp65);
          byte_b8 = simd_and(r800_ffff_tmp4, tmp6);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          r800_ffff_tmp66 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp67 = simd_not(r800_ffff_tmp66);
          r800_ffff_tmp68 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp67), simd_andc(r800_ffff_tmp66, basis_bits.bit_4));
          r800_ffff_tmp69 = simd_and(r800_ffff_tmp33, r800_ffff_tmp68);
          cc_range_2e22_2e28_3 = simd_andc(r800_ffff_tmp69, basis_bits.bit_7);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(16), sequence_e2_b8_adv));
          r800_ffff_tmp70 = simd_and(sequence_e2_b8_adv, cc_range_2e22_2e28_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp70);
          r800_ffff_tmp71 = simd_andc(tmp11, r800_ffff_tmp1);
          byte_e3 = simd_and(byte_range_e0_ef, r800_ffff_tmp71);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(17), r800_ffff_tmp72));
          sequence_e3_80 = simd_and(r800_ffff_tmp72, byte_80);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(18), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          r800_ffff_tmp73 = simd_or(r800_ffff_tmp31, r800_ffff_tmp6);
          r800_ffff_tmp74 = simd_or(r800_ffff_tmp73, r800_ffff_tmp54);
          r800_ffff_tmp75 = simd_and(r800_ffff_tmp19, r800_ffff_tmp74);
          r800_ffff_tmp76 = simd_andc(r800_ffff_tmp14, r800_ffff_tmp2);
          r800_ffff_tmp77 = simd_or(r800_ffff_tmp75, r800_ffff_tmp76);
          r800_ffff_tmp78 = simd_andc(r800_ffff_tmp23, tmp5);
          r800_ffff_tmp79 = simd_and(r800_ffff_tmp14, r800_ffff_tmp78);
          r800_ffff_tmp80 = simd_or(r800_ffff_tmp77, r800_ffff_tmp79);
          r800_ffff_tmp81 = simd_and(r800_ffff_tmp14, r800_ffff_tmp45);
          r800_ffff_tmp82 = simd_or(r800_ffff_tmp80, r800_ffff_tmp81);
          r800_ffff_tmp83 = simd_and(r800_ffff_tmp14, tmp6);
          r800_ffff_tmp84 = simd_or(r800_ffff_tmp82, r800_ffff_tmp83);
          r800_ffff_tmp85 = simd_or(r800_ffff_tmp84, byte_9a);
          cc_range_3008_301d_3 = simd_or(r800_ffff_tmp85, byte_9d);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(19), sequence_e3_80_adv));
          r800_ffff_tmp86 = simd_and(sequence_e3_80_adv, cc_range_3008_301d_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp86);
          byte_ef = simd_and(byte_range_e0_ef, r800_ffff_tmp44);
          byte_b4 = simd_and(r800_ffff_tmp4, r800_ffff_tmp78);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(20), r800_ffff_tmp87));
          sequence_ef_b4 = simd_and(r800_ffff_tmp87, byte_b4);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(21), byte_ef_adv));
          sequence_ef_b4 = simd_and(byte_ef_adv, byte_b4);
          byte_be = simd_and(r800_ffff_tmp4, r800_ffff_tmp54);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_ef_b4, carryQ.get_carry_in(22), sequence_ef_b4_adv));
          r800_ffff_tmp88 = simd_and(sequence_ef_b4_adv, byte_be);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp88);
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          r800_ffff_tmp89 = simd_and(r800_ffff_tmp14, r800_ffff_tmp63);
          r800_ffff_tmp90 = simd_and(r800_ffff_tmp4, r800_ffff_tmp24);
          r800_ffff_tmp91 = simd_or(r800_ffff_tmp89, r800_ffff_tmp90);
          r800_ffff_tmp92 = simd_and(r800_ffff_tmp4, r800_ffff_tmp63);
          r800_ffff_tmp93 = simd_or(r800_ffff_tmp91, r800_ffff_tmp92);
          r800_ffff_tmp94 = simd_and(r800_ffff_tmp4, r800_ffff_tmp34);
          r800_ffff_tmp95 = simd_or(r800_ffff_tmp93, r800_ffff_tmp94);
          r800_ffff_tmp96 = simd_and(r800_ffff_tmp4, tmp12);
          r800_ffff_tmp97 = simd_or(r800_ffff_tmp95, r800_ffff_tmp96);
          r800_ffff_tmp98 = simd_or(r800_ffff_tmp97, r800_ffff_tmp27);
          r800_ffff_tmp99 = simd_and(r800_ffff_tmp4, r800_ffff_tmp44);
          cc_range_fe17_fe3f_3 = simd_or(r800_ffff_tmp98, r800_ffff_tmp99);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(23), sequence_ef_b8_adv));
          r800_ffff_tmp100 = simd_and(sequence_ef_b8_adv, cc_range_fe17_fe3f_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp100);
          byte_b9 = simd_and(r800_ffff_tmp4, r800_ffff_tmp34);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          r800_ffff_tmp101 = simd_andc(basis_bits.bit_7, r800_ffff_tmp1);
          r800_ffff_tmp102 = simd_or(r800_ffff_tmp101, r800_ffff_tmp63);
          r800_ffff_tmp103 = simd_and(r800_ffff_tmp19, r800_ffff_tmp102);
          r800_ffff_tmp104 = simd_and(r800_ffff_tmp14, r800_ffff_tmp34);
          r800_ffff_tmp105 = simd_or(r800_ffff_tmp103, r800_ffff_tmp104);
          r800_ffff_tmp106 = simd_or(r800_ffff_tmp105, byte_9b);
          cc_range_fe41_fe5d_3 = simd_or(r800_ffff_tmp106, byte_9d);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(24), sequence_ef_b9_adv));
          r800_ffff_tmp107 = simd_and(sequence_ef_b9_adv, cc_range_fe41_fe5d_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp107);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          r800_ffff_tmp108 = simd_and(r800_ffff_tmp19, tmp6);
          cc_range_ff08_ff3b_3 = simd_or(r800_ffff_tmp108, r800_ffff_tmp96);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(25), sequence_ef_bc_adv));
          r800_ffff_tmp109 = simd_and(sequence_ef_bc_adv, cc_range_ff08_ff3b_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp109);
          byte_bd = simd_and(r800_ffff_tmp4, r800_ffff_tmp26);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          r800_ffff_tmp110 = simd_and(tmp11, basis_bits.bit_4);
          r800_ffff_tmp111 = simd_and(r800_ffff_tmp14, r800_ffff_tmp110);
          r800_ffff_tmp112 = simd_and(r800_ffff_tmp33, r800_ffff_tmp17);
          cc_range_ff5b_ff62_3 = simd_or(r800_ffff_tmp111, r800_ffff_tmp112);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(26), sequence_ef_bd_adv));
          r800_ffff_tmp113 = simd_and(sequence_ef_bd_adv, cc_range_ff5b_ff62_3);
          struct_Ps.cc = simd_or(struct_Ps.cc, r800_ffff_tmp113);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 27);
        }
  }
  CarryArray<27, 0> carryQ;
  };

  struct Nl {
  Nl() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Nl & struct_Nl) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f0, tmp7, tmp8, tmp9, tmp10;
		BitBlock tmp11, byte_92, tmp12, sequence_f0_92, byte_f0_adv, byte_90, tmp13;
		BitBlock sequence_f0_92_90, sequence_f0_92_adv, byte_range_80_bf;
		BitBlock sequence_f0_92_90_adv, tmp14, tmp15, tmp16, tmp17, byte_91;
		BitBlock sequence_f0_92_91, tmp18, tmp19, tmp20, tmp21, byte_range_80_a2;
		BitBlock sequence_f0_92_91_adv, tmp22, tmp23, byte_range_e0_ef, byte_e1;
		BitBlock r800_ffff_tmp1, r800_ffff_tmp2, byte_9b, r800_ffff_tmp3;
		BitBlock sequence_e1_9b, byte_e1_adv, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8, byte_range_ae_b0;
		BitBlock sequence_e1_9b_adv, r800_ffff_tmp9, byte_e2, r800_ffff_tmp10;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13, byte_85;
		BitBlock r800_ffff_tmp14, sequence_e2_85, byte_e2_adv, byte_range_a0_bf;
		BitBlock sequence_e2_85_adv, r800_ffff_tmp15, r800_ffff_tmp16, byte_86;
		BitBlock sequence_e2_86, r800_ffff_tmp17, r800_ffff_tmp18, r800_ffff_tmp19;
		BitBlock r800_ffff_tmp20, r800_ffff_tmp21, r800_ffff_tmp22, r800_ffff_tmp23;
		BitBlock cc_range_2180_2185_3, sequence_e2_86_adv, r800_ffff_tmp24;
		BitBlock r800_ffff_tmp25, byte_e3, byte_80, r800_ffff_tmp26, sequence_e3_80;
		BitBlock byte_e3_adv, r800_ffff_tmp27, r800_ffff_tmp28, r800_ffff_tmp29;
		BitBlock r800_ffff_tmp30, r800_ffff_tmp31, r800_ffff_tmp32, r800_ffff_tmp33;
		BitBlock r800_ffff_tmp34, r800_ffff_tmp35, r800_ffff_tmp36, r800_ffff_tmp37;
		BitBlock cc_range_3007_3038_3, sequence_e3_80_adv, r800_ffff_tmp38;
		BitBlock r800_ffff_tmp39, byte_ea, r800_ffff_tmp40, sequence_ea_9b;
		BitBlock byte_ea_adv, r800_ffff_tmp41, r800_ffff_tmp42, byte_range_a6_af;
		BitBlock sequence_ea_9b_adv, r800_ffff_tmp43, sequence_f0_90, tmp24;
		BitBlock sequence_f0_90_byte_range_80_bf, tmp25;
		BitBlock sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock r10000_10fff_tmp1, r10000_10fff_tmp2, r10000_10fff_tmp3;
		BitBlock r10000_10fff_tmp4, sequence_f0_90_85, sequence_f0_90_adv;
		BitBlock r10000_10fff_tmp5, r10000_10fff_tmp6, r10000_10fff_tmp7;
		BitBlock r10000_10fff_tmp8, byte_range_80_b4, sequence_f0_90_85_adv;
		BitBlock r10000_10fff_tmp9, r10000_10fff_tmp10, r10000_10fff_tmp11, byte_8d;
		BitBlock sequence_f0_90_8d, r10000_10fff_tmp12, r10000_10fff_tmp13;
		BitBlock r10000_10fff_tmp14, cc_range_10341_1034a_4, sequence_f0_90_8d_adv;
		BitBlock r10000_10fff_tmp15, r10000_10fff_tmp16, byte_8f, sequence_f0_90_8f;
		BitBlock r10000_10fff_tmp17, r10000_10fff_tmp18, r10000_10fff_tmp19;
		BitBlock byte_range_91_95, sequence_f0_90_8f_adv, r10000_10fff_tmp20;




        struct_Nl.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_f0 = simd_andc(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp11 = simd_andc(tmp10, tmp4);
        byte_92 = simd_and(tmp9, tmp11);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp12));
        sequence_f0_92 = simd_and(tmp12, byte_92);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
        byte_90 = simd_andc(tmp9, tmp6);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(2), tmp13));
        sequence_f0_92_90 = simd_and(tmp13, byte_90);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(3), sequence_f0_92_adv));
        sequence_f0_92_90 = simd_and(sequence_f0_92_adv, byte_90);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_92_90, carryQ.get_carry_in(4), sequence_f0_92_90_adv));
        tmp14 = simd_and(sequence_f0_92_90_adv, byte_range_80_bf);
        struct_Nl.cc = simd_or(struct_Nl.cc, tmp14);
        tmp15 = simd_and(byte_range_80_bf, tmp8);
        tmp16 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp17 = simd_andc(tmp16, tmp4);
        byte_91 = simd_and(tmp15, tmp17);
        sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
        sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
        tmp18 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp19 = simd_or(tmp4, tmp18);
        tmp20 = simd_or(basis_bits.bit_3, tmp19);
        tmp21 = simd_and(basis_bits.bit_2, tmp20);
        byte_range_80_a2 = simd_andc(byte_range_80_bf, tmp21);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(5), sequence_f0_92_91_adv));
        tmp22 = simd_and(sequence_f0_92_91_adv, byte_range_80_a2);
        struct_Nl.cc = simd_or(struct_Nl.cc, tmp22);
        tmp23 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp23);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(6, 13))) {
          byte_e1 = simd_and(byte_range_e0_ef, tmp17);
          r800_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_and(r800_ffff_tmp1, tmp18);
          byte_9b = simd_and(tmp15, r800_ffff_tmp2);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(6), r800_ffff_tmp3));
          sequence_e1_9b = simd_and(r800_ffff_tmp3, byte_9b);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(7), byte_e1_adv));
          sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
          r800_ffff_tmp4 = simd_and(byte_range_80_bf, basis_bits.bit_2);
          r800_ffff_tmp5 = simd_not(tmp6);
          r800_ffff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, basis_bits.bit_6);
          r800_ffff_tmp8 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp5), simd_andc(r800_ffff_tmp7, basis_bits.bit_3));
          byte_range_ae_b0 = simd_and(r800_ffff_tmp4, r800_ffff_tmp8);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(8), sequence_e1_9b_adv));
          r800_ffff_tmp9 = simd_and(sequence_e1_9b_adv, byte_range_ae_b0);
          struct_Nl.cc = simd_or(struct_Nl.cc, r800_ffff_tmp9);
          byte_e2 = simd_and(byte_range_e0_ef, tmp11);
          r800_ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp11 = simd_andc(byte_range_80_bf, r800_ffff_tmp10);
          r800_ffff_tmp12 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r800_ffff_tmp13 = simd_and(r800_ffff_tmp12, tmp16);
          byte_85 = simd_and(r800_ffff_tmp11, r800_ffff_tmp13);
          carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(9), r800_ffff_tmp14));
          sequence_e2_85 = simd_and(r800_ffff_tmp14, byte_85);
          carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(10), byte_e2_adv));
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
          carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(11), sequence_e2_85_adv));
          r800_ffff_tmp15 = simd_and(sequence_e2_85_adv, byte_range_a0_bf);
          struct_Nl.cc = simd_or(struct_Nl.cc, r800_ffff_tmp15);
          r800_ffff_tmp16 = simd_and(r800_ffff_tmp12, tmp10);
          byte_86 = simd_and(r800_ffff_tmp11, r800_ffff_tmp16);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          r800_ffff_tmp17 = simd_andc(r800_ffff_tmp11, tmp4);
          r800_ffff_tmp18 = simd_andc(r800_ffff_tmp17, tmp18);
          r800_ffff_tmp19 = simd_or(basis_bits.bit_5, tmp5);
          r800_ffff_tmp20 = simd_not(r800_ffff_tmp19);
          r800_ffff_tmp21 = simd_and(basis_bits.bit_5, tmp5);
          r800_ffff_tmp22 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp20), simd_andc(r800_ffff_tmp21, basis_bits.bit_4));
          r800_ffff_tmp23 = simd_and(r800_ffff_tmp11, r800_ffff_tmp22);
          cc_range_2180_2185_3 = simd_or(r800_ffff_tmp18, r800_ffff_tmp23);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(12), sequence_e2_86_adv));
          r800_ffff_tmp24 = simd_and(sequence_e2_86_adv, cc_range_2180_2185_3);
          struct_Nl.cc = simd_or(struct_Nl.cc, r800_ffff_tmp24);
          r800_ffff_tmp25 = simd_andc(tmp18, tmp4);
          byte_e3 = simd_and(byte_range_e0_ef, r800_ffff_tmp25);
          byte_80 = simd_andc(r800_ffff_tmp11, tmp6);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(13), r800_ffff_tmp26));
          sequence_e3_80 = simd_and(r800_ffff_tmp26, byte_80);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(14), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          r800_ffff_tmp27 = simd_and(r800_ffff_tmp12, tmp18);
          r800_ffff_tmp28 = simd_and(r800_ffff_tmp11, r800_ffff_tmp27);
          r800_ffff_tmp29 = simd_and(byte_range_80_bf, tmp23);
          r800_ffff_tmp30 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp31 = simd_not(r800_ffff_tmp30);
          r800_ffff_tmp32 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp31), simd_andc(r800_ffff_tmp19, basis_bits.bit_4));
          r800_ffff_tmp33 = simd_and(r800_ffff_tmp29, r800_ffff_tmp32);
          r800_ffff_tmp34 = simd_or(r800_ffff_tmp28, r800_ffff_tmp33);
          r800_ffff_tmp35 = simd_and(byte_range_80_bf, tmp2);
          r800_ffff_tmp36 = simd_and(r800_ffff_tmp35, r800_ffff_tmp1);
          r800_ffff_tmp37 = simd_andc(r800_ffff_tmp36, tmp18);
          cc_range_3007_3038_3 = simd_or(r800_ffff_tmp34, r800_ffff_tmp37);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(15), sequence_e3_80_adv));
          r800_ffff_tmp38 = simd_and(sequence_e3_80_adv, cc_range_3007_3038_3);
          struct_Nl.cc = simd_or(struct_Nl.cc, r800_ffff_tmp38);
          r800_ffff_tmp39 = simd_and(r800_ffff_tmp1, tmp10);
          byte_ea = simd_and(byte_range_e0_ef, r800_ffff_tmp39);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(16), r800_ffff_tmp40));
          sequence_ea_9b = simd_and(r800_ffff_tmp40, byte_9b);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(17), byte_ea_adv));
          sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
          r800_ffff_tmp41 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp42 = simd_or(basis_bits.bit_4, r800_ffff_tmp41);
          byte_range_a6_af = simd_and(r800_ffff_tmp29, r800_ffff_tmp42);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(18), sequence_ea_9b_adv));
          r800_ffff_tmp43 = simd_and(sequence_ea_9b_adv, byte_range_a6_af);
          struct_Nl.cc = simd_or(struct_Nl.cc, r800_ffff_tmp43);
        }
        else {
          carryQ.CarryDequeueEnqueue(6, 13);
        }
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(19), tmp24));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp24, byte_range_80_bf);
        carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(20), tmp25));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp25, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(21, 4))) {
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          r10000_10fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r10000_10fff_tmp2 = simd_andc(byte_range_80_bf, r10000_10fff_tmp1);
          r10000_10fff_tmp3 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r10000_10fff_tmp4 = simd_and(r10000_10fff_tmp3, tmp16);
          byte_85 = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp4);
          sequence_f0_90_85 = simd_and(tmp24, byte_85);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(21), sequence_f0_90_adv));
          sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
          r10000_10fff_tmp5 = simd_and(basis_bits.bit_5, tmp5);
          r10000_10fff_tmp6 = simd_or(basis_bits.bit_4, r10000_10fff_tmp5);
          r10000_10fff_tmp7 = simd_and(basis_bits.bit_3, r10000_10fff_tmp6);
          r10000_10fff_tmp8 = simd_and(basis_bits.bit_2, r10000_10fff_tmp7);
          byte_range_80_b4 = simd_andc(byte_range_80_bf, r10000_10fff_tmp8);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f0_90_85, carryQ.get_carry_in(22), sequence_f0_90_85_adv));
          r10000_10fff_tmp9 = simd_and(sequence_f0_90_85_adv, byte_range_80_b4);
          struct_Nl.cc = simd_or(struct_Nl.cc, r10000_10fff_tmp9);
          r10000_10fff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r10000_10fff_tmp11 = simd_and(r10000_10fff_tmp10, tmp16);
          byte_8d = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp11);
          sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
          sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
          r10000_10fff_tmp12 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r10000_10fff_tmp13 = simd_and(r10000_10fff_tmp12, tmp10);
          r10000_10fff_tmp14 = simd_or(tmp17, r10000_10fff_tmp13);
          cc_range_10341_1034a_4 = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp14);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(23), sequence_f0_90_8d_adv));
          r10000_10fff_tmp15 = simd_and(sequence_f0_90_8d_adv, cc_range_10341_1034a_4);
          struct_Nl.cc = simd_or(struct_Nl.cc, r10000_10fff_tmp15);
          r10000_10fff_tmp16 = simd_and(r10000_10fff_tmp10, tmp18);
          byte_8f = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp16);
          sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
          sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
          r10000_10fff_tmp17 = simd_andc(tmp15, basis_bits.bit_4);
          r10000_10fff_tmp18 = simd_not(basis_bits.bit_6);
          r10000_10fff_tmp19 = simd_or(simd_and(basis_bits.bit_5, r10000_10fff_tmp18), simd_andc(tmp5, basis_bits.bit_5));
          byte_range_91_95 = simd_and(r10000_10fff_tmp17, r10000_10fff_tmp19);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(24), sequence_f0_90_8f_adv));
          r10000_10fff_tmp20 = simd_and(sequence_f0_90_8f_adv, byte_range_91_95);
          struct_Nl.cc = simd_or(struct_Nl.cc, r10000_10fff_tmp20);
        }
        else {
          carryQ.CarryDequeueEnqueue(21, 4);
        }
        carryQ.CarryQ_Adjust(25);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Nl & struct_Nl, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f0, tmp7, tmp8, tmp9, tmp10;
		BitBlock tmp11, byte_92, tmp12, sequence_f0_92, byte_f0_adv, byte_90, tmp13;
		BitBlock sequence_f0_92_90, sequence_f0_92_adv, byte_range_80_bf;
		BitBlock sequence_f0_92_90_adv, tmp14, tmp15, tmp16, tmp17, byte_91;
		BitBlock sequence_f0_92_91, tmp18, tmp19, tmp20, tmp21, byte_range_80_a2;
		BitBlock sequence_f0_92_91_adv, tmp22, tmp23, byte_range_e0_ef, byte_e1;
		BitBlock r800_ffff_tmp1, r800_ffff_tmp2, byte_9b, r800_ffff_tmp3;
		BitBlock sequence_e1_9b, byte_e1_adv, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8, byte_range_ae_b0;
		BitBlock sequence_e1_9b_adv, r800_ffff_tmp9, byte_e2, r800_ffff_tmp10;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13, byte_85;
		BitBlock r800_ffff_tmp14, sequence_e2_85, byte_e2_adv, byte_range_a0_bf;
		BitBlock sequence_e2_85_adv, r800_ffff_tmp15, r800_ffff_tmp16, byte_86;
		BitBlock sequence_e2_86, r800_ffff_tmp17, r800_ffff_tmp18, r800_ffff_tmp19;
		BitBlock r800_ffff_tmp20, r800_ffff_tmp21, r800_ffff_tmp22, r800_ffff_tmp23;
		BitBlock cc_range_2180_2185_3, sequence_e2_86_adv, r800_ffff_tmp24;
		BitBlock r800_ffff_tmp25, byte_e3, byte_80, r800_ffff_tmp26, sequence_e3_80;
		BitBlock byte_e3_adv, r800_ffff_tmp27, r800_ffff_tmp28, r800_ffff_tmp29;
		BitBlock r800_ffff_tmp30, r800_ffff_tmp31, r800_ffff_tmp32, r800_ffff_tmp33;
		BitBlock r800_ffff_tmp34, r800_ffff_tmp35, r800_ffff_tmp36, r800_ffff_tmp37;
		BitBlock cc_range_3007_3038_3, sequence_e3_80_adv, r800_ffff_tmp38;
		BitBlock r800_ffff_tmp39, byte_ea, r800_ffff_tmp40, sequence_ea_9b;
		BitBlock byte_ea_adv, r800_ffff_tmp41, r800_ffff_tmp42, byte_range_a6_af;
		BitBlock sequence_ea_9b_adv, r800_ffff_tmp43, sequence_f0_90, tmp24;
		BitBlock sequence_f0_90_byte_range_80_bf, tmp25;
		BitBlock sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock r10000_10fff_tmp1, r10000_10fff_tmp2, r10000_10fff_tmp3;
		BitBlock r10000_10fff_tmp4, sequence_f0_90_85, sequence_f0_90_adv;
		BitBlock r10000_10fff_tmp5, r10000_10fff_tmp6, r10000_10fff_tmp7;
		BitBlock r10000_10fff_tmp8, byte_range_80_b4, sequence_f0_90_85_adv;
		BitBlock r10000_10fff_tmp9, r10000_10fff_tmp10, r10000_10fff_tmp11, byte_8d;
		BitBlock sequence_f0_90_8d, r10000_10fff_tmp12, r10000_10fff_tmp13;
		BitBlock r10000_10fff_tmp14, cc_range_10341_1034a_4, sequence_f0_90_8d_adv;
		BitBlock r10000_10fff_tmp15, r10000_10fff_tmp16, byte_8f, sequence_f0_90_8f;
		BitBlock r10000_10fff_tmp17, r10000_10fff_tmp18, r10000_10fff_tmp19;
		BitBlock byte_range_91_95, sequence_f0_90_8f_adv, r10000_10fff_tmp20;




        struct_Nl.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_f0 = simd_andc(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp11 = simd_andc(tmp10, tmp4);
        byte_92 = simd_and(tmp9, tmp11);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp12));
        sequence_f0_92 = simd_and(tmp12, byte_92);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
        byte_90 = simd_andc(tmp9, tmp6);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(2), tmp13));
        sequence_f0_92_90 = simd_and(tmp13, byte_90);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(3), sequence_f0_92_adv));
        sequence_f0_92_90 = simd_and(sequence_f0_92_adv, byte_90);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_92_90, carryQ.get_carry_in(4), sequence_f0_92_90_adv));
        tmp14 = simd_and(sequence_f0_92_90_adv, byte_range_80_bf);
        struct_Nl.cc = simd_or(struct_Nl.cc, tmp14);
        tmp15 = simd_and(byte_range_80_bf, tmp8);
        tmp16 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp17 = simd_andc(tmp16, tmp4);
        byte_91 = simd_and(tmp15, tmp17);
        sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
        sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
        tmp18 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp19 = simd_or(tmp4, tmp18);
        tmp20 = simd_or(basis_bits.bit_3, tmp19);
        tmp21 = simd_and(basis_bits.bit_2, tmp20);
        byte_range_80_a2 = simd_andc(byte_range_80_bf, tmp21);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(5), sequence_f0_92_91_adv));
        tmp22 = simd_and(sequence_f0_92_91_adv, byte_range_80_a2);
        struct_Nl.cc = simd_or(struct_Nl.cc, tmp22);
        tmp23 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp23);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(6, 13))) {
          byte_e1 = simd_and(byte_range_e0_ef, tmp17);
          r800_ffff_tmp1 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_and(r800_ffff_tmp1, tmp18);
          byte_9b = simd_and(tmp15, r800_ffff_tmp2);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(6), r800_ffff_tmp3));
          sequence_e1_9b = simd_and(r800_ffff_tmp3, byte_9b);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(7), byte_e1_adv));
          sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
          r800_ffff_tmp4 = simd_and(byte_range_80_bf, basis_bits.bit_2);
          r800_ffff_tmp5 = simd_not(tmp6);
          r800_ffff_tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp7 = simd_and(r800_ffff_tmp6, basis_bits.bit_6);
          r800_ffff_tmp8 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp5), simd_andc(r800_ffff_tmp7, basis_bits.bit_3));
          byte_range_ae_b0 = simd_and(r800_ffff_tmp4, r800_ffff_tmp8);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(8), sequence_e1_9b_adv));
          r800_ffff_tmp9 = simd_and(sequence_e1_9b_adv, byte_range_ae_b0);
          struct_Nl.cc = simd_or(struct_Nl.cc, r800_ffff_tmp9);
          byte_e2 = simd_and(byte_range_e0_ef, tmp11);
          r800_ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp11 = simd_andc(byte_range_80_bf, r800_ffff_tmp10);
          r800_ffff_tmp12 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r800_ffff_tmp13 = simd_and(r800_ffff_tmp12, tmp16);
          byte_85 = simd_and(r800_ffff_tmp11, r800_ffff_tmp13);
          carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(9), r800_ffff_tmp14));
          sequence_e2_85 = simd_and(r800_ffff_tmp14, byte_85);
          carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(10), byte_e2_adv));
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
          carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(11), sequence_e2_85_adv));
          r800_ffff_tmp15 = simd_and(sequence_e2_85_adv, byte_range_a0_bf);
          struct_Nl.cc = simd_or(struct_Nl.cc, r800_ffff_tmp15);
          r800_ffff_tmp16 = simd_and(r800_ffff_tmp12, tmp10);
          byte_86 = simd_and(r800_ffff_tmp11, r800_ffff_tmp16);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          r800_ffff_tmp17 = simd_andc(r800_ffff_tmp11, tmp4);
          r800_ffff_tmp18 = simd_andc(r800_ffff_tmp17, tmp18);
          r800_ffff_tmp19 = simd_or(basis_bits.bit_5, tmp5);
          r800_ffff_tmp20 = simd_not(r800_ffff_tmp19);
          r800_ffff_tmp21 = simd_and(basis_bits.bit_5, tmp5);
          r800_ffff_tmp22 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp20), simd_andc(r800_ffff_tmp21, basis_bits.bit_4));
          r800_ffff_tmp23 = simd_and(r800_ffff_tmp11, r800_ffff_tmp22);
          cc_range_2180_2185_3 = simd_or(r800_ffff_tmp18, r800_ffff_tmp23);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(12), sequence_e2_86_adv));
          r800_ffff_tmp24 = simd_and(sequence_e2_86_adv, cc_range_2180_2185_3);
          struct_Nl.cc = simd_or(struct_Nl.cc, r800_ffff_tmp24);
          r800_ffff_tmp25 = simd_andc(tmp18, tmp4);
          byte_e3 = simd_and(byte_range_e0_ef, r800_ffff_tmp25);
          byte_80 = simd_andc(r800_ffff_tmp11, tmp6);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(13), r800_ffff_tmp26));
          sequence_e3_80 = simd_and(r800_ffff_tmp26, byte_80);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(14), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          r800_ffff_tmp27 = simd_and(r800_ffff_tmp12, tmp18);
          r800_ffff_tmp28 = simd_and(r800_ffff_tmp11, r800_ffff_tmp27);
          r800_ffff_tmp29 = simd_and(byte_range_80_bf, tmp23);
          r800_ffff_tmp30 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp31 = simd_not(r800_ffff_tmp30);
          r800_ffff_tmp32 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp31), simd_andc(r800_ffff_tmp19, basis_bits.bit_4));
          r800_ffff_tmp33 = simd_and(r800_ffff_tmp29, r800_ffff_tmp32);
          r800_ffff_tmp34 = simd_or(r800_ffff_tmp28, r800_ffff_tmp33);
          r800_ffff_tmp35 = simd_and(byte_range_80_bf, tmp2);
          r800_ffff_tmp36 = simd_and(r800_ffff_tmp35, r800_ffff_tmp1);
          r800_ffff_tmp37 = simd_andc(r800_ffff_tmp36, tmp18);
          cc_range_3007_3038_3 = simd_or(r800_ffff_tmp34, r800_ffff_tmp37);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(15), sequence_e3_80_adv));
          r800_ffff_tmp38 = simd_and(sequence_e3_80_adv, cc_range_3007_3038_3);
          struct_Nl.cc = simd_or(struct_Nl.cc, r800_ffff_tmp38);
          r800_ffff_tmp39 = simd_and(r800_ffff_tmp1, tmp10);
          byte_ea = simd_and(byte_range_e0_ef, r800_ffff_tmp39);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(16), r800_ffff_tmp40));
          sequence_ea_9b = simd_and(r800_ffff_tmp40, byte_9b);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(17), byte_ea_adv));
          sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
          r800_ffff_tmp41 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp42 = simd_or(basis_bits.bit_4, r800_ffff_tmp41);
          byte_range_a6_af = simd_and(r800_ffff_tmp29, r800_ffff_tmp42);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(18), sequence_ea_9b_adv));
          r800_ffff_tmp43 = simd_and(sequence_ea_9b_adv, byte_range_a6_af);
          struct_Nl.cc = simd_or(struct_Nl.cc, r800_ffff_tmp43);
        }
        else {
          carryQ.CarryDequeueEnqueue(6, 13);
        }
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(19), tmp24));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp24, byte_range_80_bf);
        carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(20), tmp25));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp25, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(21, 4))) {
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          r10000_10fff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r10000_10fff_tmp2 = simd_andc(byte_range_80_bf, r10000_10fff_tmp1);
          r10000_10fff_tmp3 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r10000_10fff_tmp4 = simd_and(r10000_10fff_tmp3, tmp16);
          byte_85 = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp4);
          sequence_f0_90_85 = simd_and(tmp24, byte_85);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(21), sequence_f0_90_adv));
          sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
          r10000_10fff_tmp5 = simd_and(basis_bits.bit_5, tmp5);
          r10000_10fff_tmp6 = simd_or(basis_bits.bit_4, r10000_10fff_tmp5);
          r10000_10fff_tmp7 = simd_and(basis_bits.bit_3, r10000_10fff_tmp6);
          r10000_10fff_tmp8 = simd_and(basis_bits.bit_2, r10000_10fff_tmp7);
          byte_range_80_b4 = simd_andc(byte_range_80_bf, r10000_10fff_tmp8);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f0_90_85, carryQ.get_carry_in(22), sequence_f0_90_85_adv));
          r10000_10fff_tmp9 = simd_and(sequence_f0_90_85_adv, byte_range_80_b4);
          struct_Nl.cc = simd_or(struct_Nl.cc, r10000_10fff_tmp9);
          r10000_10fff_tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r10000_10fff_tmp11 = simd_and(r10000_10fff_tmp10, tmp16);
          byte_8d = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp11);
          sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
          sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
          r10000_10fff_tmp12 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r10000_10fff_tmp13 = simd_and(r10000_10fff_tmp12, tmp10);
          r10000_10fff_tmp14 = simd_or(tmp17, r10000_10fff_tmp13);
          cc_range_10341_1034a_4 = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp14);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(23), sequence_f0_90_8d_adv));
          r10000_10fff_tmp15 = simd_and(sequence_f0_90_8d_adv, cc_range_10341_1034a_4);
          struct_Nl.cc = simd_or(struct_Nl.cc, r10000_10fff_tmp15);
          r10000_10fff_tmp16 = simd_and(r10000_10fff_tmp10, tmp18);
          byte_8f = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp16);
          sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
          sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
          r10000_10fff_tmp17 = simd_andc(tmp15, basis_bits.bit_4);
          r10000_10fff_tmp18 = simd_not(basis_bits.bit_6);
          r10000_10fff_tmp19 = simd_or(simd_and(basis_bits.bit_5, r10000_10fff_tmp18), simd_andc(tmp5, basis_bits.bit_5));
          byte_range_91_95 = simd_and(r10000_10fff_tmp17, r10000_10fff_tmp19);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(24), sequence_f0_90_8f_adv));
          r10000_10fff_tmp20 = simd_and(sequence_f0_90_8f_adv, byte_range_91_95);
          struct_Nl.cc = simd_or(struct_Nl.cc, r10000_10fff_tmp20);
        }
        else {
          carryQ.CarryDequeueEnqueue(21, 4);
        }
  }
  CarryArray<25, 0> carryQ;
  };

  struct No {
  No() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_No & struct_No) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f0, tmp7, tmp8, tmp9, tmp10;
		BitBlock tmp11, byte_91, tmp12, sequence_f0_91, byte_f0_adv, tmp13, tmp14;
		BitBlock byte_81, tmp15, sequence_f0_91_81, sequence_f0_91_adv, tmp16, tmp17;
		BitBlock tmp18, tmp19, tmp20, tmp21, tmp22, byte_range_92_a5;
		BitBlock sequence_f0_91_81_adv, tmp23, tmp24, tmp25, byte_9d, sequence_f0_9d;
		BitBlock byte_8d, tmp26, sequence_f0_9d_8d, sequence_f0_9d_adv, tmp27;
		BitBlock byte_range_a0_b1, sequence_f0_9d_8d_adv, tmp28, tmp29, tmp30, byte_9f;
		BitBlock sequence_f0_9f, tmp31, tmp32, byte_84, tmp33, sequence_f0_9f_84;
		BitBlock sequence_f0_9f_adv, tmp34, tmp35, byte_range_80_8a;
		BitBlock sequence_f0_9f_84_adv, tmp36, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, byte_c2, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, cc_range_b2_bc_2, byte_c2_adv, r80_7ff_tmp12, tmp37;
		BitBlock byte_range_e0_ef, byte_e0, r800_ffff_tmp1, r800_ffff_tmp2, byte_a7;
		BitBlock r800_ffff_tmp3, sequence_e0_a7, byte_e0_adv, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, byte_range_b4_b9;
		BitBlock sequence_e0_a7_adv, r800_ffff_tmp8, byte_ad, sequence_e0_ad;
		BitBlock r800_ffff_tmp9, byte_range_b2_b7, sequence_e0_ad_adv, r800_ffff_tmp10;
		BitBlock byte_af, sequence_e0_af, r800_ffff_tmp11, byte_range_b0_b2;
		BitBlock sequence_e0_af_adv, r800_ffff_tmp12, byte_b1, sequence_e0_b1;
		BitBlock r800_ffff_tmp13, r800_ffff_tmp14, byte_range_b8_be;
		BitBlock sequence_e0_b1_adv, r800_ffff_tmp15, r800_ffff_tmp16, byte_b5;
		BitBlock sequence_e0_b5, byte_range_b0_b5, sequence_e0_b5_adv, r800_ffff_tmp17;
		BitBlock r800_ffff_tmp18, byte_bc, sequence_e0_bc, r800_ffff_tmp19;
		BitBlock r800_ffff_tmp20, r800_ffff_tmp21, byte_range_aa_b3;
		BitBlock sequence_e0_bc_adv, r800_ffff_tmp22, byte_e1, r800_ffff_tmp23;
		BitBlock sequence_e1_8d, byte_e1_adv, r800_ffff_tmp24, r800_ffff_tmp25;
		BitBlock r800_ffff_tmp26, r800_ffff_tmp27, r800_ffff_tmp28, byte_range_a9_bc;
		BitBlock sequence_e1_8d_adv, r800_ffff_tmp29, sequence_e1_9f, byte_range_b0_b9;
		BitBlock sequence_e1_9f_adv, r800_ffff_tmp30, sequence_e1_a7, r800_ffff_tmp31;
		BitBlock r800_ffff_tmp32, r800_ffff_tmp33, byte_9a, sequence_e1_a7_adv;
		BitBlock r800_ffff_tmp34, r800_ffff_tmp35, byte_e2, r800_ffff_tmp36;
		BitBlock sequence_e2_81, byte_e2_adv, r800_ffff_tmp37, cc_range_2070_2074_3;
		BitBlock sequence_e2_81_adv, r800_ffff_tmp38, byte_82, sequence_e2_82;
		BitBlock byte_range_80_89, sequence_e2_82_adv, r800_ffff_tmp39, byte_85;
		BitBlock sequence_e2_85, byte_range_90_9f, sequence_e2_85_adv, r800_ffff_tmp40;
		BitBlock r800_ffff_tmp41, byte_86, sequence_e2_86, r800_ffff_tmp42, byte_89;
		BitBlock sequence_e2_86_adv, r800_ffff_tmp43, sequence_e2_91, byte_range_a0_bf;
		BitBlock sequence_e2_91_adv, r800_ffff_tmp44, byte_92, sequence_e2_92;
		BitBlock r800_ffff_tmp45, r800_ffff_tmp46, byte_range_80_9b;
		BitBlock sequence_e2_92_adv, r800_ffff_tmp47, r800_ffff_tmp48, byte_93;
		BitBlock sequence_e2_93, r800_ffff_tmp49, byte_range_aa_bf, sequence_e2_93_adv;
		BitBlock r800_ffff_tmp50, sequence_e2_9d, byte_range_b6_bf, sequence_e2_9d_adv;
		BitBlock r800_ffff_tmp51, r800_ffff_tmp52, byte_9e, sequence_e2_9e;
		BitBlock r800_ffff_tmp53, byte_range_80_93, sequence_e2_9e_adv;
		BitBlock r800_ffff_tmp54, byte_b3, sequence_e2_b3, byte_bd, sequence_e2_b3_adv;
		BitBlock r800_ffff_tmp55, byte_e3, r800_ffff_tmp56, sequence_e3_86;
		BitBlock byte_e3_adv, r800_ffff_tmp57, r800_ffff_tmp58, r800_ffff_tmp59;
		BitBlock byte_range_92_95, sequence_e3_86_adv, r800_ffff_tmp60;
		BitBlock r800_ffff_tmp61, byte_88, sequence_e3_88, byte_range_a0_a9;
		BitBlock sequence_e3_88_adv, r800_ffff_tmp62, sequence_e3_89, r800_ffff_tmp63;
		BitBlock r800_ffff_tmp64, r800_ffff_tmp65, cc_range_3248_3251_3;
		BitBlock sequence_e3_89_adv, r800_ffff_tmp66, byte_8a, sequence_e3_8a;
		BitBlock r800_ffff_tmp67, cc_range_3280_32b1_3, sequence_e3_8a_adv;
		BitBlock r800_ffff_tmp68, byte_ea, byte_a0, r800_ffff_tmp69, sequence_ea_a0;
		BitBlock byte_ea_adv, sequence_ea_a0_adv, r800_ffff_tmp70, byte_90;
		BitBlock sequence_f0_90, byte_range_80_bf, tmp38;
		BitBlock sequence_f0_90_byte_range_80_bf, tmp39;
		BitBlock sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock r10000_10fff_tmp1, r10000_10fff_tmp2, sequence_f0_90_84;
		BitBlock sequence_f0_90_adv, r10000_10fff_tmp3, r10000_10fff_tmp4;
		BitBlock r10000_10fff_tmp5, r10000_10fff_tmp6, r10000_10fff_tmp7;
		BitBlock r10000_10fff_tmp8, byte_range_87_b3, sequence_f0_90_84_adv;
		BitBlock r10000_10fff_tmp9, r10000_10fff_tmp10, sequence_f0_90_85;
		BitBlock r10000_10fff_tmp11, r10000_10fff_tmp12, r10000_10fff_tmp13;
		BitBlock r10000_10fff_tmp14, r10000_10fff_tmp15, byte_range_b5_b8;
		BitBlock sequence_f0_90_85_adv, r10000_10fff_tmp16, r10000_10fff_tmp17;
		BitBlock r10000_10fff_tmp18, sequence_f0_90_86, r10000_10fff_tmp19;
		BitBlock r10000_10fff_tmp20, sequence_f0_90_86_adv, r10000_10fff_tmp21;
		BitBlock r10000_10fff_tmp22, byte_8c, sequence_f0_90_8c, r10000_10fff_tmp23;
		BitBlock byte_range_a0_a3, sequence_f0_90_8c_adv, r10000_10fff_tmp24, byte_a1;
		BitBlock sequence_f0_90_a1, byte_range_98_9f, sequence_f0_90_a1_adv;
		BitBlock r10000_10fff_tmp25, byte_a4, sequence_f0_90_a4, r10000_10fff_tmp26;
		BitBlock r10000_10fff_tmp27, byte_range_96_9b, sequence_f0_90_a4_adv;
		BitBlock r10000_10fff_tmp28, r10000_10fff_tmp29, byte_a9, sequence_f0_90_a9;
		BitBlock r10000_10fff_tmp30, r10000_10fff_tmp31, r10000_10fff_tmp32;
		BitBlock r10000_10fff_tmp33, r10000_10fff_tmp34, cc_range_10a40_10a7d_4;
		BitBlock sequence_f0_90_a9_adv, r10000_10fff_tmp35, sequence_f0_90_ad;
		BitBlock r10000_10fff_tmp36, cc_range_10b58_10b78_4, sequence_f0_90_ad_adv;
		BitBlock r10000_10fff_tmp37, byte_b9, sequence_f0_90_b9, r10000_10fff_tmp38;
		BitBlock r10000_10fff_tmp39, byte_range_a0_be, sequence_f0_90_b9_adv;
		BitBlock r10000_10fff_tmp40;




        struct_No.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_f0 = simd_andc(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp11 = simd_andc(tmp10, tmp4);
        byte_91 = simd_and(tmp9, tmp11);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp12));
        sequence_f0_91 = simd_and(tmp12, byte_91);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
        tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp14 = simd_andc(tmp7, tmp13);
        byte_81 = simd_and(tmp14, tmp11);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(2), tmp15));
        sequence_f0_91_81 = simd_and(tmp15, byte_81);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(3), sequence_f0_91_adv));
        sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
        tmp16 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
        tmp17 = simd_or(basis_bits.bit_4, tmp16);
        tmp18 = simd_or(basis_bits.bit_3, tmp17);
        tmp19 = simd_not(tmp18);
        tmp20 = simd_or(tmp4, basis_bits.bit_6);
        tmp21 = simd_and(basis_bits.bit_3, tmp20);
        tmp22 = simd_or(simd_and(basis_bits.bit_2, tmp19), simd_andc(tmp21, basis_bits.bit_2));
        byte_range_92_a5 = simd_and(tmp7, tmp22);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(4), sequence_f0_91_81_adv));
        tmp23 = simd_and(sequence_f0_91_81_adv, byte_range_92_a5);
        struct_No.cc = simd_or(struct_No.cc, tmp23);
        tmp24 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp25 = simd_and(tmp24, tmp10);
        byte_9d = simd_and(tmp9, tmp25);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        byte_8d = simd_and(tmp14, tmp25);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(5), tmp26));
        sequence_f0_9d_8d = simd_and(tmp26, byte_8d);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(6), sequence_f0_9d_adv));
        sequence_f0_9d_8d = simd_and(sequence_f0_9d_adv, byte_8d);
        tmp27 = simd_and(tmp7, basis_bits.bit_2);
        byte_range_a0_b1 = simd_andc(tmp27, tmp21);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8d, carryQ.get_carry_in(7), sequence_f0_9d_8d_adv));
        tmp28 = simd_and(sequence_f0_9d_8d_adv, byte_range_a0_b1);
        struct_No.cc = simd_or(struct_No.cc, tmp28);
        tmp29 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp30 = simd_and(tmp24, tmp29);
        byte_9f = simd_and(tmp9, tmp30);
        sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
        sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
        tmp31 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp32 = simd_andc(tmp31, tmp5);
        byte_84 = simd_and(tmp14, tmp32);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(8), tmp33));
        sequence_f0_9f_84 = simd_and(tmp33, byte_84);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(9), sequence_f0_9f_adv));
        sequence_f0_9f_84 = simd_and(sequence_f0_9f_adv, byte_84);
        tmp34 = simd_or(basis_bits.bit_5, tmp29);
        tmp35 = simd_and(basis_bits.bit_4, tmp34);
        byte_range_80_8a = simd_andc(tmp14, tmp35);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_84, carryQ.get_carry_in(10), sequence_f0_9f_84_adv));
        tmp36 = simd_and(sequence_f0_9f_84_adv, byte_range_80_8a);
        struct_No.cc = simd_or(struct_No.cc, tmp36);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(11, 1))) {
          r80_7ff_tmp1 = simd_andc(tmp1, tmp13);
          r80_7ff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp3 = simd_andc(r80_7ff_tmp2, tmp4);
          byte_c2 = simd_and(r80_7ff_tmp1, r80_7ff_tmp3);
          r80_7ff_tmp4 = simd_and(tmp7, tmp2);
          r80_7ff_tmp5 = simd_andc(basis_bits.bit_6, tmp4);
          r80_7ff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp7 = simd_and(r80_7ff_tmp6, tmp10);
          r80_7ff_tmp8 = simd_or(r80_7ff_tmp5, r80_7ff_tmp7);
          r80_7ff_tmp9 = simd_and(r80_7ff_tmp4, r80_7ff_tmp8);
          r80_7ff_tmp10 = simd_and(r80_7ff_tmp4, tmp24);
          r80_7ff_tmp11 = simd_andc(r80_7ff_tmp10, tmp29);
          cc_range_b2_bc_2 = simd_or(r80_7ff_tmp9, r80_7ff_tmp11);
          carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(11), byte_c2_adv));
          r80_7ff_tmp12 = simd_and(byte_c2_adv, cc_range_b2_bc_2);
          struct_No.cc = simd_or(struct_No.cc, r80_7ff_tmp12);
        }
        else {
          carryQ.CarryDequeueEnqueue(11, 1);
        }
        tmp37 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp37);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(12, 34))) {
          byte_e0 = simd_andc(byte_range_e0_ef, tmp6);
          r800_ffff_tmp1 = simd_and(tmp7, tmp37);
          r800_ffff_tmp2 = simd_and(tmp31, tmp29);
          byte_a7 = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(12), r800_ffff_tmp3));
          sequence_e0_a7 = simd_and(r800_ffff_tmp3, byte_a7);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(13), byte_e0_adv));
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          r800_ffff_tmp4 = simd_and(tmp7, tmp2);
          r800_ffff_tmp5 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp6 = simd_not(r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp6), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          byte_range_b4_b9 = simd_and(r800_ffff_tmp4, r800_ffff_tmp7);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(14), sequence_e0_a7_adv));
          r800_ffff_tmp8 = simd_and(sequence_e0_a7_adv, byte_range_b4_b9);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp8);
          byte_ad = simd_and(r800_ffff_tmp1, tmp25);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          r800_ffff_tmp9 = simd_andc(r800_ffff_tmp4, basis_bits.bit_4);
          byte_range_b2_b7 = simd_and(r800_ffff_tmp9, r800_ffff_tmp5);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(15), sequence_e0_ad_adv));
          r800_ffff_tmp10 = simd_and(sequence_e0_ad_adv, byte_range_b2_b7);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp10);
          byte_af = simd_and(r800_ffff_tmp1, tmp30);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          r800_ffff_tmp11 = simd_andc(r800_ffff_tmp4, tmp4);
          byte_range_b0_b2 = simd_andc(r800_ffff_tmp11, tmp29);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(16), sequence_e0_af_adv));
          r800_ffff_tmp12 = simd_and(sequence_e0_af_adv, byte_range_b0_b2);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp12);
          byte_b1 = simd_and(r800_ffff_tmp4, tmp11);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          r800_ffff_tmp13 = simd_and(r800_ffff_tmp4, basis_bits.bit_4);
          r800_ffff_tmp14 = simd_and(basis_bits.bit_5, tmp29);
          byte_range_b8_be = simd_andc(r800_ffff_tmp13, r800_ffff_tmp14);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(17), sequence_e0_b1_adv));
          r800_ffff_tmp15 = simd_and(sequence_e0_b1_adv, byte_range_b8_be);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp15);
          r800_ffff_tmp16 = simd_and(tmp31, tmp10);
          byte_b5 = simd_and(r800_ffff_tmp4, r800_ffff_tmp16);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          byte_range_b0_b5 = simd_andc(r800_ffff_tmp9, tmp16);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(18), sequence_e0_b5_adv));
          r800_ffff_tmp17 = simd_and(sequence_e0_b5_adv, byte_range_b0_b5);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp17);
          r800_ffff_tmp18 = simd_andc(tmp24, tmp5);
          byte_bc = simd_and(r800_ffff_tmp4, r800_ffff_tmp18);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          r800_ffff_tmp19 = simd_not(tmp4);
          r800_ffff_tmp20 = simd_and(basis_bits.bit_4, r800_ffff_tmp5);
          r800_ffff_tmp21 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp19), simd_andc(r800_ffff_tmp20, basis_bits.bit_3));
          byte_range_aa_b3 = simd_and(tmp27, r800_ffff_tmp21);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(19), sequence_e0_bc_adv));
          r800_ffff_tmp22 = simd_and(sequence_e0_bc_adv, byte_range_aa_b3);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp22);
          byte_e1 = simd_and(byte_range_e0_ef, tmp11);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(20), r800_ffff_tmp23));
          sequence_e1_8d = simd_and(r800_ffff_tmp23, byte_8d);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(21), byte_e1_adv));
          sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
          r800_ffff_tmp24 = simd_and(tmp24, tmp5);
          r800_ffff_tmp25 = simd_not(r800_ffff_tmp24);
          r800_ffff_tmp26 = simd_or(basis_bits.bit_5, tmp5);
          r800_ffff_tmp27 = simd_and(basis_bits.bit_4, r800_ffff_tmp26);
          r800_ffff_tmp28 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp25), simd_andc(r800_ffff_tmp27, basis_bits.bit_3));
          byte_range_a9_bc = simd_and(tmp27, r800_ffff_tmp28);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(22), sequence_e1_8d_adv));
          r800_ffff_tmp29 = simd_and(sequence_e1_8d_adv, byte_range_a9_bc);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp29);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          byte_range_b0_b9 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp20);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(23), sequence_e1_9f_adv));
          r800_ffff_tmp30 = simd_and(sequence_e1_9f_adv, byte_range_b0_b9);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp30);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          r800_ffff_tmp31 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp32 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp33 = simd_and(r800_ffff_tmp31, r800_ffff_tmp32);
          byte_9a = simd_and(tmp9, r800_ffff_tmp33);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(24), sequence_e1_a7_adv));
          r800_ffff_tmp34 = simd_and(sequence_e1_a7_adv, byte_9a);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp34);
          r800_ffff_tmp35 = simd_andc(r800_ffff_tmp32, tmp4);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp35);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(25), r800_ffff_tmp36));
          sequence_e2_81 = simd_and(r800_ffff_tmp36, byte_81);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(26), byte_e2_adv));
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          r800_ffff_tmp37 = simd_andc(tmp6, r800_ffff_tmp7);
          cc_range_2070_2074_3 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp37);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(27), sequence_e2_81_adv));
          r800_ffff_tmp38 = simd_and(sequence_e2_81_adv, cc_range_2070_2074_3);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp38);
          byte_82 = simd_and(tmp14, r800_ffff_tmp35);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          byte_range_80_89 = simd_andc(tmp14, r800_ffff_tmp20);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(28), sequence_e2_82_adv));
          r800_ffff_tmp39 = simd_and(sequence_e2_82_adv, byte_range_80_89);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp39);
          byte_85 = simd_and(tmp14, r800_ffff_tmp16);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          byte_range_90_9f = simd_and(tmp7, tmp8);
          carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(29), sequence_e2_85_adv));
          r800_ffff_tmp40 = simd_and(sequence_e2_85_adv, byte_range_90_9f);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp40);
          r800_ffff_tmp41 = simd_and(tmp31, r800_ffff_tmp32);
          byte_86 = simd_and(tmp14, r800_ffff_tmp41);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          r800_ffff_tmp42 = simd_and(r800_ffff_tmp31, tmp10);
          byte_89 = simd_and(tmp14, r800_ffff_tmp42);
          carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(30), sequence_e2_86_adv));
          r800_ffff_tmp43 = simd_and(sequence_e2_86_adv, byte_89);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp43);
          sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
          sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
          byte_range_a0_bf = simd_and(tmp7, basis_bits.bit_2);
          carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e2_91, carryQ.get_carry_in(31), sequence_e2_91_adv));
          r800_ffff_tmp44 = simd_and(sequence_e2_91_adv, byte_range_a0_bf);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp44);
          byte_92 = simd_and(byte_range_90_9f, r800_ffff_tmp35);
          sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
          sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
          r800_ffff_tmp45 = simd_andc(tmp7, basis_bits.bit_2);
          r800_ffff_tmp46 = simd_and(basis_bits.bit_3, tmp24);
          byte_range_80_9b = simd_andc(r800_ffff_tmp45, r800_ffff_tmp46);
          carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e2_92, carryQ.get_carry_in(32), sequence_e2_92_adv));
          r800_ffff_tmp47 = simd_and(sequence_e2_92_adv, byte_range_80_9b);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp47);
          r800_ffff_tmp48 = simd_andc(tmp29, tmp4);
          byte_93 = simd_and(byte_range_90_9f, r800_ffff_tmp48);
          sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
          sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
          r800_ffff_tmp49 = simd_or(basis_bits.bit_3, r800_ffff_tmp20);
          byte_range_aa_bf = simd_and(byte_range_a0_bf, r800_ffff_tmp49);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(33), sequence_e2_93_adv));
          r800_ffff_tmp50 = simd_and(sequence_e2_93_adv, byte_range_aa_bf);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp50);
          sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
          sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
          byte_range_b6_bf = simd_and(r800_ffff_tmp4, tmp17);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_9d, carryQ.get_carry_in(34), sequence_e2_9d_adv));
          r800_ffff_tmp51 = simd_and(sequence_e2_9d_adv, byte_range_b6_bf);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp51);
          r800_ffff_tmp52 = simd_and(tmp24, r800_ffff_tmp32);
          byte_9e = simd_and(byte_range_90_9f, r800_ffff_tmp52);
          sequence_e2_9e = simd_and(byte_e2_adv, byte_9e);
          sequence_e2_9e = simd_and(byte_e2_adv, byte_9e);
          r800_ffff_tmp53 = simd_and(basis_bits.bit_3, tmp4);
          byte_range_80_93 = simd_andc(r800_ffff_tmp45, r800_ffff_tmp53);
          carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e2_9e, carryQ.get_carry_in(35), sequence_e2_9e_adv));
          r800_ffff_tmp54 = simd_and(sequence_e2_9e_adv, byte_range_80_93);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp54);
          byte_b3 = simd_and(r800_ffff_tmp4, r800_ffff_tmp48);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          byte_bd = simd_and(r800_ffff_tmp4, tmp25);
          carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(36), sequence_e2_b3_adv));
          r800_ffff_tmp55 = simd_and(sequence_e2_b3_adv, byte_bd);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp55);
          byte_e3 = simd_and(byte_range_e0_ef, r800_ffff_tmp48);
          carryQ.cq[37] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(37), r800_ffff_tmp56));
          sequence_e3_86 = simd_and(r800_ffff_tmp56, byte_86);
          carryQ.cq[38] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(38), byte_e3_adv));
          sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
          r800_ffff_tmp57 = simd_andc(byte_range_90_9f, basis_bits.bit_4);
          r800_ffff_tmp58 = simd_not(basis_bits.bit_6);
          r800_ffff_tmp59 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp58), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          byte_range_92_95 = simd_and(r800_ffff_tmp57, r800_ffff_tmp59);
          carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(39), sequence_e3_86_adv));
          r800_ffff_tmp60 = simd_and(sequence_e3_86_adv, byte_range_92_95);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp60);
          r800_ffff_tmp61 = simd_andc(r800_ffff_tmp31, tmp5);
          byte_88 = simd_and(tmp14, r800_ffff_tmp61);
          sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
          sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
          byte_range_a0_a9 = simd_andc(r800_ffff_tmp1, r800_ffff_tmp20);
          carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e3_88, carryQ.get_carry_in(40), sequence_e3_88_adv));
          r800_ffff_tmp62 = simd_and(sequence_e3_88_adv, byte_range_a0_a9);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp62);
          sequence_e3_89 = simd_and(byte_e3_adv, byte_89);
          sequence_e3_89 = simd_and(byte_e3_adv, byte_89);
          r800_ffff_tmp63 = simd_and(tmp14, basis_bits.bit_4);
          r800_ffff_tmp64 = simd_or(basis_bits.bit_4, r800_ffff_tmp26);
          r800_ffff_tmp65 = simd_and(byte_range_90_9f, r800_ffff_tmp64);
          cc_range_3248_3251_3 = simd_or(r800_ffff_tmp63, r800_ffff_tmp65);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e3_89, carryQ.get_carry_in(41), sequence_e3_89_adv));
          r800_ffff_tmp66 = simd_and(sequence_e3_89_adv, cc_range_3248_3251_3);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp66);
          byte_8a = simd_and(tmp14, r800_ffff_tmp33);
          sequence_e3_8a = simd_and(byte_e3_adv, byte_8a);
          sequence_e3_8a = simd_and(byte_e3_adv, byte_8a);
          r800_ffff_tmp67 = simd_and(r800_ffff_tmp4, r800_ffff_tmp64);
          cc_range_3280_32b1_3 = simd_or(byte_range_80_89, r800_ffff_tmp67);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e3_8a, carryQ.get_carry_in(42), sequence_e3_8a_adv));
          r800_ffff_tmp68 = simd_and(sequence_e3_8a_adv, cc_range_3280_32b1_3);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp68);
          byte_ea = simd_and(byte_range_e0_ef, r800_ffff_tmp33);
          byte_a0 = simd_andc(r800_ffff_tmp1, tmp6);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(43), r800_ffff_tmp69));
          sequence_ea_a0 = simd_and(r800_ffff_tmp69, byte_a0);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(44), byte_ea_adv));
          sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(45), sequence_ea_a0_adv));
          r800_ffff_tmp70 = simd_and(sequence_ea_a0_adv, byte_range_b0_b5);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp70);
        }
        else {
          carryQ.CarryDequeueEnqueue(12, 34);
        }
        byte_90 = simd_andc(tmp9, tmp6);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(46), tmp38));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp38, byte_range_80_bf);
        carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(47), tmp39));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp39, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(48, 10))) {
          r10000_10fff_tmp1 = simd_and(byte_range_80_bf, tmp8);
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          r10000_10fff_tmp2 = simd_andc(byte_range_80_bf, tmp13);
          sequence_f0_90_84 = simd_and(tmp38, byte_84);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(48), sequence_f0_90_adv));
          sequence_f0_90_84 = simd_and(sequence_f0_90_adv, byte_84);
          r10000_10fff_tmp3 = simd_and(basis_bits.bit_3, tmp4);
          r10000_10fff_tmp4 = simd_not(r10000_10fff_tmp3);
          r10000_10fff_tmp5 = simd_and(basis_bits.bit_5, tmp29);
          r10000_10fff_tmp6 = simd_or(basis_bits.bit_4, r10000_10fff_tmp5);
          r10000_10fff_tmp7 = simd_or(basis_bits.bit_3, r10000_10fff_tmp6);
          r10000_10fff_tmp8 = simd_or(simd_and(basis_bits.bit_2, r10000_10fff_tmp4), simd_andc(r10000_10fff_tmp7, basis_bits.bit_2));
          byte_range_87_b3 = simd_and(byte_range_80_bf, r10000_10fff_tmp8);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(49), sequence_f0_90_84_adv));
          r10000_10fff_tmp9 = simd_and(sequence_f0_90_84_adv, byte_range_87_b3);
          struct_No.cc = simd_or(struct_No.cc, r10000_10fff_tmp9);
          r10000_10fff_tmp10 = simd_and(tmp31, tmp10);
          byte_85 = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp10);
          sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
          sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
          r10000_10fff_tmp11 = simd_and(byte_range_80_bf, tmp2);
          r10000_10fff_tmp12 = simd_or(basis_bits.bit_5, tmp5);
          r10000_10fff_tmp13 = simd_not(r10000_10fff_tmp12);
          r10000_10fff_tmp14 = simd_and(basis_bits.bit_5, tmp5);
          r10000_10fff_tmp15 = simd_or(simd_and(basis_bits.bit_4, r10000_10fff_tmp13), simd_andc(r10000_10fff_tmp14, basis_bits.bit_4));
          byte_range_b5_b8 = simd_and(r10000_10fff_tmp11, r10000_10fff_tmp15);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_f0_90_85, carryQ.get_carry_in(50), sequence_f0_90_85_adv));
          r10000_10fff_tmp16 = simd_and(sequence_f0_90_85_adv, byte_range_b5_b8);
          struct_No.cc = simd_or(struct_No.cc, r10000_10fff_tmp16);
          r10000_10fff_tmp17 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r10000_10fff_tmp18 = simd_and(tmp31, r10000_10fff_tmp17);
          byte_86 = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp18);
          sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
          sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
          r10000_10fff_tmp19 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r10000_10fff_tmp20 = simd_and(r10000_10fff_tmp19, r10000_10fff_tmp17);
          byte_8a = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp20);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_f0_90_86, carryQ.get_carry_in(51), sequence_f0_90_86_adv));
          r10000_10fff_tmp21 = simd_and(sequence_f0_90_86_adv, byte_8a);
          struct_No.cc = simd_or(struct_No.cc, r10000_10fff_tmp21);
          r10000_10fff_tmp22 = simd_andc(tmp24, tmp5);
          byte_8c = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp22);
          sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
          sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
          r10000_10fff_tmp23 = simd_and(byte_range_80_bf, tmp37);
          byte_range_a0_a3 = simd_andc(r10000_10fff_tmp23, tmp4);
          carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(52), sequence_f0_90_8c_adv));
          r10000_10fff_tmp24 = simd_and(sequence_f0_90_8c_adv, byte_range_a0_a3);
          struct_No.cc = simd_or(struct_No.cc, r10000_10fff_tmp24);
          byte_a1 = simd_and(r10000_10fff_tmp23, tmp11);
          sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
          sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
          byte_range_98_9f = simd_and(r10000_10fff_tmp1, basis_bits.bit_4);
          carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(53), sequence_f0_90_a1_adv));
          r10000_10fff_tmp25 = simd_and(sequence_f0_90_a1_adv, byte_range_98_9f);
          struct_No.cc = simd_or(struct_No.cc, r10000_10fff_tmp25);
          byte_a4 = simd_and(r10000_10fff_tmp23, tmp32);
          sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
          sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
          r10000_10fff_tmp26 = simd_not(basis_bits.bit_5);
          r10000_10fff_tmp27 = simd_or(simd_and(basis_bits.bit_4, r10000_10fff_tmp26), simd_andc(tmp16, basis_bits.bit_4));
          byte_range_96_9b = simd_and(r10000_10fff_tmp1, r10000_10fff_tmp27);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(54), sequence_f0_90_a4_adv));
          r10000_10fff_tmp28 = simd_and(sequence_f0_90_a4_adv, byte_range_96_9b);
          struct_No.cc = simd_or(struct_No.cc, r10000_10fff_tmp28);
          r10000_10fff_tmp29 = simd_and(r10000_10fff_tmp19, tmp10);
          byte_a9 = simd_and(r10000_10fff_tmp23, r10000_10fff_tmp29);
          sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
          sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
          r10000_10fff_tmp30 = simd_andc(r10000_10fff_tmp2, basis_bits.bit_4);
          r10000_10fff_tmp31 = simd_and(r10000_10fff_tmp11, tmp24);
          r10000_10fff_tmp32 = simd_not(basis_bits.bit_7);
          r10000_10fff_tmp33 = simd_or(simd_and(basis_bits.bit_6, r10000_10fff_tmp32), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          r10000_10fff_tmp34 = simd_and(r10000_10fff_tmp31, r10000_10fff_tmp33);
          cc_range_10a40_10a7d_4 = simd_or(r10000_10fff_tmp30, r10000_10fff_tmp34);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(55), sequence_f0_90_a9_adv));
          r10000_10fff_tmp35 = simd_and(sequence_f0_90_a9_adv, cc_range_10a40_10a7d_4);
          struct_No.cc = simd_or(struct_No.cc, r10000_10fff_tmp35);
          byte_ad = simd_and(r10000_10fff_tmp23, tmp25);
          sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
          sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
          r10000_10fff_tmp36 = simd_and(byte_range_80_bf, basis_bits.bit_3);
          cc_range_10b58_10b78_4 = simd_and(basis_bits.bit_4, r10000_10fff_tmp36);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(56), sequence_f0_90_ad_adv));
          r10000_10fff_tmp37 = simd_and(sequence_f0_90_ad_adv, cc_range_10b58_10b78_4);
          struct_No.cc = simd_or(struct_No.cc, r10000_10fff_tmp37);
          byte_b9 = simd_and(r10000_10fff_tmp11, r10000_10fff_tmp29);
          sequence_f0_90_b9 = simd_and(sequence_f0_90_adv, byte_b9);
          sequence_f0_90_b9 = simd_and(sequence_f0_90_adv, byte_b9);
          r10000_10fff_tmp38 = simd_and(byte_range_80_bf, basis_bits.bit_2);
          r10000_10fff_tmp39 = simd_and(basis_bits.bit_3, tmp30);
          byte_range_a0_be = simd_andc(r10000_10fff_tmp38, r10000_10fff_tmp39);
          carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b9, carryQ.get_carry_in(57), sequence_f0_90_b9_adv));
          r10000_10fff_tmp40 = simd_and(sequence_f0_90_b9_adv, byte_range_a0_be);
          struct_No.cc = simd_or(struct_No.cc, r10000_10fff_tmp40);
        }
        else {
          carryQ.CarryDequeueEnqueue(48, 10);
        }
        carryQ.CarryQ_Adjust(58);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_No & struct_No, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f0, tmp7, tmp8, tmp9, tmp10;
		BitBlock tmp11, byte_91, tmp12, sequence_f0_91, byte_f0_adv, tmp13, tmp14;
		BitBlock byte_81, tmp15, sequence_f0_91_81, sequence_f0_91_adv, tmp16, tmp17;
		BitBlock tmp18, tmp19, tmp20, tmp21, tmp22, byte_range_92_a5;
		BitBlock sequence_f0_91_81_adv, tmp23, tmp24, tmp25, byte_9d, sequence_f0_9d;
		BitBlock byte_8d, tmp26, sequence_f0_9d_8d, sequence_f0_9d_adv, tmp27;
		BitBlock byte_range_a0_b1, sequence_f0_9d_8d_adv, tmp28, tmp29, tmp30, byte_9f;
		BitBlock sequence_f0_9f, tmp31, tmp32, byte_84, tmp33, sequence_f0_9f_84;
		BitBlock sequence_f0_9f_adv, tmp34, tmp35, byte_range_80_8a;
		BitBlock sequence_f0_9f_84_adv, tmp36, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, byte_c2, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, cc_range_b2_bc_2, byte_c2_adv, r80_7ff_tmp12, tmp37;
		BitBlock byte_range_e0_ef, byte_e0, r800_ffff_tmp1, r800_ffff_tmp2, byte_a7;
		BitBlock r800_ffff_tmp3, sequence_e0_a7, byte_e0_adv, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, byte_range_b4_b9;
		BitBlock sequence_e0_a7_adv, r800_ffff_tmp8, byte_ad, sequence_e0_ad;
		BitBlock r800_ffff_tmp9, byte_range_b2_b7, sequence_e0_ad_adv, r800_ffff_tmp10;
		BitBlock byte_af, sequence_e0_af, r800_ffff_tmp11, byte_range_b0_b2;
		BitBlock sequence_e0_af_adv, r800_ffff_tmp12, byte_b1, sequence_e0_b1;
		BitBlock r800_ffff_tmp13, r800_ffff_tmp14, byte_range_b8_be;
		BitBlock sequence_e0_b1_adv, r800_ffff_tmp15, r800_ffff_tmp16, byte_b5;
		BitBlock sequence_e0_b5, byte_range_b0_b5, sequence_e0_b5_adv, r800_ffff_tmp17;
		BitBlock r800_ffff_tmp18, byte_bc, sequence_e0_bc, r800_ffff_tmp19;
		BitBlock r800_ffff_tmp20, r800_ffff_tmp21, byte_range_aa_b3;
		BitBlock sequence_e0_bc_adv, r800_ffff_tmp22, byte_e1, r800_ffff_tmp23;
		BitBlock sequence_e1_8d, byte_e1_adv, r800_ffff_tmp24, r800_ffff_tmp25;
		BitBlock r800_ffff_tmp26, r800_ffff_tmp27, r800_ffff_tmp28, byte_range_a9_bc;
		BitBlock sequence_e1_8d_adv, r800_ffff_tmp29, sequence_e1_9f, byte_range_b0_b9;
		BitBlock sequence_e1_9f_adv, r800_ffff_tmp30, sequence_e1_a7, r800_ffff_tmp31;
		BitBlock r800_ffff_tmp32, r800_ffff_tmp33, byte_9a, sequence_e1_a7_adv;
		BitBlock r800_ffff_tmp34, r800_ffff_tmp35, byte_e2, r800_ffff_tmp36;
		BitBlock sequence_e2_81, byte_e2_adv, r800_ffff_tmp37, cc_range_2070_2074_3;
		BitBlock sequence_e2_81_adv, r800_ffff_tmp38, byte_82, sequence_e2_82;
		BitBlock byte_range_80_89, sequence_e2_82_adv, r800_ffff_tmp39, byte_85;
		BitBlock sequence_e2_85, byte_range_90_9f, sequence_e2_85_adv, r800_ffff_tmp40;
		BitBlock r800_ffff_tmp41, byte_86, sequence_e2_86, r800_ffff_tmp42, byte_89;
		BitBlock sequence_e2_86_adv, r800_ffff_tmp43, sequence_e2_91, byte_range_a0_bf;
		BitBlock sequence_e2_91_adv, r800_ffff_tmp44, byte_92, sequence_e2_92;
		BitBlock r800_ffff_tmp45, r800_ffff_tmp46, byte_range_80_9b;
		BitBlock sequence_e2_92_adv, r800_ffff_tmp47, r800_ffff_tmp48, byte_93;
		BitBlock sequence_e2_93, r800_ffff_tmp49, byte_range_aa_bf, sequence_e2_93_adv;
		BitBlock r800_ffff_tmp50, sequence_e2_9d, byte_range_b6_bf, sequence_e2_9d_adv;
		BitBlock r800_ffff_tmp51, r800_ffff_tmp52, byte_9e, sequence_e2_9e;
		BitBlock r800_ffff_tmp53, byte_range_80_93, sequence_e2_9e_adv;
		BitBlock r800_ffff_tmp54, byte_b3, sequence_e2_b3, byte_bd, sequence_e2_b3_adv;
		BitBlock r800_ffff_tmp55, byte_e3, r800_ffff_tmp56, sequence_e3_86;
		BitBlock byte_e3_adv, r800_ffff_tmp57, r800_ffff_tmp58, r800_ffff_tmp59;
		BitBlock byte_range_92_95, sequence_e3_86_adv, r800_ffff_tmp60;
		BitBlock r800_ffff_tmp61, byte_88, sequence_e3_88, byte_range_a0_a9;
		BitBlock sequence_e3_88_adv, r800_ffff_tmp62, sequence_e3_89, r800_ffff_tmp63;
		BitBlock r800_ffff_tmp64, r800_ffff_tmp65, cc_range_3248_3251_3;
		BitBlock sequence_e3_89_adv, r800_ffff_tmp66, byte_8a, sequence_e3_8a;
		BitBlock r800_ffff_tmp67, cc_range_3280_32b1_3, sequence_e3_8a_adv;
		BitBlock r800_ffff_tmp68, byte_ea, byte_a0, r800_ffff_tmp69, sequence_ea_a0;
		BitBlock byte_ea_adv, sequence_ea_a0_adv, r800_ffff_tmp70, byte_90;
		BitBlock sequence_f0_90, byte_range_80_bf, tmp38;
		BitBlock sequence_f0_90_byte_range_80_bf, tmp39;
		BitBlock sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock r10000_10fff_tmp1, r10000_10fff_tmp2, sequence_f0_90_84;
		BitBlock sequence_f0_90_adv, r10000_10fff_tmp3, r10000_10fff_tmp4;
		BitBlock r10000_10fff_tmp5, r10000_10fff_tmp6, r10000_10fff_tmp7;
		BitBlock r10000_10fff_tmp8, byte_range_87_b3, sequence_f0_90_84_adv;
		BitBlock r10000_10fff_tmp9, r10000_10fff_tmp10, sequence_f0_90_85;
		BitBlock r10000_10fff_tmp11, r10000_10fff_tmp12, r10000_10fff_tmp13;
		BitBlock r10000_10fff_tmp14, r10000_10fff_tmp15, byte_range_b5_b8;
		BitBlock sequence_f0_90_85_adv, r10000_10fff_tmp16, r10000_10fff_tmp17;
		BitBlock r10000_10fff_tmp18, sequence_f0_90_86, r10000_10fff_tmp19;
		BitBlock r10000_10fff_tmp20, sequence_f0_90_86_adv, r10000_10fff_tmp21;
		BitBlock r10000_10fff_tmp22, byte_8c, sequence_f0_90_8c, r10000_10fff_tmp23;
		BitBlock byte_range_a0_a3, sequence_f0_90_8c_adv, r10000_10fff_tmp24, byte_a1;
		BitBlock sequence_f0_90_a1, byte_range_98_9f, sequence_f0_90_a1_adv;
		BitBlock r10000_10fff_tmp25, byte_a4, sequence_f0_90_a4, r10000_10fff_tmp26;
		BitBlock r10000_10fff_tmp27, byte_range_96_9b, sequence_f0_90_a4_adv;
		BitBlock r10000_10fff_tmp28, r10000_10fff_tmp29, byte_a9, sequence_f0_90_a9;
		BitBlock r10000_10fff_tmp30, r10000_10fff_tmp31, r10000_10fff_tmp32;
		BitBlock r10000_10fff_tmp33, r10000_10fff_tmp34, cc_range_10a40_10a7d_4;
		BitBlock sequence_f0_90_a9_adv, r10000_10fff_tmp35, sequence_f0_90_ad;
		BitBlock r10000_10fff_tmp36, cc_range_10b58_10b78_4, sequence_f0_90_ad_adv;
		BitBlock r10000_10fff_tmp37, byte_b9, sequence_f0_90_b9, r10000_10fff_tmp38;
		BitBlock r10000_10fff_tmp39, byte_range_a0_be, sequence_f0_90_b9_adv;
		BitBlock r10000_10fff_tmp40;




        struct_No.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_f0 = simd_andc(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp11 = simd_andc(tmp10, tmp4);
        byte_91 = simd_and(tmp9, tmp11);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp12));
        sequence_f0_91 = simd_and(tmp12, byte_91);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
        tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp14 = simd_andc(tmp7, tmp13);
        byte_81 = simd_and(tmp14, tmp11);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(2), tmp15));
        sequence_f0_91_81 = simd_and(tmp15, byte_81);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(3), sequence_f0_91_adv));
        sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
        tmp16 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
        tmp17 = simd_or(basis_bits.bit_4, tmp16);
        tmp18 = simd_or(basis_bits.bit_3, tmp17);
        tmp19 = simd_not(tmp18);
        tmp20 = simd_or(tmp4, basis_bits.bit_6);
        tmp21 = simd_and(basis_bits.bit_3, tmp20);
        tmp22 = simd_or(simd_and(basis_bits.bit_2, tmp19), simd_andc(tmp21, basis_bits.bit_2));
        byte_range_92_a5 = simd_and(tmp7, tmp22);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(4), sequence_f0_91_81_adv));
        tmp23 = simd_and(sequence_f0_91_81_adv, byte_range_92_a5);
        struct_No.cc = simd_or(struct_No.cc, tmp23);
        tmp24 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp25 = simd_and(tmp24, tmp10);
        byte_9d = simd_and(tmp9, tmp25);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        byte_8d = simd_and(tmp14, tmp25);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(5), tmp26));
        sequence_f0_9d_8d = simd_and(tmp26, byte_8d);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(6), sequence_f0_9d_adv));
        sequence_f0_9d_8d = simd_and(sequence_f0_9d_adv, byte_8d);
        tmp27 = simd_and(tmp7, basis_bits.bit_2);
        byte_range_a0_b1 = simd_andc(tmp27, tmp21);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8d, carryQ.get_carry_in(7), sequence_f0_9d_8d_adv));
        tmp28 = simd_and(sequence_f0_9d_8d_adv, byte_range_a0_b1);
        struct_No.cc = simd_or(struct_No.cc, tmp28);
        tmp29 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp30 = simd_and(tmp24, tmp29);
        byte_9f = simd_and(tmp9, tmp30);
        sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
        sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
        tmp31 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp32 = simd_andc(tmp31, tmp5);
        byte_84 = simd_and(tmp14, tmp32);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(8), tmp33));
        sequence_f0_9f_84 = simd_and(tmp33, byte_84);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(9), sequence_f0_9f_adv));
        sequence_f0_9f_84 = simd_and(sequence_f0_9f_adv, byte_84);
        tmp34 = simd_or(basis_bits.bit_5, tmp29);
        tmp35 = simd_and(basis_bits.bit_4, tmp34);
        byte_range_80_8a = simd_andc(tmp14, tmp35);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_84, carryQ.get_carry_in(10), sequence_f0_9f_84_adv));
        tmp36 = simd_and(sequence_f0_9f_84_adv, byte_range_80_8a);
        struct_No.cc = simd_or(struct_No.cc, tmp36);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(11, 1))) {
          r80_7ff_tmp1 = simd_andc(tmp1, tmp13);
          r80_7ff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp3 = simd_andc(r80_7ff_tmp2, tmp4);
          byte_c2 = simd_and(r80_7ff_tmp1, r80_7ff_tmp3);
          r80_7ff_tmp4 = simd_and(tmp7, tmp2);
          r80_7ff_tmp5 = simd_andc(basis_bits.bit_6, tmp4);
          r80_7ff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp7 = simd_and(r80_7ff_tmp6, tmp10);
          r80_7ff_tmp8 = simd_or(r80_7ff_tmp5, r80_7ff_tmp7);
          r80_7ff_tmp9 = simd_and(r80_7ff_tmp4, r80_7ff_tmp8);
          r80_7ff_tmp10 = simd_and(r80_7ff_tmp4, tmp24);
          r80_7ff_tmp11 = simd_andc(r80_7ff_tmp10, tmp29);
          cc_range_b2_bc_2 = simd_or(r80_7ff_tmp9, r80_7ff_tmp11);
          carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(11), byte_c2_adv));
          r80_7ff_tmp12 = simd_and(byte_c2_adv, cc_range_b2_bc_2);
          struct_No.cc = simd_or(struct_No.cc, r80_7ff_tmp12);
        }
        else {
          carryQ.CarryDequeueEnqueue(11, 1);
        }
        tmp37 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp37);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(12, 34))) {
          byte_e0 = simd_andc(byte_range_e0_ef, tmp6);
          r800_ffff_tmp1 = simd_and(tmp7, tmp37);
          r800_ffff_tmp2 = simd_and(tmp31, tmp29);
          byte_a7 = simd_and(r800_ffff_tmp1, r800_ffff_tmp2);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(12), r800_ffff_tmp3));
          sequence_e0_a7 = simd_and(r800_ffff_tmp3, byte_a7);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(13), byte_e0_adv));
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          r800_ffff_tmp4 = simd_and(tmp7, tmp2);
          r800_ffff_tmp5 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp6 = simd_not(r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp6), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          byte_range_b4_b9 = simd_and(r800_ffff_tmp4, r800_ffff_tmp7);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(14), sequence_e0_a7_adv));
          r800_ffff_tmp8 = simd_and(sequence_e0_a7_adv, byte_range_b4_b9);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp8);
          byte_ad = simd_and(r800_ffff_tmp1, tmp25);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          r800_ffff_tmp9 = simd_andc(r800_ffff_tmp4, basis_bits.bit_4);
          byte_range_b2_b7 = simd_and(r800_ffff_tmp9, r800_ffff_tmp5);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(15), sequence_e0_ad_adv));
          r800_ffff_tmp10 = simd_and(sequence_e0_ad_adv, byte_range_b2_b7);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp10);
          byte_af = simd_and(r800_ffff_tmp1, tmp30);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          r800_ffff_tmp11 = simd_andc(r800_ffff_tmp4, tmp4);
          byte_range_b0_b2 = simd_andc(r800_ffff_tmp11, tmp29);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(16), sequence_e0_af_adv));
          r800_ffff_tmp12 = simd_and(sequence_e0_af_adv, byte_range_b0_b2);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp12);
          byte_b1 = simd_and(r800_ffff_tmp4, tmp11);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          r800_ffff_tmp13 = simd_and(r800_ffff_tmp4, basis_bits.bit_4);
          r800_ffff_tmp14 = simd_and(basis_bits.bit_5, tmp29);
          byte_range_b8_be = simd_andc(r800_ffff_tmp13, r800_ffff_tmp14);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(17), sequence_e0_b1_adv));
          r800_ffff_tmp15 = simd_and(sequence_e0_b1_adv, byte_range_b8_be);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp15);
          r800_ffff_tmp16 = simd_and(tmp31, tmp10);
          byte_b5 = simd_and(r800_ffff_tmp4, r800_ffff_tmp16);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          byte_range_b0_b5 = simd_andc(r800_ffff_tmp9, tmp16);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(18), sequence_e0_b5_adv));
          r800_ffff_tmp17 = simd_and(sequence_e0_b5_adv, byte_range_b0_b5);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp17);
          r800_ffff_tmp18 = simd_andc(tmp24, tmp5);
          byte_bc = simd_and(r800_ffff_tmp4, r800_ffff_tmp18);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          r800_ffff_tmp19 = simd_not(tmp4);
          r800_ffff_tmp20 = simd_and(basis_bits.bit_4, r800_ffff_tmp5);
          r800_ffff_tmp21 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp19), simd_andc(r800_ffff_tmp20, basis_bits.bit_3));
          byte_range_aa_b3 = simd_and(tmp27, r800_ffff_tmp21);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(19), sequence_e0_bc_adv));
          r800_ffff_tmp22 = simd_and(sequence_e0_bc_adv, byte_range_aa_b3);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp22);
          byte_e1 = simd_and(byte_range_e0_ef, tmp11);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(20), r800_ffff_tmp23));
          sequence_e1_8d = simd_and(r800_ffff_tmp23, byte_8d);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(21), byte_e1_adv));
          sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
          r800_ffff_tmp24 = simd_and(tmp24, tmp5);
          r800_ffff_tmp25 = simd_not(r800_ffff_tmp24);
          r800_ffff_tmp26 = simd_or(basis_bits.bit_5, tmp5);
          r800_ffff_tmp27 = simd_and(basis_bits.bit_4, r800_ffff_tmp26);
          r800_ffff_tmp28 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp25), simd_andc(r800_ffff_tmp27, basis_bits.bit_3));
          byte_range_a9_bc = simd_and(tmp27, r800_ffff_tmp28);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(22), sequence_e1_8d_adv));
          r800_ffff_tmp29 = simd_and(sequence_e1_8d_adv, byte_range_a9_bc);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp29);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          byte_range_b0_b9 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp20);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(23), sequence_e1_9f_adv));
          r800_ffff_tmp30 = simd_and(sequence_e1_9f_adv, byte_range_b0_b9);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp30);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          r800_ffff_tmp31 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp32 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp33 = simd_and(r800_ffff_tmp31, r800_ffff_tmp32);
          byte_9a = simd_and(tmp9, r800_ffff_tmp33);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(24), sequence_e1_a7_adv));
          r800_ffff_tmp34 = simd_and(sequence_e1_a7_adv, byte_9a);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp34);
          r800_ffff_tmp35 = simd_andc(r800_ffff_tmp32, tmp4);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp35);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(25), r800_ffff_tmp36));
          sequence_e2_81 = simd_and(r800_ffff_tmp36, byte_81);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(26), byte_e2_adv));
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          r800_ffff_tmp37 = simd_andc(tmp6, r800_ffff_tmp7);
          cc_range_2070_2074_3 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp37);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(27), sequence_e2_81_adv));
          r800_ffff_tmp38 = simd_and(sequence_e2_81_adv, cc_range_2070_2074_3);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp38);
          byte_82 = simd_and(tmp14, r800_ffff_tmp35);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          byte_range_80_89 = simd_andc(tmp14, r800_ffff_tmp20);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(28), sequence_e2_82_adv));
          r800_ffff_tmp39 = simd_and(sequence_e2_82_adv, byte_range_80_89);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp39);
          byte_85 = simd_and(tmp14, r800_ffff_tmp16);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          byte_range_90_9f = simd_and(tmp7, tmp8);
          carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(29), sequence_e2_85_adv));
          r800_ffff_tmp40 = simd_and(sequence_e2_85_adv, byte_range_90_9f);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp40);
          r800_ffff_tmp41 = simd_and(tmp31, r800_ffff_tmp32);
          byte_86 = simd_and(tmp14, r800_ffff_tmp41);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          r800_ffff_tmp42 = simd_and(r800_ffff_tmp31, tmp10);
          byte_89 = simd_and(tmp14, r800_ffff_tmp42);
          carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(30), sequence_e2_86_adv));
          r800_ffff_tmp43 = simd_and(sequence_e2_86_adv, byte_89);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp43);
          sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
          sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
          byte_range_a0_bf = simd_and(tmp7, basis_bits.bit_2);
          carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e2_91, carryQ.get_carry_in(31), sequence_e2_91_adv));
          r800_ffff_tmp44 = simd_and(sequence_e2_91_adv, byte_range_a0_bf);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp44);
          byte_92 = simd_and(byte_range_90_9f, r800_ffff_tmp35);
          sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
          sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
          r800_ffff_tmp45 = simd_andc(tmp7, basis_bits.bit_2);
          r800_ffff_tmp46 = simd_and(basis_bits.bit_3, tmp24);
          byte_range_80_9b = simd_andc(r800_ffff_tmp45, r800_ffff_tmp46);
          carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e2_92, carryQ.get_carry_in(32), sequence_e2_92_adv));
          r800_ffff_tmp47 = simd_and(sequence_e2_92_adv, byte_range_80_9b);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp47);
          r800_ffff_tmp48 = simd_andc(tmp29, tmp4);
          byte_93 = simd_and(byte_range_90_9f, r800_ffff_tmp48);
          sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
          sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
          r800_ffff_tmp49 = simd_or(basis_bits.bit_3, r800_ffff_tmp20);
          byte_range_aa_bf = simd_and(byte_range_a0_bf, r800_ffff_tmp49);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(33), sequence_e2_93_adv));
          r800_ffff_tmp50 = simd_and(sequence_e2_93_adv, byte_range_aa_bf);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp50);
          sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
          sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
          byte_range_b6_bf = simd_and(r800_ffff_tmp4, tmp17);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_9d, carryQ.get_carry_in(34), sequence_e2_9d_adv));
          r800_ffff_tmp51 = simd_and(sequence_e2_9d_adv, byte_range_b6_bf);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp51);
          r800_ffff_tmp52 = simd_and(tmp24, r800_ffff_tmp32);
          byte_9e = simd_and(byte_range_90_9f, r800_ffff_tmp52);
          sequence_e2_9e = simd_and(byte_e2_adv, byte_9e);
          sequence_e2_9e = simd_and(byte_e2_adv, byte_9e);
          r800_ffff_tmp53 = simd_and(basis_bits.bit_3, tmp4);
          byte_range_80_93 = simd_andc(r800_ffff_tmp45, r800_ffff_tmp53);
          carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e2_9e, carryQ.get_carry_in(35), sequence_e2_9e_adv));
          r800_ffff_tmp54 = simd_and(sequence_e2_9e_adv, byte_range_80_93);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp54);
          byte_b3 = simd_and(r800_ffff_tmp4, r800_ffff_tmp48);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          byte_bd = simd_and(r800_ffff_tmp4, tmp25);
          carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(36), sequence_e2_b3_adv));
          r800_ffff_tmp55 = simd_and(sequence_e2_b3_adv, byte_bd);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp55);
          byte_e3 = simd_and(byte_range_e0_ef, r800_ffff_tmp48);
          carryQ.cq[37] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(37), r800_ffff_tmp56));
          sequence_e3_86 = simd_and(r800_ffff_tmp56, byte_86);
          carryQ.cq[38] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(38), byte_e3_adv));
          sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
          r800_ffff_tmp57 = simd_andc(byte_range_90_9f, basis_bits.bit_4);
          r800_ffff_tmp58 = simd_not(basis_bits.bit_6);
          r800_ffff_tmp59 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp58), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          byte_range_92_95 = simd_and(r800_ffff_tmp57, r800_ffff_tmp59);
          carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(39), sequence_e3_86_adv));
          r800_ffff_tmp60 = simd_and(sequence_e3_86_adv, byte_range_92_95);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp60);
          r800_ffff_tmp61 = simd_andc(r800_ffff_tmp31, tmp5);
          byte_88 = simd_and(tmp14, r800_ffff_tmp61);
          sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
          sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
          byte_range_a0_a9 = simd_andc(r800_ffff_tmp1, r800_ffff_tmp20);
          carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e3_88, carryQ.get_carry_in(40), sequence_e3_88_adv));
          r800_ffff_tmp62 = simd_and(sequence_e3_88_adv, byte_range_a0_a9);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp62);
          sequence_e3_89 = simd_and(byte_e3_adv, byte_89);
          sequence_e3_89 = simd_and(byte_e3_adv, byte_89);
          r800_ffff_tmp63 = simd_and(tmp14, basis_bits.bit_4);
          r800_ffff_tmp64 = simd_or(basis_bits.bit_4, r800_ffff_tmp26);
          r800_ffff_tmp65 = simd_and(byte_range_90_9f, r800_ffff_tmp64);
          cc_range_3248_3251_3 = simd_or(r800_ffff_tmp63, r800_ffff_tmp65);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e3_89, carryQ.get_carry_in(41), sequence_e3_89_adv));
          r800_ffff_tmp66 = simd_and(sequence_e3_89_adv, cc_range_3248_3251_3);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp66);
          byte_8a = simd_and(tmp14, r800_ffff_tmp33);
          sequence_e3_8a = simd_and(byte_e3_adv, byte_8a);
          sequence_e3_8a = simd_and(byte_e3_adv, byte_8a);
          r800_ffff_tmp67 = simd_and(r800_ffff_tmp4, r800_ffff_tmp64);
          cc_range_3280_32b1_3 = simd_or(byte_range_80_89, r800_ffff_tmp67);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e3_8a, carryQ.get_carry_in(42), sequence_e3_8a_adv));
          r800_ffff_tmp68 = simd_and(sequence_e3_8a_adv, cc_range_3280_32b1_3);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp68);
          byte_ea = simd_and(byte_range_e0_ef, r800_ffff_tmp33);
          byte_a0 = simd_andc(r800_ffff_tmp1, tmp6);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(43), r800_ffff_tmp69));
          sequence_ea_a0 = simd_and(r800_ffff_tmp69, byte_a0);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(44), byte_ea_adv));
          sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(45), sequence_ea_a0_adv));
          r800_ffff_tmp70 = simd_and(sequence_ea_a0_adv, byte_range_b0_b5);
          struct_No.cc = simd_or(struct_No.cc, r800_ffff_tmp70);
        }
        else {
          carryQ.CarryDequeueEnqueue(12, 34);
        }
        byte_90 = simd_andc(tmp9, tmp6);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(46), tmp38));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp38, byte_range_80_bf);
        carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(47), tmp39));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp39, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(48, 10))) {
          r10000_10fff_tmp1 = simd_and(byte_range_80_bf, tmp8);
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          r10000_10fff_tmp2 = simd_andc(byte_range_80_bf, tmp13);
          sequence_f0_90_84 = simd_and(tmp38, byte_84);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(48), sequence_f0_90_adv));
          sequence_f0_90_84 = simd_and(sequence_f0_90_adv, byte_84);
          r10000_10fff_tmp3 = simd_and(basis_bits.bit_3, tmp4);
          r10000_10fff_tmp4 = simd_not(r10000_10fff_tmp3);
          r10000_10fff_tmp5 = simd_and(basis_bits.bit_5, tmp29);
          r10000_10fff_tmp6 = simd_or(basis_bits.bit_4, r10000_10fff_tmp5);
          r10000_10fff_tmp7 = simd_or(basis_bits.bit_3, r10000_10fff_tmp6);
          r10000_10fff_tmp8 = simd_or(simd_and(basis_bits.bit_2, r10000_10fff_tmp4), simd_andc(r10000_10fff_tmp7, basis_bits.bit_2));
          byte_range_87_b3 = simd_and(byte_range_80_bf, r10000_10fff_tmp8);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(49), sequence_f0_90_84_adv));
          r10000_10fff_tmp9 = simd_and(sequence_f0_90_84_adv, byte_range_87_b3);
          struct_No.cc = simd_or(struct_No.cc, r10000_10fff_tmp9);
          r10000_10fff_tmp10 = simd_and(tmp31, tmp10);
          byte_85 = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp10);
          sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
          sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
          r10000_10fff_tmp11 = simd_and(byte_range_80_bf, tmp2);
          r10000_10fff_tmp12 = simd_or(basis_bits.bit_5, tmp5);
          r10000_10fff_tmp13 = simd_not(r10000_10fff_tmp12);
          r10000_10fff_tmp14 = simd_and(basis_bits.bit_5, tmp5);
          r10000_10fff_tmp15 = simd_or(simd_and(basis_bits.bit_4, r10000_10fff_tmp13), simd_andc(r10000_10fff_tmp14, basis_bits.bit_4));
          byte_range_b5_b8 = simd_and(r10000_10fff_tmp11, r10000_10fff_tmp15);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_f0_90_85, carryQ.get_carry_in(50), sequence_f0_90_85_adv));
          r10000_10fff_tmp16 = simd_and(sequence_f0_90_85_adv, byte_range_b5_b8);
          struct_No.cc = simd_or(struct_No.cc, r10000_10fff_tmp16);
          r10000_10fff_tmp17 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r10000_10fff_tmp18 = simd_and(tmp31, r10000_10fff_tmp17);
          byte_86 = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp18);
          sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
          sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
          r10000_10fff_tmp19 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r10000_10fff_tmp20 = simd_and(r10000_10fff_tmp19, r10000_10fff_tmp17);
          byte_8a = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp20);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_f0_90_86, carryQ.get_carry_in(51), sequence_f0_90_86_adv));
          r10000_10fff_tmp21 = simd_and(sequence_f0_90_86_adv, byte_8a);
          struct_No.cc = simd_or(struct_No.cc, r10000_10fff_tmp21);
          r10000_10fff_tmp22 = simd_andc(tmp24, tmp5);
          byte_8c = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp22);
          sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
          sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
          r10000_10fff_tmp23 = simd_and(byte_range_80_bf, tmp37);
          byte_range_a0_a3 = simd_andc(r10000_10fff_tmp23, tmp4);
          carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(52), sequence_f0_90_8c_adv));
          r10000_10fff_tmp24 = simd_and(sequence_f0_90_8c_adv, byte_range_a0_a3);
          struct_No.cc = simd_or(struct_No.cc, r10000_10fff_tmp24);
          byte_a1 = simd_and(r10000_10fff_tmp23, tmp11);
          sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
          sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
          byte_range_98_9f = simd_and(r10000_10fff_tmp1, basis_bits.bit_4);
          carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(53), sequence_f0_90_a1_adv));
          r10000_10fff_tmp25 = simd_and(sequence_f0_90_a1_adv, byte_range_98_9f);
          struct_No.cc = simd_or(struct_No.cc, r10000_10fff_tmp25);
          byte_a4 = simd_and(r10000_10fff_tmp23, tmp32);
          sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
          sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
          r10000_10fff_tmp26 = simd_not(basis_bits.bit_5);
          r10000_10fff_tmp27 = simd_or(simd_and(basis_bits.bit_4, r10000_10fff_tmp26), simd_andc(tmp16, basis_bits.bit_4));
          byte_range_96_9b = simd_and(r10000_10fff_tmp1, r10000_10fff_tmp27);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(54), sequence_f0_90_a4_adv));
          r10000_10fff_tmp28 = simd_and(sequence_f0_90_a4_adv, byte_range_96_9b);
          struct_No.cc = simd_or(struct_No.cc, r10000_10fff_tmp28);
          r10000_10fff_tmp29 = simd_and(r10000_10fff_tmp19, tmp10);
          byte_a9 = simd_and(r10000_10fff_tmp23, r10000_10fff_tmp29);
          sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
          sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
          r10000_10fff_tmp30 = simd_andc(r10000_10fff_tmp2, basis_bits.bit_4);
          r10000_10fff_tmp31 = simd_and(r10000_10fff_tmp11, tmp24);
          r10000_10fff_tmp32 = simd_not(basis_bits.bit_7);
          r10000_10fff_tmp33 = simd_or(simd_and(basis_bits.bit_6, r10000_10fff_tmp32), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          r10000_10fff_tmp34 = simd_and(r10000_10fff_tmp31, r10000_10fff_tmp33);
          cc_range_10a40_10a7d_4 = simd_or(r10000_10fff_tmp30, r10000_10fff_tmp34);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(55), sequence_f0_90_a9_adv));
          r10000_10fff_tmp35 = simd_and(sequence_f0_90_a9_adv, cc_range_10a40_10a7d_4);
          struct_No.cc = simd_or(struct_No.cc, r10000_10fff_tmp35);
          byte_ad = simd_and(r10000_10fff_tmp23, tmp25);
          sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
          sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
          r10000_10fff_tmp36 = simd_and(byte_range_80_bf, basis_bits.bit_3);
          cc_range_10b58_10b78_4 = simd_and(basis_bits.bit_4, r10000_10fff_tmp36);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(56), sequence_f0_90_ad_adv));
          r10000_10fff_tmp37 = simd_and(sequence_f0_90_ad_adv, cc_range_10b58_10b78_4);
          struct_No.cc = simd_or(struct_No.cc, r10000_10fff_tmp37);
          byte_b9 = simd_and(r10000_10fff_tmp11, r10000_10fff_tmp29);
          sequence_f0_90_b9 = simd_and(sequence_f0_90_adv, byte_b9);
          sequence_f0_90_b9 = simd_and(sequence_f0_90_adv, byte_b9);
          r10000_10fff_tmp38 = simd_and(byte_range_80_bf, basis_bits.bit_2);
          r10000_10fff_tmp39 = simd_and(basis_bits.bit_3, tmp30);
          byte_range_a0_be = simd_andc(r10000_10fff_tmp38, r10000_10fff_tmp39);
          carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b9, carryQ.get_carry_in(57), sequence_f0_90_b9_adv));
          r10000_10fff_tmp40 = simd_and(sequence_f0_90_b9_adv, byte_range_a0_be);
          struct_No.cc = simd_or(struct_No.cc, r10000_10fff_tmp40);
        }
        else {
          carryQ.CarryDequeueEnqueue(48, 10);
        }
  }
  CarryArray<58, 0> carryQ;
  };

  struct Lo {
  Lo() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Lo & struct_Lo) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f0, tmp7, tmp8, tmp9, tmp10;
		BitBlock tmp11, byte_91, tmp12, sequence_f0_91, byte_f0_adv, tmp13, tmp14;
		BitBlock byte_80, tmp15, sequence_f0_91_80, sequence_f0_91_adv, tmp16, tmp17;
		BitBlock tmp18, tmp19, tmp20, tmp21, byte_range_83_b7, sequence_f0_91_80_adv;
		BitBlock tmp22, tmp23, tmp24, byte_82, sequence_f0_91_82, tmp25, tmp26;
		BitBlock byte_range_83_af, sequence_f0_91_82_adv, tmp27, tmp28, byte_83;
		BitBlock sequence_f0_91_83, tmp29, tmp30, tmp31, tmp32, tmp33;
		BitBlock byte_range_90_a8, sequence_f0_91_83_adv, tmp34, tmp35, tmp36, byte_84;
		BitBlock sequence_f0_91_84, tmp37, tmp38, tmp39, tmp40, tmp41;
		BitBlock byte_range_83_a6, sequence_f0_91_84_adv, tmp42, tmp43, byte_86;
		BitBlock sequence_f0_91_86, tmp44, tmp45, tmp46, byte_range_83_b2;
		BitBlock sequence_f0_91_86_adv, tmp47, tmp48, byte_87, sequence_f0_91_87;
		BitBlock tmp49, tmp50, tmp51, byte_range_81_84, sequence_f0_91_87_adv, tmp52;
		BitBlock tmp53, tmp54, byte_9a, sequence_f0_91_9a, tmp55, tmp56, tmp57, tmp58;
		BitBlock byte_range_80_aa, sequence_f0_91_9a_adv, tmp59, byte_92;
		BitBlock sequence_f0_92, tmp60, tmp61, byte_range_80_8c, tmp62;
		BitBlock sequence_f0_92_byte_range_80_8c, byte_range_80_bf, tmp63;
		BitBlock sequence_f0_92_byte_range_80_8c_sfx, tmp64, tmp65, tmp66, tmp67;
		BitBlock byte_8d, sequence_f0_92_adv, sequence_f0_92_8d, tmp68, tmp69, tmp70;
		BitBlock byte_range_80_ae, tmp71, sequence_f0_92_8d_byte_range_80_ae, byte_93;
		BitBlock sequence_f0_93, byte_range_80_8f, tmp72;
		BitBlock sequence_f0_93_byte_range_80_8f, tmp73;
		BitBlock sequence_f0_93_byte_range_80_8f_sfx, byte_90, sequence_f0_93_adv;
		BitBlock sequence_f0_93_90, tmp74, sequence_f0_93_90_byte_range_80_ae, byte_96;
		BitBlock sequence_f0_96, tmp75, tmp76, byte_range_a0_a7, tmp77;
		BitBlock sequence_f0_96_byte_range_a0_a7, tmp78;
		BitBlock sequence_f0_96_byte_range_a0_a7_sfx, tmp79, byte_a8;
		BitBlock sequence_f0_96_adv, sequence_f0_96_a8, tmp80, tmp81, byte_range_80_b8;
		BitBlock tmp82, sequence_f0_96_a8_byte_range_80_b8, tmp83, tmp84, byte_bc;
		BitBlock sequence_f0_96_bc, tmp85, sequence_f0_96_bc_byte_range_80_bf, byte_bd;
		BitBlock sequence_f0_96_bd, tmp86, byte_range_80_84, tmp87;
		BitBlock sequence_f0_96_bd_byte_range_80_84, tmp88, byte_9b, sequence_f0_9b;
		BitBlock tmp89, sequence_f0_9b_80, sequence_f0_9b_adv, tmp90, byte_range_80_81;
		BitBlock sequence_f0_9b_80_adv, tmp91, tmp92, byte_9e, sequence_f0_9e, byte_b8;
		BitBlock tmp93, sequence_f0_9e_b8, sequence_f0_9e_adv, tmp94, tmp95, tmp96;
		BitBlock tmp97, tmp98, tmp99, tmp100, tmp101, tmp102, tmp103, tmp104, tmp105;
		BitBlock tmp106, tmp107, tmp108, tmp109, tmp110, tmp111, tmp112, tmp113;
		BitBlock tmp114, tmp115, tmp116, tmp117, tmp118, tmp119;
		BitBlock cc_range_1ee00_1ee3b_4, sequence_f0_9e_b8_adv, tmp120, byte_b9;
		BitBlock sequence_f0_9e_b9, tmp121, tmp122, tmp123, tmp124, tmp125, tmp126;
		BitBlock tmp127, tmp128, tmp129, tmp130, tmp131, tmp132, tmp133, tmp134;
		BitBlock tmp135, tmp136, tmp137, tmp138, tmp139, tmp140, tmp141, tmp142;
		BitBlock tmp143, tmp144, tmp145, tmp146, tmp147, tmp148, tmp149, tmp150;
		BitBlock tmp151, tmp152, tmp153, tmp154, tmp155, cc_range_1ee42_1ee7e_4;
		BitBlock sequence_f0_9e_b9_adv, tmp156, byte_ba, sequence_f0_9e_ba, tmp157;
		BitBlock tmp158, tmp159, tmp160, tmp161, tmp162, tmp163, tmp164, tmp165;
		BitBlock tmp166, tmp167, tmp168, tmp169, tmp170, cc_range_1ee80_1eeab_4;
		BitBlock sequence_f0_9e_ba_adv, tmp171, byte_range_a0_a9;
		BitBlock byte_f0_byte_range_a0_a9, tmp172, byte_f0_byte_range_a0_a9_sfx;
		BitBlock tmp173, byte_f0_byte_range_a0_a9_sfx_sfx, byte_aa, sequence_f0_aa;
		BitBlock sequence_f0_aa_adv, sequence_f0_aa_80, tmp174, byte_range_80_96;
		BitBlock tmp175, sequence_f0_aa_80_byte_range_80_96, byte_ab, sequence_f0_ab;
		BitBlock sequence_f0_ab_adv, sequence_f0_ab_80, tmp176, tmp177;
		BitBlock byte_range_80_b4, tmp178, sequence_f0_ab_80_byte_range_80_b4, byte_af;
		BitBlock sequence_f0_af, byte_a0, sequence_f0_af_adv, sequence_f0_af_a0;
		BitBlock tmp179, tmp180, byte_range_80_9d, tmp181;
		BitBlock sequence_f0_af_a0_byte_range_80_9d, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock byte_c2, cc_range_aa_ba_2, byte_c2_adv, r80_7ff_tmp2, byte_c6;
		BitBlock byte_bb, byte_c6_adv, r80_7ff_tmp3, byte_c7, byte_range_80_83;
		BitBlock byte_c7_adv, r80_7ff_tmp4, byte_ca, byte_94, byte_ca_adv;
		BitBlock r80_7ff_tmp5, r80_7ff_tmp6, byte_d7, r80_7ff_tmp7, r80_7ff_tmp8;
		BitBlock r80_7ff_tmp9, r80_7ff_tmp10, r80_7ff_tmp11, cc_range_5d0_5f0_2;
		BitBlock byte_d7_adv, r80_7ff_tmp12, byte_d8, byte_range_a0_bf, byte_d8_adv;
		BitBlock r80_7ff_tmp13, byte_d9, r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16;
		BitBlock r80_7ff_tmp17, r80_7ff_tmp18, r80_7ff_tmp19, cc_range_641_671_2;
		BitBlock byte_d9_adv, r80_7ff_tmp20, byte_da, byte_da_adv, r80_7ff_tmp21;
		BitBlock byte_db, r80_7ff_tmp22, r80_7ff_tmp23, r80_7ff_tmp24, r80_7ff_tmp25;
		BitBlock r80_7ff_tmp26, r80_7ff_tmp27, r80_7ff_tmp28, r80_7ff_tmp29;
		BitBlock r80_7ff_tmp30, r80_7ff_tmp31, cc_range_6c0_6ff_2, byte_db_adv;
		BitBlock r80_7ff_tmp32, byte_dc, r80_7ff_tmp33, r80_7ff_tmp34, r80_7ff_tmp35;
		BitBlock cc_range_710_712_2, byte_dc_adv, r80_7ff_tmp36, byte_dd;
		BitBlock r80_7ff_tmp37, r80_7ff_tmp38, r80_7ff_tmp39, byte_range_8d_bf;
		BitBlock byte_dd_adv, r80_7ff_tmp40, byte_de, r80_7ff_tmp41, r80_7ff_tmp42;
		BitBlock r80_7ff_tmp43, r80_7ff_tmp44, r80_7ff_tmp45, r80_7ff_tmp46;
		BitBlock cc_range_780_7b1_2, byte_de_adv, r80_7ff_tmp47, byte_df;
		BitBlock r80_7ff_tmp48, r80_7ff_tmp49, byte_range_8a_aa, byte_df_adv;
		BitBlock r80_7ff_tmp50, byte_range_e0_ef, byte_e0, r800_ffff_tmp1;
		BitBlock sequence_e0_a0, byte_e0_adv, r800_ffff_tmp2, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, byte_range_80_95, sequence_e0_a0_adv, r800_ffff_tmp5;
		BitBlock byte_a1, sequence_e0_a1, byte_range_80_98, sequence_e0_a1_adv;
		BitBlock r800_ffff_tmp6, byte_a2, sequence_e0_a2, r800_ffff_tmp7;
		BitBlock r800_ffff_tmp8, r800_ffff_tmp9, cc_range_8a0_8a2_3;
		BitBlock sequence_e0_a2_adv, r800_ffff_tmp10, byte_a4, sequence_e0_a4;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13, r800_ffff_tmp14;
		BitBlock r800_ffff_tmp15, cc_range_904_93d_3, sequence_e0_a4_adv;
		BitBlock r800_ffff_tmp16, r800_ffff_tmp17, byte_a5, sequence_e0_a5;
		BitBlock r800_ffff_tmp18, r800_ffff_tmp19, r800_ffff_tmp20, r800_ffff_tmp21;
		BitBlock r800_ffff_tmp22, r800_ffff_tmp23, r800_ffff_tmp24, r800_ffff_tmp25;
		BitBlock r800_ffff_tmp26, cc_range_950_979_3, sequence_e0_a5_adv;
		BitBlock r800_ffff_tmp27, byte_a6, sequence_e0_a6, r800_ffff_tmp28;
		BitBlock r800_ffff_tmp29, r800_ffff_tmp30, r800_ffff_tmp31, r800_ffff_tmp32;
		BitBlock r800_ffff_tmp33, r800_ffff_tmp34, r800_ffff_tmp35, r800_ffff_tmp36;
		BitBlock r800_ffff_tmp37, r800_ffff_tmp38, r800_ffff_tmp39, r800_ffff_tmp40;
		BitBlock r800_ffff_tmp41, r800_ffff_tmp42, r800_ffff_tmp43, r800_ffff_tmp44;
		BitBlock cc_range_985_9bd_3, sequence_e0_a6_adv, r800_ffff_tmp45, byte_a7;
		BitBlock sequence_e0_a7, r800_ffff_tmp46, r800_ffff_tmp47, r800_ffff_tmp48;
		BitBlock r800_ffff_tmp49, r800_ffff_tmp50, r800_ffff_tmp51, r800_ffff_tmp52;
		BitBlock r800_ffff_tmp53, r800_ffff_tmp54, cc_range_9ce_9f0_3;
		BitBlock sequence_e0_a7_adv, r800_ffff_tmp55, sequence_e0_a8, r800_ffff_tmp56;
		BitBlock r800_ffff_tmp57, r800_ffff_tmp58, r800_ffff_tmp59, r800_ffff_tmp60;
		BitBlock r800_ffff_tmp61, r800_ffff_tmp62, r800_ffff_tmp63, r800_ffff_tmp64;
		BitBlock r800_ffff_tmp65, r800_ffff_tmp66, r800_ffff_tmp67, cc_range_a05_a38_3;
		BitBlock sequence_e0_a8_adv, r800_ffff_tmp68, byte_a9, sequence_e0_a9;
		BitBlock r800_ffff_tmp69, r800_ffff_tmp70, r800_ffff_tmp71, r800_ffff_tmp72;
		BitBlock r800_ffff_tmp73, cc_range_a59_a72_3, sequence_e0_a9_adv;
		BitBlock r800_ffff_tmp74, sequence_e0_aa, r800_ffff_tmp75, r800_ffff_tmp76;
		BitBlock r800_ffff_tmp77, r800_ffff_tmp78, r800_ffff_tmp79, r800_ffff_tmp80;
		BitBlock r800_ffff_tmp81, r800_ffff_tmp82, r800_ffff_tmp83, r800_ffff_tmp84;
		BitBlock r800_ffff_tmp85, r800_ffff_tmp86, cc_range_a85_abd_3;
		BitBlock sequence_e0_aa_adv, r800_ffff_tmp87, sequence_e0_ab, r800_ffff_tmp88;
		BitBlock cc_range_ad0_ae0_3, sequence_e0_ab_adv, r800_ffff_tmp89, byte_ac;
		BitBlock sequence_e0_ac, r800_ffff_tmp90, r800_ffff_tmp91, cc_range_b05_b3d_3;
		BitBlock sequence_e0_ac_adv, r800_ffff_tmp92, byte_ad, sequence_e0_ad;
		BitBlock r800_ffff_tmp93, r800_ffff_tmp94, cc_range_b5c_b71_3;
		BitBlock sequence_e0_ad_adv, r800_ffff_tmp95, byte_ae, sequence_e0_ae;
		BitBlock r800_ffff_tmp96, r800_ffff_tmp97, r800_ffff_tmp98, r800_ffff_tmp99;
		BitBlock r800_ffff_tmp100, r800_ffff_tmp101, r800_ffff_tmp102;
		BitBlock r800_ffff_tmp103, r800_ffff_tmp104, r800_ffff_tmp105;
		BitBlock r800_ffff_tmp106, r800_ffff_tmp107, r800_ffff_tmp108;
		BitBlock r800_ffff_tmp109, r800_ffff_tmp110, r800_ffff_tmp111;
		BitBlock r800_ffff_tmp112, r800_ffff_tmp113, r800_ffff_tmp114;
		BitBlock r800_ffff_tmp115, r800_ffff_tmp116, r800_ffff_tmp117;
		BitBlock r800_ffff_tmp118, r800_ffff_tmp119, r800_ffff_tmp120;
		BitBlock r800_ffff_tmp121, cc_range_b83_bae_3, sequence_e0_ae_adv;
		BitBlock r800_ffff_tmp122, sequence_e0_af, sequence_e0_af_adv;
		BitBlock r800_ffff_tmp123, byte_b0, sequence_e0_b0, r800_ffff_tmp124;
		BitBlock r800_ffff_tmp125, r800_ffff_tmp126, r800_ffff_tmp127;
		BitBlock r800_ffff_tmp128, r800_ffff_tmp129, r800_ffff_tmp130;
		BitBlock r800_ffff_tmp131, r800_ffff_tmp132, r800_ffff_tmp133;
		BitBlock cc_range_c05_c3d_3, sequence_e0_b0_adv, r800_ffff_tmp134, byte_b1;
		BitBlock sequence_e0_b1, r800_ffff_tmp135, cc_range_c58_c60_3;
		BitBlock sequence_e0_b1_adv, r800_ffff_tmp136, byte_b2, sequence_e0_b2;
		BitBlock cc_range_c85_cbd_3, sequence_e0_b2_adv, r800_ffff_tmp137, byte_b3;
		BitBlock sequence_e0_b3, r800_ffff_tmp138, r800_ffff_tmp139, r800_ffff_tmp140;
		BitBlock cc_range_cde_cf1_3, sequence_e0_b3_adv, r800_ffff_tmp141, byte_b4;
		BitBlock sequence_e0_b4, r800_ffff_tmp142, r800_ffff_tmp143, r800_ffff_tmp144;
		BitBlock r800_ffff_tmp145, r800_ffff_tmp146, cc_range_d05_d3d_3;
		BitBlock sequence_e0_b4_adv, r800_ffff_tmp147, byte_b5, sequence_e0_b5;
		BitBlock r800_ffff_tmp148, r800_ffff_tmp149, cc_range_d4e_d7a_3;
		BitBlock sequence_e0_b5_adv, r800_ffff_tmp150, byte_b6, sequence_e0_b6;
		BitBlock r800_ffff_tmp151, r800_ffff_tmp152, r800_ffff_tmp153;
		BitBlock r800_ffff_tmp154, r800_ffff_tmp155, r800_ffff_tmp156;
		BitBlock r800_ffff_tmp157, r800_ffff_tmp158, r800_ffff_tmp159;
		BitBlock r800_ffff_tmp160, r800_ffff_tmp161, cc_range_d85_dbd_3;
		BitBlock sequence_e0_b6_adv, r800_ffff_tmp162, byte_b7, sequence_e0_b7;
		BitBlock byte_range_80_86, sequence_e0_b7_adv, r800_ffff_tmp163;
		BitBlock sequence_e0_b8, r800_ffff_tmp164, r800_ffff_tmp165, r800_ffff_tmp166;
		BitBlock r800_ffff_tmp167, r800_ffff_tmp168, cc_range_e01_e32_3;
		BitBlock sequence_e0_b8_adv, r800_ffff_tmp169, sequence_e0_b9;
		BitBlock byte_range_80_85, sequence_e0_b9_adv, r800_ffff_tmp170;
		BitBlock sequence_e0_ba, r800_ffff_tmp171, r800_ffff_tmp172, r800_ffff_tmp173;
		BitBlock r800_ffff_tmp174, r800_ffff_tmp175, r800_ffff_tmp176;
		BitBlock r800_ffff_tmp177, r800_ffff_tmp178, r800_ffff_tmp179;
		BitBlock r800_ffff_tmp180, r800_ffff_tmp181, r800_ffff_tmp182;
		BitBlock r800_ffff_tmp183, r800_ffff_tmp184, r800_ffff_tmp185;
		BitBlock r800_ffff_tmp186, r800_ffff_tmp187, r800_ffff_tmp188;
		BitBlock r800_ffff_tmp189, r800_ffff_tmp190, r800_ffff_tmp191;
		BitBlock r800_ffff_tmp192, r800_ffff_tmp193, r800_ffff_tmp194;
		BitBlock r800_ffff_tmp195, r800_ffff_tmp196, cc_range_e81_ebd_3;
		BitBlock sequence_e0_ba_adv, r800_ffff_tmp197, sequence_e0_bb;
		BitBlock r800_ffff_tmp198, cc_range_ec0_edc_3, sequence_e0_bb_adv;
		BitBlock r800_ffff_tmp199, sequence_e0_bc, sequence_e0_bc_adv;
		BitBlock r800_ffff_tmp200, sequence_e0_bd, r800_ffff_tmp201, r800_ffff_tmp202;
		BitBlock r800_ffff_tmp203, r800_ffff_tmp204, cc_range_f40_f49_3;
		BitBlock sequence_e0_bd_adv, r800_ffff_tmp205, byte_be, sequence_e0_be;
		BitBlock r800_ffff_tmp206, byte_range_88_8c, sequence_e0_be_adv;
		BitBlock r800_ffff_tmp207, byte_e1, r800_ffff_tmp208, sequence_e1_80;
		BitBlock byte_e1_adv, r800_ffff_tmp209, r800_ffff_tmp210, cc_range_1000_103f_3;
		BitBlock sequence_e1_80_adv, r800_ffff_tmp211, byte_81, sequence_e1_81;
		BitBlock r800_ffff_tmp212, r800_ffff_tmp213, r800_ffff_tmp214;
		BitBlock r800_ffff_tmp215, r800_ffff_tmp216, r800_ffff_tmp217;
		BitBlock r800_ffff_tmp218, r800_ffff_tmp219, r800_ffff_tmp220;
		BitBlock r800_ffff_tmp221, cc_range_1050_1075_3, sequence_e1_81_adv;
		BitBlock r800_ffff_tmp222, sequence_e1_82, r800_ffff_tmp223;
		BitBlock cc_range_1080_108e_3, sequence_e1_82_adv, r800_ffff_tmp224;
		BitBlock sequence_e1_83, r800_ffff_tmp225, r800_ffff_tmp226, r800_ffff_tmp227;
		BitBlock r800_ffff_tmp228, cc_range_10d0_10fd_3, sequence_e1_83_adv;
		BitBlock r800_ffff_tmp229, r800_ffff_tmp230, byte_range_84_88;
		BitBlock byte_e1_byte_range_84_88, r800_ffff_tmp231;
		BitBlock byte_e1_byte_range_84_88_sfx, byte_89, sequence_e1_89;
		BitBlock byte_range_80_88, r800_ffff_tmp232, sequence_e1_89_byte_range_80_88;
		BitBlock byte_8a, sequence_e1_8a, r800_ffff_tmp233;
		BitBlock sequence_e1_8a_byte_range_80_88, byte_8b, sequence_e1_8b;
		BitBlock r800_ffff_tmp234, sequence_e1_8b_80, byte_8c, sequence_e1_8c;
		BitBlock byte_range_80_90, r800_ffff_tmp235, sequence_e1_8c_byte_range_80_90;
		BitBlock sequence_e1_8d, byte_range_80_9a, r800_ffff_tmp236;
		BitBlock sequence_e1_8d_byte_range_80_9a, byte_8e, sequence_e1_8e;
		BitBlock r800_ffff_tmp237, sequence_e1_8e_byte_range_80_8f, byte_8f;
		BitBlock sequence_e1_8f, r800_ffff_tmp238, sequence_e1_8f_byte_range_80_b4;
		BitBlock sequence_e1_90, r800_ffff_tmp239, byte_range_81_bf, r800_ffff_tmp240;
		BitBlock sequence_e1_90_byte_range_81_bf, sequence_e1_91, r800_ffff_tmp241;
		BitBlock sequence_e1_91_byte_range_80_bf, byte_99, sequence_e1_99;
		BitBlock r800_ffff_tmp242, byte_range_80_ac, r800_ffff_tmp243;
		BitBlock sequence_e1_99_byte_range_80_ac, sequence_e1_9a, r800_ffff_tmp244;
		BitBlock r800_ffff_tmp245, byte_range_81_9a, r800_ffff_tmp246;
		BitBlock sequence_e1_9a_byte_range_81_9a, sequence_e1_9b, r800_ffff_tmp247;
		BitBlock sequence_e1_9b_byte_range_80_aa, byte_9c, sequence_e1_9c;
		BitBlock r800_ffff_tmp248, sequence_e1_9c_byte_range_80_8c, byte_9d;
		BitBlock sequence_e1_9d, byte_range_80_91, r800_ffff_tmp249;
		BitBlock sequence_e1_9d_byte_range_80_91, sequence_e1_9e, r800_ffff_tmp250;
		BitBlock r800_ffff_tmp251, byte_range_80_b3, r800_ffff_tmp252;
		BitBlock sequence_e1_9e_byte_range_80_b3, byte_9f, sequence_e1_9f;
		BitBlock r800_ffff_tmp253, sequence_e1_9f_9c, sequence_e1_a0, r800_ffff_tmp254;
		BitBlock sequence_e1_a0_byte_range_a0_bf, sequence_e1_a1, byte_range_80_82;
		BitBlock r800_ffff_tmp255, sequence_e1_a1_byte_range_80_82, sequence_e1_a2;
		BitBlock r800_ffff_tmp256, byte_range_80_a8, r800_ffff_tmp257;
		BitBlock sequence_e1_a2_byte_range_80_a8, byte_a3, sequence_e1_a3;
		BitBlock r800_ffff_tmp258, byte_range_80_b5, r800_ffff_tmp259;
		BitBlock sequence_e1_a3_byte_range_80_b5, sequence_e1_a4, r800_ffff_tmp260;
		BitBlock byte_range_80_9c, r800_ffff_tmp261, sequence_e1_a4_byte_range_80_9c;
		BitBlock sequence_e1_a5, r800_ffff_tmp262, r800_ffff_tmp263, r800_ffff_tmp264;
		BitBlock byte_range_90_ad, r800_ffff_tmp265, sequence_e1_a5_byte_range_90_ad;
		BitBlock sequence_e1_a6, r800_ffff_tmp266, r800_ffff_tmp267, byte_range_80_ab;
		BitBlock r800_ffff_tmp268, sequence_e1_a6_byte_range_80_ab, sequence_e1_a7;
		BitBlock byte_range_81_87, r800_ffff_tmp269, sequence_e1_a7_byte_range_81_87;
		BitBlock sequence_e1_a8, r800_ffff_tmp270, sequence_e1_a8_byte_range_80_96;
		BitBlock sequence_e1_a9, byte_range_80_94, r800_ffff_tmp271;
		BitBlock sequence_e1_a9_byte_range_80_94, sequence_e1_ac, r800_ffff_tmp272;
		BitBlock r800_ffff_tmp273, byte_range_85_b3, r800_ffff_tmp274;
		BitBlock sequence_e1_ac_byte_range_85_b3, sequence_e1_ad, r800_ffff_tmp275;
		BitBlock byte_range_85_8b, r800_ffff_tmp276, sequence_e1_ad_byte_range_85_8b;
		BitBlock sequence_e1_ae, r800_ffff_tmp277, r800_ffff_tmp278, byte_range_83_a0;
		BitBlock r800_ffff_tmp279, sequence_e1_ae_byte_range_83_a0, sequence_e1_af;
		BitBlock r800_ffff_tmp280, r800_ffff_tmp281, byte_range_80_a5;
		BitBlock r800_ffff_tmp282, sequence_e1_af_byte_range_80_a5, sequence_e1_b0;
		BitBlock r800_ffff_tmp283, byte_range_80_a3, r800_ffff_tmp284;
		BitBlock sequence_e1_b0_byte_range_80_a3, sequence_e1_b1, byte_range_8d_8f;
		BitBlock r800_ffff_tmp285, sequence_e1_b1_byte_range_8d_8f, sequence_e1_b3;
		BitBlock r800_ffff_tmp286, byte_range_a9_ac, r800_ffff_tmp287;
		BitBlock sequence_e1_b3_byte_range_a9_ac, byte_e2, r800_ffff_tmp288;
		BitBlock sequence_e2_84, byte_e2_adv, r800_ffff_tmp289, byte_range_b5_b8;
		BitBlock sequence_e2_84_adv, r800_ffff_tmp290, sequence_e2_b4;
		BitBlock byte_range_b0_bf, sequence_e2_b4_adv, r800_ffff_tmp291;
		BitBlock sequence_e2_b5, r800_ffff_tmp292, r800_ffff_tmp293, byte_range_80_a7;
		BitBlock sequence_e2_b5_adv, r800_ffff_tmp294, sequence_e2_b6;
		BitBlock r800_ffff_tmp295, r800_ffff_tmp296, r800_ffff_tmp297;
		BitBlock r800_ffff_tmp298, r800_ffff_tmp299, r800_ffff_tmp300;
		BitBlock r800_ffff_tmp301, r800_ffff_tmp302, r800_ffff_tmp303;
		BitBlock cc_range_2d80_2db8_3, sequence_e2_b6_adv, r800_ffff_tmp304;
		BitBlock sequence_e2_b7, r800_ffff_tmp305, r800_ffff_tmp306;
		BitBlock cc_range_2dc0_2dd8_3, sequence_e2_b7_adv, r800_ffff_tmp307, byte_e3;
		BitBlock r800_ffff_tmp308, sequence_e3_80, byte_e3_adv, r800_ffff_tmp309;
		BitBlock r800_ffff_tmp310, cc_range_3006_303c_3, sequence_e3_80_adv;
		BitBlock r800_ffff_tmp311, sequence_e3_81, sequence_e3_81_adv;
		BitBlock r800_ffff_tmp312, sequence_e3_82, r800_ffff_tmp313, r800_ffff_tmp314;
		BitBlock cc_range_3080_30a1_3, sequence_e3_82_adv, r800_ffff_tmp315;
		BitBlock sequence_e3_83, r800_ffff_tmp316, r800_ffff_tmp317, r800_ffff_tmp318;
		BitBlock cc_range_30c0_30ff_3, sequence_e3_83_adv, r800_ffff_tmp319;
		BitBlock sequence_e3_84, r800_ffff_tmp320, r800_ffff_tmp321, r800_ffff_tmp322;
		BitBlock r800_ffff_tmp323, cc_range_3105_3131_3, sequence_e3_84_adv;
		BitBlock r800_ffff_tmp324, byte_85, sequence_e3_85, sequence_e3_85_adv;
		BitBlock r800_ffff_tmp325, sequence_e3_86, r800_ffff_tmp326, r800_ffff_tmp327;
		BitBlock r800_ffff_tmp328, cc_range_3180_31a0_3, sequence_e3_86_adv;
		BitBlock r800_ffff_tmp329, sequence_e3_87, sequence_e3_87_adv;
		BitBlock r800_ffff_tmp330, byte_range_90_bf, byte_e3_byte_range_90_bf;
		BitBlock r800_ffff_tmp331, byte_e3_byte_range_90_bf_sfx, byte_e4;
		BitBlock r800_ffff_tmp332, byte_e4_byte_range_80_b5, r800_ffff_tmp333;
		BitBlock byte_e4_byte_range_80_b5_sfx, byte_e4_adv, sequence_e4_b6;
		BitBlock r800_ffff_tmp334, sequence_e4_b6_byte_range_80_b5, sequence_e4_b8;
		BitBlock r800_ffff_tmp335, sequence_e4_b8_byte_range_80_bf, byte_range_e5_e8;
		BitBlock r800_ffff_tmp336, byte_range_e5_e8_sfx, r800_ffff_tmp337;
		BitBlock byte_range_e5_e8_sfx_sfx, byte_e9, byte_e9_adv, sequence_e9_80;
		BitBlock r800_ffff_tmp338, sequence_e9_80_byte_range_80_8c, byte_ea;
		BitBlock byte_ea_adv, sequence_ea_80, r800_ffff_tmp339;
		BitBlock sequence_ea_80_byte_range_80_94, byte_eb, byte_eb_adv, sequence_eb_80;
		BitBlock r800_ffff_tmp340, sequence_eb_80_byte_range_80_bf, byte_ed;
		BitBlock byte_ed_adv, sequence_ed_80, r800_ffff_tmp341;
		BitBlock sequence_ed_80_byte_range_80_a3, byte_ef, byte_range_a4_a8;
		BitBlock r800_ffff_tmp342, byte_ef_byte_range_a4_a8, r800_ffff_tmp343;
		BitBlock byte_ef_byte_range_a4_a8_sfx, byte_ef_adv, sequence_ef_a9;
		BitBlock r800_ffff_tmp344, byte_range_80_ad, r800_ffff_tmp345;
		BitBlock sequence_ef_a9_byte_range_80_ad, sequence_ef_aa, r800_ffff_tmp346;
		BitBlock sequence_ef_aa_byte_range_80_bf, sequence_ef_ab, byte_range_80_99;
		BitBlock r800_ffff_tmp347, sequence_ef_ab_byte_range_80_99, sequence_ef_ac;
		BitBlock r800_ffff_tmp348, sequence_ef_ac_9d, sequence_ef_ad, r800_ffff_tmp349;
		BitBlock sequence_ef_ad_byte_range_80_81, sequence_ef_ae, r800_ffff_tmp350;
		BitBlock byte_range_80_b1, r800_ffff_tmp351, sequence_ef_ae_byte_range_80_b1;
		BitBlock sequence_ef_af, r800_ffff_tmp352, byte_range_93_bf, r800_ffff_tmp353;
		BitBlock sequence_ef_af_byte_range_93_bf, sequence_ef_b0, r800_ffff_tmp354;
		BitBlock sequence_ef_b0_byte_range_80_bf, sequence_ef_b4, r800_ffff_tmp355;
		BitBlock byte_range_80_bd, r800_ffff_tmp356, sequence_ef_b4_byte_range_80_bd;
		BitBlock sequence_ef_b5, r800_ffff_tmp357, sequence_ef_b5_byte_range_90_bf;
		BitBlock sequence_ef_b6, r800_ffff_tmp358, sequence_ef_b6_byte_range_80_8f;
		BitBlock sequence_ef_b7, byte_range_80_87, r800_ffff_tmp359;
		BitBlock sequence_ef_b7_byte_range_80_87, sequence_ef_b9, byte_range_b0_b4;
		BitBlock r800_ffff_tmp360, sequence_ef_b9_byte_range_b0_b4, sequence_ef_ba;
		BitBlock r800_ffff_tmp361, sequence_ef_ba_byte_range_80_bf, sequence_ef_bb;
		BitBlock r800_ffff_tmp362, byte_range_80_bc, r800_ffff_tmp363;
		BitBlock sequence_ef_bb_byte_range_80_bc, sequence_ef_bd, byte_range_a6_af;
		BitBlock r800_ffff_tmp364, sequence_ef_bd_byte_range_a6_af, sequence_ef_be;
		BitBlock r800_ffff_tmp365, sequence_ef_be_byte_range_80_9d, byte_bf;
		BitBlock sequence_ef_bf, byte_range_82_87, r800_ffff_tmp366;
		BitBlock sequence_ef_bf_byte_range_82_87, sequence_f0_90, tmp182;
		BitBlock sequence_f0_90_byte_range_80_bf, tmp183;
		BitBlock sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock sequence_f0_90_80, sequence_f0_90_adv, r10000_10fff_tmp1;
		BitBlock r10000_10fff_tmp2, r10000_10fff_tmp3, r10000_10fff_tmp4;
		BitBlock r10000_10fff_tmp5, r10000_10fff_tmp6, r10000_10fff_tmp7;
		BitBlock r10000_10fff_tmp8, r10000_10fff_tmp9, r10000_10fff_tmp10;
		BitBlock r10000_10fff_tmp11, r10000_10fff_tmp12, r10000_10fff_tmp13;
		BitBlock r10000_10fff_tmp14, cc_range_10000_1003f_4, sequence_f0_90_80_adv;
		BitBlock r10000_10fff_tmp15, sequence_f0_90_81, r10000_10fff_tmp16;
		BitBlock r10000_10fff_tmp17, r10000_10fff_tmp18, r10000_10fff_tmp19;
		BitBlock cc_range_10040_10050_4, sequence_f0_90_81_adv, r10000_10fff_tmp20;
		BitBlock sequence_f0_90_82, sequence_f0_90_82_adv, r10000_10fff_tmp21;
		BitBlock sequence_f0_90_83, r10000_10fff_tmp22, r10000_10fff_tmp23;
		BitBlock byte_range_80_ba, sequence_f0_90_83_adv, r10000_10fff_tmp24;
		BitBlock sequence_f0_90_8a, r10000_10fff_tmp25, r10000_10fff_tmp26;
		BitBlock cc_range_10280_102a0_4, sequence_f0_90_8a_adv, r10000_10fff_tmp27;
		BitBlock sequence_f0_90_8b, r10000_10fff_tmp28, sequence_f0_90_8b_adv;
		BitBlock r10000_10fff_tmp29, sequence_f0_90_8c, r10000_10fff_tmp30;
		BitBlock r10000_10fff_tmp31, cc_range_10300_10330_4, sequence_f0_90_8c_adv;
		BitBlock r10000_10fff_tmp32, sequence_f0_90_8d, r10000_10fff_tmp33;
		BitBlock r10000_10fff_tmp34, cc_range_10340_10342_4, sequence_f0_90_8d_adv;
		BitBlock r10000_10fff_tmp35, sequence_f0_90_8e, cc_range_10380_103a0_4;
		BitBlock sequence_f0_90_8e_adv, r10000_10fff_tmp36, sequence_f0_90_8f;
		BitBlock r10000_10fff_tmp37, cc_range_103c0_103c8_4, sequence_f0_90_8f_adv;
		BitBlock r10000_10fff_tmp38, sequence_f0_90_91, sequence_f0_90_91_adv;
		BitBlock r10000_10fff_tmp39, sequence_f0_90_92, sequence_f0_90_92_adv;
		BitBlock r10000_10fff_tmp40, sequence_f0_90_a0, r10000_10fff_tmp41;
		BitBlock r10000_10fff_tmp42, r10000_10fff_tmp43, r10000_10fff_tmp44;
		BitBlock r10000_10fff_tmp45, r10000_10fff_tmp46, r10000_10fff_tmp47;
		BitBlock r10000_10fff_tmp48, r10000_10fff_tmp49, r10000_10fff_tmp50;
		BitBlock r10000_10fff_tmp51, r10000_10fff_tmp52, r10000_10fff_tmp53;
		BitBlock r10000_10fff_tmp54, r10000_10fff_tmp55, cc_range_10800_1083f_4;
		BitBlock sequence_f0_90_a0_adv, r10000_10fff_tmp56, sequence_f0_90_a1;
		BitBlock sequence_f0_90_a1_adv, r10000_10fff_tmp57, sequence_f0_90_a4;
		BitBlock r10000_10fff_tmp58, r10000_10fff_tmp59, cc_range_10900_10920_4;
		BitBlock sequence_f0_90_a4_adv, r10000_10fff_tmp60, sequence_f0_90_a6;
		BitBlock r10000_10fff_tmp61, r10000_10fff_tmp62, r10000_10fff_tmp63;
		BitBlock cc_range_10980_109be_4, sequence_f0_90_a6_adv, r10000_10fff_tmp64;
		BitBlock sequence_f0_90_a8, r10000_10fff_tmp65, r10000_10fff_tmp66;
		BitBlock r10000_10fff_tmp67, r10000_10fff_tmp68, r10000_10fff_tmp69;
		BitBlock r10000_10fff_tmp70, r10000_10fff_tmp71, r10000_10fff_tmp72;
		BitBlock r10000_10fff_tmp73, cc_range_10a00_10a19_4, sequence_f0_90_a8_adv;
		BitBlock r10000_10fff_tmp74, sequence_f0_90_a9, byte_range_a0_bc;
		BitBlock sequence_f0_90_a9_adv, r10000_10fff_tmp75, sequence_f0_90_ac;
		BitBlock r10000_10fff_tmp76, sequence_f0_90_ac_adv, r10000_10fff_tmp77;
		BitBlock sequence_f0_90_ad, r10000_10fff_tmp78, cc_range_10b40_10b60_4;
		BitBlock sequence_f0_90_ad_adv, r10000_10fff_tmp79, sequence_f0_90_b0;
		BitBlock sequence_f0_90_b0_adv, r10000_10fff_tmp80, sequence_f0_90_b1;
		BitBlock sequence_f0_90_b1_adv, r10000_10fff_tmp81;




        struct_Lo.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_f0 = simd_andc(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp11 = simd_andc(tmp10, tmp4);
        byte_91 = simd_and(tmp9, tmp11);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp12));
        sequence_f0_91 = simd_and(tmp12, byte_91);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
        tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp14 = simd_andc(tmp7, tmp13);
        byte_80 = simd_andc(tmp14, tmp6);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(2), tmp15));
        sequence_f0_91_80 = simd_and(tmp15, byte_80);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(3), sequence_f0_91_adv));
        sequence_f0_91_80 = simd_and(sequence_f0_91_adv, byte_80);
        tmp16 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
        tmp17 = simd_not(tmp16);
        tmp18 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp19 = simd_or(tmp4, tmp18);
        tmp20 = simd_or(basis_bits.bit_3, tmp19);
        tmp21 = simd_or(simd_and(basis_bits.bit_2, tmp17), simd_andc(tmp20, basis_bits.bit_2));
        byte_range_83_b7 = simd_and(tmp7, tmp21);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(4), sequence_f0_91_80_adv));
        tmp22 = simd_and(sequence_f0_91_80_adv, byte_range_83_b7);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp22);
        tmp23 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp24 = simd_andc(tmp23, tmp4);
        byte_82 = simd_and(tmp14, tmp24);
        sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
        sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
        tmp25 = simd_not(basis_bits.bit_3);
        tmp26 = simd_or(simd_and(basis_bits.bit_2, tmp25), simd_andc(tmp20, basis_bits.bit_2));
        byte_range_83_af = simd_and(tmp7, tmp26);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(5), sequence_f0_91_82_adv));
        tmp27 = simd_and(sequence_f0_91_82_adv, byte_range_83_af);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp27);
        tmp28 = simd_andc(tmp18, tmp4);
        byte_83 = simd_and(tmp14, tmp28);
        sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
        sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
        tmp29 = simd_or(basis_bits.bit_5, tmp5);
        tmp30 = simd_and(basis_bits.bit_4, tmp29);
        tmp31 = simd_or(basis_bits.bit_3, tmp30);
        tmp32 = simd_not(tmp31);
        tmp33 = simd_or(simd_and(basis_bits.bit_2, tmp32), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
        byte_range_90_a8 = simd_and(tmp7, tmp33);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(6), sequence_f0_91_83_adv));
        tmp34 = simd_and(sequence_f0_91_83_adv, byte_range_90_a8);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp34);
        tmp35 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp36 = simd_andc(tmp35, tmp5);
        byte_84 = simd_and(tmp14, tmp36);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        tmp37 = simd_and(basis_bits.bit_5, tmp18);
        tmp38 = simd_or(basis_bits.bit_4, tmp37);
        tmp39 = simd_or(basis_bits.bit_3, tmp38);
        tmp40 = simd_not(tmp39);
        tmp41 = simd_or(simd_and(basis_bits.bit_2, tmp40), simd_andc(tmp20, basis_bits.bit_2));
        byte_range_83_a6 = simd_and(tmp7, tmp41);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(7), sequence_f0_91_84_adv));
        tmp42 = simd_and(sequence_f0_91_84_adv, byte_range_83_a6);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp42);
        tmp43 = simd_and(tmp35, tmp23);
        byte_86 = simd_and(tmp14, tmp43);
        sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
        sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
        tmp44 = simd_and(basis_bits.bit_3, tmp19);
        tmp45 = simd_not(tmp44);
        tmp46 = simd_or(simd_and(basis_bits.bit_2, tmp45), simd_andc(tmp20, basis_bits.bit_2));
        byte_range_83_b2 = simd_and(tmp7, tmp46);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(8), sequence_f0_91_86_adv));
        tmp47 = simd_and(sequence_f0_91_86_adv, byte_range_83_b2);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp47);
        tmp48 = simd_and(tmp35, tmp18);
        byte_87 = simd_and(tmp14, tmp48);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        tmp49 = simd_andc(tmp14, basis_bits.bit_4);
        tmp50 = simd_not(tmp5);
        tmp51 = simd_or(simd_and(basis_bits.bit_5, tmp50), simd_andc(tmp5, basis_bits.bit_5));
        byte_range_81_84 = simd_and(tmp49, tmp51);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(9), sequence_f0_91_87_adv));
        tmp52 = simd_and(sequence_f0_91_87_adv, byte_range_81_84);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp52);
        tmp53 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp54 = simd_and(tmp53, tmp23);
        byte_9a = simd_and(tmp9, tmp54);
        sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
        sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
        tmp55 = simd_or(basis_bits.bit_5, tmp18);
        tmp56 = simd_and(basis_bits.bit_4, tmp55);
        tmp57 = simd_or(basis_bits.bit_3, tmp56);
        tmp58 = simd_and(basis_bits.bit_2, tmp57);
        byte_range_80_aa = simd_andc(tmp7, tmp58);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(10), sequence_f0_91_9a_adv));
        tmp59 = simd_and(sequence_f0_91_9a_adv, byte_range_80_aa);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp59);
        byte_92 = simd_and(tmp9, tmp24);
        sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
        sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
        tmp60 = simd_and(basis_bits.bit_5, tmp5);
        tmp61 = simd_and(basis_bits.bit_4, tmp60);
        byte_range_80_8c = simd_andc(tmp14, tmp61);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(11), tmp62));
        sequence_f0_92_byte_range_80_8c = simd_and(tmp62, byte_range_80_8c);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f0_92_byte_range_80_8c, carryQ.get_carry_in(12), tmp63));
        sequence_f0_92_byte_range_80_8c_sfx = simd_and(tmp63, byte_range_80_bf);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_92_byte_range_80_8c_sfx);
        tmp64 = simd_and(byte_range_80_bf, tmp8);
        tmp65 = simd_andc(byte_range_80_bf, tmp13);
        tmp66 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp67 = simd_and(tmp66, tmp10);
        byte_8d = simd_and(tmp65, tmp67);
        carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(13), sequence_f0_92_adv));
        sequence_f0_92_8d = simd_and(sequence_f0_92_adv, byte_8d);
        tmp68 = simd_and(tmp66, tmp18);
        tmp69 = simd_or(basis_bits.bit_3, tmp68);
        tmp70 = simd_and(basis_bits.bit_2, tmp69);
        byte_range_80_ae = simd_andc(byte_range_80_bf, tmp70);
        carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f0_92_8d, carryQ.get_carry_in(14), tmp71));
        sequence_f0_92_8d_byte_range_80_ae = simd_and(tmp71, byte_range_80_ae);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_92_8d_byte_range_80_ae);
        byte_93 = simd_and(tmp64, tmp28);
        sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
        sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
        byte_range_80_8f = simd_andc(byte_range_80_bf, tmp13);
        carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(15), tmp72));
        sequence_f0_93_byte_range_80_8f = simd_and(tmp72, byte_range_80_8f);
        carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_f0_93_byte_range_80_8f, carryQ.get_carry_in(16), tmp73));
        sequence_f0_93_byte_range_80_8f_sfx = simd_and(tmp73, byte_range_80_bf);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_93_byte_range_80_8f_sfx);
        byte_90 = simd_andc(tmp64, tmp6);
        carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(17), sequence_f0_93_adv));
        sequence_f0_93_90 = simd_and(sequence_f0_93_adv, byte_90);
        carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_f0_93_90, carryQ.get_carry_in(18), tmp74));
        sequence_f0_93_90_byte_range_80_ae = simd_and(tmp74, byte_range_80_ae);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_93_90_byte_range_80_ae);
        byte_96 = simd_and(tmp64, tmp43);
        sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
        sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
        tmp75 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp76 = simd_and(byte_range_80_bf, tmp75);
        byte_range_a0_a7 = simd_andc(tmp76, basis_bits.bit_4);
        carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(19), tmp77));
        sequence_f0_96_byte_range_a0_a7 = simd_and(tmp77, byte_range_a0_a7);
        carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_a0_a7, carryQ.get_carry_in(20), tmp78));
        sequence_f0_96_byte_range_a0_a7_sfx = simd_and(tmp78, byte_range_80_bf);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_96_byte_range_a0_a7_sfx);
        tmp79 = simd_andc(tmp53, tmp5);
        byte_a8 = simd_and(tmp76, tmp79);
        carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(21), sequence_f0_96_adv));
        sequence_f0_96_a8 = simd_and(sequence_f0_96_adv, byte_a8);
        tmp80 = simd_and(basis_bits.bit_3, tmp30);
        tmp81 = simd_and(basis_bits.bit_2, tmp80);
        byte_range_80_b8 = simd_andc(byte_range_80_bf, tmp81);
        carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a8, carryQ.get_carry_in(22), tmp82));
        sequence_f0_96_a8_byte_range_80_b8 = simd_and(tmp82, byte_range_80_b8);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_96_a8_byte_range_80_b8);
        tmp83 = simd_and(byte_range_80_bf, tmp2);
        tmp84 = simd_andc(tmp66, tmp5);
        byte_bc = simd_and(tmp83, tmp84);
        sequence_f0_96_bc = simd_and(sequence_f0_96_adv, byte_bc);
        carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bc, carryQ.get_carry_in(23), tmp85));
        sequence_f0_96_bc_byte_range_80_bf = simd_and(tmp85, byte_range_80_bf);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_96_bc_byte_range_80_bf);
        byte_bd = simd_and(tmp83, tmp67);
        sequence_f0_96_bd = simd_and(sequence_f0_96_adv, byte_bd);
        tmp86 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
        byte_range_80_84 = simd_andc(tmp86, tmp60);
        carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bd, carryQ.get_carry_in(24), tmp87));
        sequence_f0_96_bd_byte_range_80_84 = simd_and(tmp87, byte_range_80_84);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_96_bd_byte_range_80_84);
        tmp88 = simd_and(tmp53, tmp18);
        byte_9b = simd_and(tmp64, tmp88);
        sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
        sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
        carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(25), tmp89));
        sequence_f0_9b_80 = simd_and(tmp89, byte_80);
        carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(26), sequence_f0_9b_adv));
        sequence_f0_9b_80 = simd_and(sequence_f0_9b_adv, byte_80);
        tmp90 = simd_or(tmp4, basis_bits.bit_6);
        byte_range_80_81 = simd_andc(byte_range_80_8f, tmp90);
        carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_80, carryQ.get_carry_in(27), sequence_f0_9b_80_adv));
        tmp91 = simd_and(sequence_f0_9b_80_adv, byte_range_80_81);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp91);
        tmp92 = simd_and(tmp66, tmp23);
        byte_9e = simd_and(tmp64, tmp92);
        sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
        sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
        byte_b8 = simd_and(tmp83, tmp79);
        carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(28), tmp93));
        sequence_f0_9e_b8 = simd_and(tmp93, byte_b8);
        carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(29), sequence_f0_9e_adv));
        sequence_f0_9e_b8 = simd_and(sequence_f0_9e_adv, byte_b8);
        tmp94 = simd_andc(byte_range_80_8f, tmp4);
        tmp95 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
        tmp96 = simd_or(basis_bits.bit_4, tmp60);
        tmp97 = simd_or(basis_bits.bit_3, tmp96);
        tmp98 = simd_and(tmp95, tmp97);
        tmp99 = simd_or(tmp94, tmp98);
        tmp100 = simd_andc(tmp76, tmp4);
        tmp101 = simd_not(basis_bits.bit_7);
        tmp102 = simd_or(simd_and(basis_bits.bit_6, tmp101), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
        tmp103 = simd_and(tmp100, tmp102);
        tmp104 = simd_or(tmp99, tmp103);
        tmp105 = simd_and(tmp76, tmp36);
        tmp106 = simd_or(tmp104, tmp105);
        tmp107 = simd_and(tmp76, tmp48);
        tmp108 = simd_or(tmp106, tmp107);
        tmp109 = simd_and(byte_range_80_bf, basis_bits.bit_2);
        tmp110 = simd_not(tmp19);
        tmp111 = simd_or(simd_and(basis_bits.bit_3, tmp110), simd_andc(tmp30, basis_bits.bit_3));
        tmp112 = simd_and(tmp109, tmp111);
        tmp113 = simd_or(tmp108, tmp112);
        tmp114 = simd_and(tmp83, tmp35);
        tmp115 = simd_or(tmp113, tmp114);
        tmp116 = simd_and(tmp53, tmp10);
        tmp117 = simd_and(tmp83, tmp116);
        tmp118 = simd_or(tmp115, tmp117);
        tmp119 = simd_and(tmp83, tmp88);
        cc_range_1ee00_1ee3b_4 = simd_or(tmp118, tmp119);
        carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b8, carryQ.get_carry_in(30), sequence_f0_9e_b8_adv));
        tmp120 = simd_and(sequence_f0_9e_b8_adv, cc_range_1ee00_1ee3b_4);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp120);
        byte_b9 = simd_and(tmp83, tmp116);
        sequence_f0_9e_b9 = simd_and(sequence_f0_9e_adv, byte_b9);
        sequence_f0_9e_b9 = simd_and(sequence_f0_9e_adv, byte_b9);
        tmp121 = simd_or(tmp24, tmp48);
        tmp122 = simd_or(tmp121, tmp116);
        tmp123 = simd_or(tmp122, tmp88);
        tmp124 = simd_and(byte_range_80_8f, tmp123);
        tmp125 = simd_and(byte_range_80_8f, tmp66);
        tmp126 = simd_and(tmp125, tmp5);
        tmp127 = simd_or(tmp124, tmp126);
        tmp128 = simd_andc(tmp64, tmp4);
        tmp129 = simd_and(tmp128, tmp102);
        tmp130 = simd_or(tmp127, tmp129);
        tmp131 = simd_and(tmp64, tmp36);
        tmp132 = simd_or(tmp130, tmp131);
        tmp133 = simd_and(tmp64, tmp48);
        tmp134 = simd_or(tmp132, tmp133);
        tmp135 = simd_and(tmp64, tmp116);
        tmp136 = simd_or(tmp134, tmp135);
        tmp137 = simd_or(tmp136, byte_9b);
        tmp138 = simd_and(tmp64, tmp67);
        tmp139 = simd_or(tmp137, tmp138);
        tmp140 = simd_and(tmp64, tmp68);
        tmp141 = simd_or(tmp139, tmp140);
        tmp142 = simd_or(tmp141, tmp103);
        tmp143 = simd_or(tmp142, tmp105);
        tmp144 = simd_not(tmp55);
        tmp145 = simd_or(simd_and(basis_bits.bit_4, tmp144), simd_andc(tmp37, basis_bits.bit_4));
        tmp146 = simd_and(tmp76, tmp145);
        tmp147 = simd_or(tmp143, tmp146);
        tmp148 = simd_or(simd_and(basis_bits.bit_3, tmp110), simd_andc(tmp66, basis_bits.bit_3));
        tmp149 = simd_and(tmp109, tmp148);
        tmp150 = simd_or(tmp147, tmp149);
        tmp151 = simd_or(tmp150, tmp114);
        tmp152 = simd_and(tmp83, basis_bits.bit_4);
        tmp153 = simd_and(tmp152, tmp51);
        tmp154 = simd_or(tmp151, tmp153);
        tmp155 = simd_and(tmp83, tmp92);
        cc_range_1ee42_1ee7e_4 = simd_or(tmp154, tmp155);
        carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b9, carryQ.get_carry_in(31), sequence_f0_9e_b9_adv));
        tmp156 = simd_and(sequence_f0_9e_b9_adv, cc_range_1ee42_1ee7e_4);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp156);
        byte_ba = simd_and(tmp83, tmp54);
        sequence_f0_9e_ba = simd_and(sequence_f0_9e_adv, byte_ba);
        sequence_f0_9e_ba = simd_and(sequence_f0_9e_adv, byte_ba);
        tmp157 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp158 = simd_and(basis_bits.bit_4, tmp157);
        tmp159 = simd_andc(byte_range_80_8f, tmp158);
        tmp160 = simd_not(tmp66);
        tmp161 = simd_or(simd_and(basis_bits.bit_3, tmp160), simd_andc(tmp56, basis_bits.bit_3));
        tmp162 = simd_and(tmp95, tmp161);
        tmp163 = simd_or(tmp159, tmp162);
        tmp164 = simd_and(tmp100, tmp5);
        tmp165 = simd_or(tmp163, tmp164);
        tmp166 = simd_not(tmp157);
        tmp167 = simd_or(simd_and(basis_bits.bit_4, tmp166), simd_andc(tmp60, basis_bits.bit_4));
        tmp168 = simd_and(tmp76, tmp167);
        tmp169 = simd_or(tmp165, tmp168);
        tmp170 = simd_and(tmp109, tmp161);
        cc_range_1ee80_1eeab_4 = simd_or(tmp169, tmp170);
        carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_ba, carryQ.get_carry_in(32), sequence_f0_9e_ba_adv));
        tmp171 = simd_and(sequence_f0_9e_ba_adv, cc_range_1ee80_1eeab_4);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp171);
        byte_range_a0_a9 = simd_andc(tmp76, tmp158);
        byte_f0_byte_range_a0_a9 = simd_and(byte_f0_adv, byte_range_a0_a9);
        carryQ.cq[33] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9, carryQ.get_carry_in(33), tmp172));
        byte_f0_byte_range_a0_a9_sfx = simd_and(tmp172, byte_range_80_bf);
        carryQ.cq[34] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9_sfx, carryQ.get_carry_in(34), tmp173));
        byte_f0_byte_range_a0_a9_sfx_sfx = simd_and(tmp173, byte_range_80_bf);
        struct_Lo.cc = simd_or(struct_Lo.cc, byte_f0_byte_range_a0_a9_sfx_sfx);
        byte_aa = simd_and(tmp76, tmp54);
        sequence_f0_aa = simd_and(byte_f0_adv, byte_aa);
        carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(35), sequence_f0_aa_adv));
        sequence_f0_aa_80 = simd_and(sequence_f0_aa_adv, byte_80);
        tmp174 = simd_and(basis_bits.bit_3, tmp38);
        byte_range_80_96 = simd_andc(tmp95, tmp174);
        carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_80, carryQ.get_carry_in(36), tmp175));
        sequence_f0_aa_80_byte_range_80_96 = simd_and(tmp175, byte_range_80_96);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_aa_80_byte_range_80_96);
        byte_ab = simd_and(tmp76, tmp88);
        sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
        carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(37), sequence_f0_ab_adv));
        sequence_f0_ab_80 = simd_and(sequence_f0_ab_adv, byte_80);
        tmp176 = simd_and(basis_bits.bit_3, tmp96);
        tmp177 = simd_and(basis_bits.bit_2, tmp176);
        byte_range_80_b4 = simd_andc(byte_range_80_bf, tmp177);
        carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_80, carryQ.get_carry_in(38), tmp178));
        sequence_f0_ab_80_byte_range_80_b4 = simd_and(tmp178, byte_range_80_b4);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_ab_80_byte_range_80_b4);
        byte_af = simd_and(tmp76, tmp68);
        sequence_f0_af = simd_and(byte_f0_adv, byte_af);
        byte_a0 = simd_andc(tmp76, tmp6);
        carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(39), sequence_f0_af_adv));
        sequence_f0_af_a0 = simd_and(sequence_f0_af_adv, byte_a0);
        tmp179 = simd_and(tmp66, basis_bits.bit_6);
        tmp180 = simd_and(basis_bits.bit_3, tmp179);
        byte_range_80_9d = simd_andc(tmp95, tmp180);
        carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_f0_af_a0, carryQ.get_carry_in(40), tmp181));
        sequence_f0_af_a0_byte_range_80_9d = simd_and(tmp181, byte_range_80_9d);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_af_a0_byte_range_80_9d);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(41, 13))) {
          r80_7ff_tmp1 = simd_andc(tmp1, tmp13);
          byte_c2 = simd_and(r80_7ff_tmp1, tmp24);
          cc_range_aa_ba_2 = simd_and(tmp54, tmp109);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(41), byte_c2_adv));
          r80_7ff_tmp2 = simd_and(byte_c2_adv, cc_range_aa_ba_2);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp2);
          byte_c6 = simd_and(r80_7ff_tmp1, tmp43);
          byte_bb = simd_and(tmp83, tmp88);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(byte_c6, carryQ.get_carry_in(42), byte_c6_adv));
          r80_7ff_tmp3 = simd_and(byte_c6_adv, byte_bb);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp3);
          byte_c7 = simd_and(r80_7ff_tmp1, tmp48);
          byte_range_80_83 = simd_andc(byte_range_80_8f, tmp4);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(43), byte_c7_adv));
          r80_7ff_tmp4 = simd_and(byte_c7_adv, byte_range_80_83);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp4);
          byte_ca = simd_and(r80_7ff_tmp1, tmp54);
          byte_94 = simd_and(tmp64, tmp36);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(44), byte_ca_adv));
          r80_7ff_tmp5 = simd_and(byte_ca_adv, byte_94);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp5);
          r80_7ff_tmp6 = simd_and(tmp1, tmp8);
          byte_d7 = simd_and(r80_7ff_tmp6, tmp48);
          r80_7ff_tmp7 = simd_not(tmp57);
          r80_7ff_tmp8 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp7), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
          r80_7ff_tmp9 = simd_and(byte_range_80_bf, r80_7ff_tmp8);
          r80_7ff_tmp10 = simd_andc(tmp83, tmp4);
          r80_7ff_tmp11 = simd_andc(r80_7ff_tmp10, tmp18);
          cc_range_5d0_5f0_2 = simd_or(r80_7ff_tmp9, r80_7ff_tmp11);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(45), byte_d7_adv));
          r80_7ff_tmp12 = simd_and(byte_d7_adv, cc_range_5d0_5f0_2);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp12);
          byte_d8 = simd_and(r80_7ff_tmp6, tmp79);
          byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
          carryQ.cq[46] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(46), byte_d8_adv));
          r80_7ff_tmp13 = simd_and(byte_d8_adv, byte_range_a0_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp13);
          byte_d9 = simd_and(r80_7ff_tmp6, tmp116);
          r80_7ff_tmp14 = simd_or(simd_and(basis_bits.bit_4, tmp144), simd_andc(tmp29, basis_bits.bit_4));
          r80_7ff_tmp15 = simd_and(byte_range_80_8f, r80_7ff_tmp14);
          r80_7ff_tmp16 = simd_and(tmp76, tmp179);
          r80_7ff_tmp17 = simd_or(r80_7ff_tmp15, r80_7ff_tmp16);
          r80_7ff_tmp18 = simd_or(basis_bits.bit_4, tmp29);
          r80_7ff_tmp19 = simd_and(tmp83, r80_7ff_tmp18);
          cc_range_641_671_2 = simd_or(r80_7ff_tmp17, r80_7ff_tmp19);
          carryQ.cq[47] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(47), byte_d9_adv));
          r80_7ff_tmp20 = simd_and(byte_d9_adv, cc_range_641_671_2);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp20);
          byte_da = simd_and(r80_7ff_tmp6, tmp54);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(byte_da, carryQ.get_carry_in(48), byte_da_adv));
          r80_7ff_tmp21 = simd_and(byte_da_adv, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp21);
          byte_db = simd_and(r80_7ff_tmp6, tmp88);
          r80_7ff_tmp22 = simd_and(basis_bits.bit_3, tmp4);
          r80_7ff_tmp23 = simd_andc(tmp95, r80_7ff_tmp22);
          r80_7ff_tmp24 = simd_and(tmp35, tmp10);
          r80_7ff_tmp25 = simd_and(tmp64, r80_7ff_tmp24);
          r80_7ff_tmp26 = simd_or(r80_7ff_tmp23, r80_7ff_tmp25);
          r80_7ff_tmp27 = simd_or(r80_7ff_tmp26, r80_7ff_tmp16);
          r80_7ff_tmp28 = simd_or(simd_and(basis_bits.bit_5, tmp50), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r80_7ff_tmp29 = simd_and(tmp152, r80_7ff_tmp28);
          r80_7ff_tmp30 = simd_or(r80_7ff_tmp27, r80_7ff_tmp29);
          r80_7ff_tmp31 = simd_and(tmp83, tmp68);
          cc_range_6c0_6ff_2 = simd_or(r80_7ff_tmp30, r80_7ff_tmp31);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(49), byte_db_adv));
          r80_7ff_tmp32 = simd_and(byte_db_adv, cc_range_6c0_6ff_2);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp32);
          byte_dc = simd_and(r80_7ff_tmp6, tmp84);
          r80_7ff_tmp33 = simd_and(basis_bits.bit_3, tmp90);
          r80_7ff_tmp34 = simd_or(simd_and(basis_bits.bit_2, tmp25), simd_andc(r80_7ff_tmp33, basis_bits.bit_2));
          r80_7ff_tmp35 = simd_and(byte_range_80_bf, r80_7ff_tmp34);
          cc_range_710_712_2 = simd_or(byte_90, r80_7ff_tmp35);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(50), byte_dc_adv));
          r80_7ff_tmp36 = simd_and(byte_dc_adv, cc_range_710_712_2);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp36);
          byte_dd = simd_and(r80_7ff_tmp6, tmp67);
          r80_7ff_tmp37 = simd_and(tmp66, tmp5);
          r80_7ff_tmp38 = simd_or(basis_bits.bit_3, r80_7ff_tmp37);
          r80_7ff_tmp39 = simd_or(basis_bits.bit_2, r80_7ff_tmp38);
          byte_range_8d_bf = simd_and(byte_range_80_bf, r80_7ff_tmp39);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(51), byte_dd_adv));
          r80_7ff_tmp40 = simd_and(byte_dd_adv, byte_range_8d_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp40);
          byte_de = simd_and(r80_7ff_tmp6, tmp92);
          r80_7ff_tmp41 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r80_7ff_tmp42 = simd_or(basis_bits.bit_4, r80_7ff_tmp41);
          r80_7ff_tmp43 = simd_or(basis_bits.bit_3, r80_7ff_tmp42);
          r80_7ff_tmp44 = simd_and(basis_bits.bit_2, r80_7ff_tmp43);
          r80_7ff_tmp45 = simd_andc(byte_range_80_bf, r80_7ff_tmp44);
          r80_7ff_tmp46 = simd_and(tmp83, tmp11);
          cc_range_780_7b1_2 = simd_or(r80_7ff_tmp45, r80_7ff_tmp46);
          carryQ.cq[52] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(52), byte_de_adv));
          r80_7ff_tmp47 = simd_and(byte_de_adv, cc_range_780_7b1_2);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp47);
          byte_df = simd_and(r80_7ff_tmp6, tmp68);
          r80_7ff_tmp48 = simd_or(basis_bits.bit_3, tmp158);
          r80_7ff_tmp49 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp7), simd_andc(r80_7ff_tmp48, basis_bits.bit_2));
          byte_range_8a_aa = simd_and(byte_range_80_bf, r80_7ff_tmp49);
          carryQ.cq[53] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(53), byte_df_adv));
          r80_7ff_tmp50 = simd_and(byte_df_adv, byte_range_8a_aa);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp50);
        }
        else {
          carryQ.CarryDequeueEnqueue(41, 13);
        }
        byte_range_e0_ef = simd_and(tmp1, tmp75);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(54, 126))) {
          byte_e0 = simd_andc(byte_range_e0_ef, tmp6);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(54), r800_ffff_tmp1));
          sequence_e0_a0 = simd_and(r800_ffff_tmp1, byte_a0);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(55), byte_e0_adv));
          sequence_e0_a0 = simd_and(byte_e0_adv, byte_a0);
          r800_ffff_tmp2 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp3 = simd_or(basis_bits.bit_4, r800_ffff_tmp2);
          r800_ffff_tmp4 = simd_and(basis_bits.bit_3, r800_ffff_tmp3);
          byte_range_80_95 = simd_andc(tmp95, r800_ffff_tmp4);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(56), sequence_e0_a0_adv));
          r800_ffff_tmp5 = simd_and(sequence_e0_a0_adv, byte_range_80_95);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp5);
          byte_a1 = simd_and(tmp76, tmp11);
          sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
          sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
          byte_range_80_98 = simd_andc(tmp95, tmp80);
          carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(57), sequence_e0_a1_adv));
          r800_ffff_tmp6 = simd_and(sequence_e0_a1_adv, byte_range_80_98);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp6);
          byte_a2 = simd_and(tmp76, tmp24);
          sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
          sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
          r800_ffff_tmp7 = simd_not(tmp60);
          r800_ffff_tmp8 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp7), simd_andc(tmp157, basis_bits.bit_4));
          r800_ffff_tmp9 = simd_andc(tmp6, r800_ffff_tmp8);
          cc_range_8a0_8a2_3 = simd_andc(tmp76, r800_ffff_tmp9);
          carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e0_a2, carryQ.get_carry_in(58), sequence_e0_a2_adv));
          r800_ffff_tmp10 = simd_and(sequence_e0_a2_adv, cc_range_8a0_8a2_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp10);
          byte_a4 = simd_and(tmp76, tmp36);
          sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
          sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
          r800_ffff_tmp11 = simd_and(basis_bits.bit_3, tmp158);
          r800_ffff_tmp12 = simd_not(r800_ffff_tmp11);
          r800_ffff_tmp13 = simd_or(basis_bits.bit_3, tmp4);
          r800_ffff_tmp14 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp12), simd_andc(r800_ffff_tmp13, basis_bits.bit_2));
          r800_ffff_tmp15 = simd_and(byte_range_80_bf, r800_ffff_tmp14);
          cc_range_904_93d_3 = simd_or(r800_ffff_tmp15, byte_bd);
          carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(59), sequence_e0_a4_adv));
          r800_ffff_tmp16 = simd_and(sequence_e0_a4_adv, cc_range_904_93d_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp16);
          r800_ffff_tmp17 = simd_and(tmp35, tmp10);
          byte_a5 = simd_and(tmp76, r800_ffff_tmp17);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          r800_ffff_tmp18 = simd_or(basis_bits.bit_3, tmp90);
          r800_ffff_tmp19 = simd_not(r800_ffff_tmp18);
          r800_ffff_tmp20 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp19), simd_andc(tmp16, basis_bits.bit_2));
          r800_ffff_tmp21 = simd_and(byte_range_80_bf, r800_ffff_tmp20);
          r800_ffff_tmp22 = simd_or(byte_90, r800_ffff_tmp21);
          r800_ffff_tmp23 = simd_andc(tmp83, basis_bits.bit_4);
          r800_ffff_tmp24 = simd_and(r800_ffff_tmp23, tmp157);
          r800_ffff_tmp25 = simd_or(r800_ffff_tmp22, r800_ffff_tmp24);
          r800_ffff_tmp26 = simd_and(tmp152, tmp29);
          cc_range_950_979_3 = simd_or(r800_ffff_tmp25, r800_ffff_tmp26);
          carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(60), sequence_e0_a5_adv));
          r800_ffff_tmp27 = simd_and(sequence_e0_a5_adv, cc_range_950_979_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp27);
          byte_a6 = simd_and(tmp76, tmp43);
          sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
          sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
          r800_ffff_tmp28 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp7), simd_andc(tmp60, basis_bits.bit_4));
          r800_ffff_tmp29 = simd_and(byte_range_80_8f, r800_ffff_tmp28);
          r800_ffff_tmp30 = simd_not(tmp6);
          r800_ffff_tmp31 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp30), simd_andc(tmp68, basis_bits.bit_3));
          r800_ffff_tmp32 = simd_and(tmp95, r800_ffff_tmp31);
          r800_ffff_tmp33 = simd_or(r800_ffff_tmp29, r800_ffff_tmp32);
          r800_ffff_tmp34 = simd_or(simd_and(basis_bits.bit_2, tmp32), simd_andc(tmp44, basis_bits.bit_2));
          r800_ffff_tmp35 = simd_and(byte_range_80_bf, r800_ffff_tmp34);
          r800_ffff_tmp36 = simd_or(r800_ffff_tmp33, r800_ffff_tmp35);
          r800_ffff_tmp37 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp30), simd_andc(tmp158, basis_bits.bit_3));
          r800_ffff_tmp38 = simd_and(tmp109, r800_ffff_tmp37);
          r800_ffff_tmp39 = simd_or(r800_ffff_tmp36, r800_ffff_tmp38);
          r800_ffff_tmp40 = simd_and(tmp83, tmp24);
          r800_ffff_tmp41 = simd_or(r800_ffff_tmp39, r800_ffff_tmp40);
          r800_ffff_tmp42 = simd_or(simd_and(basis_bits.bit_4, tmp166), simd_andc(r800_ffff_tmp2, basis_bits.bit_4));
          r800_ffff_tmp43 = simd_and(tmp83, r800_ffff_tmp42);
          r800_ffff_tmp44 = simd_or(r800_ffff_tmp41, r800_ffff_tmp43);
          cc_range_985_9bd_3 = simd_or(r800_ffff_tmp44, byte_bd);
          carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(61), sequence_e0_a6_adv));
          r800_ffff_tmp45 = simd_and(sequence_e0_a6_adv, cc_range_985_9bd_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp45);
          byte_a7 = simd_and(tmp76, tmp48);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          r800_ffff_tmp46 = simd_and(byte_range_80_8f, tmp92);
          r800_ffff_tmp47 = simd_andc(tmp66, basis_bits.bit_6);
          r800_ffff_tmp48 = simd_and(tmp64, r800_ffff_tmp47);
          r800_ffff_tmp49 = simd_or(r800_ffff_tmp46, r800_ffff_tmp48);
          r800_ffff_tmp50 = simd_and(basis_bits.bit_3, tmp68);
          r800_ffff_tmp51 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp19), simd_andc(r800_ffff_tmp50, basis_bits.bit_2));
          r800_ffff_tmp52 = simd_and(byte_range_80_bf, r800_ffff_tmp51);
          r800_ffff_tmp53 = simd_or(r800_ffff_tmp49, r800_ffff_tmp52);
          r800_ffff_tmp54 = simd_andc(tmp83, tmp90);
          cc_range_9ce_9f0_3 = simd_or(r800_ffff_tmp53, r800_ffff_tmp54);
          carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(62), sequence_e0_a7_adv));
          r800_ffff_tmp55 = simd_and(sequence_e0_a7_adv, cc_range_9ce_9f0_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp55);
          sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
          sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
          r800_ffff_tmp56 = simd_or(simd_and(basis_bits.bit_4, tmp144), simd_andc(tmp60, basis_bits.bit_4));
          r800_ffff_tmp57 = simd_and(byte_range_80_8f, r800_ffff_tmp56);
          r800_ffff_tmp58 = simd_or(r800_ffff_tmp57, r800_ffff_tmp32);
          r800_ffff_tmp59 = simd_or(r800_ffff_tmp58, r800_ffff_tmp35);
          r800_ffff_tmp60 = simd_or(r800_ffff_tmp59, r800_ffff_tmp38);
          r800_ffff_tmp61 = simd_andc(basis_bits.bit_6, tmp4);
          r800_ffff_tmp62 = simd_and(tmp83, r800_ffff_tmp61);
          r800_ffff_tmp63 = simd_or(r800_ffff_tmp60, r800_ffff_tmp62);
          r800_ffff_tmp64 = simd_and(tmp114, tmp102);
          r800_ffff_tmp65 = simd_or(r800_ffff_tmp63, r800_ffff_tmp64);
          r800_ffff_tmp66 = simd_andc(tmp53, basis_bits.bit_6);
          r800_ffff_tmp67 = simd_and(tmp83, r800_ffff_tmp66);
          cc_range_a05_a38_3 = simd_or(r800_ffff_tmp65, r800_ffff_tmp67);
          carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(63), sequence_e0_a8_adv));
          r800_ffff_tmp68 = simd_and(sequence_e0_a8_adv, cc_range_a05_a38_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp68);
          byte_a9 = simd_and(tmp76, tmp116);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          r800_ffff_tmp69 = simd_and(tmp64, basis_bits.bit_4);
          r800_ffff_tmp70 = simd_and(r800_ffff_tmp69, tmp51);
          r800_ffff_tmp71 = simd_or(r800_ffff_tmp70, byte_9e);
          r800_ffff_tmp72 = simd_or(simd_and(basis_bits.bit_5, tmp50), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp73 = simd_and(r800_ffff_tmp23, r800_ffff_tmp72);
          cc_range_a59_a72_3 = simd_or(r800_ffff_tmp71, r800_ffff_tmp73);
          carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(64), sequence_e0_a9_adv));
          r800_ffff_tmp74 = simd_and(sequence_e0_a9_adv, cc_range_a59_a72_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp74);
          sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
          sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
          r800_ffff_tmp75 = simd_not(r800_ffff_tmp2);
          r800_ffff_tmp76 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp75), simd_andc(tmp60, basis_bits.bit_4));
          r800_ffff_tmp77 = simd_and(byte_range_80_8f, r800_ffff_tmp76);
          r800_ffff_tmp78 = simd_not(tmp90);
          r800_ffff_tmp79 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp78), simd_andc(tmp68, basis_bits.bit_3));
          r800_ffff_tmp80 = simd_and(tmp95, r800_ffff_tmp79);
          r800_ffff_tmp81 = simd_or(r800_ffff_tmp77, r800_ffff_tmp80);
          r800_ffff_tmp82 = simd_or(r800_ffff_tmp81, r800_ffff_tmp35);
          r800_ffff_tmp83 = simd_or(r800_ffff_tmp82, r800_ffff_tmp38);
          r800_ffff_tmp84 = simd_or(r800_ffff_tmp83, r800_ffff_tmp62);
          r800_ffff_tmp85 = simd_and(tmp83, tmp167);
          r800_ffff_tmp86 = simd_or(r800_ffff_tmp84, r800_ffff_tmp85);
          cc_range_a85_abd_3 = simd_or(r800_ffff_tmp86, byte_bd);
          carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(65), sequence_e0_aa_adv));
          r800_ffff_tmp87 = simd_and(sequence_e0_aa_adv, cc_range_a85_abd_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp87);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          r800_ffff_tmp88 = simd_andc(tmp76, tmp90);
          cc_range_ad0_ae0_3 = simd_or(byte_90, r800_ffff_tmp88);
          carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(66), sequence_e0_ab_adv));
          r800_ffff_tmp89 = simd_and(sequence_e0_ab_adv, cc_range_ad0_ae0_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp89);
          byte_ac = simd_and(tmp76, tmp84);
          sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
          sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
          r800_ffff_tmp90 = simd_or(r800_ffff_tmp39, r800_ffff_tmp62);
          r800_ffff_tmp91 = simd_or(r800_ffff_tmp90, r800_ffff_tmp85);
          cc_range_b05_b3d_3 = simd_or(r800_ffff_tmp91, byte_bd);
          carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(67), sequence_e0_ac_adv));
          r800_ffff_tmp92 = simd_and(sequence_e0_ac_adv, cc_range_b05_b3d_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp92);
          byte_ad = simd_and(tmp76, tmp67);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          r800_ffff_tmp93 = simd_or(r800_ffff_tmp48, r800_ffff_tmp52);
          r800_ffff_tmp94 = simd_and(tmp83, tmp11);
          cc_range_b5c_b71_3 = simd_or(r800_ffff_tmp93, r800_ffff_tmp94);
          carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(68), sequence_e0_ad_adv));
          r800_ffff_tmp95 = simd_and(sequence_e0_ad_adv, cc_range_b5c_b71_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp95);
          byte_ae = simd_and(tmp76, tmp92);
          sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
          sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
          r800_ffff_tmp96 = simd_or(tmp28, r800_ffff_tmp56);
          r800_ffff_tmp97 = simd_and(byte_range_80_8f, r800_ffff_tmp96);
          r800_ffff_tmp98 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp30), simd_andc(tmp179, basis_bits.bit_3));
          r800_ffff_tmp99 = simd_and(tmp95, r800_ffff_tmp98);
          r800_ffff_tmp100 = simd_or(r800_ffff_tmp97, r800_ffff_tmp99);
          r800_ffff_tmp101 = simd_andc(tmp64, basis_bits.bit_4);
          r800_ffff_tmp102 = simd_not(basis_bits.bit_6);
          r800_ffff_tmp103 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp102), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp104 = simd_and(r800_ffff_tmp101, r800_ffff_tmp103);
          r800_ffff_tmp105 = simd_or(r800_ffff_tmp100, r800_ffff_tmp104);
          r800_ffff_tmp106 = simd_and(tmp64, tmp53);
          r800_ffff_tmp107 = simd_and(r800_ffff_tmp106, tmp102);
          r800_ffff_tmp108 = simd_or(r800_ffff_tmp105, r800_ffff_tmp107);
          r800_ffff_tmp109 = simd_and(tmp64, tmp84);
          r800_ffff_tmp110 = simd_or(r800_ffff_tmp108, r800_ffff_tmp109);
          r800_ffff_tmp111 = simd_and(tmp64, tmp179);
          r800_ffff_tmp112 = simd_or(r800_ffff_tmp110, r800_ffff_tmp111);
          r800_ffff_tmp113 = simd_or(simd_and(basis_bits.bit_5, tmp50), simd_andc(tmp18, basis_bits.bit_5));
          r800_ffff_tmp114 = simd_and(byte_range_a0_a7, r800_ffff_tmp113);
          r800_ffff_tmp115 = simd_or(r800_ffff_tmp112, r800_ffff_tmp114);
          r800_ffff_tmp116 = simd_and(tmp76, tmp53);
          r800_ffff_tmp117 = simd_andc(r800_ffff_tmp116, tmp18);
          r800_ffff_tmp118 = simd_or(r800_ffff_tmp115, r800_ffff_tmp117);
          r800_ffff_tmp119 = simd_not(tmp158);
          r800_ffff_tmp120 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp119), simd_andc(tmp179, basis_bits.bit_3));
          r800_ffff_tmp121 = simd_and(tmp109, r800_ffff_tmp120);
          cc_range_b83_bae_3 = simd_or(r800_ffff_tmp118, r800_ffff_tmp121);
          carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(69), sequence_e0_ae_adv));
          r800_ffff_tmp122 = simd_and(sequence_e0_ae_adv, cc_range_b83_bae_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp122);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(70), sequence_e0_af_adv));
          r800_ffff_tmp123 = simd_and(sequence_e0_af_adv, byte_90);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp123);
          byte_b0 = simd_andc(tmp83, tmp6);
          sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
          sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
          r800_ffff_tmp124 = simd_or(r800_ffff_tmp29, r800_ffff_tmp99);
          r800_ffff_tmp125 = simd_and(basis_bits.bit_3, tmp90);
          r800_ffff_tmp126 = simd_or(simd_and(basis_bits.bit_2, tmp32), simd_andc(r800_ffff_tmp125, basis_bits.bit_2));
          r800_ffff_tmp127 = simd_and(byte_range_80_bf, r800_ffff_tmp126);
          r800_ffff_tmp128 = simd_or(r800_ffff_tmp124, r800_ffff_tmp127);
          r800_ffff_tmp129 = simd_not(tmp4);
          r800_ffff_tmp130 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp129), simd_andc(tmp158, basis_bits.bit_3));
          r800_ffff_tmp131 = simd_and(tmp109, r800_ffff_tmp130);
          r800_ffff_tmp132 = simd_or(r800_ffff_tmp128, r800_ffff_tmp131);
          r800_ffff_tmp133 = simd_or(r800_ffff_tmp132, r800_ffff_tmp85);
          cc_range_c05_c3d_3 = simd_or(r800_ffff_tmp133, byte_bd);
          carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(71), sequence_e0_b0_adv));
          r800_ffff_tmp134 = simd_and(sequence_e0_b0_adv, cc_range_c05_c3d_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp134);
          byte_b1 = simd_and(tmp83, tmp11);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          r800_ffff_tmp135 = simd_and(tmp64, r800_ffff_tmp66);
          cc_range_c58_c60_3 = simd_or(r800_ffff_tmp135, r800_ffff_tmp88);
          carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(72), sequence_e0_b1_adv));
          r800_ffff_tmp136 = simd_and(sequence_e0_b1_adv, cc_range_c58_c60_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp136);
          byte_b2 = simd_and(tmp83, tmp24);
          sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
          sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
          cc_range_c85_cbd_3 = simd_or(r800_ffff_tmp133, byte_bd);
          carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(73), sequence_e0_b2_adv));
          r800_ffff_tmp137 = simd_and(sequence_e0_b2_adv, cc_range_c85_cbd_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp137);
          byte_b3 = simd_and(tmp83, tmp28);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          r800_ffff_tmp138 = simd_or(byte_9e, r800_ffff_tmp88);
          r800_ffff_tmp139 = simd_andc(tmp83, tmp4);
          r800_ffff_tmp140 = simd_and(r800_ffff_tmp139, tmp102);
          cc_range_cde_cf1_3 = simd_or(r800_ffff_tmp138, r800_ffff_tmp140);
          carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(74), sequence_e0_b3_adv));
          r800_ffff_tmp141 = simd_and(sequence_e0_b3_adv, cc_range_cde_cf1_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp141);
          byte_b4 = simd_and(tmp83, tmp36);
          sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
          sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
          r800_ffff_tmp142 = simd_and(basis_bits.bit_3, tmp56);
          r800_ffff_tmp143 = simd_not(r800_ffff_tmp142);
          r800_ffff_tmp144 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp143), simd_andc(r800_ffff_tmp125, basis_bits.bit_2));
          r800_ffff_tmp145 = simd_and(byte_range_80_bf, r800_ffff_tmp144);
          r800_ffff_tmp146 = simd_or(r800_ffff_tmp124, r800_ffff_tmp145);
          cc_range_d05_d3d_3 = simd_or(r800_ffff_tmp146, byte_bd);
          carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(75), sequence_e0_b4_adv));
          r800_ffff_tmp147 = simd_and(sequence_e0_b4_adv, cc_range_d05_d3d_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp147);
          byte_b5 = simd_and(tmp83, r800_ffff_tmp17);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          r800_ffff_tmp148 = simd_or(r800_ffff_tmp46, r800_ffff_tmp88);
          r800_ffff_tmp149 = simd_and(tmp152, tmp157);
          cc_range_d4e_d7a_3 = simd_or(r800_ffff_tmp148, r800_ffff_tmp149);
          carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(76), sequence_e0_b5_adv));
          r800_ffff_tmp150 = simd_and(sequence_e0_b5_adv, cc_range_d4e_d7a_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp150);
          byte_b6 = simd_and(tmp83, tmp43);
          sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
          sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
          r800_ffff_tmp151 = simd_not(tmp38);
          r800_ffff_tmp152 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp151), simd_andc(tmp96, basis_bits.bit_3));
          r800_ffff_tmp153 = simd_and(tmp95, r800_ffff_tmp152);
          r800_ffff_tmp154 = simd_not(r800_ffff_tmp125);
          r800_ffff_tmp155 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp154), simd_andc(r800_ffff_tmp11, basis_bits.bit_2));
          r800_ffff_tmp156 = simd_and(byte_range_80_bf, r800_ffff_tmp155);
          r800_ffff_tmp157 = simd_or(r800_ffff_tmp153, r800_ffff_tmp156);
          r800_ffff_tmp158 = simd_not(basis_bits.bit_5);
          r800_ffff_tmp159 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp158), simd_andc(tmp55, basis_bits.bit_4));
          r800_ffff_tmp160 = simd_and(tmp83, r800_ffff_tmp159);
          r800_ffff_tmp161 = simd_or(r800_ffff_tmp157, r800_ffff_tmp160);
          cc_range_d85_dbd_3 = simd_or(r800_ffff_tmp161, byte_bd);
          carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(77), sequence_e0_b6_adv));
          r800_ffff_tmp162 = simd_and(sequence_e0_b6_adv, cc_range_d85_dbd_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp162);
          byte_b7 = simd_and(tmp83, tmp48);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          byte_range_80_86 = simd_andc(tmp86, tmp37);
          carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(78), sequence_e0_b7_adv));
          r800_ffff_tmp163 = simd_and(sequence_e0_b7_adv, byte_range_80_86);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp163);
          sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
          sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
          r800_ffff_tmp164 = simd_and(basis_bits.bit_3, tmp6);
          r800_ffff_tmp165 = simd_not(r800_ffff_tmp164);
          r800_ffff_tmp166 = simd_or(basis_bits.bit_3, tmp6);
          r800_ffff_tmp167 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp165), simd_andc(r800_ffff_tmp166, basis_bits.bit_2));
          r800_ffff_tmp168 = simd_and(byte_range_80_bf, r800_ffff_tmp167);
          cc_range_e01_e32_3 = simd_or(r800_ffff_tmp168, r800_ffff_tmp62);
          carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(79), sequence_e0_b8_adv));
          r800_ffff_tmp169 = simd_and(sequence_e0_b8_adv, cc_range_e01_e32_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp169);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          byte_range_80_85 = simd_andc(tmp86, r800_ffff_tmp2);
          carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(80), sequence_e0_b9_adv));
          r800_ffff_tmp170 = simd_and(sequence_e0_b9_adv, byte_range_80_85);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp170);
          sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
          sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
          r800_ffff_tmp171 = simd_and(tmp94, tmp102);
          r800_ffff_tmp172 = simd_and(byte_range_80_8f, tmp36);
          r800_ffff_tmp173 = simd_or(r800_ffff_tmp171, r800_ffff_tmp172);
          r800_ffff_tmp174 = simd_not(tmp29);
          r800_ffff_tmp175 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp174), simd_andc(tmp37, basis_bits.bit_4));
          r800_ffff_tmp176 = simd_and(byte_range_80_8f, r800_ffff_tmp175);
          r800_ffff_tmp177 = simd_or(r800_ffff_tmp173, r800_ffff_tmp176);
          r800_ffff_tmp178 = simd_and(byte_range_80_8f, tmp54);
          r800_ffff_tmp179 = simd_or(r800_ffff_tmp177, r800_ffff_tmp178);
          r800_ffff_tmp180 = simd_and(byte_range_80_8f, tmp67);
          r800_ffff_tmp181 = simd_or(r800_ffff_tmp179, r800_ffff_tmp180);
          r800_ffff_tmp182 = simd_and(tmp64, tmp35);
          r800_ffff_tmp183 = simd_or(r800_ffff_tmp181, r800_ffff_tmp182);
          r800_ffff_tmp184 = simd_and(r800_ffff_tmp69, tmp29);
          r800_ffff_tmp185 = simd_or(r800_ffff_tmp183, r800_ffff_tmp184);
          r800_ffff_tmp186 = simd_or(r800_ffff_tmp185, tmp164);
          r800_ffff_tmp187 = simd_or(r800_ffff_tmp186, byte_a5);
          r800_ffff_tmp188 = simd_or(r800_ffff_tmp187, byte_a7);
          r800_ffff_tmp189 = simd_and(tmp53, basis_bits.bit_6);
          r800_ffff_tmp190 = simd_and(tmp76, r800_ffff_tmp189);
          r800_ffff_tmp191 = simd_or(r800_ffff_tmp188, r800_ffff_tmp190);
          r800_ffff_tmp192 = simd_and(tmp66, tmp5);
          r800_ffff_tmp193 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp30), simd_andc(r800_ffff_tmp192, basis_bits.bit_3));
          r800_ffff_tmp194 = simd_and(tmp109, r800_ffff_tmp193);
          r800_ffff_tmp195 = simd_or(r800_ffff_tmp191, r800_ffff_tmp194);
          r800_ffff_tmp196 = simd_or(r800_ffff_tmp195, r800_ffff_tmp62);
          cc_range_e81_ebd_3 = simd_or(r800_ffff_tmp196, byte_bd);
          carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(81), sequence_e0_ba_adv));
          r800_ffff_tmp197 = simd_and(sequence_e0_ba_adv, cc_range_e81_ebd_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp197);
          byte_bb = simd_and(tmp83, tmp88);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          r800_ffff_tmp198 = simd_and(tmp64, tmp66);
          cc_range_ec0_edc_3 = simd_or(byte_range_80_84, r800_ffff_tmp198);
          carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(82), sequence_e0_bb_adv));
          r800_ffff_tmp199 = simd_and(sequence_e0_bb_adv, cc_range_ec0_edc_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp199);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(83), sequence_e0_bc_adv));
          r800_ffff_tmp200 = simd_and(sequence_e0_bc_adv, byte_80);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp200);
          sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
          sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
          r800_ffff_tmp201 = simd_or(basis_bits.bit_3, r800_ffff_tmp192);
          r800_ffff_tmp202 = simd_not(r800_ffff_tmp201);
          r800_ffff_tmp203 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp202), simd_andc(tmp31, basis_bits.bit_2));
          r800_ffff_tmp204 = simd_and(byte_range_80_bf, r800_ffff_tmp203);
          cc_range_f40_f49_3 = simd_or(tmp86, r800_ffff_tmp204);
          carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(84), sequence_e0_bd_adv));
          r800_ffff_tmp205 = simd_and(sequence_e0_bd_adv, cc_range_f40_f49_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp205);
          byte_be = simd_and(tmp83, tmp92);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          r800_ffff_tmp206 = simd_and(byte_range_80_8f, basis_bits.bit_4);
          byte_range_88_8c = simd_andc(r800_ffff_tmp206, tmp60);
          carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(85), sequence_e0_be_adv));
          r800_ffff_tmp207 = simd_and(sequence_e0_be_adv, byte_range_88_8c);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp207);
          byte_e1 = simd_and(byte_range_e0_ef, tmp11);
          carryQ.cq[86] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(86), r800_ffff_tmp208));
          sequence_e1_80 = simd_and(r800_ffff_tmp208, byte_80);
          carryQ.cq[87] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(87), byte_e1_adv));
          sequence_e1_80 = simd_and(byte_e1_adv, byte_80);
          r800_ffff_tmp209 = simd_andc(byte_range_80_bf, tmp58);
          r800_ffff_tmp210 = simd_and(tmp83, tmp68);
          cc_range_1000_103f_3 = simd_or(r800_ffff_tmp209, r800_ffff_tmp210);
          carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(88), sequence_e1_80_adv));
          r800_ffff_tmp211 = simd_and(sequence_e1_80_adv, cc_range_1000_103f_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp211);
          byte_81 = simd_and(byte_range_80_8f, tmp11);
          sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
          sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
          r800_ffff_tmp212 = simd_andc(r800_ffff_tmp101, r800_ffff_tmp2);
          r800_ffff_tmp213 = simd_and(r800_ffff_tmp69, r800_ffff_tmp103);
          r800_ffff_tmp214 = simd_or(r800_ffff_tmp212, r800_ffff_tmp213);
          r800_ffff_tmp215 = simd_or(r800_ffff_tmp214, byte_a1);
          r800_ffff_tmp216 = simd_and(tmp76, tmp35);
          r800_ffff_tmp217 = simd_and(r800_ffff_tmp216, tmp102);
          r800_ffff_tmp218 = simd_or(r800_ffff_tmp215, r800_ffff_tmp217);
          r800_ffff_tmp219 = simd_and(tmp109, r800_ffff_tmp98);
          r800_ffff_tmp220 = simd_or(r800_ffff_tmp218, r800_ffff_tmp219);
          r800_ffff_tmp221 = simd_and(tmp83, tmp96);
          cc_range_1050_1075_3 = simd_or(r800_ffff_tmp220, r800_ffff_tmp221);
          carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(89), sequence_e1_81_adv));
          r800_ffff_tmp222 = simd_and(sequence_e1_81_adv, cc_range_1050_1075_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp222);
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          r800_ffff_tmp223 = simd_andc(tmp90, tmp92);
          cc_range_1080_108e_3 = simd_andc(byte_range_80_8f, r800_ffff_tmp223);
          carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(90), sequence_e1_82_adv));
          r800_ffff_tmp224 = simd_and(sequence_e1_82_adv, cc_range_1080_108e_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp224);
          sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
          sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
          r800_ffff_tmp225 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp143), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
          r800_ffff_tmp226 = simd_and(byte_range_80_bf, r800_ffff_tmp225);
          r800_ffff_tmp227 = simd_and(tmp83, tmp66);
          r800_ffff_tmp228 = simd_and(r800_ffff_tmp227, tmp5);
          cc_range_10d0_10fd_3 = simd_or(r800_ffff_tmp226, r800_ffff_tmp228);
          carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(91), sequence_e1_83_adv));
          r800_ffff_tmp229 = simd_and(sequence_e1_83_adv, cc_range_10d0_10fd_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp229);
          r800_ffff_tmp230 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp174), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          byte_range_84_88 = simd_and(byte_range_80_8f, r800_ffff_tmp230);
          byte_e1_byte_range_84_88 = simd_and(byte_e1_adv, byte_range_84_88);
          carryQ.cq[92] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_84_88, carryQ.get_carry_in(92), r800_ffff_tmp231));
          byte_e1_byte_range_84_88_sfx = simd_and(r800_ffff_tmp231, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, byte_e1_byte_range_84_88_sfx);
          byte_89 = simd_and(byte_range_80_8f, tmp116);
          sequence_e1_89 = simd_and(byte_e1_adv, byte_89);
          byte_range_80_88 = simd_andc(byte_range_80_8f, tmp30);
          carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e1_89, carryQ.get_carry_in(93), r800_ffff_tmp232));
          sequence_e1_89_byte_range_80_88 = simd_and(r800_ffff_tmp232, byte_range_80_88);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_89_byte_range_80_88);
          byte_8a = simd_and(byte_range_80_8f, tmp54);
          sequence_e1_8a = simd_and(byte_e1_adv, byte_8a);
          carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_e1_8a, carryQ.get_carry_in(94), r800_ffff_tmp233));
          sequence_e1_8a_byte_range_80_88 = simd_and(r800_ffff_tmp233, byte_range_80_88);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_8a_byte_range_80_88);
          byte_8b = simd_and(byte_range_80_8f, tmp88);
          sequence_e1_8b = simd_and(byte_e1_adv, byte_8b);
          carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_e1_8b, carryQ.get_carry_in(95), r800_ffff_tmp234));
          sequence_e1_8b_80 = simd_and(r800_ffff_tmp234, byte_80);
          byte_8c = simd_and(byte_range_80_8f, tmp84);
          sequence_e1_8c = simd_and(byte_e1_adv, byte_8c);
          byte_range_80_90 = simd_andc(tmp95, r800_ffff_tmp164);
          carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_e1_8c, carryQ.get_carry_in(96), r800_ffff_tmp235));
          sequence_e1_8c_byte_range_80_90 = simd_and(r800_ffff_tmp235, byte_range_80_90);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_8c_byte_range_80_90);
          sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
          byte_range_80_9a = simd_andc(tmp95, r800_ffff_tmp142);
          carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(97), r800_ffff_tmp236));
          sequence_e1_8d_byte_range_80_9a = simd_and(r800_ffff_tmp236, byte_range_80_9a);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_8d_byte_range_80_9a);
          byte_8e = simd_and(byte_range_80_8f, tmp92);
          sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
          carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(98), r800_ffff_tmp237));
          sequence_e1_8e_byte_range_80_8f = simd_and(r800_ffff_tmp237, byte_range_80_8f);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_8e_byte_range_80_8f);
          byte_8f = simd_and(byte_range_80_8f, tmp68);
          sequence_e1_8f = simd_and(byte_e1_adv, byte_8f);
          carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_e1_8f, carryQ.get_carry_in(99), r800_ffff_tmp238));
          sequence_e1_8f_byte_range_80_b4 = simd_and(r800_ffff_tmp238, byte_range_80_b4);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_8f_byte_range_80_b4);
          sequence_e1_90 = simd_and(byte_e1_adv, byte_90);
          r800_ffff_tmp239 = simd_or(basis_bits.bit_2, r800_ffff_tmp166);
          byte_range_81_bf = simd_and(byte_range_80_bf, r800_ffff_tmp239);
          carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_e1_90, carryQ.get_carry_in(100), r800_ffff_tmp240));
          sequence_e1_90_byte_range_81_bf = simd_and(r800_ffff_tmp240, byte_range_81_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_90_byte_range_81_bf);
          sequence_e1_91 = simd_and(byte_e1_adv, byte_91);
          carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_e1_91, carryQ.get_carry_in(101), r800_ffff_tmp241));
          sequence_e1_91_byte_range_80_bf = simd_and(r800_ffff_tmp241, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_91_byte_range_80_bf);
          byte_99 = simd_and(tmp64, tmp116);
          sequence_e1_99 = simd_and(byte_e1_adv, byte_99);
          r800_ffff_tmp242 = simd_and(basis_bits.bit_2, r800_ffff_tmp201);
          byte_range_80_ac = simd_andc(byte_range_80_bf, r800_ffff_tmp242);
          carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_e1_99, carryQ.get_carry_in(102), r800_ffff_tmp243));
          sequence_e1_99_byte_range_80_ac = simd_and(r800_ffff_tmp243, byte_range_80_ac);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_99_byte_range_80_ac);
          sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
          r800_ffff_tmp244 = simd_not(tmp56);
          r800_ffff_tmp245 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp244), simd_andc(tmp6, basis_bits.bit_3));
          byte_range_81_9a = simd_and(tmp95, r800_ffff_tmp245);
          carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(103), r800_ffff_tmp246));
          sequence_e1_9a_byte_range_81_9a = simd_and(r800_ffff_tmp246, byte_range_81_9a);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_9a_byte_range_81_9a);
          sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
          carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(104), r800_ffff_tmp247));
          sequence_e1_9b_byte_range_80_aa = simd_and(r800_ffff_tmp247, byte_range_80_aa);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_9b_byte_range_80_aa);
          byte_9c = simd_and(tmp64, tmp84);
          sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
          carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(105), r800_ffff_tmp248));
          sequence_e1_9c_byte_range_80_8c = simd_and(r800_ffff_tmp248, byte_range_80_8c);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_9c_byte_range_80_8c);
          byte_9d = simd_and(tmp64, tmp67);
          sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
          byte_range_80_91 = simd_andc(tmp95, r800_ffff_tmp125);
          carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(106), r800_ffff_tmp249));
          sequence_e1_9d_byte_range_80_91 = simd_and(r800_ffff_tmp249, byte_range_80_91);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_9d_byte_range_80_91);
          sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
          r800_ffff_tmp250 = simd_and(basis_bits.bit_3, tmp4);
          r800_ffff_tmp251 = simd_and(basis_bits.bit_2, r800_ffff_tmp250);
          byte_range_80_b3 = simd_andc(byte_range_80_bf, r800_ffff_tmp251);
          carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(107), r800_ffff_tmp252));
          sequence_e1_9e_byte_range_80_b3 = simd_and(r800_ffff_tmp252, byte_range_80_b3);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_9e_byte_range_80_b3);
          byte_9f = simd_and(tmp64, tmp68);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(108), r800_ffff_tmp253));
          sequence_e1_9f_9c = simd_and(r800_ffff_tmp253, byte_9c);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
          carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(109), r800_ffff_tmp254));
          sequence_e1_a0_byte_range_a0_bf = simd_and(r800_ffff_tmp254, byte_range_a0_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a0_byte_range_a0_bf);
          sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
          byte_range_80_82 = simd_andc(tmp94, tmp18);
          carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(110), r800_ffff_tmp255));
          sequence_e1_a1_byte_range_80_82 = simd_and(r800_ffff_tmp255, byte_range_80_82);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a1_byte_range_80_82);
          sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
          r800_ffff_tmp256 = simd_and(basis_bits.bit_2, tmp31);
          byte_range_80_a8 = simd_andc(byte_range_80_bf, r800_ffff_tmp256);
          carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(111), r800_ffff_tmp257));
          sequence_e1_a2_byte_range_80_a8 = simd_and(r800_ffff_tmp257, byte_range_80_a8);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a2_byte_range_80_a8);
          byte_a3 = simd_and(tmp76, tmp28);
          sequence_e1_a3 = simd_and(byte_e1_adv, byte_a3);
          r800_ffff_tmp258 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
          byte_range_80_b5 = simd_andc(byte_range_80_bf, r800_ffff_tmp258);
          carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_e1_a3, carryQ.get_carry_in(112), r800_ffff_tmp259));
          sequence_e1_a3_byte_range_80_b5 = simd_and(r800_ffff_tmp259, byte_range_80_b5);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a3_byte_range_80_b5);
          sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
          r800_ffff_tmp260 = simd_and(basis_bits.bit_3, r800_ffff_tmp192);
          byte_range_80_9c = simd_andc(tmp95, r800_ffff_tmp260);
          carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(113), r800_ffff_tmp261));
          sequence_e1_a4_byte_range_80_9c = simd_and(r800_ffff_tmp261, byte_range_80_9c);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a4_byte_range_80_9c);
          sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
          r800_ffff_tmp262 = simd_or(basis_bits.bit_3, tmp179);
          r800_ffff_tmp263 = simd_not(r800_ffff_tmp262);
          r800_ffff_tmp264 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp263), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
          byte_range_90_ad = simd_and(byte_range_80_bf, r800_ffff_tmp264);
          carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(114), r800_ffff_tmp265));
          sequence_e1_a5_byte_range_90_ad = simd_and(r800_ffff_tmp265, byte_range_90_ad);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a5_byte_range_90_ad);
          sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
          r800_ffff_tmp266 = simd_or(basis_bits.bit_3, tmp66);
          r800_ffff_tmp267 = simd_and(basis_bits.bit_2, r800_ffff_tmp266);
          byte_range_80_ab = simd_andc(byte_range_80_bf, r800_ffff_tmp267);
          carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(115), r800_ffff_tmp268));
          sequence_e1_a6_byte_range_80_ab = simd_and(r800_ffff_tmp268, byte_range_80_ab);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a6_byte_range_80_ab);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          byte_range_81_87 = simd_and(tmp86, tmp29);
          carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(116), r800_ffff_tmp269));
          sequence_e1_a7_byte_range_81_87 = simd_and(r800_ffff_tmp269, byte_range_81_87);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a7_byte_range_81_87);
          sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
          carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(117), r800_ffff_tmp270));
          sequence_e1_a8_byte_range_80_96 = simd_and(r800_ffff_tmp270, byte_range_80_96);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a8_byte_range_80_96);
          sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
          byte_range_80_94 = simd_andc(tmp95, tmp176);
          carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(118), r800_ffff_tmp271));
          sequence_e1_a9_byte_range_80_94 = simd_and(r800_ffff_tmp271, byte_range_80_94);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a9_byte_range_80_94);
          sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
          r800_ffff_tmp272 = simd_not(r800_ffff_tmp250);
          r800_ffff_tmp273 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp272), simd_andc(tmp97, basis_bits.bit_2));
          byte_range_85_b3 = simd_and(byte_range_80_bf, r800_ffff_tmp273);
          carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(119), r800_ffff_tmp274));
          sequence_e1_ac_byte_range_85_b3 = simd_and(r800_ffff_tmp274, byte_range_85_b3);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_ac_byte_range_85_b3);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          r800_ffff_tmp275 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp158), simd_andc(tmp60, basis_bits.bit_4));
          byte_range_85_8b = simd_and(byte_range_80_8f, r800_ffff_tmp275);
          carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(120), r800_ffff_tmp276));
          sequence_e1_ad_byte_range_85_8b = simd_and(r800_ffff_tmp276, byte_range_85_8b);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_ad_byte_range_85_8b);
          sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
          r800_ffff_tmp277 = simd_not(r800_ffff_tmp166);
          r800_ffff_tmp278 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp277), simd_andc(tmp20, basis_bits.bit_2));
          byte_range_83_a0 = simd_and(byte_range_80_bf, r800_ffff_tmp278);
          carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(121), r800_ffff_tmp279));
          sequence_e1_ae_byte_range_83_a0 = simd_and(r800_ffff_tmp279, byte_range_83_a0);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_ae_byte_range_83_a0);
          sequence_e1_af = simd_and(byte_e1_adv, byte_af);
          r800_ffff_tmp280 = simd_or(basis_bits.bit_3, r800_ffff_tmp3);
          r800_ffff_tmp281 = simd_and(basis_bits.bit_2, r800_ffff_tmp280);
          byte_range_80_a5 = simd_andc(byte_range_80_bf, r800_ffff_tmp281);
          carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(122), r800_ffff_tmp282));
          sequence_e1_af_byte_range_80_a5 = simd_and(r800_ffff_tmp282, byte_range_80_a5);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_af_byte_range_80_a5);
          sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
          r800_ffff_tmp283 = simd_and(basis_bits.bit_2, r800_ffff_tmp13);
          byte_range_80_a3 = simd_andc(byte_range_80_bf, r800_ffff_tmp283);
          carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(123), r800_ffff_tmp284));
          sequence_e1_b0_byte_range_80_a3 = simd_and(r800_ffff_tmp284, byte_range_80_a3);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_b0_byte_range_80_a3);
          sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
          byte_range_8d_8f = simd_and(tmp125, tmp5);
          carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(124), r800_ffff_tmp285));
          sequence_e1_b1_byte_range_8d_8f = simd_and(r800_ffff_tmp285, byte_range_8d_8f);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_b1_byte_range_8d_8f);
          sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
          r800_ffff_tmp286 = simd_and(tmp76, basis_bits.bit_4);
          byte_range_a9_ac = simd_and(r800_ffff_tmp286, tmp51);
          carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(125), r800_ffff_tmp287));
          sequence_e1_b3_byte_range_a9_ac = simd_and(r800_ffff_tmp287, byte_range_a9_ac);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_b3_byte_range_a9_ac);
          byte_e2 = simd_and(byte_range_e0_ef, tmp24);
          carryQ.cq[126] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(126), r800_ffff_tmp288));
          sequence_e2_84 = simd_and(r800_ffff_tmp288, byte_84);
          carryQ.cq[127] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(127), byte_e2_adv));
          sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
          r800_ffff_tmp289 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp174), simd_andc(tmp60, basis_bits.bit_4));
          byte_range_b5_b8 = simd_and(tmp83, r800_ffff_tmp289);
          carryQ.cq[128] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(128), sequence_e2_84_adv));
          r800_ffff_tmp290 = simd_and(sequence_e2_84_adv, byte_range_b5_b8);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp290);
          sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
          sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
          byte_range_b0_bf = simd_and(byte_range_80_bf, tmp2);
          carryQ.cq[129] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(129), sequence_e2_b4_adv));
          r800_ffff_tmp291 = simd_and(sequence_e2_b4_adv, byte_range_b0_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp291);
          sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
          sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
          r800_ffff_tmp292 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
          r800_ffff_tmp293 = simd_and(basis_bits.bit_2, r800_ffff_tmp292);
          byte_range_80_a7 = simd_andc(byte_range_80_bf, r800_ffff_tmp293);
          carryQ.cq[130] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(130), sequence_e2_b5_adv));
          r800_ffff_tmp294 = simd_and(sequence_e2_b5_adv, byte_range_80_a7);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp294);
          sequence_e2_b6 = simd_and(byte_e2_adv, byte_b6);
          sequence_e2_b6 = simd_and(byte_e2_adv, byte_b6);
          r800_ffff_tmp295 = simd_andc(byte_range_a0_a7, tmp37);
          r800_ffff_tmp296 = simd_or(byte_range_80_96, r800_ffff_tmp295);
          r800_ffff_tmp297 = simd_andc(r800_ffff_tmp286, tmp37);
          r800_ffff_tmp298 = simd_or(r800_ffff_tmp296, r800_ffff_tmp297);
          r800_ffff_tmp299 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
          r800_ffff_tmp300 = simd_andc(r800_ffff_tmp299, tmp37);
          r800_ffff_tmp301 = simd_or(r800_ffff_tmp298, r800_ffff_tmp300);
          r800_ffff_tmp302 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
          r800_ffff_tmp303 = simd_andc(r800_ffff_tmp302, tmp37);
          cc_range_2d80_2db8_3 = simd_or(r800_ffff_tmp301, r800_ffff_tmp303);
          carryQ.cq[131] = carryout2carry(pablo_blk_Advance(sequence_e2_b6, carryQ.get_carry_in(131), sequence_e2_b6_adv));
          r800_ffff_tmp304 = simd_and(sequence_e2_b6_adv, cc_range_2d80_2db8_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp304);
          sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
          sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
          r800_ffff_tmp305 = simd_or(byte_range_80_8f, r800_ffff_tmp101);
          r800_ffff_tmp306 = simd_or(r800_ffff_tmp305, r800_ffff_tmp69);
          cc_range_2dc0_2dd8_3 = simd_andc(r800_ffff_tmp306, tmp37);
          carryQ.cq[132] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(132), sequence_e2_b7_adv));
          r800_ffff_tmp307 = simd_and(sequence_e2_b7_adv, cc_range_2dc0_2dd8_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp307);
          byte_e3 = simd_and(byte_range_e0_ef, tmp28);
          carryQ.cq[133] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(133), r800_ffff_tmp308));
          sequence_e3_80 = simd_and(r800_ffff_tmp308, byte_80);
          carryQ.cq[134] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(134), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          r800_ffff_tmp309 = simd_and(byte_range_80_8f, tmp43);
          r800_ffff_tmp310 = simd_and(byte_range_b0_bf, tmp84);
          cc_range_3006_303c_3 = simd_or(r800_ffff_tmp309, r800_ffff_tmp310);
          carryQ.cq[135] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(135), sequence_e3_80_adv));
          r800_ffff_tmp311 = simd_and(sequence_e3_80_adv, cc_range_3006_303c_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp311);
          sequence_e3_81 = simd_and(byte_e3_adv, byte_81);
          sequence_e3_81 = simd_and(byte_e3_adv, byte_81);
          carryQ.cq[136] = carryout2carry(pablo_blk_Advance(sequence_e3_81, carryQ.get_carry_in(136), sequence_e3_81_adv));
          r800_ffff_tmp312 = simd_and(sequence_e3_81_adv, byte_range_81_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp312);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          r800_ffff_tmp313 = simd_or(byte_range_80_96, byte_9f);
          r800_ffff_tmp314 = simd_and(byte_range_a0_bf, r800_ffff_tmp166);
          cc_range_3080_30a1_3 = simd_or(r800_ffff_tmp313, r800_ffff_tmp314);
          carryQ.cq[137] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(137), sequence_e3_82_adv));
          r800_ffff_tmp315 = simd_and(sequence_e3_82_adv, cc_range_3080_30a1_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp315);
          sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
          sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
          r800_ffff_tmp316 = simd_and(basis_bits.bit_2, r800_ffff_tmp142);
          r800_ffff_tmp317 = simd_andc(byte_range_80_bf, r800_ffff_tmp316);
          r800_ffff_tmp318 = simd_and(byte_range_b0_bf, tmp68);
          cc_range_30c0_30ff_3 = simd_or(r800_ffff_tmp317, r800_ffff_tmp318);
          carryQ.cq[138] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(138), sequence_e3_83_adv));
          r800_ffff_tmp319 = simd_and(sequence_e3_83_adv, cc_range_30c0_30ff_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp319);
          sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
          sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
          r800_ffff_tmp320 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp263), simd_andc(tmp97, basis_bits.bit_2));
          r800_ffff_tmp321 = simd_and(byte_range_80_bf, r800_ffff_tmp320);
          r800_ffff_tmp322 = simd_or(basis_bits.bit_4, tmp29);
          r800_ffff_tmp323 = simd_and(byte_range_b0_bf, r800_ffff_tmp322);
          cc_range_3105_3131_3 = simd_or(r800_ffff_tmp321, r800_ffff_tmp323);
          carryQ.cq[139] = carryout2carry(pablo_blk_Advance(sequence_e3_84, carryQ.get_carry_in(139), sequence_e3_84_adv));
          r800_ffff_tmp324 = simd_and(sequence_e3_84_adv, cc_range_3105_3131_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp324);
          byte_85 = simd_and(byte_range_80_8f, r800_ffff_tmp17);
          sequence_e3_85 = simd_and(byte_e3_adv, byte_85);
          sequence_e3_85 = simd_and(byte_e3_adv, byte_85);
          carryQ.cq[140] = carryout2carry(pablo_blk_Advance(sequence_e3_85, carryQ.get_carry_in(140), sequence_e3_85_adv));
          r800_ffff_tmp325 = simd_and(sequence_e3_85_adv, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp325);
          sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
          sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
          r800_ffff_tmp326 = simd_and(basis_bits.bit_4, tmp37);
          r800_ffff_tmp327 = simd_andc(byte_range_80_8f, r800_ffff_tmp326);
          r800_ffff_tmp328 = simd_andc(byte_range_a0_bf, r800_ffff_tmp142);
          cc_range_3180_31a0_3 = simd_or(r800_ffff_tmp327, r800_ffff_tmp328);
          carryQ.cq[141] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(141), sequence_e3_86_adv));
          r800_ffff_tmp329 = simd_and(sequence_e3_86_adv, cc_range_3180_31a0_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp329);
          sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
          sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
          carryQ.cq[142] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(142), sequence_e3_87_adv));
          r800_ffff_tmp330 = simd_and(sequence_e3_87_adv, byte_range_b0_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp330);
          byte_range_90_bf = simd_and(byte_range_80_bf, tmp13);
          byte_e3_byte_range_90_bf = simd_and(byte_e3_adv, byte_range_90_bf);
          carryQ.cq[143] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_90_bf, carryQ.get_carry_in(143), r800_ffff_tmp331));
          byte_e3_byte_range_90_bf_sfx = simd_and(r800_ffff_tmp331, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, byte_e3_byte_range_90_bf_sfx);
          byte_e4 = simd_and(byte_range_e0_ef, tmp36);
          carryQ.cq[144] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(144), r800_ffff_tmp332));
          byte_e4_byte_range_80_b5 = simd_and(r800_ffff_tmp332, byte_range_80_b5);
          carryQ.cq[145] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_80_b5, carryQ.get_carry_in(145), r800_ffff_tmp333));
          byte_e4_byte_range_80_b5_sfx = simd_and(r800_ffff_tmp333, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, byte_e4_byte_range_80_b5_sfx);
          carryQ.cq[146] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(146), byte_e4_adv));
          sequence_e4_b6 = simd_and(byte_e4_adv, byte_b6);
          carryQ.cq[147] = carryout2carry(pablo_blk_Advance(sequence_e4_b6, carryQ.get_carry_in(147), r800_ffff_tmp334));
          sequence_e4_b6_byte_range_80_b5 = simd_and(r800_ffff_tmp334, byte_range_80_b5);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e4_b6_byte_range_80_b5);
          sequence_e4_b8 = simd_and(byte_e4_adv, byte_b8);
          carryQ.cq[148] = carryout2carry(pablo_blk_Advance(sequence_e4_b8, carryQ.get_carry_in(148), r800_ffff_tmp335));
          sequence_e4_b8_byte_range_80_bf = simd_and(r800_ffff_tmp335, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e4_b8_byte_range_80_bf);
          byte_range_e5_e8 = simd_and(byte_range_e0_ef, r800_ffff_tmp289);
          carryQ.cq[149] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8, carryQ.get_carry_in(149), r800_ffff_tmp336));
          byte_range_e5_e8_sfx = simd_and(r800_ffff_tmp336, byte_range_80_bf);
          carryQ.cq[150] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8_sfx, carryQ.get_carry_in(150), r800_ffff_tmp337));
          byte_range_e5_e8_sfx_sfx = simd_and(r800_ffff_tmp337, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, byte_range_e5_e8_sfx_sfx);
          byte_e9 = simd_and(byte_range_e0_ef, tmp116);
          carryQ.cq[151] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(151), byte_e9_adv));
          sequence_e9_80 = simd_and(byte_e9_adv, byte_80);
          carryQ.cq[152] = carryout2carry(pablo_blk_Advance(sequence_e9_80, carryQ.get_carry_in(152), r800_ffff_tmp338));
          sequence_e9_80_byte_range_80_8c = simd_and(r800_ffff_tmp338, byte_range_80_8c);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e9_80_byte_range_80_8c);
          byte_ea = simd_and(byte_range_e0_ef, tmp54);
          carryQ.cq[153] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(153), byte_ea_adv));
          sequence_ea_80 = simd_and(byte_ea_adv, byte_80);
          carryQ.cq[154] = carryout2carry(pablo_blk_Advance(sequence_ea_80, carryQ.get_carry_in(154), r800_ffff_tmp339));
          sequence_ea_80_byte_range_80_94 = simd_and(r800_ffff_tmp339, byte_range_80_94);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ea_80_byte_range_80_94);
          byte_eb = simd_and(byte_range_e0_ef, tmp88);
          carryQ.cq[155] = carryout2carry(pablo_blk_Advance(byte_eb, carryQ.get_carry_in(155), byte_eb_adv));
          sequence_eb_80 = simd_and(byte_eb_adv, byte_80);
          carryQ.cq[156] = carryout2carry(pablo_blk_Advance(sequence_eb_80, carryQ.get_carry_in(156), r800_ffff_tmp340));
          sequence_eb_80_byte_range_80_bf = simd_and(r800_ffff_tmp340, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_eb_80_byte_range_80_bf);
          byte_ed = simd_and(byte_range_e0_ef, tmp67);
          carryQ.cq[157] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(157), byte_ed_adv));
          sequence_ed_80 = simd_and(byte_ed_adv, byte_80);
          carryQ.cq[158] = carryout2carry(pablo_blk_Advance(sequence_ed_80, carryQ.get_carry_in(158), r800_ffff_tmp341));
          sequence_ed_80_byte_range_80_a3 = simd_and(r800_ffff_tmp341, byte_range_80_a3);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ed_80_byte_range_80_a3);
          byte_ef = simd_and(byte_range_e0_ef, tmp68);
          byte_range_a4_a8 = simd_and(tmp76, r800_ffff_tmp230);
          carryQ.cq[159] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(159), r800_ffff_tmp342));
          byte_ef_byte_range_a4_a8 = simd_and(r800_ffff_tmp342, byte_range_a4_a8);
          carryQ.cq[160] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_a4_a8, carryQ.get_carry_in(160), r800_ffff_tmp343));
          byte_ef_byte_range_a4_a8_sfx = simd_and(r800_ffff_tmp343, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, byte_ef_byte_range_a4_a8_sfx);
          carryQ.cq[161] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(161), byte_ef_adv));
          sequence_ef_a9 = simd_and(byte_ef_adv, byte_a9);
          r800_ffff_tmp344 = simd_and(basis_bits.bit_2, r800_ffff_tmp262);
          byte_range_80_ad = simd_andc(byte_range_80_bf, r800_ffff_tmp344);
          carryQ.cq[162] = carryout2carry(pablo_blk_Advance(sequence_ef_a9, carryQ.get_carry_in(162), r800_ffff_tmp345));
          sequence_ef_a9_byte_range_80_ad = simd_and(r800_ffff_tmp345, byte_range_80_ad);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_a9_byte_range_80_ad);
          sequence_ef_aa = simd_and(byte_ef_adv, byte_aa);
          carryQ.cq[163] = carryout2carry(pablo_blk_Advance(sequence_ef_aa, carryQ.get_carry_in(163), r800_ffff_tmp346));
          sequence_ef_aa_byte_range_80_bf = simd_and(r800_ffff_tmp346, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_aa_byte_range_80_bf);
          sequence_ef_ab = simd_and(byte_ef_adv, byte_ab);
          byte_range_80_99 = simd_andc(tmp95, r800_ffff_tmp11);
          carryQ.cq[164] = carryout2carry(pablo_blk_Advance(sequence_ef_ab, carryQ.get_carry_in(164), r800_ffff_tmp347));
          sequence_ef_ab_byte_range_80_99 = simd_and(r800_ffff_tmp347, byte_range_80_99);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_ab_byte_range_80_99);
          sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
          carryQ.cq[165] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(165), r800_ffff_tmp348));
          sequence_ef_ac_9d = simd_and(r800_ffff_tmp348, byte_9d);
          sequence_ef_ad = simd_and(byte_ef_adv, byte_ad);
          carryQ.cq[166] = carryout2carry(pablo_blk_Advance(sequence_ef_ad, carryQ.get_carry_in(166), r800_ffff_tmp349));
          sequence_ef_ad_byte_range_80_81 = simd_and(r800_ffff_tmp349, byte_range_80_81);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_ad_byte_range_80_81);
          sequence_ef_ae = simd_and(byte_ef_adv, byte_ae);
          r800_ffff_tmp350 = simd_and(basis_bits.bit_2, r800_ffff_tmp125);
          byte_range_80_b1 = simd_andc(byte_range_80_bf, r800_ffff_tmp350);
          carryQ.cq[167] = carryout2carry(pablo_blk_Advance(sequence_ef_ae, carryQ.get_carry_in(167), r800_ffff_tmp351));
          sequence_ef_ae_byte_range_80_b1 = simd_and(r800_ffff_tmp351, byte_range_80_b1);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_ae_byte_range_80_b1);
          sequence_ef_af = simd_and(byte_ef_adv, byte_af);
          r800_ffff_tmp352 = simd_or(basis_bits.bit_2, tmp44);
          byte_range_93_bf = simd_and(byte_range_80_bf, r800_ffff_tmp352);
          carryQ.cq[168] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(168), r800_ffff_tmp353));
          sequence_ef_af_byte_range_93_bf = simd_and(r800_ffff_tmp353, byte_range_93_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_af_byte_range_93_bf);
          sequence_ef_b0 = simd_and(byte_ef_adv, byte_b0);
          carryQ.cq[169] = carryout2carry(pablo_blk_Advance(sequence_ef_b0, carryQ.get_carry_in(169), r800_ffff_tmp354));
          sequence_ef_b0_byte_range_80_bf = simd_and(r800_ffff_tmp354, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_b0_byte_range_80_bf);
          sequence_ef_b4 = simd_and(byte_ef_adv, byte_b4);
          r800_ffff_tmp355 = simd_and(basis_bits.bit_2, tmp180);
          byte_range_80_bd = simd_andc(byte_range_80_bf, r800_ffff_tmp355);
          carryQ.cq[170] = carryout2carry(pablo_blk_Advance(sequence_ef_b4, carryQ.get_carry_in(170), r800_ffff_tmp356));
          sequence_ef_b4_byte_range_80_bd = simd_and(r800_ffff_tmp356, byte_range_80_bd);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_b4_byte_range_80_bd);
          sequence_ef_b5 = simd_and(byte_ef_adv, byte_b5);
          carryQ.cq[171] = carryout2carry(pablo_blk_Advance(sequence_ef_b5, carryQ.get_carry_in(171), r800_ffff_tmp357));
          sequence_ef_b5_byte_range_90_bf = simd_and(r800_ffff_tmp357, byte_range_90_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_b5_byte_range_90_bf);
          sequence_ef_b6 = simd_and(byte_ef_adv, byte_b6);
          carryQ.cq[172] = carryout2carry(pablo_blk_Advance(sequence_ef_b6, carryQ.get_carry_in(172), r800_ffff_tmp358));
          sequence_ef_b6_byte_range_80_8f = simd_and(r800_ffff_tmp358, byte_range_80_8f);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_b6_byte_range_80_8f);
          sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
          byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
          carryQ.cq[173] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(173), r800_ffff_tmp359));
          sequence_ef_b7_byte_range_80_87 = simd_and(r800_ffff_tmp359, byte_range_80_87);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_b7_byte_range_80_87);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          byte_range_b0_b4 = simd_andc(r800_ffff_tmp299, tmp60);
          carryQ.cq[174] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(174), r800_ffff_tmp360));
          sequence_ef_b9_byte_range_b0_b4 = simd_and(r800_ffff_tmp360, byte_range_b0_b4);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_b9_byte_range_b0_b4);
          sequence_ef_ba = simd_and(byte_ef_adv, byte_ba);
          carryQ.cq[175] = carryout2carry(pablo_blk_Advance(sequence_ef_ba, carryQ.get_carry_in(175), r800_ffff_tmp361));
          sequence_ef_ba_byte_range_80_bf = simd_and(r800_ffff_tmp361, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_ba_byte_range_80_bf);
          sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
          r800_ffff_tmp362 = simd_and(basis_bits.bit_2, r800_ffff_tmp260);
          byte_range_80_bc = simd_andc(byte_range_80_bf, r800_ffff_tmp362);
          carryQ.cq[176] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(176), r800_ffff_tmp363));
          sequence_ef_bb_byte_range_80_bc = simd_and(r800_ffff_tmp363, byte_range_80_bc);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_bb_byte_range_80_bc);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          byte_range_a6_af = simd_and(tmp76, r800_ffff_tmp3);
          carryQ.cq[177] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(177), r800_ffff_tmp364));
          sequence_ef_bd_byte_range_a6_af = simd_and(r800_ffff_tmp364, byte_range_a6_af);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_bd_byte_range_a6_af);
          sequence_ef_be = simd_and(byte_ef_adv, byte_be);
          carryQ.cq[178] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(178), r800_ffff_tmp365));
          sequence_ef_be_byte_range_80_9d = simd_and(r800_ffff_tmp365, byte_range_80_9d);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_be_byte_range_80_9d);
          byte_bf = simd_and(byte_range_b0_bf, tmp68);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          byte_range_82_87 = simd_and(byte_range_80_87, tmp157);
          carryQ.cq[179] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(179), r800_ffff_tmp366));
          sequence_ef_bf_byte_range_82_87 = simd_and(r800_ffff_tmp366, byte_range_82_87);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_bf_byte_range_82_87);
        }
        else {
          carryQ.CarryDequeueEnqueue(54, 126);
        }
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        carryQ.cq[180] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(180), tmp182));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp182, byte_range_80_bf);
        carryQ.cq[181] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(181), tmp183));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp183, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(182, 23))) {
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          sequence_f0_90_80 = simd_and(tmp182, byte_80);
          carryQ.cq[182] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(182), sequence_f0_90_adv));
          sequence_f0_90_80 = simd_and(sequence_f0_90_adv, byte_80);
          r10000_10fff_tmp1 = simd_andc(byte_range_80_8f, tmp66);
          r10000_10fff_tmp2 = simd_and(tmp66, tmp5);
          r10000_10fff_tmp3 = simd_or(basis_bits.bit_3, r10000_10fff_tmp2);
          r10000_10fff_tmp4 = simd_or(simd_and(basis_bits.bit_2, tmp40), simd_andc(r10000_10fff_tmp3, basis_bits.bit_2));
          r10000_10fff_tmp5 = simd_and(byte_range_80_bf, r10000_10fff_tmp4);
          r10000_10fff_tmp6 = simd_or(r10000_10fff_tmp1, r10000_10fff_tmp5);
          r10000_10fff_tmp7 = simd_not(tmp56);
          r10000_10fff_tmp8 = simd_or(simd_and(basis_bits.bit_3, r10000_10fff_tmp7), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
          r10000_10fff_tmp9 = simd_and(tmp109, r10000_10fff_tmp8);
          r10000_10fff_tmp10 = simd_or(r10000_10fff_tmp6, r10000_10fff_tmp9);
          r10000_10fff_tmp11 = simd_andc(tmp66, basis_bits.bit_6);
          r10000_10fff_tmp12 = simd_and(tmp83, r10000_10fff_tmp11);
          r10000_10fff_tmp13 = simd_or(r10000_10fff_tmp10, r10000_10fff_tmp12);
          r10000_10fff_tmp14 = simd_and(tmp83, tmp68);
          cc_range_10000_1003f_4 = simd_or(r10000_10fff_tmp13, r10000_10fff_tmp14);
          carryQ.cq[183] = carryout2carry(pablo_blk_Advance(sequence_f0_90_80, carryQ.get_carry_in(183), sequence_f0_90_80_adv));
          r10000_10fff_tmp15 = simd_and(sequence_f0_90_80_adv, cc_range_10000_1003f_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp15);
          byte_81 = simd_and(byte_range_80_8f, tmp11);
          sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
          sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
          r10000_10fff_tmp16 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r10000_10fff_tmp17 = simd_and(basis_bits.bit_4, r10000_10fff_tmp16);
          r10000_10fff_tmp18 = simd_andc(tmp13, tmp8);
          r10000_10fff_tmp19 = simd_andc(byte_range_80_bf, r10000_10fff_tmp18);
          cc_range_10040_10050_4 = simd_andc(r10000_10fff_tmp19, r10000_10fff_tmp17);
          carryQ.cq[184] = carryout2carry(pablo_blk_Advance(sequence_f0_90_81, carryQ.get_carry_in(184), sequence_f0_90_81_adv));
          r10000_10fff_tmp20 = simd_and(sequence_f0_90_81_adv, cc_range_10040_10050_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp20);
          sequence_f0_90_82 = simd_and(sequence_f0_90_adv, byte_82);
          sequence_f0_90_82 = simd_and(sequence_f0_90_adv, byte_82);
          carryQ.cq[185] = carryout2carry(pablo_blk_Advance(sequence_f0_90_82, carryQ.get_carry_in(185), sequence_f0_90_82_adv));
          r10000_10fff_tmp21 = simd_and(sequence_f0_90_82_adv, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp21);
          sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
          sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
          r10000_10fff_tmp22 = simd_and(basis_bits.bit_3, tmp56);
          r10000_10fff_tmp23 = simd_and(basis_bits.bit_2, r10000_10fff_tmp22);
          byte_range_80_ba = simd_andc(byte_range_80_bf, r10000_10fff_tmp23);
          carryQ.cq[186] = carryout2carry(pablo_blk_Advance(sequence_f0_90_83, carryQ.get_carry_in(186), sequence_f0_90_83_adv));
          r10000_10fff_tmp24 = simd_and(sequence_f0_90_83_adv, byte_range_80_ba);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp24);
          byte_8a = simd_and(byte_range_80_8f, tmp54);
          sequence_f0_90_8a = simd_and(sequence_f0_90_adv, byte_8a);
          sequence_f0_90_8a = simd_and(sequence_f0_90_adv, byte_8a);
          r10000_10fff_tmp25 = simd_and(basis_bits.bit_3, r10000_10fff_tmp2);
          r10000_10fff_tmp26 = simd_andc(tmp95, r10000_10fff_tmp25);
          cc_range_10280_102a0_4 = simd_or(r10000_10fff_tmp26, tmp109);
          carryQ.cq[187] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8a, carryQ.get_carry_in(187), sequence_f0_90_8a_adv));
          r10000_10fff_tmp27 = simd_and(sequence_f0_90_8a_adv, cc_range_10280_102a0_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp27);
          byte_8b = simd_and(byte_range_80_8f, tmp88);
          sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
          sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
          r10000_10fff_tmp28 = simd_and(basis_bits.bit_3, tmp6);
          byte_range_80_90 = simd_andc(tmp95, r10000_10fff_tmp28);
          carryQ.cq[188] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(188), sequence_f0_90_8b_adv));
          r10000_10fff_tmp29 = simd_and(sequence_f0_90_8b_adv, byte_range_80_90);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp29);
          byte_8c = simd_and(byte_range_80_8f, tmp84);
          sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
          sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
          r10000_10fff_tmp30 = simd_and(basis_bits.bit_3, tmp68);
          r10000_10fff_tmp31 = simd_andc(tmp95, r10000_10fff_tmp30);
          cc_range_10300_10330_4 = simd_or(r10000_10fff_tmp31, tmp83);
          carryQ.cq[189] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(189), sequence_f0_90_8c_adv));
          r10000_10fff_tmp32 = simd_and(sequence_f0_90_8c_adv, cc_range_10300_10330_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp32);
          sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
          sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
          r10000_10fff_tmp33 = simd_or(simd_and(basis_bits.bit_4, tmp166), simd_andc(tmp157, basis_bits.bit_4));
          r10000_10fff_tmp34 = simd_andc(tmp6, r10000_10fff_tmp33);
          cc_range_10340_10342_4 = simd_andc(byte_range_80_8f, r10000_10fff_tmp34);
          carryQ.cq[190] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(190), sequence_f0_90_8d_adv));
          r10000_10fff_tmp35 = simd_and(sequence_f0_90_8d_adv, cc_range_10340_10342_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp35);
          byte_8e = simd_and(byte_range_80_8f, tmp92);
          sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
          sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
          cc_range_10380_103a0_4 = simd_or(byte_range_80_9d, tmp109);
          carryQ.cq[191] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(191), sequence_f0_90_8e_adv));
          r10000_10fff_tmp36 = simd_and(sequence_f0_90_8e_adv, cc_range_10380_103a0_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp36);
          byte_8f = simd_and(byte_range_80_8f, tmp68);
          sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
          sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
          r10000_10fff_tmp37 = simd_andc(tmp4, basis_bits.bit_4);
          cc_range_103c0_103c8_4 = simd_andc(byte_range_80_8f, r10000_10fff_tmp37);
          carryQ.cq[192] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(192), sequence_f0_90_8f_adv));
          r10000_10fff_tmp38 = simd_and(sequence_f0_90_8f_adv, cc_range_103c0_103c8_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp38);
          sequence_f0_90_91 = simd_and(sequence_f0_90_adv, byte_91);
          sequence_f0_90_91 = simd_and(sequence_f0_90_adv, byte_91);
          byte_range_90_bf = simd_and(byte_range_80_bf, tmp13);
          carryQ.cq[193] = carryout2carry(pablo_blk_Advance(sequence_f0_90_91, carryQ.get_carry_in(193), sequence_f0_90_91_adv));
          r10000_10fff_tmp39 = simd_and(sequence_f0_90_91_adv, byte_range_90_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp39);
          sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
          sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
          carryQ.cq[194] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(194), sequence_f0_90_92_adv));
          r10000_10fff_tmp40 = simd_and(sequence_f0_90_92_adv, byte_range_80_9d);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp40);
          sequence_f0_90_a0 = simd_and(sequence_f0_90_adv, byte_a0);
          sequence_f0_90_a0 = simd_and(sequence_f0_90_adv, byte_a0);
          r10000_10fff_tmp41 = simd_andc(tmp86, r10000_10fff_tmp16);
          r10000_10fff_tmp42 = simd_and(byte_range_80_8f, tmp79);
          r10000_10fff_tmp43 = simd_or(r10000_10fff_tmp41, r10000_10fff_tmp42);
          r10000_10fff_tmp44 = simd_or(basis_bits.bit_4, r10000_10fff_tmp16);
          r10000_10fff_tmp45 = simd_and(basis_bits.bit_3, r10000_10fff_tmp44);
          r10000_10fff_tmp46 = simd_not(r10000_10fff_tmp45);
          r10000_10fff_tmp47 = simd_or(basis_bits.bit_3, tmp158);
          r10000_10fff_tmp48 = simd_or(simd_and(basis_bits.bit_2, r10000_10fff_tmp46), simd_andc(r10000_10fff_tmp47, basis_bits.bit_2));
          r10000_10fff_tmp49 = simd_and(byte_range_80_bf, r10000_10fff_tmp48);
          r10000_10fff_tmp50 = simd_or(r10000_10fff_tmp43, r10000_10fff_tmp49);
          r10000_10fff_tmp51 = simd_not(tmp29);
          r10000_10fff_tmp52 = simd_or(simd_and(basis_bits.bit_4, r10000_10fff_tmp51), simd_andc(tmp37, basis_bits.bit_4));
          r10000_10fff_tmp53 = simd_and(tmp83, r10000_10fff_tmp52);
          r10000_10fff_tmp54 = simd_or(r10000_10fff_tmp50, r10000_10fff_tmp53);
          r10000_10fff_tmp55 = simd_or(r10000_10fff_tmp54, byte_bc);
          cc_range_10800_1083f_4 = simd_or(r10000_10fff_tmp55, r10000_10fff_tmp14);
          carryQ.cq[195] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a0, carryQ.get_carry_in(195), sequence_f0_90_a0_adv));
          r10000_10fff_tmp56 = simd_and(sequence_f0_90_a0_adv, cc_range_10800_1083f_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp56);
          byte_a1 = simd_and(tmp76, tmp11);
          sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
          sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
          byte_range_80_95 = simd_andc(tmp95, r10000_10fff_tmp45);
          carryQ.cq[196] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(196), sequence_f0_90_a1_adv));
          r10000_10fff_tmp57 = simd_and(sequence_f0_90_a1_adv, byte_range_80_95);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp57);
          byte_a4 = simd_and(tmp76, tmp36);
          sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
          sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
          r10000_10fff_tmp58 = simd_and(basis_bits.bit_3, tmp158);
          r10000_10fff_tmp59 = simd_andc(tmp109, r10000_10fff_tmp58);
          cc_range_10900_10920_4 = simd_or(byte_range_80_95, r10000_10fff_tmp59);
          carryQ.cq[197] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(197), sequence_f0_90_a4_adv));
          r10000_10fff_tmp60 = simd_and(sequence_f0_90_a4_adv, cc_range_10900_10920_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp60);
          byte_a6 = simd_and(tmp76, tmp43);
          sequence_f0_90_a6 = simd_and(sequence_f0_90_adv, byte_a6);
          sequence_f0_90_a6 = simd_and(sequence_f0_90_adv, byte_a6);
          r10000_10fff_tmp61 = simd_and(basis_bits.bit_2, tmp16);
          r10000_10fff_tmp62 = simd_andc(byte_range_80_bf, r10000_10fff_tmp61);
          r10000_10fff_tmp63 = simd_and(tmp83, tmp179);
          cc_range_10980_109be_4 = simd_or(r10000_10fff_tmp62, r10000_10fff_tmp63);
          carryQ.cq[198] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a6, carryQ.get_carry_in(198), sequence_f0_90_a6_adv));
          r10000_10fff_tmp64 = simd_and(sequence_f0_90_a6_adv, cc_range_10980_109be_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp64);
          sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
          sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
          r10000_10fff_tmp65 = simd_andc(byte_range_80_8f, tmp6);
          r10000_10fff_tmp66 = simd_or(r10000_10fff_tmp65, tmp128);
          r10000_10fff_tmp67 = simd_and(tmp64, tmp35);
          r10000_10fff_tmp68 = simd_and(r10000_10fff_tmp67, tmp5);
          r10000_10fff_tmp69 = simd_or(r10000_10fff_tmp66, r10000_10fff_tmp68);
          r10000_10fff_tmp70 = simd_and(basis_bits.bit_3, tmp4);
          r10000_10fff_tmp71 = simd_not(r10000_10fff_tmp70);
          r10000_10fff_tmp72 = simd_or(simd_and(basis_bits.bit_2, r10000_10fff_tmp71), simd_andc(tmp80, basis_bits.bit_2));
          r10000_10fff_tmp73 = simd_and(byte_range_80_bf, r10000_10fff_tmp72);
          cc_range_10a00_10a19_4 = simd_or(r10000_10fff_tmp69, r10000_10fff_tmp73);
          carryQ.cq[199] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(199), sequence_f0_90_a8_adv));
          r10000_10fff_tmp74 = simd_and(sequence_f0_90_a8_adv, cc_range_10a00_10a19_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp74);
          byte_a9 = simd_and(tmp76, tmp116);
          sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
          sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
          byte_range_a0_bc = simd_andc(tmp109, r10000_10fff_tmp25);
          carryQ.cq[200] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(200), sequence_f0_90_a9_adv));
          r10000_10fff_tmp75 = simd_and(sequence_f0_90_a9_adv, byte_range_a0_bc);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp75);
          byte_ac = simd_and(tmp76, tmp84);
          sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
          sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
          r10000_10fff_tmp76 = simd_and(basis_bits.bit_2, r10000_10fff_tmp45);
          byte_range_80_b5 = simd_andc(byte_range_80_bf, r10000_10fff_tmp76);
          carryQ.cq[201] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(201), sequence_f0_90_ac_adv));
          r10000_10fff_tmp77 = simd_and(sequence_f0_90_ac_adv, byte_range_80_b5);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp77);
          byte_ad = simd_and(tmp76, tmp67);
          sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
          sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
          r10000_10fff_tmp78 = simd_andc(tmp109, tmp44);
          cc_range_10b40_10b60_4 = simd_or(byte_range_80_95, r10000_10fff_tmp78);
          carryQ.cq[202] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(202), sequence_f0_90_ad_adv));
          r10000_10fff_tmp79 = simd_and(sequence_f0_90_ad_adv, cc_range_10b40_10b60_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp79);
          byte_b0 = simd_andc(tmp83, tmp6);
          sequence_f0_90_b0 = simd_and(sequence_f0_90_adv, byte_b0);
          sequence_f0_90_b0 = simd_and(sequence_f0_90_adv, byte_b0);
          carryQ.cq[203] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b0, carryQ.get_carry_in(203), sequence_f0_90_b0_adv));
          r10000_10fff_tmp80 = simd_and(sequence_f0_90_b0_adv, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp80);
          byte_b1 = simd_and(tmp83, tmp11);
          sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
          sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
          byte_range_80_88 = simd_andc(byte_range_80_8f, tmp30);
          carryQ.cq[204] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b1, carryQ.get_carry_in(204), sequence_f0_90_b1_adv));
          r10000_10fff_tmp81 = simd_and(sequence_f0_90_b1_adv, byte_range_80_88);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp81);
        }
        else {
          carryQ.CarryDequeueEnqueue(182, 23);
        }
        carryQ.CarryQ_Adjust(205);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Lo & struct_Lo, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f0, tmp7, tmp8, tmp9, tmp10;
		BitBlock tmp11, byte_91, tmp12, sequence_f0_91, byte_f0_adv, tmp13, tmp14;
		BitBlock byte_80, tmp15, sequence_f0_91_80, sequence_f0_91_adv, tmp16, tmp17;
		BitBlock tmp18, tmp19, tmp20, tmp21, byte_range_83_b7, sequence_f0_91_80_adv;
		BitBlock tmp22, tmp23, tmp24, byte_82, sequence_f0_91_82, tmp25, tmp26;
		BitBlock byte_range_83_af, sequence_f0_91_82_adv, tmp27, tmp28, byte_83;
		BitBlock sequence_f0_91_83, tmp29, tmp30, tmp31, tmp32, tmp33;
		BitBlock byte_range_90_a8, sequence_f0_91_83_adv, tmp34, tmp35, tmp36, byte_84;
		BitBlock sequence_f0_91_84, tmp37, tmp38, tmp39, tmp40, tmp41;
		BitBlock byte_range_83_a6, sequence_f0_91_84_adv, tmp42, tmp43, byte_86;
		BitBlock sequence_f0_91_86, tmp44, tmp45, tmp46, byte_range_83_b2;
		BitBlock sequence_f0_91_86_adv, tmp47, tmp48, byte_87, sequence_f0_91_87;
		BitBlock tmp49, tmp50, tmp51, byte_range_81_84, sequence_f0_91_87_adv, tmp52;
		BitBlock tmp53, tmp54, byte_9a, sequence_f0_91_9a, tmp55, tmp56, tmp57, tmp58;
		BitBlock byte_range_80_aa, sequence_f0_91_9a_adv, tmp59, byte_92;
		BitBlock sequence_f0_92, tmp60, tmp61, byte_range_80_8c, tmp62;
		BitBlock sequence_f0_92_byte_range_80_8c, byte_range_80_bf, tmp63;
		BitBlock sequence_f0_92_byte_range_80_8c_sfx, tmp64, tmp65, tmp66, tmp67;
		BitBlock byte_8d, sequence_f0_92_adv, sequence_f0_92_8d, tmp68, tmp69, tmp70;
		BitBlock byte_range_80_ae, tmp71, sequence_f0_92_8d_byte_range_80_ae, byte_93;
		BitBlock sequence_f0_93, byte_range_80_8f, tmp72;
		BitBlock sequence_f0_93_byte_range_80_8f, tmp73;
		BitBlock sequence_f0_93_byte_range_80_8f_sfx, byte_90, sequence_f0_93_adv;
		BitBlock sequence_f0_93_90, tmp74, sequence_f0_93_90_byte_range_80_ae, byte_96;
		BitBlock sequence_f0_96, tmp75, tmp76, byte_range_a0_a7, tmp77;
		BitBlock sequence_f0_96_byte_range_a0_a7, tmp78;
		BitBlock sequence_f0_96_byte_range_a0_a7_sfx, tmp79, byte_a8;
		BitBlock sequence_f0_96_adv, sequence_f0_96_a8, tmp80, tmp81, byte_range_80_b8;
		BitBlock tmp82, sequence_f0_96_a8_byte_range_80_b8, tmp83, tmp84, byte_bc;
		BitBlock sequence_f0_96_bc, tmp85, sequence_f0_96_bc_byte_range_80_bf, byte_bd;
		BitBlock sequence_f0_96_bd, tmp86, byte_range_80_84, tmp87;
		BitBlock sequence_f0_96_bd_byte_range_80_84, tmp88, byte_9b, sequence_f0_9b;
		BitBlock tmp89, sequence_f0_9b_80, sequence_f0_9b_adv, tmp90, byte_range_80_81;
		BitBlock sequence_f0_9b_80_adv, tmp91, tmp92, byte_9e, sequence_f0_9e, byte_b8;
		BitBlock tmp93, sequence_f0_9e_b8, sequence_f0_9e_adv, tmp94, tmp95, tmp96;
		BitBlock tmp97, tmp98, tmp99, tmp100, tmp101, tmp102, tmp103, tmp104, tmp105;
		BitBlock tmp106, tmp107, tmp108, tmp109, tmp110, tmp111, tmp112, tmp113;
		BitBlock tmp114, tmp115, tmp116, tmp117, tmp118, tmp119;
		BitBlock cc_range_1ee00_1ee3b_4, sequence_f0_9e_b8_adv, tmp120, byte_b9;
		BitBlock sequence_f0_9e_b9, tmp121, tmp122, tmp123, tmp124, tmp125, tmp126;
		BitBlock tmp127, tmp128, tmp129, tmp130, tmp131, tmp132, tmp133, tmp134;
		BitBlock tmp135, tmp136, tmp137, tmp138, tmp139, tmp140, tmp141, tmp142;
		BitBlock tmp143, tmp144, tmp145, tmp146, tmp147, tmp148, tmp149, tmp150;
		BitBlock tmp151, tmp152, tmp153, tmp154, tmp155, cc_range_1ee42_1ee7e_4;
		BitBlock sequence_f0_9e_b9_adv, tmp156, byte_ba, sequence_f0_9e_ba, tmp157;
		BitBlock tmp158, tmp159, tmp160, tmp161, tmp162, tmp163, tmp164, tmp165;
		BitBlock tmp166, tmp167, tmp168, tmp169, tmp170, cc_range_1ee80_1eeab_4;
		BitBlock sequence_f0_9e_ba_adv, tmp171, byte_range_a0_a9;
		BitBlock byte_f0_byte_range_a0_a9, tmp172, byte_f0_byte_range_a0_a9_sfx;
		BitBlock tmp173, byte_f0_byte_range_a0_a9_sfx_sfx, byte_aa, sequence_f0_aa;
		BitBlock sequence_f0_aa_adv, sequence_f0_aa_80, tmp174, byte_range_80_96;
		BitBlock tmp175, sequence_f0_aa_80_byte_range_80_96, byte_ab, sequence_f0_ab;
		BitBlock sequence_f0_ab_adv, sequence_f0_ab_80, tmp176, tmp177;
		BitBlock byte_range_80_b4, tmp178, sequence_f0_ab_80_byte_range_80_b4, byte_af;
		BitBlock sequence_f0_af, byte_a0, sequence_f0_af_adv, sequence_f0_af_a0;
		BitBlock tmp179, tmp180, byte_range_80_9d, tmp181;
		BitBlock sequence_f0_af_a0_byte_range_80_9d, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock byte_c2, cc_range_aa_ba_2, byte_c2_adv, r80_7ff_tmp2, byte_c6;
		BitBlock byte_bb, byte_c6_adv, r80_7ff_tmp3, byte_c7, byte_range_80_83;
		BitBlock byte_c7_adv, r80_7ff_tmp4, byte_ca, byte_94, byte_ca_adv;
		BitBlock r80_7ff_tmp5, r80_7ff_tmp6, byte_d7, r80_7ff_tmp7, r80_7ff_tmp8;
		BitBlock r80_7ff_tmp9, r80_7ff_tmp10, r80_7ff_tmp11, cc_range_5d0_5f0_2;
		BitBlock byte_d7_adv, r80_7ff_tmp12, byte_d8, byte_range_a0_bf, byte_d8_adv;
		BitBlock r80_7ff_tmp13, byte_d9, r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16;
		BitBlock r80_7ff_tmp17, r80_7ff_tmp18, r80_7ff_tmp19, cc_range_641_671_2;
		BitBlock byte_d9_adv, r80_7ff_tmp20, byte_da, byte_da_adv, r80_7ff_tmp21;
		BitBlock byte_db, r80_7ff_tmp22, r80_7ff_tmp23, r80_7ff_tmp24, r80_7ff_tmp25;
		BitBlock r80_7ff_tmp26, r80_7ff_tmp27, r80_7ff_tmp28, r80_7ff_tmp29;
		BitBlock r80_7ff_tmp30, r80_7ff_tmp31, cc_range_6c0_6ff_2, byte_db_adv;
		BitBlock r80_7ff_tmp32, byte_dc, r80_7ff_tmp33, r80_7ff_tmp34, r80_7ff_tmp35;
		BitBlock cc_range_710_712_2, byte_dc_adv, r80_7ff_tmp36, byte_dd;
		BitBlock r80_7ff_tmp37, r80_7ff_tmp38, r80_7ff_tmp39, byte_range_8d_bf;
		BitBlock byte_dd_adv, r80_7ff_tmp40, byte_de, r80_7ff_tmp41, r80_7ff_tmp42;
		BitBlock r80_7ff_tmp43, r80_7ff_tmp44, r80_7ff_tmp45, r80_7ff_tmp46;
		BitBlock cc_range_780_7b1_2, byte_de_adv, r80_7ff_tmp47, byte_df;
		BitBlock r80_7ff_tmp48, r80_7ff_tmp49, byte_range_8a_aa, byte_df_adv;
		BitBlock r80_7ff_tmp50, byte_range_e0_ef, byte_e0, r800_ffff_tmp1;
		BitBlock sequence_e0_a0, byte_e0_adv, r800_ffff_tmp2, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, byte_range_80_95, sequence_e0_a0_adv, r800_ffff_tmp5;
		BitBlock byte_a1, sequence_e0_a1, byte_range_80_98, sequence_e0_a1_adv;
		BitBlock r800_ffff_tmp6, byte_a2, sequence_e0_a2, r800_ffff_tmp7;
		BitBlock r800_ffff_tmp8, r800_ffff_tmp9, cc_range_8a0_8a2_3;
		BitBlock sequence_e0_a2_adv, r800_ffff_tmp10, byte_a4, sequence_e0_a4;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13, r800_ffff_tmp14;
		BitBlock r800_ffff_tmp15, cc_range_904_93d_3, sequence_e0_a4_adv;
		BitBlock r800_ffff_tmp16, r800_ffff_tmp17, byte_a5, sequence_e0_a5;
		BitBlock r800_ffff_tmp18, r800_ffff_tmp19, r800_ffff_tmp20, r800_ffff_tmp21;
		BitBlock r800_ffff_tmp22, r800_ffff_tmp23, r800_ffff_tmp24, r800_ffff_tmp25;
		BitBlock r800_ffff_tmp26, cc_range_950_979_3, sequence_e0_a5_adv;
		BitBlock r800_ffff_tmp27, byte_a6, sequence_e0_a6, r800_ffff_tmp28;
		BitBlock r800_ffff_tmp29, r800_ffff_tmp30, r800_ffff_tmp31, r800_ffff_tmp32;
		BitBlock r800_ffff_tmp33, r800_ffff_tmp34, r800_ffff_tmp35, r800_ffff_tmp36;
		BitBlock r800_ffff_tmp37, r800_ffff_tmp38, r800_ffff_tmp39, r800_ffff_tmp40;
		BitBlock r800_ffff_tmp41, r800_ffff_tmp42, r800_ffff_tmp43, r800_ffff_tmp44;
		BitBlock cc_range_985_9bd_3, sequence_e0_a6_adv, r800_ffff_tmp45, byte_a7;
		BitBlock sequence_e0_a7, r800_ffff_tmp46, r800_ffff_tmp47, r800_ffff_tmp48;
		BitBlock r800_ffff_tmp49, r800_ffff_tmp50, r800_ffff_tmp51, r800_ffff_tmp52;
		BitBlock r800_ffff_tmp53, r800_ffff_tmp54, cc_range_9ce_9f0_3;
		BitBlock sequence_e0_a7_adv, r800_ffff_tmp55, sequence_e0_a8, r800_ffff_tmp56;
		BitBlock r800_ffff_tmp57, r800_ffff_tmp58, r800_ffff_tmp59, r800_ffff_tmp60;
		BitBlock r800_ffff_tmp61, r800_ffff_tmp62, r800_ffff_tmp63, r800_ffff_tmp64;
		BitBlock r800_ffff_tmp65, r800_ffff_tmp66, r800_ffff_tmp67, cc_range_a05_a38_3;
		BitBlock sequence_e0_a8_adv, r800_ffff_tmp68, byte_a9, sequence_e0_a9;
		BitBlock r800_ffff_tmp69, r800_ffff_tmp70, r800_ffff_tmp71, r800_ffff_tmp72;
		BitBlock r800_ffff_tmp73, cc_range_a59_a72_3, sequence_e0_a9_adv;
		BitBlock r800_ffff_tmp74, sequence_e0_aa, r800_ffff_tmp75, r800_ffff_tmp76;
		BitBlock r800_ffff_tmp77, r800_ffff_tmp78, r800_ffff_tmp79, r800_ffff_tmp80;
		BitBlock r800_ffff_tmp81, r800_ffff_tmp82, r800_ffff_tmp83, r800_ffff_tmp84;
		BitBlock r800_ffff_tmp85, r800_ffff_tmp86, cc_range_a85_abd_3;
		BitBlock sequence_e0_aa_adv, r800_ffff_tmp87, sequence_e0_ab, r800_ffff_tmp88;
		BitBlock cc_range_ad0_ae0_3, sequence_e0_ab_adv, r800_ffff_tmp89, byte_ac;
		BitBlock sequence_e0_ac, r800_ffff_tmp90, r800_ffff_tmp91, cc_range_b05_b3d_3;
		BitBlock sequence_e0_ac_adv, r800_ffff_tmp92, byte_ad, sequence_e0_ad;
		BitBlock r800_ffff_tmp93, r800_ffff_tmp94, cc_range_b5c_b71_3;
		BitBlock sequence_e0_ad_adv, r800_ffff_tmp95, byte_ae, sequence_e0_ae;
		BitBlock r800_ffff_tmp96, r800_ffff_tmp97, r800_ffff_tmp98, r800_ffff_tmp99;
		BitBlock r800_ffff_tmp100, r800_ffff_tmp101, r800_ffff_tmp102;
		BitBlock r800_ffff_tmp103, r800_ffff_tmp104, r800_ffff_tmp105;
		BitBlock r800_ffff_tmp106, r800_ffff_tmp107, r800_ffff_tmp108;
		BitBlock r800_ffff_tmp109, r800_ffff_tmp110, r800_ffff_tmp111;
		BitBlock r800_ffff_tmp112, r800_ffff_tmp113, r800_ffff_tmp114;
		BitBlock r800_ffff_tmp115, r800_ffff_tmp116, r800_ffff_tmp117;
		BitBlock r800_ffff_tmp118, r800_ffff_tmp119, r800_ffff_tmp120;
		BitBlock r800_ffff_tmp121, cc_range_b83_bae_3, sequence_e0_ae_adv;
		BitBlock r800_ffff_tmp122, sequence_e0_af, sequence_e0_af_adv;
		BitBlock r800_ffff_tmp123, byte_b0, sequence_e0_b0, r800_ffff_tmp124;
		BitBlock r800_ffff_tmp125, r800_ffff_tmp126, r800_ffff_tmp127;
		BitBlock r800_ffff_tmp128, r800_ffff_tmp129, r800_ffff_tmp130;
		BitBlock r800_ffff_tmp131, r800_ffff_tmp132, r800_ffff_tmp133;
		BitBlock cc_range_c05_c3d_3, sequence_e0_b0_adv, r800_ffff_tmp134, byte_b1;
		BitBlock sequence_e0_b1, r800_ffff_tmp135, cc_range_c58_c60_3;
		BitBlock sequence_e0_b1_adv, r800_ffff_tmp136, byte_b2, sequence_e0_b2;
		BitBlock cc_range_c85_cbd_3, sequence_e0_b2_adv, r800_ffff_tmp137, byte_b3;
		BitBlock sequence_e0_b3, r800_ffff_tmp138, r800_ffff_tmp139, r800_ffff_tmp140;
		BitBlock cc_range_cde_cf1_3, sequence_e0_b3_adv, r800_ffff_tmp141, byte_b4;
		BitBlock sequence_e0_b4, r800_ffff_tmp142, r800_ffff_tmp143, r800_ffff_tmp144;
		BitBlock r800_ffff_tmp145, r800_ffff_tmp146, cc_range_d05_d3d_3;
		BitBlock sequence_e0_b4_adv, r800_ffff_tmp147, byte_b5, sequence_e0_b5;
		BitBlock r800_ffff_tmp148, r800_ffff_tmp149, cc_range_d4e_d7a_3;
		BitBlock sequence_e0_b5_adv, r800_ffff_tmp150, byte_b6, sequence_e0_b6;
		BitBlock r800_ffff_tmp151, r800_ffff_tmp152, r800_ffff_tmp153;
		BitBlock r800_ffff_tmp154, r800_ffff_tmp155, r800_ffff_tmp156;
		BitBlock r800_ffff_tmp157, r800_ffff_tmp158, r800_ffff_tmp159;
		BitBlock r800_ffff_tmp160, r800_ffff_tmp161, cc_range_d85_dbd_3;
		BitBlock sequence_e0_b6_adv, r800_ffff_tmp162, byte_b7, sequence_e0_b7;
		BitBlock byte_range_80_86, sequence_e0_b7_adv, r800_ffff_tmp163;
		BitBlock sequence_e0_b8, r800_ffff_tmp164, r800_ffff_tmp165, r800_ffff_tmp166;
		BitBlock r800_ffff_tmp167, r800_ffff_tmp168, cc_range_e01_e32_3;
		BitBlock sequence_e0_b8_adv, r800_ffff_tmp169, sequence_e0_b9;
		BitBlock byte_range_80_85, sequence_e0_b9_adv, r800_ffff_tmp170;
		BitBlock sequence_e0_ba, r800_ffff_tmp171, r800_ffff_tmp172, r800_ffff_tmp173;
		BitBlock r800_ffff_tmp174, r800_ffff_tmp175, r800_ffff_tmp176;
		BitBlock r800_ffff_tmp177, r800_ffff_tmp178, r800_ffff_tmp179;
		BitBlock r800_ffff_tmp180, r800_ffff_tmp181, r800_ffff_tmp182;
		BitBlock r800_ffff_tmp183, r800_ffff_tmp184, r800_ffff_tmp185;
		BitBlock r800_ffff_tmp186, r800_ffff_tmp187, r800_ffff_tmp188;
		BitBlock r800_ffff_tmp189, r800_ffff_tmp190, r800_ffff_tmp191;
		BitBlock r800_ffff_tmp192, r800_ffff_tmp193, r800_ffff_tmp194;
		BitBlock r800_ffff_tmp195, r800_ffff_tmp196, cc_range_e81_ebd_3;
		BitBlock sequence_e0_ba_adv, r800_ffff_tmp197, sequence_e0_bb;
		BitBlock r800_ffff_tmp198, cc_range_ec0_edc_3, sequence_e0_bb_adv;
		BitBlock r800_ffff_tmp199, sequence_e0_bc, sequence_e0_bc_adv;
		BitBlock r800_ffff_tmp200, sequence_e0_bd, r800_ffff_tmp201, r800_ffff_tmp202;
		BitBlock r800_ffff_tmp203, r800_ffff_tmp204, cc_range_f40_f49_3;
		BitBlock sequence_e0_bd_adv, r800_ffff_tmp205, byte_be, sequence_e0_be;
		BitBlock r800_ffff_tmp206, byte_range_88_8c, sequence_e0_be_adv;
		BitBlock r800_ffff_tmp207, byte_e1, r800_ffff_tmp208, sequence_e1_80;
		BitBlock byte_e1_adv, r800_ffff_tmp209, r800_ffff_tmp210, cc_range_1000_103f_3;
		BitBlock sequence_e1_80_adv, r800_ffff_tmp211, byte_81, sequence_e1_81;
		BitBlock r800_ffff_tmp212, r800_ffff_tmp213, r800_ffff_tmp214;
		BitBlock r800_ffff_tmp215, r800_ffff_tmp216, r800_ffff_tmp217;
		BitBlock r800_ffff_tmp218, r800_ffff_tmp219, r800_ffff_tmp220;
		BitBlock r800_ffff_tmp221, cc_range_1050_1075_3, sequence_e1_81_adv;
		BitBlock r800_ffff_tmp222, sequence_e1_82, r800_ffff_tmp223;
		BitBlock cc_range_1080_108e_3, sequence_e1_82_adv, r800_ffff_tmp224;
		BitBlock sequence_e1_83, r800_ffff_tmp225, r800_ffff_tmp226, r800_ffff_tmp227;
		BitBlock r800_ffff_tmp228, cc_range_10d0_10fd_3, sequence_e1_83_adv;
		BitBlock r800_ffff_tmp229, r800_ffff_tmp230, byte_range_84_88;
		BitBlock byte_e1_byte_range_84_88, r800_ffff_tmp231;
		BitBlock byte_e1_byte_range_84_88_sfx, byte_89, sequence_e1_89;
		BitBlock byte_range_80_88, r800_ffff_tmp232, sequence_e1_89_byte_range_80_88;
		BitBlock byte_8a, sequence_e1_8a, r800_ffff_tmp233;
		BitBlock sequence_e1_8a_byte_range_80_88, byte_8b, sequence_e1_8b;
		BitBlock r800_ffff_tmp234, sequence_e1_8b_80, byte_8c, sequence_e1_8c;
		BitBlock byte_range_80_90, r800_ffff_tmp235, sequence_e1_8c_byte_range_80_90;
		BitBlock sequence_e1_8d, byte_range_80_9a, r800_ffff_tmp236;
		BitBlock sequence_e1_8d_byte_range_80_9a, byte_8e, sequence_e1_8e;
		BitBlock r800_ffff_tmp237, sequence_e1_8e_byte_range_80_8f, byte_8f;
		BitBlock sequence_e1_8f, r800_ffff_tmp238, sequence_e1_8f_byte_range_80_b4;
		BitBlock sequence_e1_90, r800_ffff_tmp239, byte_range_81_bf, r800_ffff_tmp240;
		BitBlock sequence_e1_90_byte_range_81_bf, sequence_e1_91, r800_ffff_tmp241;
		BitBlock sequence_e1_91_byte_range_80_bf, byte_99, sequence_e1_99;
		BitBlock r800_ffff_tmp242, byte_range_80_ac, r800_ffff_tmp243;
		BitBlock sequence_e1_99_byte_range_80_ac, sequence_e1_9a, r800_ffff_tmp244;
		BitBlock r800_ffff_tmp245, byte_range_81_9a, r800_ffff_tmp246;
		BitBlock sequence_e1_9a_byte_range_81_9a, sequence_e1_9b, r800_ffff_tmp247;
		BitBlock sequence_e1_9b_byte_range_80_aa, byte_9c, sequence_e1_9c;
		BitBlock r800_ffff_tmp248, sequence_e1_9c_byte_range_80_8c, byte_9d;
		BitBlock sequence_e1_9d, byte_range_80_91, r800_ffff_tmp249;
		BitBlock sequence_e1_9d_byte_range_80_91, sequence_e1_9e, r800_ffff_tmp250;
		BitBlock r800_ffff_tmp251, byte_range_80_b3, r800_ffff_tmp252;
		BitBlock sequence_e1_9e_byte_range_80_b3, byte_9f, sequence_e1_9f;
		BitBlock r800_ffff_tmp253, sequence_e1_9f_9c, sequence_e1_a0, r800_ffff_tmp254;
		BitBlock sequence_e1_a0_byte_range_a0_bf, sequence_e1_a1, byte_range_80_82;
		BitBlock r800_ffff_tmp255, sequence_e1_a1_byte_range_80_82, sequence_e1_a2;
		BitBlock r800_ffff_tmp256, byte_range_80_a8, r800_ffff_tmp257;
		BitBlock sequence_e1_a2_byte_range_80_a8, byte_a3, sequence_e1_a3;
		BitBlock r800_ffff_tmp258, byte_range_80_b5, r800_ffff_tmp259;
		BitBlock sequence_e1_a3_byte_range_80_b5, sequence_e1_a4, r800_ffff_tmp260;
		BitBlock byte_range_80_9c, r800_ffff_tmp261, sequence_e1_a4_byte_range_80_9c;
		BitBlock sequence_e1_a5, r800_ffff_tmp262, r800_ffff_tmp263, r800_ffff_tmp264;
		BitBlock byte_range_90_ad, r800_ffff_tmp265, sequence_e1_a5_byte_range_90_ad;
		BitBlock sequence_e1_a6, r800_ffff_tmp266, r800_ffff_tmp267, byte_range_80_ab;
		BitBlock r800_ffff_tmp268, sequence_e1_a6_byte_range_80_ab, sequence_e1_a7;
		BitBlock byte_range_81_87, r800_ffff_tmp269, sequence_e1_a7_byte_range_81_87;
		BitBlock sequence_e1_a8, r800_ffff_tmp270, sequence_e1_a8_byte_range_80_96;
		BitBlock sequence_e1_a9, byte_range_80_94, r800_ffff_tmp271;
		BitBlock sequence_e1_a9_byte_range_80_94, sequence_e1_ac, r800_ffff_tmp272;
		BitBlock r800_ffff_tmp273, byte_range_85_b3, r800_ffff_tmp274;
		BitBlock sequence_e1_ac_byte_range_85_b3, sequence_e1_ad, r800_ffff_tmp275;
		BitBlock byte_range_85_8b, r800_ffff_tmp276, sequence_e1_ad_byte_range_85_8b;
		BitBlock sequence_e1_ae, r800_ffff_tmp277, r800_ffff_tmp278, byte_range_83_a0;
		BitBlock r800_ffff_tmp279, sequence_e1_ae_byte_range_83_a0, sequence_e1_af;
		BitBlock r800_ffff_tmp280, r800_ffff_tmp281, byte_range_80_a5;
		BitBlock r800_ffff_tmp282, sequence_e1_af_byte_range_80_a5, sequence_e1_b0;
		BitBlock r800_ffff_tmp283, byte_range_80_a3, r800_ffff_tmp284;
		BitBlock sequence_e1_b0_byte_range_80_a3, sequence_e1_b1, byte_range_8d_8f;
		BitBlock r800_ffff_tmp285, sequence_e1_b1_byte_range_8d_8f, sequence_e1_b3;
		BitBlock r800_ffff_tmp286, byte_range_a9_ac, r800_ffff_tmp287;
		BitBlock sequence_e1_b3_byte_range_a9_ac, byte_e2, r800_ffff_tmp288;
		BitBlock sequence_e2_84, byte_e2_adv, r800_ffff_tmp289, byte_range_b5_b8;
		BitBlock sequence_e2_84_adv, r800_ffff_tmp290, sequence_e2_b4;
		BitBlock byte_range_b0_bf, sequence_e2_b4_adv, r800_ffff_tmp291;
		BitBlock sequence_e2_b5, r800_ffff_tmp292, r800_ffff_tmp293, byte_range_80_a7;
		BitBlock sequence_e2_b5_adv, r800_ffff_tmp294, sequence_e2_b6;
		BitBlock r800_ffff_tmp295, r800_ffff_tmp296, r800_ffff_tmp297;
		BitBlock r800_ffff_tmp298, r800_ffff_tmp299, r800_ffff_tmp300;
		BitBlock r800_ffff_tmp301, r800_ffff_tmp302, r800_ffff_tmp303;
		BitBlock cc_range_2d80_2db8_3, sequence_e2_b6_adv, r800_ffff_tmp304;
		BitBlock sequence_e2_b7, r800_ffff_tmp305, r800_ffff_tmp306;
		BitBlock cc_range_2dc0_2dd8_3, sequence_e2_b7_adv, r800_ffff_tmp307, byte_e3;
		BitBlock r800_ffff_tmp308, sequence_e3_80, byte_e3_adv, r800_ffff_tmp309;
		BitBlock r800_ffff_tmp310, cc_range_3006_303c_3, sequence_e3_80_adv;
		BitBlock r800_ffff_tmp311, sequence_e3_81, sequence_e3_81_adv;
		BitBlock r800_ffff_tmp312, sequence_e3_82, r800_ffff_tmp313, r800_ffff_tmp314;
		BitBlock cc_range_3080_30a1_3, sequence_e3_82_adv, r800_ffff_tmp315;
		BitBlock sequence_e3_83, r800_ffff_tmp316, r800_ffff_tmp317, r800_ffff_tmp318;
		BitBlock cc_range_30c0_30ff_3, sequence_e3_83_adv, r800_ffff_tmp319;
		BitBlock sequence_e3_84, r800_ffff_tmp320, r800_ffff_tmp321, r800_ffff_tmp322;
		BitBlock r800_ffff_tmp323, cc_range_3105_3131_3, sequence_e3_84_adv;
		BitBlock r800_ffff_tmp324, byte_85, sequence_e3_85, sequence_e3_85_adv;
		BitBlock r800_ffff_tmp325, sequence_e3_86, r800_ffff_tmp326, r800_ffff_tmp327;
		BitBlock r800_ffff_tmp328, cc_range_3180_31a0_3, sequence_e3_86_adv;
		BitBlock r800_ffff_tmp329, sequence_e3_87, sequence_e3_87_adv;
		BitBlock r800_ffff_tmp330, byte_range_90_bf, byte_e3_byte_range_90_bf;
		BitBlock r800_ffff_tmp331, byte_e3_byte_range_90_bf_sfx, byte_e4;
		BitBlock r800_ffff_tmp332, byte_e4_byte_range_80_b5, r800_ffff_tmp333;
		BitBlock byte_e4_byte_range_80_b5_sfx, byte_e4_adv, sequence_e4_b6;
		BitBlock r800_ffff_tmp334, sequence_e4_b6_byte_range_80_b5, sequence_e4_b8;
		BitBlock r800_ffff_tmp335, sequence_e4_b8_byte_range_80_bf, byte_range_e5_e8;
		BitBlock r800_ffff_tmp336, byte_range_e5_e8_sfx, r800_ffff_tmp337;
		BitBlock byte_range_e5_e8_sfx_sfx, byte_e9, byte_e9_adv, sequence_e9_80;
		BitBlock r800_ffff_tmp338, sequence_e9_80_byte_range_80_8c, byte_ea;
		BitBlock byte_ea_adv, sequence_ea_80, r800_ffff_tmp339;
		BitBlock sequence_ea_80_byte_range_80_94, byte_eb, byte_eb_adv, sequence_eb_80;
		BitBlock r800_ffff_tmp340, sequence_eb_80_byte_range_80_bf, byte_ed;
		BitBlock byte_ed_adv, sequence_ed_80, r800_ffff_tmp341;
		BitBlock sequence_ed_80_byte_range_80_a3, byte_ef, byte_range_a4_a8;
		BitBlock r800_ffff_tmp342, byte_ef_byte_range_a4_a8, r800_ffff_tmp343;
		BitBlock byte_ef_byte_range_a4_a8_sfx, byte_ef_adv, sequence_ef_a9;
		BitBlock r800_ffff_tmp344, byte_range_80_ad, r800_ffff_tmp345;
		BitBlock sequence_ef_a9_byte_range_80_ad, sequence_ef_aa, r800_ffff_tmp346;
		BitBlock sequence_ef_aa_byte_range_80_bf, sequence_ef_ab, byte_range_80_99;
		BitBlock r800_ffff_tmp347, sequence_ef_ab_byte_range_80_99, sequence_ef_ac;
		BitBlock r800_ffff_tmp348, sequence_ef_ac_9d, sequence_ef_ad, r800_ffff_tmp349;
		BitBlock sequence_ef_ad_byte_range_80_81, sequence_ef_ae, r800_ffff_tmp350;
		BitBlock byte_range_80_b1, r800_ffff_tmp351, sequence_ef_ae_byte_range_80_b1;
		BitBlock sequence_ef_af, r800_ffff_tmp352, byte_range_93_bf, r800_ffff_tmp353;
		BitBlock sequence_ef_af_byte_range_93_bf, sequence_ef_b0, r800_ffff_tmp354;
		BitBlock sequence_ef_b0_byte_range_80_bf, sequence_ef_b4, r800_ffff_tmp355;
		BitBlock byte_range_80_bd, r800_ffff_tmp356, sequence_ef_b4_byte_range_80_bd;
		BitBlock sequence_ef_b5, r800_ffff_tmp357, sequence_ef_b5_byte_range_90_bf;
		BitBlock sequence_ef_b6, r800_ffff_tmp358, sequence_ef_b6_byte_range_80_8f;
		BitBlock sequence_ef_b7, byte_range_80_87, r800_ffff_tmp359;
		BitBlock sequence_ef_b7_byte_range_80_87, sequence_ef_b9, byte_range_b0_b4;
		BitBlock r800_ffff_tmp360, sequence_ef_b9_byte_range_b0_b4, sequence_ef_ba;
		BitBlock r800_ffff_tmp361, sequence_ef_ba_byte_range_80_bf, sequence_ef_bb;
		BitBlock r800_ffff_tmp362, byte_range_80_bc, r800_ffff_tmp363;
		BitBlock sequence_ef_bb_byte_range_80_bc, sequence_ef_bd, byte_range_a6_af;
		BitBlock r800_ffff_tmp364, sequence_ef_bd_byte_range_a6_af, sequence_ef_be;
		BitBlock r800_ffff_tmp365, sequence_ef_be_byte_range_80_9d, byte_bf;
		BitBlock sequence_ef_bf, byte_range_82_87, r800_ffff_tmp366;
		BitBlock sequence_ef_bf_byte_range_82_87, sequence_f0_90, tmp182;
		BitBlock sequence_f0_90_byte_range_80_bf, tmp183;
		BitBlock sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock sequence_f0_90_80, sequence_f0_90_adv, r10000_10fff_tmp1;
		BitBlock r10000_10fff_tmp2, r10000_10fff_tmp3, r10000_10fff_tmp4;
		BitBlock r10000_10fff_tmp5, r10000_10fff_tmp6, r10000_10fff_tmp7;
		BitBlock r10000_10fff_tmp8, r10000_10fff_tmp9, r10000_10fff_tmp10;
		BitBlock r10000_10fff_tmp11, r10000_10fff_tmp12, r10000_10fff_tmp13;
		BitBlock r10000_10fff_tmp14, cc_range_10000_1003f_4, sequence_f0_90_80_adv;
		BitBlock r10000_10fff_tmp15, sequence_f0_90_81, r10000_10fff_tmp16;
		BitBlock r10000_10fff_tmp17, r10000_10fff_tmp18, r10000_10fff_tmp19;
		BitBlock cc_range_10040_10050_4, sequence_f0_90_81_adv, r10000_10fff_tmp20;
		BitBlock sequence_f0_90_82, sequence_f0_90_82_adv, r10000_10fff_tmp21;
		BitBlock sequence_f0_90_83, r10000_10fff_tmp22, r10000_10fff_tmp23;
		BitBlock byte_range_80_ba, sequence_f0_90_83_adv, r10000_10fff_tmp24;
		BitBlock sequence_f0_90_8a, r10000_10fff_tmp25, r10000_10fff_tmp26;
		BitBlock cc_range_10280_102a0_4, sequence_f0_90_8a_adv, r10000_10fff_tmp27;
		BitBlock sequence_f0_90_8b, r10000_10fff_tmp28, sequence_f0_90_8b_adv;
		BitBlock r10000_10fff_tmp29, sequence_f0_90_8c, r10000_10fff_tmp30;
		BitBlock r10000_10fff_tmp31, cc_range_10300_10330_4, sequence_f0_90_8c_adv;
		BitBlock r10000_10fff_tmp32, sequence_f0_90_8d, r10000_10fff_tmp33;
		BitBlock r10000_10fff_tmp34, cc_range_10340_10342_4, sequence_f0_90_8d_adv;
		BitBlock r10000_10fff_tmp35, sequence_f0_90_8e, cc_range_10380_103a0_4;
		BitBlock sequence_f0_90_8e_adv, r10000_10fff_tmp36, sequence_f0_90_8f;
		BitBlock r10000_10fff_tmp37, cc_range_103c0_103c8_4, sequence_f0_90_8f_adv;
		BitBlock r10000_10fff_tmp38, sequence_f0_90_91, sequence_f0_90_91_adv;
		BitBlock r10000_10fff_tmp39, sequence_f0_90_92, sequence_f0_90_92_adv;
		BitBlock r10000_10fff_tmp40, sequence_f0_90_a0, r10000_10fff_tmp41;
		BitBlock r10000_10fff_tmp42, r10000_10fff_tmp43, r10000_10fff_tmp44;
		BitBlock r10000_10fff_tmp45, r10000_10fff_tmp46, r10000_10fff_tmp47;
		BitBlock r10000_10fff_tmp48, r10000_10fff_tmp49, r10000_10fff_tmp50;
		BitBlock r10000_10fff_tmp51, r10000_10fff_tmp52, r10000_10fff_tmp53;
		BitBlock r10000_10fff_tmp54, r10000_10fff_tmp55, cc_range_10800_1083f_4;
		BitBlock sequence_f0_90_a0_adv, r10000_10fff_tmp56, sequence_f0_90_a1;
		BitBlock sequence_f0_90_a1_adv, r10000_10fff_tmp57, sequence_f0_90_a4;
		BitBlock r10000_10fff_tmp58, r10000_10fff_tmp59, cc_range_10900_10920_4;
		BitBlock sequence_f0_90_a4_adv, r10000_10fff_tmp60, sequence_f0_90_a6;
		BitBlock r10000_10fff_tmp61, r10000_10fff_tmp62, r10000_10fff_tmp63;
		BitBlock cc_range_10980_109be_4, sequence_f0_90_a6_adv, r10000_10fff_tmp64;
		BitBlock sequence_f0_90_a8, r10000_10fff_tmp65, r10000_10fff_tmp66;
		BitBlock r10000_10fff_tmp67, r10000_10fff_tmp68, r10000_10fff_tmp69;
		BitBlock r10000_10fff_tmp70, r10000_10fff_tmp71, r10000_10fff_tmp72;
		BitBlock r10000_10fff_tmp73, cc_range_10a00_10a19_4, sequence_f0_90_a8_adv;
		BitBlock r10000_10fff_tmp74, sequence_f0_90_a9, byte_range_a0_bc;
		BitBlock sequence_f0_90_a9_adv, r10000_10fff_tmp75, sequence_f0_90_ac;
		BitBlock r10000_10fff_tmp76, sequence_f0_90_ac_adv, r10000_10fff_tmp77;
		BitBlock sequence_f0_90_ad, r10000_10fff_tmp78, cc_range_10b40_10b60_4;
		BitBlock sequence_f0_90_ad_adv, r10000_10fff_tmp79, sequence_f0_90_b0;
		BitBlock sequence_f0_90_b0_adv, r10000_10fff_tmp80, sequence_f0_90_b1;
		BitBlock sequence_f0_90_b1_adv, r10000_10fff_tmp81;




        struct_Lo.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_f0 = simd_andc(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp11 = simd_andc(tmp10, tmp4);
        byte_91 = simd_and(tmp9, tmp11);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp12));
        sequence_f0_91 = simd_and(tmp12, byte_91);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
        tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp14 = simd_andc(tmp7, tmp13);
        byte_80 = simd_andc(tmp14, tmp6);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(2), tmp15));
        sequence_f0_91_80 = simd_and(tmp15, byte_80);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(3), sequence_f0_91_adv));
        sequence_f0_91_80 = simd_and(sequence_f0_91_adv, byte_80);
        tmp16 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
        tmp17 = simd_not(tmp16);
        tmp18 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp19 = simd_or(tmp4, tmp18);
        tmp20 = simd_or(basis_bits.bit_3, tmp19);
        tmp21 = simd_or(simd_and(basis_bits.bit_2, tmp17), simd_andc(tmp20, basis_bits.bit_2));
        byte_range_83_b7 = simd_and(tmp7, tmp21);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(4), sequence_f0_91_80_adv));
        tmp22 = simd_and(sequence_f0_91_80_adv, byte_range_83_b7);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp22);
        tmp23 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp24 = simd_andc(tmp23, tmp4);
        byte_82 = simd_and(tmp14, tmp24);
        sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
        sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
        tmp25 = simd_not(basis_bits.bit_3);
        tmp26 = simd_or(simd_and(basis_bits.bit_2, tmp25), simd_andc(tmp20, basis_bits.bit_2));
        byte_range_83_af = simd_and(tmp7, tmp26);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(5), sequence_f0_91_82_adv));
        tmp27 = simd_and(sequence_f0_91_82_adv, byte_range_83_af);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp27);
        tmp28 = simd_andc(tmp18, tmp4);
        byte_83 = simd_and(tmp14, tmp28);
        sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
        sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
        tmp29 = simd_or(basis_bits.bit_5, tmp5);
        tmp30 = simd_and(basis_bits.bit_4, tmp29);
        tmp31 = simd_or(basis_bits.bit_3, tmp30);
        tmp32 = simd_not(tmp31);
        tmp33 = simd_or(simd_and(basis_bits.bit_2, tmp32), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
        byte_range_90_a8 = simd_and(tmp7, tmp33);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(6), sequence_f0_91_83_adv));
        tmp34 = simd_and(sequence_f0_91_83_adv, byte_range_90_a8);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp34);
        tmp35 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp36 = simd_andc(tmp35, tmp5);
        byte_84 = simd_and(tmp14, tmp36);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        tmp37 = simd_and(basis_bits.bit_5, tmp18);
        tmp38 = simd_or(basis_bits.bit_4, tmp37);
        tmp39 = simd_or(basis_bits.bit_3, tmp38);
        tmp40 = simd_not(tmp39);
        tmp41 = simd_or(simd_and(basis_bits.bit_2, tmp40), simd_andc(tmp20, basis_bits.bit_2));
        byte_range_83_a6 = simd_and(tmp7, tmp41);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(7), sequence_f0_91_84_adv));
        tmp42 = simd_and(sequence_f0_91_84_adv, byte_range_83_a6);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp42);
        tmp43 = simd_and(tmp35, tmp23);
        byte_86 = simd_and(tmp14, tmp43);
        sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
        sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
        tmp44 = simd_and(basis_bits.bit_3, tmp19);
        tmp45 = simd_not(tmp44);
        tmp46 = simd_or(simd_and(basis_bits.bit_2, tmp45), simd_andc(tmp20, basis_bits.bit_2));
        byte_range_83_b2 = simd_and(tmp7, tmp46);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(8), sequence_f0_91_86_adv));
        tmp47 = simd_and(sequence_f0_91_86_adv, byte_range_83_b2);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp47);
        tmp48 = simd_and(tmp35, tmp18);
        byte_87 = simd_and(tmp14, tmp48);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        tmp49 = simd_andc(tmp14, basis_bits.bit_4);
        tmp50 = simd_not(tmp5);
        tmp51 = simd_or(simd_and(basis_bits.bit_5, tmp50), simd_andc(tmp5, basis_bits.bit_5));
        byte_range_81_84 = simd_and(tmp49, tmp51);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(9), sequence_f0_91_87_adv));
        tmp52 = simd_and(sequence_f0_91_87_adv, byte_range_81_84);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp52);
        tmp53 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp54 = simd_and(tmp53, tmp23);
        byte_9a = simd_and(tmp9, tmp54);
        sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
        sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
        tmp55 = simd_or(basis_bits.bit_5, tmp18);
        tmp56 = simd_and(basis_bits.bit_4, tmp55);
        tmp57 = simd_or(basis_bits.bit_3, tmp56);
        tmp58 = simd_and(basis_bits.bit_2, tmp57);
        byte_range_80_aa = simd_andc(tmp7, tmp58);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(10), sequence_f0_91_9a_adv));
        tmp59 = simd_and(sequence_f0_91_9a_adv, byte_range_80_aa);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp59);
        byte_92 = simd_and(tmp9, tmp24);
        sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
        sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
        tmp60 = simd_and(basis_bits.bit_5, tmp5);
        tmp61 = simd_and(basis_bits.bit_4, tmp60);
        byte_range_80_8c = simd_andc(tmp14, tmp61);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(11), tmp62));
        sequence_f0_92_byte_range_80_8c = simd_and(tmp62, byte_range_80_8c);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f0_92_byte_range_80_8c, carryQ.get_carry_in(12), tmp63));
        sequence_f0_92_byte_range_80_8c_sfx = simd_and(tmp63, byte_range_80_bf);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_92_byte_range_80_8c_sfx);
        tmp64 = simd_and(byte_range_80_bf, tmp8);
        tmp65 = simd_andc(byte_range_80_bf, tmp13);
        tmp66 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp67 = simd_and(tmp66, tmp10);
        byte_8d = simd_and(tmp65, tmp67);
        carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(13), sequence_f0_92_adv));
        sequence_f0_92_8d = simd_and(sequence_f0_92_adv, byte_8d);
        tmp68 = simd_and(tmp66, tmp18);
        tmp69 = simd_or(basis_bits.bit_3, tmp68);
        tmp70 = simd_and(basis_bits.bit_2, tmp69);
        byte_range_80_ae = simd_andc(byte_range_80_bf, tmp70);
        carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f0_92_8d, carryQ.get_carry_in(14), tmp71));
        sequence_f0_92_8d_byte_range_80_ae = simd_and(tmp71, byte_range_80_ae);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_92_8d_byte_range_80_ae);
        byte_93 = simd_and(tmp64, tmp28);
        sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
        sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
        byte_range_80_8f = simd_andc(byte_range_80_bf, tmp13);
        carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(15), tmp72));
        sequence_f0_93_byte_range_80_8f = simd_and(tmp72, byte_range_80_8f);
        carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_f0_93_byte_range_80_8f, carryQ.get_carry_in(16), tmp73));
        sequence_f0_93_byte_range_80_8f_sfx = simd_and(tmp73, byte_range_80_bf);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_93_byte_range_80_8f_sfx);
        byte_90 = simd_andc(tmp64, tmp6);
        carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(17), sequence_f0_93_adv));
        sequence_f0_93_90 = simd_and(sequence_f0_93_adv, byte_90);
        carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_f0_93_90, carryQ.get_carry_in(18), tmp74));
        sequence_f0_93_90_byte_range_80_ae = simd_and(tmp74, byte_range_80_ae);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_93_90_byte_range_80_ae);
        byte_96 = simd_and(tmp64, tmp43);
        sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
        sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
        tmp75 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp76 = simd_and(byte_range_80_bf, tmp75);
        byte_range_a0_a7 = simd_andc(tmp76, basis_bits.bit_4);
        carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(19), tmp77));
        sequence_f0_96_byte_range_a0_a7 = simd_and(tmp77, byte_range_a0_a7);
        carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_f0_96_byte_range_a0_a7, carryQ.get_carry_in(20), tmp78));
        sequence_f0_96_byte_range_a0_a7_sfx = simd_and(tmp78, byte_range_80_bf);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_96_byte_range_a0_a7_sfx);
        tmp79 = simd_andc(tmp53, tmp5);
        byte_a8 = simd_and(tmp76, tmp79);
        carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(21), sequence_f0_96_adv));
        sequence_f0_96_a8 = simd_and(sequence_f0_96_adv, byte_a8);
        tmp80 = simd_and(basis_bits.bit_3, tmp30);
        tmp81 = simd_and(basis_bits.bit_2, tmp80);
        byte_range_80_b8 = simd_andc(byte_range_80_bf, tmp81);
        carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f0_96_a8, carryQ.get_carry_in(22), tmp82));
        sequence_f0_96_a8_byte_range_80_b8 = simd_and(tmp82, byte_range_80_b8);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_96_a8_byte_range_80_b8);
        tmp83 = simd_and(byte_range_80_bf, tmp2);
        tmp84 = simd_andc(tmp66, tmp5);
        byte_bc = simd_and(tmp83, tmp84);
        sequence_f0_96_bc = simd_and(sequence_f0_96_adv, byte_bc);
        carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bc, carryQ.get_carry_in(23), tmp85));
        sequence_f0_96_bc_byte_range_80_bf = simd_and(tmp85, byte_range_80_bf);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_96_bc_byte_range_80_bf);
        byte_bd = simd_and(tmp83, tmp67);
        sequence_f0_96_bd = simd_and(sequence_f0_96_adv, byte_bd);
        tmp86 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
        byte_range_80_84 = simd_andc(tmp86, tmp60);
        carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bd, carryQ.get_carry_in(24), tmp87));
        sequence_f0_96_bd_byte_range_80_84 = simd_and(tmp87, byte_range_80_84);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_96_bd_byte_range_80_84);
        tmp88 = simd_and(tmp53, tmp18);
        byte_9b = simd_and(tmp64, tmp88);
        sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
        sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
        carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(25), tmp89));
        sequence_f0_9b_80 = simd_and(tmp89, byte_80);
        carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(26), sequence_f0_9b_adv));
        sequence_f0_9b_80 = simd_and(sequence_f0_9b_adv, byte_80);
        tmp90 = simd_or(tmp4, basis_bits.bit_6);
        byte_range_80_81 = simd_andc(byte_range_80_8f, tmp90);
        carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_80, carryQ.get_carry_in(27), sequence_f0_9b_80_adv));
        tmp91 = simd_and(sequence_f0_9b_80_adv, byte_range_80_81);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp91);
        tmp92 = simd_and(tmp66, tmp23);
        byte_9e = simd_and(tmp64, tmp92);
        sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
        sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
        byte_b8 = simd_and(tmp83, tmp79);
        carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(28), tmp93));
        sequence_f0_9e_b8 = simd_and(tmp93, byte_b8);
        carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(29), sequence_f0_9e_adv));
        sequence_f0_9e_b8 = simd_and(sequence_f0_9e_adv, byte_b8);
        tmp94 = simd_andc(byte_range_80_8f, tmp4);
        tmp95 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
        tmp96 = simd_or(basis_bits.bit_4, tmp60);
        tmp97 = simd_or(basis_bits.bit_3, tmp96);
        tmp98 = simd_and(tmp95, tmp97);
        tmp99 = simd_or(tmp94, tmp98);
        tmp100 = simd_andc(tmp76, tmp4);
        tmp101 = simd_not(basis_bits.bit_7);
        tmp102 = simd_or(simd_and(basis_bits.bit_6, tmp101), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
        tmp103 = simd_and(tmp100, tmp102);
        tmp104 = simd_or(tmp99, tmp103);
        tmp105 = simd_and(tmp76, tmp36);
        tmp106 = simd_or(tmp104, tmp105);
        tmp107 = simd_and(tmp76, tmp48);
        tmp108 = simd_or(tmp106, tmp107);
        tmp109 = simd_and(byte_range_80_bf, basis_bits.bit_2);
        tmp110 = simd_not(tmp19);
        tmp111 = simd_or(simd_and(basis_bits.bit_3, tmp110), simd_andc(tmp30, basis_bits.bit_3));
        tmp112 = simd_and(tmp109, tmp111);
        tmp113 = simd_or(tmp108, tmp112);
        tmp114 = simd_and(tmp83, tmp35);
        tmp115 = simd_or(tmp113, tmp114);
        tmp116 = simd_and(tmp53, tmp10);
        tmp117 = simd_and(tmp83, tmp116);
        tmp118 = simd_or(tmp115, tmp117);
        tmp119 = simd_and(tmp83, tmp88);
        cc_range_1ee00_1ee3b_4 = simd_or(tmp118, tmp119);
        carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b8, carryQ.get_carry_in(30), sequence_f0_9e_b8_adv));
        tmp120 = simd_and(sequence_f0_9e_b8_adv, cc_range_1ee00_1ee3b_4);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp120);
        byte_b9 = simd_and(tmp83, tmp116);
        sequence_f0_9e_b9 = simd_and(sequence_f0_9e_adv, byte_b9);
        sequence_f0_9e_b9 = simd_and(sequence_f0_9e_adv, byte_b9);
        tmp121 = simd_or(tmp24, tmp48);
        tmp122 = simd_or(tmp121, tmp116);
        tmp123 = simd_or(tmp122, tmp88);
        tmp124 = simd_and(byte_range_80_8f, tmp123);
        tmp125 = simd_and(byte_range_80_8f, tmp66);
        tmp126 = simd_and(tmp125, tmp5);
        tmp127 = simd_or(tmp124, tmp126);
        tmp128 = simd_andc(tmp64, tmp4);
        tmp129 = simd_and(tmp128, tmp102);
        tmp130 = simd_or(tmp127, tmp129);
        tmp131 = simd_and(tmp64, tmp36);
        tmp132 = simd_or(tmp130, tmp131);
        tmp133 = simd_and(tmp64, tmp48);
        tmp134 = simd_or(tmp132, tmp133);
        tmp135 = simd_and(tmp64, tmp116);
        tmp136 = simd_or(tmp134, tmp135);
        tmp137 = simd_or(tmp136, byte_9b);
        tmp138 = simd_and(tmp64, tmp67);
        tmp139 = simd_or(tmp137, tmp138);
        tmp140 = simd_and(tmp64, tmp68);
        tmp141 = simd_or(tmp139, tmp140);
        tmp142 = simd_or(tmp141, tmp103);
        tmp143 = simd_or(tmp142, tmp105);
        tmp144 = simd_not(tmp55);
        tmp145 = simd_or(simd_and(basis_bits.bit_4, tmp144), simd_andc(tmp37, basis_bits.bit_4));
        tmp146 = simd_and(tmp76, tmp145);
        tmp147 = simd_or(tmp143, tmp146);
        tmp148 = simd_or(simd_and(basis_bits.bit_3, tmp110), simd_andc(tmp66, basis_bits.bit_3));
        tmp149 = simd_and(tmp109, tmp148);
        tmp150 = simd_or(tmp147, tmp149);
        tmp151 = simd_or(tmp150, tmp114);
        tmp152 = simd_and(tmp83, basis_bits.bit_4);
        tmp153 = simd_and(tmp152, tmp51);
        tmp154 = simd_or(tmp151, tmp153);
        tmp155 = simd_and(tmp83, tmp92);
        cc_range_1ee42_1ee7e_4 = simd_or(tmp154, tmp155);
        carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_b9, carryQ.get_carry_in(31), sequence_f0_9e_b9_adv));
        tmp156 = simd_and(sequence_f0_9e_b9_adv, cc_range_1ee42_1ee7e_4);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp156);
        byte_ba = simd_and(tmp83, tmp54);
        sequence_f0_9e_ba = simd_and(sequence_f0_9e_adv, byte_ba);
        sequence_f0_9e_ba = simd_and(sequence_f0_9e_adv, byte_ba);
        tmp157 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp158 = simd_and(basis_bits.bit_4, tmp157);
        tmp159 = simd_andc(byte_range_80_8f, tmp158);
        tmp160 = simd_not(tmp66);
        tmp161 = simd_or(simd_and(basis_bits.bit_3, tmp160), simd_andc(tmp56, basis_bits.bit_3));
        tmp162 = simd_and(tmp95, tmp161);
        tmp163 = simd_or(tmp159, tmp162);
        tmp164 = simd_and(tmp100, tmp5);
        tmp165 = simd_or(tmp163, tmp164);
        tmp166 = simd_not(tmp157);
        tmp167 = simd_or(simd_and(basis_bits.bit_4, tmp166), simd_andc(tmp60, basis_bits.bit_4));
        tmp168 = simd_and(tmp76, tmp167);
        tmp169 = simd_or(tmp165, tmp168);
        tmp170 = simd_and(tmp109, tmp161);
        cc_range_1ee80_1eeab_4 = simd_or(tmp169, tmp170);
        carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_ba, carryQ.get_carry_in(32), sequence_f0_9e_ba_adv));
        tmp171 = simd_and(sequence_f0_9e_ba_adv, cc_range_1ee80_1eeab_4);
        struct_Lo.cc = simd_or(struct_Lo.cc, tmp171);
        byte_range_a0_a9 = simd_andc(tmp76, tmp158);
        byte_f0_byte_range_a0_a9 = simd_and(byte_f0_adv, byte_range_a0_a9);
        carryQ.cq[33] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9, carryQ.get_carry_in(33), tmp172));
        byte_f0_byte_range_a0_a9_sfx = simd_and(tmp172, byte_range_80_bf);
        carryQ.cq[34] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_a0_a9_sfx, carryQ.get_carry_in(34), tmp173));
        byte_f0_byte_range_a0_a9_sfx_sfx = simd_and(tmp173, byte_range_80_bf);
        struct_Lo.cc = simd_or(struct_Lo.cc, byte_f0_byte_range_a0_a9_sfx_sfx);
        byte_aa = simd_and(tmp76, tmp54);
        sequence_f0_aa = simd_and(byte_f0_adv, byte_aa);
        carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(35), sequence_f0_aa_adv));
        sequence_f0_aa_80 = simd_and(sequence_f0_aa_adv, byte_80);
        tmp174 = simd_and(basis_bits.bit_3, tmp38);
        byte_range_80_96 = simd_andc(tmp95, tmp174);
        carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_80, carryQ.get_carry_in(36), tmp175));
        sequence_f0_aa_80_byte_range_80_96 = simd_and(tmp175, byte_range_80_96);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_aa_80_byte_range_80_96);
        byte_ab = simd_and(tmp76, tmp88);
        sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
        carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(37), sequence_f0_ab_adv));
        sequence_f0_ab_80 = simd_and(sequence_f0_ab_adv, byte_80);
        tmp176 = simd_and(basis_bits.bit_3, tmp96);
        tmp177 = simd_and(basis_bits.bit_2, tmp176);
        byte_range_80_b4 = simd_andc(byte_range_80_bf, tmp177);
        carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_80, carryQ.get_carry_in(38), tmp178));
        sequence_f0_ab_80_byte_range_80_b4 = simd_and(tmp178, byte_range_80_b4);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_ab_80_byte_range_80_b4);
        byte_af = simd_and(tmp76, tmp68);
        sequence_f0_af = simd_and(byte_f0_adv, byte_af);
        byte_a0 = simd_andc(tmp76, tmp6);
        carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(39), sequence_f0_af_adv));
        sequence_f0_af_a0 = simd_and(sequence_f0_af_adv, byte_a0);
        tmp179 = simd_and(tmp66, basis_bits.bit_6);
        tmp180 = simd_and(basis_bits.bit_3, tmp179);
        byte_range_80_9d = simd_andc(tmp95, tmp180);
        carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_f0_af_a0, carryQ.get_carry_in(40), tmp181));
        sequence_f0_af_a0_byte_range_80_9d = simd_and(tmp181, byte_range_80_9d);
        struct_Lo.cc = simd_or(struct_Lo.cc, sequence_f0_af_a0_byte_range_80_9d);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(41, 13))) {
          r80_7ff_tmp1 = simd_andc(tmp1, tmp13);
          byte_c2 = simd_and(r80_7ff_tmp1, tmp24);
          cc_range_aa_ba_2 = simd_and(tmp54, tmp109);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(41), byte_c2_adv));
          r80_7ff_tmp2 = simd_and(byte_c2_adv, cc_range_aa_ba_2);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp2);
          byte_c6 = simd_and(r80_7ff_tmp1, tmp43);
          byte_bb = simd_and(tmp83, tmp88);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(byte_c6, carryQ.get_carry_in(42), byte_c6_adv));
          r80_7ff_tmp3 = simd_and(byte_c6_adv, byte_bb);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp3);
          byte_c7 = simd_and(r80_7ff_tmp1, tmp48);
          byte_range_80_83 = simd_andc(byte_range_80_8f, tmp4);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(43), byte_c7_adv));
          r80_7ff_tmp4 = simd_and(byte_c7_adv, byte_range_80_83);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp4);
          byte_ca = simd_and(r80_7ff_tmp1, tmp54);
          byte_94 = simd_and(tmp64, tmp36);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(44), byte_ca_adv));
          r80_7ff_tmp5 = simd_and(byte_ca_adv, byte_94);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp5);
          r80_7ff_tmp6 = simd_and(tmp1, tmp8);
          byte_d7 = simd_and(r80_7ff_tmp6, tmp48);
          r80_7ff_tmp7 = simd_not(tmp57);
          r80_7ff_tmp8 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp7), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
          r80_7ff_tmp9 = simd_and(byte_range_80_bf, r80_7ff_tmp8);
          r80_7ff_tmp10 = simd_andc(tmp83, tmp4);
          r80_7ff_tmp11 = simd_andc(r80_7ff_tmp10, tmp18);
          cc_range_5d0_5f0_2 = simd_or(r80_7ff_tmp9, r80_7ff_tmp11);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(45), byte_d7_adv));
          r80_7ff_tmp12 = simd_and(byte_d7_adv, cc_range_5d0_5f0_2);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp12);
          byte_d8 = simd_and(r80_7ff_tmp6, tmp79);
          byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
          carryQ.cq[46] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(46), byte_d8_adv));
          r80_7ff_tmp13 = simd_and(byte_d8_adv, byte_range_a0_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp13);
          byte_d9 = simd_and(r80_7ff_tmp6, tmp116);
          r80_7ff_tmp14 = simd_or(simd_and(basis_bits.bit_4, tmp144), simd_andc(tmp29, basis_bits.bit_4));
          r80_7ff_tmp15 = simd_and(byte_range_80_8f, r80_7ff_tmp14);
          r80_7ff_tmp16 = simd_and(tmp76, tmp179);
          r80_7ff_tmp17 = simd_or(r80_7ff_tmp15, r80_7ff_tmp16);
          r80_7ff_tmp18 = simd_or(basis_bits.bit_4, tmp29);
          r80_7ff_tmp19 = simd_and(tmp83, r80_7ff_tmp18);
          cc_range_641_671_2 = simd_or(r80_7ff_tmp17, r80_7ff_tmp19);
          carryQ.cq[47] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(47), byte_d9_adv));
          r80_7ff_tmp20 = simd_and(byte_d9_adv, cc_range_641_671_2);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp20);
          byte_da = simd_and(r80_7ff_tmp6, tmp54);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(byte_da, carryQ.get_carry_in(48), byte_da_adv));
          r80_7ff_tmp21 = simd_and(byte_da_adv, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp21);
          byte_db = simd_and(r80_7ff_tmp6, tmp88);
          r80_7ff_tmp22 = simd_and(basis_bits.bit_3, tmp4);
          r80_7ff_tmp23 = simd_andc(tmp95, r80_7ff_tmp22);
          r80_7ff_tmp24 = simd_and(tmp35, tmp10);
          r80_7ff_tmp25 = simd_and(tmp64, r80_7ff_tmp24);
          r80_7ff_tmp26 = simd_or(r80_7ff_tmp23, r80_7ff_tmp25);
          r80_7ff_tmp27 = simd_or(r80_7ff_tmp26, r80_7ff_tmp16);
          r80_7ff_tmp28 = simd_or(simd_and(basis_bits.bit_5, tmp50), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r80_7ff_tmp29 = simd_and(tmp152, r80_7ff_tmp28);
          r80_7ff_tmp30 = simd_or(r80_7ff_tmp27, r80_7ff_tmp29);
          r80_7ff_tmp31 = simd_and(tmp83, tmp68);
          cc_range_6c0_6ff_2 = simd_or(r80_7ff_tmp30, r80_7ff_tmp31);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(49), byte_db_adv));
          r80_7ff_tmp32 = simd_and(byte_db_adv, cc_range_6c0_6ff_2);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp32);
          byte_dc = simd_and(r80_7ff_tmp6, tmp84);
          r80_7ff_tmp33 = simd_and(basis_bits.bit_3, tmp90);
          r80_7ff_tmp34 = simd_or(simd_and(basis_bits.bit_2, tmp25), simd_andc(r80_7ff_tmp33, basis_bits.bit_2));
          r80_7ff_tmp35 = simd_and(byte_range_80_bf, r80_7ff_tmp34);
          cc_range_710_712_2 = simd_or(byte_90, r80_7ff_tmp35);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(50), byte_dc_adv));
          r80_7ff_tmp36 = simd_and(byte_dc_adv, cc_range_710_712_2);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp36);
          byte_dd = simd_and(r80_7ff_tmp6, tmp67);
          r80_7ff_tmp37 = simd_and(tmp66, tmp5);
          r80_7ff_tmp38 = simd_or(basis_bits.bit_3, r80_7ff_tmp37);
          r80_7ff_tmp39 = simd_or(basis_bits.bit_2, r80_7ff_tmp38);
          byte_range_8d_bf = simd_and(byte_range_80_bf, r80_7ff_tmp39);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(51), byte_dd_adv));
          r80_7ff_tmp40 = simd_and(byte_dd_adv, byte_range_8d_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp40);
          byte_de = simd_and(r80_7ff_tmp6, tmp92);
          r80_7ff_tmp41 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r80_7ff_tmp42 = simd_or(basis_bits.bit_4, r80_7ff_tmp41);
          r80_7ff_tmp43 = simd_or(basis_bits.bit_3, r80_7ff_tmp42);
          r80_7ff_tmp44 = simd_and(basis_bits.bit_2, r80_7ff_tmp43);
          r80_7ff_tmp45 = simd_andc(byte_range_80_bf, r80_7ff_tmp44);
          r80_7ff_tmp46 = simd_and(tmp83, tmp11);
          cc_range_780_7b1_2 = simd_or(r80_7ff_tmp45, r80_7ff_tmp46);
          carryQ.cq[52] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(52), byte_de_adv));
          r80_7ff_tmp47 = simd_and(byte_de_adv, cc_range_780_7b1_2);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp47);
          byte_df = simd_and(r80_7ff_tmp6, tmp68);
          r80_7ff_tmp48 = simd_or(basis_bits.bit_3, tmp158);
          r80_7ff_tmp49 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp7), simd_andc(r80_7ff_tmp48, basis_bits.bit_2));
          byte_range_8a_aa = simd_and(byte_range_80_bf, r80_7ff_tmp49);
          carryQ.cq[53] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(53), byte_df_adv));
          r80_7ff_tmp50 = simd_and(byte_df_adv, byte_range_8a_aa);
          struct_Lo.cc = simd_or(struct_Lo.cc, r80_7ff_tmp50);
        }
        else {
          carryQ.CarryDequeueEnqueue(41, 13);
        }
        byte_range_e0_ef = simd_and(tmp1, tmp75);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(54, 126))) {
          byte_e0 = simd_andc(byte_range_e0_ef, tmp6);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(54), r800_ffff_tmp1));
          sequence_e0_a0 = simd_and(r800_ffff_tmp1, byte_a0);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(55), byte_e0_adv));
          sequence_e0_a0 = simd_and(byte_e0_adv, byte_a0);
          r800_ffff_tmp2 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp3 = simd_or(basis_bits.bit_4, r800_ffff_tmp2);
          r800_ffff_tmp4 = simd_and(basis_bits.bit_3, r800_ffff_tmp3);
          byte_range_80_95 = simd_andc(tmp95, r800_ffff_tmp4);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(56), sequence_e0_a0_adv));
          r800_ffff_tmp5 = simd_and(sequence_e0_a0_adv, byte_range_80_95);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp5);
          byte_a1 = simd_and(tmp76, tmp11);
          sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
          sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
          byte_range_80_98 = simd_andc(tmp95, tmp80);
          carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(57), sequence_e0_a1_adv));
          r800_ffff_tmp6 = simd_and(sequence_e0_a1_adv, byte_range_80_98);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp6);
          byte_a2 = simd_and(tmp76, tmp24);
          sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
          sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
          r800_ffff_tmp7 = simd_not(tmp60);
          r800_ffff_tmp8 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp7), simd_andc(tmp157, basis_bits.bit_4));
          r800_ffff_tmp9 = simd_andc(tmp6, r800_ffff_tmp8);
          cc_range_8a0_8a2_3 = simd_andc(tmp76, r800_ffff_tmp9);
          carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e0_a2, carryQ.get_carry_in(58), sequence_e0_a2_adv));
          r800_ffff_tmp10 = simd_and(sequence_e0_a2_adv, cc_range_8a0_8a2_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp10);
          byte_a4 = simd_and(tmp76, tmp36);
          sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
          sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
          r800_ffff_tmp11 = simd_and(basis_bits.bit_3, tmp158);
          r800_ffff_tmp12 = simd_not(r800_ffff_tmp11);
          r800_ffff_tmp13 = simd_or(basis_bits.bit_3, tmp4);
          r800_ffff_tmp14 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp12), simd_andc(r800_ffff_tmp13, basis_bits.bit_2));
          r800_ffff_tmp15 = simd_and(byte_range_80_bf, r800_ffff_tmp14);
          cc_range_904_93d_3 = simd_or(r800_ffff_tmp15, byte_bd);
          carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(59), sequence_e0_a4_adv));
          r800_ffff_tmp16 = simd_and(sequence_e0_a4_adv, cc_range_904_93d_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp16);
          r800_ffff_tmp17 = simd_and(tmp35, tmp10);
          byte_a5 = simd_and(tmp76, r800_ffff_tmp17);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          r800_ffff_tmp18 = simd_or(basis_bits.bit_3, tmp90);
          r800_ffff_tmp19 = simd_not(r800_ffff_tmp18);
          r800_ffff_tmp20 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp19), simd_andc(tmp16, basis_bits.bit_2));
          r800_ffff_tmp21 = simd_and(byte_range_80_bf, r800_ffff_tmp20);
          r800_ffff_tmp22 = simd_or(byte_90, r800_ffff_tmp21);
          r800_ffff_tmp23 = simd_andc(tmp83, basis_bits.bit_4);
          r800_ffff_tmp24 = simd_and(r800_ffff_tmp23, tmp157);
          r800_ffff_tmp25 = simd_or(r800_ffff_tmp22, r800_ffff_tmp24);
          r800_ffff_tmp26 = simd_and(tmp152, tmp29);
          cc_range_950_979_3 = simd_or(r800_ffff_tmp25, r800_ffff_tmp26);
          carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(60), sequence_e0_a5_adv));
          r800_ffff_tmp27 = simd_and(sequence_e0_a5_adv, cc_range_950_979_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp27);
          byte_a6 = simd_and(tmp76, tmp43);
          sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
          sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
          r800_ffff_tmp28 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp7), simd_andc(tmp60, basis_bits.bit_4));
          r800_ffff_tmp29 = simd_and(byte_range_80_8f, r800_ffff_tmp28);
          r800_ffff_tmp30 = simd_not(tmp6);
          r800_ffff_tmp31 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp30), simd_andc(tmp68, basis_bits.bit_3));
          r800_ffff_tmp32 = simd_and(tmp95, r800_ffff_tmp31);
          r800_ffff_tmp33 = simd_or(r800_ffff_tmp29, r800_ffff_tmp32);
          r800_ffff_tmp34 = simd_or(simd_and(basis_bits.bit_2, tmp32), simd_andc(tmp44, basis_bits.bit_2));
          r800_ffff_tmp35 = simd_and(byte_range_80_bf, r800_ffff_tmp34);
          r800_ffff_tmp36 = simd_or(r800_ffff_tmp33, r800_ffff_tmp35);
          r800_ffff_tmp37 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp30), simd_andc(tmp158, basis_bits.bit_3));
          r800_ffff_tmp38 = simd_and(tmp109, r800_ffff_tmp37);
          r800_ffff_tmp39 = simd_or(r800_ffff_tmp36, r800_ffff_tmp38);
          r800_ffff_tmp40 = simd_and(tmp83, tmp24);
          r800_ffff_tmp41 = simd_or(r800_ffff_tmp39, r800_ffff_tmp40);
          r800_ffff_tmp42 = simd_or(simd_and(basis_bits.bit_4, tmp166), simd_andc(r800_ffff_tmp2, basis_bits.bit_4));
          r800_ffff_tmp43 = simd_and(tmp83, r800_ffff_tmp42);
          r800_ffff_tmp44 = simd_or(r800_ffff_tmp41, r800_ffff_tmp43);
          cc_range_985_9bd_3 = simd_or(r800_ffff_tmp44, byte_bd);
          carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(61), sequence_e0_a6_adv));
          r800_ffff_tmp45 = simd_and(sequence_e0_a6_adv, cc_range_985_9bd_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp45);
          byte_a7 = simd_and(tmp76, tmp48);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          r800_ffff_tmp46 = simd_and(byte_range_80_8f, tmp92);
          r800_ffff_tmp47 = simd_andc(tmp66, basis_bits.bit_6);
          r800_ffff_tmp48 = simd_and(tmp64, r800_ffff_tmp47);
          r800_ffff_tmp49 = simd_or(r800_ffff_tmp46, r800_ffff_tmp48);
          r800_ffff_tmp50 = simd_and(basis_bits.bit_3, tmp68);
          r800_ffff_tmp51 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp19), simd_andc(r800_ffff_tmp50, basis_bits.bit_2));
          r800_ffff_tmp52 = simd_and(byte_range_80_bf, r800_ffff_tmp51);
          r800_ffff_tmp53 = simd_or(r800_ffff_tmp49, r800_ffff_tmp52);
          r800_ffff_tmp54 = simd_andc(tmp83, tmp90);
          cc_range_9ce_9f0_3 = simd_or(r800_ffff_tmp53, r800_ffff_tmp54);
          carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(62), sequence_e0_a7_adv));
          r800_ffff_tmp55 = simd_and(sequence_e0_a7_adv, cc_range_9ce_9f0_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp55);
          sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
          sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
          r800_ffff_tmp56 = simd_or(simd_and(basis_bits.bit_4, tmp144), simd_andc(tmp60, basis_bits.bit_4));
          r800_ffff_tmp57 = simd_and(byte_range_80_8f, r800_ffff_tmp56);
          r800_ffff_tmp58 = simd_or(r800_ffff_tmp57, r800_ffff_tmp32);
          r800_ffff_tmp59 = simd_or(r800_ffff_tmp58, r800_ffff_tmp35);
          r800_ffff_tmp60 = simd_or(r800_ffff_tmp59, r800_ffff_tmp38);
          r800_ffff_tmp61 = simd_andc(basis_bits.bit_6, tmp4);
          r800_ffff_tmp62 = simd_and(tmp83, r800_ffff_tmp61);
          r800_ffff_tmp63 = simd_or(r800_ffff_tmp60, r800_ffff_tmp62);
          r800_ffff_tmp64 = simd_and(tmp114, tmp102);
          r800_ffff_tmp65 = simd_or(r800_ffff_tmp63, r800_ffff_tmp64);
          r800_ffff_tmp66 = simd_andc(tmp53, basis_bits.bit_6);
          r800_ffff_tmp67 = simd_and(tmp83, r800_ffff_tmp66);
          cc_range_a05_a38_3 = simd_or(r800_ffff_tmp65, r800_ffff_tmp67);
          carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(63), sequence_e0_a8_adv));
          r800_ffff_tmp68 = simd_and(sequence_e0_a8_adv, cc_range_a05_a38_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp68);
          byte_a9 = simd_and(tmp76, tmp116);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          r800_ffff_tmp69 = simd_and(tmp64, basis_bits.bit_4);
          r800_ffff_tmp70 = simd_and(r800_ffff_tmp69, tmp51);
          r800_ffff_tmp71 = simd_or(r800_ffff_tmp70, byte_9e);
          r800_ffff_tmp72 = simd_or(simd_and(basis_bits.bit_5, tmp50), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp73 = simd_and(r800_ffff_tmp23, r800_ffff_tmp72);
          cc_range_a59_a72_3 = simd_or(r800_ffff_tmp71, r800_ffff_tmp73);
          carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(64), sequence_e0_a9_adv));
          r800_ffff_tmp74 = simd_and(sequence_e0_a9_adv, cc_range_a59_a72_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp74);
          sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
          sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
          r800_ffff_tmp75 = simd_not(r800_ffff_tmp2);
          r800_ffff_tmp76 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp75), simd_andc(tmp60, basis_bits.bit_4));
          r800_ffff_tmp77 = simd_and(byte_range_80_8f, r800_ffff_tmp76);
          r800_ffff_tmp78 = simd_not(tmp90);
          r800_ffff_tmp79 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp78), simd_andc(tmp68, basis_bits.bit_3));
          r800_ffff_tmp80 = simd_and(tmp95, r800_ffff_tmp79);
          r800_ffff_tmp81 = simd_or(r800_ffff_tmp77, r800_ffff_tmp80);
          r800_ffff_tmp82 = simd_or(r800_ffff_tmp81, r800_ffff_tmp35);
          r800_ffff_tmp83 = simd_or(r800_ffff_tmp82, r800_ffff_tmp38);
          r800_ffff_tmp84 = simd_or(r800_ffff_tmp83, r800_ffff_tmp62);
          r800_ffff_tmp85 = simd_and(tmp83, tmp167);
          r800_ffff_tmp86 = simd_or(r800_ffff_tmp84, r800_ffff_tmp85);
          cc_range_a85_abd_3 = simd_or(r800_ffff_tmp86, byte_bd);
          carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(65), sequence_e0_aa_adv));
          r800_ffff_tmp87 = simd_and(sequence_e0_aa_adv, cc_range_a85_abd_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp87);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          r800_ffff_tmp88 = simd_andc(tmp76, tmp90);
          cc_range_ad0_ae0_3 = simd_or(byte_90, r800_ffff_tmp88);
          carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(66), sequence_e0_ab_adv));
          r800_ffff_tmp89 = simd_and(sequence_e0_ab_adv, cc_range_ad0_ae0_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp89);
          byte_ac = simd_and(tmp76, tmp84);
          sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
          sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
          r800_ffff_tmp90 = simd_or(r800_ffff_tmp39, r800_ffff_tmp62);
          r800_ffff_tmp91 = simd_or(r800_ffff_tmp90, r800_ffff_tmp85);
          cc_range_b05_b3d_3 = simd_or(r800_ffff_tmp91, byte_bd);
          carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(67), sequence_e0_ac_adv));
          r800_ffff_tmp92 = simd_and(sequence_e0_ac_adv, cc_range_b05_b3d_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp92);
          byte_ad = simd_and(tmp76, tmp67);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          r800_ffff_tmp93 = simd_or(r800_ffff_tmp48, r800_ffff_tmp52);
          r800_ffff_tmp94 = simd_and(tmp83, tmp11);
          cc_range_b5c_b71_3 = simd_or(r800_ffff_tmp93, r800_ffff_tmp94);
          carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(68), sequence_e0_ad_adv));
          r800_ffff_tmp95 = simd_and(sequence_e0_ad_adv, cc_range_b5c_b71_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp95);
          byte_ae = simd_and(tmp76, tmp92);
          sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
          sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
          r800_ffff_tmp96 = simd_or(tmp28, r800_ffff_tmp56);
          r800_ffff_tmp97 = simd_and(byte_range_80_8f, r800_ffff_tmp96);
          r800_ffff_tmp98 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp30), simd_andc(tmp179, basis_bits.bit_3));
          r800_ffff_tmp99 = simd_and(tmp95, r800_ffff_tmp98);
          r800_ffff_tmp100 = simd_or(r800_ffff_tmp97, r800_ffff_tmp99);
          r800_ffff_tmp101 = simd_andc(tmp64, basis_bits.bit_4);
          r800_ffff_tmp102 = simd_not(basis_bits.bit_6);
          r800_ffff_tmp103 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp102), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp104 = simd_and(r800_ffff_tmp101, r800_ffff_tmp103);
          r800_ffff_tmp105 = simd_or(r800_ffff_tmp100, r800_ffff_tmp104);
          r800_ffff_tmp106 = simd_and(tmp64, tmp53);
          r800_ffff_tmp107 = simd_and(r800_ffff_tmp106, tmp102);
          r800_ffff_tmp108 = simd_or(r800_ffff_tmp105, r800_ffff_tmp107);
          r800_ffff_tmp109 = simd_and(tmp64, tmp84);
          r800_ffff_tmp110 = simd_or(r800_ffff_tmp108, r800_ffff_tmp109);
          r800_ffff_tmp111 = simd_and(tmp64, tmp179);
          r800_ffff_tmp112 = simd_or(r800_ffff_tmp110, r800_ffff_tmp111);
          r800_ffff_tmp113 = simd_or(simd_and(basis_bits.bit_5, tmp50), simd_andc(tmp18, basis_bits.bit_5));
          r800_ffff_tmp114 = simd_and(byte_range_a0_a7, r800_ffff_tmp113);
          r800_ffff_tmp115 = simd_or(r800_ffff_tmp112, r800_ffff_tmp114);
          r800_ffff_tmp116 = simd_and(tmp76, tmp53);
          r800_ffff_tmp117 = simd_andc(r800_ffff_tmp116, tmp18);
          r800_ffff_tmp118 = simd_or(r800_ffff_tmp115, r800_ffff_tmp117);
          r800_ffff_tmp119 = simd_not(tmp158);
          r800_ffff_tmp120 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp119), simd_andc(tmp179, basis_bits.bit_3));
          r800_ffff_tmp121 = simd_and(tmp109, r800_ffff_tmp120);
          cc_range_b83_bae_3 = simd_or(r800_ffff_tmp118, r800_ffff_tmp121);
          carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(69), sequence_e0_ae_adv));
          r800_ffff_tmp122 = simd_and(sequence_e0_ae_adv, cc_range_b83_bae_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp122);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(70), sequence_e0_af_adv));
          r800_ffff_tmp123 = simd_and(sequence_e0_af_adv, byte_90);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp123);
          byte_b0 = simd_andc(tmp83, tmp6);
          sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
          sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
          r800_ffff_tmp124 = simd_or(r800_ffff_tmp29, r800_ffff_tmp99);
          r800_ffff_tmp125 = simd_and(basis_bits.bit_3, tmp90);
          r800_ffff_tmp126 = simd_or(simd_and(basis_bits.bit_2, tmp32), simd_andc(r800_ffff_tmp125, basis_bits.bit_2));
          r800_ffff_tmp127 = simd_and(byte_range_80_bf, r800_ffff_tmp126);
          r800_ffff_tmp128 = simd_or(r800_ffff_tmp124, r800_ffff_tmp127);
          r800_ffff_tmp129 = simd_not(tmp4);
          r800_ffff_tmp130 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp129), simd_andc(tmp158, basis_bits.bit_3));
          r800_ffff_tmp131 = simd_and(tmp109, r800_ffff_tmp130);
          r800_ffff_tmp132 = simd_or(r800_ffff_tmp128, r800_ffff_tmp131);
          r800_ffff_tmp133 = simd_or(r800_ffff_tmp132, r800_ffff_tmp85);
          cc_range_c05_c3d_3 = simd_or(r800_ffff_tmp133, byte_bd);
          carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(71), sequence_e0_b0_adv));
          r800_ffff_tmp134 = simd_and(sequence_e0_b0_adv, cc_range_c05_c3d_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp134);
          byte_b1 = simd_and(tmp83, tmp11);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          r800_ffff_tmp135 = simd_and(tmp64, r800_ffff_tmp66);
          cc_range_c58_c60_3 = simd_or(r800_ffff_tmp135, r800_ffff_tmp88);
          carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(72), sequence_e0_b1_adv));
          r800_ffff_tmp136 = simd_and(sequence_e0_b1_adv, cc_range_c58_c60_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp136);
          byte_b2 = simd_and(tmp83, tmp24);
          sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
          sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
          cc_range_c85_cbd_3 = simd_or(r800_ffff_tmp133, byte_bd);
          carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(73), sequence_e0_b2_adv));
          r800_ffff_tmp137 = simd_and(sequence_e0_b2_adv, cc_range_c85_cbd_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp137);
          byte_b3 = simd_and(tmp83, tmp28);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          r800_ffff_tmp138 = simd_or(byte_9e, r800_ffff_tmp88);
          r800_ffff_tmp139 = simd_andc(tmp83, tmp4);
          r800_ffff_tmp140 = simd_and(r800_ffff_tmp139, tmp102);
          cc_range_cde_cf1_3 = simd_or(r800_ffff_tmp138, r800_ffff_tmp140);
          carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(74), sequence_e0_b3_adv));
          r800_ffff_tmp141 = simd_and(sequence_e0_b3_adv, cc_range_cde_cf1_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp141);
          byte_b4 = simd_and(tmp83, tmp36);
          sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
          sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
          r800_ffff_tmp142 = simd_and(basis_bits.bit_3, tmp56);
          r800_ffff_tmp143 = simd_not(r800_ffff_tmp142);
          r800_ffff_tmp144 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp143), simd_andc(r800_ffff_tmp125, basis_bits.bit_2));
          r800_ffff_tmp145 = simd_and(byte_range_80_bf, r800_ffff_tmp144);
          r800_ffff_tmp146 = simd_or(r800_ffff_tmp124, r800_ffff_tmp145);
          cc_range_d05_d3d_3 = simd_or(r800_ffff_tmp146, byte_bd);
          carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(75), sequence_e0_b4_adv));
          r800_ffff_tmp147 = simd_and(sequence_e0_b4_adv, cc_range_d05_d3d_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp147);
          byte_b5 = simd_and(tmp83, r800_ffff_tmp17);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          r800_ffff_tmp148 = simd_or(r800_ffff_tmp46, r800_ffff_tmp88);
          r800_ffff_tmp149 = simd_and(tmp152, tmp157);
          cc_range_d4e_d7a_3 = simd_or(r800_ffff_tmp148, r800_ffff_tmp149);
          carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(76), sequence_e0_b5_adv));
          r800_ffff_tmp150 = simd_and(sequence_e0_b5_adv, cc_range_d4e_d7a_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp150);
          byte_b6 = simd_and(tmp83, tmp43);
          sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
          sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
          r800_ffff_tmp151 = simd_not(tmp38);
          r800_ffff_tmp152 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp151), simd_andc(tmp96, basis_bits.bit_3));
          r800_ffff_tmp153 = simd_and(tmp95, r800_ffff_tmp152);
          r800_ffff_tmp154 = simd_not(r800_ffff_tmp125);
          r800_ffff_tmp155 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp154), simd_andc(r800_ffff_tmp11, basis_bits.bit_2));
          r800_ffff_tmp156 = simd_and(byte_range_80_bf, r800_ffff_tmp155);
          r800_ffff_tmp157 = simd_or(r800_ffff_tmp153, r800_ffff_tmp156);
          r800_ffff_tmp158 = simd_not(basis_bits.bit_5);
          r800_ffff_tmp159 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp158), simd_andc(tmp55, basis_bits.bit_4));
          r800_ffff_tmp160 = simd_and(tmp83, r800_ffff_tmp159);
          r800_ffff_tmp161 = simd_or(r800_ffff_tmp157, r800_ffff_tmp160);
          cc_range_d85_dbd_3 = simd_or(r800_ffff_tmp161, byte_bd);
          carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(77), sequence_e0_b6_adv));
          r800_ffff_tmp162 = simd_and(sequence_e0_b6_adv, cc_range_d85_dbd_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp162);
          byte_b7 = simd_and(tmp83, tmp48);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          byte_range_80_86 = simd_andc(tmp86, tmp37);
          carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(78), sequence_e0_b7_adv));
          r800_ffff_tmp163 = simd_and(sequence_e0_b7_adv, byte_range_80_86);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp163);
          sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
          sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
          r800_ffff_tmp164 = simd_and(basis_bits.bit_3, tmp6);
          r800_ffff_tmp165 = simd_not(r800_ffff_tmp164);
          r800_ffff_tmp166 = simd_or(basis_bits.bit_3, tmp6);
          r800_ffff_tmp167 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp165), simd_andc(r800_ffff_tmp166, basis_bits.bit_2));
          r800_ffff_tmp168 = simd_and(byte_range_80_bf, r800_ffff_tmp167);
          cc_range_e01_e32_3 = simd_or(r800_ffff_tmp168, r800_ffff_tmp62);
          carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(79), sequence_e0_b8_adv));
          r800_ffff_tmp169 = simd_and(sequence_e0_b8_adv, cc_range_e01_e32_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp169);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          byte_range_80_85 = simd_andc(tmp86, r800_ffff_tmp2);
          carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(80), sequence_e0_b9_adv));
          r800_ffff_tmp170 = simd_and(sequence_e0_b9_adv, byte_range_80_85);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp170);
          sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
          sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
          r800_ffff_tmp171 = simd_and(tmp94, tmp102);
          r800_ffff_tmp172 = simd_and(byte_range_80_8f, tmp36);
          r800_ffff_tmp173 = simd_or(r800_ffff_tmp171, r800_ffff_tmp172);
          r800_ffff_tmp174 = simd_not(tmp29);
          r800_ffff_tmp175 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp174), simd_andc(tmp37, basis_bits.bit_4));
          r800_ffff_tmp176 = simd_and(byte_range_80_8f, r800_ffff_tmp175);
          r800_ffff_tmp177 = simd_or(r800_ffff_tmp173, r800_ffff_tmp176);
          r800_ffff_tmp178 = simd_and(byte_range_80_8f, tmp54);
          r800_ffff_tmp179 = simd_or(r800_ffff_tmp177, r800_ffff_tmp178);
          r800_ffff_tmp180 = simd_and(byte_range_80_8f, tmp67);
          r800_ffff_tmp181 = simd_or(r800_ffff_tmp179, r800_ffff_tmp180);
          r800_ffff_tmp182 = simd_and(tmp64, tmp35);
          r800_ffff_tmp183 = simd_or(r800_ffff_tmp181, r800_ffff_tmp182);
          r800_ffff_tmp184 = simd_and(r800_ffff_tmp69, tmp29);
          r800_ffff_tmp185 = simd_or(r800_ffff_tmp183, r800_ffff_tmp184);
          r800_ffff_tmp186 = simd_or(r800_ffff_tmp185, tmp164);
          r800_ffff_tmp187 = simd_or(r800_ffff_tmp186, byte_a5);
          r800_ffff_tmp188 = simd_or(r800_ffff_tmp187, byte_a7);
          r800_ffff_tmp189 = simd_and(tmp53, basis_bits.bit_6);
          r800_ffff_tmp190 = simd_and(tmp76, r800_ffff_tmp189);
          r800_ffff_tmp191 = simd_or(r800_ffff_tmp188, r800_ffff_tmp190);
          r800_ffff_tmp192 = simd_and(tmp66, tmp5);
          r800_ffff_tmp193 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp30), simd_andc(r800_ffff_tmp192, basis_bits.bit_3));
          r800_ffff_tmp194 = simd_and(tmp109, r800_ffff_tmp193);
          r800_ffff_tmp195 = simd_or(r800_ffff_tmp191, r800_ffff_tmp194);
          r800_ffff_tmp196 = simd_or(r800_ffff_tmp195, r800_ffff_tmp62);
          cc_range_e81_ebd_3 = simd_or(r800_ffff_tmp196, byte_bd);
          carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(81), sequence_e0_ba_adv));
          r800_ffff_tmp197 = simd_and(sequence_e0_ba_adv, cc_range_e81_ebd_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp197);
          byte_bb = simd_and(tmp83, tmp88);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          r800_ffff_tmp198 = simd_and(tmp64, tmp66);
          cc_range_ec0_edc_3 = simd_or(byte_range_80_84, r800_ffff_tmp198);
          carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(82), sequence_e0_bb_adv));
          r800_ffff_tmp199 = simd_and(sequence_e0_bb_adv, cc_range_ec0_edc_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp199);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(83), sequence_e0_bc_adv));
          r800_ffff_tmp200 = simd_and(sequence_e0_bc_adv, byte_80);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp200);
          sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
          sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
          r800_ffff_tmp201 = simd_or(basis_bits.bit_3, r800_ffff_tmp192);
          r800_ffff_tmp202 = simd_not(r800_ffff_tmp201);
          r800_ffff_tmp203 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp202), simd_andc(tmp31, basis_bits.bit_2));
          r800_ffff_tmp204 = simd_and(byte_range_80_bf, r800_ffff_tmp203);
          cc_range_f40_f49_3 = simd_or(tmp86, r800_ffff_tmp204);
          carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(84), sequence_e0_bd_adv));
          r800_ffff_tmp205 = simd_and(sequence_e0_bd_adv, cc_range_f40_f49_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp205);
          byte_be = simd_and(tmp83, tmp92);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          r800_ffff_tmp206 = simd_and(byte_range_80_8f, basis_bits.bit_4);
          byte_range_88_8c = simd_andc(r800_ffff_tmp206, tmp60);
          carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(85), sequence_e0_be_adv));
          r800_ffff_tmp207 = simd_and(sequence_e0_be_adv, byte_range_88_8c);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp207);
          byte_e1 = simd_and(byte_range_e0_ef, tmp11);
          carryQ.cq[86] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(86), r800_ffff_tmp208));
          sequence_e1_80 = simd_and(r800_ffff_tmp208, byte_80);
          carryQ.cq[87] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(87), byte_e1_adv));
          sequence_e1_80 = simd_and(byte_e1_adv, byte_80);
          r800_ffff_tmp209 = simd_andc(byte_range_80_bf, tmp58);
          r800_ffff_tmp210 = simd_and(tmp83, tmp68);
          cc_range_1000_103f_3 = simd_or(r800_ffff_tmp209, r800_ffff_tmp210);
          carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(88), sequence_e1_80_adv));
          r800_ffff_tmp211 = simd_and(sequence_e1_80_adv, cc_range_1000_103f_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp211);
          byte_81 = simd_and(byte_range_80_8f, tmp11);
          sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
          sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
          r800_ffff_tmp212 = simd_andc(r800_ffff_tmp101, r800_ffff_tmp2);
          r800_ffff_tmp213 = simd_and(r800_ffff_tmp69, r800_ffff_tmp103);
          r800_ffff_tmp214 = simd_or(r800_ffff_tmp212, r800_ffff_tmp213);
          r800_ffff_tmp215 = simd_or(r800_ffff_tmp214, byte_a1);
          r800_ffff_tmp216 = simd_and(tmp76, tmp35);
          r800_ffff_tmp217 = simd_and(r800_ffff_tmp216, tmp102);
          r800_ffff_tmp218 = simd_or(r800_ffff_tmp215, r800_ffff_tmp217);
          r800_ffff_tmp219 = simd_and(tmp109, r800_ffff_tmp98);
          r800_ffff_tmp220 = simd_or(r800_ffff_tmp218, r800_ffff_tmp219);
          r800_ffff_tmp221 = simd_and(tmp83, tmp96);
          cc_range_1050_1075_3 = simd_or(r800_ffff_tmp220, r800_ffff_tmp221);
          carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(89), sequence_e1_81_adv));
          r800_ffff_tmp222 = simd_and(sequence_e1_81_adv, cc_range_1050_1075_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp222);
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          r800_ffff_tmp223 = simd_andc(tmp90, tmp92);
          cc_range_1080_108e_3 = simd_andc(byte_range_80_8f, r800_ffff_tmp223);
          carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(90), sequence_e1_82_adv));
          r800_ffff_tmp224 = simd_and(sequence_e1_82_adv, cc_range_1080_108e_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp224);
          sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
          sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
          r800_ffff_tmp225 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp143), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
          r800_ffff_tmp226 = simd_and(byte_range_80_bf, r800_ffff_tmp225);
          r800_ffff_tmp227 = simd_and(tmp83, tmp66);
          r800_ffff_tmp228 = simd_and(r800_ffff_tmp227, tmp5);
          cc_range_10d0_10fd_3 = simd_or(r800_ffff_tmp226, r800_ffff_tmp228);
          carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(91), sequence_e1_83_adv));
          r800_ffff_tmp229 = simd_and(sequence_e1_83_adv, cc_range_10d0_10fd_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp229);
          r800_ffff_tmp230 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp174), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          byte_range_84_88 = simd_and(byte_range_80_8f, r800_ffff_tmp230);
          byte_e1_byte_range_84_88 = simd_and(byte_e1_adv, byte_range_84_88);
          carryQ.cq[92] = carryout2carry(pablo_blk_Advance(byte_e1_byte_range_84_88, carryQ.get_carry_in(92), r800_ffff_tmp231));
          byte_e1_byte_range_84_88_sfx = simd_and(r800_ffff_tmp231, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, byte_e1_byte_range_84_88_sfx);
          byte_89 = simd_and(byte_range_80_8f, tmp116);
          sequence_e1_89 = simd_and(byte_e1_adv, byte_89);
          byte_range_80_88 = simd_andc(byte_range_80_8f, tmp30);
          carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e1_89, carryQ.get_carry_in(93), r800_ffff_tmp232));
          sequence_e1_89_byte_range_80_88 = simd_and(r800_ffff_tmp232, byte_range_80_88);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_89_byte_range_80_88);
          byte_8a = simd_and(byte_range_80_8f, tmp54);
          sequence_e1_8a = simd_and(byte_e1_adv, byte_8a);
          carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_e1_8a, carryQ.get_carry_in(94), r800_ffff_tmp233));
          sequence_e1_8a_byte_range_80_88 = simd_and(r800_ffff_tmp233, byte_range_80_88);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_8a_byte_range_80_88);
          byte_8b = simd_and(byte_range_80_8f, tmp88);
          sequence_e1_8b = simd_and(byte_e1_adv, byte_8b);
          carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_e1_8b, carryQ.get_carry_in(95), r800_ffff_tmp234));
          sequence_e1_8b_80 = simd_and(r800_ffff_tmp234, byte_80);
          byte_8c = simd_and(byte_range_80_8f, tmp84);
          sequence_e1_8c = simd_and(byte_e1_adv, byte_8c);
          byte_range_80_90 = simd_andc(tmp95, r800_ffff_tmp164);
          carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_e1_8c, carryQ.get_carry_in(96), r800_ffff_tmp235));
          sequence_e1_8c_byte_range_80_90 = simd_and(r800_ffff_tmp235, byte_range_80_90);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_8c_byte_range_80_90);
          sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
          byte_range_80_9a = simd_andc(tmp95, r800_ffff_tmp142);
          carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(97), r800_ffff_tmp236));
          sequence_e1_8d_byte_range_80_9a = simd_and(r800_ffff_tmp236, byte_range_80_9a);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_8d_byte_range_80_9a);
          byte_8e = simd_and(byte_range_80_8f, tmp92);
          sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
          carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(98), r800_ffff_tmp237));
          sequence_e1_8e_byte_range_80_8f = simd_and(r800_ffff_tmp237, byte_range_80_8f);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_8e_byte_range_80_8f);
          byte_8f = simd_and(byte_range_80_8f, tmp68);
          sequence_e1_8f = simd_and(byte_e1_adv, byte_8f);
          carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_e1_8f, carryQ.get_carry_in(99), r800_ffff_tmp238));
          sequence_e1_8f_byte_range_80_b4 = simd_and(r800_ffff_tmp238, byte_range_80_b4);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_8f_byte_range_80_b4);
          sequence_e1_90 = simd_and(byte_e1_adv, byte_90);
          r800_ffff_tmp239 = simd_or(basis_bits.bit_2, r800_ffff_tmp166);
          byte_range_81_bf = simd_and(byte_range_80_bf, r800_ffff_tmp239);
          carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_e1_90, carryQ.get_carry_in(100), r800_ffff_tmp240));
          sequence_e1_90_byte_range_81_bf = simd_and(r800_ffff_tmp240, byte_range_81_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_90_byte_range_81_bf);
          sequence_e1_91 = simd_and(byte_e1_adv, byte_91);
          carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_e1_91, carryQ.get_carry_in(101), r800_ffff_tmp241));
          sequence_e1_91_byte_range_80_bf = simd_and(r800_ffff_tmp241, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_91_byte_range_80_bf);
          byte_99 = simd_and(tmp64, tmp116);
          sequence_e1_99 = simd_and(byte_e1_adv, byte_99);
          r800_ffff_tmp242 = simd_and(basis_bits.bit_2, r800_ffff_tmp201);
          byte_range_80_ac = simd_andc(byte_range_80_bf, r800_ffff_tmp242);
          carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_e1_99, carryQ.get_carry_in(102), r800_ffff_tmp243));
          sequence_e1_99_byte_range_80_ac = simd_and(r800_ffff_tmp243, byte_range_80_ac);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_99_byte_range_80_ac);
          sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
          r800_ffff_tmp244 = simd_not(tmp56);
          r800_ffff_tmp245 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp244), simd_andc(tmp6, basis_bits.bit_3));
          byte_range_81_9a = simd_and(tmp95, r800_ffff_tmp245);
          carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(103), r800_ffff_tmp246));
          sequence_e1_9a_byte_range_81_9a = simd_and(r800_ffff_tmp246, byte_range_81_9a);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_9a_byte_range_81_9a);
          sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
          carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(104), r800_ffff_tmp247));
          sequence_e1_9b_byte_range_80_aa = simd_and(r800_ffff_tmp247, byte_range_80_aa);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_9b_byte_range_80_aa);
          byte_9c = simd_and(tmp64, tmp84);
          sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
          carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(105), r800_ffff_tmp248));
          sequence_e1_9c_byte_range_80_8c = simd_and(r800_ffff_tmp248, byte_range_80_8c);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_9c_byte_range_80_8c);
          byte_9d = simd_and(tmp64, tmp67);
          sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
          byte_range_80_91 = simd_andc(tmp95, r800_ffff_tmp125);
          carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(106), r800_ffff_tmp249));
          sequence_e1_9d_byte_range_80_91 = simd_and(r800_ffff_tmp249, byte_range_80_91);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_9d_byte_range_80_91);
          sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
          r800_ffff_tmp250 = simd_and(basis_bits.bit_3, tmp4);
          r800_ffff_tmp251 = simd_and(basis_bits.bit_2, r800_ffff_tmp250);
          byte_range_80_b3 = simd_andc(byte_range_80_bf, r800_ffff_tmp251);
          carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(107), r800_ffff_tmp252));
          sequence_e1_9e_byte_range_80_b3 = simd_and(r800_ffff_tmp252, byte_range_80_b3);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_9e_byte_range_80_b3);
          byte_9f = simd_and(tmp64, tmp68);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(108), r800_ffff_tmp253));
          sequence_e1_9f_9c = simd_and(r800_ffff_tmp253, byte_9c);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
          carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(109), r800_ffff_tmp254));
          sequence_e1_a0_byte_range_a0_bf = simd_and(r800_ffff_tmp254, byte_range_a0_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a0_byte_range_a0_bf);
          sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
          byte_range_80_82 = simd_andc(tmp94, tmp18);
          carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(110), r800_ffff_tmp255));
          sequence_e1_a1_byte_range_80_82 = simd_and(r800_ffff_tmp255, byte_range_80_82);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a1_byte_range_80_82);
          sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
          r800_ffff_tmp256 = simd_and(basis_bits.bit_2, tmp31);
          byte_range_80_a8 = simd_andc(byte_range_80_bf, r800_ffff_tmp256);
          carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(111), r800_ffff_tmp257));
          sequence_e1_a2_byte_range_80_a8 = simd_and(r800_ffff_tmp257, byte_range_80_a8);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a2_byte_range_80_a8);
          byte_a3 = simd_and(tmp76, tmp28);
          sequence_e1_a3 = simd_and(byte_e1_adv, byte_a3);
          r800_ffff_tmp258 = simd_and(basis_bits.bit_2, r800_ffff_tmp4);
          byte_range_80_b5 = simd_andc(byte_range_80_bf, r800_ffff_tmp258);
          carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_e1_a3, carryQ.get_carry_in(112), r800_ffff_tmp259));
          sequence_e1_a3_byte_range_80_b5 = simd_and(r800_ffff_tmp259, byte_range_80_b5);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a3_byte_range_80_b5);
          sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
          r800_ffff_tmp260 = simd_and(basis_bits.bit_3, r800_ffff_tmp192);
          byte_range_80_9c = simd_andc(tmp95, r800_ffff_tmp260);
          carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(113), r800_ffff_tmp261));
          sequence_e1_a4_byte_range_80_9c = simd_and(r800_ffff_tmp261, byte_range_80_9c);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a4_byte_range_80_9c);
          sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
          r800_ffff_tmp262 = simd_or(basis_bits.bit_3, tmp179);
          r800_ffff_tmp263 = simd_not(r800_ffff_tmp262);
          r800_ffff_tmp264 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp263), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
          byte_range_90_ad = simd_and(byte_range_80_bf, r800_ffff_tmp264);
          carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(114), r800_ffff_tmp265));
          sequence_e1_a5_byte_range_90_ad = simd_and(r800_ffff_tmp265, byte_range_90_ad);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a5_byte_range_90_ad);
          sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
          r800_ffff_tmp266 = simd_or(basis_bits.bit_3, tmp66);
          r800_ffff_tmp267 = simd_and(basis_bits.bit_2, r800_ffff_tmp266);
          byte_range_80_ab = simd_andc(byte_range_80_bf, r800_ffff_tmp267);
          carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(115), r800_ffff_tmp268));
          sequence_e1_a6_byte_range_80_ab = simd_and(r800_ffff_tmp268, byte_range_80_ab);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a6_byte_range_80_ab);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          byte_range_81_87 = simd_and(tmp86, tmp29);
          carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(116), r800_ffff_tmp269));
          sequence_e1_a7_byte_range_81_87 = simd_and(r800_ffff_tmp269, byte_range_81_87);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a7_byte_range_81_87);
          sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
          carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(117), r800_ffff_tmp270));
          sequence_e1_a8_byte_range_80_96 = simd_and(r800_ffff_tmp270, byte_range_80_96);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a8_byte_range_80_96);
          sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
          byte_range_80_94 = simd_andc(tmp95, tmp176);
          carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(118), r800_ffff_tmp271));
          sequence_e1_a9_byte_range_80_94 = simd_and(r800_ffff_tmp271, byte_range_80_94);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_a9_byte_range_80_94);
          sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
          r800_ffff_tmp272 = simd_not(r800_ffff_tmp250);
          r800_ffff_tmp273 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp272), simd_andc(tmp97, basis_bits.bit_2));
          byte_range_85_b3 = simd_and(byte_range_80_bf, r800_ffff_tmp273);
          carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(119), r800_ffff_tmp274));
          sequence_e1_ac_byte_range_85_b3 = simd_and(r800_ffff_tmp274, byte_range_85_b3);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_ac_byte_range_85_b3);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          r800_ffff_tmp275 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp158), simd_andc(tmp60, basis_bits.bit_4));
          byte_range_85_8b = simd_and(byte_range_80_8f, r800_ffff_tmp275);
          carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(120), r800_ffff_tmp276));
          sequence_e1_ad_byte_range_85_8b = simd_and(r800_ffff_tmp276, byte_range_85_8b);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_ad_byte_range_85_8b);
          sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
          r800_ffff_tmp277 = simd_not(r800_ffff_tmp166);
          r800_ffff_tmp278 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp277), simd_andc(tmp20, basis_bits.bit_2));
          byte_range_83_a0 = simd_and(byte_range_80_bf, r800_ffff_tmp278);
          carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(121), r800_ffff_tmp279));
          sequence_e1_ae_byte_range_83_a0 = simd_and(r800_ffff_tmp279, byte_range_83_a0);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_ae_byte_range_83_a0);
          sequence_e1_af = simd_and(byte_e1_adv, byte_af);
          r800_ffff_tmp280 = simd_or(basis_bits.bit_3, r800_ffff_tmp3);
          r800_ffff_tmp281 = simd_and(basis_bits.bit_2, r800_ffff_tmp280);
          byte_range_80_a5 = simd_andc(byte_range_80_bf, r800_ffff_tmp281);
          carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(122), r800_ffff_tmp282));
          sequence_e1_af_byte_range_80_a5 = simd_and(r800_ffff_tmp282, byte_range_80_a5);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_af_byte_range_80_a5);
          sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
          r800_ffff_tmp283 = simd_and(basis_bits.bit_2, r800_ffff_tmp13);
          byte_range_80_a3 = simd_andc(byte_range_80_bf, r800_ffff_tmp283);
          carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(123), r800_ffff_tmp284));
          sequence_e1_b0_byte_range_80_a3 = simd_and(r800_ffff_tmp284, byte_range_80_a3);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_b0_byte_range_80_a3);
          sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
          byte_range_8d_8f = simd_and(tmp125, tmp5);
          carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(124), r800_ffff_tmp285));
          sequence_e1_b1_byte_range_8d_8f = simd_and(r800_ffff_tmp285, byte_range_8d_8f);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_b1_byte_range_8d_8f);
          sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
          r800_ffff_tmp286 = simd_and(tmp76, basis_bits.bit_4);
          byte_range_a9_ac = simd_and(r800_ffff_tmp286, tmp51);
          carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(125), r800_ffff_tmp287));
          sequence_e1_b3_byte_range_a9_ac = simd_and(r800_ffff_tmp287, byte_range_a9_ac);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e1_b3_byte_range_a9_ac);
          byte_e2 = simd_and(byte_range_e0_ef, tmp24);
          carryQ.cq[126] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(126), r800_ffff_tmp288));
          sequence_e2_84 = simd_and(r800_ffff_tmp288, byte_84);
          carryQ.cq[127] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(127), byte_e2_adv));
          sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
          r800_ffff_tmp289 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp174), simd_andc(tmp60, basis_bits.bit_4));
          byte_range_b5_b8 = simd_and(tmp83, r800_ffff_tmp289);
          carryQ.cq[128] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(128), sequence_e2_84_adv));
          r800_ffff_tmp290 = simd_and(sequence_e2_84_adv, byte_range_b5_b8);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp290);
          sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
          sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
          byte_range_b0_bf = simd_and(byte_range_80_bf, tmp2);
          carryQ.cq[129] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(129), sequence_e2_b4_adv));
          r800_ffff_tmp291 = simd_and(sequence_e2_b4_adv, byte_range_b0_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp291);
          sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
          sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
          r800_ffff_tmp292 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
          r800_ffff_tmp293 = simd_and(basis_bits.bit_2, r800_ffff_tmp292);
          byte_range_80_a7 = simd_andc(byte_range_80_bf, r800_ffff_tmp293);
          carryQ.cq[130] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(130), sequence_e2_b5_adv));
          r800_ffff_tmp294 = simd_and(sequence_e2_b5_adv, byte_range_80_a7);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp294);
          sequence_e2_b6 = simd_and(byte_e2_adv, byte_b6);
          sequence_e2_b6 = simd_and(byte_e2_adv, byte_b6);
          r800_ffff_tmp295 = simd_andc(byte_range_a0_a7, tmp37);
          r800_ffff_tmp296 = simd_or(byte_range_80_96, r800_ffff_tmp295);
          r800_ffff_tmp297 = simd_andc(r800_ffff_tmp286, tmp37);
          r800_ffff_tmp298 = simd_or(r800_ffff_tmp296, r800_ffff_tmp297);
          r800_ffff_tmp299 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
          r800_ffff_tmp300 = simd_andc(r800_ffff_tmp299, tmp37);
          r800_ffff_tmp301 = simd_or(r800_ffff_tmp298, r800_ffff_tmp300);
          r800_ffff_tmp302 = simd_and(byte_range_b0_bf, basis_bits.bit_4);
          r800_ffff_tmp303 = simd_andc(r800_ffff_tmp302, tmp37);
          cc_range_2d80_2db8_3 = simd_or(r800_ffff_tmp301, r800_ffff_tmp303);
          carryQ.cq[131] = carryout2carry(pablo_blk_Advance(sequence_e2_b6, carryQ.get_carry_in(131), sequence_e2_b6_adv));
          r800_ffff_tmp304 = simd_and(sequence_e2_b6_adv, cc_range_2d80_2db8_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp304);
          sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
          sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
          r800_ffff_tmp305 = simd_or(byte_range_80_8f, r800_ffff_tmp101);
          r800_ffff_tmp306 = simd_or(r800_ffff_tmp305, r800_ffff_tmp69);
          cc_range_2dc0_2dd8_3 = simd_andc(r800_ffff_tmp306, tmp37);
          carryQ.cq[132] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(132), sequence_e2_b7_adv));
          r800_ffff_tmp307 = simd_and(sequence_e2_b7_adv, cc_range_2dc0_2dd8_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp307);
          byte_e3 = simd_and(byte_range_e0_ef, tmp28);
          carryQ.cq[133] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(133), r800_ffff_tmp308));
          sequence_e3_80 = simd_and(r800_ffff_tmp308, byte_80);
          carryQ.cq[134] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(134), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          r800_ffff_tmp309 = simd_and(byte_range_80_8f, tmp43);
          r800_ffff_tmp310 = simd_and(byte_range_b0_bf, tmp84);
          cc_range_3006_303c_3 = simd_or(r800_ffff_tmp309, r800_ffff_tmp310);
          carryQ.cq[135] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(135), sequence_e3_80_adv));
          r800_ffff_tmp311 = simd_and(sequence_e3_80_adv, cc_range_3006_303c_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp311);
          sequence_e3_81 = simd_and(byte_e3_adv, byte_81);
          sequence_e3_81 = simd_and(byte_e3_adv, byte_81);
          carryQ.cq[136] = carryout2carry(pablo_blk_Advance(sequence_e3_81, carryQ.get_carry_in(136), sequence_e3_81_adv));
          r800_ffff_tmp312 = simd_and(sequence_e3_81_adv, byte_range_81_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp312);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          r800_ffff_tmp313 = simd_or(byte_range_80_96, byte_9f);
          r800_ffff_tmp314 = simd_and(byte_range_a0_bf, r800_ffff_tmp166);
          cc_range_3080_30a1_3 = simd_or(r800_ffff_tmp313, r800_ffff_tmp314);
          carryQ.cq[137] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(137), sequence_e3_82_adv));
          r800_ffff_tmp315 = simd_and(sequence_e3_82_adv, cc_range_3080_30a1_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp315);
          sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
          sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
          r800_ffff_tmp316 = simd_and(basis_bits.bit_2, r800_ffff_tmp142);
          r800_ffff_tmp317 = simd_andc(byte_range_80_bf, r800_ffff_tmp316);
          r800_ffff_tmp318 = simd_and(byte_range_b0_bf, tmp68);
          cc_range_30c0_30ff_3 = simd_or(r800_ffff_tmp317, r800_ffff_tmp318);
          carryQ.cq[138] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(138), sequence_e3_83_adv));
          r800_ffff_tmp319 = simd_and(sequence_e3_83_adv, cc_range_30c0_30ff_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp319);
          sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
          sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
          r800_ffff_tmp320 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp263), simd_andc(tmp97, basis_bits.bit_2));
          r800_ffff_tmp321 = simd_and(byte_range_80_bf, r800_ffff_tmp320);
          r800_ffff_tmp322 = simd_or(basis_bits.bit_4, tmp29);
          r800_ffff_tmp323 = simd_and(byte_range_b0_bf, r800_ffff_tmp322);
          cc_range_3105_3131_3 = simd_or(r800_ffff_tmp321, r800_ffff_tmp323);
          carryQ.cq[139] = carryout2carry(pablo_blk_Advance(sequence_e3_84, carryQ.get_carry_in(139), sequence_e3_84_adv));
          r800_ffff_tmp324 = simd_and(sequence_e3_84_adv, cc_range_3105_3131_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp324);
          byte_85 = simd_and(byte_range_80_8f, r800_ffff_tmp17);
          sequence_e3_85 = simd_and(byte_e3_adv, byte_85);
          sequence_e3_85 = simd_and(byte_e3_adv, byte_85);
          carryQ.cq[140] = carryout2carry(pablo_blk_Advance(sequence_e3_85, carryQ.get_carry_in(140), sequence_e3_85_adv));
          r800_ffff_tmp325 = simd_and(sequence_e3_85_adv, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp325);
          sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
          sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
          r800_ffff_tmp326 = simd_and(basis_bits.bit_4, tmp37);
          r800_ffff_tmp327 = simd_andc(byte_range_80_8f, r800_ffff_tmp326);
          r800_ffff_tmp328 = simd_andc(byte_range_a0_bf, r800_ffff_tmp142);
          cc_range_3180_31a0_3 = simd_or(r800_ffff_tmp327, r800_ffff_tmp328);
          carryQ.cq[141] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(141), sequence_e3_86_adv));
          r800_ffff_tmp329 = simd_and(sequence_e3_86_adv, cc_range_3180_31a0_3);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp329);
          sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
          sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
          carryQ.cq[142] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(142), sequence_e3_87_adv));
          r800_ffff_tmp330 = simd_and(sequence_e3_87_adv, byte_range_b0_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r800_ffff_tmp330);
          byte_range_90_bf = simd_and(byte_range_80_bf, tmp13);
          byte_e3_byte_range_90_bf = simd_and(byte_e3_adv, byte_range_90_bf);
          carryQ.cq[143] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_90_bf, carryQ.get_carry_in(143), r800_ffff_tmp331));
          byte_e3_byte_range_90_bf_sfx = simd_and(r800_ffff_tmp331, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, byte_e3_byte_range_90_bf_sfx);
          byte_e4 = simd_and(byte_range_e0_ef, tmp36);
          carryQ.cq[144] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(144), r800_ffff_tmp332));
          byte_e4_byte_range_80_b5 = simd_and(r800_ffff_tmp332, byte_range_80_b5);
          carryQ.cq[145] = carryout2carry(pablo_blk_Advance(byte_e4_byte_range_80_b5, carryQ.get_carry_in(145), r800_ffff_tmp333));
          byte_e4_byte_range_80_b5_sfx = simd_and(r800_ffff_tmp333, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, byte_e4_byte_range_80_b5_sfx);
          carryQ.cq[146] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(146), byte_e4_adv));
          sequence_e4_b6 = simd_and(byte_e4_adv, byte_b6);
          carryQ.cq[147] = carryout2carry(pablo_blk_Advance(sequence_e4_b6, carryQ.get_carry_in(147), r800_ffff_tmp334));
          sequence_e4_b6_byte_range_80_b5 = simd_and(r800_ffff_tmp334, byte_range_80_b5);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e4_b6_byte_range_80_b5);
          sequence_e4_b8 = simd_and(byte_e4_adv, byte_b8);
          carryQ.cq[148] = carryout2carry(pablo_blk_Advance(sequence_e4_b8, carryQ.get_carry_in(148), r800_ffff_tmp335));
          sequence_e4_b8_byte_range_80_bf = simd_and(r800_ffff_tmp335, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e4_b8_byte_range_80_bf);
          byte_range_e5_e8 = simd_and(byte_range_e0_ef, r800_ffff_tmp289);
          carryQ.cq[149] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8, carryQ.get_carry_in(149), r800_ffff_tmp336));
          byte_range_e5_e8_sfx = simd_and(r800_ffff_tmp336, byte_range_80_bf);
          carryQ.cq[150] = carryout2carry(pablo_blk_Advance(byte_range_e5_e8_sfx, carryQ.get_carry_in(150), r800_ffff_tmp337));
          byte_range_e5_e8_sfx_sfx = simd_and(r800_ffff_tmp337, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, byte_range_e5_e8_sfx_sfx);
          byte_e9 = simd_and(byte_range_e0_ef, tmp116);
          carryQ.cq[151] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(151), byte_e9_adv));
          sequence_e9_80 = simd_and(byte_e9_adv, byte_80);
          carryQ.cq[152] = carryout2carry(pablo_blk_Advance(sequence_e9_80, carryQ.get_carry_in(152), r800_ffff_tmp338));
          sequence_e9_80_byte_range_80_8c = simd_and(r800_ffff_tmp338, byte_range_80_8c);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_e9_80_byte_range_80_8c);
          byte_ea = simd_and(byte_range_e0_ef, tmp54);
          carryQ.cq[153] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(153), byte_ea_adv));
          sequence_ea_80 = simd_and(byte_ea_adv, byte_80);
          carryQ.cq[154] = carryout2carry(pablo_blk_Advance(sequence_ea_80, carryQ.get_carry_in(154), r800_ffff_tmp339));
          sequence_ea_80_byte_range_80_94 = simd_and(r800_ffff_tmp339, byte_range_80_94);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ea_80_byte_range_80_94);
          byte_eb = simd_and(byte_range_e0_ef, tmp88);
          carryQ.cq[155] = carryout2carry(pablo_blk_Advance(byte_eb, carryQ.get_carry_in(155), byte_eb_adv));
          sequence_eb_80 = simd_and(byte_eb_adv, byte_80);
          carryQ.cq[156] = carryout2carry(pablo_blk_Advance(sequence_eb_80, carryQ.get_carry_in(156), r800_ffff_tmp340));
          sequence_eb_80_byte_range_80_bf = simd_and(r800_ffff_tmp340, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_eb_80_byte_range_80_bf);
          byte_ed = simd_and(byte_range_e0_ef, tmp67);
          carryQ.cq[157] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(157), byte_ed_adv));
          sequence_ed_80 = simd_and(byte_ed_adv, byte_80);
          carryQ.cq[158] = carryout2carry(pablo_blk_Advance(sequence_ed_80, carryQ.get_carry_in(158), r800_ffff_tmp341));
          sequence_ed_80_byte_range_80_a3 = simd_and(r800_ffff_tmp341, byte_range_80_a3);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ed_80_byte_range_80_a3);
          byte_ef = simd_and(byte_range_e0_ef, tmp68);
          byte_range_a4_a8 = simd_and(tmp76, r800_ffff_tmp230);
          carryQ.cq[159] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(159), r800_ffff_tmp342));
          byte_ef_byte_range_a4_a8 = simd_and(r800_ffff_tmp342, byte_range_a4_a8);
          carryQ.cq[160] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_a4_a8, carryQ.get_carry_in(160), r800_ffff_tmp343));
          byte_ef_byte_range_a4_a8_sfx = simd_and(r800_ffff_tmp343, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, byte_ef_byte_range_a4_a8_sfx);
          carryQ.cq[161] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(161), byte_ef_adv));
          sequence_ef_a9 = simd_and(byte_ef_adv, byte_a9);
          r800_ffff_tmp344 = simd_and(basis_bits.bit_2, r800_ffff_tmp262);
          byte_range_80_ad = simd_andc(byte_range_80_bf, r800_ffff_tmp344);
          carryQ.cq[162] = carryout2carry(pablo_blk_Advance(sequence_ef_a9, carryQ.get_carry_in(162), r800_ffff_tmp345));
          sequence_ef_a9_byte_range_80_ad = simd_and(r800_ffff_tmp345, byte_range_80_ad);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_a9_byte_range_80_ad);
          sequence_ef_aa = simd_and(byte_ef_adv, byte_aa);
          carryQ.cq[163] = carryout2carry(pablo_blk_Advance(sequence_ef_aa, carryQ.get_carry_in(163), r800_ffff_tmp346));
          sequence_ef_aa_byte_range_80_bf = simd_and(r800_ffff_tmp346, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_aa_byte_range_80_bf);
          sequence_ef_ab = simd_and(byte_ef_adv, byte_ab);
          byte_range_80_99 = simd_andc(tmp95, r800_ffff_tmp11);
          carryQ.cq[164] = carryout2carry(pablo_blk_Advance(sequence_ef_ab, carryQ.get_carry_in(164), r800_ffff_tmp347));
          sequence_ef_ab_byte_range_80_99 = simd_and(r800_ffff_tmp347, byte_range_80_99);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_ab_byte_range_80_99);
          sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
          carryQ.cq[165] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(165), r800_ffff_tmp348));
          sequence_ef_ac_9d = simd_and(r800_ffff_tmp348, byte_9d);
          sequence_ef_ad = simd_and(byte_ef_adv, byte_ad);
          carryQ.cq[166] = carryout2carry(pablo_blk_Advance(sequence_ef_ad, carryQ.get_carry_in(166), r800_ffff_tmp349));
          sequence_ef_ad_byte_range_80_81 = simd_and(r800_ffff_tmp349, byte_range_80_81);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_ad_byte_range_80_81);
          sequence_ef_ae = simd_and(byte_ef_adv, byte_ae);
          r800_ffff_tmp350 = simd_and(basis_bits.bit_2, r800_ffff_tmp125);
          byte_range_80_b1 = simd_andc(byte_range_80_bf, r800_ffff_tmp350);
          carryQ.cq[167] = carryout2carry(pablo_blk_Advance(sequence_ef_ae, carryQ.get_carry_in(167), r800_ffff_tmp351));
          sequence_ef_ae_byte_range_80_b1 = simd_and(r800_ffff_tmp351, byte_range_80_b1);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_ae_byte_range_80_b1);
          sequence_ef_af = simd_and(byte_ef_adv, byte_af);
          r800_ffff_tmp352 = simd_or(basis_bits.bit_2, tmp44);
          byte_range_93_bf = simd_and(byte_range_80_bf, r800_ffff_tmp352);
          carryQ.cq[168] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(168), r800_ffff_tmp353));
          sequence_ef_af_byte_range_93_bf = simd_and(r800_ffff_tmp353, byte_range_93_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_af_byte_range_93_bf);
          sequence_ef_b0 = simd_and(byte_ef_adv, byte_b0);
          carryQ.cq[169] = carryout2carry(pablo_blk_Advance(sequence_ef_b0, carryQ.get_carry_in(169), r800_ffff_tmp354));
          sequence_ef_b0_byte_range_80_bf = simd_and(r800_ffff_tmp354, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_b0_byte_range_80_bf);
          sequence_ef_b4 = simd_and(byte_ef_adv, byte_b4);
          r800_ffff_tmp355 = simd_and(basis_bits.bit_2, tmp180);
          byte_range_80_bd = simd_andc(byte_range_80_bf, r800_ffff_tmp355);
          carryQ.cq[170] = carryout2carry(pablo_blk_Advance(sequence_ef_b4, carryQ.get_carry_in(170), r800_ffff_tmp356));
          sequence_ef_b4_byte_range_80_bd = simd_and(r800_ffff_tmp356, byte_range_80_bd);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_b4_byte_range_80_bd);
          sequence_ef_b5 = simd_and(byte_ef_adv, byte_b5);
          carryQ.cq[171] = carryout2carry(pablo_blk_Advance(sequence_ef_b5, carryQ.get_carry_in(171), r800_ffff_tmp357));
          sequence_ef_b5_byte_range_90_bf = simd_and(r800_ffff_tmp357, byte_range_90_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_b5_byte_range_90_bf);
          sequence_ef_b6 = simd_and(byte_ef_adv, byte_b6);
          carryQ.cq[172] = carryout2carry(pablo_blk_Advance(sequence_ef_b6, carryQ.get_carry_in(172), r800_ffff_tmp358));
          sequence_ef_b6_byte_range_80_8f = simd_and(r800_ffff_tmp358, byte_range_80_8f);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_b6_byte_range_80_8f);
          sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
          byte_range_80_87 = simd_andc(byte_range_80_8f, basis_bits.bit_4);
          carryQ.cq[173] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(173), r800_ffff_tmp359));
          sequence_ef_b7_byte_range_80_87 = simd_and(r800_ffff_tmp359, byte_range_80_87);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_b7_byte_range_80_87);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          byte_range_b0_b4 = simd_andc(r800_ffff_tmp299, tmp60);
          carryQ.cq[174] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(174), r800_ffff_tmp360));
          sequence_ef_b9_byte_range_b0_b4 = simd_and(r800_ffff_tmp360, byte_range_b0_b4);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_b9_byte_range_b0_b4);
          sequence_ef_ba = simd_and(byte_ef_adv, byte_ba);
          carryQ.cq[175] = carryout2carry(pablo_blk_Advance(sequence_ef_ba, carryQ.get_carry_in(175), r800_ffff_tmp361));
          sequence_ef_ba_byte_range_80_bf = simd_and(r800_ffff_tmp361, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_ba_byte_range_80_bf);
          sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
          r800_ffff_tmp362 = simd_and(basis_bits.bit_2, r800_ffff_tmp260);
          byte_range_80_bc = simd_andc(byte_range_80_bf, r800_ffff_tmp362);
          carryQ.cq[176] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(176), r800_ffff_tmp363));
          sequence_ef_bb_byte_range_80_bc = simd_and(r800_ffff_tmp363, byte_range_80_bc);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_bb_byte_range_80_bc);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          byte_range_a6_af = simd_and(tmp76, r800_ffff_tmp3);
          carryQ.cq[177] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(177), r800_ffff_tmp364));
          sequence_ef_bd_byte_range_a6_af = simd_and(r800_ffff_tmp364, byte_range_a6_af);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_bd_byte_range_a6_af);
          sequence_ef_be = simd_and(byte_ef_adv, byte_be);
          carryQ.cq[178] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(178), r800_ffff_tmp365));
          sequence_ef_be_byte_range_80_9d = simd_and(r800_ffff_tmp365, byte_range_80_9d);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_be_byte_range_80_9d);
          byte_bf = simd_and(byte_range_b0_bf, tmp68);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          byte_range_82_87 = simd_and(byte_range_80_87, tmp157);
          carryQ.cq[179] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(179), r800_ffff_tmp366));
          sequence_ef_bf_byte_range_82_87 = simd_and(r800_ffff_tmp366, byte_range_82_87);
          struct_Lo.cc = simd_or(struct_Lo.cc, sequence_ef_bf_byte_range_82_87);
        }
        else {
          carryQ.CarryDequeueEnqueue(54, 126);
        }
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        carryQ.cq[180] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(180), tmp182));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp182, byte_range_80_bf);
        carryQ.cq[181] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(181), tmp183));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp183, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(182, 23))) {
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          sequence_f0_90_80 = simd_and(tmp182, byte_80);
          carryQ.cq[182] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(182), sequence_f0_90_adv));
          sequence_f0_90_80 = simd_and(sequence_f0_90_adv, byte_80);
          r10000_10fff_tmp1 = simd_andc(byte_range_80_8f, tmp66);
          r10000_10fff_tmp2 = simd_and(tmp66, tmp5);
          r10000_10fff_tmp3 = simd_or(basis_bits.bit_3, r10000_10fff_tmp2);
          r10000_10fff_tmp4 = simd_or(simd_and(basis_bits.bit_2, tmp40), simd_andc(r10000_10fff_tmp3, basis_bits.bit_2));
          r10000_10fff_tmp5 = simd_and(byte_range_80_bf, r10000_10fff_tmp4);
          r10000_10fff_tmp6 = simd_or(r10000_10fff_tmp1, r10000_10fff_tmp5);
          r10000_10fff_tmp7 = simd_not(tmp56);
          r10000_10fff_tmp8 = simd_or(simd_and(basis_bits.bit_3, r10000_10fff_tmp7), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
          r10000_10fff_tmp9 = simd_and(tmp109, r10000_10fff_tmp8);
          r10000_10fff_tmp10 = simd_or(r10000_10fff_tmp6, r10000_10fff_tmp9);
          r10000_10fff_tmp11 = simd_andc(tmp66, basis_bits.bit_6);
          r10000_10fff_tmp12 = simd_and(tmp83, r10000_10fff_tmp11);
          r10000_10fff_tmp13 = simd_or(r10000_10fff_tmp10, r10000_10fff_tmp12);
          r10000_10fff_tmp14 = simd_and(tmp83, tmp68);
          cc_range_10000_1003f_4 = simd_or(r10000_10fff_tmp13, r10000_10fff_tmp14);
          carryQ.cq[183] = carryout2carry(pablo_blk_Advance(sequence_f0_90_80, carryQ.get_carry_in(183), sequence_f0_90_80_adv));
          r10000_10fff_tmp15 = simd_and(sequence_f0_90_80_adv, cc_range_10000_1003f_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp15);
          byte_81 = simd_and(byte_range_80_8f, tmp11);
          sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
          sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
          r10000_10fff_tmp16 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r10000_10fff_tmp17 = simd_and(basis_bits.bit_4, r10000_10fff_tmp16);
          r10000_10fff_tmp18 = simd_andc(tmp13, tmp8);
          r10000_10fff_tmp19 = simd_andc(byte_range_80_bf, r10000_10fff_tmp18);
          cc_range_10040_10050_4 = simd_andc(r10000_10fff_tmp19, r10000_10fff_tmp17);
          carryQ.cq[184] = carryout2carry(pablo_blk_Advance(sequence_f0_90_81, carryQ.get_carry_in(184), sequence_f0_90_81_adv));
          r10000_10fff_tmp20 = simd_and(sequence_f0_90_81_adv, cc_range_10040_10050_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp20);
          sequence_f0_90_82 = simd_and(sequence_f0_90_adv, byte_82);
          sequence_f0_90_82 = simd_and(sequence_f0_90_adv, byte_82);
          carryQ.cq[185] = carryout2carry(pablo_blk_Advance(sequence_f0_90_82, carryQ.get_carry_in(185), sequence_f0_90_82_adv));
          r10000_10fff_tmp21 = simd_and(sequence_f0_90_82_adv, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp21);
          sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
          sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
          r10000_10fff_tmp22 = simd_and(basis_bits.bit_3, tmp56);
          r10000_10fff_tmp23 = simd_and(basis_bits.bit_2, r10000_10fff_tmp22);
          byte_range_80_ba = simd_andc(byte_range_80_bf, r10000_10fff_tmp23);
          carryQ.cq[186] = carryout2carry(pablo_blk_Advance(sequence_f0_90_83, carryQ.get_carry_in(186), sequence_f0_90_83_adv));
          r10000_10fff_tmp24 = simd_and(sequence_f0_90_83_adv, byte_range_80_ba);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp24);
          byte_8a = simd_and(byte_range_80_8f, tmp54);
          sequence_f0_90_8a = simd_and(sequence_f0_90_adv, byte_8a);
          sequence_f0_90_8a = simd_and(sequence_f0_90_adv, byte_8a);
          r10000_10fff_tmp25 = simd_and(basis_bits.bit_3, r10000_10fff_tmp2);
          r10000_10fff_tmp26 = simd_andc(tmp95, r10000_10fff_tmp25);
          cc_range_10280_102a0_4 = simd_or(r10000_10fff_tmp26, tmp109);
          carryQ.cq[187] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8a, carryQ.get_carry_in(187), sequence_f0_90_8a_adv));
          r10000_10fff_tmp27 = simd_and(sequence_f0_90_8a_adv, cc_range_10280_102a0_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp27);
          byte_8b = simd_and(byte_range_80_8f, tmp88);
          sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
          sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
          r10000_10fff_tmp28 = simd_and(basis_bits.bit_3, tmp6);
          byte_range_80_90 = simd_andc(tmp95, r10000_10fff_tmp28);
          carryQ.cq[188] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(188), sequence_f0_90_8b_adv));
          r10000_10fff_tmp29 = simd_and(sequence_f0_90_8b_adv, byte_range_80_90);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp29);
          byte_8c = simd_and(byte_range_80_8f, tmp84);
          sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
          sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
          r10000_10fff_tmp30 = simd_and(basis_bits.bit_3, tmp68);
          r10000_10fff_tmp31 = simd_andc(tmp95, r10000_10fff_tmp30);
          cc_range_10300_10330_4 = simd_or(r10000_10fff_tmp31, tmp83);
          carryQ.cq[189] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(189), sequence_f0_90_8c_adv));
          r10000_10fff_tmp32 = simd_and(sequence_f0_90_8c_adv, cc_range_10300_10330_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp32);
          sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
          sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
          r10000_10fff_tmp33 = simd_or(simd_and(basis_bits.bit_4, tmp166), simd_andc(tmp157, basis_bits.bit_4));
          r10000_10fff_tmp34 = simd_andc(tmp6, r10000_10fff_tmp33);
          cc_range_10340_10342_4 = simd_andc(byte_range_80_8f, r10000_10fff_tmp34);
          carryQ.cq[190] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(190), sequence_f0_90_8d_adv));
          r10000_10fff_tmp35 = simd_and(sequence_f0_90_8d_adv, cc_range_10340_10342_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp35);
          byte_8e = simd_and(byte_range_80_8f, tmp92);
          sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
          sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
          cc_range_10380_103a0_4 = simd_or(byte_range_80_9d, tmp109);
          carryQ.cq[191] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(191), sequence_f0_90_8e_adv));
          r10000_10fff_tmp36 = simd_and(sequence_f0_90_8e_adv, cc_range_10380_103a0_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp36);
          byte_8f = simd_and(byte_range_80_8f, tmp68);
          sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
          sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
          r10000_10fff_tmp37 = simd_andc(tmp4, basis_bits.bit_4);
          cc_range_103c0_103c8_4 = simd_andc(byte_range_80_8f, r10000_10fff_tmp37);
          carryQ.cq[192] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(192), sequence_f0_90_8f_adv));
          r10000_10fff_tmp38 = simd_and(sequence_f0_90_8f_adv, cc_range_103c0_103c8_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp38);
          sequence_f0_90_91 = simd_and(sequence_f0_90_adv, byte_91);
          sequence_f0_90_91 = simd_and(sequence_f0_90_adv, byte_91);
          byte_range_90_bf = simd_and(byte_range_80_bf, tmp13);
          carryQ.cq[193] = carryout2carry(pablo_blk_Advance(sequence_f0_90_91, carryQ.get_carry_in(193), sequence_f0_90_91_adv));
          r10000_10fff_tmp39 = simd_and(sequence_f0_90_91_adv, byte_range_90_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp39);
          sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
          sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
          carryQ.cq[194] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(194), sequence_f0_90_92_adv));
          r10000_10fff_tmp40 = simd_and(sequence_f0_90_92_adv, byte_range_80_9d);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp40);
          sequence_f0_90_a0 = simd_and(sequence_f0_90_adv, byte_a0);
          sequence_f0_90_a0 = simd_and(sequence_f0_90_adv, byte_a0);
          r10000_10fff_tmp41 = simd_andc(tmp86, r10000_10fff_tmp16);
          r10000_10fff_tmp42 = simd_and(byte_range_80_8f, tmp79);
          r10000_10fff_tmp43 = simd_or(r10000_10fff_tmp41, r10000_10fff_tmp42);
          r10000_10fff_tmp44 = simd_or(basis_bits.bit_4, r10000_10fff_tmp16);
          r10000_10fff_tmp45 = simd_and(basis_bits.bit_3, r10000_10fff_tmp44);
          r10000_10fff_tmp46 = simd_not(r10000_10fff_tmp45);
          r10000_10fff_tmp47 = simd_or(basis_bits.bit_3, tmp158);
          r10000_10fff_tmp48 = simd_or(simd_and(basis_bits.bit_2, r10000_10fff_tmp46), simd_andc(r10000_10fff_tmp47, basis_bits.bit_2));
          r10000_10fff_tmp49 = simd_and(byte_range_80_bf, r10000_10fff_tmp48);
          r10000_10fff_tmp50 = simd_or(r10000_10fff_tmp43, r10000_10fff_tmp49);
          r10000_10fff_tmp51 = simd_not(tmp29);
          r10000_10fff_tmp52 = simd_or(simd_and(basis_bits.bit_4, r10000_10fff_tmp51), simd_andc(tmp37, basis_bits.bit_4));
          r10000_10fff_tmp53 = simd_and(tmp83, r10000_10fff_tmp52);
          r10000_10fff_tmp54 = simd_or(r10000_10fff_tmp50, r10000_10fff_tmp53);
          r10000_10fff_tmp55 = simd_or(r10000_10fff_tmp54, byte_bc);
          cc_range_10800_1083f_4 = simd_or(r10000_10fff_tmp55, r10000_10fff_tmp14);
          carryQ.cq[195] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a0, carryQ.get_carry_in(195), sequence_f0_90_a0_adv));
          r10000_10fff_tmp56 = simd_and(sequence_f0_90_a0_adv, cc_range_10800_1083f_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp56);
          byte_a1 = simd_and(tmp76, tmp11);
          sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
          sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
          byte_range_80_95 = simd_andc(tmp95, r10000_10fff_tmp45);
          carryQ.cq[196] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(196), sequence_f0_90_a1_adv));
          r10000_10fff_tmp57 = simd_and(sequence_f0_90_a1_adv, byte_range_80_95);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp57);
          byte_a4 = simd_and(tmp76, tmp36);
          sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
          sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
          r10000_10fff_tmp58 = simd_and(basis_bits.bit_3, tmp158);
          r10000_10fff_tmp59 = simd_andc(tmp109, r10000_10fff_tmp58);
          cc_range_10900_10920_4 = simd_or(byte_range_80_95, r10000_10fff_tmp59);
          carryQ.cq[197] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(197), sequence_f0_90_a4_adv));
          r10000_10fff_tmp60 = simd_and(sequence_f0_90_a4_adv, cc_range_10900_10920_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp60);
          byte_a6 = simd_and(tmp76, tmp43);
          sequence_f0_90_a6 = simd_and(sequence_f0_90_adv, byte_a6);
          sequence_f0_90_a6 = simd_and(sequence_f0_90_adv, byte_a6);
          r10000_10fff_tmp61 = simd_and(basis_bits.bit_2, tmp16);
          r10000_10fff_tmp62 = simd_andc(byte_range_80_bf, r10000_10fff_tmp61);
          r10000_10fff_tmp63 = simd_and(tmp83, tmp179);
          cc_range_10980_109be_4 = simd_or(r10000_10fff_tmp62, r10000_10fff_tmp63);
          carryQ.cq[198] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a6, carryQ.get_carry_in(198), sequence_f0_90_a6_adv));
          r10000_10fff_tmp64 = simd_and(sequence_f0_90_a6_adv, cc_range_10980_109be_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp64);
          sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
          sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
          r10000_10fff_tmp65 = simd_andc(byte_range_80_8f, tmp6);
          r10000_10fff_tmp66 = simd_or(r10000_10fff_tmp65, tmp128);
          r10000_10fff_tmp67 = simd_and(tmp64, tmp35);
          r10000_10fff_tmp68 = simd_and(r10000_10fff_tmp67, tmp5);
          r10000_10fff_tmp69 = simd_or(r10000_10fff_tmp66, r10000_10fff_tmp68);
          r10000_10fff_tmp70 = simd_and(basis_bits.bit_3, tmp4);
          r10000_10fff_tmp71 = simd_not(r10000_10fff_tmp70);
          r10000_10fff_tmp72 = simd_or(simd_and(basis_bits.bit_2, r10000_10fff_tmp71), simd_andc(tmp80, basis_bits.bit_2));
          r10000_10fff_tmp73 = simd_and(byte_range_80_bf, r10000_10fff_tmp72);
          cc_range_10a00_10a19_4 = simd_or(r10000_10fff_tmp69, r10000_10fff_tmp73);
          carryQ.cq[199] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(199), sequence_f0_90_a8_adv));
          r10000_10fff_tmp74 = simd_and(sequence_f0_90_a8_adv, cc_range_10a00_10a19_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp74);
          byte_a9 = simd_and(tmp76, tmp116);
          sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
          sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
          byte_range_a0_bc = simd_andc(tmp109, r10000_10fff_tmp25);
          carryQ.cq[200] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(200), sequence_f0_90_a9_adv));
          r10000_10fff_tmp75 = simd_and(sequence_f0_90_a9_adv, byte_range_a0_bc);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp75);
          byte_ac = simd_and(tmp76, tmp84);
          sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
          sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
          r10000_10fff_tmp76 = simd_and(basis_bits.bit_2, r10000_10fff_tmp45);
          byte_range_80_b5 = simd_andc(byte_range_80_bf, r10000_10fff_tmp76);
          carryQ.cq[201] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(201), sequence_f0_90_ac_adv));
          r10000_10fff_tmp77 = simd_and(sequence_f0_90_ac_adv, byte_range_80_b5);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp77);
          byte_ad = simd_and(tmp76, tmp67);
          sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
          sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
          r10000_10fff_tmp78 = simd_andc(tmp109, tmp44);
          cc_range_10b40_10b60_4 = simd_or(byte_range_80_95, r10000_10fff_tmp78);
          carryQ.cq[202] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(202), sequence_f0_90_ad_adv));
          r10000_10fff_tmp79 = simd_and(sequence_f0_90_ad_adv, cc_range_10b40_10b60_4);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp79);
          byte_b0 = simd_andc(tmp83, tmp6);
          sequence_f0_90_b0 = simd_and(sequence_f0_90_adv, byte_b0);
          sequence_f0_90_b0 = simd_and(sequence_f0_90_adv, byte_b0);
          carryQ.cq[203] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b0, carryQ.get_carry_in(203), sequence_f0_90_b0_adv));
          r10000_10fff_tmp80 = simd_and(sequence_f0_90_b0_adv, byte_range_80_bf);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp80);
          byte_b1 = simd_and(tmp83, tmp11);
          sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
          sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
          byte_range_80_88 = simd_andc(byte_range_80_8f, tmp30);
          carryQ.cq[204] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b1, carryQ.get_carry_in(204), sequence_f0_90_b1_adv));
          r10000_10fff_tmp81 = simd_and(sequence_f0_90_b1_adv, byte_range_80_88);
          struct_Lo.cc = simd_or(struct_Lo.cc, r10000_10fff_tmp81);
        }
        else {
          carryQ.CarryDequeueEnqueue(182, 23);
        }
  }
  CarryArray<205, 0> carryQ;
  };

  struct Ll {
  Ll() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Ll & struct_Ll) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10;
		BitBlock byte_range_61_7a, tmp11, tmp12, tmp13, byte_f0, tmp14, tmp15, tmp16;
		BitBlock tmp17, tmp18, tmp19, byte_9d, tmp20, sequence_f0_9d, byte_f0_adv;
		BitBlock byte_90, tmp21, sequence_f0_9d_90, sequence_f0_9d_adv, tmp22, tmp23;
		BitBlock tmp24, tmp25, tmp26, tmp27, byte_range_9a_b3, sequence_f0_9d_90_adv;
		BitBlock tmp28, tmp29, byte_91, sequence_f0_9d_91, tmp30, tmp31, tmp32, tmp33;
		BitBlock tmp34, tmp35, tmp36, tmp37, tmp38, tmp39, tmp40, tmp41, tmp42, tmp43;
		BitBlock cc_range_1d44e_1d456_4, sequence_f0_9d_91_adv, tmp44, tmp45, tmp46;
		BitBlock byte_92, sequence_f0_9d_92, tmp47, tmp48, tmp49, tmp50, tmp51, tmp52;
		BitBlock tmp53, tmp54, tmp55, tmp56, tmp57, tmp58, tmp59, tmp60, tmp61;
		BitBlock cc_range_1d482_1d4bd_4, sequence_f0_9d_92_adv, tmp62, tmp63, byte_93;
		BitBlock sequence_f0_9d_93, tmp64, tmp65, tmp66, tmp67, tmp68, tmp69, tmp70;
		BitBlock cc_range_1d4c0_1d4ea_4, sequence_f0_9d_93_adv, tmp71, tmp72, tmp73;
		BitBlock byte_94, sequence_f0_9d_94, tmp74, tmp75, tmp76, tmp77, tmp78, tmp79;
		BitBlock cc_range_1d500_1d51e_4, sequence_f0_9d_94_adv, tmp80, tmp81, byte_95;
		BitBlock sequence_f0_9d_95, tmp82, tmp83, tmp84, tmp85, byte_range_92_ab;
		BitBlock sequence_f0_9d_95_adv, tmp86, tmp87, byte_96, sequence_f0_9d_96;
		BitBlock tmp88, tmp89, tmp90, tmp91, cc_range_1d586_1d5ba_4;
		BitBlock sequence_f0_9d_96_adv, tmp92, tmp93, byte_97, sequence_f0_9d_97;
		BitBlock tmp94, tmp95, tmp96, cc_range_1d5c0_1d5ee_4, sequence_f0_9d_97_adv;
		BitBlock tmp97, tmp98, byte_98, sequence_f0_9d_98, tmp99, tmp100;
		BitBlock cc_range_1d600_1d622_4, sequence_f0_9d_98_adv, tmp101, tmp102;
		BitBlock byte_99, sequence_f0_9d_99, tmp103, tmp104, byte_range_96_af;
		BitBlock sequence_f0_9d_99_adv, tmp105, tmp106, byte_9a, sequence_f0_9d_9a;
		BitBlock tmp107, tmp108, byte_range_8a_a5, sequence_f0_9d_9a_adv, tmp109;
		BitBlock byte_9b, sequence_f0_9d_9b, tmp110, tmp111, tmp112, tmp113, tmp114;
		BitBlock tmp115, tmp116, tmp117, cc_range_1d6c2_1d6fc_4, sequence_f0_9d_9b_adv;
		BitBlock tmp118, tmp119, byte_9c, sequence_f0_9d_9c, tmp120, tmp121, tmp122;
		BitBlock tmp123, tmp124, tmp125, tmp126, cc_range_1d700_1d736_4;
		BitBlock sequence_f0_9d_9c_adv, tmp127, sequence_f0_9d_9d, tmp128, tmp129;
		BitBlock tmp130, tmp131, tmp132, tmp133, cc_range_1d740_1d770_4;
		BitBlock sequence_f0_9d_9d_adv, tmp134, tmp135, byte_9e, sequence_f0_9d_9e;
		BitBlock tmp136, tmp137, tmp138, tmp139, tmp140, tmp141;
		BitBlock cc_range_1d780_1d7aa_4, sequence_f0_9d_9e_adv, tmp142, tmp143;
		BitBlock byte_9f, sequence_f0_9d_9f, tmp144, tmp145, tmp146, tmp147, tmp148;
		BitBlock cc_range_1d7c0_1d7cb_4, sequence_f0_9d_9f_adv, tmp149;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, byte_c2, byte_b5, byte_c2_adv;
		BitBlock r80_7ff_tmp2, byte_c3, r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, cc_range_df_f8_2;
		BitBlock byte_c3_adv, r80_7ff_tmp9, byte_c4, r80_7ff_tmp10, r80_7ff_tmp11;
		BitBlock r80_7ff_tmp12, r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15;
		BitBlock r80_7ff_tmp16, r80_7ff_tmp17, r80_7ff_tmp18, r80_7ff_tmp19;
		BitBlock r80_7ff_tmp20, r80_7ff_tmp21, r80_7ff_tmp22, r80_7ff_tmp23;
		BitBlock r80_7ff_tmp24, r80_7ff_tmp25, r80_7ff_tmp26, r80_7ff_tmp27;
		BitBlock r80_7ff_tmp28, r80_7ff_tmp29, r80_7ff_tmp30, r80_7ff_tmp31;
		BitBlock r80_7ff_tmp32, r80_7ff_tmp33, r80_7ff_tmp34, r80_7ff_tmp35;
		BitBlock r80_7ff_tmp36, r80_7ff_tmp37, r80_7ff_tmp38, r80_7ff_tmp39;
		BitBlock r80_7ff_tmp40, r80_7ff_tmp41, r80_7ff_tmp42, r80_7ff_tmp43;
		BitBlock r80_7ff_tmp44, r80_7ff_tmp45, r80_7ff_tmp46, r80_7ff_tmp47;
		BitBlock r80_7ff_tmp48, r80_7ff_tmp49, r80_7ff_tmp50, r80_7ff_tmp51;
		BitBlock r80_7ff_tmp52, r80_7ff_tmp53, r80_7ff_tmp54, r80_7ff_tmp55;
		BitBlock r80_7ff_tmp56, r80_7ff_tmp57, cc_range_101_13e_2, byte_c4_adv;
		BitBlock r80_7ff_tmp58, byte_c5, r80_7ff_tmp59, r80_7ff_tmp60, r80_7ff_tmp61;
		BitBlock r80_7ff_tmp62, r80_7ff_tmp63, r80_7ff_tmp64, r80_7ff_tmp65;
		BitBlock r80_7ff_tmp66, r80_7ff_tmp67, r80_7ff_tmp68, r80_7ff_tmp69;
		BitBlock r80_7ff_tmp70, r80_7ff_tmp71, r80_7ff_tmp72, r80_7ff_tmp73;
		BitBlock r80_7ff_tmp74, r80_7ff_tmp75, r80_7ff_tmp76, r80_7ff_tmp77;
		BitBlock r80_7ff_tmp78, r80_7ff_tmp79, r80_7ff_tmp80, r80_7ff_tmp81;
		BitBlock r80_7ff_tmp82, r80_7ff_tmp83, r80_7ff_tmp84, r80_7ff_tmp85;
		BitBlock r80_7ff_tmp86, r80_7ff_tmp87, r80_7ff_tmp88, r80_7ff_tmp89;
		BitBlock r80_7ff_tmp90, r80_7ff_tmp91, cc_range_140_17e_2, byte_c5_adv;
		BitBlock r80_7ff_tmp92, byte_c6, r80_7ff_tmp93, r80_7ff_tmp94, r80_7ff_tmp95;
		BitBlock r80_7ff_tmp96, r80_7ff_tmp97, r80_7ff_tmp98, r80_7ff_tmp99;
		BitBlock r80_7ff_tmp100, r80_7ff_tmp101, r80_7ff_tmp102, r80_7ff_tmp103;
		BitBlock r80_7ff_tmp104, r80_7ff_tmp105, r80_7ff_tmp106, r80_7ff_tmp107;
		BitBlock r80_7ff_tmp108, r80_7ff_tmp109, r80_7ff_tmp110, r80_7ff_tmp111;
		BitBlock r80_7ff_tmp112, r80_7ff_tmp113, r80_7ff_tmp114, r80_7ff_tmp115;
		BitBlock r80_7ff_tmp116, r80_7ff_tmp117, r80_7ff_tmp118, r80_7ff_tmp119;
		BitBlock r80_7ff_tmp120, r80_7ff_tmp121, r80_7ff_tmp122, r80_7ff_tmp123;
		BitBlock r80_7ff_tmp124, cc_range_180_1bd_2, byte_c6_adv, r80_7ff_tmp125;
		BitBlock byte_c7, r80_7ff_tmp126, r80_7ff_tmp127, r80_7ff_tmp128;
		BitBlock r80_7ff_tmp129, r80_7ff_tmp130, r80_7ff_tmp131, r80_7ff_tmp132;
		BitBlock r80_7ff_tmp133, r80_7ff_tmp134, r80_7ff_tmp135, r80_7ff_tmp136;
		BitBlock r80_7ff_tmp137, r80_7ff_tmp138, r80_7ff_tmp139, r80_7ff_tmp140;
		BitBlock r80_7ff_tmp141, r80_7ff_tmp142, r80_7ff_tmp143, r80_7ff_tmp144;
		BitBlock r80_7ff_tmp145, r80_7ff_tmp146, r80_7ff_tmp147, r80_7ff_tmp148;
		BitBlock r80_7ff_tmp149, r80_7ff_tmp150, r80_7ff_tmp151, r80_7ff_tmp152;
		BitBlock r80_7ff_tmp153, r80_7ff_tmp154, r80_7ff_tmp155, r80_7ff_tmp156;
		BitBlock r80_7ff_tmp157, cc_range_1c6_1ff_2, byte_c7_adv, r80_7ff_tmp158;
		BitBlock byte_c8, r80_7ff_tmp159, r80_7ff_tmp160, r80_7ff_tmp161;
		BitBlock r80_7ff_tmp162, cc_range_201_23f_2, byte_c8_adv, r80_7ff_tmp163;
		BitBlock byte_c9, r80_7ff_tmp164, r80_7ff_tmp165, r80_7ff_tmp166;
		BitBlock r80_7ff_tmp167, r80_7ff_tmp168, r80_7ff_tmp169, r80_7ff_tmp170;
		BitBlock r80_7ff_tmp171, cc_range_240_24f_2, byte_c9_adv, r80_7ff_tmp172;
		BitBlock byte_ca, r80_7ff_tmp173, r80_7ff_tmp174, cc_range_280_295_2;
		BitBlock byte_ca_adv, r80_7ff_tmp175, byte_cd, r80_7ff_tmp176, r80_7ff_tmp177;
		BitBlock r80_7ff_tmp178, r80_7ff_tmp179, r80_7ff_tmp180, cc_range_371_37b_2;
		BitBlock byte_cd_adv, r80_7ff_tmp181, byte_ce, r80_7ff_tmp182;
		BitBlock cc_range_390_3ac_2, byte_ce_adv, r80_7ff_tmp183, byte_cf;
		BitBlock r80_7ff_tmp184, r80_7ff_tmp185, r80_7ff_tmp186, r80_7ff_tmp187;
		BitBlock r80_7ff_tmp188, r80_7ff_tmp189, r80_7ff_tmp190, r80_7ff_tmp191;
		BitBlock r80_7ff_tmp192, r80_7ff_tmp193, r80_7ff_tmp194, r80_7ff_tmp195;
		BitBlock r80_7ff_tmp196, r80_7ff_tmp197, r80_7ff_tmp198, r80_7ff_tmp199;
		BitBlock r80_7ff_tmp200, r80_7ff_tmp201, r80_7ff_tmp202, r80_7ff_tmp203;
		BitBlock r80_7ff_tmp204, r80_7ff_tmp205, r80_7ff_tmp206, r80_7ff_tmp207;
		BitBlock r80_7ff_tmp208, r80_7ff_tmp209, cc_range_3c0_3fb_2, byte_cf_adv;
		BitBlock r80_7ff_tmp210, r80_7ff_tmp211, byte_d0, byte_range_b0_bf;
		BitBlock byte_d0_adv, r80_7ff_tmp212, byte_d1, r80_7ff_tmp213, r80_7ff_tmp214;
		BitBlock r80_7ff_tmp215, r80_7ff_tmp216, r80_7ff_tmp217, r80_7ff_tmp218;
		BitBlock r80_7ff_tmp219, r80_7ff_tmp220, r80_7ff_tmp221, r80_7ff_tmp222;
		BitBlock r80_7ff_tmp223, r80_7ff_tmp224, r80_7ff_tmp225, r80_7ff_tmp226;
		BitBlock r80_7ff_tmp227, r80_7ff_tmp228, r80_7ff_tmp229, r80_7ff_tmp230;
		BitBlock r80_7ff_tmp231, r80_7ff_tmp232, r80_7ff_tmp233, r80_7ff_tmp234;
		BitBlock r80_7ff_tmp235, cc_range_440_47f_2, byte_d1_adv, r80_7ff_tmp236;
		BitBlock byte_d2, r80_7ff_tmp237, r80_7ff_tmp238, r80_7ff_tmp239;
		BitBlock r80_7ff_tmp240, r80_7ff_tmp241, r80_7ff_tmp242, r80_7ff_tmp243;
		BitBlock r80_7ff_tmp244, r80_7ff_tmp245, r80_7ff_tmp246, r80_7ff_tmp247;
		BitBlock r80_7ff_tmp248, r80_7ff_tmp249, r80_7ff_tmp250, r80_7ff_tmp251;
		BitBlock r80_7ff_tmp252, r80_7ff_tmp253, r80_7ff_tmp254, r80_7ff_tmp255;
		BitBlock r80_7ff_tmp256, r80_7ff_tmp257, r80_7ff_tmp258, r80_7ff_tmp259;
		BitBlock r80_7ff_tmp260, r80_7ff_tmp261, r80_7ff_tmp262, r80_7ff_tmp263;
		BitBlock cc_range_481_4bf_2, byte_d2_adv, r80_7ff_tmp264, byte_d3;
		BitBlock r80_7ff_tmp265, r80_7ff_tmp266, r80_7ff_tmp267, r80_7ff_tmp268;
		BitBlock r80_7ff_tmp269, r80_7ff_tmp270, r80_7ff_tmp271, r80_7ff_tmp272;
		BitBlock r80_7ff_tmp273, r80_7ff_tmp274, r80_7ff_tmp275, r80_7ff_tmp276;
		BitBlock r80_7ff_tmp277, r80_7ff_tmp278, r80_7ff_tmp279, r80_7ff_tmp280;
		BitBlock r80_7ff_tmp281, r80_7ff_tmp282, r80_7ff_tmp283, r80_7ff_tmp284;
		BitBlock r80_7ff_tmp285, r80_7ff_tmp286, r80_7ff_tmp287, r80_7ff_tmp288;
		BitBlock r80_7ff_tmp289, r80_7ff_tmp290, r80_7ff_tmp291, r80_7ff_tmp292;
		BitBlock r80_7ff_tmp293, r80_7ff_tmp294, cc_range_4c2_4ff_2, byte_d3_adv;
		BitBlock r80_7ff_tmp295, byte_d4, r80_7ff_tmp296, r80_7ff_tmp297;
		BitBlock cc_range_501_527_2, byte_d4_adv, r80_7ff_tmp298, byte_d5;
		BitBlock r80_7ff_tmp299, byte_range_a1_bf, byte_d5_adv, r80_7ff_tmp300;
		BitBlock byte_d6, byte_range_80_87, byte_d6_adv, r80_7ff_tmp301, tmp150;
		BitBlock byte_range_e0_ef, byte_e1, byte_b4, r800_ffff_tmp1, sequence_e1_b4;
		BitBlock byte_e1_adv, r800_ffff_tmp2, byte_range_80_ab, sequence_e1_b4_adv;
		BitBlock r800_ffff_tmp3, sequence_e1_b5, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, cc_range_1d6b_1d79_3;
		BitBlock sequence_e1_b5_adv, r800_ffff_tmp8, byte_b6, sequence_e1_b6;
		BitBlock r800_ffff_tmp9, byte_range_80_9a, sequence_e1_b6_adv, r800_ffff_tmp10;
		BitBlock byte_b8, sequence_e1_b8, cc_range_1e01_1e3f_3, sequence_e1_b8_adv;
		BitBlock r800_ffff_tmp11, byte_b9, sequence_e1_b9, cc_range_1e41_1e7f_3;
		BitBlock sequence_e1_b9_adv, r800_ffff_tmp12, byte_ba, sequence_e1_ba;
		BitBlock r800_ffff_tmp13, r800_ffff_tmp14, r800_ffff_tmp15, r800_ffff_tmp16;
		BitBlock r800_ffff_tmp17, r800_ffff_tmp18, r800_ffff_tmp19, r800_ffff_tmp20;
		BitBlock r800_ffff_tmp21, r800_ffff_tmp22, r800_ffff_tmp23, r800_ffff_tmp24;
		BitBlock r800_ffff_tmp25, r800_ffff_tmp26, r800_ffff_tmp27, r800_ffff_tmp28;
		BitBlock r800_ffff_tmp29, r800_ffff_tmp30, r800_ffff_tmp31, r800_ffff_tmp32;
		BitBlock r800_ffff_tmp33, r800_ffff_tmp34, r800_ffff_tmp35, r800_ffff_tmp36;
		BitBlock r800_ffff_tmp37, r800_ffff_tmp38, r800_ffff_tmp39, r800_ffff_tmp40;
		BitBlock r800_ffff_tmp41, r800_ffff_tmp42, r800_ffff_tmp43, r800_ffff_tmp44;
		BitBlock r800_ffff_tmp45, r800_ffff_tmp46, r800_ffff_tmp47, r800_ffff_tmp48;
		BitBlock r800_ffff_tmp49, r800_ffff_tmp50, r800_ffff_tmp51, r800_ffff_tmp52;
		BitBlock r800_ffff_tmp53, r800_ffff_tmp54, r800_ffff_tmp55, r800_ffff_tmp56;
		BitBlock cc_range_1e81_1ebf_3, sequence_e1_ba_adv, r800_ffff_tmp57, byte_bb;
		BitBlock sequence_e1_bb, cc_range_1ec1_1eff_3, sequence_e1_bb_adv;
		BitBlock r800_ffff_tmp58, byte_bc, sequence_e1_bc, r800_ffff_tmp59;
		BitBlock r800_ffff_tmp60, r800_ffff_tmp61, r800_ffff_tmp62;
		BitBlock cc_range_1f00_1f30_3, sequence_e1_bc_adv, r800_ffff_tmp63, byte_bd;
		BitBlock sequence_e1_bd, r800_ffff_tmp64, r800_ffff_tmp65, r800_ffff_tmp66;
		BitBlock r800_ffff_tmp67, r800_ffff_tmp68, cc_range_1f40_1f70_3;
		BitBlock sequence_e1_bd_adv, r800_ffff_tmp69, byte_be, sequence_e1_be;
		BitBlock r800_ffff_tmp70, r800_ffff_tmp71, r800_ffff_tmp72, r800_ffff_tmp73;
		BitBlock r800_ffff_tmp74, r800_ffff_tmp75, r800_ffff_tmp76, r800_ffff_tmp77;
		BitBlock r800_ffff_tmp78, cc_range_1f80_1fbe_3, sequence_e1_be_adv;
		BitBlock r800_ffff_tmp79, byte_bf, sequence_e1_bf, r800_ffff_tmp80;
		BitBlock r800_ffff_tmp81, r800_ffff_tmp82, r800_ffff_tmp83, r800_ffff_tmp84;
		BitBlock r800_ffff_tmp85, r800_ffff_tmp86, r800_ffff_tmp87, r800_ffff_tmp88;
		BitBlock r800_ffff_tmp89, r800_ffff_tmp90, r800_ffff_tmp91;
		BitBlock cc_range_1fc2_1ff6_3, sequence_e1_bf_adv, r800_ffff_tmp92, byte_e2;
		BitBlock byte_84, r800_ffff_tmp93, sequence_e2_84, byte_e2_adv;
		BitBlock r800_ffff_tmp94, r800_ffff_tmp95, r800_ffff_tmp96, r800_ffff_tmp97;
		BitBlock r800_ffff_tmp98, r800_ffff_tmp99, r800_ffff_tmp100, r800_ffff_tmp101;
		BitBlock cc_range_210a_213c_3, sequence_e2_84_adv, r800_ffff_tmp102, byte_85;
		BitBlock sequence_e2_85, r800_ffff_tmp103, cc_range_2146_214e_3;
		BitBlock sequence_e2_85_adv, r800_ffff_tmp104, byte_86, sequence_e2_86;
		BitBlock sequence_e2_86_adv, r800_ffff_tmp105, byte_b0, sequence_e2_b0;
		BitBlock sequence_e2_b0_adv, r800_ffff_tmp106, byte_b1, sequence_e2_b1;
		BitBlock r800_ffff_tmp107, r800_ffff_tmp108, r800_ffff_tmp109;
		BitBlock r800_ffff_tmp110, r800_ffff_tmp111, r800_ffff_tmp112;
		BitBlock r800_ffff_tmp113, r800_ffff_tmp114, r800_ffff_tmp115;
		BitBlock r800_ffff_tmp116, r800_ffff_tmp117, r800_ffff_tmp118;
		BitBlock r800_ffff_tmp119, r800_ffff_tmp120, r800_ffff_tmp121;
		BitBlock r800_ffff_tmp122, r800_ffff_tmp123, r800_ffff_tmp124;
		BitBlock r800_ffff_tmp125, r800_ffff_tmp126, cc_range_2c40_2c76_3;
		BitBlock sequence_e2_b1_adv, r800_ffff_tmp127, byte_b2, sequence_e2_b2;
		BitBlock cc_range_2c81_2cbf_3, sequence_e2_b2_adv, r800_ffff_tmp128, byte_b3;
		BitBlock sequence_e2_b3, r800_ffff_tmp129, r800_ffff_tmp130, r800_ffff_tmp131;
		BitBlock r800_ffff_tmp132, r800_ffff_tmp133, r800_ffff_tmp134;
		BitBlock r800_ffff_tmp135, r800_ffff_tmp136, r800_ffff_tmp137;
		BitBlock r800_ffff_tmp138, r800_ffff_tmp139, r800_ffff_tmp140;
		BitBlock cc_range_2cc1_2cf3_3, sequence_e2_b3_adv, r800_ffff_tmp141;
		BitBlock sequence_e2_b4, r800_ffff_tmp142, r800_ffff_tmp143, r800_ffff_tmp144;
		BitBlock cc_range_2d00_2d2d_3, sequence_e2_b4_adv, r800_ffff_tmp145, byte_ea;
		BitBlock r800_ffff_tmp146, sequence_ea_99, byte_ea_adv, r800_ffff_tmp147;
		BitBlock r800_ffff_tmp148, cc_range_a641_a66d_3, sequence_ea_99_adv;
		BitBlock r800_ffff_tmp149, sequence_ea_9a, r800_ffff_tmp150;
		BitBlock cc_range_a681_a697_3, sequence_ea_9a_adv, r800_ffff_tmp151;
		BitBlock sequence_ea_9c, r800_ffff_tmp152, r800_ffff_tmp153, r800_ffff_tmp154;
		BitBlock r800_ffff_tmp155, r800_ffff_tmp156, r800_ffff_tmp157;
		BitBlock r800_ffff_tmp158, r800_ffff_tmp159, r800_ffff_tmp160;
		BitBlock r800_ffff_tmp161, r800_ffff_tmp162, r800_ffff_tmp163;
		BitBlock r800_ffff_tmp164, r800_ffff_tmp165, r800_ffff_tmp166;
		BitBlock r800_ffff_tmp167, r800_ffff_tmp168, r800_ffff_tmp169;
		BitBlock r800_ffff_tmp170, r800_ffff_tmp171, r800_ffff_tmp172;
		BitBlock r800_ffff_tmp173, cc_range_a723_a73f_3, sequence_ea_9c_adv;
		BitBlock r800_ffff_tmp174, sequence_ea_9d, r800_ffff_tmp175, r800_ffff_tmp176;
		BitBlock r800_ffff_tmp177, r800_ffff_tmp178, r800_ffff_tmp179;
		BitBlock r800_ffff_tmp180, r800_ffff_tmp181, r800_ffff_tmp182;
		BitBlock r800_ffff_tmp183, r800_ffff_tmp184, r800_ffff_tmp185;
		BitBlock r800_ffff_tmp186, r800_ffff_tmp187, r800_ffff_tmp188;
		BitBlock r800_ffff_tmp189, cc_range_a741_a77f_3, sequence_ea_9d_adv;
		BitBlock r800_ffff_tmp190, sequence_ea_9e, r800_ffff_tmp191, r800_ffff_tmp192;
		BitBlock r800_ffff_tmp193, r800_ffff_tmp194, r800_ffff_tmp195;
		BitBlock r800_ffff_tmp196, r800_ffff_tmp197, r800_ffff_tmp198;
		BitBlock r800_ffff_tmp199, cc_range_a781_a7a9_3, sequence_ea_9e_adv;
		BitBlock r800_ffff_tmp200, sequence_ea_9f, sequence_ea_9f_adv;
		BitBlock r800_ffff_tmp201, byte_ef, byte_ac, r800_ffff_tmp202, sequence_ef_ac;
		BitBlock byte_ef_adv, r800_ffff_tmp203, r800_ffff_tmp204, cc_range_fb00_fb13_3;
		BitBlock sequence_ef_ac_adv, r800_ffff_tmp205, sequence_ef_bd;
		BitBlock byte_range_81_9a, sequence_ef_bd_adv, r800_ffff_tmp206;
		BitBlock sequence_f0_90, byte_range_80_bf, tmp151;
		BitBlock sequence_f0_90_byte_range_80_bf, tmp152;
		BitBlock sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock r10000_10fff_tmp1, sequence_f0_90_90, sequence_f0_90_adv;
		BitBlock r10000_10fff_tmp2, byte_range_a8_bf, sequence_f0_90_90_adv;
		BitBlock r10000_10fff_tmp3, sequence_f0_90_91, byte_range_80_8f;
		BitBlock sequence_f0_90_91_adv, r10000_10fff_tmp4;




        struct_Ll.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_and(tmp1, basis_bits.bit_2);
        tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp4 = simd_or(basis_bits.bit_5, tmp3);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        tmp6 = simd_not(tmp5);
        tmp7 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp9 = simd_or(tmp7, tmp8);
        tmp10 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(tmp9, basis_bits.bit_3));
        byte_range_61_7a = simd_and(tmp2, tmp10);
        struct_Ll.cc = simd_or(struct_Ll.cc, byte_range_61_7a);
        tmp11 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp12 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp13 = simd_and(tmp11, tmp12);
        byte_f0 = simd_andc(tmp13, tmp9);
        tmp14 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp15 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp16 = simd_and(tmp14, tmp15);
        tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp18 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp19 = simd_and(tmp17, tmp18);
        byte_9d = simd_and(tmp16, tmp19);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp20));
        sequence_f0_9d = simd_and(tmp20, byte_9d);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        byte_90 = simd_andc(tmp16, tmp9);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(2), tmp21));
        sequence_f0_9d_90 = simd_and(tmp21, byte_90);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(3), sequence_f0_9d_adv));
        sequence_f0_9d_90 = simd_and(sequence_f0_9d_adv, byte_90);
        tmp22 = simd_and(basis_bits.bit_3, tmp7);
        tmp23 = simd_not(tmp22);
        tmp24 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp25 = simd_and(basis_bits.bit_4, tmp24);
        tmp26 = simd_and(basis_bits.bit_3, tmp25);
        tmp27 = simd_or(simd_and(basis_bits.bit_2, tmp23), simd_andc(tmp26, basis_bits.bit_2));
        byte_range_9a_b3 = simd_and(tmp14, tmp27);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(4), sequence_f0_9d_90_adv));
        tmp28 = simd_and(sequence_f0_9d_90_adv, byte_range_9a_b3);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp28);
        tmp29 = simd_andc(tmp18, tmp7);
        byte_91 = simd_and(tmp16, tmp29);
        sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
        sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
        tmp30 = simd_andc(tmp14, basis_bits.bit_2);
        tmp31 = simd_and(basis_bits.bit_5, tmp8);
        tmp32 = simd_or(basis_bits.bit_4, tmp31);
        tmp33 = simd_not(tmp32);
        tmp34 = simd_and(tmp17, basis_bits.bit_6);
        tmp35 = simd_or(simd_and(basis_bits.bit_3, tmp33), simd_andc(tmp34, basis_bits.bit_3));
        tmp36 = simd_and(tmp30, tmp35);
        tmp37 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
        tmp38 = simd_not(tmp37);
        tmp39 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
        tmp40 = simd_or(basis_bits.bit_4, tmp39);
        tmp41 = simd_and(basis_bits.bit_3, tmp40);
        tmp42 = simd_or(simd_and(basis_bits.bit_2, tmp38), simd_andc(tmp41, basis_bits.bit_2));
        tmp43 = simd_and(tmp14, tmp42);
        cc_range_1d44e_1d456_4 = simd_or(tmp36, tmp43);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(5), sequence_f0_9d_91_adv));
        tmp44 = simd_and(sequence_f0_9d_91_adv, cc_range_1d44e_1d456_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp44);
        tmp45 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp46 = simd_andc(tmp45, tmp7);
        byte_92 = simd_and(tmp16, tmp46);
        sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
        sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
        tmp47 = simd_not(tmp17);
        tmp48 = simd_or(tmp7, basis_bits.bit_6);
        tmp49 = simd_or(simd_and(basis_bits.bit_3, tmp47), simd_andc(tmp48, basis_bits.bit_3));
        tmp50 = simd_and(tmp30, tmp49);
        tmp51 = simd_and(tmp14, tmp12);
        tmp52 = simd_not(tmp24);
        tmp53 = simd_or(simd_and(basis_bits.bit_4, tmp52), simd_andc(tmp39, basis_bits.bit_4));
        tmp54 = simd_and(tmp51, tmp53);
        tmp55 = simd_or(tmp50, tmp54);
        tmp56 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp57 = simd_and(tmp56, tmp3);
        tmp58 = simd_and(tmp51, tmp57);
        tmp59 = simd_or(tmp55, tmp58);
        tmp60 = simd_and(tmp51, tmp17);
        tmp61 = simd_and(tmp60, tmp8);
        cc_range_1d482_1d4bd_4 = simd_or(tmp59, tmp61);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(6), sequence_f0_9d_92_adv));
        tmp62 = simd_and(sequence_f0_9d_92_adv, cc_range_1d482_1d4bd_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp62);
        tmp63 = simd_andc(tmp3, tmp7);
        byte_93 = simd_and(tmp16, tmp63);
        sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
        sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
        tmp64 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp65 = simd_andc(tmp14, tmp64);
        tmp66 = simd_andc(tmp7, tmp32);
        tmp67 = simd_andc(tmp65, tmp66);
        tmp68 = simd_and(tmp14, basis_bits.bit_2);
        tmp69 = simd_or(basis_bits.bit_3, tmp25);
        tmp70 = simd_and(tmp68, tmp69);
        cc_range_1d4c0_1d4ea_4 = simd_or(tmp67, tmp70);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(7), sequence_f0_9d_93_adv));
        tmp71 = simd_and(sequence_f0_9d_93_adv, cc_range_1d4c0_1d4ea_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp71);
        tmp72 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp73 = simd_andc(tmp72, tmp8);
        byte_94 = simd_and(tmp16, tmp73);
        sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
        sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
        tmp74 = simd_andc(tmp65, tmp7);
        tmp75 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
        tmp76 = simd_not(tmp75);
        tmp77 = simd_and(basis_bits.bit_3, tmp34);
        tmp78 = simd_or(simd_and(basis_bits.bit_2, tmp76), simd_andc(tmp77, basis_bits.bit_2));
        tmp79 = simd_and(tmp14, tmp78);
        cc_range_1d500_1d51e_4 = simd_or(tmp74, tmp79);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(8), sequence_f0_9d_94_adv));
        tmp80 = simd_and(sequence_f0_9d_94_adv, cc_range_1d500_1d51e_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp80);
        tmp81 = simd_and(tmp72, tmp18);
        byte_95 = simd_and(tmp16, tmp81);
        sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
        sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
        tmp82 = simd_or(basis_bits.bit_3, tmp17);
        tmp83 = simd_not(tmp82);
        tmp84 = simd_and(basis_bits.bit_3, tmp48);
        tmp85 = simd_or(simd_and(basis_bits.bit_2, tmp83), simd_andc(tmp84, basis_bits.bit_2));
        byte_range_92_ab = simd_and(tmp14, tmp85);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(9), sequence_f0_9d_95_adv));
        tmp86 = simd_and(sequence_f0_9d_95_adv, byte_range_92_ab);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp86);
        tmp87 = simd_and(tmp72, tmp45);
        byte_96 = simd_and(tmp16, tmp87);
        sequence_f0_9d_96 = simd_and(sequence_f0_9d_adv, byte_96);
        sequence_f0_9d_96 = simd_and(sequence_f0_9d_adv, byte_96);
        tmp88 = simd_or(basis_bits.bit_3, tmp40);
        tmp89 = simd_and(tmp30, tmp88);
        tmp90 = simd_and(tmp51, basis_bits.bit_4);
        tmp91 = simd_and(tmp90, tmp24);
        cc_range_1d586_1d5ba_4 = simd_or(tmp89, tmp91);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_96, carryQ.get_carry_in(10), sequence_f0_9d_96_adv));
        tmp92 = simd_and(sequence_f0_9d_96_adv, cc_range_1d586_1d5ba_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp92);
        tmp93 = simd_and(tmp72, tmp3);
        byte_97 = simd_and(tmp16, tmp93);
        sequence_f0_9d_97 = simd_and(sequence_f0_9d_adv, byte_97);
        sequence_f0_9d_97 = simd_and(sequence_f0_9d_adv, byte_97);
        tmp94 = simd_andc(tmp30, tmp22);
        tmp95 = simd_or(basis_bits.bit_3, tmp34);
        tmp96 = simd_and(tmp68, tmp95);
        cc_range_1d5c0_1d5ee_4 = simd_or(tmp94, tmp96);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_97, carryQ.get_carry_in(11), sequence_f0_9d_97_adv));
        tmp97 = simd_and(sequence_f0_9d_97_adv, cc_range_1d5c0_1d5ee_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp97);
        tmp98 = simd_andc(tmp56, tmp8);
        byte_98 = simd_and(tmp16, tmp98);
        sequence_f0_9d_98 = simd_and(sequence_f0_9d_adv, byte_98);
        sequence_f0_9d_98 = simd_and(sequence_f0_9d_adv, byte_98);
        tmp99 = simd_andc(tmp65, basis_bits.bit_4);
        tmp100 = simd_and(tmp68, tmp49);
        cc_range_1d600_1d622_4 = simd_or(tmp99, tmp100);
        carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_98, carryQ.get_carry_in(12), sequence_f0_9d_98_adv));
        tmp101 = simd_and(sequence_f0_9d_98_adv, cc_range_1d600_1d622_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp101);
        tmp102 = simd_and(tmp56, tmp18);
        byte_99 = simd_and(tmp16, tmp102);
        sequence_f0_9d_99 = simd_and(sequence_f0_9d_adv, byte_99);
        sequence_f0_9d_99 = simd_and(sequence_f0_9d_adv, byte_99);
        tmp103 = simd_not(basis_bits.bit_3);
        tmp104 = simd_or(simd_and(basis_bits.bit_2, tmp103), simd_andc(tmp41, basis_bits.bit_2));
        byte_range_96_af = simd_and(tmp14, tmp104);
        carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_99, carryQ.get_carry_in(13), sequence_f0_9d_99_adv));
        tmp105 = simd_and(sequence_f0_9d_99_adv, byte_range_96_af);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp105);
        tmp106 = simd_and(tmp56, tmp45);
        byte_9a = simd_and(tmp16, tmp106);
        sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
        sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
        tmp107 = simd_not(tmp88);
        tmp108 = simd_or(simd_and(basis_bits.bit_2, tmp107), simd_andc(tmp69, basis_bits.bit_2));
        byte_range_8a_a5 = simd_and(tmp14, tmp108);
        carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(14), sequence_f0_9d_9a_adv));
        tmp109 = simd_and(sequence_f0_9d_9a_adv, byte_range_8a_a5);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp109);
        byte_9b = simd_and(tmp16, tmp57);
        sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
        sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
        tmp110 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(tmp48, basis_bits.bit_3));
        tmp111 = simd_and(tmp30, tmp110);
        tmp112 = simd_or(basis_bits.bit_3, tmp48);
        tmp113 = simd_not(tmp112);
        tmp114 = simd_and(basis_bits.bit_3, tmp17);
        tmp115 = simd_or(simd_and(basis_bits.bit_2, tmp113), simd_andc(tmp114, basis_bits.bit_2));
        tmp116 = simd_and(tmp14, tmp115);
        tmp117 = simd_or(tmp111, tmp116);
        cc_range_1d6c2_1d6fc_4 = simd_or(tmp117, tmp60);
        carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(15), sequence_f0_9d_9b_adv));
        tmp118 = simd_and(sequence_f0_9d_9b_adv, cc_range_1d6c2_1d6fc_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp118);
        tmp119 = simd_andc(tmp17, tmp8);
        byte_9c = simd_and(tmp16, tmp119);
        sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
        sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
        tmp120 = simd_and(basis_bits.bit_3, tmp32);
        tmp121 = simd_andc(tmp30, tmp120);
        tmp122 = simd_not(basis_bits.bit_5);
        tmp123 = simd_or(simd_and(basis_bits.bit_4, tmp122), simd_andc(tmp39, basis_bits.bit_4));
        tmp124 = simd_and(tmp16, tmp123);
        tmp125 = simd_or(tmp121, tmp124);
        tmp126 = simd_and(tmp51, tmp40);
        cc_range_1d700_1d736_4 = simd_or(tmp125, tmp126);
        carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(16), sequence_f0_9d_9c_adv));
        tmp127 = simd_and(sequence_f0_9d_9c_adv, cc_range_1d700_1d736_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp127);
        sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
        sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
        tmp128 = simd_and(basis_bits.bit_5, tmp3);
        tmp129 = simd_and(basis_bits.bit_4, tmp128);
        tmp130 = simd_andc(tmp65, tmp129);
        tmp131 = simd_andc(tmp16, basis_bits.bit_4);
        tmp132 = simd_andc(tmp131, tmp39);
        tmp133 = simd_or(tmp130, tmp132);
        cc_range_1d740_1d770_4 = simd_or(tmp133, tmp51);
        carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(17), sequence_f0_9d_9d_adv));
        tmp134 = simd_and(sequence_f0_9d_9d_adv, cc_range_1d740_1d770_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp134);
        tmp135 = simd_and(tmp17, tmp45);
        byte_9e = simd_and(tmp16, tmp135);
        sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
        sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
        tmp136 = simd_or(basis_bits.bit_5, tmp8);
        tmp137 = simd_and(basis_bits.bit_4, tmp136);
        tmp138 = simd_andc(tmp65, tmp137);
        tmp139 = simd_and(tmp65, basis_bits.bit_4);
        tmp140 = simd_and(tmp139, tmp24);
        tmp141 = simd_or(tmp138, tmp140);
        cc_range_1d780_1d7aa_4 = simd_or(tmp141, tmp70);
        carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(18), sequence_f0_9d_9e_adv));
        tmp142 = simd_and(sequence_f0_9d_9e_adv, cc_range_1d780_1d7aa_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp142);
        tmp143 = simd_and(tmp17, tmp3);
        byte_9f = simd_and(tmp16, tmp143);
        sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
        sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
        tmp144 = simd_andc(tmp74, tmp3);
        tmp145 = simd_or(simd_and(basis_bits.bit_4, tmp52), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
        tmp146 = simd_and(tmp65, tmp145);
        tmp147 = simd_or(tmp144, tmp146);
        tmp148 = simd_and(tmp65, tmp57);
        cc_range_1d7c0_1d7cb_4 = simd_or(tmp147, tmp148);
        carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(19), sequence_f0_9d_9f_adv));
        tmp149 = simd_and(sequence_f0_9d_9f_adv, cc_range_1d7c0_1d7cb_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp149);
        byte_range_c0_df = simd_andc(tmp11, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(20, 19))) {
          r80_7ff_tmp1 = simd_andc(tmp11, tmp64);
          byte_c2 = simd_and(r80_7ff_tmp1, tmp46);
          byte_b5 = simd_and(tmp51, tmp81);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(20), byte_c2_adv));
          r80_7ff_tmp2 = simd_and(byte_c2_adv, byte_b5);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp2);
          byte_c3 = simd_and(r80_7ff_tmp1, tmp63);
          r80_7ff_tmp3 = simd_or(basis_bits.bit_4, tmp128);
          r80_7ff_tmp4 = simd_and(basis_bits.bit_3, r80_7ff_tmp3);
          r80_7ff_tmp5 = simd_not(r80_7ff_tmp4);
          r80_7ff_tmp6 = simd_and(basis_bits.bit_3, tmp143);
          r80_7ff_tmp7 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp5), simd_andc(r80_7ff_tmp6, basis_bits.bit_2));
          r80_7ff_tmp8 = simd_and(tmp14, r80_7ff_tmp7);
          cc_range_df_f8_2 = simd_or(r80_7ff_tmp8, tmp90);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(21), byte_c3_adv));
          r80_7ff_tmp9 = simd_and(byte_c3_adv, cc_range_df_f8_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp9);
          byte_c4 = simd_and(r80_7ff_tmp1, tmp73);
          r80_7ff_tmp10 = simd_andc(basis_bits.bit_7, tmp7);
          r80_7ff_tmp11 = simd_or(r80_7ff_tmp10, tmp81);
          r80_7ff_tmp12 = simd_or(r80_7ff_tmp11, tmp93);
          r80_7ff_tmp13 = simd_or(r80_7ff_tmp12, tmp102);
          r80_7ff_tmp14 = simd_or(r80_7ff_tmp13, tmp57);
          r80_7ff_tmp15 = simd_or(r80_7ff_tmp14, tmp19);
          r80_7ff_tmp16 = simd_or(r80_7ff_tmp15, tmp143);
          r80_7ff_tmp17 = simd_and(tmp65, r80_7ff_tmp16);
          r80_7ff_tmp18 = simd_or(r80_7ff_tmp17, byte_91);
          r80_7ff_tmp19 = simd_or(r80_7ff_tmp18, byte_93);
          r80_7ff_tmp20 = simd_or(r80_7ff_tmp19, byte_95);
          r80_7ff_tmp21 = simd_or(r80_7ff_tmp20, byte_97);
          r80_7ff_tmp22 = simd_or(r80_7ff_tmp21, byte_99);
          r80_7ff_tmp23 = simd_or(r80_7ff_tmp22, byte_9b);
          r80_7ff_tmp24 = simd_or(r80_7ff_tmp23, byte_9d);
          r80_7ff_tmp25 = simd_or(r80_7ff_tmp24, byte_9f);
          r80_7ff_tmp26 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp27 = simd_and(tmp14, r80_7ff_tmp26);
          r80_7ff_tmp28 = simd_and(r80_7ff_tmp27, tmp29);
          r80_7ff_tmp29 = simd_or(r80_7ff_tmp25, r80_7ff_tmp28);
          r80_7ff_tmp30 = simd_and(r80_7ff_tmp27, tmp63);
          r80_7ff_tmp31 = simd_or(r80_7ff_tmp29, r80_7ff_tmp30);
          r80_7ff_tmp32 = simd_and(r80_7ff_tmp27, tmp81);
          r80_7ff_tmp33 = simd_or(r80_7ff_tmp31, r80_7ff_tmp32);
          r80_7ff_tmp34 = simd_and(r80_7ff_tmp27, tmp93);
          r80_7ff_tmp35 = simd_or(r80_7ff_tmp33, r80_7ff_tmp34);
          r80_7ff_tmp36 = simd_and(r80_7ff_tmp27, tmp102);
          r80_7ff_tmp37 = simd_or(r80_7ff_tmp35, r80_7ff_tmp36);
          r80_7ff_tmp38 = simd_and(r80_7ff_tmp27, tmp57);
          r80_7ff_tmp39 = simd_or(r80_7ff_tmp37, r80_7ff_tmp38);
          r80_7ff_tmp40 = simd_and(r80_7ff_tmp27, tmp19);
          r80_7ff_tmp41 = simd_or(r80_7ff_tmp39, r80_7ff_tmp40);
          r80_7ff_tmp42 = simd_and(r80_7ff_tmp27, tmp143);
          r80_7ff_tmp43 = simd_or(r80_7ff_tmp41, r80_7ff_tmp42);
          r80_7ff_tmp44 = simd_and(tmp51, tmp29);
          r80_7ff_tmp45 = simd_or(r80_7ff_tmp43, r80_7ff_tmp44);
          r80_7ff_tmp46 = simd_and(tmp51, tmp63);
          r80_7ff_tmp47 = simd_or(r80_7ff_tmp45, r80_7ff_tmp46);
          r80_7ff_tmp48 = simd_or(r80_7ff_tmp47, byte_b5);
          r80_7ff_tmp49 = simd_not(tmp136);
          r80_7ff_tmp50 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp49), simd_andc(tmp128, basis_bits.bit_4));
          r80_7ff_tmp51 = simd_and(tmp51, r80_7ff_tmp50);
          r80_7ff_tmp52 = simd_or(r80_7ff_tmp48, r80_7ff_tmp51);
          r80_7ff_tmp53 = simd_and(tmp51, tmp106);
          r80_7ff_tmp54 = simd_or(r80_7ff_tmp52, r80_7ff_tmp53);
          r80_7ff_tmp55 = simd_and(tmp51, tmp119);
          r80_7ff_tmp56 = simd_or(r80_7ff_tmp54, r80_7ff_tmp55);
          r80_7ff_tmp57 = simd_and(tmp51, tmp135);
          cc_range_101_13e_2 = simd_or(r80_7ff_tmp56, r80_7ff_tmp57);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_c4, carryQ.get_carry_in(22), byte_c4_adv));
          r80_7ff_tmp58 = simd_and(byte_c4_adv, cc_range_101_13e_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp58);
          byte_c5 = simd_and(r80_7ff_tmp1, tmp81);
          r80_7ff_tmp59 = simd_andc(tmp9, tmp46);
          r80_7ff_tmp60 = simd_andc(r80_7ff_tmp59, tmp73);
          r80_7ff_tmp61 = simd_andc(r80_7ff_tmp60, tmp87);
          r80_7ff_tmp62 = simd_andc(tmp56, basis_bits.bit_6);
          r80_7ff_tmp63 = simd_andc(r80_7ff_tmp61, r80_7ff_tmp62);
          r80_7ff_tmp64 = simd_andc(r80_7ff_tmp63, tmp57);
          r80_7ff_tmp65 = simd_andc(r80_7ff_tmp64, tmp19);
          r80_7ff_tmp66 = simd_andc(r80_7ff_tmp65, tmp143);
          r80_7ff_tmp67 = simd_andc(tmp65, r80_7ff_tmp66);
          r80_7ff_tmp68 = simd_or(r80_7ff_tmp67, byte_91);
          r80_7ff_tmp69 = simd_or(r80_7ff_tmp68, byte_93);
          r80_7ff_tmp70 = simd_or(r80_7ff_tmp69, byte_95);
          r80_7ff_tmp71 = simd_or(r80_7ff_tmp70, byte_97);
          r80_7ff_tmp72 = simd_or(r80_7ff_tmp71, byte_99);
          r80_7ff_tmp73 = simd_or(r80_7ff_tmp72, byte_9b);
          r80_7ff_tmp74 = simd_or(r80_7ff_tmp73, byte_9d);
          r80_7ff_tmp75 = simd_or(r80_7ff_tmp74, byte_9f);
          r80_7ff_tmp76 = simd_or(r80_7ff_tmp75, r80_7ff_tmp28);
          r80_7ff_tmp77 = simd_or(r80_7ff_tmp76, r80_7ff_tmp30);
          r80_7ff_tmp78 = simd_or(r80_7ff_tmp77, r80_7ff_tmp32);
          r80_7ff_tmp79 = simd_or(r80_7ff_tmp78, r80_7ff_tmp34);
          r80_7ff_tmp80 = simd_or(r80_7ff_tmp79, r80_7ff_tmp36);
          r80_7ff_tmp81 = simd_or(r80_7ff_tmp80, r80_7ff_tmp38);
          r80_7ff_tmp82 = simd_or(r80_7ff_tmp81, r80_7ff_tmp40);
          r80_7ff_tmp83 = simd_or(r80_7ff_tmp82, r80_7ff_tmp42);
          r80_7ff_tmp84 = simd_or(r80_7ff_tmp83, r80_7ff_tmp44);
          r80_7ff_tmp85 = simd_or(r80_7ff_tmp84, r80_7ff_tmp46);
          r80_7ff_tmp86 = simd_or(r80_7ff_tmp85, byte_b5);
          r80_7ff_tmp87 = simd_and(tmp51, tmp93);
          r80_7ff_tmp88 = simd_or(r80_7ff_tmp86, r80_7ff_tmp87);
          r80_7ff_tmp89 = simd_or(r80_7ff_tmp88, r80_7ff_tmp53);
          r80_7ff_tmp90 = simd_or(r80_7ff_tmp89, r80_7ff_tmp55);
          r80_7ff_tmp91 = simd_and(tmp51, tmp34);
          cc_range_140_17e_2 = simd_or(r80_7ff_tmp90, r80_7ff_tmp91);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(byte_c5, carryQ.get_carry_in(23), byte_c5_adv));
          r80_7ff_tmp92 = simd_and(byte_c5_adv, cc_range_140_17e_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp92);
          byte_c6 = simd_and(r80_7ff_tmp1, tmp87);
          r80_7ff_tmp93 = simd_andc(tmp9, tmp63);
          r80_7ff_tmp94 = simd_andc(r80_7ff_tmp93, tmp81);
          r80_7ff_tmp95 = simd_andc(r80_7ff_tmp94, tmp98);
          r80_7ff_tmp96 = simd_andc(tmp17, basis_bits.bit_6);
          r80_7ff_tmp97 = simd_andc(r80_7ff_tmp95, r80_7ff_tmp96);
          r80_7ff_tmp98 = simd_andc(tmp65, r80_7ff_tmp97);
          r80_7ff_tmp99 = simd_or(r80_7ff_tmp98, byte_92);
          r80_7ff_tmp100 = simd_or(r80_7ff_tmp99, byte_95);
          r80_7ff_tmp101 = simd_and(tmp16, tmp56);
          r80_7ff_tmp102 = simd_and(r80_7ff_tmp101, tmp8);
          r80_7ff_tmp103 = simd_or(r80_7ff_tmp100, r80_7ff_tmp102);
          r80_7ff_tmp104 = simd_or(r80_7ff_tmp103, byte_9e);
          r80_7ff_tmp105 = simd_or(r80_7ff_tmp104, r80_7ff_tmp28);
          r80_7ff_tmp106 = simd_or(r80_7ff_tmp105, r80_7ff_tmp30);
          r80_7ff_tmp107 = simd_or(r80_7ff_tmp106, r80_7ff_tmp32);
          r80_7ff_tmp108 = simd_and(r80_7ff_tmp27, tmp98);
          r80_7ff_tmp109 = simd_or(r80_7ff_tmp107, r80_7ff_tmp108);
          r80_7ff_tmp110 = simd_and(tmp56, basis_bits.bit_6);
          r80_7ff_tmp111 = simd_and(r80_7ff_tmp27, r80_7ff_tmp110);
          r80_7ff_tmp112 = simd_or(r80_7ff_tmp109, r80_7ff_tmp111);
          r80_7ff_tmp113 = simd_or(r80_7ff_tmp112, r80_7ff_tmp40);
          r80_7ff_tmp114 = simd_andc(tmp51, tmp9);
          r80_7ff_tmp115 = simd_or(r80_7ff_tmp113, r80_7ff_tmp114);
          r80_7ff_tmp116 = simd_and(tmp51, tmp73);
          r80_7ff_tmp117 = simd_or(r80_7ff_tmp115, r80_7ff_tmp116);
          r80_7ff_tmp118 = simd_and(tmp51, tmp87);
          r80_7ff_tmp119 = simd_or(r80_7ff_tmp117, r80_7ff_tmp118);
          r80_7ff_tmp120 = simd_and(tmp51, tmp56);
          r80_7ff_tmp121 = simd_not(basis_bits.bit_7);
          r80_7ff_tmp122 = simd_or(simd_and(basis_bits.bit_6, r80_7ff_tmp121), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          r80_7ff_tmp123 = simd_and(r80_7ff_tmp120, r80_7ff_tmp122);
          r80_7ff_tmp124 = simd_or(r80_7ff_tmp119, r80_7ff_tmp123);
          cc_range_180_1bd_2 = simd_or(r80_7ff_tmp124, tmp61);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_c6, carryQ.get_carry_in(24), byte_c6_adv));
          r80_7ff_tmp125 = simd_and(byte_c6_adv, cc_range_180_1bd_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp125);
          byte_c7 = simd_and(r80_7ff_tmp1, tmp93);
          r80_7ff_tmp126 = simd_or(tmp87, tmp102);
          r80_7ff_tmp127 = simd_or(r80_7ff_tmp126, tmp119);
          r80_7ff_tmp128 = simd_or(r80_7ff_tmp127, tmp135);
          r80_7ff_tmp129 = simd_and(tmp65, r80_7ff_tmp128);
          r80_7ff_tmp130 = simd_or(r80_7ff_tmp129, byte_90);
          r80_7ff_tmp131 = simd_or(r80_7ff_tmp130, byte_92);
          r80_7ff_tmp132 = simd_or(r80_7ff_tmp131, byte_94);
          r80_7ff_tmp133 = simd_or(r80_7ff_tmp132, byte_96);
          r80_7ff_tmp134 = simd_or(r80_7ff_tmp133, byte_98);
          r80_7ff_tmp135 = simd_or(r80_7ff_tmp134, byte_9a);
          r80_7ff_tmp136 = simd_and(tmp16, r80_7ff_tmp96);
          r80_7ff_tmp137 = simd_or(r80_7ff_tmp135, r80_7ff_tmp136);
          r80_7ff_tmp138 = simd_or(r80_7ff_tmp137, byte_9f);
          r80_7ff_tmp139 = simd_or(r80_7ff_tmp138, r80_7ff_tmp28);
          r80_7ff_tmp140 = simd_or(r80_7ff_tmp139, r80_7ff_tmp30);
          r80_7ff_tmp141 = simd_or(r80_7ff_tmp140, r80_7ff_tmp32);
          r80_7ff_tmp142 = simd_or(r80_7ff_tmp141, r80_7ff_tmp34);
          r80_7ff_tmp143 = simd_or(r80_7ff_tmp142, r80_7ff_tmp36);
          r80_7ff_tmp144 = simd_or(r80_7ff_tmp143, r80_7ff_tmp38);
          r80_7ff_tmp145 = simd_or(r80_7ff_tmp144, r80_7ff_tmp40);
          r80_7ff_tmp146 = simd_not(tmp9);
          r80_7ff_tmp147 = simd_or(simd_and(basis_bits.bit_3, r80_7ff_tmp146), simd_andc(tmp143, basis_bits.bit_3));
          r80_7ff_tmp148 = simd_and(tmp68, r80_7ff_tmp147);
          r80_7ff_tmp149 = simd_or(r80_7ff_tmp145, r80_7ff_tmp148);
          r80_7ff_tmp150 = simd_or(r80_7ff_tmp149, r80_7ff_tmp46);
          r80_7ff_tmp151 = simd_or(r80_7ff_tmp150, byte_b5);
          r80_7ff_tmp152 = simd_and(tmp51, tmp102);
          r80_7ff_tmp153 = simd_or(r80_7ff_tmp151, r80_7ff_tmp152);
          r80_7ff_tmp154 = simd_or(r80_7ff_tmp153, tmp58);
          r80_7ff_tmp155 = simd_and(tmp51, tmp19);
          r80_7ff_tmp156 = simd_or(r80_7ff_tmp154, r80_7ff_tmp155);
          r80_7ff_tmp157 = simd_and(tmp51, tmp143);
          cc_range_1c6_1ff_2 = simd_or(r80_7ff_tmp156, r80_7ff_tmp157);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(25), byte_c7_adv));
          r80_7ff_tmp158 = simd_and(byte_c7_adv, cc_range_1c6_1ff_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp158);
          byte_c8 = simd_and(r80_7ff_tmp1, tmp98);
          r80_7ff_tmp159 = simd_or(simd_and(basis_bits.bit_4, tmp52), simd_andc(tmp4, basis_bits.bit_4));
          r80_7ff_tmp160 = simd_and(tmp51, r80_7ff_tmp159);
          r80_7ff_tmp161 = simd_or(r80_7ff_tmp45, r80_7ff_tmp160);
          r80_7ff_tmp162 = simd_or(r80_7ff_tmp161, r80_7ff_tmp55);
          cc_range_201_23f_2 = simd_or(r80_7ff_tmp162, r80_7ff_tmp157);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(byte_c8, carryQ.get_carry_in(26), byte_c8_adv));
          r80_7ff_tmp163 = simd_and(byte_c8_adv, cc_range_201_23f_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp163);
          byte_c9 = simd_and(r80_7ff_tmp1, tmp102);
          r80_7ff_tmp164 = simd_andc(r80_7ff_tmp59, tmp93);
          r80_7ff_tmp165 = simd_andc(r80_7ff_tmp164, tmp102);
          r80_7ff_tmp166 = simd_andc(r80_7ff_tmp165, tmp57);
          r80_7ff_tmp167 = simd_andc(r80_7ff_tmp166, tmp19);
          r80_7ff_tmp168 = simd_andc(tmp65, r80_7ff_tmp167);
          r80_7ff_tmp169 = simd_or(basis_bits.bit_3, tmp143);
          r80_7ff_tmp170 = simd_or(basis_bits.bit_2, r80_7ff_tmp169);
          r80_7ff_tmp171 = simd_and(tmp14, r80_7ff_tmp170);
          cc_range_240_24f_2 = simd_or(r80_7ff_tmp168, r80_7ff_tmp171);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(27), byte_c9_adv));
          r80_7ff_tmp172 = simd_and(byte_c9_adv, cc_range_240_24f_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp172);
          byte_ca = simd_and(r80_7ff_tmp1, tmp106);
          r80_7ff_tmp173 = simd_or(simd_and(basis_bits.bit_2, tmp103), simd_andc(tmp120, basis_bits.bit_2));
          r80_7ff_tmp174 = simd_and(tmp14, r80_7ff_tmp173);
          cc_range_280_295_2 = simd_or(tmp94, r80_7ff_tmp174);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(28), byte_ca_adv));
          r80_7ff_tmp175 = simd_and(byte_ca_adv, cc_range_280_295_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp175);
          byte_cd = simd_and(r80_7ff_tmp1, tmp19);
          r80_7ff_tmp176 = simd_or(r80_7ff_tmp10, tmp93);
          r80_7ff_tmp177 = simd_and(tmp51, r80_7ff_tmp176);
          r80_7ff_tmp178 = simd_not(basis_bits.bit_6);
          r80_7ff_tmp179 = simd_or(simd_and(basis_bits.bit_5, r80_7ff_tmp178), simd_andc(tmp3, basis_bits.bit_5));
          r80_7ff_tmp180 = simd_and(tmp90, r80_7ff_tmp179);
          cc_range_371_37b_2 = simd_or(r80_7ff_tmp177, r80_7ff_tmp180);
          carryQ.cq[29] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(29), byte_cd_adv));
          r80_7ff_tmp181 = simd_and(byte_cd_adv, cc_range_371_37b_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp181);
          byte_ce = simd_and(r80_7ff_tmp1, tmp135);
          r80_7ff_tmp182 = simd_and(tmp68, tmp82);
          cc_range_390_3ac_2 = simd_or(byte_90, r80_7ff_tmp182);
          carryQ.cq[30] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(30), byte_ce_adv));
          r80_7ff_tmp183 = simd_and(byte_ce_adv, cc_range_390_3ac_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp183);
          byte_cf = simd_and(r80_7ff_tmp1, tmp143);
          r80_7ff_tmp184 = simd_andc(tmp16, tmp48);
          r80_7ff_tmp185 = simd_or(tmp130, r80_7ff_tmp184);
          r80_7ff_tmp186 = simd_and(tmp16, tmp72);
          r80_7ff_tmp187 = simd_and(r80_7ff_tmp186, tmp8);
          r80_7ff_tmp188 = simd_or(r80_7ff_tmp185, r80_7ff_tmp187);
          r80_7ff_tmp189 = simd_or(r80_7ff_tmp188, byte_99);
          r80_7ff_tmp190 = simd_or(r80_7ff_tmp189, byte_9b);
          r80_7ff_tmp191 = simd_or(r80_7ff_tmp190, byte_9d);
          r80_7ff_tmp192 = simd_or(r80_7ff_tmp191, byte_9f);
          r80_7ff_tmp193 = simd_or(r80_7ff_tmp192, r80_7ff_tmp28);
          r80_7ff_tmp194 = simd_or(r80_7ff_tmp193, r80_7ff_tmp30);
          r80_7ff_tmp195 = simd_or(r80_7ff_tmp194, r80_7ff_tmp32);
          r80_7ff_tmp196 = simd_or(r80_7ff_tmp195, r80_7ff_tmp34);
          r80_7ff_tmp197 = simd_or(r80_7ff_tmp196, r80_7ff_tmp36);
          r80_7ff_tmp198 = simd_or(r80_7ff_tmp197, r80_7ff_tmp38);
          r80_7ff_tmp199 = simd_or(r80_7ff_tmp198, r80_7ff_tmp40);
          r80_7ff_tmp200 = simd_not(tmp7);
          r80_7ff_tmp201 = simd_or(simd_and(basis_bits.bit_3, r80_7ff_tmp200), simd_andc(tmp143, basis_bits.bit_3));
          r80_7ff_tmp202 = simd_and(tmp68, r80_7ff_tmp201);
          r80_7ff_tmp203 = simd_or(r80_7ff_tmp199, r80_7ff_tmp202);
          r80_7ff_tmp204 = simd_or(r80_7ff_tmp203, byte_b5);
          r80_7ff_tmp205 = simd_and(tmp51, tmp98);
          r80_7ff_tmp206 = simd_or(r80_7ff_tmp204, r80_7ff_tmp205);
          r80_7ff_tmp207 = simd_not(tmp8);
          r80_7ff_tmp208 = simd_or(simd_and(basis_bits.bit_5, r80_7ff_tmp207), simd_andc(tmp3, basis_bits.bit_5));
          r80_7ff_tmp209 = simd_and(tmp90, r80_7ff_tmp208);
          cc_range_3c0_3fb_2 = simd_or(r80_7ff_tmp206, r80_7ff_tmp209);
          carryQ.cq[31] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(31), byte_cf_adv));
          r80_7ff_tmp210 = simd_and(byte_cf_adv, cc_range_3c0_3fb_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp210);
          r80_7ff_tmp211 = simd_and(tmp11, tmp15);
          byte_d0 = simd_andc(r80_7ff_tmp211, tmp9);
          byte_range_b0_bf = simd_and(tmp14, tmp12);
          carryQ.cq[32] = carryout2carry(pablo_blk_Advance(byte_d0, carryQ.get_carry_in(32), byte_d0_adv));
          r80_7ff_tmp212 = simd_and(byte_d0_adv, byte_range_b0_bf);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp212);
          byte_d1 = simd_and(r80_7ff_tmp211, tmp29);
          r80_7ff_tmp213 = simd_or(tmp30, r80_7ff_tmp28);
          r80_7ff_tmp214 = simd_or(r80_7ff_tmp213, r80_7ff_tmp30);
          r80_7ff_tmp215 = simd_or(r80_7ff_tmp214, r80_7ff_tmp32);
          r80_7ff_tmp216 = simd_or(r80_7ff_tmp215, r80_7ff_tmp34);
          r80_7ff_tmp217 = simd_or(r80_7ff_tmp216, r80_7ff_tmp36);
          r80_7ff_tmp218 = simd_or(r80_7ff_tmp217, r80_7ff_tmp38);
          r80_7ff_tmp219 = simd_or(r80_7ff_tmp218, r80_7ff_tmp40);
          r80_7ff_tmp220 = simd_or(r80_7ff_tmp219, r80_7ff_tmp42);
          r80_7ff_tmp221 = simd_and(byte_range_b0_bf, tmp29);
          r80_7ff_tmp222 = simd_or(r80_7ff_tmp220, r80_7ff_tmp221);
          r80_7ff_tmp223 = simd_and(byte_range_b0_bf, tmp63);
          r80_7ff_tmp224 = simd_or(r80_7ff_tmp222, r80_7ff_tmp223);
          r80_7ff_tmp225 = simd_and(byte_range_b0_bf, tmp81);
          r80_7ff_tmp226 = simd_or(r80_7ff_tmp224, r80_7ff_tmp225);
          r80_7ff_tmp227 = simd_and(byte_range_b0_bf, tmp93);
          r80_7ff_tmp228 = simd_or(r80_7ff_tmp226, r80_7ff_tmp227);
          r80_7ff_tmp229 = simd_and(byte_range_b0_bf, tmp102);
          r80_7ff_tmp230 = simd_or(r80_7ff_tmp228, r80_7ff_tmp229);
          r80_7ff_tmp231 = simd_and(byte_range_b0_bf, tmp57);
          r80_7ff_tmp232 = simd_or(r80_7ff_tmp230, r80_7ff_tmp231);
          r80_7ff_tmp233 = simd_and(byte_range_b0_bf, tmp19);
          r80_7ff_tmp234 = simd_or(r80_7ff_tmp232, r80_7ff_tmp233);
          r80_7ff_tmp235 = simd_and(byte_range_b0_bf, tmp143);
          cc_range_440_47f_2 = simd_or(r80_7ff_tmp234, r80_7ff_tmp235);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(byte_d1, carryQ.get_carry_in(33), byte_d1_adv));
          r80_7ff_tmp236 = simd_and(byte_d1_adv, cc_range_440_47f_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp236);
          byte_d2 = simd_and(r80_7ff_tmp211, tmp46);
          r80_7ff_tmp237 = simd_or(tmp29, tmp57);
          r80_7ff_tmp238 = simd_or(r80_7ff_tmp237, tmp19);
          r80_7ff_tmp239 = simd_or(r80_7ff_tmp238, tmp143);
          r80_7ff_tmp240 = simd_and(tmp65, r80_7ff_tmp239);
          r80_7ff_tmp241 = simd_or(r80_7ff_tmp240, byte_91);
          r80_7ff_tmp242 = simd_or(r80_7ff_tmp241, byte_93);
          r80_7ff_tmp243 = simd_or(r80_7ff_tmp242, byte_95);
          r80_7ff_tmp244 = simd_or(r80_7ff_tmp243, byte_97);
          r80_7ff_tmp245 = simd_or(r80_7ff_tmp244, byte_99);
          r80_7ff_tmp246 = simd_or(r80_7ff_tmp245, byte_9b);
          r80_7ff_tmp247 = simd_or(r80_7ff_tmp246, byte_9d);
          r80_7ff_tmp248 = simd_or(r80_7ff_tmp247, byte_9f);
          r80_7ff_tmp249 = simd_or(r80_7ff_tmp248, r80_7ff_tmp28);
          r80_7ff_tmp250 = simd_or(r80_7ff_tmp249, r80_7ff_tmp30);
          r80_7ff_tmp251 = simd_or(r80_7ff_tmp250, r80_7ff_tmp32);
          r80_7ff_tmp252 = simd_or(r80_7ff_tmp251, r80_7ff_tmp34);
          r80_7ff_tmp253 = simd_or(r80_7ff_tmp252, r80_7ff_tmp36);
          r80_7ff_tmp254 = simd_or(r80_7ff_tmp253, r80_7ff_tmp38);
          r80_7ff_tmp255 = simd_or(r80_7ff_tmp254, r80_7ff_tmp40);
          r80_7ff_tmp256 = simd_or(r80_7ff_tmp255, r80_7ff_tmp42);
          r80_7ff_tmp257 = simd_or(r80_7ff_tmp256, r80_7ff_tmp221);
          r80_7ff_tmp258 = simd_or(r80_7ff_tmp257, r80_7ff_tmp223);
          r80_7ff_tmp259 = simd_or(r80_7ff_tmp258, r80_7ff_tmp225);
          r80_7ff_tmp260 = simd_or(r80_7ff_tmp259, r80_7ff_tmp227);
          r80_7ff_tmp261 = simd_or(r80_7ff_tmp260, r80_7ff_tmp229);
          r80_7ff_tmp262 = simd_or(r80_7ff_tmp261, r80_7ff_tmp231);
          r80_7ff_tmp263 = simd_or(r80_7ff_tmp262, r80_7ff_tmp233);
          cc_range_481_4bf_2 = simd_or(r80_7ff_tmp263, r80_7ff_tmp235);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(34), byte_d2_adv));
          r80_7ff_tmp264 = simd_and(byte_d2_adv, cc_range_481_4bf_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp264);
          byte_d3 = simd_and(r80_7ff_tmp211, tmp63);
          r80_7ff_tmp265 = simd_or(tmp46, tmp73);
          r80_7ff_tmp266 = simd_or(r80_7ff_tmp265, tmp87);
          r80_7ff_tmp267 = simd_or(r80_7ff_tmp266, tmp98);
          r80_7ff_tmp268 = simd_or(r80_7ff_tmp267, tmp106);
          r80_7ff_tmp269 = simd_or(r80_7ff_tmp268, tmp119);
          r80_7ff_tmp270 = simd_or(r80_7ff_tmp269, tmp34);
          r80_7ff_tmp271 = simd_and(tmp65, r80_7ff_tmp270);
          r80_7ff_tmp272 = simd_or(r80_7ff_tmp271, byte_91);
          r80_7ff_tmp273 = simd_or(r80_7ff_tmp272, byte_93);
          r80_7ff_tmp274 = simd_or(r80_7ff_tmp273, byte_95);
          r80_7ff_tmp275 = simd_or(r80_7ff_tmp274, byte_97);
          r80_7ff_tmp276 = simd_or(r80_7ff_tmp275, byte_99);
          r80_7ff_tmp277 = simd_or(r80_7ff_tmp276, byte_9b);
          r80_7ff_tmp278 = simd_or(r80_7ff_tmp277, byte_9d);
          r80_7ff_tmp279 = simd_or(r80_7ff_tmp278, byte_9f);
          r80_7ff_tmp280 = simd_or(r80_7ff_tmp279, r80_7ff_tmp28);
          r80_7ff_tmp281 = simd_or(r80_7ff_tmp280, r80_7ff_tmp30);
          r80_7ff_tmp282 = simd_or(r80_7ff_tmp281, r80_7ff_tmp32);
          r80_7ff_tmp283 = simd_or(r80_7ff_tmp282, r80_7ff_tmp34);
          r80_7ff_tmp284 = simd_or(r80_7ff_tmp283, r80_7ff_tmp36);
          r80_7ff_tmp285 = simd_or(r80_7ff_tmp284, r80_7ff_tmp38);
          r80_7ff_tmp286 = simd_or(r80_7ff_tmp285, r80_7ff_tmp40);
          r80_7ff_tmp287 = simd_or(r80_7ff_tmp286, r80_7ff_tmp42);
          r80_7ff_tmp288 = simd_or(r80_7ff_tmp287, r80_7ff_tmp221);
          r80_7ff_tmp289 = simd_or(r80_7ff_tmp288, r80_7ff_tmp223);
          r80_7ff_tmp290 = simd_or(r80_7ff_tmp289, r80_7ff_tmp225);
          r80_7ff_tmp291 = simd_or(r80_7ff_tmp290, r80_7ff_tmp227);
          r80_7ff_tmp292 = simd_or(r80_7ff_tmp291, r80_7ff_tmp229);
          r80_7ff_tmp293 = simd_or(r80_7ff_tmp292, r80_7ff_tmp231);
          r80_7ff_tmp294 = simd_or(r80_7ff_tmp293, r80_7ff_tmp233);
          cc_range_4c2_4ff_2 = simd_or(r80_7ff_tmp294, r80_7ff_tmp235);
          carryQ.cq[35] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(35), byte_d3_adv));
          r80_7ff_tmp295 = simd_and(byte_d3_adv, cc_range_4c2_4ff_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp295);
          byte_d4 = simd_and(r80_7ff_tmp211, tmp73);
          r80_7ff_tmp296 = simd_and(basis_bits.bit_2, tmp37);
          r80_7ff_tmp297 = simd_andc(tmp14, r80_7ff_tmp296);
          cc_range_501_527_2 = simd_andc(r80_7ff_tmp297, basis_bits.bit_7);
          carryQ.cq[36] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(36), byte_d4_adv));
          r80_7ff_tmp298 = simd_and(byte_d4_adv, cc_range_501_527_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp298);
          byte_d5 = simd_and(r80_7ff_tmp211, tmp81);
          r80_7ff_tmp299 = simd_or(basis_bits.bit_3, tmp9);
          byte_range_a1_bf = simd_and(tmp68, r80_7ff_tmp299);
          carryQ.cq[37] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(37), byte_d5_adv));
          r80_7ff_tmp300 = simd_and(byte_d5_adv, byte_range_a1_bf);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp300);
          byte_d6 = simd_and(r80_7ff_tmp211, tmp87);
          byte_range_80_87 = simd_andc(tmp65, basis_bits.bit_4);
          carryQ.cq[38] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(38), byte_d6_adv));
          r80_7ff_tmp301 = simd_and(byte_d6_adv, byte_range_80_87);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp301);
        }
        else {
          carryQ.CarryDequeueEnqueue(20, 19);
        }
        tmp150 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp11, tmp150);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(39, 35))) {
          byte_e1 = simd_and(byte_range_e0_ef, tmp29);
          byte_b4 = simd_and(tmp51, tmp73);
          carryQ.cq[39] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(39), r800_ffff_tmp1));
          sequence_e1_b4 = simd_and(r800_ffff_tmp1, byte_b4);
          carryQ.cq[40] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(40), byte_e1_adv));
          sequence_e1_b4 = simd_and(byte_e1_adv, byte_b4);
          r800_ffff_tmp2 = simd_and(basis_bits.bit_2, tmp82);
          byte_range_80_ab = simd_andc(tmp14, r800_ffff_tmp2);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e1_b4, carryQ.get_carry_in(41), sequence_e1_b4_adv));
          r800_ffff_tmp3 = simd_and(sequence_e1_b4_adv, byte_range_80_ab);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp3);
          byte_b5 = simd_and(tmp51, tmp81);
          sequence_e1_b5 = simd_and(byte_e1_adv, byte_b5);
          sequence_e1_b5 = simd_and(byte_e1_adv, byte_b5);
          r800_ffff_tmp4 = simd_not(basis_bits.bit_4);
          r800_ffff_tmp5 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp4), simd_andc(tmp5, basis_bits.bit_3));
          r800_ffff_tmp6 = simd_and(tmp68, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_and(tmp90, tmp136);
          cc_range_1d6b_1d79_3 = simd_or(r800_ffff_tmp6, r800_ffff_tmp7);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e1_b5, carryQ.get_carry_in(42), sequence_e1_b5_adv));
          r800_ffff_tmp8 = simd_and(sequence_e1_b5_adv, cc_range_1d6b_1d79_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp8);
          byte_b6 = simd_and(tmp51, tmp87);
          sequence_e1_b6 = simd_and(byte_e1_adv, byte_b6);
          sequence_e1_b6 = simd_and(byte_e1_adv, byte_b6);
          r800_ffff_tmp9 = simd_and(basis_bits.bit_3, tmp5);
          byte_range_80_9a = simd_andc(tmp30, r800_ffff_tmp9);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e1_b6, carryQ.get_carry_in(43), sequence_e1_b6_adv));
          r800_ffff_tmp10 = simd_and(sequence_e1_b6_adv, byte_range_80_9a);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp10);
          byte_b8 = simd_and(tmp51, tmp98);
          sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
          sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
          cc_range_1e01_1e3f_3 = simd_andc(tmp14, basis_bits.bit_7);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(44), sequence_e1_b8_adv));
          r800_ffff_tmp11 = simd_and(sequence_e1_b8_adv, cc_range_1e01_1e3f_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp11);
          byte_b9 = simd_and(tmp51, tmp102);
          sequence_e1_b9 = simd_and(byte_e1_adv, byte_b9);
          sequence_e1_b9 = simd_and(byte_e1_adv, byte_b9);
          cc_range_1e41_1e7f_3 = simd_andc(tmp14, basis_bits.bit_7);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e1_b9, carryQ.get_carry_in(45), sequence_e1_b9_adv));
          r800_ffff_tmp12 = simd_and(sequence_e1_b9_adv, cc_range_1e41_1e7f_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp12);
          byte_ba = simd_and(tmp51, tmp106);
          sequence_e1_ba = simd_and(byte_e1_adv, byte_ba);
          sequence_e1_ba = simd_and(byte_e1_adv, byte_ba);
          r800_ffff_tmp13 = simd_andc(basis_bits.bit_7, tmp7);
          r800_ffff_tmp14 = simd_or(r800_ffff_tmp13, tmp81);
          r800_ffff_tmp15 = simd_or(r800_ffff_tmp14, tmp93);
          r800_ffff_tmp16 = simd_or(r800_ffff_tmp15, tmp102);
          r800_ffff_tmp17 = simd_or(r800_ffff_tmp16, tmp57);
          r800_ffff_tmp18 = simd_or(r800_ffff_tmp17, tmp19);
          r800_ffff_tmp19 = simd_or(r800_ffff_tmp18, tmp143);
          r800_ffff_tmp20 = simd_and(tmp65, r800_ffff_tmp19);
          r800_ffff_tmp21 = simd_or(r800_ffff_tmp20, byte_91);
          r800_ffff_tmp22 = simd_or(r800_ffff_tmp21, byte_93);
          r800_ffff_tmp23 = simd_not(tmp39);
          r800_ffff_tmp24 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp23), simd_andc(tmp31, basis_bits.bit_4));
          r800_ffff_tmp25 = simd_and(tmp16, r800_ffff_tmp24);
          r800_ffff_tmp26 = simd_or(r800_ffff_tmp22, r800_ffff_tmp25);
          r800_ffff_tmp27 = simd_or(r800_ffff_tmp26, byte_9f);
          r800_ffff_tmp28 = simd_and(tmp14, tmp150);
          r800_ffff_tmp29 = simd_and(r800_ffff_tmp28, tmp29);
          r800_ffff_tmp30 = simd_or(r800_ffff_tmp27, r800_ffff_tmp29);
          r800_ffff_tmp31 = simd_and(r800_ffff_tmp28, tmp63);
          r800_ffff_tmp32 = simd_or(r800_ffff_tmp30, r800_ffff_tmp31);
          r800_ffff_tmp33 = simd_and(r800_ffff_tmp28, tmp81);
          r800_ffff_tmp34 = simd_or(r800_ffff_tmp32, r800_ffff_tmp33);
          r800_ffff_tmp35 = simd_and(r800_ffff_tmp28, tmp93);
          r800_ffff_tmp36 = simd_or(r800_ffff_tmp34, r800_ffff_tmp35);
          r800_ffff_tmp37 = simd_and(r800_ffff_tmp28, tmp102);
          r800_ffff_tmp38 = simd_or(r800_ffff_tmp36, r800_ffff_tmp37);
          r800_ffff_tmp39 = simd_and(r800_ffff_tmp28, tmp57);
          r800_ffff_tmp40 = simd_or(r800_ffff_tmp38, r800_ffff_tmp39);
          r800_ffff_tmp41 = simd_and(r800_ffff_tmp28, tmp19);
          r800_ffff_tmp42 = simd_or(r800_ffff_tmp40, r800_ffff_tmp41);
          r800_ffff_tmp43 = simd_and(r800_ffff_tmp28, tmp143);
          r800_ffff_tmp44 = simd_or(r800_ffff_tmp42, r800_ffff_tmp43);
          r800_ffff_tmp45 = simd_and(tmp51, tmp29);
          r800_ffff_tmp46 = simd_or(r800_ffff_tmp44, r800_ffff_tmp45);
          r800_ffff_tmp47 = simd_and(tmp51, tmp63);
          r800_ffff_tmp48 = simd_or(r800_ffff_tmp46, r800_ffff_tmp47);
          r800_ffff_tmp49 = simd_or(r800_ffff_tmp48, byte_b5);
          r800_ffff_tmp50 = simd_and(tmp51, tmp93);
          r800_ffff_tmp51 = simd_or(r800_ffff_tmp49, r800_ffff_tmp50);
          r800_ffff_tmp52 = simd_or(r800_ffff_tmp51, byte_b9);
          r800_ffff_tmp53 = simd_or(r800_ffff_tmp52, tmp58);
          r800_ffff_tmp54 = simd_and(tmp51, tmp19);
          r800_ffff_tmp55 = simd_or(r800_ffff_tmp53, r800_ffff_tmp54);
          r800_ffff_tmp56 = simd_and(tmp51, tmp143);
          cc_range_1e81_1ebf_3 = simd_or(r800_ffff_tmp55, r800_ffff_tmp56);
          carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e1_ba, carryQ.get_carry_in(46), sequence_e1_ba_adv));
          r800_ffff_tmp57 = simd_and(sequence_e1_ba_adv, cc_range_1e81_1ebf_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp57);
          byte_bb = simd_and(tmp51, tmp57);
          sequence_e1_bb = simd_and(byte_e1_adv, byte_bb);
          sequence_e1_bb = simd_and(byte_e1_adv, byte_bb);
          cc_range_1ec1_1eff_3 = simd_andc(tmp14, basis_bits.bit_7);
          carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e1_bb, carryQ.get_carry_in(47), sequence_e1_bb_adv));
          r800_ffff_tmp58 = simd_and(sequence_e1_bb_adv, cc_range_1ec1_1eff_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp58);
          byte_bc = simd_and(tmp51, tmp119);
          sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
          sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
          r800_ffff_tmp59 = simd_or(tmp99, tmp132);
          r800_ffff_tmp60 = simd_andc(r800_ffff_tmp28, basis_bits.bit_4);
          r800_ffff_tmp61 = simd_or(r800_ffff_tmp59, r800_ffff_tmp60);
          r800_ffff_tmp62 = simd_andc(tmp51, basis_bits.bit_4);
          cc_range_1f00_1f30_3 = simd_or(r800_ffff_tmp61, r800_ffff_tmp62);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(48), sequence_e1_bc_adv));
          r800_ffff_tmp63 = simd_and(sequence_e1_bc_adv, cc_range_1f00_1f30_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp63);
          byte_bd = simd_and(tmp51, tmp19);
          sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
          sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
          r800_ffff_tmp64 = simd_andc(tmp99, tmp39);
          r800_ffff_tmp65 = simd_or(r800_ffff_tmp64, tmp131);
          r800_ffff_tmp66 = simd_or(r800_ffff_tmp65, r800_ffff_tmp60);
          r800_ffff_tmp67 = simd_and(basis_bits.bit_4, tmp39);
          r800_ffff_tmp68 = simd_andc(tmp51, r800_ffff_tmp67);
          cc_range_1f40_1f70_3 = simd_or(r800_ffff_tmp66, r800_ffff_tmp68);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(49), sequence_e1_bd_adv));
          r800_ffff_tmp69 = simd_and(sequence_e1_bd_adv, cc_range_1f40_1f70_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp69);
          byte_be = simd_and(tmp51, tmp135);
          sequence_e1_be = simd_and(byte_e1_adv, byte_be);
          sequence_e1_be = simd_and(byte_e1_adv, byte_be);
          r800_ffff_tmp70 = simd_andc(tmp64, tmp15);
          r800_ffff_tmp71 = simd_andc(r800_ffff_tmp70, tmp150);
          r800_ffff_tmp72 = simd_andc(tmp14, r800_ffff_tmp71);
          r800_ffff_tmp73 = simd_andc(r800_ffff_tmp72, basis_bits.bit_4);
          r800_ffff_tmp74 = simd_andc(r800_ffff_tmp62, tmp31);
          r800_ffff_tmp75 = simd_or(r800_ffff_tmp73, r800_ffff_tmp74);
          r800_ffff_tmp76 = simd_and(tmp72, basis_bits.bit_6);
          r800_ffff_tmp77 = simd_and(tmp51, r800_ffff_tmp76);
          r800_ffff_tmp78 = simd_or(r800_ffff_tmp75, r800_ffff_tmp77);
          cc_range_1f80_1fbe_3 = simd_or(r800_ffff_tmp78, byte_be);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(50), sequence_e1_be_adv));
          r800_ffff_tmp79 = simd_and(sequence_e1_be_adv, cc_range_1f80_1fbe_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp79);
          byte_bf = simd_and(tmp51, tmp143);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          r800_ffff_tmp80 = simd_not(tmp8);
          r800_ffff_tmp81 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp80), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp82 = simd_and(tmp99, r800_ffff_tmp81);
          r800_ffff_tmp83 = simd_and(tmp65, r800_ffff_tmp76);
          r800_ffff_tmp84 = simd_or(r800_ffff_tmp82, r800_ffff_tmp83);
          r800_ffff_tmp85 = simd_andc(tmp16, tmp7);
          r800_ffff_tmp86 = simd_or(r800_ffff_tmp84, r800_ffff_tmp85);
          r800_ffff_tmp87 = simd_and(tmp16, r800_ffff_tmp76);
          r800_ffff_tmp88 = simd_or(r800_ffff_tmp86, r800_ffff_tmp87);
          r800_ffff_tmp89 = simd_or(r800_ffff_tmp88, r800_ffff_tmp60);
          r800_ffff_tmp90 = simd_and(r800_ffff_tmp62, r800_ffff_tmp81);
          r800_ffff_tmp91 = simd_or(r800_ffff_tmp89, r800_ffff_tmp90);
          cc_range_1fc2_1ff6_3 = simd_or(r800_ffff_tmp91, r800_ffff_tmp77);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(51), sequence_e1_bf_adv));
          r800_ffff_tmp92 = simd_and(sequence_e1_bf_adv, cc_range_1fc2_1ff6_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp92);
          byte_e2 = simd_and(byte_range_e0_ef, tmp46);
          byte_84 = simd_and(tmp65, tmp73);
          carryQ.cq[52] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(52), r800_ffff_tmp93));
          sequence_e2_84 = simd_and(r800_ffff_tmp93, byte_84);
          carryQ.cq[53] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(53), byte_e2_adv));
          sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
          r800_ffff_tmp94 = simd_or(tmp106, tmp34);
          r800_ffff_tmp95 = simd_and(tmp65, r800_ffff_tmp94);
          r800_ffff_tmp96 = simd_or(r800_ffff_tmp95, byte_93);
          r800_ffff_tmp97 = simd_or(r800_ffff_tmp96, r800_ffff_tmp43);
          r800_ffff_tmp98 = simd_or(r800_ffff_tmp97, byte_b4);
          r800_ffff_tmp99 = simd_or(r800_ffff_tmp98, byte_b9);
          r800_ffff_tmp100 = simd_andc(tmp17, basis_bits.bit_6);
          r800_ffff_tmp101 = simd_and(tmp51, r800_ffff_tmp100);
          cc_range_210a_213c_3 = simd_or(r800_ffff_tmp99, r800_ffff_tmp101);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(54), sequence_e2_84_adv));
          r800_ffff_tmp102 = simd_and(sequence_e2_84_adv, cc_range_210a_213c_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp102);
          byte_85 = simd_and(tmp65, tmp81);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          r800_ffff_tmp103 = simd_or(tmp53, tmp135);
          cc_range_2146_214e_3 = simd_and(tmp65, r800_ffff_tmp103);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(55), sequence_e2_85_adv));
          r800_ffff_tmp104 = simd_and(sequence_e2_85_adv, cc_range_2146_214e_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp104);
          byte_86 = simd_and(tmp65, tmp87);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(56), sequence_e2_86_adv));
          r800_ffff_tmp105 = simd_and(sequence_e2_86_adv, byte_84);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp105);
          byte_b0 = simd_andc(tmp51, tmp9);
          sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
          sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
          byte_range_b0_bf = simd_and(tmp14, tmp12);
          carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(57), sequence_e2_b0_adv));
          r800_ffff_tmp106 = simd_and(sequence_e2_b0_adv, byte_range_b0_bf);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp106);
          byte_b1 = simd_and(byte_range_b0_bf, tmp29);
          sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
          sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
          r800_ffff_tmp107 = simd_and(basis_bits.bit_3, tmp143);
          r800_ffff_tmp108 = simd_andc(tmp30, r800_ffff_tmp107);
          r800_ffff_tmp109 = simd_or(r800_ffff_tmp108, r800_ffff_tmp29);
          r800_ffff_tmp110 = simd_and(r800_ffff_tmp28, tmp72);
          r800_ffff_tmp111 = simd_not(basis_bits.bit_7);
          r800_ffff_tmp112 = simd_or(simd_and(basis_bits.bit_6, r800_ffff_tmp111), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          r800_ffff_tmp113 = simd_and(r800_ffff_tmp110, r800_ffff_tmp112);
          r800_ffff_tmp114 = simd_or(r800_ffff_tmp109, r800_ffff_tmp113);
          r800_ffff_tmp115 = simd_and(r800_ffff_tmp28, tmp98);
          r800_ffff_tmp116 = simd_or(r800_ffff_tmp114, r800_ffff_tmp115);
          r800_ffff_tmp117 = simd_and(r800_ffff_tmp28, tmp106);
          r800_ffff_tmp118 = simd_or(r800_ffff_tmp116, r800_ffff_tmp117);
          r800_ffff_tmp119 = simd_and(r800_ffff_tmp28, tmp119);
          r800_ffff_tmp120 = simd_or(r800_ffff_tmp118, r800_ffff_tmp119);
          r800_ffff_tmp121 = simd_or(r800_ffff_tmp120, byte_b1);
          r800_ffff_tmp122 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
          r800_ffff_tmp123 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp80), simd_andc(tmp3, basis_bits.bit_5));
          r800_ffff_tmp124 = simd_and(r800_ffff_tmp122, r800_ffff_tmp123);
          r800_ffff_tmp125 = simd_or(r800_ffff_tmp121, r800_ffff_tmp124);
          r800_ffff_tmp126 = simd_and(byte_range_b0_bf, tmp123);
          cc_range_2c40_2c76_3 = simd_or(r800_ffff_tmp125, r800_ffff_tmp126);
          carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(58), sequence_e2_b1_adv));
          r800_ffff_tmp127 = simd_and(sequence_e2_b1_adv, cc_range_2c40_2c76_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp127);
          byte_b2 = simd_and(byte_range_b0_bf, tmp46);
          sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
          sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
          cc_range_2c81_2cbf_3 = simd_andc(tmp14, basis_bits.bit_7);
          carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(59), sequence_e2_b2_adv));
          r800_ffff_tmp128 = simd_and(sequence_e2_b2_adv, cc_range_2c81_2cbf_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp128);
          byte_b3 = simd_and(byte_range_b0_bf, tmp63);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          r800_ffff_tmp129 = simd_or(r800_ffff_tmp22, byte_95);
          r800_ffff_tmp130 = simd_or(r800_ffff_tmp129, byte_97);
          r800_ffff_tmp131 = simd_or(r800_ffff_tmp130, byte_99);
          r800_ffff_tmp132 = simd_or(r800_ffff_tmp131, byte_9b);
          r800_ffff_tmp133 = simd_or(r800_ffff_tmp132, byte_9d);
          r800_ffff_tmp134 = simd_or(r800_ffff_tmp133, byte_9f);
          r800_ffff_tmp135 = simd_or(r800_ffff_tmp134, r800_ffff_tmp29);
          r800_ffff_tmp136 = simd_and(r800_ffff_tmp60, r800_ffff_tmp123);
          r800_ffff_tmp137 = simd_or(r800_ffff_tmp135, r800_ffff_tmp136);
          r800_ffff_tmp138 = simd_or(r800_ffff_tmp137, r800_ffff_tmp119);
          r800_ffff_tmp139 = simd_and(r800_ffff_tmp28, tmp135);
          r800_ffff_tmp140 = simd_or(r800_ffff_tmp138, r800_ffff_tmp139);
          cc_range_2cc1_2cf3_3 = simd_or(r800_ffff_tmp140, byte_b3);
          carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(60), sequence_e2_b3_adv));
          r800_ffff_tmp141 = simd_and(sequence_e2_b3_adv, cc_range_2cc1_2cf3_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp141);
          sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
          sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
          r800_ffff_tmp142 = simd_and(basis_bits.bit_2, tmp88);
          r800_ffff_tmp143 = simd_andc(tmp14, r800_ffff_tmp142);
          r800_ffff_tmp144 = simd_or(r800_ffff_tmp143, r800_ffff_tmp35);
          cc_range_2d00_2d2d_3 = simd_or(r800_ffff_tmp144, r800_ffff_tmp41);
          carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(61), sequence_e2_b4_adv));
          r800_ffff_tmp145 = simd_and(sequence_e2_b4_adv, cc_range_2d00_2d2d_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp145);
          byte_ea = simd_and(byte_range_e0_ef, tmp106);
          carryQ.cq[62] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(62), r800_ffff_tmp146));
          sequence_ea_99 = simd_and(r800_ffff_tmp146, byte_99);
          carryQ.cq[63] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(63), byte_ea_adv));
          sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
          r800_ffff_tmp147 = simd_and(basis_bits.bit_2, tmp95);
          r800_ffff_tmp148 = simd_andc(tmp14, r800_ffff_tmp147);
          cc_range_a641_a66d_3 = simd_andc(r800_ffff_tmp148, basis_bits.bit_7);
          carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(64), sequence_ea_99_adv));
          r800_ffff_tmp149 = simd_and(sequence_ea_99_adv, cc_range_a641_a66d_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp149);
          sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
          sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
          r800_ffff_tmp150 = simd_andc(tmp30, tmp75);
          cc_range_a681_a697_3 = simd_andc(r800_ffff_tmp150, basis_bits.bit_7);
          carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(65), sequence_ea_9a_adv));
          r800_ffff_tmp151 = simd_and(sequence_ea_9a_adv, cc_range_a681_a697_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp151);
          sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
          sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
          r800_ffff_tmp152 = simd_or(tmp63, tmp81);
          r800_ffff_tmp153 = simd_or(r800_ffff_tmp152, tmp93);
          r800_ffff_tmp154 = simd_or(r800_ffff_tmp153, tmp102);
          r800_ffff_tmp155 = simd_or(r800_ffff_tmp154, tmp57);
          r800_ffff_tmp156 = simd_or(r800_ffff_tmp155, tmp19);
          r800_ffff_tmp157 = simd_and(r800_ffff_tmp28, r800_ffff_tmp156);
          r800_ffff_tmp158 = simd_not(tmp48);
          r800_ffff_tmp159 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp158), simd_andc(tmp143, basis_bits.bit_3));
          r800_ffff_tmp160 = simd_and(tmp68, r800_ffff_tmp159);
          r800_ffff_tmp161 = simd_or(r800_ffff_tmp157, r800_ffff_tmp160);
          r800_ffff_tmp162 = simd_or(r800_ffff_tmp161, byte_b3);
          r800_ffff_tmp163 = simd_and(byte_range_b0_bf, tmp81);
          r800_ffff_tmp164 = simd_or(r800_ffff_tmp162, r800_ffff_tmp163);
          r800_ffff_tmp165 = simd_and(byte_range_b0_bf, tmp93);
          r800_ffff_tmp166 = simd_or(r800_ffff_tmp164, r800_ffff_tmp165);
          r800_ffff_tmp167 = simd_and(byte_range_b0_bf, tmp102);
          r800_ffff_tmp168 = simd_or(r800_ffff_tmp166, r800_ffff_tmp167);
          r800_ffff_tmp169 = simd_and(byte_range_b0_bf, tmp57);
          r800_ffff_tmp170 = simd_or(r800_ffff_tmp168, r800_ffff_tmp169);
          r800_ffff_tmp171 = simd_and(byte_range_b0_bf, tmp19);
          r800_ffff_tmp172 = simd_or(r800_ffff_tmp170, r800_ffff_tmp171);
          r800_ffff_tmp173 = simd_and(byte_range_b0_bf, tmp143);
          cc_range_a723_a73f_3 = simd_or(r800_ffff_tmp172, r800_ffff_tmp173);
          carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(66), sequence_ea_9c_adv));
          r800_ffff_tmp174 = simd_and(sequence_ea_9c_adv, cc_range_a723_a73f_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp174);
          sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
          sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
          r800_ffff_tmp175 = simd_or(r800_ffff_tmp135, r800_ffff_tmp31);
          r800_ffff_tmp176 = simd_or(r800_ffff_tmp175, r800_ffff_tmp33);
          r800_ffff_tmp177 = simd_or(r800_ffff_tmp176, r800_ffff_tmp35);
          r800_ffff_tmp178 = simd_or(r800_ffff_tmp177, r800_ffff_tmp37);
          r800_ffff_tmp179 = simd_or(r800_ffff_tmp178, r800_ffff_tmp39);
          r800_ffff_tmp180 = simd_or(r800_ffff_tmp179, r800_ffff_tmp41);
          r800_ffff_tmp181 = simd_or(r800_ffff_tmp180, r800_ffff_tmp43);
          r800_ffff_tmp182 = simd_not(tmp136);
          r800_ffff_tmp183 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp182), simd_andc(tmp136, basis_bits.bit_4));
          r800_ffff_tmp184 = simd_and(byte_range_b0_bf, r800_ffff_tmp183);
          r800_ffff_tmp185 = simd_or(r800_ffff_tmp181, r800_ffff_tmp184);
          r800_ffff_tmp186 = simd_and(byte_range_b0_bf, tmp106);
          r800_ffff_tmp187 = simd_or(r800_ffff_tmp185, r800_ffff_tmp186);
          r800_ffff_tmp188 = simd_and(byte_range_b0_bf, tmp119);
          r800_ffff_tmp189 = simd_or(r800_ffff_tmp187, r800_ffff_tmp188);
          cc_range_a741_a77f_3 = simd_or(r800_ffff_tmp189, r800_ffff_tmp173);
          carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(67), sequence_ea_9d_adv));
          r800_ffff_tmp190 = simd_and(sequence_ea_9d_adv, cc_range_a741_a77f_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp190);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          r800_ffff_tmp191 = simd_or(r800_ffff_tmp15, tmp119);
          r800_ffff_tmp192 = simd_or(r800_ffff_tmp191, tmp135);
          r800_ffff_tmp193 = simd_and(tmp65, r800_ffff_tmp192);
          r800_ffff_tmp194 = simd_or(r800_ffff_tmp193, byte_91);
          r800_ffff_tmp195 = simd_or(r800_ffff_tmp194, byte_93);
          r800_ffff_tmp196 = simd_or(r800_ffff_tmp195, r800_ffff_tmp29);
          r800_ffff_tmp197 = simd_or(r800_ffff_tmp196, r800_ffff_tmp31);
          r800_ffff_tmp198 = simd_or(r800_ffff_tmp197, r800_ffff_tmp33);
          r800_ffff_tmp199 = simd_or(r800_ffff_tmp198, r800_ffff_tmp35);
          cc_range_a781_a7a9_3 = simd_or(r800_ffff_tmp199, r800_ffff_tmp37);
          carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(68), sequence_ea_9e_adv));
          r800_ffff_tmp200 = simd_and(sequence_ea_9e_adv, cc_range_a781_a7a9_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp200);
          sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
          sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
          carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(69), sequence_ea_9f_adv));
          r800_ffff_tmp201 = simd_and(sequence_ea_9f_adv, byte_ba);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp201);
          byte_ef = simd_and(byte_range_e0_ef, tmp143);
          byte_ac = simd_and(r800_ffff_tmp28, tmp119);
          carryQ.cq[70] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(70), r800_ffff_tmp202));
          sequence_ef_ac = simd_and(r800_ffff_tmp202, byte_ac);
          carryQ.cq[71] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(71), byte_ef_adv));
          sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
          r800_ffff_tmp203 = simd_andc(tmp99, tmp128);
          r800_ffff_tmp204 = simd_and(tmp131, tmp4);
          cc_range_fb00_fb13_3 = simd_or(r800_ffff_tmp203, r800_ffff_tmp204);
          carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(72), sequence_ef_ac_adv));
          r800_ffff_tmp205 = simd_and(sequence_ef_ac_adv, cc_range_fb00_fb13_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp205);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          byte_range_81_9a = simd_and(tmp30, tmp10);
          carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(73), sequence_ef_bd_adv));
          r800_ffff_tmp206 = simd_and(sequence_ef_bd_adv, byte_range_81_9a);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp206);
        }
        else {
          carryQ.CarryDequeueEnqueue(39, 35);
        }
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(74), tmp151));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp151, byte_range_80_bf);
        carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(75), tmp152));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp152, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(76, 3))) {
          r10000_10fff_tmp1 = simd_and(byte_range_80_bf, tmp15);
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          sequence_f0_90_90 = simd_and(tmp151, byte_90);
          carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(76), sequence_f0_90_adv));
          sequence_f0_90_90 = simd_and(sequence_f0_90_adv, byte_90);
          r10000_10fff_tmp2 = simd_and(byte_range_80_bf, basis_bits.bit_2);
          byte_range_a8_bf = simd_and(r10000_10fff_tmp2, tmp37);
          carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_f0_90_90, carryQ.get_carry_in(77), sequence_f0_90_90_adv));
          r10000_10fff_tmp3 = simd_and(sequence_f0_90_90_adv, byte_range_a8_bf);
          struct_Ll.cc = simd_or(struct_Ll.cc, r10000_10fff_tmp3);
          sequence_f0_90_91 = simd_and(sequence_f0_90_adv, byte_91);
          sequence_f0_90_91 = simd_and(sequence_f0_90_adv, byte_91);
          byte_range_80_8f = simd_andc(byte_range_80_bf, tmp64);
          carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_f0_90_91, carryQ.get_carry_in(78), sequence_f0_90_91_adv));
          r10000_10fff_tmp4 = simd_and(sequence_f0_90_91_adv, byte_range_80_8f);
          struct_Ll.cc = simd_or(struct_Ll.cc, r10000_10fff_tmp4);
        }
        else {
          carryQ.CarryDequeueEnqueue(76, 3);
        }
        carryQ.CarryQ_Adjust(79);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Ll & struct_Ll, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10;
		BitBlock byte_range_61_7a, tmp11, tmp12, tmp13, byte_f0, tmp14, tmp15, tmp16;
		BitBlock tmp17, tmp18, tmp19, byte_9d, tmp20, sequence_f0_9d, byte_f0_adv;
		BitBlock byte_90, tmp21, sequence_f0_9d_90, sequence_f0_9d_adv, tmp22, tmp23;
		BitBlock tmp24, tmp25, tmp26, tmp27, byte_range_9a_b3, sequence_f0_9d_90_adv;
		BitBlock tmp28, tmp29, byte_91, sequence_f0_9d_91, tmp30, tmp31, tmp32, tmp33;
		BitBlock tmp34, tmp35, tmp36, tmp37, tmp38, tmp39, tmp40, tmp41, tmp42, tmp43;
		BitBlock cc_range_1d44e_1d456_4, sequence_f0_9d_91_adv, tmp44, tmp45, tmp46;
		BitBlock byte_92, sequence_f0_9d_92, tmp47, tmp48, tmp49, tmp50, tmp51, tmp52;
		BitBlock tmp53, tmp54, tmp55, tmp56, tmp57, tmp58, tmp59, tmp60, tmp61;
		BitBlock cc_range_1d482_1d4bd_4, sequence_f0_9d_92_adv, tmp62, tmp63, byte_93;
		BitBlock sequence_f0_9d_93, tmp64, tmp65, tmp66, tmp67, tmp68, tmp69, tmp70;
		BitBlock cc_range_1d4c0_1d4ea_4, sequence_f0_9d_93_adv, tmp71, tmp72, tmp73;
		BitBlock byte_94, sequence_f0_9d_94, tmp74, tmp75, tmp76, tmp77, tmp78, tmp79;
		BitBlock cc_range_1d500_1d51e_4, sequence_f0_9d_94_adv, tmp80, tmp81, byte_95;
		BitBlock sequence_f0_9d_95, tmp82, tmp83, tmp84, tmp85, byte_range_92_ab;
		BitBlock sequence_f0_9d_95_adv, tmp86, tmp87, byte_96, sequence_f0_9d_96;
		BitBlock tmp88, tmp89, tmp90, tmp91, cc_range_1d586_1d5ba_4;
		BitBlock sequence_f0_9d_96_adv, tmp92, tmp93, byte_97, sequence_f0_9d_97;
		BitBlock tmp94, tmp95, tmp96, cc_range_1d5c0_1d5ee_4, sequence_f0_9d_97_adv;
		BitBlock tmp97, tmp98, byte_98, sequence_f0_9d_98, tmp99, tmp100;
		BitBlock cc_range_1d600_1d622_4, sequence_f0_9d_98_adv, tmp101, tmp102;
		BitBlock byte_99, sequence_f0_9d_99, tmp103, tmp104, byte_range_96_af;
		BitBlock sequence_f0_9d_99_adv, tmp105, tmp106, byte_9a, sequence_f0_9d_9a;
		BitBlock tmp107, tmp108, byte_range_8a_a5, sequence_f0_9d_9a_adv, tmp109;
		BitBlock byte_9b, sequence_f0_9d_9b, tmp110, tmp111, tmp112, tmp113, tmp114;
		BitBlock tmp115, tmp116, tmp117, cc_range_1d6c2_1d6fc_4, sequence_f0_9d_9b_adv;
		BitBlock tmp118, tmp119, byte_9c, sequence_f0_9d_9c, tmp120, tmp121, tmp122;
		BitBlock tmp123, tmp124, tmp125, tmp126, cc_range_1d700_1d736_4;
		BitBlock sequence_f0_9d_9c_adv, tmp127, sequence_f0_9d_9d, tmp128, tmp129;
		BitBlock tmp130, tmp131, tmp132, tmp133, cc_range_1d740_1d770_4;
		BitBlock sequence_f0_9d_9d_adv, tmp134, tmp135, byte_9e, sequence_f0_9d_9e;
		BitBlock tmp136, tmp137, tmp138, tmp139, tmp140, tmp141;
		BitBlock cc_range_1d780_1d7aa_4, sequence_f0_9d_9e_adv, tmp142, tmp143;
		BitBlock byte_9f, sequence_f0_9d_9f, tmp144, tmp145, tmp146, tmp147, tmp148;
		BitBlock cc_range_1d7c0_1d7cb_4, sequence_f0_9d_9f_adv, tmp149;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, byte_c2, byte_b5, byte_c2_adv;
		BitBlock r80_7ff_tmp2, byte_c3, r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, cc_range_df_f8_2;
		BitBlock byte_c3_adv, r80_7ff_tmp9, byte_c4, r80_7ff_tmp10, r80_7ff_tmp11;
		BitBlock r80_7ff_tmp12, r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15;
		BitBlock r80_7ff_tmp16, r80_7ff_tmp17, r80_7ff_tmp18, r80_7ff_tmp19;
		BitBlock r80_7ff_tmp20, r80_7ff_tmp21, r80_7ff_tmp22, r80_7ff_tmp23;
		BitBlock r80_7ff_tmp24, r80_7ff_tmp25, r80_7ff_tmp26, r80_7ff_tmp27;
		BitBlock r80_7ff_tmp28, r80_7ff_tmp29, r80_7ff_tmp30, r80_7ff_tmp31;
		BitBlock r80_7ff_tmp32, r80_7ff_tmp33, r80_7ff_tmp34, r80_7ff_tmp35;
		BitBlock r80_7ff_tmp36, r80_7ff_tmp37, r80_7ff_tmp38, r80_7ff_tmp39;
		BitBlock r80_7ff_tmp40, r80_7ff_tmp41, r80_7ff_tmp42, r80_7ff_tmp43;
		BitBlock r80_7ff_tmp44, r80_7ff_tmp45, r80_7ff_tmp46, r80_7ff_tmp47;
		BitBlock r80_7ff_tmp48, r80_7ff_tmp49, r80_7ff_tmp50, r80_7ff_tmp51;
		BitBlock r80_7ff_tmp52, r80_7ff_tmp53, r80_7ff_tmp54, r80_7ff_tmp55;
		BitBlock r80_7ff_tmp56, r80_7ff_tmp57, cc_range_101_13e_2, byte_c4_adv;
		BitBlock r80_7ff_tmp58, byte_c5, r80_7ff_tmp59, r80_7ff_tmp60, r80_7ff_tmp61;
		BitBlock r80_7ff_tmp62, r80_7ff_tmp63, r80_7ff_tmp64, r80_7ff_tmp65;
		BitBlock r80_7ff_tmp66, r80_7ff_tmp67, r80_7ff_tmp68, r80_7ff_tmp69;
		BitBlock r80_7ff_tmp70, r80_7ff_tmp71, r80_7ff_tmp72, r80_7ff_tmp73;
		BitBlock r80_7ff_tmp74, r80_7ff_tmp75, r80_7ff_tmp76, r80_7ff_tmp77;
		BitBlock r80_7ff_tmp78, r80_7ff_tmp79, r80_7ff_tmp80, r80_7ff_tmp81;
		BitBlock r80_7ff_tmp82, r80_7ff_tmp83, r80_7ff_tmp84, r80_7ff_tmp85;
		BitBlock r80_7ff_tmp86, r80_7ff_tmp87, r80_7ff_tmp88, r80_7ff_tmp89;
		BitBlock r80_7ff_tmp90, r80_7ff_tmp91, cc_range_140_17e_2, byte_c5_adv;
		BitBlock r80_7ff_tmp92, byte_c6, r80_7ff_tmp93, r80_7ff_tmp94, r80_7ff_tmp95;
		BitBlock r80_7ff_tmp96, r80_7ff_tmp97, r80_7ff_tmp98, r80_7ff_tmp99;
		BitBlock r80_7ff_tmp100, r80_7ff_tmp101, r80_7ff_tmp102, r80_7ff_tmp103;
		BitBlock r80_7ff_tmp104, r80_7ff_tmp105, r80_7ff_tmp106, r80_7ff_tmp107;
		BitBlock r80_7ff_tmp108, r80_7ff_tmp109, r80_7ff_tmp110, r80_7ff_tmp111;
		BitBlock r80_7ff_tmp112, r80_7ff_tmp113, r80_7ff_tmp114, r80_7ff_tmp115;
		BitBlock r80_7ff_tmp116, r80_7ff_tmp117, r80_7ff_tmp118, r80_7ff_tmp119;
		BitBlock r80_7ff_tmp120, r80_7ff_tmp121, r80_7ff_tmp122, r80_7ff_tmp123;
		BitBlock r80_7ff_tmp124, cc_range_180_1bd_2, byte_c6_adv, r80_7ff_tmp125;
		BitBlock byte_c7, r80_7ff_tmp126, r80_7ff_tmp127, r80_7ff_tmp128;
		BitBlock r80_7ff_tmp129, r80_7ff_tmp130, r80_7ff_tmp131, r80_7ff_tmp132;
		BitBlock r80_7ff_tmp133, r80_7ff_tmp134, r80_7ff_tmp135, r80_7ff_tmp136;
		BitBlock r80_7ff_tmp137, r80_7ff_tmp138, r80_7ff_tmp139, r80_7ff_tmp140;
		BitBlock r80_7ff_tmp141, r80_7ff_tmp142, r80_7ff_tmp143, r80_7ff_tmp144;
		BitBlock r80_7ff_tmp145, r80_7ff_tmp146, r80_7ff_tmp147, r80_7ff_tmp148;
		BitBlock r80_7ff_tmp149, r80_7ff_tmp150, r80_7ff_tmp151, r80_7ff_tmp152;
		BitBlock r80_7ff_tmp153, r80_7ff_tmp154, r80_7ff_tmp155, r80_7ff_tmp156;
		BitBlock r80_7ff_tmp157, cc_range_1c6_1ff_2, byte_c7_adv, r80_7ff_tmp158;
		BitBlock byte_c8, r80_7ff_tmp159, r80_7ff_tmp160, r80_7ff_tmp161;
		BitBlock r80_7ff_tmp162, cc_range_201_23f_2, byte_c8_adv, r80_7ff_tmp163;
		BitBlock byte_c9, r80_7ff_tmp164, r80_7ff_tmp165, r80_7ff_tmp166;
		BitBlock r80_7ff_tmp167, r80_7ff_tmp168, r80_7ff_tmp169, r80_7ff_tmp170;
		BitBlock r80_7ff_tmp171, cc_range_240_24f_2, byte_c9_adv, r80_7ff_tmp172;
		BitBlock byte_ca, r80_7ff_tmp173, r80_7ff_tmp174, cc_range_280_295_2;
		BitBlock byte_ca_adv, r80_7ff_tmp175, byte_cd, r80_7ff_tmp176, r80_7ff_tmp177;
		BitBlock r80_7ff_tmp178, r80_7ff_tmp179, r80_7ff_tmp180, cc_range_371_37b_2;
		BitBlock byte_cd_adv, r80_7ff_tmp181, byte_ce, r80_7ff_tmp182;
		BitBlock cc_range_390_3ac_2, byte_ce_adv, r80_7ff_tmp183, byte_cf;
		BitBlock r80_7ff_tmp184, r80_7ff_tmp185, r80_7ff_tmp186, r80_7ff_tmp187;
		BitBlock r80_7ff_tmp188, r80_7ff_tmp189, r80_7ff_tmp190, r80_7ff_tmp191;
		BitBlock r80_7ff_tmp192, r80_7ff_tmp193, r80_7ff_tmp194, r80_7ff_tmp195;
		BitBlock r80_7ff_tmp196, r80_7ff_tmp197, r80_7ff_tmp198, r80_7ff_tmp199;
		BitBlock r80_7ff_tmp200, r80_7ff_tmp201, r80_7ff_tmp202, r80_7ff_tmp203;
		BitBlock r80_7ff_tmp204, r80_7ff_tmp205, r80_7ff_tmp206, r80_7ff_tmp207;
		BitBlock r80_7ff_tmp208, r80_7ff_tmp209, cc_range_3c0_3fb_2, byte_cf_adv;
		BitBlock r80_7ff_tmp210, r80_7ff_tmp211, byte_d0, byte_range_b0_bf;
		BitBlock byte_d0_adv, r80_7ff_tmp212, byte_d1, r80_7ff_tmp213, r80_7ff_tmp214;
		BitBlock r80_7ff_tmp215, r80_7ff_tmp216, r80_7ff_tmp217, r80_7ff_tmp218;
		BitBlock r80_7ff_tmp219, r80_7ff_tmp220, r80_7ff_tmp221, r80_7ff_tmp222;
		BitBlock r80_7ff_tmp223, r80_7ff_tmp224, r80_7ff_tmp225, r80_7ff_tmp226;
		BitBlock r80_7ff_tmp227, r80_7ff_tmp228, r80_7ff_tmp229, r80_7ff_tmp230;
		BitBlock r80_7ff_tmp231, r80_7ff_tmp232, r80_7ff_tmp233, r80_7ff_tmp234;
		BitBlock r80_7ff_tmp235, cc_range_440_47f_2, byte_d1_adv, r80_7ff_tmp236;
		BitBlock byte_d2, r80_7ff_tmp237, r80_7ff_tmp238, r80_7ff_tmp239;
		BitBlock r80_7ff_tmp240, r80_7ff_tmp241, r80_7ff_tmp242, r80_7ff_tmp243;
		BitBlock r80_7ff_tmp244, r80_7ff_tmp245, r80_7ff_tmp246, r80_7ff_tmp247;
		BitBlock r80_7ff_tmp248, r80_7ff_tmp249, r80_7ff_tmp250, r80_7ff_tmp251;
		BitBlock r80_7ff_tmp252, r80_7ff_tmp253, r80_7ff_tmp254, r80_7ff_tmp255;
		BitBlock r80_7ff_tmp256, r80_7ff_tmp257, r80_7ff_tmp258, r80_7ff_tmp259;
		BitBlock r80_7ff_tmp260, r80_7ff_tmp261, r80_7ff_tmp262, r80_7ff_tmp263;
		BitBlock cc_range_481_4bf_2, byte_d2_adv, r80_7ff_tmp264, byte_d3;
		BitBlock r80_7ff_tmp265, r80_7ff_tmp266, r80_7ff_tmp267, r80_7ff_tmp268;
		BitBlock r80_7ff_tmp269, r80_7ff_tmp270, r80_7ff_tmp271, r80_7ff_tmp272;
		BitBlock r80_7ff_tmp273, r80_7ff_tmp274, r80_7ff_tmp275, r80_7ff_tmp276;
		BitBlock r80_7ff_tmp277, r80_7ff_tmp278, r80_7ff_tmp279, r80_7ff_tmp280;
		BitBlock r80_7ff_tmp281, r80_7ff_tmp282, r80_7ff_tmp283, r80_7ff_tmp284;
		BitBlock r80_7ff_tmp285, r80_7ff_tmp286, r80_7ff_tmp287, r80_7ff_tmp288;
		BitBlock r80_7ff_tmp289, r80_7ff_tmp290, r80_7ff_tmp291, r80_7ff_tmp292;
		BitBlock r80_7ff_tmp293, r80_7ff_tmp294, cc_range_4c2_4ff_2, byte_d3_adv;
		BitBlock r80_7ff_tmp295, byte_d4, r80_7ff_tmp296, r80_7ff_tmp297;
		BitBlock cc_range_501_527_2, byte_d4_adv, r80_7ff_tmp298, byte_d5;
		BitBlock r80_7ff_tmp299, byte_range_a1_bf, byte_d5_adv, r80_7ff_tmp300;
		BitBlock byte_d6, byte_range_80_87, byte_d6_adv, r80_7ff_tmp301, tmp150;
		BitBlock byte_range_e0_ef, byte_e1, byte_b4, r800_ffff_tmp1, sequence_e1_b4;
		BitBlock byte_e1_adv, r800_ffff_tmp2, byte_range_80_ab, sequence_e1_b4_adv;
		BitBlock r800_ffff_tmp3, sequence_e1_b5, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, cc_range_1d6b_1d79_3;
		BitBlock sequence_e1_b5_adv, r800_ffff_tmp8, byte_b6, sequence_e1_b6;
		BitBlock r800_ffff_tmp9, byte_range_80_9a, sequence_e1_b6_adv, r800_ffff_tmp10;
		BitBlock byte_b8, sequence_e1_b8, cc_range_1e01_1e3f_3, sequence_e1_b8_adv;
		BitBlock r800_ffff_tmp11, byte_b9, sequence_e1_b9, cc_range_1e41_1e7f_3;
		BitBlock sequence_e1_b9_adv, r800_ffff_tmp12, byte_ba, sequence_e1_ba;
		BitBlock r800_ffff_tmp13, r800_ffff_tmp14, r800_ffff_tmp15, r800_ffff_tmp16;
		BitBlock r800_ffff_tmp17, r800_ffff_tmp18, r800_ffff_tmp19, r800_ffff_tmp20;
		BitBlock r800_ffff_tmp21, r800_ffff_tmp22, r800_ffff_tmp23, r800_ffff_tmp24;
		BitBlock r800_ffff_tmp25, r800_ffff_tmp26, r800_ffff_tmp27, r800_ffff_tmp28;
		BitBlock r800_ffff_tmp29, r800_ffff_tmp30, r800_ffff_tmp31, r800_ffff_tmp32;
		BitBlock r800_ffff_tmp33, r800_ffff_tmp34, r800_ffff_tmp35, r800_ffff_tmp36;
		BitBlock r800_ffff_tmp37, r800_ffff_tmp38, r800_ffff_tmp39, r800_ffff_tmp40;
		BitBlock r800_ffff_tmp41, r800_ffff_tmp42, r800_ffff_tmp43, r800_ffff_tmp44;
		BitBlock r800_ffff_tmp45, r800_ffff_tmp46, r800_ffff_tmp47, r800_ffff_tmp48;
		BitBlock r800_ffff_tmp49, r800_ffff_tmp50, r800_ffff_tmp51, r800_ffff_tmp52;
		BitBlock r800_ffff_tmp53, r800_ffff_tmp54, r800_ffff_tmp55, r800_ffff_tmp56;
		BitBlock cc_range_1e81_1ebf_3, sequence_e1_ba_adv, r800_ffff_tmp57, byte_bb;
		BitBlock sequence_e1_bb, cc_range_1ec1_1eff_3, sequence_e1_bb_adv;
		BitBlock r800_ffff_tmp58, byte_bc, sequence_e1_bc, r800_ffff_tmp59;
		BitBlock r800_ffff_tmp60, r800_ffff_tmp61, r800_ffff_tmp62;
		BitBlock cc_range_1f00_1f30_3, sequence_e1_bc_adv, r800_ffff_tmp63, byte_bd;
		BitBlock sequence_e1_bd, r800_ffff_tmp64, r800_ffff_tmp65, r800_ffff_tmp66;
		BitBlock r800_ffff_tmp67, r800_ffff_tmp68, cc_range_1f40_1f70_3;
		BitBlock sequence_e1_bd_adv, r800_ffff_tmp69, byte_be, sequence_e1_be;
		BitBlock r800_ffff_tmp70, r800_ffff_tmp71, r800_ffff_tmp72, r800_ffff_tmp73;
		BitBlock r800_ffff_tmp74, r800_ffff_tmp75, r800_ffff_tmp76, r800_ffff_tmp77;
		BitBlock r800_ffff_tmp78, cc_range_1f80_1fbe_3, sequence_e1_be_adv;
		BitBlock r800_ffff_tmp79, byte_bf, sequence_e1_bf, r800_ffff_tmp80;
		BitBlock r800_ffff_tmp81, r800_ffff_tmp82, r800_ffff_tmp83, r800_ffff_tmp84;
		BitBlock r800_ffff_tmp85, r800_ffff_tmp86, r800_ffff_tmp87, r800_ffff_tmp88;
		BitBlock r800_ffff_tmp89, r800_ffff_tmp90, r800_ffff_tmp91;
		BitBlock cc_range_1fc2_1ff6_3, sequence_e1_bf_adv, r800_ffff_tmp92, byte_e2;
		BitBlock byte_84, r800_ffff_tmp93, sequence_e2_84, byte_e2_adv;
		BitBlock r800_ffff_tmp94, r800_ffff_tmp95, r800_ffff_tmp96, r800_ffff_tmp97;
		BitBlock r800_ffff_tmp98, r800_ffff_tmp99, r800_ffff_tmp100, r800_ffff_tmp101;
		BitBlock cc_range_210a_213c_3, sequence_e2_84_adv, r800_ffff_tmp102, byte_85;
		BitBlock sequence_e2_85, r800_ffff_tmp103, cc_range_2146_214e_3;
		BitBlock sequence_e2_85_adv, r800_ffff_tmp104, byte_86, sequence_e2_86;
		BitBlock sequence_e2_86_adv, r800_ffff_tmp105, byte_b0, sequence_e2_b0;
		BitBlock sequence_e2_b0_adv, r800_ffff_tmp106, byte_b1, sequence_e2_b1;
		BitBlock r800_ffff_tmp107, r800_ffff_tmp108, r800_ffff_tmp109;
		BitBlock r800_ffff_tmp110, r800_ffff_tmp111, r800_ffff_tmp112;
		BitBlock r800_ffff_tmp113, r800_ffff_tmp114, r800_ffff_tmp115;
		BitBlock r800_ffff_tmp116, r800_ffff_tmp117, r800_ffff_tmp118;
		BitBlock r800_ffff_tmp119, r800_ffff_tmp120, r800_ffff_tmp121;
		BitBlock r800_ffff_tmp122, r800_ffff_tmp123, r800_ffff_tmp124;
		BitBlock r800_ffff_tmp125, r800_ffff_tmp126, cc_range_2c40_2c76_3;
		BitBlock sequence_e2_b1_adv, r800_ffff_tmp127, byte_b2, sequence_e2_b2;
		BitBlock cc_range_2c81_2cbf_3, sequence_e2_b2_adv, r800_ffff_tmp128, byte_b3;
		BitBlock sequence_e2_b3, r800_ffff_tmp129, r800_ffff_tmp130, r800_ffff_tmp131;
		BitBlock r800_ffff_tmp132, r800_ffff_tmp133, r800_ffff_tmp134;
		BitBlock r800_ffff_tmp135, r800_ffff_tmp136, r800_ffff_tmp137;
		BitBlock r800_ffff_tmp138, r800_ffff_tmp139, r800_ffff_tmp140;
		BitBlock cc_range_2cc1_2cf3_3, sequence_e2_b3_adv, r800_ffff_tmp141;
		BitBlock sequence_e2_b4, r800_ffff_tmp142, r800_ffff_tmp143, r800_ffff_tmp144;
		BitBlock cc_range_2d00_2d2d_3, sequence_e2_b4_adv, r800_ffff_tmp145, byte_ea;
		BitBlock r800_ffff_tmp146, sequence_ea_99, byte_ea_adv, r800_ffff_tmp147;
		BitBlock r800_ffff_tmp148, cc_range_a641_a66d_3, sequence_ea_99_adv;
		BitBlock r800_ffff_tmp149, sequence_ea_9a, r800_ffff_tmp150;
		BitBlock cc_range_a681_a697_3, sequence_ea_9a_adv, r800_ffff_tmp151;
		BitBlock sequence_ea_9c, r800_ffff_tmp152, r800_ffff_tmp153, r800_ffff_tmp154;
		BitBlock r800_ffff_tmp155, r800_ffff_tmp156, r800_ffff_tmp157;
		BitBlock r800_ffff_tmp158, r800_ffff_tmp159, r800_ffff_tmp160;
		BitBlock r800_ffff_tmp161, r800_ffff_tmp162, r800_ffff_tmp163;
		BitBlock r800_ffff_tmp164, r800_ffff_tmp165, r800_ffff_tmp166;
		BitBlock r800_ffff_tmp167, r800_ffff_tmp168, r800_ffff_tmp169;
		BitBlock r800_ffff_tmp170, r800_ffff_tmp171, r800_ffff_tmp172;
		BitBlock r800_ffff_tmp173, cc_range_a723_a73f_3, sequence_ea_9c_adv;
		BitBlock r800_ffff_tmp174, sequence_ea_9d, r800_ffff_tmp175, r800_ffff_tmp176;
		BitBlock r800_ffff_tmp177, r800_ffff_tmp178, r800_ffff_tmp179;
		BitBlock r800_ffff_tmp180, r800_ffff_tmp181, r800_ffff_tmp182;
		BitBlock r800_ffff_tmp183, r800_ffff_tmp184, r800_ffff_tmp185;
		BitBlock r800_ffff_tmp186, r800_ffff_tmp187, r800_ffff_tmp188;
		BitBlock r800_ffff_tmp189, cc_range_a741_a77f_3, sequence_ea_9d_adv;
		BitBlock r800_ffff_tmp190, sequence_ea_9e, r800_ffff_tmp191, r800_ffff_tmp192;
		BitBlock r800_ffff_tmp193, r800_ffff_tmp194, r800_ffff_tmp195;
		BitBlock r800_ffff_tmp196, r800_ffff_tmp197, r800_ffff_tmp198;
		BitBlock r800_ffff_tmp199, cc_range_a781_a7a9_3, sequence_ea_9e_adv;
		BitBlock r800_ffff_tmp200, sequence_ea_9f, sequence_ea_9f_adv;
		BitBlock r800_ffff_tmp201, byte_ef, byte_ac, r800_ffff_tmp202, sequence_ef_ac;
		BitBlock byte_ef_adv, r800_ffff_tmp203, r800_ffff_tmp204, cc_range_fb00_fb13_3;
		BitBlock sequence_ef_ac_adv, r800_ffff_tmp205, sequence_ef_bd;
		BitBlock byte_range_81_9a, sequence_ef_bd_adv, r800_ffff_tmp206;
		BitBlock sequence_f0_90, byte_range_80_bf, tmp151;
		BitBlock sequence_f0_90_byte_range_80_bf, tmp152;
		BitBlock sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock r10000_10fff_tmp1, sequence_f0_90_90, sequence_f0_90_adv;
		BitBlock r10000_10fff_tmp2, byte_range_a8_bf, sequence_f0_90_90_adv;
		BitBlock r10000_10fff_tmp3, sequence_f0_90_91, byte_range_80_8f;
		BitBlock sequence_f0_90_91_adv, r10000_10fff_tmp4;




        struct_Ll.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_and(tmp1, basis_bits.bit_2);
        tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp4 = simd_or(basis_bits.bit_5, tmp3);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        tmp6 = simd_not(tmp5);
        tmp7 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp9 = simd_or(tmp7, tmp8);
        tmp10 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(tmp9, basis_bits.bit_3));
        byte_range_61_7a = simd_and(tmp2, tmp10);
        struct_Ll.cc = simd_or(struct_Ll.cc, byte_range_61_7a);
        tmp11 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp12 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp13 = simd_and(tmp11, tmp12);
        byte_f0 = simd_andc(tmp13, tmp9);
        tmp14 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp15 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp16 = simd_and(tmp14, tmp15);
        tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp18 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp19 = simd_and(tmp17, tmp18);
        byte_9d = simd_and(tmp16, tmp19);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp20));
        sequence_f0_9d = simd_and(tmp20, byte_9d);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        byte_90 = simd_andc(tmp16, tmp9);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(2), tmp21));
        sequence_f0_9d_90 = simd_and(tmp21, byte_90);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(3), sequence_f0_9d_adv));
        sequence_f0_9d_90 = simd_and(sequence_f0_9d_adv, byte_90);
        tmp22 = simd_and(basis_bits.bit_3, tmp7);
        tmp23 = simd_not(tmp22);
        tmp24 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp25 = simd_and(basis_bits.bit_4, tmp24);
        tmp26 = simd_and(basis_bits.bit_3, tmp25);
        tmp27 = simd_or(simd_and(basis_bits.bit_2, tmp23), simd_andc(tmp26, basis_bits.bit_2));
        byte_range_9a_b3 = simd_and(tmp14, tmp27);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(4), sequence_f0_9d_90_adv));
        tmp28 = simd_and(sequence_f0_9d_90_adv, byte_range_9a_b3);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp28);
        tmp29 = simd_andc(tmp18, tmp7);
        byte_91 = simd_and(tmp16, tmp29);
        sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
        sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
        tmp30 = simd_andc(tmp14, basis_bits.bit_2);
        tmp31 = simd_and(basis_bits.bit_5, tmp8);
        tmp32 = simd_or(basis_bits.bit_4, tmp31);
        tmp33 = simd_not(tmp32);
        tmp34 = simd_and(tmp17, basis_bits.bit_6);
        tmp35 = simd_or(simd_and(basis_bits.bit_3, tmp33), simd_andc(tmp34, basis_bits.bit_3));
        tmp36 = simd_and(tmp30, tmp35);
        tmp37 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
        tmp38 = simd_not(tmp37);
        tmp39 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
        tmp40 = simd_or(basis_bits.bit_4, tmp39);
        tmp41 = simd_and(basis_bits.bit_3, tmp40);
        tmp42 = simd_or(simd_and(basis_bits.bit_2, tmp38), simd_andc(tmp41, basis_bits.bit_2));
        tmp43 = simd_and(tmp14, tmp42);
        cc_range_1d44e_1d456_4 = simd_or(tmp36, tmp43);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(5), sequence_f0_9d_91_adv));
        tmp44 = simd_and(sequence_f0_9d_91_adv, cc_range_1d44e_1d456_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp44);
        tmp45 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp46 = simd_andc(tmp45, tmp7);
        byte_92 = simd_and(tmp16, tmp46);
        sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
        sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
        tmp47 = simd_not(tmp17);
        tmp48 = simd_or(tmp7, basis_bits.bit_6);
        tmp49 = simd_or(simd_and(basis_bits.bit_3, tmp47), simd_andc(tmp48, basis_bits.bit_3));
        tmp50 = simd_and(tmp30, tmp49);
        tmp51 = simd_and(tmp14, tmp12);
        tmp52 = simd_not(tmp24);
        tmp53 = simd_or(simd_and(basis_bits.bit_4, tmp52), simd_andc(tmp39, basis_bits.bit_4));
        tmp54 = simd_and(tmp51, tmp53);
        tmp55 = simd_or(tmp50, tmp54);
        tmp56 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp57 = simd_and(tmp56, tmp3);
        tmp58 = simd_and(tmp51, tmp57);
        tmp59 = simd_or(tmp55, tmp58);
        tmp60 = simd_and(tmp51, tmp17);
        tmp61 = simd_and(tmp60, tmp8);
        cc_range_1d482_1d4bd_4 = simd_or(tmp59, tmp61);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(6), sequence_f0_9d_92_adv));
        tmp62 = simd_and(sequence_f0_9d_92_adv, cc_range_1d482_1d4bd_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp62);
        tmp63 = simd_andc(tmp3, tmp7);
        byte_93 = simd_and(tmp16, tmp63);
        sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
        sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
        tmp64 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp65 = simd_andc(tmp14, tmp64);
        tmp66 = simd_andc(tmp7, tmp32);
        tmp67 = simd_andc(tmp65, tmp66);
        tmp68 = simd_and(tmp14, basis_bits.bit_2);
        tmp69 = simd_or(basis_bits.bit_3, tmp25);
        tmp70 = simd_and(tmp68, tmp69);
        cc_range_1d4c0_1d4ea_4 = simd_or(tmp67, tmp70);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(7), sequence_f0_9d_93_adv));
        tmp71 = simd_and(sequence_f0_9d_93_adv, cc_range_1d4c0_1d4ea_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp71);
        tmp72 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp73 = simd_andc(tmp72, tmp8);
        byte_94 = simd_and(tmp16, tmp73);
        sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
        sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
        tmp74 = simd_andc(tmp65, tmp7);
        tmp75 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
        tmp76 = simd_not(tmp75);
        tmp77 = simd_and(basis_bits.bit_3, tmp34);
        tmp78 = simd_or(simd_and(basis_bits.bit_2, tmp76), simd_andc(tmp77, basis_bits.bit_2));
        tmp79 = simd_and(tmp14, tmp78);
        cc_range_1d500_1d51e_4 = simd_or(tmp74, tmp79);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(8), sequence_f0_9d_94_adv));
        tmp80 = simd_and(sequence_f0_9d_94_adv, cc_range_1d500_1d51e_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp80);
        tmp81 = simd_and(tmp72, tmp18);
        byte_95 = simd_and(tmp16, tmp81);
        sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
        sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
        tmp82 = simd_or(basis_bits.bit_3, tmp17);
        tmp83 = simd_not(tmp82);
        tmp84 = simd_and(basis_bits.bit_3, tmp48);
        tmp85 = simd_or(simd_and(basis_bits.bit_2, tmp83), simd_andc(tmp84, basis_bits.bit_2));
        byte_range_92_ab = simd_and(tmp14, tmp85);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(9), sequence_f0_9d_95_adv));
        tmp86 = simd_and(sequence_f0_9d_95_adv, byte_range_92_ab);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp86);
        tmp87 = simd_and(tmp72, tmp45);
        byte_96 = simd_and(tmp16, tmp87);
        sequence_f0_9d_96 = simd_and(sequence_f0_9d_adv, byte_96);
        sequence_f0_9d_96 = simd_and(sequence_f0_9d_adv, byte_96);
        tmp88 = simd_or(basis_bits.bit_3, tmp40);
        tmp89 = simd_and(tmp30, tmp88);
        tmp90 = simd_and(tmp51, basis_bits.bit_4);
        tmp91 = simd_and(tmp90, tmp24);
        cc_range_1d586_1d5ba_4 = simd_or(tmp89, tmp91);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_96, carryQ.get_carry_in(10), sequence_f0_9d_96_adv));
        tmp92 = simd_and(sequence_f0_9d_96_adv, cc_range_1d586_1d5ba_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp92);
        tmp93 = simd_and(tmp72, tmp3);
        byte_97 = simd_and(tmp16, tmp93);
        sequence_f0_9d_97 = simd_and(sequence_f0_9d_adv, byte_97);
        sequence_f0_9d_97 = simd_and(sequence_f0_9d_adv, byte_97);
        tmp94 = simd_andc(tmp30, tmp22);
        tmp95 = simd_or(basis_bits.bit_3, tmp34);
        tmp96 = simd_and(tmp68, tmp95);
        cc_range_1d5c0_1d5ee_4 = simd_or(tmp94, tmp96);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_97, carryQ.get_carry_in(11), sequence_f0_9d_97_adv));
        tmp97 = simd_and(sequence_f0_9d_97_adv, cc_range_1d5c0_1d5ee_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp97);
        tmp98 = simd_andc(tmp56, tmp8);
        byte_98 = simd_and(tmp16, tmp98);
        sequence_f0_9d_98 = simd_and(sequence_f0_9d_adv, byte_98);
        sequence_f0_9d_98 = simd_and(sequence_f0_9d_adv, byte_98);
        tmp99 = simd_andc(tmp65, basis_bits.bit_4);
        tmp100 = simd_and(tmp68, tmp49);
        cc_range_1d600_1d622_4 = simd_or(tmp99, tmp100);
        carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_98, carryQ.get_carry_in(12), sequence_f0_9d_98_adv));
        tmp101 = simd_and(sequence_f0_9d_98_adv, cc_range_1d600_1d622_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp101);
        tmp102 = simd_and(tmp56, tmp18);
        byte_99 = simd_and(tmp16, tmp102);
        sequence_f0_9d_99 = simd_and(sequence_f0_9d_adv, byte_99);
        sequence_f0_9d_99 = simd_and(sequence_f0_9d_adv, byte_99);
        tmp103 = simd_not(basis_bits.bit_3);
        tmp104 = simd_or(simd_and(basis_bits.bit_2, tmp103), simd_andc(tmp41, basis_bits.bit_2));
        byte_range_96_af = simd_and(tmp14, tmp104);
        carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_99, carryQ.get_carry_in(13), sequence_f0_9d_99_adv));
        tmp105 = simd_and(sequence_f0_9d_99_adv, byte_range_96_af);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp105);
        tmp106 = simd_and(tmp56, tmp45);
        byte_9a = simd_and(tmp16, tmp106);
        sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
        sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
        tmp107 = simd_not(tmp88);
        tmp108 = simd_or(simd_and(basis_bits.bit_2, tmp107), simd_andc(tmp69, basis_bits.bit_2));
        byte_range_8a_a5 = simd_and(tmp14, tmp108);
        carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(14), sequence_f0_9d_9a_adv));
        tmp109 = simd_and(sequence_f0_9d_9a_adv, byte_range_8a_a5);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp109);
        byte_9b = simd_and(tmp16, tmp57);
        sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
        sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
        tmp110 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(tmp48, basis_bits.bit_3));
        tmp111 = simd_and(tmp30, tmp110);
        tmp112 = simd_or(basis_bits.bit_3, tmp48);
        tmp113 = simd_not(tmp112);
        tmp114 = simd_and(basis_bits.bit_3, tmp17);
        tmp115 = simd_or(simd_and(basis_bits.bit_2, tmp113), simd_andc(tmp114, basis_bits.bit_2));
        tmp116 = simd_and(tmp14, tmp115);
        tmp117 = simd_or(tmp111, tmp116);
        cc_range_1d6c2_1d6fc_4 = simd_or(tmp117, tmp60);
        carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(15), sequence_f0_9d_9b_adv));
        tmp118 = simd_and(sequence_f0_9d_9b_adv, cc_range_1d6c2_1d6fc_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp118);
        tmp119 = simd_andc(tmp17, tmp8);
        byte_9c = simd_and(tmp16, tmp119);
        sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
        sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
        tmp120 = simd_and(basis_bits.bit_3, tmp32);
        tmp121 = simd_andc(tmp30, tmp120);
        tmp122 = simd_not(basis_bits.bit_5);
        tmp123 = simd_or(simd_and(basis_bits.bit_4, tmp122), simd_andc(tmp39, basis_bits.bit_4));
        tmp124 = simd_and(tmp16, tmp123);
        tmp125 = simd_or(tmp121, tmp124);
        tmp126 = simd_and(tmp51, tmp40);
        cc_range_1d700_1d736_4 = simd_or(tmp125, tmp126);
        carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(16), sequence_f0_9d_9c_adv));
        tmp127 = simd_and(sequence_f0_9d_9c_adv, cc_range_1d700_1d736_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp127);
        sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
        sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
        tmp128 = simd_and(basis_bits.bit_5, tmp3);
        tmp129 = simd_and(basis_bits.bit_4, tmp128);
        tmp130 = simd_andc(tmp65, tmp129);
        tmp131 = simd_andc(tmp16, basis_bits.bit_4);
        tmp132 = simd_andc(tmp131, tmp39);
        tmp133 = simd_or(tmp130, tmp132);
        cc_range_1d740_1d770_4 = simd_or(tmp133, tmp51);
        carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(17), sequence_f0_9d_9d_adv));
        tmp134 = simd_and(sequence_f0_9d_9d_adv, cc_range_1d740_1d770_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp134);
        tmp135 = simd_and(tmp17, tmp45);
        byte_9e = simd_and(tmp16, tmp135);
        sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
        sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
        tmp136 = simd_or(basis_bits.bit_5, tmp8);
        tmp137 = simd_and(basis_bits.bit_4, tmp136);
        tmp138 = simd_andc(tmp65, tmp137);
        tmp139 = simd_and(tmp65, basis_bits.bit_4);
        tmp140 = simd_and(tmp139, tmp24);
        tmp141 = simd_or(tmp138, tmp140);
        cc_range_1d780_1d7aa_4 = simd_or(tmp141, tmp70);
        carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(18), sequence_f0_9d_9e_adv));
        tmp142 = simd_and(sequence_f0_9d_9e_adv, cc_range_1d780_1d7aa_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp142);
        tmp143 = simd_and(tmp17, tmp3);
        byte_9f = simd_and(tmp16, tmp143);
        sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
        sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
        tmp144 = simd_andc(tmp74, tmp3);
        tmp145 = simd_or(simd_and(basis_bits.bit_4, tmp52), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
        tmp146 = simd_and(tmp65, tmp145);
        tmp147 = simd_or(tmp144, tmp146);
        tmp148 = simd_and(tmp65, tmp57);
        cc_range_1d7c0_1d7cb_4 = simd_or(tmp147, tmp148);
        carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(19), sequence_f0_9d_9f_adv));
        tmp149 = simd_and(sequence_f0_9d_9f_adv, cc_range_1d7c0_1d7cb_4);
        struct_Ll.cc = simd_or(struct_Ll.cc, tmp149);
        byte_range_c0_df = simd_andc(tmp11, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(20, 19))) {
          r80_7ff_tmp1 = simd_andc(tmp11, tmp64);
          byte_c2 = simd_and(r80_7ff_tmp1, tmp46);
          byte_b5 = simd_and(tmp51, tmp81);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(20), byte_c2_adv));
          r80_7ff_tmp2 = simd_and(byte_c2_adv, byte_b5);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp2);
          byte_c3 = simd_and(r80_7ff_tmp1, tmp63);
          r80_7ff_tmp3 = simd_or(basis_bits.bit_4, tmp128);
          r80_7ff_tmp4 = simd_and(basis_bits.bit_3, r80_7ff_tmp3);
          r80_7ff_tmp5 = simd_not(r80_7ff_tmp4);
          r80_7ff_tmp6 = simd_and(basis_bits.bit_3, tmp143);
          r80_7ff_tmp7 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp5), simd_andc(r80_7ff_tmp6, basis_bits.bit_2));
          r80_7ff_tmp8 = simd_and(tmp14, r80_7ff_tmp7);
          cc_range_df_f8_2 = simd_or(r80_7ff_tmp8, tmp90);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(21), byte_c3_adv));
          r80_7ff_tmp9 = simd_and(byte_c3_adv, cc_range_df_f8_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp9);
          byte_c4 = simd_and(r80_7ff_tmp1, tmp73);
          r80_7ff_tmp10 = simd_andc(basis_bits.bit_7, tmp7);
          r80_7ff_tmp11 = simd_or(r80_7ff_tmp10, tmp81);
          r80_7ff_tmp12 = simd_or(r80_7ff_tmp11, tmp93);
          r80_7ff_tmp13 = simd_or(r80_7ff_tmp12, tmp102);
          r80_7ff_tmp14 = simd_or(r80_7ff_tmp13, tmp57);
          r80_7ff_tmp15 = simd_or(r80_7ff_tmp14, tmp19);
          r80_7ff_tmp16 = simd_or(r80_7ff_tmp15, tmp143);
          r80_7ff_tmp17 = simd_and(tmp65, r80_7ff_tmp16);
          r80_7ff_tmp18 = simd_or(r80_7ff_tmp17, byte_91);
          r80_7ff_tmp19 = simd_or(r80_7ff_tmp18, byte_93);
          r80_7ff_tmp20 = simd_or(r80_7ff_tmp19, byte_95);
          r80_7ff_tmp21 = simd_or(r80_7ff_tmp20, byte_97);
          r80_7ff_tmp22 = simd_or(r80_7ff_tmp21, byte_99);
          r80_7ff_tmp23 = simd_or(r80_7ff_tmp22, byte_9b);
          r80_7ff_tmp24 = simd_or(r80_7ff_tmp23, byte_9d);
          r80_7ff_tmp25 = simd_or(r80_7ff_tmp24, byte_9f);
          r80_7ff_tmp26 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp27 = simd_and(tmp14, r80_7ff_tmp26);
          r80_7ff_tmp28 = simd_and(r80_7ff_tmp27, tmp29);
          r80_7ff_tmp29 = simd_or(r80_7ff_tmp25, r80_7ff_tmp28);
          r80_7ff_tmp30 = simd_and(r80_7ff_tmp27, tmp63);
          r80_7ff_tmp31 = simd_or(r80_7ff_tmp29, r80_7ff_tmp30);
          r80_7ff_tmp32 = simd_and(r80_7ff_tmp27, tmp81);
          r80_7ff_tmp33 = simd_or(r80_7ff_tmp31, r80_7ff_tmp32);
          r80_7ff_tmp34 = simd_and(r80_7ff_tmp27, tmp93);
          r80_7ff_tmp35 = simd_or(r80_7ff_tmp33, r80_7ff_tmp34);
          r80_7ff_tmp36 = simd_and(r80_7ff_tmp27, tmp102);
          r80_7ff_tmp37 = simd_or(r80_7ff_tmp35, r80_7ff_tmp36);
          r80_7ff_tmp38 = simd_and(r80_7ff_tmp27, tmp57);
          r80_7ff_tmp39 = simd_or(r80_7ff_tmp37, r80_7ff_tmp38);
          r80_7ff_tmp40 = simd_and(r80_7ff_tmp27, tmp19);
          r80_7ff_tmp41 = simd_or(r80_7ff_tmp39, r80_7ff_tmp40);
          r80_7ff_tmp42 = simd_and(r80_7ff_tmp27, tmp143);
          r80_7ff_tmp43 = simd_or(r80_7ff_tmp41, r80_7ff_tmp42);
          r80_7ff_tmp44 = simd_and(tmp51, tmp29);
          r80_7ff_tmp45 = simd_or(r80_7ff_tmp43, r80_7ff_tmp44);
          r80_7ff_tmp46 = simd_and(tmp51, tmp63);
          r80_7ff_tmp47 = simd_or(r80_7ff_tmp45, r80_7ff_tmp46);
          r80_7ff_tmp48 = simd_or(r80_7ff_tmp47, byte_b5);
          r80_7ff_tmp49 = simd_not(tmp136);
          r80_7ff_tmp50 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp49), simd_andc(tmp128, basis_bits.bit_4));
          r80_7ff_tmp51 = simd_and(tmp51, r80_7ff_tmp50);
          r80_7ff_tmp52 = simd_or(r80_7ff_tmp48, r80_7ff_tmp51);
          r80_7ff_tmp53 = simd_and(tmp51, tmp106);
          r80_7ff_tmp54 = simd_or(r80_7ff_tmp52, r80_7ff_tmp53);
          r80_7ff_tmp55 = simd_and(tmp51, tmp119);
          r80_7ff_tmp56 = simd_or(r80_7ff_tmp54, r80_7ff_tmp55);
          r80_7ff_tmp57 = simd_and(tmp51, tmp135);
          cc_range_101_13e_2 = simd_or(r80_7ff_tmp56, r80_7ff_tmp57);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_c4, carryQ.get_carry_in(22), byte_c4_adv));
          r80_7ff_tmp58 = simd_and(byte_c4_adv, cc_range_101_13e_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp58);
          byte_c5 = simd_and(r80_7ff_tmp1, tmp81);
          r80_7ff_tmp59 = simd_andc(tmp9, tmp46);
          r80_7ff_tmp60 = simd_andc(r80_7ff_tmp59, tmp73);
          r80_7ff_tmp61 = simd_andc(r80_7ff_tmp60, tmp87);
          r80_7ff_tmp62 = simd_andc(tmp56, basis_bits.bit_6);
          r80_7ff_tmp63 = simd_andc(r80_7ff_tmp61, r80_7ff_tmp62);
          r80_7ff_tmp64 = simd_andc(r80_7ff_tmp63, tmp57);
          r80_7ff_tmp65 = simd_andc(r80_7ff_tmp64, tmp19);
          r80_7ff_tmp66 = simd_andc(r80_7ff_tmp65, tmp143);
          r80_7ff_tmp67 = simd_andc(tmp65, r80_7ff_tmp66);
          r80_7ff_tmp68 = simd_or(r80_7ff_tmp67, byte_91);
          r80_7ff_tmp69 = simd_or(r80_7ff_tmp68, byte_93);
          r80_7ff_tmp70 = simd_or(r80_7ff_tmp69, byte_95);
          r80_7ff_tmp71 = simd_or(r80_7ff_tmp70, byte_97);
          r80_7ff_tmp72 = simd_or(r80_7ff_tmp71, byte_99);
          r80_7ff_tmp73 = simd_or(r80_7ff_tmp72, byte_9b);
          r80_7ff_tmp74 = simd_or(r80_7ff_tmp73, byte_9d);
          r80_7ff_tmp75 = simd_or(r80_7ff_tmp74, byte_9f);
          r80_7ff_tmp76 = simd_or(r80_7ff_tmp75, r80_7ff_tmp28);
          r80_7ff_tmp77 = simd_or(r80_7ff_tmp76, r80_7ff_tmp30);
          r80_7ff_tmp78 = simd_or(r80_7ff_tmp77, r80_7ff_tmp32);
          r80_7ff_tmp79 = simd_or(r80_7ff_tmp78, r80_7ff_tmp34);
          r80_7ff_tmp80 = simd_or(r80_7ff_tmp79, r80_7ff_tmp36);
          r80_7ff_tmp81 = simd_or(r80_7ff_tmp80, r80_7ff_tmp38);
          r80_7ff_tmp82 = simd_or(r80_7ff_tmp81, r80_7ff_tmp40);
          r80_7ff_tmp83 = simd_or(r80_7ff_tmp82, r80_7ff_tmp42);
          r80_7ff_tmp84 = simd_or(r80_7ff_tmp83, r80_7ff_tmp44);
          r80_7ff_tmp85 = simd_or(r80_7ff_tmp84, r80_7ff_tmp46);
          r80_7ff_tmp86 = simd_or(r80_7ff_tmp85, byte_b5);
          r80_7ff_tmp87 = simd_and(tmp51, tmp93);
          r80_7ff_tmp88 = simd_or(r80_7ff_tmp86, r80_7ff_tmp87);
          r80_7ff_tmp89 = simd_or(r80_7ff_tmp88, r80_7ff_tmp53);
          r80_7ff_tmp90 = simd_or(r80_7ff_tmp89, r80_7ff_tmp55);
          r80_7ff_tmp91 = simd_and(tmp51, tmp34);
          cc_range_140_17e_2 = simd_or(r80_7ff_tmp90, r80_7ff_tmp91);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(byte_c5, carryQ.get_carry_in(23), byte_c5_adv));
          r80_7ff_tmp92 = simd_and(byte_c5_adv, cc_range_140_17e_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp92);
          byte_c6 = simd_and(r80_7ff_tmp1, tmp87);
          r80_7ff_tmp93 = simd_andc(tmp9, tmp63);
          r80_7ff_tmp94 = simd_andc(r80_7ff_tmp93, tmp81);
          r80_7ff_tmp95 = simd_andc(r80_7ff_tmp94, tmp98);
          r80_7ff_tmp96 = simd_andc(tmp17, basis_bits.bit_6);
          r80_7ff_tmp97 = simd_andc(r80_7ff_tmp95, r80_7ff_tmp96);
          r80_7ff_tmp98 = simd_andc(tmp65, r80_7ff_tmp97);
          r80_7ff_tmp99 = simd_or(r80_7ff_tmp98, byte_92);
          r80_7ff_tmp100 = simd_or(r80_7ff_tmp99, byte_95);
          r80_7ff_tmp101 = simd_and(tmp16, tmp56);
          r80_7ff_tmp102 = simd_and(r80_7ff_tmp101, tmp8);
          r80_7ff_tmp103 = simd_or(r80_7ff_tmp100, r80_7ff_tmp102);
          r80_7ff_tmp104 = simd_or(r80_7ff_tmp103, byte_9e);
          r80_7ff_tmp105 = simd_or(r80_7ff_tmp104, r80_7ff_tmp28);
          r80_7ff_tmp106 = simd_or(r80_7ff_tmp105, r80_7ff_tmp30);
          r80_7ff_tmp107 = simd_or(r80_7ff_tmp106, r80_7ff_tmp32);
          r80_7ff_tmp108 = simd_and(r80_7ff_tmp27, tmp98);
          r80_7ff_tmp109 = simd_or(r80_7ff_tmp107, r80_7ff_tmp108);
          r80_7ff_tmp110 = simd_and(tmp56, basis_bits.bit_6);
          r80_7ff_tmp111 = simd_and(r80_7ff_tmp27, r80_7ff_tmp110);
          r80_7ff_tmp112 = simd_or(r80_7ff_tmp109, r80_7ff_tmp111);
          r80_7ff_tmp113 = simd_or(r80_7ff_tmp112, r80_7ff_tmp40);
          r80_7ff_tmp114 = simd_andc(tmp51, tmp9);
          r80_7ff_tmp115 = simd_or(r80_7ff_tmp113, r80_7ff_tmp114);
          r80_7ff_tmp116 = simd_and(tmp51, tmp73);
          r80_7ff_tmp117 = simd_or(r80_7ff_tmp115, r80_7ff_tmp116);
          r80_7ff_tmp118 = simd_and(tmp51, tmp87);
          r80_7ff_tmp119 = simd_or(r80_7ff_tmp117, r80_7ff_tmp118);
          r80_7ff_tmp120 = simd_and(tmp51, tmp56);
          r80_7ff_tmp121 = simd_not(basis_bits.bit_7);
          r80_7ff_tmp122 = simd_or(simd_and(basis_bits.bit_6, r80_7ff_tmp121), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          r80_7ff_tmp123 = simd_and(r80_7ff_tmp120, r80_7ff_tmp122);
          r80_7ff_tmp124 = simd_or(r80_7ff_tmp119, r80_7ff_tmp123);
          cc_range_180_1bd_2 = simd_or(r80_7ff_tmp124, tmp61);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_c6, carryQ.get_carry_in(24), byte_c6_adv));
          r80_7ff_tmp125 = simd_and(byte_c6_adv, cc_range_180_1bd_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp125);
          byte_c7 = simd_and(r80_7ff_tmp1, tmp93);
          r80_7ff_tmp126 = simd_or(tmp87, tmp102);
          r80_7ff_tmp127 = simd_or(r80_7ff_tmp126, tmp119);
          r80_7ff_tmp128 = simd_or(r80_7ff_tmp127, tmp135);
          r80_7ff_tmp129 = simd_and(tmp65, r80_7ff_tmp128);
          r80_7ff_tmp130 = simd_or(r80_7ff_tmp129, byte_90);
          r80_7ff_tmp131 = simd_or(r80_7ff_tmp130, byte_92);
          r80_7ff_tmp132 = simd_or(r80_7ff_tmp131, byte_94);
          r80_7ff_tmp133 = simd_or(r80_7ff_tmp132, byte_96);
          r80_7ff_tmp134 = simd_or(r80_7ff_tmp133, byte_98);
          r80_7ff_tmp135 = simd_or(r80_7ff_tmp134, byte_9a);
          r80_7ff_tmp136 = simd_and(tmp16, r80_7ff_tmp96);
          r80_7ff_tmp137 = simd_or(r80_7ff_tmp135, r80_7ff_tmp136);
          r80_7ff_tmp138 = simd_or(r80_7ff_tmp137, byte_9f);
          r80_7ff_tmp139 = simd_or(r80_7ff_tmp138, r80_7ff_tmp28);
          r80_7ff_tmp140 = simd_or(r80_7ff_tmp139, r80_7ff_tmp30);
          r80_7ff_tmp141 = simd_or(r80_7ff_tmp140, r80_7ff_tmp32);
          r80_7ff_tmp142 = simd_or(r80_7ff_tmp141, r80_7ff_tmp34);
          r80_7ff_tmp143 = simd_or(r80_7ff_tmp142, r80_7ff_tmp36);
          r80_7ff_tmp144 = simd_or(r80_7ff_tmp143, r80_7ff_tmp38);
          r80_7ff_tmp145 = simd_or(r80_7ff_tmp144, r80_7ff_tmp40);
          r80_7ff_tmp146 = simd_not(tmp9);
          r80_7ff_tmp147 = simd_or(simd_and(basis_bits.bit_3, r80_7ff_tmp146), simd_andc(tmp143, basis_bits.bit_3));
          r80_7ff_tmp148 = simd_and(tmp68, r80_7ff_tmp147);
          r80_7ff_tmp149 = simd_or(r80_7ff_tmp145, r80_7ff_tmp148);
          r80_7ff_tmp150 = simd_or(r80_7ff_tmp149, r80_7ff_tmp46);
          r80_7ff_tmp151 = simd_or(r80_7ff_tmp150, byte_b5);
          r80_7ff_tmp152 = simd_and(tmp51, tmp102);
          r80_7ff_tmp153 = simd_or(r80_7ff_tmp151, r80_7ff_tmp152);
          r80_7ff_tmp154 = simd_or(r80_7ff_tmp153, tmp58);
          r80_7ff_tmp155 = simd_and(tmp51, tmp19);
          r80_7ff_tmp156 = simd_or(r80_7ff_tmp154, r80_7ff_tmp155);
          r80_7ff_tmp157 = simd_and(tmp51, tmp143);
          cc_range_1c6_1ff_2 = simd_or(r80_7ff_tmp156, r80_7ff_tmp157);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(25), byte_c7_adv));
          r80_7ff_tmp158 = simd_and(byte_c7_adv, cc_range_1c6_1ff_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp158);
          byte_c8 = simd_and(r80_7ff_tmp1, tmp98);
          r80_7ff_tmp159 = simd_or(simd_and(basis_bits.bit_4, tmp52), simd_andc(tmp4, basis_bits.bit_4));
          r80_7ff_tmp160 = simd_and(tmp51, r80_7ff_tmp159);
          r80_7ff_tmp161 = simd_or(r80_7ff_tmp45, r80_7ff_tmp160);
          r80_7ff_tmp162 = simd_or(r80_7ff_tmp161, r80_7ff_tmp55);
          cc_range_201_23f_2 = simd_or(r80_7ff_tmp162, r80_7ff_tmp157);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(byte_c8, carryQ.get_carry_in(26), byte_c8_adv));
          r80_7ff_tmp163 = simd_and(byte_c8_adv, cc_range_201_23f_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp163);
          byte_c9 = simd_and(r80_7ff_tmp1, tmp102);
          r80_7ff_tmp164 = simd_andc(r80_7ff_tmp59, tmp93);
          r80_7ff_tmp165 = simd_andc(r80_7ff_tmp164, tmp102);
          r80_7ff_tmp166 = simd_andc(r80_7ff_tmp165, tmp57);
          r80_7ff_tmp167 = simd_andc(r80_7ff_tmp166, tmp19);
          r80_7ff_tmp168 = simd_andc(tmp65, r80_7ff_tmp167);
          r80_7ff_tmp169 = simd_or(basis_bits.bit_3, tmp143);
          r80_7ff_tmp170 = simd_or(basis_bits.bit_2, r80_7ff_tmp169);
          r80_7ff_tmp171 = simd_and(tmp14, r80_7ff_tmp170);
          cc_range_240_24f_2 = simd_or(r80_7ff_tmp168, r80_7ff_tmp171);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(27), byte_c9_adv));
          r80_7ff_tmp172 = simd_and(byte_c9_adv, cc_range_240_24f_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp172);
          byte_ca = simd_and(r80_7ff_tmp1, tmp106);
          r80_7ff_tmp173 = simd_or(simd_and(basis_bits.bit_2, tmp103), simd_andc(tmp120, basis_bits.bit_2));
          r80_7ff_tmp174 = simd_and(tmp14, r80_7ff_tmp173);
          cc_range_280_295_2 = simd_or(tmp94, r80_7ff_tmp174);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(28), byte_ca_adv));
          r80_7ff_tmp175 = simd_and(byte_ca_adv, cc_range_280_295_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp175);
          byte_cd = simd_and(r80_7ff_tmp1, tmp19);
          r80_7ff_tmp176 = simd_or(r80_7ff_tmp10, tmp93);
          r80_7ff_tmp177 = simd_and(tmp51, r80_7ff_tmp176);
          r80_7ff_tmp178 = simd_not(basis_bits.bit_6);
          r80_7ff_tmp179 = simd_or(simd_and(basis_bits.bit_5, r80_7ff_tmp178), simd_andc(tmp3, basis_bits.bit_5));
          r80_7ff_tmp180 = simd_and(tmp90, r80_7ff_tmp179);
          cc_range_371_37b_2 = simd_or(r80_7ff_tmp177, r80_7ff_tmp180);
          carryQ.cq[29] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(29), byte_cd_adv));
          r80_7ff_tmp181 = simd_and(byte_cd_adv, cc_range_371_37b_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp181);
          byte_ce = simd_and(r80_7ff_tmp1, tmp135);
          r80_7ff_tmp182 = simd_and(tmp68, tmp82);
          cc_range_390_3ac_2 = simd_or(byte_90, r80_7ff_tmp182);
          carryQ.cq[30] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(30), byte_ce_adv));
          r80_7ff_tmp183 = simd_and(byte_ce_adv, cc_range_390_3ac_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp183);
          byte_cf = simd_and(r80_7ff_tmp1, tmp143);
          r80_7ff_tmp184 = simd_andc(tmp16, tmp48);
          r80_7ff_tmp185 = simd_or(tmp130, r80_7ff_tmp184);
          r80_7ff_tmp186 = simd_and(tmp16, tmp72);
          r80_7ff_tmp187 = simd_and(r80_7ff_tmp186, tmp8);
          r80_7ff_tmp188 = simd_or(r80_7ff_tmp185, r80_7ff_tmp187);
          r80_7ff_tmp189 = simd_or(r80_7ff_tmp188, byte_99);
          r80_7ff_tmp190 = simd_or(r80_7ff_tmp189, byte_9b);
          r80_7ff_tmp191 = simd_or(r80_7ff_tmp190, byte_9d);
          r80_7ff_tmp192 = simd_or(r80_7ff_tmp191, byte_9f);
          r80_7ff_tmp193 = simd_or(r80_7ff_tmp192, r80_7ff_tmp28);
          r80_7ff_tmp194 = simd_or(r80_7ff_tmp193, r80_7ff_tmp30);
          r80_7ff_tmp195 = simd_or(r80_7ff_tmp194, r80_7ff_tmp32);
          r80_7ff_tmp196 = simd_or(r80_7ff_tmp195, r80_7ff_tmp34);
          r80_7ff_tmp197 = simd_or(r80_7ff_tmp196, r80_7ff_tmp36);
          r80_7ff_tmp198 = simd_or(r80_7ff_tmp197, r80_7ff_tmp38);
          r80_7ff_tmp199 = simd_or(r80_7ff_tmp198, r80_7ff_tmp40);
          r80_7ff_tmp200 = simd_not(tmp7);
          r80_7ff_tmp201 = simd_or(simd_and(basis_bits.bit_3, r80_7ff_tmp200), simd_andc(tmp143, basis_bits.bit_3));
          r80_7ff_tmp202 = simd_and(tmp68, r80_7ff_tmp201);
          r80_7ff_tmp203 = simd_or(r80_7ff_tmp199, r80_7ff_tmp202);
          r80_7ff_tmp204 = simd_or(r80_7ff_tmp203, byte_b5);
          r80_7ff_tmp205 = simd_and(tmp51, tmp98);
          r80_7ff_tmp206 = simd_or(r80_7ff_tmp204, r80_7ff_tmp205);
          r80_7ff_tmp207 = simd_not(tmp8);
          r80_7ff_tmp208 = simd_or(simd_and(basis_bits.bit_5, r80_7ff_tmp207), simd_andc(tmp3, basis_bits.bit_5));
          r80_7ff_tmp209 = simd_and(tmp90, r80_7ff_tmp208);
          cc_range_3c0_3fb_2 = simd_or(r80_7ff_tmp206, r80_7ff_tmp209);
          carryQ.cq[31] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(31), byte_cf_adv));
          r80_7ff_tmp210 = simd_and(byte_cf_adv, cc_range_3c0_3fb_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp210);
          r80_7ff_tmp211 = simd_and(tmp11, tmp15);
          byte_d0 = simd_andc(r80_7ff_tmp211, tmp9);
          byte_range_b0_bf = simd_and(tmp14, tmp12);
          carryQ.cq[32] = carryout2carry(pablo_blk_Advance(byte_d0, carryQ.get_carry_in(32), byte_d0_adv));
          r80_7ff_tmp212 = simd_and(byte_d0_adv, byte_range_b0_bf);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp212);
          byte_d1 = simd_and(r80_7ff_tmp211, tmp29);
          r80_7ff_tmp213 = simd_or(tmp30, r80_7ff_tmp28);
          r80_7ff_tmp214 = simd_or(r80_7ff_tmp213, r80_7ff_tmp30);
          r80_7ff_tmp215 = simd_or(r80_7ff_tmp214, r80_7ff_tmp32);
          r80_7ff_tmp216 = simd_or(r80_7ff_tmp215, r80_7ff_tmp34);
          r80_7ff_tmp217 = simd_or(r80_7ff_tmp216, r80_7ff_tmp36);
          r80_7ff_tmp218 = simd_or(r80_7ff_tmp217, r80_7ff_tmp38);
          r80_7ff_tmp219 = simd_or(r80_7ff_tmp218, r80_7ff_tmp40);
          r80_7ff_tmp220 = simd_or(r80_7ff_tmp219, r80_7ff_tmp42);
          r80_7ff_tmp221 = simd_and(byte_range_b0_bf, tmp29);
          r80_7ff_tmp222 = simd_or(r80_7ff_tmp220, r80_7ff_tmp221);
          r80_7ff_tmp223 = simd_and(byte_range_b0_bf, tmp63);
          r80_7ff_tmp224 = simd_or(r80_7ff_tmp222, r80_7ff_tmp223);
          r80_7ff_tmp225 = simd_and(byte_range_b0_bf, tmp81);
          r80_7ff_tmp226 = simd_or(r80_7ff_tmp224, r80_7ff_tmp225);
          r80_7ff_tmp227 = simd_and(byte_range_b0_bf, tmp93);
          r80_7ff_tmp228 = simd_or(r80_7ff_tmp226, r80_7ff_tmp227);
          r80_7ff_tmp229 = simd_and(byte_range_b0_bf, tmp102);
          r80_7ff_tmp230 = simd_or(r80_7ff_tmp228, r80_7ff_tmp229);
          r80_7ff_tmp231 = simd_and(byte_range_b0_bf, tmp57);
          r80_7ff_tmp232 = simd_or(r80_7ff_tmp230, r80_7ff_tmp231);
          r80_7ff_tmp233 = simd_and(byte_range_b0_bf, tmp19);
          r80_7ff_tmp234 = simd_or(r80_7ff_tmp232, r80_7ff_tmp233);
          r80_7ff_tmp235 = simd_and(byte_range_b0_bf, tmp143);
          cc_range_440_47f_2 = simd_or(r80_7ff_tmp234, r80_7ff_tmp235);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(byte_d1, carryQ.get_carry_in(33), byte_d1_adv));
          r80_7ff_tmp236 = simd_and(byte_d1_adv, cc_range_440_47f_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp236);
          byte_d2 = simd_and(r80_7ff_tmp211, tmp46);
          r80_7ff_tmp237 = simd_or(tmp29, tmp57);
          r80_7ff_tmp238 = simd_or(r80_7ff_tmp237, tmp19);
          r80_7ff_tmp239 = simd_or(r80_7ff_tmp238, tmp143);
          r80_7ff_tmp240 = simd_and(tmp65, r80_7ff_tmp239);
          r80_7ff_tmp241 = simd_or(r80_7ff_tmp240, byte_91);
          r80_7ff_tmp242 = simd_or(r80_7ff_tmp241, byte_93);
          r80_7ff_tmp243 = simd_or(r80_7ff_tmp242, byte_95);
          r80_7ff_tmp244 = simd_or(r80_7ff_tmp243, byte_97);
          r80_7ff_tmp245 = simd_or(r80_7ff_tmp244, byte_99);
          r80_7ff_tmp246 = simd_or(r80_7ff_tmp245, byte_9b);
          r80_7ff_tmp247 = simd_or(r80_7ff_tmp246, byte_9d);
          r80_7ff_tmp248 = simd_or(r80_7ff_tmp247, byte_9f);
          r80_7ff_tmp249 = simd_or(r80_7ff_tmp248, r80_7ff_tmp28);
          r80_7ff_tmp250 = simd_or(r80_7ff_tmp249, r80_7ff_tmp30);
          r80_7ff_tmp251 = simd_or(r80_7ff_tmp250, r80_7ff_tmp32);
          r80_7ff_tmp252 = simd_or(r80_7ff_tmp251, r80_7ff_tmp34);
          r80_7ff_tmp253 = simd_or(r80_7ff_tmp252, r80_7ff_tmp36);
          r80_7ff_tmp254 = simd_or(r80_7ff_tmp253, r80_7ff_tmp38);
          r80_7ff_tmp255 = simd_or(r80_7ff_tmp254, r80_7ff_tmp40);
          r80_7ff_tmp256 = simd_or(r80_7ff_tmp255, r80_7ff_tmp42);
          r80_7ff_tmp257 = simd_or(r80_7ff_tmp256, r80_7ff_tmp221);
          r80_7ff_tmp258 = simd_or(r80_7ff_tmp257, r80_7ff_tmp223);
          r80_7ff_tmp259 = simd_or(r80_7ff_tmp258, r80_7ff_tmp225);
          r80_7ff_tmp260 = simd_or(r80_7ff_tmp259, r80_7ff_tmp227);
          r80_7ff_tmp261 = simd_or(r80_7ff_tmp260, r80_7ff_tmp229);
          r80_7ff_tmp262 = simd_or(r80_7ff_tmp261, r80_7ff_tmp231);
          r80_7ff_tmp263 = simd_or(r80_7ff_tmp262, r80_7ff_tmp233);
          cc_range_481_4bf_2 = simd_or(r80_7ff_tmp263, r80_7ff_tmp235);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(34), byte_d2_adv));
          r80_7ff_tmp264 = simd_and(byte_d2_adv, cc_range_481_4bf_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp264);
          byte_d3 = simd_and(r80_7ff_tmp211, tmp63);
          r80_7ff_tmp265 = simd_or(tmp46, tmp73);
          r80_7ff_tmp266 = simd_or(r80_7ff_tmp265, tmp87);
          r80_7ff_tmp267 = simd_or(r80_7ff_tmp266, tmp98);
          r80_7ff_tmp268 = simd_or(r80_7ff_tmp267, tmp106);
          r80_7ff_tmp269 = simd_or(r80_7ff_tmp268, tmp119);
          r80_7ff_tmp270 = simd_or(r80_7ff_tmp269, tmp34);
          r80_7ff_tmp271 = simd_and(tmp65, r80_7ff_tmp270);
          r80_7ff_tmp272 = simd_or(r80_7ff_tmp271, byte_91);
          r80_7ff_tmp273 = simd_or(r80_7ff_tmp272, byte_93);
          r80_7ff_tmp274 = simd_or(r80_7ff_tmp273, byte_95);
          r80_7ff_tmp275 = simd_or(r80_7ff_tmp274, byte_97);
          r80_7ff_tmp276 = simd_or(r80_7ff_tmp275, byte_99);
          r80_7ff_tmp277 = simd_or(r80_7ff_tmp276, byte_9b);
          r80_7ff_tmp278 = simd_or(r80_7ff_tmp277, byte_9d);
          r80_7ff_tmp279 = simd_or(r80_7ff_tmp278, byte_9f);
          r80_7ff_tmp280 = simd_or(r80_7ff_tmp279, r80_7ff_tmp28);
          r80_7ff_tmp281 = simd_or(r80_7ff_tmp280, r80_7ff_tmp30);
          r80_7ff_tmp282 = simd_or(r80_7ff_tmp281, r80_7ff_tmp32);
          r80_7ff_tmp283 = simd_or(r80_7ff_tmp282, r80_7ff_tmp34);
          r80_7ff_tmp284 = simd_or(r80_7ff_tmp283, r80_7ff_tmp36);
          r80_7ff_tmp285 = simd_or(r80_7ff_tmp284, r80_7ff_tmp38);
          r80_7ff_tmp286 = simd_or(r80_7ff_tmp285, r80_7ff_tmp40);
          r80_7ff_tmp287 = simd_or(r80_7ff_tmp286, r80_7ff_tmp42);
          r80_7ff_tmp288 = simd_or(r80_7ff_tmp287, r80_7ff_tmp221);
          r80_7ff_tmp289 = simd_or(r80_7ff_tmp288, r80_7ff_tmp223);
          r80_7ff_tmp290 = simd_or(r80_7ff_tmp289, r80_7ff_tmp225);
          r80_7ff_tmp291 = simd_or(r80_7ff_tmp290, r80_7ff_tmp227);
          r80_7ff_tmp292 = simd_or(r80_7ff_tmp291, r80_7ff_tmp229);
          r80_7ff_tmp293 = simd_or(r80_7ff_tmp292, r80_7ff_tmp231);
          r80_7ff_tmp294 = simd_or(r80_7ff_tmp293, r80_7ff_tmp233);
          cc_range_4c2_4ff_2 = simd_or(r80_7ff_tmp294, r80_7ff_tmp235);
          carryQ.cq[35] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(35), byte_d3_adv));
          r80_7ff_tmp295 = simd_and(byte_d3_adv, cc_range_4c2_4ff_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp295);
          byte_d4 = simd_and(r80_7ff_tmp211, tmp73);
          r80_7ff_tmp296 = simd_and(basis_bits.bit_2, tmp37);
          r80_7ff_tmp297 = simd_andc(tmp14, r80_7ff_tmp296);
          cc_range_501_527_2 = simd_andc(r80_7ff_tmp297, basis_bits.bit_7);
          carryQ.cq[36] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(36), byte_d4_adv));
          r80_7ff_tmp298 = simd_and(byte_d4_adv, cc_range_501_527_2);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp298);
          byte_d5 = simd_and(r80_7ff_tmp211, tmp81);
          r80_7ff_tmp299 = simd_or(basis_bits.bit_3, tmp9);
          byte_range_a1_bf = simd_and(tmp68, r80_7ff_tmp299);
          carryQ.cq[37] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(37), byte_d5_adv));
          r80_7ff_tmp300 = simd_and(byte_d5_adv, byte_range_a1_bf);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp300);
          byte_d6 = simd_and(r80_7ff_tmp211, tmp87);
          byte_range_80_87 = simd_andc(tmp65, basis_bits.bit_4);
          carryQ.cq[38] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(38), byte_d6_adv));
          r80_7ff_tmp301 = simd_and(byte_d6_adv, byte_range_80_87);
          struct_Ll.cc = simd_or(struct_Ll.cc, r80_7ff_tmp301);
        }
        else {
          carryQ.CarryDequeueEnqueue(20, 19);
        }
        tmp150 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp11, tmp150);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(39, 35))) {
          byte_e1 = simd_and(byte_range_e0_ef, tmp29);
          byte_b4 = simd_and(tmp51, tmp73);
          carryQ.cq[39] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(39), r800_ffff_tmp1));
          sequence_e1_b4 = simd_and(r800_ffff_tmp1, byte_b4);
          carryQ.cq[40] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(40), byte_e1_adv));
          sequence_e1_b4 = simd_and(byte_e1_adv, byte_b4);
          r800_ffff_tmp2 = simd_and(basis_bits.bit_2, tmp82);
          byte_range_80_ab = simd_andc(tmp14, r800_ffff_tmp2);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e1_b4, carryQ.get_carry_in(41), sequence_e1_b4_adv));
          r800_ffff_tmp3 = simd_and(sequence_e1_b4_adv, byte_range_80_ab);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp3);
          byte_b5 = simd_and(tmp51, tmp81);
          sequence_e1_b5 = simd_and(byte_e1_adv, byte_b5);
          sequence_e1_b5 = simd_and(byte_e1_adv, byte_b5);
          r800_ffff_tmp4 = simd_not(basis_bits.bit_4);
          r800_ffff_tmp5 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp4), simd_andc(tmp5, basis_bits.bit_3));
          r800_ffff_tmp6 = simd_and(tmp68, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_and(tmp90, tmp136);
          cc_range_1d6b_1d79_3 = simd_or(r800_ffff_tmp6, r800_ffff_tmp7);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e1_b5, carryQ.get_carry_in(42), sequence_e1_b5_adv));
          r800_ffff_tmp8 = simd_and(sequence_e1_b5_adv, cc_range_1d6b_1d79_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp8);
          byte_b6 = simd_and(tmp51, tmp87);
          sequence_e1_b6 = simd_and(byte_e1_adv, byte_b6);
          sequence_e1_b6 = simd_and(byte_e1_adv, byte_b6);
          r800_ffff_tmp9 = simd_and(basis_bits.bit_3, tmp5);
          byte_range_80_9a = simd_andc(tmp30, r800_ffff_tmp9);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e1_b6, carryQ.get_carry_in(43), sequence_e1_b6_adv));
          r800_ffff_tmp10 = simd_and(sequence_e1_b6_adv, byte_range_80_9a);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp10);
          byte_b8 = simd_and(tmp51, tmp98);
          sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
          sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
          cc_range_1e01_1e3f_3 = simd_andc(tmp14, basis_bits.bit_7);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(44), sequence_e1_b8_adv));
          r800_ffff_tmp11 = simd_and(sequence_e1_b8_adv, cc_range_1e01_1e3f_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp11);
          byte_b9 = simd_and(tmp51, tmp102);
          sequence_e1_b9 = simd_and(byte_e1_adv, byte_b9);
          sequence_e1_b9 = simd_and(byte_e1_adv, byte_b9);
          cc_range_1e41_1e7f_3 = simd_andc(tmp14, basis_bits.bit_7);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e1_b9, carryQ.get_carry_in(45), sequence_e1_b9_adv));
          r800_ffff_tmp12 = simd_and(sequence_e1_b9_adv, cc_range_1e41_1e7f_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp12);
          byte_ba = simd_and(tmp51, tmp106);
          sequence_e1_ba = simd_and(byte_e1_adv, byte_ba);
          sequence_e1_ba = simd_and(byte_e1_adv, byte_ba);
          r800_ffff_tmp13 = simd_andc(basis_bits.bit_7, tmp7);
          r800_ffff_tmp14 = simd_or(r800_ffff_tmp13, tmp81);
          r800_ffff_tmp15 = simd_or(r800_ffff_tmp14, tmp93);
          r800_ffff_tmp16 = simd_or(r800_ffff_tmp15, tmp102);
          r800_ffff_tmp17 = simd_or(r800_ffff_tmp16, tmp57);
          r800_ffff_tmp18 = simd_or(r800_ffff_tmp17, tmp19);
          r800_ffff_tmp19 = simd_or(r800_ffff_tmp18, tmp143);
          r800_ffff_tmp20 = simd_and(tmp65, r800_ffff_tmp19);
          r800_ffff_tmp21 = simd_or(r800_ffff_tmp20, byte_91);
          r800_ffff_tmp22 = simd_or(r800_ffff_tmp21, byte_93);
          r800_ffff_tmp23 = simd_not(tmp39);
          r800_ffff_tmp24 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp23), simd_andc(tmp31, basis_bits.bit_4));
          r800_ffff_tmp25 = simd_and(tmp16, r800_ffff_tmp24);
          r800_ffff_tmp26 = simd_or(r800_ffff_tmp22, r800_ffff_tmp25);
          r800_ffff_tmp27 = simd_or(r800_ffff_tmp26, byte_9f);
          r800_ffff_tmp28 = simd_and(tmp14, tmp150);
          r800_ffff_tmp29 = simd_and(r800_ffff_tmp28, tmp29);
          r800_ffff_tmp30 = simd_or(r800_ffff_tmp27, r800_ffff_tmp29);
          r800_ffff_tmp31 = simd_and(r800_ffff_tmp28, tmp63);
          r800_ffff_tmp32 = simd_or(r800_ffff_tmp30, r800_ffff_tmp31);
          r800_ffff_tmp33 = simd_and(r800_ffff_tmp28, tmp81);
          r800_ffff_tmp34 = simd_or(r800_ffff_tmp32, r800_ffff_tmp33);
          r800_ffff_tmp35 = simd_and(r800_ffff_tmp28, tmp93);
          r800_ffff_tmp36 = simd_or(r800_ffff_tmp34, r800_ffff_tmp35);
          r800_ffff_tmp37 = simd_and(r800_ffff_tmp28, tmp102);
          r800_ffff_tmp38 = simd_or(r800_ffff_tmp36, r800_ffff_tmp37);
          r800_ffff_tmp39 = simd_and(r800_ffff_tmp28, tmp57);
          r800_ffff_tmp40 = simd_or(r800_ffff_tmp38, r800_ffff_tmp39);
          r800_ffff_tmp41 = simd_and(r800_ffff_tmp28, tmp19);
          r800_ffff_tmp42 = simd_or(r800_ffff_tmp40, r800_ffff_tmp41);
          r800_ffff_tmp43 = simd_and(r800_ffff_tmp28, tmp143);
          r800_ffff_tmp44 = simd_or(r800_ffff_tmp42, r800_ffff_tmp43);
          r800_ffff_tmp45 = simd_and(tmp51, tmp29);
          r800_ffff_tmp46 = simd_or(r800_ffff_tmp44, r800_ffff_tmp45);
          r800_ffff_tmp47 = simd_and(tmp51, tmp63);
          r800_ffff_tmp48 = simd_or(r800_ffff_tmp46, r800_ffff_tmp47);
          r800_ffff_tmp49 = simd_or(r800_ffff_tmp48, byte_b5);
          r800_ffff_tmp50 = simd_and(tmp51, tmp93);
          r800_ffff_tmp51 = simd_or(r800_ffff_tmp49, r800_ffff_tmp50);
          r800_ffff_tmp52 = simd_or(r800_ffff_tmp51, byte_b9);
          r800_ffff_tmp53 = simd_or(r800_ffff_tmp52, tmp58);
          r800_ffff_tmp54 = simd_and(tmp51, tmp19);
          r800_ffff_tmp55 = simd_or(r800_ffff_tmp53, r800_ffff_tmp54);
          r800_ffff_tmp56 = simd_and(tmp51, tmp143);
          cc_range_1e81_1ebf_3 = simd_or(r800_ffff_tmp55, r800_ffff_tmp56);
          carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e1_ba, carryQ.get_carry_in(46), sequence_e1_ba_adv));
          r800_ffff_tmp57 = simd_and(sequence_e1_ba_adv, cc_range_1e81_1ebf_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp57);
          byte_bb = simd_and(tmp51, tmp57);
          sequence_e1_bb = simd_and(byte_e1_adv, byte_bb);
          sequence_e1_bb = simd_and(byte_e1_adv, byte_bb);
          cc_range_1ec1_1eff_3 = simd_andc(tmp14, basis_bits.bit_7);
          carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e1_bb, carryQ.get_carry_in(47), sequence_e1_bb_adv));
          r800_ffff_tmp58 = simd_and(sequence_e1_bb_adv, cc_range_1ec1_1eff_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp58);
          byte_bc = simd_and(tmp51, tmp119);
          sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
          sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
          r800_ffff_tmp59 = simd_or(tmp99, tmp132);
          r800_ffff_tmp60 = simd_andc(r800_ffff_tmp28, basis_bits.bit_4);
          r800_ffff_tmp61 = simd_or(r800_ffff_tmp59, r800_ffff_tmp60);
          r800_ffff_tmp62 = simd_andc(tmp51, basis_bits.bit_4);
          cc_range_1f00_1f30_3 = simd_or(r800_ffff_tmp61, r800_ffff_tmp62);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(48), sequence_e1_bc_adv));
          r800_ffff_tmp63 = simd_and(sequence_e1_bc_adv, cc_range_1f00_1f30_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp63);
          byte_bd = simd_and(tmp51, tmp19);
          sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
          sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
          r800_ffff_tmp64 = simd_andc(tmp99, tmp39);
          r800_ffff_tmp65 = simd_or(r800_ffff_tmp64, tmp131);
          r800_ffff_tmp66 = simd_or(r800_ffff_tmp65, r800_ffff_tmp60);
          r800_ffff_tmp67 = simd_and(basis_bits.bit_4, tmp39);
          r800_ffff_tmp68 = simd_andc(tmp51, r800_ffff_tmp67);
          cc_range_1f40_1f70_3 = simd_or(r800_ffff_tmp66, r800_ffff_tmp68);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(49), sequence_e1_bd_adv));
          r800_ffff_tmp69 = simd_and(sequence_e1_bd_adv, cc_range_1f40_1f70_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp69);
          byte_be = simd_and(tmp51, tmp135);
          sequence_e1_be = simd_and(byte_e1_adv, byte_be);
          sequence_e1_be = simd_and(byte_e1_adv, byte_be);
          r800_ffff_tmp70 = simd_andc(tmp64, tmp15);
          r800_ffff_tmp71 = simd_andc(r800_ffff_tmp70, tmp150);
          r800_ffff_tmp72 = simd_andc(tmp14, r800_ffff_tmp71);
          r800_ffff_tmp73 = simd_andc(r800_ffff_tmp72, basis_bits.bit_4);
          r800_ffff_tmp74 = simd_andc(r800_ffff_tmp62, tmp31);
          r800_ffff_tmp75 = simd_or(r800_ffff_tmp73, r800_ffff_tmp74);
          r800_ffff_tmp76 = simd_and(tmp72, basis_bits.bit_6);
          r800_ffff_tmp77 = simd_and(tmp51, r800_ffff_tmp76);
          r800_ffff_tmp78 = simd_or(r800_ffff_tmp75, r800_ffff_tmp77);
          cc_range_1f80_1fbe_3 = simd_or(r800_ffff_tmp78, byte_be);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(50), sequence_e1_be_adv));
          r800_ffff_tmp79 = simd_and(sequence_e1_be_adv, cc_range_1f80_1fbe_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp79);
          byte_bf = simd_and(tmp51, tmp143);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          r800_ffff_tmp80 = simd_not(tmp8);
          r800_ffff_tmp81 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp80), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp82 = simd_and(tmp99, r800_ffff_tmp81);
          r800_ffff_tmp83 = simd_and(tmp65, r800_ffff_tmp76);
          r800_ffff_tmp84 = simd_or(r800_ffff_tmp82, r800_ffff_tmp83);
          r800_ffff_tmp85 = simd_andc(tmp16, tmp7);
          r800_ffff_tmp86 = simd_or(r800_ffff_tmp84, r800_ffff_tmp85);
          r800_ffff_tmp87 = simd_and(tmp16, r800_ffff_tmp76);
          r800_ffff_tmp88 = simd_or(r800_ffff_tmp86, r800_ffff_tmp87);
          r800_ffff_tmp89 = simd_or(r800_ffff_tmp88, r800_ffff_tmp60);
          r800_ffff_tmp90 = simd_and(r800_ffff_tmp62, r800_ffff_tmp81);
          r800_ffff_tmp91 = simd_or(r800_ffff_tmp89, r800_ffff_tmp90);
          cc_range_1fc2_1ff6_3 = simd_or(r800_ffff_tmp91, r800_ffff_tmp77);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(51), sequence_e1_bf_adv));
          r800_ffff_tmp92 = simd_and(sequence_e1_bf_adv, cc_range_1fc2_1ff6_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp92);
          byte_e2 = simd_and(byte_range_e0_ef, tmp46);
          byte_84 = simd_and(tmp65, tmp73);
          carryQ.cq[52] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(52), r800_ffff_tmp93));
          sequence_e2_84 = simd_and(r800_ffff_tmp93, byte_84);
          carryQ.cq[53] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(53), byte_e2_adv));
          sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
          r800_ffff_tmp94 = simd_or(tmp106, tmp34);
          r800_ffff_tmp95 = simd_and(tmp65, r800_ffff_tmp94);
          r800_ffff_tmp96 = simd_or(r800_ffff_tmp95, byte_93);
          r800_ffff_tmp97 = simd_or(r800_ffff_tmp96, r800_ffff_tmp43);
          r800_ffff_tmp98 = simd_or(r800_ffff_tmp97, byte_b4);
          r800_ffff_tmp99 = simd_or(r800_ffff_tmp98, byte_b9);
          r800_ffff_tmp100 = simd_andc(tmp17, basis_bits.bit_6);
          r800_ffff_tmp101 = simd_and(tmp51, r800_ffff_tmp100);
          cc_range_210a_213c_3 = simd_or(r800_ffff_tmp99, r800_ffff_tmp101);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(54), sequence_e2_84_adv));
          r800_ffff_tmp102 = simd_and(sequence_e2_84_adv, cc_range_210a_213c_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp102);
          byte_85 = simd_and(tmp65, tmp81);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          r800_ffff_tmp103 = simd_or(tmp53, tmp135);
          cc_range_2146_214e_3 = simd_and(tmp65, r800_ffff_tmp103);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(55), sequence_e2_85_adv));
          r800_ffff_tmp104 = simd_and(sequence_e2_85_adv, cc_range_2146_214e_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp104);
          byte_86 = simd_and(tmp65, tmp87);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(56), sequence_e2_86_adv));
          r800_ffff_tmp105 = simd_and(sequence_e2_86_adv, byte_84);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp105);
          byte_b0 = simd_andc(tmp51, tmp9);
          sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
          sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
          byte_range_b0_bf = simd_and(tmp14, tmp12);
          carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(57), sequence_e2_b0_adv));
          r800_ffff_tmp106 = simd_and(sequence_e2_b0_adv, byte_range_b0_bf);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp106);
          byte_b1 = simd_and(byte_range_b0_bf, tmp29);
          sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
          sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
          r800_ffff_tmp107 = simd_and(basis_bits.bit_3, tmp143);
          r800_ffff_tmp108 = simd_andc(tmp30, r800_ffff_tmp107);
          r800_ffff_tmp109 = simd_or(r800_ffff_tmp108, r800_ffff_tmp29);
          r800_ffff_tmp110 = simd_and(r800_ffff_tmp28, tmp72);
          r800_ffff_tmp111 = simd_not(basis_bits.bit_7);
          r800_ffff_tmp112 = simd_or(simd_and(basis_bits.bit_6, r800_ffff_tmp111), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          r800_ffff_tmp113 = simd_and(r800_ffff_tmp110, r800_ffff_tmp112);
          r800_ffff_tmp114 = simd_or(r800_ffff_tmp109, r800_ffff_tmp113);
          r800_ffff_tmp115 = simd_and(r800_ffff_tmp28, tmp98);
          r800_ffff_tmp116 = simd_or(r800_ffff_tmp114, r800_ffff_tmp115);
          r800_ffff_tmp117 = simd_and(r800_ffff_tmp28, tmp106);
          r800_ffff_tmp118 = simd_or(r800_ffff_tmp116, r800_ffff_tmp117);
          r800_ffff_tmp119 = simd_and(r800_ffff_tmp28, tmp119);
          r800_ffff_tmp120 = simd_or(r800_ffff_tmp118, r800_ffff_tmp119);
          r800_ffff_tmp121 = simd_or(r800_ffff_tmp120, byte_b1);
          r800_ffff_tmp122 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
          r800_ffff_tmp123 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp80), simd_andc(tmp3, basis_bits.bit_5));
          r800_ffff_tmp124 = simd_and(r800_ffff_tmp122, r800_ffff_tmp123);
          r800_ffff_tmp125 = simd_or(r800_ffff_tmp121, r800_ffff_tmp124);
          r800_ffff_tmp126 = simd_and(byte_range_b0_bf, tmp123);
          cc_range_2c40_2c76_3 = simd_or(r800_ffff_tmp125, r800_ffff_tmp126);
          carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(58), sequence_e2_b1_adv));
          r800_ffff_tmp127 = simd_and(sequence_e2_b1_adv, cc_range_2c40_2c76_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp127);
          byte_b2 = simd_and(byte_range_b0_bf, tmp46);
          sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
          sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
          cc_range_2c81_2cbf_3 = simd_andc(tmp14, basis_bits.bit_7);
          carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(59), sequence_e2_b2_adv));
          r800_ffff_tmp128 = simd_and(sequence_e2_b2_adv, cc_range_2c81_2cbf_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp128);
          byte_b3 = simd_and(byte_range_b0_bf, tmp63);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          r800_ffff_tmp129 = simd_or(r800_ffff_tmp22, byte_95);
          r800_ffff_tmp130 = simd_or(r800_ffff_tmp129, byte_97);
          r800_ffff_tmp131 = simd_or(r800_ffff_tmp130, byte_99);
          r800_ffff_tmp132 = simd_or(r800_ffff_tmp131, byte_9b);
          r800_ffff_tmp133 = simd_or(r800_ffff_tmp132, byte_9d);
          r800_ffff_tmp134 = simd_or(r800_ffff_tmp133, byte_9f);
          r800_ffff_tmp135 = simd_or(r800_ffff_tmp134, r800_ffff_tmp29);
          r800_ffff_tmp136 = simd_and(r800_ffff_tmp60, r800_ffff_tmp123);
          r800_ffff_tmp137 = simd_or(r800_ffff_tmp135, r800_ffff_tmp136);
          r800_ffff_tmp138 = simd_or(r800_ffff_tmp137, r800_ffff_tmp119);
          r800_ffff_tmp139 = simd_and(r800_ffff_tmp28, tmp135);
          r800_ffff_tmp140 = simd_or(r800_ffff_tmp138, r800_ffff_tmp139);
          cc_range_2cc1_2cf3_3 = simd_or(r800_ffff_tmp140, byte_b3);
          carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(60), sequence_e2_b3_adv));
          r800_ffff_tmp141 = simd_and(sequence_e2_b3_adv, cc_range_2cc1_2cf3_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp141);
          sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
          sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
          r800_ffff_tmp142 = simd_and(basis_bits.bit_2, tmp88);
          r800_ffff_tmp143 = simd_andc(tmp14, r800_ffff_tmp142);
          r800_ffff_tmp144 = simd_or(r800_ffff_tmp143, r800_ffff_tmp35);
          cc_range_2d00_2d2d_3 = simd_or(r800_ffff_tmp144, r800_ffff_tmp41);
          carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(61), sequence_e2_b4_adv));
          r800_ffff_tmp145 = simd_and(sequence_e2_b4_adv, cc_range_2d00_2d2d_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp145);
          byte_ea = simd_and(byte_range_e0_ef, tmp106);
          carryQ.cq[62] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(62), r800_ffff_tmp146));
          sequence_ea_99 = simd_and(r800_ffff_tmp146, byte_99);
          carryQ.cq[63] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(63), byte_ea_adv));
          sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
          r800_ffff_tmp147 = simd_and(basis_bits.bit_2, tmp95);
          r800_ffff_tmp148 = simd_andc(tmp14, r800_ffff_tmp147);
          cc_range_a641_a66d_3 = simd_andc(r800_ffff_tmp148, basis_bits.bit_7);
          carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(64), sequence_ea_99_adv));
          r800_ffff_tmp149 = simd_and(sequence_ea_99_adv, cc_range_a641_a66d_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp149);
          sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
          sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
          r800_ffff_tmp150 = simd_andc(tmp30, tmp75);
          cc_range_a681_a697_3 = simd_andc(r800_ffff_tmp150, basis_bits.bit_7);
          carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(65), sequence_ea_9a_adv));
          r800_ffff_tmp151 = simd_and(sequence_ea_9a_adv, cc_range_a681_a697_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp151);
          sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
          sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
          r800_ffff_tmp152 = simd_or(tmp63, tmp81);
          r800_ffff_tmp153 = simd_or(r800_ffff_tmp152, tmp93);
          r800_ffff_tmp154 = simd_or(r800_ffff_tmp153, tmp102);
          r800_ffff_tmp155 = simd_or(r800_ffff_tmp154, tmp57);
          r800_ffff_tmp156 = simd_or(r800_ffff_tmp155, tmp19);
          r800_ffff_tmp157 = simd_and(r800_ffff_tmp28, r800_ffff_tmp156);
          r800_ffff_tmp158 = simd_not(tmp48);
          r800_ffff_tmp159 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp158), simd_andc(tmp143, basis_bits.bit_3));
          r800_ffff_tmp160 = simd_and(tmp68, r800_ffff_tmp159);
          r800_ffff_tmp161 = simd_or(r800_ffff_tmp157, r800_ffff_tmp160);
          r800_ffff_tmp162 = simd_or(r800_ffff_tmp161, byte_b3);
          r800_ffff_tmp163 = simd_and(byte_range_b0_bf, tmp81);
          r800_ffff_tmp164 = simd_or(r800_ffff_tmp162, r800_ffff_tmp163);
          r800_ffff_tmp165 = simd_and(byte_range_b0_bf, tmp93);
          r800_ffff_tmp166 = simd_or(r800_ffff_tmp164, r800_ffff_tmp165);
          r800_ffff_tmp167 = simd_and(byte_range_b0_bf, tmp102);
          r800_ffff_tmp168 = simd_or(r800_ffff_tmp166, r800_ffff_tmp167);
          r800_ffff_tmp169 = simd_and(byte_range_b0_bf, tmp57);
          r800_ffff_tmp170 = simd_or(r800_ffff_tmp168, r800_ffff_tmp169);
          r800_ffff_tmp171 = simd_and(byte_range_b0_bf, tmp19);
          r800_ffff_tmp172 = simd_or(r800_ffff_tmp170, r800_ffff_tmp171);
          r800_ffff_tmp173 = simd_and(byte_range_b0_bf, tmp143);
          cc_range_a723_a73f_3 = simd_or(r800_ffff_tmp172, r800_ffff_tmp173);
          carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(66), sequence_ea_9c_adv));
          r800_ffff_tmp174 = simd_and(sequence_ea_9c_adv, cc_range_a723_a73f_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp174);
          sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
          sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
          r800_ffff_tmp175 = simd_or(r800_ffff_tmp135, r800_ffff_tmp31);
          r800_ffff_tmp176 = simd_or(r800_ffff_tmp175, r800_ffff_tmp33);
          r800_ffff_tmp177 = simd_or(r800_ffff_tmp176, r800_ffff_tmp35);
          r800_ffff_tmp178 = simd_or(r800_ffff_tmp177, r800_ffff_tmp37);
          r800_ffff_tmp179 = simd_or(r800_ffff_tmp178, r800_ffff_tmp39);
          r800_ffff_tmp180 = simd_or(r800_ffff_tmp179, r800_ffff_tmp41);
          r800_ffff_tmp181 = simd_or(r800_ffff_tmp180, r800_ffff_tmp43);
          r800_ffff_tmp182 = simd_not(tmp136);
          r800_ffff_tmp183 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp182), simd_andc(tmp136, basis_bits.bit_4));
          r800_ffff_tmp184 = simd_and(byte_range_b0_bf, r800_ffff_tmp183);
          r800_ffff_tmp185 = simd_or(r800_ffff_tmp181, r800_ffff_tmp184);
          r800_ffff_tmp186 = simd_and(byte_range_b0_bf, tmp106);
          r800_ffff_tmp187 = simd_or(r800_ffff_tmp185, r800_ffff_tmp186);
          r800_ffff_tmp188 = simd_and(byte_range_b0_bf, tmp119);
          r800_ffff_tmp189 = simd_or(r800_ffff_tmp187, r800_ffff_tmp188);
          cc_range_a741_a77f_3 = simd_or(r800_ffff_tmp189, r800_ffff_tmp173);
          carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(67), sequence_ea_9d_adv));
          r800_ffff_tmp190 = simd_and(sequence_ea_9d_adv, cc_range_a741_a77f_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp190);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          r800_ffff_tmp191 = simd_or(r800_ffff_tmp15, tmp119);
          r800_ffff_tmp192 = simd_or(r800_ffff_tmp191, tmp135);
          r800_ffff_tmp193 = simd_and(tmp65, r800_ffff_tmp192);
          r800_ffff_tmp194 = simd_or(r800_ffff_tmp193, byte_91);
          r800_ffff_tmp195 = simd_or(r800_ffff_tmp194, byte_93);
          r800_ffff_tmp196 = simd_or(r800_ffff_tmp195, r800_ffff_tmp29);
          r800_ffff_tmp197 = simd_or(r800_ffff_tmp196, r800_ffff_tmp31);
          r800_ffff_tmp198 = simd_or(r800_ffff_tmp197, r800_ffff_tmp33);
          r800_ffff_tmp199 = simd_or(r800_ffff_tmp198, r800_ffff_tmp35);
          cc_range_a781_a7a9_3 = simd_or(r800_ffff_tmp199, r800_ffff_tmp37);
          carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(68), sequence_ea_9e_adv));
          r800_ffff_tmp200 = simd_and(sequence_ea_9e_adv, cc_range_a781_a7a9_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp200);
          sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
          sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
          carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(69), sequence_ea_9f_adv));
          r800_ffff_tmp201 = simd_and(sequence_ea_9f_adv, byte_ba);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp201);
          byte_ef = simd_and(byte_range_e0_ef, tmp143);
          byte_ac = simd_and(r800_ffff_tmp28, tmp119);
          carryQ.cq[70] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(70), r800_ffff_tmp202));
          sequence_ef_ac = simd_and(r800_ffff_tmp202, byte_ac);
          carryQ.cq[71] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(71), byte_ef_adv));
          sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
          r800_ffff_tmp203 = simd_andc(tmp99, tmp128);
          r800_ffff_tmp204 = simd_and(tmp131, tmp4);
          cc_range_fb00_fb13_3 = simd_or(r800_ffff_tmp203, r800_ffff_tmp204);
          carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(72), sequence_ef_ac_adv));
          r800_ffff_tmp205 = simd_and(sequence_ef_ac_adv, cc_range_fb00_fb13_3);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp205);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          byte_range_81_9a = simd_and(tmp30, tmp10);
          carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(73), sequence_ef_bd_adv));
          r800_ffff_tmp206 = simd_and(sequence_ef_bd_adv, byte_range_81_9a);
          struct_Ll.cc = simd_or(struct_Ll.cc, r800_ffff_tmp206);
        }
        else {
          carryQ.CarryDequeueEnqueue(39, 35);
        }
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(74), tmp151));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp151, byte_range_80_bf);
        carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(75), tmp152));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp152, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(76, 3))) {
          r10000_10fff_tmp1 = simd_and(byte_range_80_bf, tmp15);
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          sequence_f0_90_90 = simd_and(tmp151, byte_90);
          carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(76), sequence_f0_90_adv));
          sequence_f0_90_90 = simd_and(sequence_f0_90_adv, byte_90);
          r10000_10fff_tmp2 = simd_and(byte_range_80_bf, basis_bits.bit_2);
          byte_range_a8_bf = simd_and(r10000_10fff_tmp2, tmp37);
          carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_f0_90_90, carryQ.get_carry_in(77), sequence_f0_90_90_adv));
          r10000_10fff_tmp3 = simd_and(sequence_f0_90_90_adv, byte_range_a8_bf);
          struct_Ll.cc = simd_or(struct_Ll.cc, r10000_10fff_tmp3);
          sequence_f0_90_91 = simd_and(sequence_f0_90_adv, byte_91);
          sequence_f0_90_91 = simd_and(sequence_f0_90_adv, byte_91);
          byte_range_80_8f = simd_andc(byte_range_80_bf, tmp64);
          carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_f0_90_91, carryQ.get_carry_in(78), sequence_f0_90_91_adv));
          r10000_10fff_tmp4 = simd_and(sequence_f0_90_91_adv, byte_range_80_8f);
          struct_Ll.cc = simd_or(struct_Ll.cc, r10000_10fff_tmp4);
        }
        else {
          carryQ.CarryDequeueEnqueue(76, 3);
        }
  }
  CarryArray<79, 0> carryQ;
  };

  struct Lm {
  Lm() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Lm & struct_Lm) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f0, tmp7, tmp8, tmp9, tmp10;
		BitBlock tmp11, tmp12, byte_96, tmp13, sequence_f0_96, byte_f0_adv, tmp14;
		BitBlock tmp15, tmp16, byte_be, tmp17, sequence_f0_96_be, sequence_f0_96_adv;
		BitBlock tmp18, tmp19, tmp20, byte_range_93_9f, sequence_f0_96_be_adv, tmp21;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, byte_ca, byte_range_b0_bf, byte_ca_adv, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, byte_cb, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9;
		BitBlock r80_7ff_tmp10, r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13;
		BitBlock r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16, r80_7ff_tmp17;
		BitBlock r80_7ff_tmp18, r80_7ff_tmp19, r80_7ff_tmp20, r80_7ff_tmp21;
		BitBlock r80_7ff_tmp22, r80_7ff_tmp23, r80_7ff_tmp24, r80_7ff_tmp25;
		BitBlock r80_7ff_tmp26, cc_range_2c0_2ee_2, byte_cb_adv, r80_7ff_tmp27;
		BitBlock r80_7ff_tmp28, r80_7ff_tmp29, byte_cd, r80_7ff_tmp30, r80_7ff_tmp31;
		BitBlock cc_range_374_37a_2, byte_cd_adv, r80_7ff_tmp32, r80_7ff_tmp33;
		BitBlock r80_7ff_tmp34, byte_d5, r80_7ff_tmp35, byte_99, byte_d5_adv;
		BitBlock r80_7ff_tmp36, byte_d9, byte_80, byte_d9_adv, r80_7ff_tmp37, byte_db;
		BitBlock r80_7ff_tmp38, r80_7ff_tmp39, r80_7ff_tmp40, byte_range_a5_a6;
		BitBlock byte_db_adv, r80_7ff_tmp41, r80_7ff_tmp42, byte_df, r80_7ff_tmp43;
		BitBlock r80_7ff_tmp44, cc_range_7f4_7fa_2, byte_df_adv, r80_7ff_tmp45, tmp22;
		BitBlock byte_range_e0_ef, byte_e0, r800_ffff_tmp1, byte_a0, r800_ffff_tmp2;
		BitBlock sequence_e0_a0, byte_e0_adv, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, cc_range_81a_828_3;
		BitBlock sequence_e0_a0_adv, r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13;
		BitBlock byte_a5, sequence_e0_a5, r800_ffff_tmp14, byte_b1, sequence_e0_a5_adv;
		BitBlock r800_ffff_tmp15, r800_ffff_tmp16, byte_b9, sequence_e0_b9;
		BitBlock r800_ffff_tmp17, r800_ffff_tmp18, byte_86, sequence_e0_b9_adv;
		BitBlock r800_ffff_tmp19, r800_ffff_tmp20, byte_bb, sequence_e0_bb;
		BitBlock sequence_e0_bb_adv, r800_ffff_tmp21, byte_e1, r800_ffff_tmp22;
		BitBlock byte_83, r800_ffff_tmp23, sequence_e1_83, byte_e1_adv;
		BitBlock r800_ffff_tmp24, byte_bc, sequence_e1_83_adv, r800_ffff_tmp25;
		BitBlock r800_ffff_tmp26, byte_9f, sequence_e1_9f, r800_ffff_tmp27, byte_97;
		BitBlock sequence_e1_9f_adv, r800_ffff_tmp28, byte_a1, sequence_e1_a1;
		BitBlock sequence_e1_a1_adv, r800_ffff_tmp29, byte_aa, sequence_e1_aa, byte_a7;
		BitBlock sequence_e1_aa_adv, r800_ffff_tmp30, sequence_e1_b1, r800_ffff_tmp31;
		BitBlock r800_ffff_tmp32, byte_range_b8_bd, sequence_e1_b1_adv;
		BitBlock r800_ffff_tmp33, byte_b4, sequence_e1_b4, r800_ffff_tmp34;
		BitBlock r800_ffff_tmp35, byte_range_ac_bf, sequence_e1_b4_adv;
		BitBlock r800_ffff_tmp36, byte_b5, sequence_e1_b5, r800_ffff_tmp37;
		BitBlock r800_ffff_tmp38, r800_ffff_tmp39, r800_ffff_tmp40, r800_ffff_tmp41;
		BitBlock cc_range_1d40_1d78_3, sequence_e1_b5_adv, r800_ffff_tmp42, byte_b6;
		BitBlock sequence_e1_b6, r800_ffff_tmp43, r800_ffff_tmp44, byte_range_9b_bf;
		BitBlock sequence_e1_b6_adv, r800_ffff_tmp45, r800_ffff_tmp46, byte_e2;
		BitBlock byte_81, r800_ffff_tmp47, sequence_e2_81, byte_e2_adv;
		BitBlock r800_ffff_tmp48, cc_range_2071_207f_3, sequence_e2_81_adv;
		BitBlock r800_ffff_tmp49, byte_82, sequence_e2_82, r800_ffff_tmp50;
		BitBlock r800_ffff_tmp51, byte_range_90_9c, sequence_e2_82_adv;
		BitBlock r800_ffff_tmp52, sequence_e2_b1, r800_ffff_tmp53, byte_range_bc_bd;
		BitBlock sequence_e2_b1_adv, r800_ffff_tmp54, sequence_e2_b5, byte_af;
		BitBlock sequence_e2_b5_adv, r800_ffff_tmp55, byte_b8, sequence_e2_b8;
		BitBlock sequence_e2_b8_adv, r800_ffff_tmp56, byte_e3, r800_ffff_tmp57;
		BitBlock sequence_e3_80, byte_e3_adv, r800_ffff_tmp58, r800_ffff_tmp59;
		BitBlock r800_ffff_tmp60, r800_ffff_tmp61, r800_ffff_tmp62, r800_ffff_tmp63;
		BitBlock cc_range_3005_303b_3, sequence_e3_80_adv, r800_ffff_tmp64;
		BitBlock sequence_e3_82, r800_ffff_tmp65, r800_ffff_tmp66, r800_ffff_tmp67;
		BitBlock byte_range_9d_9e, sequence_e3_82_adv, r800_ffff_tmp68, sequence_e3_83;
		BitBlock r800_ffff_tmp69, byte_range_bc_be, sequence_e3_83_adv;
		BitBlock r800_ffff_tmp70, byte_ea, r800_ffff_tmp71, sequence_ea_80;
		BitBlock byte_ea_adv, byte_95, sequence_ea_80_adv, r800_ffff_tmp72, byte_93;
		BitBlock sequence_ea_93, sequence_ea_93_adv, r800_ffff_tmp73, byte_98;
		BitBlock sequence_ea_98, byte_8c, sequence_ea_98_adv, r800_ffff_tmp74;
		BitBlock sequence_ea_99, byte_bf, sequence_ea_99_adv, r800_ffff_tmp75, byte_9c;
		BitBlock sequence_ea_9c, r800_ffff_tmp76, r800_ffff_tmp77, byte_range_97_9f;
		BitBlock sequence_ea_9c_adv, r800_ffff_tmp78, r800_ffff_tmp79, byte_9d;
		BitBlock sequence_ea_9d, byte_b0, sequence_ea_9d_adv, r800_ffff_tmp80, byte_9e;
		BitBlock sequence_ea_9e, byte_88, sequence_ea_9e_adv, r800_ffff_tmp81;
		BitBlock sequence_ea_9f, r800_ffff_tmp82, byte_range_b8_b9, sequence_ea_9f_adv;
		BitBlock r800_ffff_tmp83, sequence_ea_a7, byte_8f, sequence_ea_a7_adv;
		BitBlock r800_ffff_tmp84, byte_a9, sequence_ea_a9, sequence_ea_a9_adv;
		BitBlock r800_ffff_tmp85, byte_ab, sequence_ea_ab, r800_ffff_tmp86;
		BitBlock r800_ffff_tmp87, r800_ffff_tmp88, cc_range_aadd_aaf3_3;
		BitBlock sequence_ea_ab_adv, r800_ffff_tmp89, byte_ef, byte_bd;
		BitBlock r800_ffff_tmp90, sequence_ef_bd, byte_ef_adv, sequence_ef_bd_adv;
		BitBlock r800_ffff_tmp91, sequence_ef_be, r800_ffff_tmp92, byte_range_9e_9f;
		BitBlock sequence_ef_be_adv, r800_ffff_tmp93;




        struct_Lm.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_f0 = simd_andc(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp12 = simd_and(tmp10, tmp11);
        byte_96 = simd_and(tmp9, tmp12);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp13));
        sequence_f0_96 = simd_and(tmp13, byte_96);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
        tmp14 = simd_and(tmp7, tmp2);
        tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp16 = simd_and(tmp15, tmp11);
        byte_be = simd_and(tmp14, tmp16);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(2), tmp17));
        sequence_f0_96_be = simd_and(tmp17, byte_be);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(3), sequence_f0_96_adv));
        sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
        tmp18 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp19 = simd_or(basis_bits.bit_5, tmp18);
        tmp20 = simd_or(basis_bits.bit_4, tmp19);
        byte_range_93_9f = simd_and(tmp9, tmp20);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(4), sequence_f0_96_be_adv));
        tmp21 = simd_and(sequence_f0_96_be_adv, byte_range_93_9f);
        struct_Lm.cc = simd_or(struct_Lm.cc, tmp21);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(5, 7))) {
          r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp2 = simd_andc(tmp1, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp4 = simd_and(r80_7ff_tmp3, tmp11);
          byte_ca = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
          byte_range_b0_bf = simd_and(tmp7, tmp2);
          carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(5), byte_ca_adv));
          r80_7ff_tmp5 = simd_and(byte_ca_adv, byte_range_b0_bf);
          struct_Lm.cc = simd_or(struct_Lm.cc, r80_7ff_tmp5);
          r80_7ff_tmp6 = simd_and(r80_7ff_tmp3, tmp18);
          byte_cb = simd_and(r80_7ff_tmp2, r80_7ff_tmp6);
          r80_7ff_tmp7 = simd_andc(tmp7, r80_7ff_tmp1);
          r80_7ff_tmp8 = simd_or(tmp4, basis_bits.bit_6);
          r80_7ff_tmp9 = simd_andc(r80_7ff_tmp7, r80_7ff_tmp8);
          r80_7ff_tmp10 = simd_andc(tmp7, basis_bits.bit_2);
          r80_7ff_tmp11 = simd_not(r80_7ff_tmp8);
          r80_7ff_tmp12 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r80_7ff_tmp13 = simd_or(basis_bits.bit_4, r80_7ff_tmp12);
          r80_7ff_tmp14 = simd_or(simd_and(basis_bits.bit_3, r80_7ff_tmp11), simd_andc(r80_7ff_tmp13, basis_bits.bit_3));
          r80_7ff_tmp15 = simd_and(r80_7ff_tmp10, r80_7ff_tmp14);
          r80_7ff_tmp16 = simd_or(r80_7ff_tmp9, r80_7ff_tmp15);
          r80_7ff_tmp17 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp18 = simd_and(tmp7, r80_7ff_tmp17);
          r80_7ff_tmp19 = simd_andc(r80_7ff_tmp18, basis_bits.bit_4);
          r80_7ff_tmp20 = simd_and(basis_bits.bit_5, tmp5);
          r80_7ff_tmp21 = simd_andc(r80_7ff_tmp19, r80_7ff_tmp20);
          r80_7ff_tmp22 = simd_or(r80_7ff_tmp16, r80_7ff_tmp21);
          r80_7ff_tmp23 = simd_andc(tmp15, tmp5);
          r80_7ff_tmp24 = simd_and(r80_7ff_tmp18, r80_7ff_tmp23);
          r80_7ff_tmp25 = simd_or(r80_7ff_tmp22, r80_7ff_tmp24);
          r80_7ff_tmp26 = simd_and(r80_7ff_tmp18, tmp16);
          cc_range_2c0_2ee_2 = simd_or(r80_7ff_tmp25, r80_7ff_tmp26);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(6), byte_cb_adv));
          r80_7ff_tmp27 = simd_and(byte_cb_adv, cc_range_2c0_2ee_2);
          struct_Lm.cc = simd_or(struct_Lm.cc, r80_7ff_tmp27);
          r80_7ff_tmp28 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r80_7ff_tmp29 = simd_and(tmp15, r80_7ff_tmp28);
          byte_cd = simd_and(r80_7ff_tmp2, r80_7ff_tmp29);
          r80_7ff_tmp30 = simd_andc(tmp10, tmp5);
          r80_7ff_tmp31 = simd_or(r80_7ff_tmp30, r80_7ff_tmp4);
          cc_range_374_37a_2 = simd_and(byte_range_b0_bf, r80_7ff_tmp31);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(7), byte_cd_adv));
          r80_7ff_tmp32 = simd_and(byte_cd_adv, cc_range_374_37a_2);
          struct_Lm.cc = simd_or(struct_Lm.cc, r80_7ff_tmp32);
          r80_7ff_tmp33 = simd_and(tmp1, tmp8);
          r80_7ff_tmp34 = simd_and(tmp10, r80_7ff_tmp28);
          byte_d5 = simd_and(r80_7ff_tmp33, r80_7ff_tmp34);
          r80_7ff_tmp35 = simd_and(r80_7ff_tmp3, r80_7ff_tmp28);
          byte_99 = simd_and(tmp9, r80_7ff_tmp35);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(8), byte_d5_adv));
          r80_7ff_tmp36 = simd_and(byte_d5_adv, byte_99);
          struct_Lm.cc = simd_or(struct_Lm.cc, r80_7ff_tmp36);
          byte_d9 = simd_and(r80_7ff_tmp33, r80_7ff_tmp35);
          byte_80 = simd_andc(r80_7ff_tmp7, tmp6);
          carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(9), byte_d9_adv));
          r80_7ff_tmp37 = simd_and(byte_d9_adv, byte_80);
          struct_Lm.cc = simd_or(struct_Lm.cc, r80_7ff_tmp37);
          byte_db = simd_and(r80_7ff_tmp33, r80_7ff_tmp6);
          r80_7ff_tmp38 = simd_and(r80_7ff_tmp18, tmp10);
          r80_7ff_tmp39 = simd_not(basis_bits.bit_7);
          r80_7ff_tmp40 = simd_or(simd_and(basis_bits.bit_6, r80_7ff_tmp39), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          byte_range_a5_a6 = simd_and(r80_7ff_tmp38, r80_7ff_tmp40);
          carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(10), byte_db_adv));
          r80_7ff_tmp41 = simd_and(byte_db_adv, byte_range_a5_a6);
          struct_Lm.cc = simd_or(struct_Lm.cc, r80_7ff_tmp41);
          r80_7ff_tmp42 = simd_and(tmp15, tmp18);
          byte_df = simd_and(r80_7ff_tmp33, r80_7ff_tmp42);
          r80_7ff_tmp43 = simd_andc(tmp10, basis_bits.bit_6);
          r80_7ff_tmp44 = simd_or(r80_7ff_tmp43, r80_7ff_tmp4);
          cc_range_7f4_7fa_2 = simd_and(byte_range_b0_bf, r80_7ff_tmp44);
          carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(11), byte_df_adv));
          r80_7ff_tmp45 = simd_and(byte_df_adv, cc_range_7f4_7fa_2);
          struct_Lm.cc = simd_or(struct_Lm.cc, r80_7ff_tmp45);
        }
        else {
          carryQ.CarryDequeueEnqueue(5, 7);
        }
        tmp22 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp22);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(12, 45))) {
          byte_e0 = simd_andc(byte_range_e0_ef, tmp6);
          r800_ffff_tmp1 = simd_and(tmp7, tmp22);
          byte_a0 = simd_andc(r800_ffff_tmp1, tmp6);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(12), r800_ffff_tmp2));
          sequence_e0_a0 = simd_and(r800_ffff_tmp2, byte_a0);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(13), byte_e0_adv));
          sequence_e0_a0 = simd_and(byte_e0_adv, byte_a0);
          r800_ffff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp4 = simd_and(r800_ffff_tmp3, tmp11);
          r800_ffff_tmp5 = simd_and(tmp9, r800_ffff_tmp4);
          r800_ffff_tmp6 = simd_andc(tmp10, tmp5);
          r800_ffff_tmp7 = simd_and(r800_ffff_tmp1, r800_ffff_tmp6);
          r800_ffff_tmp8 = simd_or(r800_ffff_tmp5, r800_ffff_tmp7);
          r800_ffff_tmp9 = simd_andc(r800_ffff_tmp3, tmp5);
          r800_ffff_tmp10 = simd_and(r800_ffff_tmp1, r800_ffff_tmp9);
          cc_range_81a_828_3 = simd_or(r800_ffff_tmp8, r800_ffff_tmp10);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(14), sequence_e0_a0_adv));
          r800_ffff_tmp11 = simd_and(sequence_e0_a0_adv, cc_range_81a_828_3);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp11);
          r800_ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp13 = simd_and(tmp10, r800_ffff_tmp12);
          byte_a5 = simd_and(r800_ffff_tmp1, r800_ffff_tmp13);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          r800_ffff_tmp14 = simd_andc(r800_ffff_tmp12, tmp4);
          byte_b1 = simd_and(tmp14, r800_ffff_tmp14);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(15), sequence_e0_a5_adv));
          r800_ffff_tmp15 = simd_and(sequence_e0_a5_adv, byte_b1);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp15);
          r800_ffff_tmp16 = simd_and(r800_ffff_tmp3, r800_ffff_tmp12);
          byte_b9 = simd_and(tmp14, r800_ffff_tmp16);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          r800_ffff_tmp17 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp18 = simd_andc(tmp7, r800_ffff_tmp17);
          byte_86 = simd_and(r800_ffff_tmp18, tmp12);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(16), sequence_e0_b9_adv));
          r800_ffff_tmp19 = simd_and(sequence_e0_b9_adv, byte_86);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp19);
          r800_ffff_tmp20 = simd_and(r800_ffff_tmp3, tmp18);
          byte_bb = simd_and(tmp14, r800_ffff_tmp20);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(17), sequence_e0_bb_adv));
          r800_ffff_tmp21 = simd_and(sequence_e0_bb_adv, byte_86);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp21);
          byte_e1 = simd_and(byte_range_e0_ef, r800_ffff_tmp14);
          r800_ffff_tmp22 = simd_andc(tmp18, tmp4);
          byte_83 = simd_and(r800_ffff_tmp18, r800_ffff_tmp22);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(18), r800_ffff_tmp23));
          sequence_e1_83 = simd_and(r800_ffff_tmp23, byte_83);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(19), byte_e1_adv));
          sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
          r800_ffff_tmp24 = simd_andc(tmp15, tmp5);
          byte_bc = simd_and(tmp14, r800_ffff_tmp24);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(20), sequence_e1_83_adv));
          r800_ffff_tmp25 = simd_and(sequence_e1_83_adv, byte_bc);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp25);
          r800_ffff_tmp26 = simd_and(tmp15, tmp18);
          byte_9f = simd_and(tmp9, r800_ffff_tmp26);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          r800_ffff_tmp27 = simd_and(tmp10, tmp18);
          byte_97 = simd_and(tmp9, r800_ffff_tmp27);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(21), sequence_e1_9f_adv));
          r800_ffff_tmp28 = simd_and(sequence_e1_9f_adv, byte_97);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp28);
          byte_a1 = simd_and(r800_ffff_tmp1, r800_ffff_tmp14);
          sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
          sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(22), sequence_e1_a1_adv));
          r800_ffff_tmp29 = simd_and(sequence_e1_a1_adv, byte_83);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp29);
          byte_aa = simd_and(r800_ffff_tmp1, r800_ffff_tmp4);
          sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
          sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
          byte_a7 = simd_and(r800_ffff_tmp1, r800_ffff_tmp27);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(23), sequence_e1_aa_adv));
          r800_ffff_tmp30 = simd_and(sequence_e1_aa_adv, byte_a7);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp30);
          sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
          sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
          r800_ffff_tmp31 = simd_and(tmp14, basis_bits.bit_4);
          r800_ffff_tmp32 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          byte_range_b8_bd = simd_andc(r800_ffff_tmp31, r800_ffff_tmp32);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(24), sequence_e1_b1_adv));
          r800_ffff_tmp33 = simd_and(sequence_e1_b1_adv, byte_range_b8_bd);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp33);
          byte_b4 = simd_and(tmp14, r800_ffff_tmp6);
          sequence_e1_b4 = simd_and(byte_e1_adv, byte_b4);
          sequence_e1_b4 = simd_and(byte_e1_adv, byte_b4);
          r800_ffff_tmp34 = simd_and(tmp7, basis_bits.bit_2);
          r800_ffff_tmp35 = simd_or(basis_bits.bit_3, tmp15);
          byte_range_ac_bf = simd_and(r800_ffff_tmp34, r800_ffff_tmp35);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e1_b4, carryQ.get_carry_in(25), sequence_e1_b4_adv));
          r800_ffff_tmp36 = simd_and(sequence_e1_b4_adv, byte_range_ac_bf);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp36);
          byte_b5 = simd_and(tmp14, r800_ffff_tmp13);
          sequence_e1_b5 = simd_and(byte_e1_adv, byte_b5);
          sequence_e1_b5 = simd_and(byte_e1_adv, byte_b5);
          r800_ffff_tmp37 = simd_and(basis_bits.bit_4, tmp19);
          r800_ffff_tmp38 = simd_or(basis_bits.bit_3, r800_ffff_tmp37);
          r800_ffff_tmp39 = simd_and(basis_bits.bit_2, r800_ffff_tmp38);
          r800_ffff_tmp40 = simd_andc(tmp7, r800_ffff_tmp39);
          r800_ffff_tmp41 = simd_and(tmp14, r800_ffff_tmp9);
          cc_range_1d40_1d78_3 = simd_or(r800_ffff_tmp40, r800_ffff_tmp41);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_b5, carryQ.get_carry_in(26), sequence_e1_b5_adv));
          r800_ffff_tmp42 = simd_and(sequence_e1_b5_adv, cc_range_1d40_1d78_3);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp42);
          byte_b6 = simd_and(tmp14, tmp12);
          sequence_e1_b6 = simd_and(byte_e1_adv, byte_b6);
          sequence_e1_b6 = simd_and(byte_e1_adv, byte_b6);
          r800_ffff_tmp43 = simd_and(basis_bits.bit_3, r800_ffff_tmp37);
          r800_ffff_tmp44 = simd_or(basis_bits.bit_2, r800_ffff_tmp43);
          byte_range_9b_bf = simd_and(tmp7, r800_ffff_tmp44);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_b6, carryQ.get_carry_in(27), sequence_e1_b6_adv));
          r800_ffff_tmp45 = simd_and(sequence_e1_b6_adv, byte_range_9b_bf);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp45);
          r800_ffff_tmp46 = simd_andc(tmp11, tmp4);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp46);
          byte_81 = simd_and(r800_ffff_tmp18, r800_ffff_tmp14);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(28), r800_ffff_tmp47));
          sequence_e2_81 = simd_and(r800_ffff_tmp47, byte_81);
          carryQ.cq[29] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(29), byte_e2_adv));
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          r800_ffff_tmp48 = simd_or(r800_ffff_tmp14, r800_ffff_tmp26);
          cc_range_2071_207f_3 = simd_and(tmp14, r800_ffff_tmp48);
          carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(30), sequence_e2_81_adv));
          r800_ffff_tmp49 = simd_and(sequence_e2_81_adv, cc_range_2071_207f_3);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp49);
          byte_82 = simd_and(r800_ffff_tmp18, r800_ffff_tmp46);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          r800_ffff_tmp50 = simd_and(basis_bits.bit_5, tmp5);
          r800_ffff_tmp51 = simd_and(basis_bits.bit_4, r800_ffff_tmp50);
          byte_range_90_9c = simd_andc(tmp9, r800_ffff_tmp51);
          carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(31), sequence_e2_82_adv));
          r800_ffff_tmp52 = simd_and(sequence_e2_82_adv, byte_range_90_9c);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp52);
          sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
          sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
          r800_ffff_tmp53 = simd_andc(tmp15, basis_bits.bit_6);
          byte_range_bc_bd = simd_and(tmp14, r800_ffff_tmp53);
          carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(32), sequence_e2_b1_adv));
          r800_ffff_tmp54 = simd_and(sequence_e2_b1_adv, byte_range_bc_bd);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp54);
          sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
          sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
          byte_af = simd_and(r800_ffff_tmp1, r800_ffff_tmp26);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(33), sequence_e2_b5_adv));
          r800_ffff_tmp55 = simd_and(sequence_e2_b5_adv, byte_af);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp55);
          byte_b8 = simd_and(tmp14, r800_ffff_tmp9);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(34), sequence_e2_b8_adv));
          r800_ffff_tmp56 = simd_and(sequence_e2_b8_adv, byte_af);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp56);
          byte_e3 = simd_and(byte_range_e0_ef, r800_ffff_tmp22);
          byte_80 = simd_andc(r800_ffff_tmp18, tmp6);
          carryQ.cq[35] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(35), r800_ffff_tmp57));
          sequence_e3_80 = simd_and(r800_ffff_tmp57, byte_80);
          carryQ.cq[36] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(36), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          r800_ffff_tmp58 = simd_and(r800_ffff_tmp18, r800_ffff_tmp13);
          r800_ffff_tmp59 = simd_andc(tmp14, basis_bits.bit_4);
          r800_ffff_tmp60 = simd_not(basis_bits.bit_6);
          r800_ffff_tmp61 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp60), simd_andc(tmp5, basis_bits.bit_5));
          r800_ffff_tmp62 = simd_and(r800_ffff_tmp59, r800_ffff_tmp61);
          r800_ffff_tmp63 = simd_or(r800_ffff_tmp58, r800_ffff_tmp62);
          cc_range_3005_303b_3 = simd_or(r800_ffff_tmp63, byte_bb);
          carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(37), sequence_e3_80_adv));
          r800_ffff_tmp64 = simd_and(sequence_e3_80_adv, cc_range_3005_303b_3);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp64);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          r800_ffff_tmp65 = simd_and(tmp9, tmp15);
          r800_ffff_tmp66 = simd_not(basis_bits.bit_7);
          r800_ffff_tmp67 = simd_or(simd_and(basis_bits.bit_6, r800_ffff_tmp66), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          byte_range_9d_9e = simd_and(r800_ffff_tmp65, r800_ffff_tmp67);
          carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(38), sequence_e3_82_adv));
          r800_ffff_tmp68 = simd_and(sequence_e3_82_adv, byte_range_9d_9e);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp68);
          sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
          sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
          r800_ffff_tmp69 = simd_and(tmp14, tmp15);
          byte_range_bc_be = simd_andc(r800_ffff_tmp69, tmp18);
          carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(39), sequence_e3_83_adv));
          r800_ffff_tmp70 = simd_and(sequence_e3_83_adv, byte_range_bc_be);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp70);
          byte_ea = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
          carryQ.cq[40] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(40), r800_ffff_tmp71));
          sequence_ea_80 = simd_and(r800_ffff_tmp71, byte_80);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(41), byte_ea_adv));
          sequence_ea_80 = simd_and(byte_ea_adv, byte_80);
          byte_95 = simd_and(tmp9, r800_ffff_tmp13);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_ea_80, carryQ.get_carry_in(42), sequence_ea_80_adv));
          r800_ffff_tmp72 = simd_and(sequence_ea_80_adv, byte_95);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp72);
          byte_93 = simd_and(tmp9, r800_ffff_tmp22);
          sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
          sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(43), sequence_ea_93_adv));
          r800_ffff_tmp73 = simd_and(sequence_ea_93_adv, byte_range_b8_bd);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp73);
          byte_98 = simd_and(tmp9, r800_ffff_tmp9);
          sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
          sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
          byte_8c = simd_and(r800_ffff_tmp18, r800_ffff_tmp24);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(44), sequence_ea_98_adv));
          r800_ffff_tmp74 = simd_and(sequence_ea_98_adv, byte_8c);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp74);
          byte_99 = simd_and(tmp9, r800_ffff_tmp16);
          sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
          sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
          byte_bf = simd_and(tmp14, r800_ffff_tmp26);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(45), sequence_ea_99_adv));
          r800_ffff_tmp75 = simd_and(sequence_ea_99_adv, byte_bf);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp75);
          byte_9c = simd_and(tmp9, r800_ffff_tmp24);
          sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
          sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
          r800_ffff_tmp76 = simd_and(basis_bits.bit_5, tmp18);
          r800_ffff_tmp77 = simd_or(basis_bits.bit_4, r800_ffff_tmp76);
          byte_range_97_9f = simd_and(tmp9, r800_ffff_tmp77);
          carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(46), sequence_ea_9c_adv));
          r800_ffff_tmp78 = simd_and(sequence_ea_9c_adv, byte_range_97_9f);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp78);
          r800_ffff_tmp79 = simd_and(tmp15, r800_ffff_tmp12);
          byte_9d = simd_and(tmp9, r800_ffff_tmp79);
          sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
          sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
          byte_b0 = simd_andc(tmp14, tmp6);
          carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(47), sequence_ea_9d_adv));
          r800_ffff_tmp80 = simd_and(sequence_ea_9d_adv, byte_b0);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp80);
          byte_9e = simd_and(tmp9, tmp16);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          byte_88 = simd_and(r800_ffff_tmp18, r800_ffff_tmp9);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(48), sequence_ea_9e_adv));
          r800_ffff_tmp81 = simd_and(sequence_ea_9e_adv, byte_88);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp81);
          sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
          sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
          r800_ffff_tmp82 = simd_andc(r800_ffff_tmp3, basis_bits.bit_6);
          byte_range_b8_b9 = simd_and(tmp14, r800_ffff_tmp82);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(49), sequence_ea_9f_adv));
          r800_ffff_tmp83 = simd_and(sequence_ea_9f_adv, byte_range_b8_b9);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp83);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          byte_8f = simd_and(r800_ffff_tmp18, r800_ffff_tmp26);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(50), sequence_ea_a7_adv));
          r800_ffff_tmp84 = simd_and(sequence_ea_a7_adv, byte_8f);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp84);
          byte_a9 = simd_and(r800_ffff_tmp1, r800_ffff_tmp16);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(51), sequence_ea_a9_adv));
          r800_ffff_tmp85 = simd_and(sequence_ea_a9_adv, byte_b0);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp85);
          byte_ab = simd_and(r800_ffff_tmp1, r800_ffff_tmp20);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          r800_ffff_tmp86 = simd_not(tmp5);
          r800_ffff_tmp87 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp86), simd_andc(tmp18, basis_bits.bit_5));
          r800_ffff_tmp88 = simd_and(r800_ffff_tmp59, r800_ffff_tmp87);
          cc_range_aadd_aaf3_3 = simd_or(byte_9d, r800_ffff_tmp88);
          carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(52), sequence_ea_ab_adv));
          r800_ffff_tmp89 = simd_and(sequence_ea_ab_adv, cc_range_aadd_aaf3_3);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp89);
          byte_ef = simd_and(byte_range_e0_ef, r800_ffff_tmp26);
          byte_bd = simd_and(tmp14, r800_ffff_tmp79);
          carryQ.cq[53] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(53), r800_ffff_tmp90));
          sequence_ef_bd = simd_and(r800_ffff_tmp90, byte_bd);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(54), byte_ef_adv));
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(55), sequence_ef_bd_adv));
          r800_ffff_tmp91 = simd_and(sequence_ef_bd_adv, byte_b0);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp91);
          sequence_ef_be = simd_and(byte_ef_adv, byte_be);
          sequence_ef_be = simd_and(byte_ef_adv, byte_be);
          r800_ffff_tmp92 = simd_and(tmp15, basis_bits.bit_6);
          byte_range_9e_9f = simd_and(tmp9, r800_ffff_tmp92);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(56), sequence_ef_be_adv));
          r800_ffff_tmp93 = simd_and(sequence_ef_be_adv, byte_range_9e_9f);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp93);
        }
        else {
          carryQ.CarryDequeueEnqueue(12, 45);
        }
        carryQ.CarryQ_Adjust(57);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Lm & struct_Lm, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f0, tmp7, tmp8, tmp9, tmp10;
		BitBlock tmp11, tmp12, byte_96, tmp13, sequence_f0_96, byte_f0_adv, tmp14;
		BitBlock tmp15, tmp16, byte_be, tmp17, sequence_f0_96_be, sequence_f0_96_adv;
		BitBlock tmp18, tmp19, tmp20, byte_range_93_9f, sequence_f0_96_be_adv, tmp21;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, byte_ca, byte_range_b0_bf, byte_ca_adv, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, byte_cb, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9;
		BitBlock r80_7ff_tmp10, r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13;
		BitBlock r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16, r80_7ff_tmp17;
		BitBlock r80_7ff_tmp18, r80_7ff_tmp19, r80_7ff_tmp20, r80_7ff_tmp21;
		BitBlock r80_7ff_tmp22, r80_7ff_tmp23, r80_7ff_tmp24, r80_7ff_tmp25;
		BitBlock r80_7ff_tmp26, cc_range_2c0_2ee_2, byte_cb_adv, r80_7ff_tmp27;
		BitBlock r80_7ff_tmp28, r80_7ff_tmp29, byte_cd, r80_7ff_tmp30, r80_7ff_tmp31;
		BitBlock cc_range_374_37a_2, byte_cd_adv, r80_7ff_tmp32, r80_7ff_tmp33;
		BitBlock r80_7ff_tmp34, byte_d5, r80_7ff_tmp35, byte_99, byte_d5_adv;
		BitBlock r80_7ff_tmp36, byte_d9, byte_80, byte_d9_adv, r80_7ff_tmp37, byte_db;
		BitBlock r80_7ff_tmp38, r80_7ff_tmp39, r80_7ff_tmp40, byte_range_a5_a6;
		BitBlock byte_db_adv, r80_7ff_tmp41, r80_7ff_tmp42, byte_df, r80_7ff_tmp43;
		BitBlock r80_7ff_tmp44, cc_range_7f4_7fa_2, byte_df_adv, r80_7ff_tmp45, tmp22;
		BitBlock byte_range_e0_ef, byte_e0, r800_ffff_tmp1, byte_a0, r800_ffff_tmp2;
		BitBlock sequence_e0_a0, byte_e0_adv, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, cc_range_81a_828_3;
		BitBlock sequence_e0_a0_adv, r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13;
		BitBlock byte_a5, sequence_e0_a5, r800_ffff_tmp14, byte_b1, sequence_e0_a5_adv;
		BitBlock r800_ffff_tmp15, r800_ffff_tmp16, byte_b9, sequence_e0_b9;
		BitBlock r800_ffff_tmp17, r800_ffff_tmp18, byte_86, sequence_e0_b9_adv;
		BitBlock r800_ffff_tmp19, r800_ffff_tmp20, byte_bb, sequence_e0_bb;
		BitBlock sequence_e0_bb_adv, r800_ffff_tmp21, byte_e1, r800_ffff_tmp22;
		BitBlock byte_83, r800_ffff_tmp23, sequence_e1_83, byte_e1_adv;
		BitBlock r800_ffff_tmp24, byte_bc, sequence_e1_83_adv, r800_ffff_tmp25;
		BitBlock r800_ffff_tmp26, byte_9f, sequence_e1_9f, r800_ffff_tmp27, byte_97;
		BitBlock sequence_e1_9f_adv, r800_ffff_tmp28, byte_a1, sequence_e1_a1;
		BitBlock sequence_e1_a1_adv, r800_ffff_tmp29, byte_aa, sequence_e1_aa, byte_a7;
		BitBlock sequence_e1_aa_adv, r800_ffff_tmp30, sequence_e1_b1, r800_ffff_tmp31;
		BitBlock r800_ffff_tmp32, byte_range_b8_bd, sequence_e1_b1_adv;
		BitBlock r800_ffff_tmp33, byte_b4, sequence_e1_b4, r800_ffff_tmp34;
		BitBlock r800_ffff_tmp35, byte_range_ac_bf, sequence_e1_b4_adv;
		BitBlock r800_ffff_tmp36, byte_b5, sequence_e1_b5, r800_ffff_tmp37;
		BitBlock r800_ffff_tmp38, r800_ffff_tmp39, r800_ffff_tmp40, r800_ffff_tmp41;
		BitBlock cc_range_1d40_1d78_3, sequence_e1_b5_adv, r800_ffff_tmp42, byte_b6;
		BitBlock sequence_e1_b6, r800_ffff_tmp43, r800_ffff_tmp44, byte_range_9b_bf;
		BitBlock sequence_e1_b6_adv, r800_ffff_tmp45, r800_ffff_tmp46, byte_e2;
		BitBlock byte_81, r800_ffff_tmp47, sequence_e2_81, byte_e2_adv;
		BitBlock r800_ffff_tmp48, cc_range_2071_207f_3, sequence_e2_81_adv;
		BitBlock r800_ffff_tmp49, byte_82, sequence_e2_82, r800_ffff_tmp50;
		BitBlock r800_ffff_tmp51, byte_range_90_9c, sequence_e2_82_adv;
		BitBlock r800_ffff_tmp52, sequence_e2_b1, r800_ffff_tmp53, byte_range_bc_bd;
		BitBlock sequence_e2_b1_adv, r800_ffff_tmp54, sequence_e2_b5, byte_af;
		BitBlock sequence_e2_b5_adv, r800_ffff_tmp55, byte_b8, sequence_e2_b8;
		BitBlock sequence_e2_b8_adv, r800_ffff_tmp56, byte_e3, r800_ffff_tmp57;
		BitBlock sequence_e3_80, byte_e3_adv, r800_ffff_tmp58, r800_ffff_tmp59;
		BitBlock r800_ffff_tmp60, r800_ffff_tmp61, r800_ffff_tmp62, r800_ffff_tmp63;
		BitBlock cc_range_3005_303b_3, sequence_e3_80_adv, r800_ffff_tmp64;
		BitBlock sequence_e3_82, r800_ffff_tmp65, r800_ffff_tmp66, r800_ffff_tmp67;
		BitBlock byte_range_9d_9e, sequence_e3_82_adv, r800_ffff_tmp68, sequence_e3_83;
		BitBlock r800_ffff_tmp69, byte_range_bc_be, sequence_e3_83_adv;
		BitBlock r800_ffff_tmp70, byte_ea, r800_ffff_tmp71, sequence_ea_80;
		BitBlock byte_ea_adv, byte_95, sequence_ea_80_adv, r800_ffff_tmp72, byte_93;
		BitBlock sequence_ea_93, sequence_ea_93_adv, r800_ffff_tmp73, byte_98;
		BitBlock sequence_ea_98, byte_8c, sequence_ea_98_adv, r800_ffff_tmp74;
		BitBlock sequence_ea_99, byte_bf, sequence_ea_99_adv, r800_ffff_tmp75, byte_9c;
		BitBlock sequence_ea_9c, r800_ffff_tmp76, r800_ffff_tmp77, byte_range_97_9f;
		BitBlock sequence_ea_9c_adv, r800_ffff_tmp78, r800_ffff_tmp79, byte_9d;
		BitBlock sequence_ea_9d, byte_b0, sequence_ea_9d_adv, r800_ffff_tmp80, byte_9e;
		BitBlock sequence_ea_9e, byte_88, sequence_ea_9e_adv, r800_ffff_tmp81;
		BitBlock sequence_ea_9f, r800_ffff_tmp82, byte_range_b8_b9, sequence_ea_9f_adv;
		BitBlock r800_ffff_tmp83, sequence_ea_a7, byte_8f, sequence_ea_a7_adv;
		BitBlock r800_ffff_tmp84, byte_a9, sequence_ea_a9, sequence_ea_a9_adv;
		BitBlock r800_ffff_tmp85, byte_ab, sequence_ea_ab, r800_ffff_tmp86;
		BitBlock r800_ffff_tmp87, r800_ffff_tmp88, cc_range_aadd_aaf3_3;
		BitBlock sequence_ea_ab_adv, r800_ffff_tmp89, byte_ef, byte_bd;
		BitBlock r800_ffff_tmp90, sequence_ef_bd, byte_ef_adv, sequence_ef_bd_adv;
		BitBlock r800_ffff_tmp91, sequence_ef_be, r800_ffff_tmp92, byte_range_9e_9f;
		BitBlock sequence_ef_be_adv, r800_ffff_tmp93;




        struct_Lm.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_f0 = simd_andc(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp12 = simd_and(tmp10, tmp11);
        byte_96 = simd_and(tmp9, tmp12);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp13));
        sequence_f0_96 = simd_and(tmp13, byte_96);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
        tmp14 = simd_and(tmp7, tmp2);
        tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp16 = simd_and(tmp15, tmp11);
        byte_be = simd_and(tmp14, tmp16);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(2), tmp17));
        sequence_f0_96_be = simd_and(tmp17, byte_be);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(3), sequence_f0_96_adv));
        sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
        tmp18 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp19 = simd_or(basis_bits.bit_5, tmp18);
        tmp20 = simd_or(basis_bits.bit_4, tmp19);
        byte_range_93_9f = simd_and(tmp9, tmp20);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(4), sequence_f0_96_be_adv));
        tmp21 = simd_and(sequence_f0_96_be_adv, byte_range_93_9f);
        struct_Lm.cc = simd_or(struct_Lm.cc, tmp21);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(5, 7))) {
          r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp2 = simd_andc(tmp1, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp4 = simd_and(r80_7ff_tmp3, tmp11);
          byte_ca = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
          byte_range_b0_bf = simd_and(tmp7, tmp2);
          carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_ca, carryQ.get_carry_in(5), byte_ca_adv));
          r80_7ff_tmp5 = simd_and(byte_ca_adv, byte_range_b0_bf);
          struct_Lm.cc = simd_or(struct_Lm.cc, r80_7ff_tmp5);
          r80_7ff_tmp6 = simd_and(r80_7ff_tmp3, tmp18);
          byte_cb = simd_and(r80_7ff_tmp2, r80_7ff_tmp6);
          r80_7ff_tmp7 = simd_andc(tmp7, r80_7ff_tmp1);
          r80_7ff_tmp8 = simd_or(tmp4, basis_bits.bit_6);
          r80_7ff_tmp9 = simd_andc(r80_7ff_tmp7, r80_7ff_tmp8);
          r80_7ff_tmp10 = simd_andc(tmp7, basis_bits.bit_2);
          r80_7ff_tmp11 = simd_not(r80_7ff_tmp8);
          r80_7ff_tmp12 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r80_7ff_tmp13 = simd_or(basis_bits.bit_4, r80_7ff_tmp12);
          r80_7ff_tmp14 = simd_or(simd_and(basis_bits.bit_3, r80_7ff_tmp11), simd_andc(r80_7ff_tmp13, basis_bits.bit_3));
          r80_7ff_tmp15 = simd_and(r80_7ff_tmp10, r80_7ff_tmp14);
          r80_7ff_tmp16 = simd_or(r80_7ff_tmp9, r80_7ff_tmp15);
          r80_7ff_tmp17 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp18 = simd_and(tmp7, r80_7ff_tmp17);
          r80_7ff_tmp19 = simd_andc(r80_7ff_tmp18, basis_bits.bit_4);
          r80_7ff_tmp20 = simd_and(basis_bits.bit_5, tmp5);
          r80_7ff_tmp21 = simd_andc(r80_7ff_tmp19, r80_7ff_tmp20);
          r80_7ff_tmp22 = simd_or(r80_7ff_tmp16, r80_7ff_tmp21);
          r80_7ff_tmp23 = simd_andc(tmp15, tmp5);
          r80_7ff_tmp24 = simd_and(r80_7ff_tmp18, r80_7ff_tmp23);
          r80_7ff_tmp25 = simd_or(r80_7ff_tmp22, r80_7ff_tmp24);
          r80_7ff_tmp26 = simd_and(r80_7ff_tmp18, tmp16);
          cc_range_2c0_2ee_2 = simd_or(r80_7ff_tmp25, r80_7ff_tmp26);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(6), byte_cb_adv));
          r80_7ff_tmp27 = simd_and(byte_cb_adv, cc_range_2c0_2ee_2);
          struct_Lm.cc = simd_or(struct_Lm.cc, r80_7ff_tmp27);
          r80_7ff_tmp28 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r80_7ff_tmp29 = simd_and(tmp15, r80_7ff_tmp28);
          byte_cd = simd_and(r80_7ff_tmp2, r80_7ff_tmp29);
          r80_7ff_tmp30 = simd_andc(tmp10, tmp5);
          r80_7ff_tmp31 = simd_or(r80_7ff_tmp30, r80_7ff_tmp4);
          cc_range_374_37a_2 = simd_and(byte_range_b0_bf, r80_7ff_tmp31);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(7), byte_cd_adv));
          r80_7ff_tmp32 = simd_and(byte_cd_adv, cc_range_374_37a_2);
          struct_Lm.cc = simd_or(struct_Lm.cc, r80_7ff_tmp32);
          r80_7ff_tmp33 = simd_and(tmp1, tmp8);
          r80_7ff_tmp34 = simd_and(tmp10, r80_7ff_tmp28);
          byte_d5 = simd_and(r80_7ff_tmp33, r80_7ff_tmp34);
          r80_7ff_tmp35 = simd_and(r80_7ff_tmp3, r80_7ff_tmp28);
          byte_99 = simd_and(tmp9, r80_7ff_tmp35);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(8), byte_d5_adv));
          r80_7ff_tmp36 = simd_and(byte_d5_adv, byte_99);
          struct_Lm.cc = simd_or(struct_Lm.cc, r80_7ff_tmp36);
          byte_d9 = simd_and(r80_7ff_tmp33, r80_7ff_tmp35);
          byte_80 = simd_andc(r80_7ff_tmp7, tmp6);
          carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(9), byte_d9_adv));
          r80_7ff_tmp37 = simd_and(byte_d9_adv, byte_80);
          struct_Lm.cc = simd_or(struct_Lm.cc, r80_7ff_tmp37);
          byte_db = simd_and(r80_7ff_tmp33, r80_7ff_tmp6);
          r80_7ff_tmp38 = simd_and(r80_7ff_tmp18, tmp10);
          r80_7ff_tmp39 = simd_not(basis_bits.bit_7);
          r80_7ff_tmp40 = simd_or(simd_and(basis_bits.bit_6, r80_7ff_tmp39), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          byte_range_a5_a6 = simd_and(r80_7ff_tmp38, r80_7ff_tmp40);
          carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(10), byte_db_adv));
          r80_7ff_tmp41 = simd_and(byte_db_adv, byte_range_a5_a6);
          struct_Lm.cc = simd_or(struct_Lm.cc, r80_7ff_tmp41);
          r80_7ff_tmp42 = simd_and(tmp15, tmp18);
          byte_df = simd_and(r80_7ff_tmp33, r80_7ff_tmp42);
          r80_7ff_tmp43 = simd_andc(tmp10, basis_bits.bit_6);
          r80_7ff_tmp44 = simd_or(r80_7ff_tmp43, r80_7ff_tmp4);
          cc_range_7f4_7fa_2 = simd_and(byte_range_b0_bf, r80_7ff_tmp44);
          carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(11), byte_df_adv));
          r80_7ff_tmp45 = simd_and(byte_df_adv, cc_range_7f4_7fa_2);
          struct_Lm.cc = simd_or(struct_Lm.cc, r80_7ff_tmp45);
        }
        else {
          carryQ.CarryDequeueEnqueue(5, 7);
        }
        tmp22 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp22);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(12, 45))) {
          byte_e0 = simd_andc(byte_range_e0_ef, tmp6);
          r800_ffff_tmp1 = simd_and(tmp7, tmp22);
          byte_a0 = simd_andc(r800_ffff_tmp1, tmp6);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(12), r800_ffff_tmp2));
          sequence_e0_a0 = simd_and(r800_ffff_tmp2, byte_a0);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(13), byte_e0_adv));
          sequence_e0_a0 = simd_and(byte_e0_adv, byte_a0);
          r800_ffff_tmp3 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp4 = simd_and(r800_ffff_tmp3, tmp11);
          r800_ffff_tmp5 = simd_and(tmp9, r800_ffff_tmp4);
          r800_ffff_tmp6 = simd_andc(tmp10, tmp5);
          r800_ffff_tmp7 = simd_and(r800_ffff_tmp1, r800_ffff_tmp6);
          r800_ffff_tmp8 = simd_or(r800_ffff_tmp5, r800_ffff_tmp7);
          r800_ffff_tmp9 = simd_andc(r800_ffff_tmp3, tmp5);
          r800_ffff_tmp10 = simd_and(r800_ffff_tmp1, r800_ffff_tmp9);
          cc_range_81a_828_3 = simd_or(r800_ffff_tmp8, r800_ffff_tmp10);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(14), sequence_e0_a0_adv));
          r800_ffff_tmp11 = simd_and(sequence_e0_a0_adv, cc_range_81a_828_3);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp11);
          r800_ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp13 = simd_and(tmp10, r800_ffff_tmp12);
          byte_a5 = simd_and(r800_ffff_tmp1, r800_ffff_tmp13);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          r800_ffff_tmp14 = simd_andc(r800_ffff_tmp12, tmp4);
          byte_b1 = simd_and(tmp14, r800_ffff_tmp14);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(15), sequence_e0_a5_adv));
          r800_ffff_tmp15 = simd_and(sequence_e0_a5_adv, byte_b1);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp15);
          r800_ffff_tmp16 = simd_and(r800_ffff_tmp3, r800_ffff_tmp12);
          byte_b9 = simd_and(tmp14, r800_ffff_tmp16);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          r800_ffff_tmp17 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp18 = simd_andc(tmp7, r800_ffff_tmp17);
          byte_86 = simd_and(r800_ffff_tmp18, tmp12);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(16), sequence_e0_b9_adv));
          r800_ffff_tmp19 = simd_and(sequence_e0_b9_adv, byte_86);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp19);
          r800_ffff_tmp20 = simd_and(r800_ffff_tmp3, tmp18);
          byte_bb = simd_and(tmp14, r800_ffff_tmp20);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(17), sequence_e0_bb_adv));
          r800_ffff_tmp21 = simd_and(sequence_e0_bb_adv, byte_86);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp21);
          byte_e1 = simd_and(byte_range_e0_ef, r800_ffff_tmp14);
          r800_ffff_tmp22 = simd_andc(tmp18, tmp4);
          byte_83 = simd_and(r800_ffff_tmp18, r800_ffff_tmp22);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(18), r800_ffff_tmp23));
          sequence_e1_83 = simd_and(r800_ffff_tmp23, byte_83);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(19), byte_e1_adv));
          sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
          r800_ffff_tmp24 = simd_andc(tmp15, tmp5);
          byte_bc = simd_and(tmp14, r800_ffff_tmp24);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(20), sequence_e1_83_adv));
          r800_ffff_tmp25 = simd_and(sequence_e1_83_adv, byte_bc);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp25);
          r800_ffff_tmp26 = simd_and(tmp15, tmp18);
          byte_9f = simd_and(tmp9, r800_ffff_tmp26);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          r800_ffff_tmp27 = simd_and(tmp10, tmp18);
          byte_97 = simd_and(tmp9, r800_ffff_tmp27);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(21), sequence_e1_9f_adv));
          r800_ffff_tmp28 = simd_and(sequence_e1_9f_adv, byte_97);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp28);
          byte_a1 = simd_and(r800_ffff_tmp1, r800_ffff_tmp14);
          sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
          sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(22), sequence_e1_a1_adv));
          r800_ffff_tmp29 = simd_and(sequence_e1_a1_adv, byte_83);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp29);
          byte_aa = simd_and(r800_ffff_tmp1, r800_ffff_tmp4);
          sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
          sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
          byte_a7 = simd_and(r800_ffff_tmp1, r800_ffff_tmp27);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(23), sequence_e1_aa_adv));
          r800_ffff_tmp30 = simd_and(sequence_e1_aa_adv, byte_a7);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp30);
          sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
          sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
          r800_ffff_tmp31 = simd_and(tmp14, basis_bits.bit_4);
          r800_ffff_tmp32 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          byte_range_b8_bd = simd_andc(r800_ffff_tmp31, r800_ffff_tmp32);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(24), sequence_e1_b1_adv));
          r800_ffff_tmp33 = simd_and(sequence_e1_b1_adv, byte_range_b8_bd);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp33);
          byte_b4 = simd_and(tmp14, r800_ffff_tmp6);
          sequence_e1_b4 = simd_and(byte_e1_adv, byte_b4);
          sequence_e1_b4 = simd_and(byte_e1_adv, byte_b4);
          r800_ffff_tmp34 = simd_and(tmp7, basis_bits.bit_2);
          r800_ffff_tmp35 = simd_or(basis_bits.bit_3, tmp15);
          byte_range_ac_bf = simd_and(r800_ffff_tmp34, r800_ffff_tmp35);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e1_b4, carryQ.get_carry_in(25), sequence_e1_b4_adv));
          r800_ffff_tmp36 = simd_and(sequence_e1_b4_adv, byte_range_ac_bf);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp36);
          byte_b5 = simd_and(tmp14, r800_ffff_tmp13);
          sequence_e1_b5 = simd_and(byte_e1_adv, byte_b5);
          sequence_e1_b5 = simd_and(byte_e1_adv, byte_b5);
          r800_ffff_tmp37 = simd_and(basis_bits.bit_4, tmp19);
          r800_ffff_tmp38 = simd_or(basis_bits.bit_3, r800_ffff_tmp37);
          r800_ffff_tmp39 = simd_and(basis_bits.bit_2, r800_ffff_tmp38);
          r800_ffff_tmp40 = simd_andc(tmp7, r800_ffff_tmp39);
          r800_ffff_tmp41 = simd_and(tmp14, r800_ffff_tmp9);
          cc_range_1d40_1d78_3 = simd_or(r800_ffff_tmp40, r800_ffff_tmp41);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e1_b5, carryQ.get_carry_in(26), sequence_e1_b5_adv));
          r800_ffff_tmp42 = simd_and(sequence_e1_b5_adv, cc_range_1d40_1d78_3);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp42);
          byte_b6 = simd_and(tmp14, tmp12);
          sequence_e1_b6 = simd_and(byte_e1_adv, byte_b6);
          sequence_e1_b6 = simd_and(byte_e1_adv, byte_b6);
          r800_ffff_tmp43 = simd_and(basis_bits.bit_3, r800_ffff_tmp37);
          r800_ffff_tmp44 = simd_or(basis_bits.bit_2, r800_ffff_tmp43);
          byte_range_9b_bf = simd_and(tmp7, r800_ffff_tmp44);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e1_b6, carryQ.get_carry_in(27), sequence_e1_b6_adv));
          r800_ffff_tmp45 = simd_and(sequence_e1_b6_adv, byte_range_9b_bf);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp45);
          r800_ffff_tmp46 = simd_andc(tmp11, tmp4);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp46);
          byte_81 = simd_and(r800_ffff_tmp18, r800_ffff_tmp14);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(28), r800_ffff_tmp47));
          sequence_e2_81 = simd_and(r800_ffff_tmp47, byte_81);
          carryQ.cq[29] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(29), byte_e2_adv));
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          r800_ffff_tmp48 = simd_or(r800_ffff_tmp14, r800_ffff_tmp26);
          cc_range_2071_207f_3 = simd_and(tmp14, r800_ffff_tmp48);
          carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(30), sequence_e2_81_adv));
          r800_ffff_tmp49 = simd_and(sequence_e2_81_adv, cc_range_2071_207f_3);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp49);
          byte_82 = simd_and(r800_ffff_tmp18, r800_ffff_tmp46);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          r800_ffff_tmp50 = simd_and(basis_bits.bit_5, tmp5);
          r800_ffff_tmp51 = simd_and(basis_bits.bit_4, r800_ffff_tmp50);
          byte_range_90_9c = simd_andc(tmp9, r800_ffff_tmp51);
          carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(31), sequence_e2_82_adv));
          r800_ffff_tmp52 = simd_and(sequence_e2_82_adv, byte_range_90_9c);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp52);
          sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
          sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
          r800_ffff_tmp53 = simd_andc(tmp15, basis_bits.bit_6);
          byte_range_bc_bd = simd_and(tmp14, r800_ffff_tmp53);
          carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(32), sequence_e2_b1_adv));
          r800_ffff_tmp54 = simd_and(sequence_e2_b1_adv, byte_range_bc_bd);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp54);
          sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
          sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
          byte_af = simd_and(r800_ffff_tmp1, r800_ffff_tmp26);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(33), sequence_e2_b5_adv));
          r800_ffff_tmp55 = simd_and(sequence_e2_b5_adv, byte_af);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp55);
          byte_b8 = simd_and(tmp14, r800_ffff_tmp9);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(34), sequence_e2_b8_adv));
          r800_ffff_tmp56 = simd_and(sequence_e2_b8_adv, byte_af);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp56);
          byte_e3 = simd_and(byte_range_e0_ef, r800_ffff_tmp22);
          byte_80 = simd_andc(r800_ffff_tmp18, tmp6);
          carryQ.cq[35] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(35), r800_ffff_tmp57));
          sequence_e3_80 = simd_and(r800_ffff_tmp57, byte_80);
          carryQ.cq[36] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(36), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          r800_ffff_tmp58 = simd_and(r800_ffff_tmp18, r800_ffff_tmp13);
          r800_ffff_tmp59 = simd_andc(tmp14, basis_bits.bit_4);
          r800_ffff_tmp60 = simd_not(basis_bits.bit_6);
          r800_ffff_tmp61 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp60), simd_andc(tmp5, basis_bits.bit_5));
          r800_ffff_tmp62 = simd_and(r800_ffff_tmp59, r800_ffff_tmp61);
          r800_ffff_tmp63 = simd_or(r800_ffff_tmp58, r800_ffff_tmp62);
          cc_range_3005_303b_3 = simd_or(r800_ffff_tmp63, byte_bb);
          carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(37), sequence_e3_80_adv));
          r800_ffff_tmp64 = simd_and(sequence_e3_80_adv, cc_range_3005_303b_3);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp64);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          r800_ffff_tmp65 = simd_and(tmp9, tmp15);
          r800_ffff_tmp66 = simd_not(basis_bits.bit_7);
          r800_ffff_tmp67 = simd_or(simd_and(basis_bits.bit_6, r800_ffff_tmp66), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          byte_range_9d_9e = simd_and(r800_ffff_tmp65, r800_ffff_tmp67);
          carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(38), sequence_e3_82_adv));
          r800_ffff_tmp68 = simd_and(sequence_e3_82_adv, byte_range_9d_9e);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp68);
          sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
          sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
          r800_ffff_tmp69 = simd_and(tmp14, tmp15);
          byte_range_bc_be = simd_andc(r800_ffff_tmp69, tmp18);
          carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(39), sequence_e3_83_adv));
          r800_ffff_tmp70 = simd_and(sequence_e3_83_adv, byte_range_bc_be);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp70);
          byte_ea = simd_and(byte_range_e0_ef, r800_ffff_tmp4);
          carryQ.cq[40] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(40), r800_ffff_tmp71));
          sequence_ea_80 = simd_and(r800_ffff_tmp71, byte_80);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(41), byte_ea_adv));
          sequence_ea_80 = simd_and(byte_ea_adv, byte_80);
          byte_95 = simd_and(tmp9, r800_ffff_tmp13);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_ea_80, carryQ.get_carry_in(42), sequence_ea_80_adv));
          r800_ffff_tmp72 = simd_and(sequence_ea_80_adv, byte_95);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp72);
          byte_93 = simd_and(tmp9, r800_ffff_tmp22);
          sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
          sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(43), sequence_ea_93_adv));
          r800_ffff_tmp73 = simd_and(sequence_ea_93_adv, byte_range_b8_bd);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp73);
          byte_98 = simd_and(tmp9, r800_ffff_tmp9);
          sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
          sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
          byte_8c = simd_and(r800_ffff_tmp18, r800_ffff_tmp24);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(44), sequence_ea_98_adv));
          r800_ffff_tmp74 = simd_and(sequence_ea_98_adv, byte_8c);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp74);
          byte_99 = simd_and(tmp9, r800_ffff_tmp16);
          sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
          sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
          byte_bf = simd_and(tmp14, r800_ffff_tmp26);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(45), sequence_ea_99_adv));
          r800_ffff_tmp75 = simd_and(sequence_ea_99_adv, byte_bf);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp75);
          byte_9c = simd_and(tmp9, r800_ffff_tmp24);
          sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
          sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
          r800_ffff_tmp76 = simd_and(basis_bits.bit_5, tmp18);
          r800_ffff_tmp77 = simd_or(basis_bits.bit_4, r800_ffff_tmp76);
          byte_range_97_9f = simd_and(tmp9, r800_ffff_tmp77);
          carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(46), sequence_ea_9c_adv));
          r800_ffff_tmp78 = simd_and(sequence_ea_9c_adv, byte_range_97_9f);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp78);
          r800_ffff_tmp79 = simd_and(tmp15, r800_ffff_tmp12);
          byte_9d = simd_and(tmp9, r800_ffff_tmp79);
          sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
          sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
          byte_b0 = simd_andc(tmp14, tmp6);
          carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(47), sequence_ea_9d_adv));
          r800_ffff_tmp80 = simd_and(sequence_ea_9d_adv, byte_b0);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp80);
          byte_9e = simd_and(tmp9, tmp16);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          byte_88 = simd_and(r800_ffff_tmp18, r800_ffff_tmp9);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(48), sequence_ea_9e_adv));
          r800_ffff_tmp81 = simd_and(sequence_ea_9e_adv, byte_88);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp81);
          sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
          sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
          r800_ffff_tmp82 = simd_andc(r800_ffff_tmp3, basis_bits.bit_6);
          byte_range_b8_b9 = simd_and(tmp14, r800_ffff_tmp82);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(49), sequence_ea_9f_adv));
          r800_ffff_tmp83 = simd_and(sequence_ea_9f_adv, byte_range_b8_b9);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp83);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          byte_8f = simd_and(r800_ffff_tmp18, r800_ffff_tmp26);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(50), sequence_ea_a7_adv));
          r800_ffff_tmp84 = simd_and(sequence_ea_a7_adv, byte_8f);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp84);
          byte_a9 = simd_and(r800_ffff_tmp1, r800_ffff_tmp16);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(51), sequence_ea_a9_adv));
          r800_ffff_tmp85 = simd_and(sequence_ea_a9_adv, byte_b0);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp85);
          byte_ab = simd_and(r800_ffff_tmp1, r800_ffff_tmp20);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          r800_ffff_tmp86 = simd_not(tmp5);
          r800_ffff_tmp87 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp86), simd_andc(tmp18, basis_bits.bit_5));
          r800_ffff_tmp88 = simd_and(r800_ffff_tmp59, r800_ffff_tmp87);
          cc_range_aadd_aaf3_3 = simd_or(byte_9d, r800_ffff_tmp88);
          carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(52), sequence_ea_ab_adv));
          r800_ffff_tmp89 = simd_and(sequence_ea_ab_adv, cc_range_aadd_aaf3_3);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp89);
          byte_ef = simd_and(byte_range_e0_ef, r800_ffff_tmp26);
          byte_bd = simd_and(tmp14, r800_ffff_tmp79);
          carryQ.cq[53] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(53), r800_ffff_tmp90));
          sequence_ef_bd = simd_and(r800_ffff_tmp90, byte_bd);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(54), byte_ef_adv));
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(55), sequence_ef_bd_adv));
          r800_ffff_tmp91 = simd_and(sequence_ef_bd_adv, byte_b0);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp91);
          sequence_ef_be = simd_and(byte_ef_adv, byte_be);
          sequence_ef_be = simd_and(byte_ef_adv, byte_be);
          r800_ffff_tmp92 = simd_and(tmp15, basis_bits.bit_6);
          byte_range_9e_9f = simd_and(tmp9, r800_ffff_tmp92);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(56), sequence_ef_be_adv));
          r800_ffff_tmp93 = simd_and(sequence_ef_be_adv, byte_range_9e_9f);
          struct_Lm.cc = simd_or(struct_Lm.cc, r800_ffff_tmp93);
        }
        else {
          carryQ.CarryDequeueEnqueue(12, 45);
        }
  }
  CarryArray<57, 0> carryQ;
  };

  struct Nd {
  Nd() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Nd & struct_Nd) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, byte_range_30_39, tmp6, tmp7, tmp8;
		BitBlock tmp9, tmp10, byte_f0, tmp11, tmp12, tmp13, tmp14, tmp15, byte_91;
		BitBlock tmp16, sequence_f0_91, byte_f0_adv, tmp17, tmp18, byte_81, tmp19;
		BitBlock sequence_f0_91_81, sequence_f0_91_adv, tmp20, tmp21, tmp22, tmp23;
		BitBlock byte_range_a6_af, sequence_f0_91_81_adv, tmp24, tmp25, tmp26, byte_83;
		BitBlock sequence_f0_91_83, tmp27, byte_range_b0_b9, sequence_f0_91_83_adv;
		BitBlock tmp28, tmp29, tmp30, byte_84, sequence_f0_91_84, byte_range_b6_bf;
		BitBlock sequence_f0_91_84_adv, tmp31, tmp32, byte_87, sequence_f0_91_87;
		BitBlock byte_range_90_99, sequence_f0_91_87_adv, tmp33, tmp34, tmp35, byte_9b;
		BitBlock sequence_f0_91_9b, byte_range_80_89, sequence_f0_91_9b_adv, tmp36;
		BitBlock tmp37, tmp38, byte_9d, sequence_f0_9d, tmp39, byte_9f, tmp40;
		BitBlock sequence_f0_9d_9f, sequence_f0_9d_adv, tmp41, tmp42, tmp43;
		BitBlock byte_range_8e_bf, sequence_f0_9d_9f_adv, tmp44, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, r80_7ff_tmp2, byte_d9, byte_range_a0_a9, byte_d9_adv;
		BitBlock r80_7ff_tmp3, byte_db, byte_db_adv, r80_7ff_tmp4, byte_df;
		BitBlock byte_df_adv, r80_7ff_tmp5, byte_range_e0_ef, byte_e0, r800_ffff_tmp1;
		BitBlock byte_a5, r800_ffff_tmp2, sequence_e0_a5, byte_e0_adv;
		BitBlock sequence_e0_a5_adv, r800_ffff_tmp3, byte_a7, sequence_e0_a7;
		BitBlock sequence_e0_a7_adv, r800_ffff_tmp4, r800_ffff_tmp5, byte_a9;
		BitBlock sequence_e0_a9, sequence_e0_a9_adv, r800_ffff_tmp6, byte_ab;
		BitBlock sequence_e0_ab, sequence_e0_ab_adv, r800_ffff_tmp7, byte_ad;
		BitBlock sequence_e0_ad, sequence_e0_ad_adv, r800_ffff_tmp8, byte_af;
		BitBlock sequence_e0_af, sequence_e0_af_adv, r800_ffff_tmp9, byte_b1;
		BitBlock sequence_e0_b1, sequence_e0_b1_adv, r800_ffff_tmp10, byte_b3;
		BitBlock sequence_e0_b3, sequence_e0_b3_adv, r800_ffff_tmp11, byte_b5;
		BitBlock sequence_e0_b5, sequence_e0_b5_adv, r800_ffff_tmp12, byte_b9;
		BitBlock sequence_e0_b9, sequence_e0_b9_adv, r800_ffff_tmp13, byte_bb;
		BitBlock sequence_e0_bb, sequence_e0_bb_adv, r800_ffff_tmp14, r800_ffff_tmp15;
		BitBlock byte_bc, sequence_e0_bc, sequence_e0_bc_adv, r800_ffff_tmp16, byte_e1;
		BitBlock r800_ffff_tmp17, sequence_e1_81, byte_e1_adv, sequence_e1_81_adv;
		BitBlock r800_ffff_tmp18, r800_ffff_tmp19, r800_ffff_tmp20, byte_82;
		BitBlock sequence_e1_82, sequence_e1_82_adv, r800_ffff_tmp21, sequence_e1_9f;
		BitBlock sequence_e1_9f_adv, r800_ffff_tmp22, byte_a0, sequence_e1_a0;
		BitBlock sequence_e1_a0_adv, r800_ffff_tmp23, sequence_e1_a5, byte_range_86_8f;
		BitBlock sequence_e1_a5_adv, r800_ffff_tmp24, sequence_e1_a7;
		BitBlock sequence_e1_a7_adv, r800_ffff_tmp25, r800_ffff_tmp26, byte_aa;
		BitBlock sequence_e1_aa, r800_ffff_tmp27, r800_ffff_tmp28;
		BitBlock cc_range_1a80_1a90_3, sequence_e1_aa_adv, r800_ffff_tmp29;
		BitBlock sequence_e1_ad, sequence_e1_ad_adv, r800_ffff_tmp30, r800_ffff_tmp31;
		BitBlock byte_ae, sequence_e1_ae, sequence_e1_ae_adv, r800_ffff_tmp32;
		BitBlock sequence_e1_b1, cc_range_1c40_1c50_3, sequence_e1_b1_adv;
		BitBlock r800_ffff_tmp33, byte_ea, r800_ffff_tmp34, byte_98, r800_ffff_tmp35;
		BitBlock sequence_ea_98, byte_ea_adv, sequence_ea_98_adv, r800_ffff_tmp36;
		BitBlock byte_a3, sequence_ea_a3, sequence_ea_a3_adv, r800_ffff_tmp37, byte_a4;
		BitBlock sequence_ea_a4, sequence_ea_a4_adv, r800_ffff_tmp38, sequence_ea_a7;
		BitBlock sequence_ea_a7_adv, r800_ffff_tmp39, sequence_ea_a9;
		BitBlock sequence_ea_a9_adv, r800_ffff_tmp40, sequence_ea_af;
		BitBlock sequence_ea_af_adv, r800_ffff_tmp41, byte_ef, r800_ffff_tmp42;
		BitBlock sequence_ef_bc, byte_ef_adv, sequence_ef_bc_adv, r800_ffff_tmp43;
		BitBlock byte_90, sequence_f0_90, byte_range_80_bf, tmp45;
		BitBlock sequence_f0_90_byte_range_80_bf, tmp46;
		BitBlock sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock r10000_10fff_tmp1, r10000_10fff_tmp2, r10000_10fff_tmp3, byte_92;
		BitBlock sequence_f0_90_92, sequence_f0_90_adv, r10000_10fff_tmp4;
		BitBlock sequence_f0_90_92_adv, r10000_10fff_tmp5;




        struct_Nd.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        byte_range_30_39 = simd_andc(tmp3, tmp5);
        struct_Nd.cc = simd_or(struct_Nd.cc, byte_range_30_39);
        tmp6 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp7 = simd_and(tmp6, tmp2);
        tmp8 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp9 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp10 = simd_or(tmp8, tmp9);
        byte_f0 = simd_andc(tmp7, tmp10);
        tmp11 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp13 = simd_and(tmp11, tmp12);
        tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp15 = simd_andc(tmp14, tmp8);
        byte_91 = simd_and(tmp13, tmp15);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp16));
        sequence_f0_91 = simd_and(tmp16, byte_91);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
        tmp17 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp18 = simd_andc(tmp11, tmp17);
        byte_81 = simd_and(tmp18, tmp15);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(2), tmp19));
        sequence_f0_91_81 = simd_and(tmp19, byte_81);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(3), sequence_f0_91_adv));
        sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
        tmp20 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp21 = simd_and(tmp11, tmp20);
        tmp22 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
        tmp23 = simd_or(basis_bits.bit_4, tmp22);
        byte_range_a6_af = simd_and(tmp21, tmp23);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(4), sequence_f0_91_81_adv));
        tmp24 = simd_and(sequence_f0_91_81_adv, byte_range_a6_af);
        struct_Nd.cc = simd_or(struct_Nd.cc, tmp24);
        tmp25 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp26 = simd_andc(tmp25, tmp8);
        byte_83 = simd_and(tmp18, tmp26);
        sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
        sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
        tmp27 = simd_and(tmp11, tmp2);
        byte_range_b0_b9 = simd_andc(tmp27, tmp5);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(5), sequence_f0_91_83_adv));
        tmp28 = simd_and(sequence_f0_91_83_adv, byte_range_b0_b9);
        struct_Nd.cc = simd_or(struct_Nd.cc, tmp28);
        tmp29 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp30 = simd_andc(tmp29, tmp9);
        byte_84 = simd_and(tmp18, tmp30);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        byte_range_b6_bf = simd_and(tmp27, tmp23);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(6), sequence_f0_91_84_adv));
        tmp31 = simd_and(sequence_f0_91_84_adv, byte_range_b6_bf);
        struct_Nd.cc = simd_or(struct_Nd.cc, tmp31);
        tmp32 = simd_and(tmp29, tmp25);
        byte_87 = simd_and(tmp18, tmp32);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        byte_range_90_99 = simd_andc(tmp13, tmp5);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(7), sequence_f0_91_87_adv));
        tmp33 = simd_and(sequence_f0_91_87_adv, byte_range_90_99);
        struct_Nd.cc = simd_or(struct_Nd.cc, tmp33);
        tmp34 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp35 = simd_and(tmp34, tmp25);
        byte_9b = simd_and(tmp13, tmp35);
        sequence_f0_91_9b = simd_and(sequence_f0_91_adv, byte_9b);
        sequence_f0_91_9b = simd_and(sequence_f0_91_adv, byte_9b);
        byte_range_80_89 = simd_andc(tmp18, tmp5);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9b, carryQ.get_carry_in(8), sequence_f0_91_9b_adv));
        tmp36 = simd_and(sequence_f0_91_9b_adv, byte_range_80_89);
        struct_Nd.cc = simd_or(struct_Nd.cc, tmp36);
        tmp37 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp38 = simd_and(tmp37, tmp14);
        byte_9d = simd_and(tmp13, tmp38);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        tmp39 = simd_and(tmp37, tmp25);
        byte_9f = simd_and(tmp13, tmp39);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(9), tmp40));
        sequence_f0_9d_9f = simd_and(tmp40, byte_9f);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(10), sequence_f0_9d_adv));
        sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
        tmp41 = simd_and(tmp37, basis_bits.bit_6);
        tmp42 = simd_or(basis_bits.bit_3, tmp41);
        tmp43 = simd_or(basis_bits.bit_2, tmp42);
        byte_range_8e_bf = simd_and(tmp11, tmp43);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(11), sequence_f0_9d_9f_adv));
        tmp44 = simd_and(sequence_f0_9d_9f_adv, byte_range_8e_bf);
        struct_Nd.cc = simd_or(struct_Nd.cc, tmp44);
        byte_range_c0_df = simd_andc(tmp6, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(12, 3))) {
          r80_7ff_tmp1 = simd_and(tmp6, tmp12);
          r80_7ff_tmp2 = simd_and(tmp34, tmp14);
          byte_d9 = simd_and(r80_7ff_tmp1, r80_7ff_tmp2);
          byte_range_a0_a9 = simd_andc(tmp21, tmp5);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(12), byte_d9_adv));
          r80_7ff_tmp3 = simd_and(byte_d9_adv, byte_range_a0_a9);
          struct_Nd.cc = simd_or(struct_Nd.cc, r80_7ff_tmp3);
          byte_db = simd_and(r80_7ff_tmp1, tmp35);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(13), byte_db_adv));
          r80_7ff_tmp4 = simd_and(byte_db_adv, byte_range_b0_b9);
          struct_Nd.cc = simd_or(struct_Nd.cc, r80_7ff_tmp4);
          byte_df = simd_and(r80_7ff_tmp1, tmp39);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(14), byte_df_adv));
          r80_7ff_tmp5 = simd_and(byte_df_adv, byte_range_80_89);
          struct_Nd.cc = simd_or(struct_Nd.cc, r80_7ff_tmp5);
        }
        else {
          carryQ.CarryDequeueEnqueue(12, 3);
        }
        byte_range_e0_ef = simd_and(tmp6, tmp20);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(15, 37))) {
          byte_e0 = simd_andc(byte_range_e0_ef, tmp10);
          r800_ffff_tmp1 = simd_and(tmp29, tmp14);
          byte_a5 = simd_and(tmp21, r800_ffff_tmp1);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(15), r800_ffff_tmp2));
          sequence_e0_a5 = simd_and(r800_ffff_tmp2, byte_a5);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(16), byte_e0_adv));
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(17), sequence_e0_a5_adv));
          r800_ffff_tmp3 = simd_and(sequence_e0_a5_adv, byte_range_a6_af);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp3);
          byte_a7 = simd_and(tmp21, tmp32);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(18), sequence_e0_a7_adv));
          r800_ffff_tmp4 = simd_and(sequence_e0_a7_adv, byte_range_a6_af);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp4);
          r800_ffff_tmp5 = simd_and(tmp34, tmp14);
          byte_a9 = simd_and(tmp21, r800_ffff_tmp5);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(19), sequence_e0_a9_adv));
          r800_ffff_tmp6 = simd_and(sequence_e0_a9_adv, byte_range_a6_af);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp6);
          byte_ab = simd_and(tmp21, tmp35);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(20), sequence_e0_ab_adv));
          r800_ffff_tmp7 = simd_and(sequence_e0_ab_adv, byte_range_a6_af);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp7);
          byte_ad = simd_and(tmp21, tmp38);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(21), sequence_e0_ad_adv));
          r800_ffff_tmp8 = simd_and(sequence_e0_ad_adv, byte_range_a6_af);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp8);
          byte_af = simd_and(tmp21, tmp39);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(22), sequence_e0_af_adv));
          r800_ffff_tmp9 = simd_and(sequence_e0_af_adv, byte_range_a6_af);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp9);
          byte_b1 = simd_and(tmp27, tmp15);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(23), sequence_e0_b1_adv));
          r800_ffff_tmp10 = simd_and(sequence_e0_b1_adv, byte_range_a6_af);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp10);
          byte_b3 = simd_and(tmp27, tmp26);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(24), sequence_e0_b3_adv));
          r800_ffff_tmp11 = simd_and(sequence_e0_b3_adv, byte_range_a6_af);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp11);
          byte_b5 = simd_and(tmp27, r800_ffff_tmp1);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(25), sequence_e0_b5_adv));
          r800_ffff_tmp12 = simd_and(sequence_e0_b5_adv, byte_range_a6_af);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp12);
          byte_b9 = simd_and(tmp27, r800_ffff_tmp5);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(26), sequence_e0_b9_adv));
          r800_ffff_tmp13 = simd_and(sequence_e0_b9_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp13);
          byte_bb = simd_and(tmp27, tmp35);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(27), sequence_e0_bb_adv));
          r800_ffff_tmp14 = simd_and(sequence_e0_bb_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp14);
          r800_ffff_tmp15 = simd_andc(tmp37, tmp9);
          byte_bc = simd_and(tmp27, r800_ffff_tmp15);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          byte_range_a0_a9 = simd_andc(tmp21, tmp5);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(28), sequence_e0_bc_adv));
          r800_ffff_tmp16 = simd_and(sequence_e0_bc_adv, byte_range_a0_a9);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp16);
          byte_e1 = simd_and(byte_range_e0_ef, tmp15);
          carryQ.cq[29] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(29), r800_ffff_tmp17));
          sequence_e1_81 = simd_and(r800_ffff_tmp17, byte_81);
          carryQ.cq[30] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(30), byte_e1_adv));
          sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
          carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(31), sequence_e1_81_adv));
          r800_ffff_tmp18 = simd_and(sequence_e1_81_adv, byte_range_80_89);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp18);
          r800_ffff_tmp19 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp20 = simd_andc(r800_ffff_tmp19, tmp8);
          byte_82 = simd_and(tmp18, r800_ffff_tmp20);
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(32), sequence_e1_82_adv));
          r800_ffff_tmp21 = simd_and(sequence_e1_82_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp21);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(33), sequence_e1_9f_adv));
          r800_ffff_tmp22 = simd_and(sequence_e1_9f_adv, byte_range_a0_a9);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp22);
          byte_a0 = simd_andc(tmp21, tmp10);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(34), sequence_e1_a0_adv));
          r800_ffff_tmp23 = simd_and(sequence_e1_a0_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp23);
          sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
          sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
          byte_range_86_8f = simd_and(tmp18, tmp23);
          carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(35), sequence_e1_a5_adv));
          r800_ffff_tmp24 = simd_and(sequence_e1_a5_adv, byte_range_86_8f);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp24);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(36), sequence_e1_a7_adv));
          r800_ffff_tmp25 = simd_and(sequence_e1_a7_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp25);
          r800_ffff_tmp26 = simd_and(tmp34, r800_ffff_tmp19);
          byte_aa = simd_and(tmp21, r800_ffff_tmp26);
          sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
          sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
          r800_ffff_tmp27 = simd_andc(tmp17, tmp12);
          r800_ffff_tmp28 = simd_andc(tmp11, r800_ffff_tmp27);
          cc_range_1a80_1a90_3 = simd_andc(r800_ffff_tmp28, tmp5);
          carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(37), sequence_e1_aa_adv));
          r800_ffff_tmp29 = simd_and(sequence_e1_aa_adv, cc_range_1a80_1a90_3);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp29);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(38), sequence_e1_ad_adv));
          r800_ffff_tmp30 = simd_and(sequence_e1_ad_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp30);
          r800_ffff_tmp31 = simd_and(tmp37, r800_ffff_tmp19);
          byte_ae = simd_and(tmp21, r800_ffff_tmp31);
          sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
          sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
          carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(39), sequence_e1_ae_adv));
          r800_ffff_tmp32 = simd_and(sequence_e1_ae_adv, byte_range_b0_b9);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp32);
          sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
          sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
          cc_range_1c40_1c50_3 = simd_andc(r800_ffff_tmp28, tmp5);
          carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(40), sequence_e1_b1_adv));
          r800_ffff_tmp33 = simd_and(sequence_e1_b1_adv, cc_range_1c40_1c50_3);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp33);
          byte_ea = simd_and(byte_range_e0_ef, r800_ffff_tmp26);
          r800_ffff_tmp34 = simd_andc(tmp34, tmp9);
          byte_98 = simd_and(tmp13, r800_ffff_tmp34);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(41), r800_ffff_tmp35));
          sequence_ea_98 = simd_and(r800_ffff_tmp35, byte_98);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(42), byte_ea_adv));
          sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(43), sequence_ea_98_adv));
          r800_ffff_tmp36 = simd_and(sequence_ea_98_adv, byte_range_a0_a9);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp36);
          byte_a3 = simd_and(tmp21, tmp26);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(44), sequence_ea_a3_adv));
          r800_ffff_tmp37 = simd_and(sequence_ea_a3_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp37);
          byte_a4 = simd_and(tmp21, tmp30);
          sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
          sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(45), sequence_ea_a4_adv));
          r800_ffff_tmp38 = simd_and(sequence_ea_a4_adv, byte_range_80_89);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp38);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(46), sequence_ea_a7_adv));
          r800_ffff_tmp39 = simd_and(sequence_ea_a7_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp39);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(47), sequence_ea_a9_adv));
          r800_ffff_tmp40 = simd_and(sequence_ea_a9_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp40);
          sequence_ea_af = simd_and(byte_ea_adv, byte_af);
          sequence_ea_af = simd_and(byte_ea_adv, byte_af);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(48), sequence_ea_af_adv));
          r800_ffff_tmp41 = simd_and(sequence_ea_af_adv, byte_range_b0_b9);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp41);
          byte_ef = simd_and(byte_range_e0_ef, tmp39);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(49), r800_ffff_tmp42));
          sequence_ef_bc = simd_and(r800_ffff_tmp42, byte_bc);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(50), byte_ef_adv));
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(51), sequence_ef_bc_adv));
          r800_ffff_tmp43 = simd_and(sequence_ef_bc_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp43);
        }
        else {
          carryQ.CarryDequeueEnqueue(15, 37);
        }
        byte_90 = simd_andc(tmp13, tmp10);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(52), tmp45));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp45, byte_range_80_bf);
        carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(53), tmp46));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp46, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(54, 2))) {
          r10000_10fff_tmp1 = simd_and(byte_range_80_bf, tmp12);
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          r10000_10fff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r10000_10fff_tmp3 = simd_andc(r10000_10fff_tmp2, tmp8);
          byte_92 = simd_and(r10000_10fff_tmp1, r10000_10fff_tmp3);
          sequence_f0_90_92 = simd_and(tmp45, byte_92);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(54), sequence_f0_90_adv));
          sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
          r10000_10fff_tmp4 = simd_and(byte_range_80_bf, tmp20);
          byte_range_a0_a9 = simd_andc(r10000_10fff_tmp4, tmp5);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(55), sequence_f0_90_92_adv));
          r10000_10fff_tmp5 = simd_and(sequence_f0_90_92_adv, byte_range_a0_a9);
          struct_Nd.cc = simd_or(struct_Nd.cc, r10000_10fff_tmp5);
        }
        else {
          carryQ.CarryDequeueEnqueue(54, 2);
        }
        carryQ.CarryQ_Adjust(56);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Nd & struct_Nd, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, byte_range_30_39, tmp6, tmp7, tmp8;
		BitBlock tmp9, tmp10, byte_f0, tmp11, tmp12, tmp13, tmp14, tmp15, byte_91;
		BitBlock tmp16, sequence_f0_91, byte_f0_adv, tmp17, tmp18, byte_81, tmp19;
		BitBlock sequence_f0_91_81, sequence_f0_91_adv, tmp20, tmp21, tmp22, tmp23;
		BitBlock byte_range_a6_af, sequence_f0_91_81_adv, tmp24, tmp25, tmp26, byte_83;
		BitBlock sequence_f0_91_83, tmp27, byte_range_b0_b9, sequence_f0_91_83_adv;
		BitBlock tmp28, tmp29, tmp30, byte_84, sequence_f0_91_84, byte_range_b6_bf;
		BitBlock sequence_f0_91_84_adv, tmp31, tmp32, byte_87, sequence_f0_91_87;
		BitBlock byte_range_90_99, sequence_f0_91_87_adv, tmp33, tmp34, tmp35, byte_9b;
		BitBlock sequence_f0_91_9b, byte_range_80_89, sequence_f0_91_9b_adv, tmp36;
		BitBlock tmp37, tmp38, byte_9d, sequence_f0_9d, tmp39, byte_9f, tmp40;
		BitBlock sequence_f0_9d_9f, sequence_f0_9d_adv, tmp41, tmp42, tmp43;
		BitBlock byte_range_8e_bf, sequence_f0_9d_9f_adv, tmp44, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, r80_7ff_tmp2, byte_d9, byte_range_a0_a9, byte_d9_adv;
		BitBlock r80_7ff_tmp3, byte_db, byte_db_adv, r80_7ff_tmp4, byte_df;
		BitBlock byte_df_adv, r80_7ff_tmp5, byte_range_e0_ef, byte_e0, r800_ffff_tmp1;
		BitBlock byte_a5, r800_ffff_tmp2, sequence_e0_a5, byte_e0_adv;
		BitBlock sequence_e0_a5_adv, r800_ffff_tmp3, byte_a7, sequence_e0_a7;
		BitBlock sequence_e0_a7_adv, r800_ffff_tmp4, r800_ffff_tmp5, byte_a9;
		BitBlock sequence_e0_a9, sequence_e0_a9_adv, r800_ffff_tmp6, byte_ab;
		BitBlock sequence_e0_ab, sequence_e0_ab_adv, r800_ffff_tmp7, byte_ad;
		BitBlock sequence_e0_ad, sequence_e0_ad_adv, r800_ffff_tmp8, byte_af;
		BitBlock sequence_e0_af, sequence_e0_af_adv, r800_ffff_tmp9, byte_b1;
		BitBlock sequence_e0_b1, sequence_e0_b1_adv, r800_ffff_tmp10, byte_b3;
		BitBlock sequence_e0_b3, sequence_e0_b3_adv, r800_ffff_tmp11, byte_b5;
		BitBlock sequence_e0_b5, sequence_e0_b5_adv, r800_ffff_tmp12, byte_b9;
		BitBlock sequence_e0_b9, sequence_e0_b9_adv, r800_ffff_tmp13, byte_bb;
		BitBlock sequence_e0_bb, sequence_e0_bb_adv, r800_ffff_tmp14, r800_ffff_tmp15;
		BitBlock byte_bc, sequence_e0_bc, sequence_e0_bc_adv, r800_ffff_tmp16, byte_e1;
		BitBlock r800_ffff_tmp17, sequence_e1_81, byte_e1_adv, sequence_e1_81_adv;
		BitBlock r800_ffff_tmp18, r800_ffff_tmp19, r800_ffff_tmp20, byte_82;
		BitBlock sequence_e1_82, sequence_e1_82_adv, r800_ffff_tmp21, sequence_e1_9f;
		BitBlock sequence_e1_9f_adv, r800_ffff_tmp22, byte_a0, sequence_e1_a0;
		BitBlock sequence_e1_a0_adv, r800_ffff_tmp23, sequence_e1_a5, byte_range_86_8f;
		BitBlock sequence_e1_a5_adv, r800_ffff_tmp24, sequence_e1_a7;
		BitBlock sequence_e1_a7_adv, r800_ffff_tmp25, r800_ffff_tmp26, byte_aa;
		BitBlock sequence_e1_aa, r800_ffff_tmp27, r800_ffff_tmp28;
		BitBlock cc_range_1a80_1a90_3, sequence_e1_aa_adv, r800_ffff_tmp29;
		BitBlock sequence_e1_ad, sequence_e1_ad_adv, r800_ffff_tmp30, r800_ffff_tmp31;
		BitBlock byte_ae, sequence_e1_ae, sequence_e1_ae_adv, r800_ffff_tmp32;
		BitBlock sequence_e1_b1, cc_range_1c40_1c50_3, sequence_e1_b1_adv;
		BitBlock r800_ffff_tmp33, byte_ea, r800_ffff_tmp34, byte_98, r800_ffff_tmp35;
		BitBlock sequence_ea_98, byte_ea_adv, sequence_ea_98_adv, r800_ffff_tmp36;
		BitBlock byte_a3, sequence_ea_a3, sequence_ea_a3_adv, r800_ffff_tmp37, byte_a4;
		BitBlock sequence_ea_a4, sequence_ea_a4_adv, r800_ffff_tmp38, sequence_ea_a7;
		BitBlock sequence_ea_a7_adv, r800_ffff_tmp39, sequence_ea_a9;
		BitBlock sequence_ea_a9_adv, r800_ffff_tmp40, sequence_ea_af;
		BitBlock sequence_ea_af_adv, r800_ffff_tmp41, byte_ef, r800_ffff_tmp42;
		BitBlock sequence_ef_bc, byte_ef_adv, sequence_ef_bc_adv, r800_ffff_tmp43;
		BitBlock byte_90, sequence_f0_90, byte_range_80_bf, tmp45;
		BitBlock sequence_f0_90_byte_range_80_bf, tmp46;
		BitBlock sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock r10000_10fff_tmp1, r10000_10fff_tmp2, r10000_10fff_tmp3, byte_92;
		BitBlock sequence_f0_90_92, sequence_f0_90_adv, r10000_10fff_tmp4;
		BitBlock sequence_f0_90_92_adv, r10000_10fff_tmp5;




        struct_Nd.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        byte_range_30_39 = simd_andc(tmp3, tmp5);
        struct_Nd.cc = simd_or(struct_Nd.cc, byte_range_30_39);
        tmp6 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp7 = simd_and(tmp6, tmp2);
        tmp8 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp9 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp10 = simd_or(tmp8, tmp9);
        byte_f0 = simd_andc(tmp7, tmp10);
        tmp11 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp13 = simd_and(tmp11, tmp12);
        tmp14 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp15 = simd_andc(tmp14, tmp8);
        byte_91 = simd_and(tmp13, tmp15);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp16));
        sequence_f0_91 = simd_and(tmp16, byte_91);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
        tmp17 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp18 = simd_andc(tmp11, tmp17);
        byte_81 = simd_and(tmp18, tmp15);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(2), tmp19));
        sequence_f0_91_81 = simd_and(tmp19, byte_81);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(3), sequence_f0_91_adv));
        sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
        tmp20 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp21 = simd_and(tmp11, tmp20);
        tmp22 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
        tmp23 = simd_or(basis_bits.bit_4, tmp22);
        byte_range_a6_af = simd_and(tmp21, tmp23);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(4), sequence_f0_91_81_adv));
        tmp24 = simd_and(sequence_f0_91_81_adv, byte_range_a6_af);
        struct_Nd.cc = simd_or(struct_Nd.cc, tmp24);
        tmp25 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp26 = simd_andc(tmp25, tmp8);
        byte_83 = simd_and(tmp18, tmp26);
        sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
        sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
        tmp27 = simd_and(tmp11, tmp2);
        byte_range_b0_b9 = simd_andc(tmp27, tmp5);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(5), sequence_f0_91_83_adv));
        tmp28 = simd_and(sequence_f0_91_83_adv, byte_range_b0_b9);
        struct_Nd.cc = simd_or(struct_Nd.cc, tmp28);
        tmp29 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp30 = simd_andc(tmp29, tmp9);
        byte_84 = simd_and(tmp18, tmp30);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        byte_range_b6_bf = simd_and(tmp27, tmp23);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(6), sequence_f0_91_84_adv));
        tmp31 = simd_and(sequence_f0_91_84_adv, byte_range_b6_bf);
        struct_Nd.cc = simd_or(struct_Nd.cc, tmp31);
        tmp32 = simd_and(tmp29, tmp25);
        byte_87 = simd_and(tmp18, tmp32);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        byte_range_90_99 = simd_andc(tmp13, tmp5);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(7), sequence_f0_91_87_adv));
        tmp33 = simd_and(sequence_f0_91_87_adv, byte_range_90_99);
        struct_Nd.cc = simd_or(struct_Nd.cc, tmp33);
        tmp34 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp35 = simd_and(tmp34, tmp25);
        byte_9b = simd_and(tmp13, tmp35);
        sequence_f0_91_9b = simd_and(sequence_f0_91_adv, byte_9b);
        sequence_f0_91_9b = simd_and(sequence_f0_91_adv, byte_9b);
        byte_range_80_89 = simd_andc(tmp18, tmp5);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9b, carryQ.get_carry_in(8), sequence_f0_91_9b_adv));
        tmp36 = simd_and(sequence_f0_91_9b_adv, byte_range_80_89);
        struct_Nd.cc = simd_or(struct_Nd.cc, tmp36);
        tmp37 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp38 = simd_and(tmp37, tmp14);
        byte_9d = simd_and(tmp13, tmp38);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        tmp39 = simd_and(tmp37, tmp25);
        byte_9f = simd_and(tmp13, tmp39);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(9), tmp40));
        sequence_f0_9d_9f = simd_and(tmp40, byte_9f);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(10), sequence_f0_9d_adv));
        sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
        tmp41 = simd_and(tmp37, basis_bits.bit_6);
        tmp42 = simd_or(basis_bits.bit_3, tmp41);
        tmp43 = simd_or(basis_bits.bit_2, tmp42);
        byte_range_8e_bf = simd_and(tmp11, tmp43);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(11), sequence_f0_9d_9f_adv));
        tmp44 = simd_and(sequence_f0_9d_9f_adv, byte_range_8e_bf);
        struct_Nd.cc = simd_or(struct_Nd.cc, tmp44);
        byte_range_c0_df = simd_andc(tmp6, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(12, 3))) {
          r80_7ff_tmp1 = simd_and(tmp6, tmp12);
          r80_7ff_tmp2 = simd_and(tmp34, tmp14);
          byte_d9 = simd_and(r80_7ff_tmp1, r80_7ff_tmp2);
          byte_range_a0_a9 = simd_andc(tmp21, tmp5);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(12), byte_d9_adv));
          r80_7ff_tmp3 = simd_and(byte_d9_adv, byte_range_a0_a9);
          struct_Nd.cc = simd_or(struct_Nd.cc, r80_7ff_tmp3);
          byte_db = simd_and(r80_7ff_tmp1, tmp35);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(13), byte_db_adv));
          r80_7ff_tmp4 = simd_and(byte_db_adv, byte_range_b0_b9);
          struct_Nd.cc = simd_or(struct_Nd.cc, r80_7ff_tmp4);
          byte_df = simd_and(r80_7ff_tmp1, tmp39);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(14), byte_df_adv));
          r80_7ff_tmp5 = simd_and(byte_df_adv, byte_range_80_89);
          struct_Nd.cc = simd_or(struct_Nd.cc, r80_7ff_tmp5);
        }
        else {
          carryQ.CarryDequeueEnqueue(12, 3);
        }
        byte_range_e0_ef = simd_and(tmp6, tmp20);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(15, 37))) {
          byte_e0 = simd_andc(byte_range_e0_ef, tmp10);
          r800_ffff_tmp1 = simd_and(tmp29, tmp14);
          byte_a5 = simd_and(tmp21, r800_ffff_tmp1);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(15), r800_ffff_tmp2));
          sequence_e0_a5 = simd_and(r800_ffff_tmp2, byte_a5);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(16), byte_e0_adv));
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(17), sequence_e0_a5_adv));
          r800_ffff_tmp3 = simd_and(sequence_e0_a5_adv, byte_range_a6_af);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp3);
          byte_a7 = simd_and(tmp21, tmp32);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(18), sequence_e0_a7_adv));
          r800_ffff_tmp4 = simd_and(sequence_e0_a7_adv, byte_range_a6_af);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp4);
          r800_ffff_tmp5 = simd_and(tmp34, tmp14);
          byte_a9 = simd_and(tmp21, r800_ffff_tmp5);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(19), sequence_e0_a9_adv));
          r800_ffff_tmp6 = simd_and(sequence_e0_a9_adv, byte_range_a6_af);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp6);
          byte_ab = simd_and(tmp21, tmp35);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(20), sequence_e0_ab_adv));
          r800_ffff_tmp7 = simd_and(sequence_e0_ab_adv, byte_range_a6_af);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp7);
          byte_ad = simd_and(tmp21, tmp38);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(21), sequence_e0_ad_adv));
          r800_ffff_tmp8 = simd_and(sequence_e0_ad_adv, byte_range_a6_af);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp8);
          byte_af = simd_and(tmp21, tmp39);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(22), sequence_e0_af_adv));
          r800_ffff_tmp9 = simd_and(sequence_e0_af_adv, byte_range_a6_af);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp9);
          byte_b1 = simd_and(tmp27, tmp15);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(23), sequence_e0_b1_adv));
          r800_ffff_tmp10 = simd_and(sequence_e0_b1_adv, byte_range_a6_af);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp10);
          byte_b3 = simd_and(tmp27, tmp26);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(24), sequence_e0_b3_adv));
          r800_ffff_tmp11 = simd_and(sequence_e0_b3_adv, byte_range_a6_af);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp11);
          byte_b5 = simd_and(tmp27, r800_ffff_tmp1);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(25), sequence_e0_b5_adv));
          r800_ffff_tmp12 = simd_and(sequence_e0_b5_adv, byte_range_a6_af);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp12);
          byte_b9 = simd_and(tmp27, r800_ffff_tmp5);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(26), sequence_e0_b9_adv));
          r800_ffff_tmp13 = simd_and(sequence_e0_b9_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp13);
          byte_bb = simd_and(tmp27, tmp35);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(27), sequence_e0_bb_adv));
          r800_ffff_tmp14 = simd_and(sequence_e0_bb_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp14);
          r800_ffff_tmp15 = simd_andc(tmp37, tmp9);
          byte_bc = simd_and(tmp27, r800_ffff_tmp15);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          byte_range_a0_a9 = simd_andc(tmp21, tmp5);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(28), sequence_e0_bc_adv));
          r800_ffff_tmp16 = simd_and(sequence_e0_bc_adv, byte_range_a0_a9);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp16);
          byte_e1 = simd_and(byte_range_e0_ef, tmp15);
          carryQ.cq[29] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(29), r800_ffff_tmp17));
          sequence_e1_81 = simd_and(r800_ffff_tmp17, byte_81);
          carryQ.cq[30] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(30), byte_e1_adv));
          sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
          carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(31), sequence_e1_81_adv));
          r800_ffff_tmp18 = simd_and(sequence_e1_81_adv, byte_range_80_89);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp18);
          r800_ffff_tmp19 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp20 = simd_andc(r800_ffff_tmp19, tmp8);
          byte_82 = simd_and(tmp18, r800_ffff_tmp20);
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(32), sequence_e1_82_adv));
          r800_ffff_tmp21 = simd_and(sequence_e1_82_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp21);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(33), sequence_e1_9f_adv));
          r800_ffff_tmp22 = simd_and(sequence_e1_9f_adv, byte_range_a0_a9);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp22);
          byte_a0 = simd_andc(tmp21, tmp10);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(34), sequence_e1_a0_adv));
          r800_ffff_tmp23 = simd_and(sequence_e1_a0_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp23);
          sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
          sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
          byte_range_86_8f = simd_and(tmp18, tmp23);
          carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(35), sequence_e1_a5_adv));
          r800_ffff_tmp24 = simd_and(sequence_e1_a5_adv, byte_range_86_8f);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp24);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(36), sequence_e1_a7_adv));
          r800_ffff_tmp25 = simd_and(sequence_e1_a7_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp25);
          r800_ffff_tmp26 = simd_and(tmp34, r800_ffff_tmp19);
          byte_aa = simd_and(tmp21, r800_ffff_tmp26);
          sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
          sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
          r800_ffff_tmp27 = simd_andc(tmp17, tmp12);
          r800_ffff_tmp28 = simd_andc(tmp11, r800_ffff_tmp27);
          cc_range_1a80_1a90_3 = simd_andc(r800_ffff_tmp28, tmp5);
          carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(37), sequence_e1_aa_adv));
          r800_ffff_tmp29 = simd_and(sequence_e1_aa_adv, cc_range_1a80_1a90_3);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp29);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(38), sequence_e1_ad_adv));
          r800_ffff_tmp30 = simd_and(sequence_e1_ad_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp30);
          r800_ffff_tmp31 = simd_and(tmp37, r800_ffff_tmp19);
          byte_ae = simd_and(tmp21, r800_ffff_tmp31);
          sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
          sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
          carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(39), sequence_e1_ae_adv));
          r800_ffff_tmp32 = simd_and(sequence_e1_ae_adv, byte_range_b0_b9);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp32);
          sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
          sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
          cc_range_1c40_1c50_3 = simd_andc(r800_ffff_tmp28, tmp5);
          carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(40), sequence_e1_b1_adv));
          r800_ffff_tmp33 = simd_and(sequence_e1_b1_adv, cc_range_1c40_1c50_3);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp33);
          byte_ea = simd_and(byte_range_e0_ef, r800_ffff_tmp26);
          r800_ffff_tmp34 = simd_andc(tmp34, tmp9);
          byte_98 = simd_and(tmp13, r800_ffff_tmp34);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(41), r800_ffff_tmp35));
          sequence_ea_98 = simd_and(r800_ffff_tmp35, byte_98);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(42), byte_ea_adv));
          sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(43), sequence_ea_98_adv));
          r800_ffff_tmp36 = simd_and(sequence_ea_98_adv, byte_range_a0_a9);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp36);
          byte_a3 = simd_and(tmp21, tmp26);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(44), sequence_ea_a3_adv));
          r800_ffff_tmp37 = simd_and(sequence_ea_a3_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp37);
          byte_a4 = simd_and(tmp21, tmp30);
          sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
          sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(45), sequence_ea_a4_adv));
          r800_ffff_tmp38 = simd_and(sequence_ea_a4_adv, byte_range_80_89);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp38);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(46), sequence_ea_a7_adv));
          r800_ffff_tmp39 = simd_and(sequence_ea_a7_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp39);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(47), sequence_ea_a9_adv));
          r800_ffff_tmp40 = simd_and(sequence_ea_a9_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp40);
          sequence_ea_af = simd_and(byte_ea_adv, byte_af);
          sequence_ea_af = simd_and(byte_ea_adv, byte_af);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(48), sequence_ea_af_adv));
          r800_ffff_tmp41 = simd_and(sequence_ea_af_adv, byte_range_b0_b9);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp41);
          byte_ef = simd_and(byte_range_e0_ef, tmp39);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(49), r800_ffff_tmp42));
          sequence_ef_bc = simd_and(r800_ffff_tmp42, byte_bc);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(50), byte_ef_adv));
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(51), sequence_ef_bc_adv));
          r800_ffff_tmp43 = simd_and(sequence_ef_bc_adv, byte_range_90_99);
          struct_Nd.cc = simd_or(struct_Nd.cc, r800_ffff_tmp43);
        }
        else {
          carryQ.CarryDequeueEnqueue(15, 37);
        }
        byte_90 = simd_andc(tmp13, tmp10);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(52), tmp45));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp45, byte_range_80_bf);
        carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(53), tmp46));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp46, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(54, 2))) {
          r10000_10fff_tmp1 = simd_and(byte_range_80_bf, tmp12);
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          r10000_10fff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r10000_10fff_tmp3 = simd_andc(r10000_10fff_tmp2, tmp8);
          byte_92 = simd_and(r10000_10fff_tmp1, r10000_10fff_tmp3);
          sequence_f0_90_92 = simd_and(tmp45, byte_92);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(54), sequence_f0_90_adv));
          sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
          r10000_10fff_tmp4 = simd_and(byte_range_80_bf, tmp20);
          byte_range_a0_a9 = simd_andc(r10000_10fff_tmp4, tmp5);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(55), sequence_f0_90_92_adv));
          r10000_10fff_tmp5 = simd_and(sequence_f0_90_92_adv, byte_range_a0_a9);
          struct_Nd.cc = simd_or(struct_Nd.cc, r10000_10fff_tmp5);
        }
        else {
          carryQ.CarryDequeueEnqueue(54, 2);
        }
  }
  CarryArray<56, 0> carryQ;
  };

  struct Pc {
  Pc() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Pc & struct_Pc) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_5f, tmp7, tmp8;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, r800_ffff_tmp2, r800_ffff_tmp3;
		BitBlock byte_e2, r800_ffff_tmp4, r800_ffff_tmp5, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, r800_ffff_tmp8, byte_80, r800_ffff_tmp9;
		BitBlock sequence_e2_80, byte_e2_adv, r800_ffff_tmp10, r800_ffff_tmp11;
		BitBlock byte_bf, sequence_e2_80_adv, r800_ffff_tmp12, r800_ffff_tmp13;
		BitBlock r800_ffff_tmp14, byte_81, sequence_e2_81, r800_ffff_tmp15;
		BitBlock r800_ffff_tmp16, r800_ffff_tmp17, r800_ffff_tmp18;
		BitBlock cc_range_2040_2054_3, sequence_e2_81_adv, r800_ffff_tmp19, byte_ef;
		BitBlock r800_ffff_tmp20, r800_ffff_tmp21, byte_b8, r800_ffff_tmp22;
		BitBlock sequence_ef_b8, byte_ef_adv, r800_ffff_tmp23, r800_ffff_tmp24;
		BitBlock r800_ffff_tmp25, byte_range_b3_b4, sequence_ef_b8_adv;
		BitBlock r800_ffff_tmp26, r800_ffff_tmp27, byte_b9, sequence_ef_b9;
		BitBlock r800_ffff_tmp28, byte_range_8d_8f, sequence_ef_b9_adv;
		BitBlock r800_ffff_tmp29, r800_ffff_tmp30, byte_bc, sequence_ef_bc;
		BitBlock sequence_ef_bc_adv, r800_ffff_tmp31;




        struct_Pc.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_and(tmp4, tmp5);
        byte_5f = simd_and(tmp3, tmp6);
        struct_Pc.cc = simd_or(struct_Pc.cc, byte_5f);
        tmp7 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp7, tmp8);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 9))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp3 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp3);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp6 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp8 = simd_or(r800_ffff_tmp1, r800_ffff_tmp7);
          byte_80 = simd_andc(r800_ffff_tmp6, r800_ffff_tmp8);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(0), r800_ffff_tmp9));
          sequence_e2_80 = simd_and(r800_ffff_tmp9, byte_80);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp11 = simd_and(r800_ffff_tmp4, r800_ffff_tmp10);
          byte_bf = simd_and(r800_ffff_tmp11, tmp6);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(2), sequence_e2_80_adv));
          r800_ffff_tmp12 = simd_and(sequence_e2_80_adv, byte_bf);
          struct_Pc.cc = simd_or(struct_Pc.cc, r800_ffff_tmp12);
          r800_ffff_tmp13 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp14 = simd_andc(r800_ffff_tmp13, r800_ffff_tmp1);
          byte_81 = simd_and(r800_ffff_tmp6, r800_ffff_tmp14);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          r800_ffff_tmp15 = simd_and(r800_ffff_tmp4, tmp2);
          r800_ffff_tmp16 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r800_ffff_tmp17 = simd_andc(r800_ffff_tmp16, r800_ffff_tmp7);
          r800_ffff_tmp18 = simd_and(r800_ffff_tmp15, r800_ffff_tmp17);
          cc_range_2040_2054_3 = simd_or(byte_80, r800_ffff_tmp18);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(3), sequence_e2_81_adv));
          r800_ffff_tmp19 = simd_and(sequence_e2_81_adv, cc_range_2040_2054_3);
          struct_Pc.cc = simd_or(struct_Pc.cc, r800_ffff_tmp19);
          byte_ef = simd_and(byte_range_e0_ef, tmp6);
          r800_ffff_tmp20 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp21 = simd_andc(r800_ffff_tmp20, r800_ffff_tmp7);
          byte_b8 = simd_and(r800_ffff_tmp11, r800_ffff_tmp21);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(4), r800_ffff_tmp22));
          sequence_ef_b8 = simd_and(r800_ffff_tmp22, byte_b8);
          carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(5), byte_ef_adv));
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          r800_ffff_tmp23 = simd_andc(r800_ffff_tmp11, basis_bits.bit_4);
          r800_ffff_tmp24 = simd_not(r800_ffff_tmp7);
          r800_ffff_tmp25 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp24), simd_andc(tmp5, basis_bits.bit_5));
          byte_range_b3_b4 = simd_and(r800_ffff_tmp23, r800_ffff_tmp25);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(6), sequence_ef_b8_adv));
          r800_ffff_tmp26 = simd_and(sequence_ef_b8_adv, byte_range_b3_b4);
          struct_Pc.cc = simd_or(struct_Pc.cc, r800_ffff_tmp26);
          r800_ffff_tmp27 = simd_and(r800_ffff_tmp20, r800_ffff_tmp13);
          byte_b9 = simd_and(r800_ffff_tmp11, r800_ffff_tmp27);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          r800_ffff_tmp28 = simd_and(r800_ffff_tmp6, tmp4);
          byte_range_8d_8f = simd_and(r800_ffff_tmp28, r800_ffff_tmp7);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(7), sequence_ef_b9_adv));
          r800_ffff_tmp29 = simd_and(sequence_ef_b9_adv, byte_range_8d_8f);
          struct_Pc.cc = simd_or(struct_Pc.cc, r800_ffff_tmp29);
          r800_ffff_tmp30 = simd_andc(tmp4, r800_ffff_tmp7);
          byte_bc = simd_and(r800_ffff_tmp11, r800_ffff_tmp30);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(8), sequence_ef_bc_adv));
          r800_ffff_tmp31 = simd_and(sequence_ef_bc_adv, byte_bf);
          struct_Pc.cc = simd_or(struct_Pc.cc, r800_ffff_tmp31);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 9);
        }
        carryQ.CarryQ_Adjust(9);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Pc & struct_Pc, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_5f, tmp7, tmp8;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, r800_ffff_tmp2, r800_ffff_tmp3;
		BitBlock byte_e2, r800_ffff_tmp4, r800_ffff_tmp5, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, r800_ffff_tmp8, byte_80, r800_ffff_tmp9;
		BitBlock sequence_e2_80, byte_e2_adv, r800_ffff_tmp10, r800_ffff_tmp11;
		BitBlock byte_bf, sequence_e2_80_adv, r800_ffff_tmp12, r800_ffff_tmp13;
		BitBlock r800_ffff_tmp14, byte_81, sequence_e2_81, r800_ffff_tmp15;
		BitBlock r800_ffff_tmp16, r800_ffff_tmp17, r800_ffff_tmp18;
		BitBlock cc_range_2040_2054_3, sequence_e2_81_adv, r800_ffff_tmp19, byte_ef;
		BitBlock r800_ffff_tmp20, r800_ffff_tmp21, byte_b8, r800_ffff_tmp22;
		BitBlock sequence_ef_b8, byte_ef_adv, r800_ffff_tmp23, r800_ffff_tmp24;
		BitBlock r800_ffff_tmp25, byte_range_b3_b4, sequence_ef_b8_adv;
		BitBlock r800_ffff_tmp26, r800_ffff_tmp27, byte_b9, sequence_ef_b9;
		BitBlock r800_ffff_tmp28, byte_range_8d_8f, sequence_ef_b9_adv;
		BitBlock r800_ffff_tmp29, r800_ffff_tmp30, byte_bc, sequence_ef_bc;
		BitBlock sequence_ef_bc_adv, r800_ffff_tmp31;




        struct_Pc.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_and(tmp4, tmp5);
        byte_5f = simd_and(tmp3, tmp6);
        struct_Pc.cc = simd_or(struct_Pc.cc, byte_5f);
        tmp7 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp7, tmp8);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 9))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp3 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp3);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp6 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp8 = simd_or(r800_ffff_tmp1, r800_ffff_tmp7);
          byte_80 = simd_andc(r800_ffff_tmp6, r800_ffff_tmp8);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(0), r800_ffff_tmp9));
          sequence_e2_80 = simd_and(r800_ffff_tmp9, byte_80);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp10 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp11 = simd_and(r800_ffff_tmp4, r800_ffff_tmp10);
          byte_bf = simd_and(r800_ffff_tmp11, tmp6);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(2), sequence_e2_80_adv));
          r800_ffff_tmp12 = simd_and(sequence_e2_80_adv, byte_bf);
          struct_Pc.cc = simd_or(struct_Pc.cc, r800_ffff_tmp12);
          r800_ffff_tmp13 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp14 = simd_andc(r800_ffff_tmp13, r800_ffff_tmp1);
          byte_81 = simd_and(r800_ffff_tmp6, r800_ffff_tmp14);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          r800_ffff_tmp15 = simd_and(r800_ffff_tmp4, tmp2);
          r800_ffff_tmp16 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r800_ffff_tmp17 = simd_andc(r800_ffff_tmp16, r800_ffff_tmp7);
          r800_ffff_tmp18 = simd_and(r800_ffff_tmp15, r800_ffff_tmp17);
          cc_range_2040_2054_3 = simd_or(byte_80, r800_ffff_tmp18);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(3), sequence_e2_81_adv));
          r800_ffff_tmp19 = simd_and(sequence_e2_81_adv, cc_range_2040_2054_3);
          struct_Pc.cc = simd_or(struct_Pc.cc, r800_ffff_tmp19);
          byte_ef = simd_and(byte_range_e0_ef, tmp6);
          r800_ffff_tmp20 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp21 = simd_andc(r800_ffff_tmp20, r800_ffff_tmp7);
          byte_b8 = simd_and(r800_ffff_tmp11, r800_ffff_tmp21);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(4), r800_ffff_tmp22));
          sequence_ef_b8 = simd_and(r800_ffff_tmp22, byte_b8);
          carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(5), byte_ef_adv));
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          r800_ffff_tmp23 = simd_andc(r800_ffff_tmp11, basis_bits.bit_4);
          r800_ffff_tmp24 = simd_not(r800_ffff_tmp7);
          r800_ffff_tmp25 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp24), simd_andc(tmp5, basis_bits.bit_5));
          byte_range_b3_b4 = simd_and(r800_ffff_tmp23, r800_ffff_tmp25);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(6), sequence_ef_b8_adv));
          r800_ffff_tmp26 = simd_and(sequence_ef_b8_adv, byte_range_b3_b4);
          struct_Pc.cc = simd_or(struct_Pc.cc, r800_ffff_tmp26);
          r800_ffff_tmp27 = simd_and(r800_ffff_tmp20, r800_ffff_tmp13);
          byte_b9 = simd_and(r800_ffff_tmp11, r800_ffff_tmp27);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          r800_ffff_tmp28 = simd_and(r800_ffff_tmp6, tmp4);
          byte_range_8d_8f = simd_and(r800_ffff_tmp28, r800_ffff_tmp7);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(7), sequence_ef_b9_adv));
          r800_ffff_tmp29 = simd_and(sequence_ef_b9_adv, byte_range_8d_8f);
          struct_Pc.cc = simd_or(struct_Pc.cc, r800_ffff_tmp29);
          r800_ffff_tmp30 = simd_andc(tmp4, r800_ffff_tmp7);
          byte_bc = simd_and(r800_ffff_tmp11, r800_ffff_tmp30);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(8), sequence_ef_bc_adv));
          r800_ffff_tmp31 = simd_and(sequence_ef_bc_adv, byte_bf);
          struct_Pc.cc = simd_or(struct_Pc.cc, r800_ffff_tmp31);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 9);
        }
  }
  CarryArray<9, 0> carryQ;
  };

  struct Lt {
  Lt() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Lt & struct_Lt) {
		BitBlock tmp1, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, byte_c7, r80_7ff_tmp6, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10, r80_7ff_tmp11;
		BitBlock r80_7ff_tmp12, r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15;
		BitBlock r80_7ff_tmp16, r80_7ff_tmp17, r80_7ff_tmp18, r80_7ff_tmp19;
		BitBlock r80_7ff_tmp20, r80_7ff_tmp21, r80_7ff_tmp22, cc_range_1c5_1f2_2;
		BitBlock byte_c7_adv, r80_7ff_tmp23, tmp2, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, byte_e1, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, byte_be, r800_ffff_tmp10, sequence_e1_be, byte_e1_adv;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13, r800_ffff_tmp14;
		BitBlock r800_ffff_tmp15, r800_ffff_tmp16, r800_ffff_tmp17, r800_ffff_tmp18;
		BitBlock r800_ffff_tmp19, cc_range_1f88_1fbc_3, sequence_e1_be_adv;
		BitBlock r800_ffff_tmp20, r800_ffff_tmp21, r800_ffff_tmp22, byte_bf;
		BitBlock sequence_e1_bf, r800_ffff_tmp23, r800_ffff_tmp24;
		BitBlock cc_range_1fcc_1ffc_3, sequence_e1_bf_adv, r800_ffff_tmp25;




        struct_Lt.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
          r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp2 = simd_andc(tmp1, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r80_7ff_tmp4 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp5 = simd_and(r80_7ff_tmp3, r80_7ff_tmp4);
          byte_c7 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
          r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r80_7ff_tmp7 = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
          r80_7ff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r80_7ff_tmp9 = simd_and(r80_7ff_tmp3, r80_7ff_tmp8);
          r80_7ff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp11 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp12 = simd_andc(r80_7ff_tmp10, r80_7ff_tmp11);
          r80_7ff_tmp13 = simd_or(r80_7ff_tmp9, r80_7ff_tmp12);
          r80_7ff_tmp14 = simd_and(r80_7ff_tmp10, r80_7ff_tmp4);
          r80_7ff_tmp15 = simd_or(r80_7ff_tmp13, r80_7ff_tmp14);
          r80_7ff_tmp16 = simd_and(r80_7ff_tmp7, r80_7ff_tmp15);
          r80_7ff_tmp17 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp18 = simd_and(r80_7ff_tmp6, r80_7ff_tmp17);
          r80_7ff_tmp19 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp20 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp21 = simd_andc(r80_7ff_tmp20, r80_7ff_tmp19);
          r80_7ff_tmp22 = simd_and(r80_7ff_tmp18, r80_7ff_tmp21);
          cc_range_1c5_1f2_2 = simd_or(r80_7ff_tmp16, r80_7ff_tmp22);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(0), byte_c7_adv));
          r80_7ff_tmp23 = simd_and(byte_c7_adv, cc_range_1c5_1f2_2);
          struct_Lt.cc = simd_or(struct_Lt.cc, r80_7ff_tmp23);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 4))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp3 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp1);
          byte_e1 = simd_and(byte_range_e0_ef, r800_ffff_tmp3);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp6 = simd_and(r800_ffff_tmp4, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp9 = simd_and(r800_ffff_tmp7, r800_ffff_tmp8);
          byte_be = simd_and(r800_ffff_tmp6, r800_ffff_tmp9);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r800_ffff_tmp10));
          sequence_e1_be = simd_and(r800_ffff_tmp10, byte_be);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(2), byte_e1_adv));
          sequence_e1_be = simd_and(byte_e1_adv, byte_be);
          r800_ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r800_ffff_tmp13 = simd_andc(r800_ffff_tmp11, r800_ffff_tmp12);
          r800_ffff_tmp14 = simd_andc(r800_ffff_tmp13, tmp2);
          r800_ffff_tmp15 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp14);
          r800_ffff_tmp16 = simd_and(basis_bits.bit_4, r800_ffff_tmp15);
          r800_ffff_tmp17 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp18 = simd_andc(r800_ffff_tmp7, r800_ffff_tmp17);
          r800_ffff_tmp19 = simd_and(r800_ffff_tmp6, r800_ffff_tmp18);
          cc_range_1f88_1fbc_3 = simd_or(r800_ffff_tmp16, r800_ffff_tmp19);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(3), sequence_e1_be_adv));
          r800_ffff_tmp20 = simd_and(sequence_e1_be_adv, cc_range_1f88_1fbc_3);
          struct_Lt.cc = simd_or(struct_Lt.cc, r800_ffff_tmp20);
          r800_ffff_tmp21 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp22 = simd_and(r800_ffff_tmp7, r800_ffff_tmp21);
          byte_bf = simd_and(r800_ffff_tmp6, r800_ffff_tmp22);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          r800_ffff_tmp23 = simd_andc(r800_ffff_tmp11, r800_ffff_tmp5);
          r800_ffff_tmp24 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp23);
          cc_range_1fcc_1ffc_3 = simd_and(r800_ffff_tmp18, r800_ffff_tmp24);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(4), sequence_e1_bf_adv));
          r800_ffff_tmp25 = simd_and(sequence_e1_bf_adv, cc_range_1fcc_1ffc_3);
          struct_Lt.cc = simd_or(struct_Lt.cc, r800_ffff_tmp25);
        }
        else {
          carryQ.CarryDequeueEnqueue(1, 4);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Lt & struct_Lt, BitBlock EOF_mask) {
		BitBlock tmp1, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, byte_c7, r80_7ff_tmp6, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10, r80_7ff_tmp11;
		BitBlock r80_7ff_tmp12, r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15;
		BitBlock r80_7ff_tmp16, r80_7ff_tmp17, r80_7ff_tmp18, r80_7ff_tmp19;
		BitBlock r80_7ff_tmp20, r80_7ff_tmp21, r80_7ff_tmp22, cc_range_1c5_1f2_2;
		BitBlock byte_c7_adv, r80_7ff_tmp23, tmp2, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, byte_e1, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, byte_be, r800_ffff_tmp10, sequence_e1_be, byte_e1_adv;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13, r800_ffff_tmp14;
		BitBlock r800_ffff_tmp15, r800_ffff_tmp16, r800_ffff_tmp17, r800_ffff_tmp18;
		BitBlock r800_ffff_tmp19, cc_range_1f88_1fbc_3, sequence_e1_be_adv;
		BitBlock r800_ffff_tmp20, r800_ffff_tmp21, r800_ffff_tmp22, byte_bf;
		BitBlock sequence_e1_bf, r800_ffff_tmp23, r800_ffff_tmp24;
		BitBlock cc_range_1fcc_1ffc_3, sequence_e1_bf_adv, r800_ffff_tmp25;




        struct_Lt.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
          r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp2 = simd_andc(tmp1, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r80_7ff_tmp4 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp5 = simd_and(r80_7ff_tmp3, r80_7ff_tmp4);
          byte_c7 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
          r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r80_7ff_tmp7 = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
          r80_7ff_tmp8 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r80_7ff_tmp9 = simd_and(r80_7ff_tmp3, r80_7ff_tmp8);
          r80_7ff_tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp11 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp12 = simd_andc(r80_7ff_tmp10, r80_7ff_tmp11);
          r80_7ff_tmp13 = simd_or(r80_7ff_tmp9, r80_7ff_tmp12);
          r80_7ff_tmp14 = simd_and(r80_7ff_tmp10, r80_7ff_tmp4);
          r80_7ff_tmp15 = simd_or(r80_7ff_tmp13, r80_7ff_tmp14);
          r80_7ff_tmp16 = simd_and(r80_7ff_tmp7, r80_7ff_tmp15);
          r80_7ff_tmp17 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp18 = simd_and(r80_7ff_tmp6, r80_7ff_tmp17);
          r80_7ff_tmp19 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp20 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp21 = simd_andc(r80_7ff_tmp20, r80_7ff_tmp19);
          r80_7ff_tmp22 = simd_and(r80_7ff_tmp18, r80_7ff_tmp21);
          cc_range_1c5_1f2_2 = simd_or(r80_7ff_tmp16, r80_7ff_tmp22);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(0), byte_c7_adv));
          r80_7ff_tmp23 = simd_and(byte_c7_adv, cc_range_1c5_1f2_2);
          struct_Lt.cc = simd_or(struct_Lt.cc, r80_7ff_tmp23);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 4))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp3 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp1);
          byte_e1 = simd_and(byte_range_e0_ef, r800_ffff_tmp3);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp5 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp6 = simd_and(r800_ffff_tmp4, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp8 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp9 = simd_and(r800_ffff_tmp7, r800_ffff_tmp8);
          byte_be = simd_and(r800_ffff_tmp6, r800_ffff_tmp9);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r800_ffff_tmp10));
          sequence_e1_be = simd_and(r800_ffff_tmp10, byte_be);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(2), byte_e1_adv));
          sequence_e1_be = simd_and(byte_e1_adv, byte_be);
          r800_ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r800_ffff_tmp13 = simd_andc(r800_ffff_tmp11, r800_ffff_tmp12);
          r800_ffff_tmp14 = simd_andc(r800_ffff_tmp13, tmp2);
          r800_ffff_tmp15 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp14);
          r800_ffff_tmp16 = simd_and(basis_bits.bit_4, r800_ffff_tmp15);
          r800_ffff_tmp17 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp18 = simd_andc(r800_ffff_tmp7, r800_ffff_tmp17);
          r800_ffff_tmp19 = simd_and(r800_ffff_tmp6, r800_ffff_tmp18);
          cc_range_1f88_1fbc_3 = simd_or(r800_ffff_tmp16, r800_ffff_tmp19);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(3), sequence_e1_be_adv));
          r800_ffff_tmp20 = simd_and(sequence_e1_be_adv, cc_range_1f88_1fbc_3);
          struct_Lt.cc = simd_or(struct_Lt.cc, r800_ffff_tmp20);
          r800_ffff_tmp21 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp22 = simd_and(r800_ffff_tmp7, r800_ffff_tmp21);
          byte_bf = simd_and(r800_ffff_tmp6, r800_ffff_tmp22);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          r800_ffff_tmp23 = simd_andc(r800_ffff_tmp11, r800_ffff_tmp5);
          r800_ffff_tmp24 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp23);
          cc_range_1fcc_1ffc_3 = simd_and(r800_ffff_tmp18, r800_ffff_tmp24);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(4), sequence_e1_bf_adv));
          r800_ffff_tmp25 = simd_and(sequence_e1_bf_adv, cc_range_1fcc_1ffc_3);
          struct_Lt.cc = simd_or(struct_Lt.cc, r800_ffff_tmp25);
        }
        else {
          carryQ.CarryDequeueEnqueue(1, 4);
        }
  }
  CarryArray<5, 0> carryQ;
  };

  struct Lu {
  Lu() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Lu & struct_Lu) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10;
		BitBlock byte_range_41_5a, tmp11, tmp12, tmp13, byte_f0, tmp14, tmp15, tmp16;
		BitBlock tmp17, tmp18, tmp19, byte_9d, tmp20, sequence_f0_9d, byte_f0_adv;
		BitBlock byte_90, tmp21, sequence_f0_9d_90, sequence_f0_9d_adv, tmp22, tmp23;
		BitBlock tmp24, tmp25, tmp26, tmp27, tmp28, cc_range_1d400_1d434_4;
		BitBlock sequence_f0_9d_90_adv, tmp29, tmp30, byte_91, sequence_f0_9d_91;
		BitBlock tmp31, tmp32, tmp33, tmp34, tmp35, tmp36, tmp37, tmp38;
		BitBlock cc_range_1d440_1d468_4, sequence_f0_9d_91_adv, tmp39, tmp40, tmp41;
		BitBlock byte_92, sequence_f0_9d_92, tmp42, tmp43, tmp44, tmp45, tmp46, tmp47;
		BitBlock tmp48, tmp49, tmp50, tmp51, tmp52, tmp53, tmp54, tmp55, tmp56, tmp57;
		BitBlock tmp58, tmp59, tmp60, tmp61, tmp62, tmp63, tmp64, tmp65, tmp66, tmp67;
		BitBlock tmp68, cc_range_1d480_1d4ae_4, sequence_f0_9d_92_adv, tmp69, tmp70;
		BitBlock byte_93, sequence_f0_9d_93, tmp71, tmp72, tmp73, byte_range_90_a9;
		BitBlock sequence_f0_9d_93_adv, tmp74, tmp75, byte_94, sequence_f0_9d_94;
		BitBlock tmp76, tmp77, tmp78, tmp79, tmp80, tmp81, tmp82, tmp83, tmp84, tmp85;
		BitBlock tmp86, tmp87, tmp88, tmp89, tmp90, tmp91, tmp92, tmp93, tmp94, tmp95;
		BitBlock tmp96, tmp97, tmp98, tmp99, tmp100, cc_range_1d504_1d53b_4;
		BitBlock sequence_f0_9d_94_adv, tmp101, tmp102, byte_95, sequence_f0_9d_95;
		BitBlock tmp103, tmp104, tmp105, tmp106, tmp107, tmp108, tmp109, tmp110;
		BitBlock tmp111, tmp112, tmp113, cc_range_1d540_1d56c_4, sequence_f0_9d_95_adv;
		BitBlock tmp114, byte_96, sequence_f0_9d_96, tmp115, tmp116;
		BitBlock cc_range_1d580_1d5a0_4, sequence_f0_9d_96_adv, tmp117, tmp118;
		BitBlock byte_97, sequence_f0_9d_97, tmp119, tmp120, tmp121, tmp122;
		BitBlock byte_range_94_ad, sequence_f0_9d_97_adv, tmp123, tmp124, byte_98;
		BitBlock sequence_f0_9d_98, tmp125, tmp126, tmp127, tmp128, tmp129;
		BitBlock cc_range_1d608_1d63c_4, sequence_f0_9d_98_adv, tmp130, tmp131;
		BitBlock byte_99, sequence_f0_9d_99, tmp132, tmp133, cc_range_1d640_1d670_4;
		BitBlock sequence_f0_9d_99_adv, tmp134, tmp135, byte_9a, sequence_f0_9d_9a;
		BitBlock tmp136, cc_range_1d680_1d6a8_4, sequence_f0_9d_9a_adv, tmp137, tmp138;
		BitBlock byte_9b, sequence_f0_9d_9b, tmp139, tmp140, tmp141;
		BitBlock cc_range_1d6c0_1d6e2_4, sequence_f0_9d_9b_adv, tmp142, byte_9c;
		BitBlock sequence_f0_9d_9c, tmp143, tmp144, tmp145, tmp146, byte_range_9c_b4;
		BitBlock sequence_f0_9d_9c_adv, tmp147, sequence_f0_9d_9d, tmp148, tmp149;
		BitBlock tmp150, tmp151, byte_range_96_ae, sequence_f0_9d_9d_adv, tmp152;
		BitBlock tmp153, byte_9e, sequence_f0_9d_9e, tmp154, tmp155, tmp156, tmp157;
		BitBlock tmp158, byte_range_90_a8, sequence_f0_9d_9e_adv, tmp159, byte_9f;
		BitBlock sequence_f0_9d_9f, byte_8a, sequence_f0_9d_9f_adv, tmp160;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, byte_c3, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, r80_7ff_tmp6, cc_range_c0_d8_2;
		BitBlock byte_c3_adv, r80_7ff_tmp7, byte_c4, r80_7ff_tmp8, r80_7ff_tmp9;
		BitBlock r80_7ff_tmp10, r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13;
		BitBlock r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16, r80_7ff_tmp17;
		BitBlock r80_7ff_tmp18, r80_7ff_tmp19, r80_7ff_tmp20, r80_7ff_tmp21;
		BitBlock r80_7ff_tmp22, r80_7ff_tmp23, r80_7ff_tmp24, r80_7ff_tmp25;
		BitBlock r80_7ff_tmp26, r80_7ff_tmp27, r80_7ff_tmp28, r80_7ff_tmp29;
		BitBlock r80_7ff_tmp30, r80_7ff_tmp31, r80_7ff_tmp32, r80_7ff_tmp33;
		BitBlock r80_7ff_tmp34, r80_7ff_tmp35, r80_7ff_tmp36, r80_7ff_tmp37;
		BitBlock r80_7ff_tmp38, r80_7ff_tmp39, r80_7ff_tmp40, r80_7ff_tmp41;
		BitBlock r80_7ff_tmp42, r80_7ff_tmp43, r80_7ff_tmp44, r80_7ff_tmp45;
		BitBlock r80_7ff_tmp46, r80_7ff_tmp47, r80_7ff_tmp48, r80_7ff_tmp49;
		BitBlock r80_7ff_tmp50, r80_7ff_tmp51, r80_7ff_tmp52, r80_7ff_tmp53;
		BitBlock cc_range_100_13f_2, byte_c4_adv, r80_7ff_tmp54, byte_c5;
		BitBlock r80_7ff_tmp55, r80_7ff_tmp56, r80_7ff_tmp57, r80_7ff_tmp58;
		BitBlock r80_7ff_tmp59, r80_7ff_tmp60, r80_7ff_tmp61, r80_7ff_tmp62;
		BitBlock r80_7ff_tmp63, r80_7ff_tmp64, r80_7ff_tmp65, r80_7ff_tmp66;
		BitBlock r80_7ff_tmp67, r80_7ff_tmp68, r80_7ff_tmp69, r80_7ff_tmp70;
		BitBlock r80_7ff_tmp71, r80_7ff_tmp72, r80_7ff_tmp73, r80_7ff_tmp74;
		BitBlock r80_7ff_tmp75, r80_7ff_tmp76, r80_7ff_tmp77, r80_7ff_tmp78;
		BitBlock r80_7ff_tmp79, r80_7ff_tmp80, r80_7ff_tmp81, r80_7ff_tmp82;
		BitBlock r80_7ff_tmp83, cc_range_141_17d_2, byte_c5_adv, r80_7ff_tmp84;
		BitBlock byte_c6, r80_7ff_tmp85, r80_7ff_tmp86, r80_7ff_tmp87, r80_7ff_tmp88;
		BitBlock r80_7ff_tmp89, r80_7ff_tmp90, r80_7ff_tmp91, r80_7ff_tmp92;
		BitBlock r80_7ff_tmp93, r80_7ff_tmp94, r80_7ff_tmp95, r80_7ff_tmp96;
		BitBlock r80_7ff_tmp97, r80_7ff_tmp98, r80_7ff_tmp99, r80_7ff_tmp100;
		BitBlock r80_7ff_tmp101, r80_7ff_tmp102, r80_7ff_tmp103, r80_7ff_tmp104;
		BitBlock r80_7ff_tmp105, r80_7ff_tmp106, r80_7ff_tmp107, r80_7ff_tmp108;
		BitBlock r80_7ff_tmp109, r80_7ff_tmp110, r80_7ff_tmp111, r80_7ff_tmp112;
		BitBlock r80_7ff_tmp113, r80_7ff_tmp114, r80_7ff_tmp115, r80_7ff_tmp116;
		BitBlock r80_7ff_tmp117, r80_7ff_tmp118, r80_7ff_tmp119, r80_7ff_tmp120;
		BitBlock r80_7ff_tmp121, r80_7ff_tmp122, r80_7ff_tmp123, r80_7ff_tmp124;
		BitBlock r80_7ff_tmp125, r80_7ff_tmp126, r80_7ff_tmp127, r80_7ff_tmp128;
		BitBlock r80_7ff_tmp129, r80_7ff_tmp130, r80_7ff_tmp131, r80_7ff_tmp132;
		BitBlock r80_7ff_tmp133, cc_range_181_1bc_2, byte_c6_adv, r80_7ff_tmp134;
		BitBlock byte_c7, r80_7ff_tmp135, r80_7ff_tmp136, r80_7ff_tmp137;
		BitBlock r80_7ff_tmp138, r80_7ff_tmp139, r80_7ff_tmp140, r80_7ff_tmp141;
		BitBlock r80_7ff_tmp142, r80_7ff_tmp143, r80_7ff_tmp144, r80_7ff_tmp145;
		BitBlock r80_7ff_tmp146, r80_7ff_tmp147, r80_7ff_tmp148, r80_7ff_tmp149;
		BitBlock r80_7ff_tmp150, r80_7ff_tmp151, r80_7ff_tmp152, r80_7ff_tmp153;
		BitBlock r80_7ff_tmp154, r80_7ff_tmp155, r80_7ff_tmp156, r80_7ff_tmp157;
		BitBlock r80_7ff_tmp158, r80_7ff_tmp159, r80_7ff_tmp160, r80_7ff_tmp161;
		BitBlock r80_7ff_tmp162, r80_7ff_tmp163, r80_7ff_tmp164, cc_range_1c4_1fe_2;
		BitBlock byte_c7_adv, r80_7ff_tmp165, byte_c8, r80_7ff_tmp166, r80_7ff_tmp167;
		BitBlock r80_7ff_tmp168, r80_7ff_tmp169, cc_range_200_23d_2, byte_c8_adv;
		BitBlock r80_7ff_tmp170, byte_c9, r80_7ff_tmp171, r80_7ff_tmp172;
		BitBlock r80_7ff_tmp173, r80_7ff_tmp174, r80_7ff_tmp175, r80_7ff_tmp176;
		BitBlock r80_7ff_tmp177, r80_7ff_tmp178, r80_7ff_tmp179, cc_range_241_24e_2;
		BitBlock byte_c9_adv, r80_7ff_tmp180, byte_cd, r80_7ff_tmp181;
		BitBlock cc_range_370_376_2, byte_cd_adv, r80_7ff_tmp182, byte_ce;
		BitBlock r80_7ff_tmp183, r80_7ff_tmp184, r80_7ff_tmp185, r80_7ff_tmp186;
		BitBlock r80_7ff_tmp187, r80_7ff_tmp188, r80_7ff_tmp189, r80_7ff_tmp190;
		BitBlock r80_7ff_tmp191, r80_7ff_tmp192, r80_7ff_tmp193, r80_7ff_tmp194;
		BitBlock cc_range_386_3a3_2, byte_ce_adv, r80_7ff_tmp195, byte_cf;
		BitBlock r80_7ff_tmp196, r80_7ff_tmp197, r80_7ff_tmp198, r80_7ff_tmp199;
		BitBlock r80_7ff_tmp200, r80_7ff_tmp201, r80_7ff_tmp202, r80_7ff_tmp203;
		BitBlock r80_7ff_tmp204, r80_7ff_tmp205, r80_7ff_tmp206, r80_7ff_tmp207;
		BitBlock r80_7ff_tmp208, r80_7ff_tmp209, r80_7ff_tmp210, r80_7ff_tmp211;
		BitBlock r80_7ff_tmp212, r80_7ff_tmp213, r80_7ff_tmp214, r80_7ff_tmp215;
		BitBlock r80_7ff_tmp216, r80_7ff_tmp217, r80_7ff_tmp218, cc_range_3cf_3fd_2;
		BitBlock byte_cf_adv, r80_7ff_tmp219, r80_7ff_tmp220, byte_d0;
		BitBlock byte_range_80_af, byte_d0_adv, r80_7ff_tmp221, byte_d1;
		BitBlock cc_range_460_47e_2, byte_d1_adv, r80_7ff_tmp222, byte_d2;
		BitBlock r80_7ff_tmp223, r80_7ff_tmp224, r80_7ff_tmp225, r80_7ff_tmp226;
		BitBlock r80_7ff_tmp227, r80_7ff_tmp228, r80_7ff_tmp229, r80_7ff_tmp230;
		BitBlock r80_7ff_tmp231, r80_7ff_tmp232, r80_7ff_tmp233, r80_7ff_tmp234;
		BitBlock r80_7ff_tmp235, r80_7ff_tmp236, r80_7ff_tmp237, r80_7ff_tmp238;
		BitBlock r80_7ff_tmp239, r80_7ff_tmp240, r80_7ff_tmp241, r80_7ff_tmp242;
		BitBlock r80_7ff_tmp243, r80_7ff_tmp244, r80_7ff_tmp245, r80_7ff_tmp246;
		BitBlock r80_7ff_tmp247, r80_7ff_tmp248, r80_7ff_tmp249, r80_7ff_tmp250;
		BitBlock cc_range_480_4be_2, byte_d2_adv, r80_7ff_tmp251, byte_d3;
		BitBlock r80_7ff_tmp252, r80_7ff_tmp253, r80_7ff_tmp254, r80_7ff_tmp255;
		BitBlock r80_7ff_tmp256, r80_7ff_tmp257, r80_7ff_tmp258, r80_7ff_tmp259;
		BitBlock r80_7ff_tmp260, r80_7ff_tmp261, r80_7ff_tmp262, r80_7ff_tmp263;
		BitBlock r80_7ff_tmp264, r80_7ff_tmp265, r80_7ff_tmp266, r80_7ff_tmp267;
		BitBlock r80_7ff_tmp268, r80_7ff_tmp269, r80_7ff_tmp270, r80_7ff_tmp271;
		BitBlock r80_7ff_tmp272, r80_7ff_tmp273, r80_7ff_tmp274, r80_7ff_tmp275;
		BitBlock r80_7ff_tmp276, r80_7ff_tmp277, r80_7ff_tmp278, r80_7ff_tmp279;
		BitBlock r80_7ff_tmp280, r80_7ff_tmp281, cc_range_4c0_4fe_2, byte_d3_adv;
		BitBlock r80_7ff_tmp282, byte_d4, r80_7ff_tmp283, r80_7ff_tmp284;
		BitBlock cc_range_500_531_2, byte_d4_adv, r80_7ff_tmp285, byte_d5;
		BitBlock byte_range_80_96, byte_d5_adv, r80_7ff_tmp286, byte_range_e0_ef;
		BitBlock byte_e1, byte_82, r800_ffff_tmp1, sequence_e1_82, byte_e1_adv;
		BitBlock byte_range_a0_bf, sequence_e1_82_adv, r800_ffff_tmp2, byte_83;
		BitBlock sequence_e1_83, r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock cc_range_10c0_10cd_3, sequence_e1_83_adv, r800_ffff_tmp6, byte_b8;
		BitBlock sequence_e1_b8, cc_range_1e00_1e3e_3, sequence_e1_b8_adv;
		BitBlock r800_ffff_tmp7, byte_b9, sequence_e1_b9, cc_range_1e40_1e7e_3;
		BitBlock sequence_e1_b9_adv, r800_ffff_tmp8, byte_ba, sequence_e1_ba;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, r800_ffff_tmp11, r800_ffff_tmp12;
		BitBlock r800_ffff_tmp13, r800_ffff_tmp14, r800_ffff_tmp15, r800_ffff_tmp16;
		BitBlock r800_ffff_tmp17, r800_ffff_tmp18, r800_ffff_tmp19, r800_ffff_tmp20;
		BitBlock r800_ffff_tmp21, r800_ffff_tmp22, r800_ffff_tmp23, r800_ffff_tmp24;
		BitBlock r800_ffff_tmp25, r800_ffff_tmp26, r800_ffff_tmp27, r800_ffff_tmp28;
		BitBlock r800_ffff_tmp29, r800_ffff_tmp30, r800_ffff_tmp31, r800_ffff_tmp32;
		BitBlock r800_ffff_tmp33, r800_ffff_tmp34, r800_ffff_tmp35, r800_ffff_tmp36;
		BitBlock r800_ffff_tmp37, r800_ffff_tmp38, r800_ffff_tmp39, r800_ffff_tmp40;
		BitBlock r800_ffff_tmp41, r800_ffff_tmp42, r800_ffff_tmp43, r800_ffff_tmp44;
		BitBlock r800_ffff_tmp45, r800_ffff_tmp46, r800_ffff_tmp47, r800_ffff_tmp48;
		BitBlock cc_range_1e80_1ebe_3, sequence_e1_ba_adv, r800_ffff_tmp49, byte_bb;
		BitBlock sequence_e1_bb, cc_range_1ec0_1efe_3, sequence_e1_bb_adv;
		BitBlock r800_ffff_tmp50, byte_bc, sequence_e1_bc, r800_ffff_tmp51;
		BitBlock r800_ffff_tmp52, r800_ffff_tmp53, r800_ffff_tmp54, r800_ffff_tmp55;
		BitBlock cc_range_1f08_1f38_3, sequence_e1_bc_adv, r800_ffff_tmp56, byte_bd;
		BitBlock sequence_e1_bd, r800_ffff_tmp57, r800_ffff_tmp58, r800_ffff_tmp59;
		BitBlock r800_ffff_tmp60, r800_ffff_tmp61, cc_range_1f48_1f68_3;
		BitBlock sequence_e1_bd_adv, r800_ffff_tmp62, byte_be, sequence_e1_be;
		BitBlock byte_range_b8_bb, sequence_e1_be_adv, r800_ffff_tmp63, byte_bf;
		BitBlock sequence_e1_bf, r800_ffff_tmp64, r800_ffff_tmp65, r800_ffff_tmp66;
		BitBlock r800_ffff_tmp67, r800_ffff_tmp68, cc_range_1fc8_1ff8_3;
		BitBlock sequence_e1_bf_adv, r800_ffff_tmp69, byte_e2, byte_84;
		BitBlock r800_ffff_tmp70, sequence_e2_84, byte_e2_adv, r800_ffff_tmp71;
		BitBlock r800_ffff_tmp72, r800_ffff_tmp73, r800_ffff_tmp74, r800_ffff_tmp75;
		BitBlock r800_ffff_tmp76, r800_ffff_tmp77, r800_ffff_tmp78, r800_ffff_tmp79;
		BitBlock r800_ffff_tmp80, r800_ffff_tmp81, r800_ffff_tmp82, r800_ffff_tmp83;
		BitBlock r800_ffff_tmp84, r800_ffff_tmp85, r800_ffff_tmp86, r800_ffff_tmp87;
		BitBlock r800_ffff_tmp88, r800_ffff_tmp89, r800_ffff_tmp90, r800_ffff_tmp91;
		BitBlock r800_ffff_tmp92, cc_range_2102_213e_3, sequence_e2_84_adv;
		BitBlock r800_ffff_tmp93, byte_85, sequence_e2_85, sequence_e2_85_adv;
		BitBlock r800_ffff_tmp94, byte_86, sequence_e2_86, sequence_e2_86_adv;
		BitBlock r800_ffff_tmp95, byte_b0, sequence_e2_b0, r800_ffff_tmp96;
		BitBlock byte_range_80_ae, sequence_e2_b0_adv, r800_ffff_tmp97, byte_b1;
		BitBlock sequence_e2_b1, r800_ffff_tmp98, r800_ffff_tmp99, r800_ffff_tmp100;
		BitBlock r800_ffff_tmp101, r800_ffff_tmp102, r800_ffff_tmp103;
		BitBlock r800_ffff_tmp104, r800_ffff_tmp105, r800_ffff_tmp106;
		BitBlock r800_ffff_tmp107, r800_ffff_tmp108, r800_ffff_tmp109;
		BitBlock r800_ffff_tmp110, r800_ffff_tmp111, r800_ffff_tmp112;
		BitBlock r800_ffff_tmp113, cc_range_2c60_2c7e_3, sequence_e2_b1_adv;
		BitBlock r800_ffff_tmp114, byte_b2, sequence_e2_b2, cc_range_2c80_2cbe_3;
		BitBlock sequence_e2_b2_adv, r800_ffff_tmp115, byte_b3, sequence_e2_b3;
		BitBlock r800_ffff_tmp116, r800_ffff_tmp117, r800_ffff_tmp118;
		BitBlock r800_ffff_tmp119, r800_ffff_tmp120, r800_ffff_tmp121;
		BitBlock r800_ffff_tmp122, r800_ffff_tmp123, r800_ffff_tmp124;
		BitBlock r800_ffff_tmp125, cc_range_2cc0_2cf2_3, sequence_e2_b3_adv;
		BitBlock r800_ffff_tmp126, byte_ea, r800_ffff_tmp127, sequence_ea_99;
		BitBlock byte_ea_adv, r800_ffff_tmp128, r800_ffff_tmp129, cc_range_a640_a66c_3;
		BitBlock sequence_ea_99_adv, r800_ffff_tmp130, sequence_ea_9a;
		BitBlock r800_ffff_tmp131, r800_ffff_tmp132, cc_range_a680_a696_3;
		BitBlock sequence_ea_9a_adv, r800_ffff_tmp133, sequence_ea_9c;
		BitBlock r800_ffff_tmp134, r800_ffff_tmp135, r800_ffff_tmp136;
		BitBlock r800_ffff_tmp137, r800_ffff_tmp138, r800_ffff_tmp139;
		BitBlock r800_ffff_tmp140, r800_ffff_tmp141, r800_ffff_tmp142;
		BitBlock r800_ffff_tmp143, r800_ffff_tmp144, r800_ffff_tmp145;
		BitBlock r800_ffff_tmp146, cc_range_a722_a73e_3, sequence_ea_9c_adv;
		BitBlock r800_ffff_tmp147, sequence_ea_9d, r800_ffff_tmp148, r800_ffff_tmp149;
		BitBlock r800_ffff_tmp150, r800_ffff_tmp151, r800_ffff_tmp152;
		BitBlock r800_ffff_tmp153, r800_ffff_tmp154, r800_ffff_tmp155;
		BitBlock r800_ffff_tmp156, cc_range_a740_a77d_3, sequence_ea_9d_adv;
		BitBlock r800_ffff_tmp157, sequence_ea_9e, r800_ffff_tmp158, r800_ffff_tmp159;
		BitBlock r800_ffff_tmp160, r800_ffff_tmp161, r800_ffff_tmp162;
		BitBlock r800_ffff_tmp163, r800_ffff_tmp164, r800_ffff_tmp165;
		BitBlock r800_ffff_tmp166, r800_ffff_tmp167, cc_range_a780_a7aa_3;
		BitBlock sequence_ea_9e_adv, r800_ffff_tmp168, byte_ef, r800_ffff_tmp169;
		BitBlock sequence_ef_bc, byte_ef_adv, byte_range_a1_ba, sequence_ef_bc_adv;
		BitBlock r800_ffff_tmp170, sequence_f0_90, byte_range_80_bf, tmp161;
		BitBlock sequence_f0_90_byte_range_80_bf, tmp162;
		BitBlock sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock r10000_10fff_tmp1, sequence_f0_90_90, sequence_f0_90_adv;
		BitBlock r10000_10fff_tmp2, byte_range_80_a7, sequence_f0_90_90_adv;
		BitBlock r10000_10fff_tmp3;




        struct_Lu.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_andc(tmp1, basis_bits.bit_2);
        tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp4 = simd_or(basis_bits.bit_5, tmp3);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        tmp6 = simd_not(tmp5);
        tmp7 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp9 = simd_or(tmp7, tmp8);
        tmp10 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(tmp9, basis_bits.bit_3));
        byte_range_41_5a = simd_and(tmp2, tmp10);
        struct_Lu.cc = simd_or(struct_Lu.cc, byte_range_41_5a);
        tmp11 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp12 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp13 = simd_and(tmp11, tmp12);
        byte_f0 = simd_andc(tmp13, tmp9);
        tmp14 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp15 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp16 = simd_and(tmp14, tmp15);
        tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp18 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp19 = simd_and(tmp17, tmp18);
        byte_9d = simd_and(tmp16, tmp19);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp20));
        sequence_f0_9d = simd_and(tmp20, byte_9d);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        byte_90 = simd_andc(tmp16, tmp9);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(2), tmp21));
        sequence_f0_9d_90 = simd_and(tmp21, byte_90);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(3), sequence_f0_9d_adv));
        sequence_f0_9d_90 = simd_and(sequence_f0_9d_adv, byte_90);
        tmp22 = simd_andc(tmp14, basis_bits.bit_2);
        tmp23 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp24 = simd_and(basis_bits.bit_4, tmp23);
        tmp25 = simd_and(basis_bits.bit_3, tmp24);
        tmp26 = simd_andc(tmp22, tmp25);
        tmp27 = simd_and(tmp14, tmp12);
        tmp28 = simd_and(tmp27, tmp7);
        cc_range_1d400_1d434_4 = simd_or(tmp26, tmp28);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(4), sequence_f0_9d_90_adv));
        tmp29 = simd_and(sequence_f0_9d_90_adv, cc_range_1d400_1d434_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp29);
        tmp30 = simd_andc(tmp18, tmp7);
        byte_91 = simd_and(tmp16, tmp30);
        sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
        sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
        tmp31 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp32 = simd_andc(tmp14, tmp31);
        tmp33 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
        tmp34 = simd_and(basis_bits.bit_4, tmp33);
        tmp35 = simd_andc(tmp32, tmp34);
        tmp36 = simd_and(tmp14, basis_bits.bit_2);
        tmp37 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
        tmp38 = simd_and(tmp36, tmp37);
        cc_range_1d440_1d468_4 = simd_or(tmp35, tmp38);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(5), sequence_f0_9d_91_adv));
        tmp39 = simd_and(sequence_f0_9d_91_adv, cc_range_1d440_1d468_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp39);
        tmp40 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp41 = simd_andc(tmp40, tmp7);
        byte_92 = simd_and(tmp16, tmp41);
        sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
        sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
        tmp42 = simd_or(tmp7, basis_bits.bit_6);
        tmp43 = simd_andc(tmp32, tmp42);
        tmp44 = simd_andc(tmp17, tmp8);
        tmp45 = simd_and(tmp16, tmp44);
        tmp46 = simd_or(tmp43, tmp45);
        tmp47 = simd_and(tmp17, basis_bits.bit_6);
        tmp48 = simd_and(tmp16, tmp47);
        tmp49 = simd_or(tmp46, tmp48);
        tmp50 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp51 = simd_and(tmp14, tmp50);
        tmp52 = simd_and(tmp51, tmp41);
        tmp53 = simd_or(tmp49, tmp52);
        tmp54 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp55 = simd_and(tmp51, tmp54);
        tmp56 = simd_not(basis_bits.bit_7);
        tmp57 = simd_or(simd_and(basis_bits.bit_6, tmp56), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
        tmp58 = simd_and(tmp55, tmp57);
        tmp59 = simd_or(tmp53, tmp58);
        tmp60 = simd_and(tmp51, basis_bits.bit_4);
        tmp61 = simd_not(tmp8);
        tmp62 = simd_or(simd_and(basis_bits.bit_5, tmp61), simd_andc(tmp8, basis_bits.bit_5));
        tmp63 = simd_and(tmp60, tmp62);
        tmp64 = simd_or(tmp59, tmp63);
        tmp65 = simd_or(basis_bits.bit_4, tmp33);
        tmp66 = simd_not(tmp65);
        tmp67 = simd_or(simd_and(basis_bits.bit_3, tmp66), simd_andc(tmp47, basis_bits.bit_3));
        tmp68 = simd_and(tmp36, tmp67);
        cc_range_1d480_1d4ae_4 = simd_or(tmp64, tmp68);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(6), sequence_f0_9d_92_adv));
        tmp69 = simd_and(sequence_f0_9d_92_adv, cc_range_1d480_1d4ae_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp69);
        tmp70 = simd_andc(tmp3, tmp7);
        byte_93 = simd_and(tmp16, tmp70);
        sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
        sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
        tmp71 = simd_or(basis_bits.bit_3, tmp24);
        tmp72 = simd_not(tmp71);
        tmp73 = simd_or(simd_and(basis_bits.bit_2, tmp72), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
        byte_range_90_a9 = simd_and(tmp14, tmp73);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(7), sequence_f0_9d_93_adv));
        tmp74 = simd_and(sequence_f0_9d_93_adv, byte_range_90_a9);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp74);
        tmp75 = simd_andc(tmp54, tmp8);
        byte_94 = simd_and(tmp16, tmp75);
        sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
        sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
        tmp76 = simd_andc(tmp54, basis_bits.bit_6);
        tmp77 = simd_not(tmp4);
        tmp78 = simd_and(basis_bits.bit_5, tmp3);
        tmp79 = simd_or(simd_and(basis_bits.bit_4, tmp77), simd_andc(tmp78, basis_bits.bit_4));
        tmp80 = simd_or(tmp76, tmp79);
        tmp81 = simd_and(tmp32, tmp80);
        tmp82 = simd_and(basis_bits.bit_5, tmp8);
        tmp83 = simd_or(basis_bits.bit_4, tmp82);
        tmp84 = simd_not(tmp83);
        tmp85 = simd_and(tmp17, tmp8);
        tmp86 = simd_or(simd_and(basis_bits.bit_3, tmp84), simd_andc(tmp85, basis_bits.bit_3));
        tmp87 = simd_and(tmp22, tmp86);
        tmp88 = simd_or(tmp81, tmp87);
        tmp89 = simd_not(tmp82);
        tmp90 = simd_or(simd_and(basis_bits.bit_4, tmp89), simd_andc(tmp33, basis_bits.bit_4));
        tmp91 = simd_and(tmp16, tmp90);
        tmp92 = simd_or(tmp88, tmp91);
        tmp93 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp94 = simd_andc(tmp93, basis_bits.bit_6);
        tmp95 = simd_and(tmp27, tmp94);
        tmp96 = simd_or(tmp92, tmp95);
        tmp97 = simd_and(tmp27, basis_bits.bit_4);
        tmp98 = simd_not(tmp3);
        tmp99 = simd_or(simd_and(basis_bits.bit_5, tmp98), simd_andc(tmp3, basis_bits.bit_5));
        tmp100 = simd_and(tmp97, tmp99);
        cc_range_1d504_1d53b_4 = simd_or(tmp96, tmp100);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(8), sequence_f0_9d_94_adv));
        tmp101 = simd_and(sequence_f0_9d_94_adv, cc_range_1d504_1d53b_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp101);
        tmp102 = simd_and(tmp54, tmp18);
        byte_95 = simd_and(tmp16, tmp102);
        sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
        sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
        tmp103 = simd_andc(tmp32, basis_bits.bit_4);
        tmp104 = simd_andc(tmp103, tmp82);
        tmp105 = simd_and(tmp54, tmp40);
        tmp106 = simd_and(tmp32, tmp105);
        tmp107 = simd_or(tmp104, tmp106);
        tmp108 = simd_not(tmp9);
        tmp109 = simd_or(simd_and(basis_bits.bit_3, tmp108), simd_andc(tmp24, basis_bits.bit_3));
        tmp110 = simd_and(tmp22, tmp109);
        tmp111 = simd_or(tmp107, tmp110);
        tmp112 = simd_or(basis_bits.bit_3, tmp17);
        tmp113 = simd_and(tmp36, tmp112);
        cc_range_1d540_1d56c_4 = simd_or(tmp111, tmp113);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(9), sequence_f0_9d_95_adv));
        tmp114 = simd_and(sequence_f0_9d_95_adv, cc_range_1d540_1d56c_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp114);
        byte_96 = simd_and(tmp16, tmp105);
        sequence_f0_9d_96 = simd_and(sequence_f0_9d_adv, byte_96);
        sequence_f0_9d_96 = simd_and(sequence_f0_9d_adv, byte_96);
        tmp115 = simd_andc(tmp103, tmp33);
        tmp116 = simd_andc(tmp36, tmp25);
        cc_range_1d580_1d5a0_4 = simd_or(tmp115, tmp116);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_96, carryQ.get_carry_in(10), sequence_f0_9d_96_adv));
        tmp117 = simd_and(sequence_f0_9d_96_adv, cc_range_1d580_1d5a0_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp117);
        tmp118 = simd_and(tmp54, tmp3);
        byte_97 = simd_and(tmp16, tmp118);
        sequence_f0_9d_97 = simd_and(sequence_f0_9d_adv, byte_97);
        sequence_f0_9d_97 = simd_and(sequence_f0_9d_adv, byte_97);
        tmp119 = simd_or(basis_bits.bit_3, tmp47);
        tmp120 = simd_not(tmp119);
        tmp121 = simd_and(basis_bits.bit_3, tmp7);
        tmp122 = simd_or(simd_and(basis_bits.bit_2, tmp120), simd_andc(tmp121, basis_bits.bit_2));
        byte_range_94_ad = simd_and(tmp14, tmp122);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_97, carryQ.get_carry_in(11), sequence_f0_9d_97_adv));
        tmp123 = simd_and(sequence_f0_9d_97_adv, byte_range_94_ad);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp123);
        tmp124 = simd_andc(tmp93, tmp8);
        byte_98 = simd_and(tmp16, tmp124);
        sequence_f0_9d_98 = simd_and(sequence_f0_9d_adv, byte_98);
        sequence_f0_9d_98 = simd_and(sequence_f0_9d_adv, byte_98);
        tmp125 = simd_or(basis_bits.bit_3, tmp42);
        tmp126 = simd_not(tmp125);
        tmp127 = simd_or(simd_and(basis_bits.bit_2, tmp126), simd_andc(tmp37, basis_bits.bit_2));
        tmp128 = simd_and(tmp14, tmp127);
        tmp129 = simd_and(tmp27, tmp17);
        cc_range_1d608_1d63c_4 = simd_or(tmp128, tmp129);
        carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_98, carryQ.get_carry_in(12), sequence_f0_9d_98_adv));
        tmp130 = simd_and(sequence_f0_9d_98_adv, cc_range_1d608_1d63c_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp130);
        tmp131 = simd_and(tmp93, tmp18);
        byte_99 = simd_and(tmp16, tmp131);
        sequence_f0_9d_99 = simd_and(sequence_f0_9d_adv, byte_99);
        sequence_f0_9d_99 = simd_and(sequence_f0_9d_adv, byte_99);
        tmp132 = simd_and(basis_bits.bit_3, tmp65);
        tmp133 = simd_andc(tmp22, tmp132);
        cc_range_1d640_1d670_4 = simd_or(tmp133, tmp27);
        carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_99, carryQ.get_carry_in(13), sequence_f0_9d_99_adv));
        tmp134 = simd_and(sequence_f0_9d_99_adv, cc_range_1d640_1d670_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp134);
        tmp135 = simd_and(tmp93, tmp40);
        byte_9a = simd_and(tmp16, tmp135);
        sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
        sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
        tmp136 = simd_andc(tmp32, tmp24);
        cc_range_1d680_1d6a8_4 = simd_or(tmp136, tmp38);
        carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(14), sequence_f0_9d_9a_adv));
        tmp137 = simd_and(sequence_f0_9d_9a_adv, cc_range_1d680_1d6a8_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp137);
        tmp138 = simd_and(tmp93, tmp3);
        byte_9b = simd_and(tmp16, tmp138);
        sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
        sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
        tmp139 = simd_andc(tmp32, tmp9);
        tmp140 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(tmp42, basis_bits.bit_3));
        tmp141 = simd_and(tmp36, tmp140);
        cc_range_1d6c0_1d6e2_4 = simd_or(tmp139, tmp141);
        carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(15), sequence_f0_9d_9b_adv));
        tmp142 = simd_and(sequence_f0_9d_9b_adv, cc_range_1d6c0_1d6e2_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp142);
        byte_9c = simd_and(tmp16, tmp44);
        sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
        sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
        tmp143 = simd_and(basis_bits.bit_3, tmp83);
        tmp144 = simd_not(tmp143);
        tmp145 = simd_and(basis_bits.bit_3, tmp17);
        tmp146 = simd_or(simd_and(basis_bits.bit_2, tmp144), simd_andc(tmp145, basis_bits.bit_2));
        byte_range_9c_b4 = simd_and(tmp14, tmp146);
        carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(16), sequence_f0_9d_9c_adv));
        tmp147 = simd_and(sequence_f0_9d_9c_adv, byte_range_9c_b4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp147);
        sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
        sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
        tmp148 = simd_and(tmp17, tmp3);
        tmp149 = simd_or(basis_bits.bit_3, tmp148);
        tmp150 = simd_not(tmp149);
        tmp151 = simd_or(simd_and(basis_bits.bit_2, tmp150), simd_andc(tmp132, basis_bits.bit_2));
        byte_range_96_ae = simd_and(tmp14, tmp151);
        carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(17), sequence_f0_9d_9d_adv));
        tmp152 = simd_and(sequence_f0_9d_9d_adv, byte_range_96_ae);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp152);
        tmp153 = simd_and(tmp17, tmp40);
        byte_9e = simd_and(tmp16, tmp153);
        sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
        sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
        tmp154 = simd_or(basis_bits.bit_5, tmp8);
        tmp155 = simd_and(basis_bits.bit_4, tmp154);
        tmp156 = simd_or(basis_bits.bit_3, tmp155);
        tmp157 = simd_not(tmp156);
        tmp158 = simd_or(simd_and(basis_bits.bit_2, tmp157), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
        byte_range_90_a8 = simd_and(tmp14, tmp158);
        carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(18), sequence_f0_9d_9e_adv));
        tmp159 = simd_and(sequence_f0_9d_9e_adv, byte_range_90_a8);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp159);
        byte_9f = simd_and(tmp16, tmp148);
        sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
        sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
        byte_8a = simd_and(tmp32, tmp135);
        carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(19), sequence_f0_9d_9f_adv));
        tmp160 = simd_and(sequence_f0_9d_9f_adv, byte_8a);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp160);
        byte_range_c0_df = simd_andc(tmp11, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(20, 16))) {
          r80_7ff_tmp1 = simd_andc(tmp11, tmp31);
          byte_c3 = simd_and(r80_7ff_tmp1, tmp70);
          r80_7ff_tmp2 = simd_or(basis_bits.bit_4, tmp78);
          r80_7ff_tmp3 = simd_and(basis_bits.bit_3, r80_7ff_tmp2);
          r80_7ff_tmp4 = simd_andc(tmp22, r80_7ff_tmp3);
          r80_7ff_tmp5 = simd_and(tmp16, basis_bits.bit_4);
          r80_7ff_tmp6 = simd_andc(r80_7ff_tmp5, tmp78);
          cc_range_c0_d8_2 = simd_or(r80_7ff_tmp4, r80_7ff_tmp6);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(20), byte_c3_adv));
          r80_7ff_tmp7 = simd_and(byte_c3_adv, cc_range_c0_d8_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp7);
          byte_c4 = simd_and(r80_7ff_tmp1, tmp75);
          r80_7ff_tmp8 = simd_andc(tmp9, tmp41);
          r80_7ff_tmp9 = simd_andc(r80_7ff_tmp8, tmp75);
          r80_7ff_tmp10 = simd_andc(r80_7ff_tmp9, tmp105);
          r80_7ff_tmp11 = simd_andc(r80_7ff_tmp10, tmp124);
          r80_7ff_tmp12 = simd_andc(r80_7ff_tmp11, tmp135);
          r80_7ff_tmp13 = simd_andc(r80_7ff_tmp12, tmp44);
          r80_7ff_tmp14 = simd_andc(r80_7ff_tmp13, tmp153);
          r80_7ff_tmp15 = simd_andc(tmp32, r80_7ff_tmp14);
          r80_7ff_tmp16 = simd_or(r80_7ff_tmp15, byte_90);
          r80_7ff_tmp17 = simd_or(r80_7ff_tmp16, byte_92);
          r80_7ff_tmp18 = simd_or(r80_7ff_tmp17, byte_94);
          r80_7ff_tmp19 = simd_or(r80_7ff_tmp18, byte_96);
          r80_7ff_tmp20 = simd_or(r80_7ff_tmp19, byte_98);
          r80_7ff_tmp21 = simd_or(r80_7ff_tmp20, byte_9a);
          r80_7ff_tmp22 = simd_or(r80_7ff_tmp21, byte_9c);
          r80_7ff_tmp23 = simd_or(r80_7ff_tmp22, byte_9e);
          r80_7ff_tmp24 = simd_andc(tmp51, tmp9);
          r80_7ff_tmp25 = simd_or(r80_7ff_tmp23, r80_7ff_tmp24);
          r80_7ff_tmp26 = simd_or(r80_7ff_tmp25, tmp52);
          r80_7ff_tmp27 = simd_and(tmp51, tmp75);
          r80_7ff_tmp28 = simd_or(r80_7ff_tmp26, r80_7ff_tmp27);
          r80_7ff_tmp29 = simd_and(tmp51, tmp105);
          r80_7ff_tmp30 = simd_or(r80_7ff_tmp28, r80_7ff_tmp29);
          r80_7ff_tmp31 = simd_and(tmp51, tmp124);
          r80_7ff_tmp32 = simd_or(r80_7ff_tmp30, r80_7ff_tmp31);
          r80_7ff_tmp33 = simd_and(tmp51, tmp135);
          r80_7ff_tmp34 = simd_or(r80_7ff_tmp32, r80_7ff_tmp33);
          r80_7ff_tmp35 = simd_and(tmp51, tmp44);
          r80_7ff_tmp36 = simd_or(r80_7ff_tmp34, r80_7ff_tmp35);
          r80_7ff_tmp37 = simd_and(tmp51, tmp153);
          r80_7ff_tmp38 = simd_or(r80_7ff_tmp36, r80_7ff_tmp37);
          r80_7ff_tmp39 = simd_andc(tmp27, tmp9);
          r80_7ff_tmp40 = simd_or(r80_7ff_tmp38, r80_7ff_tmp39);
          r80_7ff_tmp41 = simd_and(tmp27, tmp41);
          r80_7ff_tmp42 = simd_or(r80_7ff_tmp40, r80_7ff_tmp41);
          r80_7ff_tmp43 = simd_and(tmp27, tmp75);
          r80_7ff_tmp44 = simd_or(r80_7ff_tmp42, r80_7ff_tmp43);
          r80_7ff_tmp45 = simd_and(tmp27, tmp105);
          r80_7ff_tmp46 = simd_or(r80_7ff_tmp44, r80_7ff_tmp45);
          r80_7ff_tmp47 = simd_and(tmp27, tmp131);
          r80_7ff_tmp48 = simd_or(r80_7ff_tmp46, r80_7ff_tmp47);
          r80_7ff_tmp49 = simd_and(tmp27, tmp138);
          r80_7ff_tmp50 = simd_or(r80_7ff_tmp48, r80_7ff_tmp49);
          r80_7ff_tmp51 = simd_and(tmp27, tmp19);
          r80_7ff_tmp52 = simd_or(r80_7ff_tmp50, r80_7ff_tmp51);
          r80_7ff_tmp53 = simd_and(tmp27, tmp148);
          cc_range_100_13f_2 = simd_or(r80_7ff_tmp52, r80_7ff_tmp53);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_c4, carryQ.get_carry_in(21), byte_c4_adv));
          r80_7ff_tmp54 = simd_and(byte_c4_adv, cc_range_100_13f_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp54);
          byte_c5 = simd_and(r80_7ff_tmp1, tmp102);
          r80_7ff_tmp55 = simd_andc(basis_bits.bit_7, tmp7);
          r80_7ff_tmp56 = simd_or(r80_7ff_tmp55, tmp102);
          r80_7ff_tmp57 = simd_or(r80_7ff_tmp56, tmp118);
          r80_7ff_tmp58 = simd_or(r80_7ff_tmp57, tmp135);
          r80_7ff_tmp59 = simd_or(r80_7ff_tmp58, tmp44);
          r80_7ff_tmp60 = simd_or(r80_7ff_tmp59, tmp153);
          r80_7ff_tmp61 = simd_and(tmp32, r80_7ff_tmp60);
          r80_7ff_tmp62 = simd_or(r80_7ff_tmp61, byte_90);
          r80_7ff_tmp63 = simd_or(r80_7ff_tmp62, byte_92);
          r80_7ff_tmp64 = simd_or(r80_7ff_tmp63, byte_94);
          r80_7ff_tmp65 = simd_or(r80_7ff_tmp64, byte_96);
          r80_7ff_tmp66 = simd_or(r80_7ff_tmp65, byte_98);
          r80_7ff_tmp67 = simd_or(r80_7ff_tmp66, byte_9a);
          r80_7ff_tmp68 = simd_or(r80_7ff_tmp67, byte_9c);
          r80_7ff_tmp69 = simd_or(r80_7ff_tmp68, byte_9e);
          r80_7ff_tmp70 = simd_or(r80_7ff_tmp69, r80_7ff_tmp24);
          r80_7ff_tmp71 = simd_or(r80_7ff_tmp70, tmp52);
          r80_7ff_tmp72 = simd_or(r80_7ff_tmp71, r80_7ff_tmp27);
          r80_7ff_tmp73 = simd_or(r80_7ff_tmp72, r80_7ff_tmp29);
          r80_7ff_tmp74 = simd_or(r80_7ff_tmp73, r80_7ff_tmp31);
          r80_7ff_tmp75 = simd_or(r80_7ff_tmp74, r80_7ff_tmp33);
          r80_7ff_tmp76 = simd_or(r80_7ff_tmp75, r80_7ff_tmp35);
          r80_7ff_tmp77 = simd_or(r80_7ff_tmp76, r80_7ff_tmp37);
          r80_7ff_tmp78 = simd_or(r80_7ff_tmp77, r80_7ff_tmp39);
          r80_7ff_tmp79 = simd_or(r80_7ff_tmp78, r80_7ff_tmp41);
          r80_7ff_tmp80 = simd_or(r80_7ff_tmp79, r80_7ff_tmp43);
          r80_7ff_tmp81 = simd_or(r80_7ff_tmp80, r80_7ff_tmp45);
          r80_7ff_tmp82 = simd_or(r80_7ff_tmp81, tmp95);
          r80_7ff_tmp83 = simd_or(r80_7ff_tmp82, r80_7ff_tmp49);
          cc_range_141_17d_2 = simd_or(r80_7ff_tmp83, r80_7ff_tmp51);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_c5, carryQ.get_carry_in(22), byte_c5_adv));
          r80_7ff_tmp84 = simd_and(byte_c5_adv, cc_range_141_17d_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp84);
          byte_c6 = simd_and(r80_7ff_tmp1, tmp105);
          r80_7ff_tmp85 = simd_andc(tmp32, tmp7);
          r80_7ff_tmp86 = simd_and(r80_7ff_tmp85, tmp57);
          r80_7ff_tmp87 = simd_and(tmp32, tmp75);
          r80_7ff_tmp88 = simd_or(r80_7ff_tmp86, r80_7ff_tmp87);
          r80_7ff_tmp89 = simd_and(tmp54, basis_bits.bit_6);
          r80_7ff_tmp90 = simd_and(tmp32, r80_7ff_tmp89);
          r80_7ff_tmp91 = simd_or(r80_7ff_tmp88, r80_7ff_tmp90);
          r80_7ff_tmp92 = simd_and(tmp32, tmp93);
          r80_7ff_tmp93 = simd_and(r80_7ff_tmp92, tmp8);
          r80_7ff_tmp94 = simd_or(r80_7ff_tmp91, r80_7ff_tmp93);
          r80_7ff_tmp95 = simd_not(tmp42);
          r80_7ff_tmp96 = simd_or(simd_and(basis_bits.bit_3, r80_7ff_tmp95), simd_andc(tmp47, basis_bits.bit_3));
          r80_7ff_tmp97 = simd_and(tmp22, r80_7ff_tmp96);
          r80_7ff_tmp98 = simd_or(r80_7ff_tmp94, r80_7ff_tmp97);
          r80_7ff_tmp99 = simd_andc(tmp16, basis_bits.bit_4);
          r80_7ff_tmp100 = simd_or(simd_and(basis_bits.bit_5, tmp61), simd_andc(tmp3, basis_bits.bit_5));
          r80_7ff_tmp101 = simd_and(r80_7ff_tmp99, r80_7ff_tmp100);
          r80_7ff_tmp102 = simd_or(r80_7ff_tmp98, r80_7ff_tmp101);
          r80_7ff_tmp103 = simd_not(tmp154);
          r80_7ff_tmp104 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp103), simd_andc(tmp33, basis_bits.bit_4));
          r80_7ff_tmp105 = simd_and(tmp16, r80_7ff_tmp104);
          r80_7ff_tmp106 = simd_or(r80_7ff_tmp102, r80_7ff_tmp105);
          r80_7ff_tmp107 = simd_andc(tmp17, basis_bits.bit_6);
          r80_7ff_tmp108 = simd_and(tmp16, r80_7ff_tmp107);
          r80_7ff_tmp109 = simd_or(r80_7ff_tmp106, r80_7ff_tmp108);
          r80_7ff_tmp110 = simd_or(basis_bits.bit_3, tmp9);
          r80_7ff_tmp111 = simd_not(r80_7ff_tmp110);
          r80_7ff_tmp112 = simd_and(basis_bits.bit_3, tmp148);
          r80_7ff_tmp113 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp111), simd_andc(r80_7ff_tmp112, basis_bits.bit_2));
          r80_7ff_tmp114 = simd_and(tmp14, r80_7ff_tmp113);
          r80_7ff_tmp115 = simd_or(r80_7ff_tmp109, r80_7ff_tmp114);
          r80_7ff_tmp116 = simd_or(r80_7ff_tmp115, tmp52);
          r80_7ff_tmp117 = simd_or(r80_7ff_tmp116, r80_7ff_tmp27);
          r80_7ff_tmp118 = simd_and(tmp51, r80_7ff_tmp89);
          r80_7ff_tmp119 = simd_or(r80_7ff_tmp117, r80_7ff_tmp118);
          r80_7ff_tmp120 = simd_and(tmp51, tmp131);
          r80_7ff_tmp121 = simd_or(r80_7ff_tmp119, r80_7ff_tmp120);
          r80_7ff_tmp122 = simd_or(r80_7ff_tmp121, r80_7ff_tmp35);
          r80_7ff_tmp123 = simd_and(tmp51, tmp47);
          r80_7ff_tmp124 = simd_or(r80_7ff_tmp122, r80_7ff_tmp123);
          r80_7ff_tmp125 = simd_andc(tmp27, tmp7);
          r80_7ff_tmp126 = simd_and(r80_7ff_tmp125, tmp8);
          r80_7ff_tmp127 = simd_or(r80_7ff_tmp124, r80_7ff_tmp126);
          r80_7ff_tmp128 = simd_and(tmp27, tmp102);
          r80_7ff_tmp129 = simd_or(r80_7ff_tmp127, r80_7ff_tmp128);
          r80_7ff_tmp130 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp103), simd_andc(tmp78, basis_bits.bit_4));
          r80_7ff_tmp131 = simd_and(tmp27, r80_7ff_tmp130);
          r80_7ff_tmp132 = simd_or(r80_7ff_tmp129, r80_7ff_tmp131);
          r80_7ff_tmp133 = simd_and(tmp27, tmp44);
          cc_range_181_1bc_2 = simd_or(r80_7ff_tmp132, r80_7ff_tmp133);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(byte_c6, carryQ.get_carry_in(23), byte_c6_adv));
          r80_7ff_tmp134 = simd_and(byte_c6_adv, cc_range_181_1bc_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp134);
          byte_c7 = simd_and(r80_7ff_tmp1, tmp118);
          r80_7ff_tmp135 = simd_andc(tmp8, tmp3);
          r80_7ff_tmp136 = simd_andc(tmp54, r80_7ff_tmp135);
          r80_7ff_tmp137 = simd_or(r80_7ff_tmp136, tmp135);
          r80_7ff_tmp138 = simd_or(r80_7ff_tmp137, tmp19);
          r80_7ff_tmp139 = simd_or(r80_7ff_tmp138, tmp148);
          r80_7ff_tmp140 = simd_and(tmp32, r80_7ff_tmp139);
          r80_7ff_tmp141 = simd_or(r80_7ff_tmp140, byte_91);
          r80_7ff_tmp142 = simd_or(r80_7ff_tmp141, byte_93);
          r80_7ff_tmp143 = simd_or(r80_7ff_tmp142, byte_95);
          r80_7ff_tmp144 = simd_or(r80_7ff_tmp143, byte_97);
          r80_7ff_tmp145 = simd_or(r80_7ff_tmp144, byte_99);
          r80_7ff_tmp146 = simd_or(r80_7ff_tmp145, byte_9b);
          r80_7ff_tmp147 = simd_or(r80_7ff_tmp146, byte_9e);
          r80_7ff_tmp148 = simd_or(r80_7ff_tmp147, r80_7ff_tmp24);
          r80_7ff_tmp149 = simd_or(r80_7ff_tmp148, tmp52);
          r80_7ff_tmp150 = simd_or(r80_7ff_tmp149, r80_7ff_tmp27);
          r80_7ff_tmp151 = simd_or(r80_7ff_tmp150, r80_7ff_tmp29);
          r80_7ff_tmp152 = simd_or(r80_7ff_tmp151, r80_7ff_tmp31);
          r80_7ff_tmp153 = simd_or(r80_7ff_tmp152, r80_7ff_tmp33);
          r80_7ff_tmp154 = simd_or(r80_7ff_tmp153, r80_7ff_tmp35);
          r80_7ff_tmp155 = simd_or(r80_7ff_tmp154, r80_7ff_tmp37);
          r80_7ff_tmp156 = simd_and(tmp27, tmp30);
          r80_7ff_tmp157 = simd_or(r80_7ff_tmp155, r80_7ff_tmp156);
          r80_7ff_tmp158 = simd_or(r80_7ff_tmp157, r80_7ff_tmp43);
          r80_7ff_tmp159 = simd_and(tmp27, r80_7ff_tmp104);
          r80_7ff_tmp160 = simd_or(r80_7ff_tmp158, r80_7ff_tmp159);
          r80_7ff_tmp161 = simd_and(tmp27, tmp135);
          r80_7ff_tmp162 = simd_or(r80_7ff_tmp160, r80_7ff_tmp161);
          r80_7ff_tmp163 = simd_or(r80_7ff_tmp162, r80_7ff_tmp133);
          r80_7ff_tmp164 = simd_and(tmp27, tmp153);
          cc_range_1c4_1fe_2 = simd_or(r80_7ff_tmp163, r80_7ff_tmp164);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(24), byte_c7_adv));
          r80_7ff_tmp165 = simd_and(byte_c7_adv, cc_range_1c4_1fe_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp165);
          byte_c8 = simd_and(r80_7ff_tmp1, tmp124);
          r80_7ff_tmp166 = simd_and(tmp93, basis_bits.bit_6);
          r80_7ff_tmp167 = simd_and(tmp27, r80_7ff_tmp166);
          r80_7ff_tmp168 = simd_or(r80_7ff_tmp42, r80_7ff_tmp167);
          r80_7ff_tmp169 = simd_and(tmp129, tmp57);
          cc_range_200_23d_2 = simd_or(r80_7ff_tmp168, r80_7ff_tmp169);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_c8, carryQ.get_carry_in(25), byte_c8_adv));
          r80_7ff_tmp170 = simd_and(byte_c8_adv, cc_range_200_23d_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp170);
          byte_c9 = simd_and(r80_7ff_tmp1, tmp131);
          r80_7ff_tmp171 = simd_and(tmp32, tmp30);
          r80_7ff_tmp172 = simd_and(tmp103, tmp99);
          r80_7ff_tmp173 = simd_or(r80_7ff_tmp171, r80_7ff_tmp172);
          r80_7ff_tmp174 = simd_and(tmp32, tmp124);
          r80_7ff_tmp175 = simd_or(r80_7ff_tmp173, r80_7ff_tmp174);
          r80_7ff_tmp176 = simd_or(r80_7ff_tmp175, byte_8a);
          r80_7ff_tmp177 = simd_and(tmp32, tmp44);
          r80_7ff_tmp178 = simd_or(r80_7ff_tmp176, r80_7ff_tmp177);
          r80_7ff_tmp179 = simd_and(tmp32, tmp153);
          cc_range_241_24e_2 = simd_or(r80_7ff_tmp178, r80_7ff_tmp179);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(26), byte_c9_adv));
          r80_7ff_tmp180 = simd_and(byte_c9_adv, cc_range_241_24e_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp180);
          byte_cd = simd_and(r80_7ff_tmp1, tmp19);
          r80_7ff_tmp181 = simd_andc(r80_7ff_tmp8, tmp105);
          cc_range_370_376_2 = simd_andc(tmp27, r80_7ff_tmp181);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(27), byte_cd_adv));
          r80_7ff_tmp182 = simd_and(byte_cd_adv, cc_range_370_376_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp182);
          byte_ce = simd_and(r80_7ff_tmp1, tmp153);
          r80_7ff_tmp183 = simd_andc(r80_7ff_tmp92, tmp3);
          r80_7ff_tmp184 = simd_or(tmp106, r80_7ff_tmp183);
          r80_7ff_tmp185 = simd_or(r80_7ff_tmp184, r80_7ff_tmp177);
          r80_7ff_tmp186 = simd_and(tmp32, tmp47);
          r80_7ff_tmp187 = simd_or(r80_7ff_tmp185, r80_7ff_tmp186);
          r80_7ff_tmp188 = simd_and(basis_bits.bit_3, tmp9);
          r80_7ff_tmp189 = simd_or(simd_and(basis_bits.bit_2, tmp126), simd_andc(r80_7ff_tmp188, basis_bits.bit_2));
          r80_7ff_tmp190 = simd_and(tmp14, r80_7ff_tmp189);
          r80_7ff_tmp191 = simd_or(r80_7ff_tmp187, r80_7ff_tmp190);
          r80_7ff_tmp192 = simd_not(basis_bits.bit_5);
          r80_7ff_tmp193 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp192), simd_andc(tmp4, basis_bits.bit_4));
          r80_7ff_tmp194 = simd_and(tmp51, r80_7ff_tmp193);
          cc_range_386_3a3_2 = simd_or(r80_7ff_tmp191, r80_7ff_tmp194);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(28), byte_ce_adv));
          r80_7ff_tmp195 = simd_and(byte_ce_adv, cc_range_386_3a3_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp195);
          byte_cf = simd_and(r80_7ff_tmp1, tmp148);
          r80_7ff_tmp196 = simd_and(tmp32, tmp148);
          r80_7ff_tmp197 = simd_or(simd_and(basis_bits.bit_5, tmp61), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r80_7ff_tmp198 = simd_and(r80_7ff_tmp99, r80_7ff_tmp197);
          r80_7ff_tmp199 = simd_or(r80_7ff_tmp196, r80_7ff_tmp198);
          r80_7ff_tmp200 = simd_or(r80_7ff_tmp199, byte_98);
          r80_7ff_tmp201 = simd_or(r80_7ff_tmp200, byte_9a);
          r80_7ff_tmp202 = simd_or(r80_7ff_tmp201, byte_9c);
          r80_7ff_tmp203 = simd_or(r80_7ff_tmp202, byte_9e);
          r80_7ff_tmp204 = simd_or(r80_7ff_tmp203, r80_7ff_tmp24);
          r80_7ff_tmp205 = simd_or(r80_7ff_tmp204, tmp52);
          r80_7ff_tmp206 = simd_or(r80_7ff_tmp205, r80_7ff_tmp27);
          r80_7ff_tmp207 = simd_or(r80_7ff_tmp206, r80_7ff_tmp29);
          r80_7ff_tmp208 = simd_or(r80_7ff_tmp207, r80_7ff_tmp31);
          r80_7ff_tmp209 = simd_or(r80_7ff_tmp208, r80_7ff_tmp33);
          r80_7ff_tmp210 = simd_or(r80_7ff_tmp209, r80_7ff_tmp35);
          r80_7ff_tmp211 = simd_or(r80_7ff_tmp210, r80_7ff_tmp37);
          r80_7ff_tmp212 = simd_or(r80_7ff_tmp211, r80_7ff_tmp43);
          r80_7ff_tmp213 = simd_and(tmp27, tmp118);
          r80_7ff_tmp214 = simd_or(r80_7ff_tmp212, r80_7ff_tmp213);
          r80_7ff_tmp215 = simd_and(tmp27, tmp93);
          r80_7ff_tmp216 = simd_and(r80_7ff_tmp215, tmp57);
          r80_7ff_tmp217 = simd_or(r80_7ff_tmp214, r80_7ff_tmp216);
          r80_7ff_tmp218 = simd_and(tmp129, tmp8);
          cc_range_3cf_3fd_2 = simd_or(r80_7ff_tmp217, r80_7ff_tmp218);
          carryQ.cq[29] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(29), byte_cf_adv));
          r80_7ff_tmp219 = simd_and(byte_cf_adv, cc_range_3cf_3fd_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp219);
          r80_7ff_tmp220 = simd_and(tmp11, tmp15);
          byte_d0 = simd_andc(r80_7ff_tmp220, tmp9);
          byte_range_80_af = simd_andc(tmp14, tmp12);
          carryQ.cq[30] = carryout2carry(pablo_blk_Advance(byte_d0, carryQ.get_carry_in(30), byte_d0_adv));
          r80_7ff_tmp221 = simd_and(byte_d0_adv, byte_range_80_af);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp221);
          byte_d1 = simd_and(r80_7ff_tmp220, tmp30);
          cc_range_460_47e_2 = simd_andc(tmp36, basis_bits.bit_7);
          carryQ.cq[31] = carryout2carry(pablo_blk_Advance(byte_d1, carryQ.get_carry_in(31), byte_d1_adv));
          r80_7ff_tmp222 = simd_and(byte_d1_adv, cc_range_460_47e_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp222);
          byte_d2 = simd_and(r80_7ff_tmp220, tmp41);
          r80_7ff_tmp223 = simd_andc(tmp9, tmp135);
          r80_7ff_tmp224 = simd_andc(r80_7ff_tmp223, tmp44);
          r80_7ff_tmp225 = simd_andc(r80_7ff_tmp224, tmp153);
          r80_7ff_tmp226 = simd_andc(tmp32, r80_7ff_tmp225);
          r80_7ff_tmp227 = simd_or(r80_7ff_tmp226, byte_90);
          r80_7ff_tmp228 = simd_or(r80_7ff_tmp227, byte_92);
          r80_7ff_tmp229 = simd_or(r80_7ff_tmp228, byte_94);
          r80_7ff_tmp230 = simd_or(r80_7ff_tmp229, byte_96);
          r80_7ff_tmp231 = simd_or(r80_7ff_tmp230, byte_98);
          r80_7ff_tmp232 = simd_or(r80_7ff_tmp231, byte_9a);
          r80_7ff_tmp233 = simd_or(r80_7ff_tmp232, byte_9c);
          r80_7ff_tmp234 = simd_or(r80_7ff_tmp233, byte_9e);
          r80_7ff_tmp235 = simd_or(r80_7ff_tmp234, r80_7ff_tmp24);
          r80_7ff_tmp236 = simd_or(r80_7ff_tmp235, tmp52);
          r80_7ff_tmp237 = simd_or(r80_7ff_tmp236, r80_7ff_tmp27);
          r80_7ff_tmp238 = simd_or(r80_7ff_tmp237, r80_7ff_tmp29);
          r80_7ff_tmp239 = simd_or(r80_7ff_tmp238, r80_7ff_tmp31);
          r80_7ff_tmp240 = simd_or(r80_7ff_tmp239, r80_7ff_tmp33);
          r80_7ff_tmp241 = simd_or(r80_7ff_tmp240, r80_7ff_tmp35);
          r80_7ff_tmp242 = simd_or(r80_7ff_tmp241, r80_7ff_tmp37);
          r80_7ff_tmp243 = simd_or(r80_7ff_tmp242, r80_7ff_tmp39);
          r80_7ff_tmp244 = simd_or(r80_7ff_tmp243, r80_7ff_tmp41);
          r80_7ff_tmp245 = simd_or(r80_7ff_tmp244, r80_7ff_tmp43);
          r80_7ff_tmp246 = simd_or(r80_7ff_tmp245, r80_7ff_tmp45);
          r80_7ff_tmp247 = simd_and(tmp27, tmp124);
          r80_7ff_tmp248 = simd_or(r80_7ff_tmp246, r80_7ff_tmp247);
          r80_7ff_tmp249 = simd_or(r80_7ff_tmp248, r80_7ff_tmp161);
          r80_7ff_tmp250 = simd_or(r80_7ff_tmp249, r80_7ff_tmp133);
          cc_range_480_4be_2 = simd_or(r80_7ff_tmp250, r80_7ff_tmp164);
          carryQ.cq[32] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(32), byte_d2_adv));
          r80_7ff_tmp251 = simd_and(byte_d2_adv, cc_range_480_4be_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp251);
          byte_d3 = simd_and(r80_7ff_tmp220, tmp70);
          r80_7ff_tmp252 = simd_andc(tmp42, tmp70);
          r80_7ff_tmp253 = simd_andc(r80_7ff_tmp252, tmp102);
          r80_7ff_tmp254 = simd_andc(r80_7ff_tmp253, tmp118);
          r80_7ff_tmp255 = simd_andc(r80_7ff_tmp254, tmp131);
          r80_7ff_tmp256 = simd_andc(r80_7ff_tmp255, tmp138);
          r80_7ff_tmp257 = simd_andc(r80_7ff_tmp256, tmp19);
          r80_7ff_tmp258 = simd_andc(tmp32, r80_7ff_tmp257);
          r80_7ff_tmp259 = simd_or(r80_7ff_tmp258, byte_90);
          r80_7ff_tmp260 = simd_or(r80_7ff_tmp259, byte_92);
          r80_7ff_tmp261 = simd_or(r80_7ff_tmp260, byte_94);
          r80_7ff_tmp262 = simd_or(r80_7ff_tmp261, byte_96);
          r80_7ff_tmp263 = simd_or(r80_7ff_tmp262, byte_98);
          r80_7ff_tmp264 = simd_or(r80_7ff_tmp263, byte_9a);
          r80_7ff_tmp265 = simd_or(r80_7ff_tmp264, byte_9c);
          r80_7ff_tmp266 = simd_or(r80_7ff_tmp265, byte_9e);
          r80_7ff_tmp267 = simd_or(r80_7ff_tmp266, r80_7ff_tmp24);
          r80_7ff_tmp268 = simd_or(r80_7ff_tmp267, tmp52);
          r80_7ff_tmp269 = simd_or(r80_7ff_tmp268, r80_7ff_tmp27);
          r80_7ff_tmp270 = simd_or(r80_7ff_tmp269, r80_7ff_tmp29);
          r80_7ff_tmp271 = simd_or(r80_7ff_tmp270, r80_7ff_tmp31);
          r80_7ff_tmp272 = simd_or(r80_7ff_tmp271, r80_7ff_tmp33);
          r80_7ff_tmp273 = simd_or(r80_7ff_tmp272, r80_7ff_tmp35);
          r80_7ff_tmp274 = simd_or(r80_7ff_tmp273, r80_7ff_tmp37);
          r80_7ff_tmp275 = simd_or(r80_7ff_tmp274, r80_7ff_tmp39);
          r80_7ff_tmp276 = simd_or(r80_7ff_tmp275, r80_7ff_tmp41);
          r80_7ff_tmp277 = simd_or(r80_7ff_tmp276, r80_7ff_tmp43);
          r80_7ff_tmp278 = simd_or(r80_7ff_tmp277, r80_7ff_tmp45);
          r80_7ff_tmp279 = simd_or(r80_7ff_tmp278, r80_7ff_tmp247);
          r80_7ff_tmp280 = simd_or(r80_7ff_tmp279, r80_7ff_tmp161);
          r80_7ff_tmp281 = simd_or(r80_7ff_tmp280, r80_7ff_tmp133);
          cc_range_4c0_4fe_2 = simd_or(r80_7ff_tmp281, r80_7ff_tmp164);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(33), byte_d3_adv));
          r80_7ff_tmp282 = simd_and(byte_d3_adv, cc_range_4c0_4fe_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp282);
          byte_d4 = simd_and(r80_7ff_tmp220, tmp75);
          r80_7ff_tmp283 = simd_or(basis_bits.bit_4, tmp154);
          r80_7ff_tmp284 = simd_and(tmp27, r80_7ff_tmp283);
          cc_range_500_531_2 = simd_or(r80_7ff_tmp30, r80_7ff_tmp284);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(34), byte_d4_adv));
          r80_7ff_tmp285 = simd_and(byte_d4_adv, cc_range_500_531_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp285);
          byte_d5 = simd_and(r80_7ff_tmp220, tmp102);
          byte_range_80_96 = simd_andc(tmp22, r80_7ff_tmp3);
          carryQ.cq[35] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(35), byte_d5_adv));
          r80_7ff_tmp286 = simd_and(byte_d5_adv, byte_range_80_96);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp286);
        }
        else {
          carryQ.CarryDequeueEnqueue(20, 16);
        }
        byte_range_e0_ef = simd_and(tmp11, tmp50);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(36, 31))) {
          byte_e1 = simd_and(byte_range_e0_ef, tmp30);
          byte_82 = simd_and(tmp32, tmp41);
          carryQ.cq[36] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(36), r800_ffff_tmp1));
          sequence_e1_82 = simd_and(r800_ffff_tmp1, byte_82);
          carryQ.cq[37] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(37), byte_e1_adv));
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          byte_range_a0_bf = simd_and(tmp14, basis_bits.bit_2);
          carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(38), sequence_e1_82_adv));
          r800_ffff_tmp2 = simd_and(sequence_e1_82_adv, byte_range_a0_bf);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp2);
          byte_83 = simd_and(tmp32, tmp70);
          sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
          sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
          r800_ffff_tmp3 = simd_and(tmp32, tmp118);
          r800_ffff_tmp4 = simd_or(tmp115, r800_ffff_tmp3);
          r800_ffff_tmp5 = simd_and(tmp32, tmp19);
          cc_range_10c0_10cd_3 = simd_or(r800_ffff_tmp4, r800_ffff_tmp5);
          carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(39), sequence_e1_83_adv));
          r800_ffff_tmp6 = simd_and(sequence_e1_83_adv, cc_range_10c0_10cd_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp6);
          byte_b8 = simd_and(tmp27, tmp124);
          sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
          sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
          cc_range_1e00_1e3e_3 = simd_andc(tmp14, basis_bits.bit_7);
          carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(40), sequence_e1_b8_adv));
          r800_ffff_tmp7 = simd_and(sequence_e1_b8_adv, cc_range_1e00_1e3e_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp7);
          byte_b9 = simd_and(tmp27, tmp131);
          sequence_e1_b9 = simd_and(byte_e1_adv, byte_b9);
          sequence_e1_b9 = simd_and(byte_e1_adv, byte_b9);
          cc_range_1e40_1e7e_3 = simd_andc(tmp14, basis_bits.bit_7);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e1_b9, carryQ.get_carry_in(41), sequence_e1_b9_adv));
          r800_ffff_tmp8 = simd_and(sequence_e1_b9_adv, cc_range_1e40_1e7e_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp8);
          byte_ba = simd_and(tmp27, tmp135);
          sequence_e1_ba = simd_and(byte_e1_adv, byte_ba);
          sequence_e1_ba = simd_and(byte_e1_adv, byte_ba);
          r800_ffff_tmp9 = simd_andc(tmp9, tmp41);
          r800_ffff_tmp10 = simd_andc(r800_ffff_tmp9, tmp75);
          r800_ffff_tmp11 = simd_andc(r800_ffff_tmp10, tmp105);
          r800_ffff_tmp12 = simd_andc(r800_ffff_tmp11, tmp124);
          r800_ffff_tmp13 = simd_andc(r800_ffff_tmp12, tmp135);
          r800_ffff_tmp14 = simd_andc(r800_ffff_tmp13, tmp44);
          r800_ffff_tmp15 = simd_andc(r800_ffff_tmp14, tmp153);
          r800_ffff_tmp16 = simd_andc(tmp32, r800_ffff_tmp15);
          r800_ffff_tmp17 = simd_or(r800_ffff_tmp16, byte_90);
          r800_ffff_tmp18 = simd_or(r800_ffff_tmp17, byte_92);
          r800_ffff_tmp19 = simd_or(r800_ffff_tmp18, byte_94);
          r800_ffff_tmp20 = simd_or(r800_ffff_tmp19, byte_9e);
          r800_ffff_tmp21 = simd_andc(tmp51, tmp9);
          r800_ffff_tmp22 = simd_or(r800_ffff_tmp20, r800_ffff_tmp21);
          r800_ffff_tmp23 = simd_or(r800_ffff_tmp22, tmp52);
          r800_ffff_tmp24 = simd_and(tmp51, tmp75);
          r800_ffff_tmp25 = simd_or(r800_ffff_tmp23, r800_ffff_tmp24);
          r800_ffff_tmp26 = simd_and(tmp51, tmp105);
          r800_ffff_tmp27 = simd_or(r800_ffff_tmp25, r800_ffff_tmp26);
          r800_ffff_tmp28 = simd_and(tmp51, tmp124);
          r800_ffff_tmp29 = simd_or(r800_ffff_tmp27, r800_ffff_tmp28);
          r800_ffff_tmp30 = simd_and(tmp51, tmp135);
          r800_ffff_tmp31 = simd_or(r800_ffff_tmp29, r800_ffff_tmp30);
          r800_ffff_tmp32 = simd_and(tmp51, tmp44);
          r800_ffff_tmp33 = simd_or(r800_ffff_tmp31, r800_ffff_tmp32);
          r800_ffff_tmp34 = simd_and(tmp51, tmp153);
          r800_ffff_tmp35 = simd_or(r800_ffff_tmp33, r800_ffff_tmp34);
          r800_ffff_tmp36 = simd_andc(tmp27, tmp9);
          r800_ffff_tmp37 = simd_or(r800_ffff_tmp35, r800_ffff_tmp36);
          r800_ffff_tmp38 = simd_and(tmp27, tmp41);
          r800_ffff_tmp39 = simd_or(r800_ffff_tmp37, r800_ffff_tmp38);
          r800_ffff_tmp40 = simd_and(tmp27, tmp75);
          r800_ffff_tmp41 = simd_or(r800_ffff_tmp39, r800_ffff_tmp40);
          r800_ffff_tmp42 = simd_and(tmp27, tmp105);
          r800_ffff_tmp43 = simd_or(r800_ffff_tmp41, r800_ffff_tmp42);
          r800_ffff_tmp44 = simd_or(r800_ffff_tmp43, byte_b8);
          r800_ffff_tmp45 = simd_or(r800_ffff_tmp44, byte_ba);
          r800_ffff_tmp46 = simd_and(tmp27, tmp44);
          r800_ffff_tmp47 = simd_or(r800_ffff_tmp45, r800_ffff_tmp46);
          r800_ffff_tmp48 = simd_and(tmp27, tmp153);
          cc_range_1e80_1ebe_3 = simd_or(r800_ffff_tmp47, r800_ffff_tmp48);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e1_ba, carryQ.get_carry_in(42), sequence_e1_ba_adv));
          r800_ffff_tmp49 = simd_and(sequence_e1_ba_adv, cc_range_1e80_1ebe_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp49);
          byte_bb = simd_and(tmp27, tmp138);
          sequence_e1_bb = simd_and(byte_e1_adv, byte_bb);
          sequence_e1_bb = simd_and(byte_e1_adv, byte_bb);
          cc_range_1ec0_1efe_3 = simd_andc(tmp14, basis_bits.bit_7);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e1_bb, carryQ.get_carry_in(43), sequence_e1_bb_adv));
          r800_ffff_tmp50 = simd_and(sequence_e1_bb_adv, cc_range_1ec0_1efe_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp50);
          byte_bc = simd_and(tmp27, tmp44);
          sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
          sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
          r800_ffff_tmp51 = simd_and(tmp32, basis_bits.bit_4);
          r800_ffff_tmp52 = simd_and(tmp16, basis_bits.bit_4);
          r800_ffff_tmp53 = simd_andc(r800_ffff_tmp52, tmp33);
          r800_ffff_tmp54 = simd_or(r800_ffff_tmp51, r800_ffff_tmp53);
          r800_ffff_tmp55 = simd_or(r800_ffff_tmp54, tmp60);
          cc_range_1f08_1f38_3 = simd_or(r800_ffff_tmp55, tmp97);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(44), sequence_e1_bc_adv));
          r800_ffff_tmp56 = simd_and(sequence_e1_bc_adv, cc_range_1f08_1f38_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp56);
          byte_bd = simd_and(tmp27, tmp19);
          sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
          sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
          r800_ffff_tmp57 = simd_andc(r800_ffff_tmp51, tmp33);
          r800_ffff_tmp58 = simd_or(r800_ffff_tmp57, byte_99);
          r800_ffff_tmp59 = simd_or(r800_ffff_tmp58, byte_9b);
          r800_ffff_tmp60 = simd_or(r800_ffff_tmp59, byte_9d);
          r800_ffff_tmp61 = simd_or(r800_ffff_tmp60, byte_9f);
          cc_range_1f48_1f68_3 = simd_or(r800_ffff_tmp61, tmp60);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(45), sequence_e1_bd_adv));
          r800_ffff_tmp62 = simd_and(sequence_e1_bd_adv, cc_range_1f48_1f68_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp62);
          byte_be = simd_and(tmp27, tmp153);
          sequence_e1_be = simd_and(byte_e1_adv, byte_be);
          sequence_e1_be = simd_and(byte_e1_adv, byte_be);
          byte_range_b8_bb = simd_and(tmp27, tmp93);
          carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(46), sequence_e1_be_adv));
          r800_ffff_tmp63 = simd_and(sequence_e1_be_adv, byte_range_b8_bb);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp63);
          byte_bf = simd_and(tmp27, tmp148);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          r800_ffff_tmp64 = simd_andc(tmp31, tmp15);
          r800_ffff_tmp65 = simd_andc(tmp14, r800_ffff_tmp64);
          r800_ffff_tmp66 = simd_and(tmp93, r800_ffff_tmp65);
          r800_ffff_tmp67 = simd_andc(tmp60, tmp82);
          r800_ffff_tmp68 = simd_or(r800_ffff_tmp66, r800_ffff_tmp67);
          cc_range_1fc8_1ff8_3 = simd_or(r800_ffff_tmp68, byte_range_b8_bb);
          carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(47), sequence_e1_bf_adv));
          r800_ffff_tmp69 = simd_and(sequence_e1_bf_adv, cc_range_1fc8_1ff8_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp69);
          byte_e2 = simd_and(byte_range_e0_ef, tmp41);
          byte_84 = simd_and(tmp32, tmp75);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(48), r800_ffff_tmp70));
          sequence_e2_84 = simd_and(r800_ffff_tmp70, byte_84);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(49), byte_e2_adv));
          sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
          r800_ffff_tmp71 = simd_or(tmp41, tmp118);
          r800_ffff_tmp72 = simd_and(tmp32, r800_ffff_tmp71);
          r800_ffff_tmp73 = simd_not(basis_bits.bit_6);
          r800_ffff_tmp74 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp73), simd_andc(tmp3, basis_bits.bit_5));
          r800_ffff_tmp75 = simd_and(r800_ffff_tmp51, r800_ffff_tmp74);
          r800_ffff_tmp76 = simd_or(r800_ffff_tmp72, r800_ffff_tmp75);
          r800_ffff_tmp77 = simd_andc(tmp16, tmp7);
          r800_ffff_tmp78 = simd_andc(r800_ffff_tmp77, tmp3);
          r800_ffff_tmp79 = simd_or(r800_ffff_tmp76, r800_ffff_tmp78);
          r800_ffff_tmp80 = simd_or(r800_ffff_tmp79, byte_95);
          r800_ffff_tmp81 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp73), simd_andc(tmp8, basis_bits.bit_5));
          r800_ffff_tmp82 = simd_and(r800_ffff_tmp52, r800_ffff_tmp81);
          r800_ffff_tmp83 = simd_or(r800_ffff_tmp80, r800_ffff_tmp82);
          r800_ffff_tmp84 = simd_or(r800_ffff_tmp83, r800_ffff_tmp24);
          r800_ffff_tmp85 = simd_or(r800_ffff_tmp84, r800_ffff_tmp26);
          r800_ffff_tmp86 = simd_or(r800_ffff_tmp85, r800_ffff_tmp28);
          r800_ffff_tmp87 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp73), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp88 = simd_and(tmp60, r800_ffff_tmp87);
          r800_ffff_tmp89 = simd_or(r800_ffff_tmp86, r800_ffff_tmp88);
          r800_ffff_tmp90 = simd_andc(tmp27, tmp7);
          r800_ffff_tmp91 = simd_or(r800_ffff_tmp89, r800_ffff_tmp90);
          r800_ffff_tmp92 = simd_and(tmp27, tmp47);
          cc_range_2102_213e_3 = simd_or(r800_ffff_tmp91, r800_ffff_tmp92);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(50), sequence_e2_84_adv));
          r800_ffff_tmp93 = simd_and(sequence_e2_84_adv, cc_range_2102_213e_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp93);
          byte_85 = simd_and(tmp32, tmp102);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(51), sequence_e2_85_adv));
          r800_ffff_tmp94 = simd_and(sequence_e2_85_adv, byte_85);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp94);
          byte_86 = simd_and(tmp32, tmp105);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(52), sequence_e2_86_adv));
          r800_ffff_tmp95 = simd_and(sequence_e2_86_adv, byte_83);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp95);
          byte_b0 = simd_andc(tmp27, tmp9);
          sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
          sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
          r800_ffff_tmp96 = simd_and(basis_bits.bit_2, tmp149);
          byte_range_80_ae = simd_andc(tmp14, r800_ffff_tmp96);
          carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(53), sequence_e2_b0_adv));
          r800_ffff_tmp97 = simd_and(sequence_e2_b0_adv, byte_range_80_ae);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp97);
          byte_b1 = simd_and(tmp27, tmp30);
          sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
          sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
          r800_ffff_tmp98 = simd_andc(tmp51, basis_bits.bit_4);
          r800_ffff_tmp99 = simd_or(simd_and(basis_bits.bit_5, tmp61), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp100 = simd_and(r800_ffff_tmp98, r800_ffff_tmp99);
          r800_ffff_tmp101 = simd_or(r800_ffff_tmp21, r800_ffff_tmp100);
          r800_ffff_tmp102 = simd_and(tmp51, tmp118);
          r800_ffff_tmp103 = simd_or(r800_ffff_tmp101, r800_ffff_tmp102);
          r800_ffff_tmp104 = simd_and(tmp51, tmp131);
          r800_ffff_tmp105 = simd_or(r800_ffff_tmp103, r800_ffff_tmp104);
          r800_ffff_tmp106 = simd_and(tmp51, tmp138);
          r800_ffff_tmp107 = simd_or(r800_ffff_tmp105, r800_ffff_tmp106);
          r800_ffff_tmp108 = simd_or(simd_and(basis_bits.bit_3, tmp108), simd_andc(tmp85, basis_bits.bit_3));
          r800_ffff_tmp109 = simd_and(byte_range_a0_bf, r800_ffff_tmp108);
          r800_ffff_tmp110 = simd_or(r800_ffff_tmp107, r800_ffff_tmp109);
          r800_ffff_tmp111 = simd_or(r800_ffff_tmp110, r800_ffff_tmp38);
          r800_ffff_tmp112 = simd_and(tmp27, tmp102);
          r800_ffff_tmp113 = simd_or(r800_ffff_tmp111, r800_ffff_tmp112);
          cc_range_2c60_2c7e_3 = simd_or(r800_ffff_tmp113, r800_ffff_tmp92);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(54), sequence_e2_b1_adv));
          r800_ffff_tmp114 = simd_and(sequence_e2_b1_adv, cc_range_2c60_2c7e_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp114);
          byte_b2 = simd_and(tmp27, tmp41);
          sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
          sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
          cc_range_2c80_2cbe_3 = simd_andc(tmp14, basis_bits.bit_7);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(55), sequence_e2_b2_adv));
          r800_ffff_tmp115 = simd_and(sequence_e2_b2_adv, cc_range_2c80_2cbe_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp115);
          byte_b3 = simd_and(tmp27, tmp70);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          r800_ffff_tmp116 = simd_or(r800_ffff_tmp19, byte_96);
          r800_ffff_tmp117 = simd_or(r800_ffff_tmp116, byte_98);
          r800_ffff_tmp118 = simd_or(r800_ffff_tmp117, byte_9a);
          r800_ffff_tmp119 = simd_or(r800_ffff_tmp118, byte_9c);
          r800_ffff_tmp120 = simd_or(r800_ffff_tmp119, byte_9e);
          r800_ffff_tmp121 = simd_or(r800_ffff_tmp120, r800_ffff_tmp21);
          r800_ffff_tmp122 = simd_or(r800_ffff_tmp121, tmp52);
          r800_ffff_tmp123 = simd_or(r800_ffff_tmp122, r800_ffff_tmp106);
          r800_ffff_tmp124 = simd_and(tmp51, tmp19);
          r800_ffff_tmp125 = simd_or(r800_ffff_tmp123, r800_ffff_tmp124);
          cc_range_2cc0_2cf2_3 = simd_or(r800_ffff_tmp125, byte_b2);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(56), sequence_e2_b3_adv));
          r800_ffff_tmp126 = simd_and(sequence_e2_b3_adv, cc_range_2cc0_2cf2_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp126);
          byte_ea = simd_and(byte_range_e0_ef, tmp135);
          carryQ.cq[57] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(57), r800_ffff_tmp127));
          sequence_ea_99 = simd_and(r800_ffff_tmp127, byte_99);
          carryQ.cq[58] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(58), byte_ea_adv));
          sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
          r800_ffff_tmp128 = simd_and(basis_bits.bit_2, tmp119);
          r800_ffff_tmp129 = simd_andc(tmp14, r800_ffff_tmp128);
          cc_range_a640_a66c_3 = simd_andc(r800_ffff_tmp129, basis_bits.bit_7);
          carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(59), sequence_ea_99_adv));
          r800_ffff_tmp130 = simd_and(sequence_ea_99_adv, cc_range_a640_a66c_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp130);
          sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
          sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
          r800_ffff_tmp131 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
          r800_ffff_tmp132 = simd_andc(tmp22, r800_ffff_tmp131);
          cc_range_a680_a696_3 = simd_andc(r800_ffff_tmp132, basis_bits.bit_7);
          carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(60), sequence_ea_9a_adv));
          r800_ffff_tmp133 = simd_and(sequence_ea_9a_adv, cc_range_a680_a696_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp133);
          sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
          sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
          r800_ffff_tmp134 = simd_or(tmp41, tmp75);
          r800_ffff_tmp135 = simd_or(r800_ffff_tmp134, tmp105);
          r800_ffff_tmp136 = simd_or(r800_ffff_tmp135, tmp124);
          r800_ffff_tmp137 = simd_or(r800_ffff_tmp136, tmp135);
          r800_ffff_tmp138 = simd_or(r800_ffff_tmp137, tmp44);
          r800_ffff_tmp139 = simd_or(r800_ffff_tmp138, tmp153);
          r800_ffff_tmp140 = simd_and(tmp51, r800_ffff_tmp139);
          r800_ffff_tmp141 = simd_or(r800_ffff_tmp140, byte_b2);
          r800_ffff_tmp142 = simd_or(r800_ffff_tmp141, r800_ffff_tmp40);
          r800_ffff_tmp143 = simd_or(r800_ffff_tmp142, r800_ffff_tmp42);
          r800_ffff_tmp144 = simd_or(r800_ffff_tmp143, byte_b8);
          r800_ffff_tmp145 = simd_or(r800_ffff_tmp144, byte_ba);
          r800_ffff_tmp146 = simd_or(r800_ffff_tmp145, byte_bc);
          cc_range_a722_a73e_3 = simd_or(r800_ffff_tmp146, byte_be);
          carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(61), sequence_ea_9c_adv));
          r800_ffff_tmp147 = simd_and(sequence_ea_9c_adv, cc_range_a722_a73e_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp147);
          sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
          sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
          r800_ffff_tmp148 = simd_or(r800_ffff_tmp122, r800_ffff_tmp24);
          r800_ffff_tmp149 = simd_or(r800_ffff_tmp148, r800_ffff_tmp26);
          r800_ffff_tmp150 = simd_or(r800_ffff_tmp149, r800_ffff_tmp28);
          r800_ffff_tmp151 = simd_or(r800_ffff_tmp150, r800_ffff_tmp30);
          r800_ffff_tmp152 = simd_or(r800_ffff_tmp151, r800_ffff_tmp32);
          r800_ffff_tmp153 = simd_or(r800_ffff_tmp152, r800_ffff_tmp34);
          r800_ffff_tmp154 = simd_or(r800_ffff_tmp153, byte_b9);
          r800_ffff_tmp155 = simd_or(r800_ffff_tmp154, byte_bb);
          r800_ffff_tmp156 = simd_and(tmp129, tmp57);
          cc_range_a740_a77d_3 = simd_or(r800_ffff_tmp155, r800_ffff_tmp156);
          carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(62), sequence_ea_9d_adv));
          r800_ffff_tmp157 = simd_and(sequence_ea_9d_adv, cc_range_a740_a77d_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp157);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          r800_ffff_tmp158 = simd_andc(r800_ffff_tmp11, tmp138);
          r800_ffff_tmp159 = simd_andc(r800_ffff_tmp158, tmp19);
          r800_ffff_tmp160 = simd_andc(tmp32, r800_ffff_tmp159);
          r800_ffff_tmp161 = simd_or(r800_ffff_tmp160, byte_90);
          r800_ffff_tmp162 = simd_or(r800_ffff_tmp161, byte_92);
          r800_ffff_tmp163 = simd_or(r800_ffff_tmp162, r800_ffff_tmp21);
          r800_ffff_tmp164 = simd_or(r800_ffff_tmp163, tmp52);
          r800_ffff_tmp165 = simd_or(r800_ffff_tmp164, r800_ffff_tmp24);
          r800_ffff_tmp166 = simd_or(r800_ffff_tmp165, r800_ffff_tmp26);
          r800_ffff_tmp167 = simd_or(r800_ffff_tmp166, r800_ffff_tmp28);
          cc_range_a780_a7aa_3 = simd_or(r800_ffff_tmp167, r800_ffff_tmp30);
          carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(63), sequence_ea_9e_adv));
          r800_ffff_tmp168 = simd_and(sequence_ea_9e_adv, cc_range_a780_a7aa_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp168);
          byte_ef = simd_and(byte_range_e0_ef, tmp148);
          carryQ.cq[64] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(64), r800_ffff_tmp169));
          sequence_ef_bc = simd_and(r800_ffff_tmp169, byte_bc);
          carryQ.cq[65] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(65), byte_ef_adv));
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          byte_range_a1_ba = simd_and(byte_range_a0_bf, tmp10);
          carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(66), sequence_ef_bc_adv));
          r800_ffff_tmp170 = simd_and(sequence_ef_bc_adv, byte_range_a1_ba);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp170);
        }
        else {
          carryQ.CarryDequeueEnqueue(36, 31);
        }
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(67), tmp161));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp161, byte_range_80_bf);
        carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(68), tmp162));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp162, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(69, 2))) {
          r10000_10fff_tmp1 = simd_and(byte_range_80_bf, tmp15);
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          sequence_f0_90_90 = simd_and(tmp161, byte_90);
          carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(69), sequence_f0_90_adv));
          sequence_f0_90_90 = simd_and(sequence_f0_90_adv, byte_90);
          r10000_10fff_tmp2 = simd_and(basis_bits.bit_2, tmp37);
          byte_range_80_a7 = simd_andc(byte_range_80_bf, r10000_10fff_tmp2);
          carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_f0_90_90, carryQ.get_carry_in(70), sequence_f0_90_90_adv));
          r10000_10fff_tmp3 = simd_and(sequence_f0_90_90_adv, byte_range_80_a7);
          struct_Lu.cc = simd_or(struct_Lu.cc, r10000_10fff_tmp3);
        }
        else {
          carryQ.CarryDequeueEnqueue(69, 2);
        }
        carryQ.CarryQ_Adjust(71);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Lu & struct_Lu, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10;
		BitBlock byte_range_41_5a, tmp11, tmp12, tmp13, byte_f0, tmp14, tmp15, tmp16;
		BitBlock tmp17, tmp18, tmp19, byte_9d, tmp20, sequence_f0_9d, byte_f0_adv;
		BitBlock byte_90, tmp21, sequence_f0_9d_90, sequence_f0_9d_adv, tmp22, tmp23;
		BitBlock tmp24, tmp25, tmp26, tmp27, tmp28, cc_range_1d400_1d434_4;
		BitBlock sequence_f0_9d_90_adv, tmp29, tmp30, byte_91, sequence_f0_9d_91;
		BitBlock tmp31, tmp32, tmp33, tmp34, tmp35, tmp36, tmp37, tmp38;
		BitBlock cc_range_1d440_1d468_4, sequence_f0_9d_91_adv, tmp39, tmp40, tmp41;
		BitBlock byte_92, sequence_f0_9d_92, tmp42, tmp43, tmp44, tmp45, tmp46, tmp47;
		BitBlock tmp48, tmp49, tmp50, tmp51, tmp52, tmp53, tmp54, tmp55, tmp56, tmp57;
		BitBlock tmp58, tmp59, tmp60, tmp61, tmp62, tmp63, tmp64, tmp65, tmp66, tmp67;
		BitBlock tmp68, cc_range_1d480_1d4ae_4, sequence_f0_9d_92_adv, tmp69, tmp70;
		BitBlock byte_93, sequence_f0_9d_93, tmp71, tmp72, tmp73, byte_range_90_a9;
		BitBlock sequence_f0_9d_93_adv, tmp74, tmp75, byte_94, sequence_f0_9d_94;
		BitBlock tmp76, tmp77, tmp78, tmp79, tmp80, tmp81, tmp82, tmp83, tmp84, tmp85;
		BitBlock tmp86, tmp87, tmp88, tmp89, tmp90, tmp91, tmp92, tmp93, tmp94, tmp95;
		BitBlock tmp96, tmp97, tmp98, tmp99, tmp100, cc_range_1d504_1d53b_4;
		BitBlock sequence_f0_9d_94_adv, tmp101, tmp102, byte_95, sequence_f0_9d_95;
		BitBlock tmp103, tmp104, tmp105, tmp106, tmp107, tmp108, tmp109, tmp110;
		BitBlock tmp111, tmp112, tmp113, cc_range_1d540_1d56c_4, sequence_f0_9d_95_adv;
		BitBlock tmp114, byte_96, sequence_f0_9d_96, tmp115, tmp116;
		BitBlock cc_range_1d580_1d5a0_4, sequence_f0_9d_96_adv, tmp117, tmp118;
		BitBlock byte_97, sequence_f0_9d_97, tmp119, tmp120, tmp121, tmp122;
		BitBlock byte_range_94_ad, sequence_f0_9d_97_adv, tmp123, tmp124, byte_98;
		BitBlock sequence_f0_9d_98, tmp125, tmp126, tmp127, tmp128, tmp129;
		BitBlock cc_range_1d608_1d63c_4, sequence_f0_9d_98_adv, tmp130, tmp131;
		BitBlock byte_99, sequence_f0_9d_99, tmp132, tmp133, cc_range_1d640_1d670_4;
		BitBlock sequence_f0_9d_99_adv, tmp134, tmp135, byte_9a, sequence_f0_9d_9a;
		BitBlock tmp136, cc_range_1d680_1d6a8_4, sequence_f0_9d_9a_adv, tmp137, tmp138;
		BitBlock byte_9b, sequence_f0_9d_9b, tmp139, tmp140, tmp141;
		BitBlock cc_range_1d6c0_1d6e2_4, sequence_f0_9d_9b_adv, tmp142, byte_9c;
		BitBlock sequence_f0_9d_9c, tmp143, tmp144, tmp145, tmp146, byte_range_9c_b4;
		BitBlock sequence_f0_9d_9c_adv, tmp147, sequence_f0_9d_9d, tmp148, tmp149;
		BitBlock tmp150, tmp151, byte_range_96_ae, sequence_f0_9d_9d_adv, tmp152;
		BitBlock tmp153, byte_9e, sequence_f0_9d_9e, tmp154, tmp155, tmp156, tmp157;
		BitBlock tmp158, byte_range_90_a8, sequence_f0_9d_9e_adv, tmp159, byte_9f;
		BitBlock sequence_f0_9d_9f, byte_8a, sequence_f0_9d_9f_adv, tmp160;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, byte_c3, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, r80_7ff_tmp6, cc_range_c0_d8_2;
		BitBlock byte_c3_adv, r80_7ff_tmp7, byte_c4, r80_7ff_tmp8, r80_7ff_tmp9;
		BitBlock r80_7ff_tmp10, r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13;
		BitBlock r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16, r80_7ff_tmp17;
		BitBlock r80_7ff_tmp18, r80_7ff_tmp19, r80_7ff_tmp20, r80_7ff_tmp21;
		BitBlock r80_7ff_tmp22, r80_7ff_tmp23, r80_7ff_tmp24, r80_7ff_tmp25;
		BitBlock r80_7ff_tmp26, r80_7ff_tmp27, r80_7ff_tmp28, r80_7ff_tmp29;
		BitBlock r80_7ff_tmp30, r80_7ff_tmp31, r80_7ff_tmp32, r80_7ff_tmp33;
		BitBlock r80_7ff_tmp34, r80_7ff_tmp35, r80_7ff_tmp36, r80_7ff_tmp37;
		BitBlock r80_7ff_tmp38, r80_7ff_tmp39, r80_7ff_tmp40, r80_7ff_tmp41;
		BitBlock r80_7ff_tmp42, r80_7ff_tmp43, r80_7ff_tmp44, r80_7ff_tmp45;
		BitBlock r80_7ff_tmp46, r80_7ff_tmp47, r80_7ff_tmp48, r80_7ff_tmp49;
		BitBlock r80_7ff_tmp50, r80_7ff_tmp51, r80_7ff_tmp52, r80_7ff_tmp53;
		BitBlock cc_range_100_13f_2, byte_c4_adv, r80_7ff_tmp54, byte_c5;
		BitBlock r80_7ff_tmp55, r80_7ff_tmp56, r80_7ff_tmp57, r80_7ff_tmp58;
		BitBlock r80_7ff_tmp59, r80_7ff_tmp60, r80_7ff_tmp61, r80_7ff_tmp62;
		BitBlock r80_7ff_tmp63, r80_7ff_tmp64, r80_7ff_tmp65, r80_7ff_tmp66;
		BitBlock r80_7ff_tmp67, r80_7ff_tmp68, r80_7ff_tmp69, r80_7ff_tmp70;
		BitBlock r80_7ff_tmp71, r80_7ff_tmp72, r80_7ff_tmp73, r80_7ff_tmp74;
		BitBlock r80_7ff_tmp75, r80_7ff_tmp76, r80_7ff_tmp77, r80_7ff_tmp78;
		BitBlock r80_7ff_tmp79, r80_7ff_tmp80, r80_7ff_tmp81, r80_7ff_tmp82;
		BitBlock r80_7ff_tmp83, cc_range_141_17d_2, byte_c5_adv, r80_7ff_tmp84;
		BitBlock byte_c6, r80_7ff_tmp85, r80_7ff_tmp86, r80_7ff_tmp87, r80_7ff_tmp88;
		BitBlock r80_7ff_tmp89, r80_7ff_tmp90, r80_7ff_tmp91, r80_7ff_tmp92;
		BitBlock r80_7ff_tmp93, r80_7ff_tmp94, r80_7ff_tmp95, r80_7ff_tmp96;
		BitBlock r80_7ff_tmp97, r80_7ff_tmp98, r80_7ff_tmp99, r80_7ff_tmp100;
		BitBlock r80_7ff_tmp101, r80_7ff_tmp102, r80_7ff_tmp103, r80_7ff_tmp104;
		BitBlock r80_7ff_tmp105, r80_7ff_tmp106, r80_7ff_tmp107, r80_7ff_tmp108;
		BitBlock r80_7ff_tmp109, r80_7ff_tmp110, r80_7ff_tmp111, r80_7ff_tmp112;
		BitBlock r80_7ff_tmp113, r80_7ff_tmp114, r80_7ff_tmp115, r80_7ff_tmp116;
		BitBlock r80_7ff_tmp117, r80_7ff_tmp118, r80_7ff_tmp119, r80_7ff_tmp120;
		BitBlock r80_7ff_tmp121, r80_7ff_tmp122, r80_7ff_tmp123, r80_7ff_tmp124;
		BitBlock r80_7ff_tmp125, r80_7ff_tmp126, r80_7ff_tmp127, r80_7ff_tmp128;
		BitBlock r80_7ff_tmp129, r80_7ff_tmp130, r80_7ff_tmp131, r80_7ff_tmp132;
		BitBlock r80_7ff_tmp133, cc_range_181_1bc_2, byte_c6_adv, r80_7ff_tmp134;
		BitBlock byte_c7, r80_7ff_tmp135, r80_7ff_tmp136, r80_7ff_tmp137;
		BitBlock r80_7ff_tmp138, r80_7ff_tmp139, r80_7ff_tmp140, r80_7ff_tmp141;
		BitBlock r80_7ff_tmp142, r80_7ff_tmp143, r80_7ff_tmp144, r80_7ff_tmp145;
		BitBlock r80_7ff_tmp146, r80_7ff_tmp147, r80_7ff_tmp148, r80_7ff_tmp149;
		BitBlock r80_7ff_tmp150, r80_7ff_tmp151, r80_7ff_tmp152, r80_7ff_tmp153;
		BitBlock r80_7ff_tmp154, r80_7ff_tmp155, r80_7ff_tmp156, r80_7ff_tmp157;
		BitBlock r80_7ff_tmp158, r80_7ff_tmp159, r80_7ff_tmp160, r80_7ff_tmp161;
		BitBlock r80_7ff_tmp162, r80_7ff_tmp163, r80_7ff_tmp164, cc_range_1c4_1fe_2;
		BitBlock byte_c7_adv, r80_7ff_tmp165, byte_c8, r80_7ff_tmp166, r80_7ff_tmp167;
		BitBlock r80_7ff_tmp168, r80_7ff_tmp169, cc_range_200_23d_2, byte_c8_adv;
		BitBlock r80_7ff_tmp170, byte_c9, r80_7ff_tmp171, r80_7ff_tmp172;
		BitBlock r80_7ff_tmp173, r80_7ff_tmp174, r80_7ff_tmp175, r80_7ff_tmp176;
		BitBlock r80_7ff_tmp177, r80_7ff_tmp178, r80_7ff_tmp179, cc_range_241_24e_2;
		BitBlock byte_c9_adv, r80_7ff_tmp180, byte_cd, r80_7ff_tmp181;
		BitBlock cc_range_370_376_2, byte_cd_adv, r80_7ff_tmp182, byte_ce;
		BitBlock r80_7ff_tmp183, r80_7ff_tmp184, r80_7ff_tmp185, r80_7ff_tmp186;
		BitBlock r80_7ff_tmp187, r80_7ff_tmp188, r80_7ff_tmp189, r80_7ff_tmp190;
		BitBlock r80_7ff_tmp191, r80_7ff_tmp192, r80_7ff_tmp193, r80_7ff_tmp194;
		BitBlock cc_range_386_3a3_2, byte_ce_adv, r80_7ff_tmp195, byte_cf;
		BitBlock r80_7ff_tmp196, r80_7ff_tmp197, r80_7ff_tmp198, r80_7ff_tmp199;
		BitBlock r80_7ff_tmp200, r80_7ff_tmp201, r80_7ff_tmp202, r80_7ff_tmp203;
		BitBlock r80_7ff_tmp204, r80_7ff_tmp205, r80_7ff_tmp206, r80_7ff_tmp207;
		BitBlock r80_7ff_tmp208, r80_7ff_tmp209, r80_7ff_tmp210, r80_7ff_tmp211;
		BitBlock r80_7ff_tmp212, r80_7ff_tmp213, r80_7ff_tmp214, r80_7ff_tmp215;
		BitBlock r80_7ff_tmp216, r80_7ff_tmp217, r80_7ff_tmp218, cc_range_3cf_3fd_2;
		BitBlock byte_cf_adv, r80_7ff_tmp219, r80_7ff_tmp220, byte_d0;
		BitBlock byte_range_80_af, byte_d0_adv, r80_7ff_tmp221, byte_d1;
		BitBlock cc_range_460_47e_2, byte_d1_adv, r80_7ff_tmp222, byte_d2;
		BitBlock r80_7ff_tmp223, r80_7ff_tmp224, r80_7ff_tmp225, r80_7ff_tmp226;
		BitBlock r80_7ff_tmp227, r80_7ff_tmp228, r80_7ff_tmp229, r80_7ff_tmp230;
		BitBlock r80_7ff_tmp231, r80_7ff_tmp232, r80_7ff_tmp233, r80_7ff_tmp234;
		BitBlock r80_7ff_tmp235, r80_7ff_tmp236, r80_7ff_tmp237, r80_7ff_tmp238;
		BitBlock r80_7ff_tmp239, r80_7ff_tmp240, r80_7ff_tmp241, r80_7ff_tmp242;
		BitBlock r80_7ff_tmp243, r80_7ff_tmp244, r80_7ff_tmp245, r80_7ff_tmp246;
		BitBlock r80_7ff_tmp247, r80_7ff_tmp248, r80_7ff_tmp249, r80_7ff_tmp250;
		BitBlock cc_range_480_4be_2, byte_d2_adv, r80_7ff_tmp251, byte_d3;
		BitBlock r80_7ff_tmp252, r80_7ff_tmp253, r80_7ff_tmp254, r80_7ff_tmp255;
		BitBlock r80_7ff_tmp256, r80_7ff_tmp257, r80_7ff_tmp258, r80_7ff_tmp259;
		BitBlock r80_7ff_tmp260, r80_7ff_tmp261, r80_7ff_tmp262, r80_7ff_tmp263;
		BitBlock r80_7ff_tmp264, r80_7ff_tmp265, r80_7ff_tmp266, r80_7ff_tmp267;
		BitBlock r80_7ff_tmp268, r80_7ff_tmp269, r80_7ff_tmp270, r80_7ff_tmp271;
		BitBlock r80_7ff_tmp272, r80_7ff_tmp273, r80_7ff_tmp274, r80_7ff_tmp275;
		BitBlock r80_7ff_tmp276, r80_7ff_tmp277, r80_7ff_tmp278, r80_7ff_tmp279;
		BitBlock r80_7ff_tmp280, r80_7ff_tmp281, cc_range_4c0_4fe_2, byte_d3_adv;
		BitBlock r80_7ff_tmp282, byte_d4, r80_7ff_tmp283, r80_7ff_tmp284;
		BitBlock cc_range_500_531_2, byte_d4_adv, r80_7ff_tmp285, byte_d5;
		BitBlock byte_range_80_96, byte_d5_adv, r80_7ff_tmp286, byte_range_e0_ef;
		BitBlock byte_e1, byte_82, r800_ffff_tmp1, sequence_e1_82, byte_e1_adv;
		BitBlock byte_range_a0_bf, sequence_e1_82_adv, r800_ffff_tmp2, byte_83;
		BitBlock sequence_e1_83, r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock cc_range_10c0_10cd_3, sequence_e1_83_adv, r800_ffff_tmp6, byte_b8;
		BitBlock sequence_e1_b8, cc_range_1e00_1e3e_3, sequence_e1_b8_adv;
		BitBlock r800_ffff_tmp7, byte_b9, sequence_e1_b9, cc_range_1e40_1e7e_3;
		BitBlock sequence_e1_b9_adv, r800_ffff_tmp8, byte_ba, sequence_e1_ba;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, r800_ffff_tmp11, r800_ffff_tmp12;
		BitBlock r800_ffff_tmp13, r800_ffff_tmp14, r800_ffff_tmp15, r800_ffff_tmp16;
		BitBlock r800_ffff_tmp17, r800_ffff_tmp18, r800_ffff_tmp19, r800_ffff_tmp20;
		BitBlock r800_ffff_tmp21, r800_ffff_tmp22, r800_ffff_tmp23, r800_ffff_tmp24;
		BitBlock r800_ffff_tmp25, r800_ffff_tmp26, r800_ffff_tmp27, r800_ffff_tmp28;
		BitBlock r800_ffff_tmp29, r800_ffff_tmp30, r800_ffff_tmp31, r800_ffff_tmp32;
		BitBlock r800_ffff_tmp33, r800_ffff_tmp34, r800_ffff_tmp35, r800_ffff_tmp36;
		BitBlock r800_ffff_tmp37, r800_ffff_tmp38, r800_ffff_tmp39, r800_ffff_tmp40;
		BitBlock r800_ffff_tmp41, r800_ffff_tmp42, r800_ffff_tmp43, r800_ffff_tmp44;
		BitBlock r800_ffff_tmp45, r800_ffff_tmp46, r800_ffff_tmp47, r800_ffff_tmp48;
		BitBlock cc_range_1e80_1ebe_3, sequence_e1_ba_adv, r800_ffff_tmp49, byte_bb;
		BitBlock sequence_e1_bb, cc_range_1ec0_1efe_3, sequence_e1_bb_adv;
		BitBlock r800_ffff_tmp50, byte_bc, sequence_e1_bc, r800_ffff_tmp51;
		BitBlock r800_ffff_tmp52, r800_ffff_tmp53, r800_ffff_tmp54, r800_ffff_tmp55;
		BitBlock cc_range_1f08_1f38_3, sequence_e1_bc_adv, r800_ffff_tmp56, byte_bd;
		BitBlock sequence_e1_bd, r800_ffff_tmp57, r800_ffff_tmp58, r800_ffff_tmp59;
		BitBlock r800_ffff_tmp60, r800_ffff_tmp61, cc_range_1f48_1f68_3;
		BitBlock sequence_e1_bd_adv, r800_ffff_tmp62, byte_be, sequence_e1_be;
		BitBlock byte_range_b8_bb, sequence_e1_be_adv, r800_ffff_tmp63, byte_bf;
		BitBlock sequence_e1_bf, r800_ffff_tmp64, r800_ffff_tmp65, r800_ffff_tmp66;
		BitBlock r800_ffff_tmp67, r800_ffff_tmp68, cc_range_1fc8_1ff8_3;
		BitBlock sequence_e1_bf_adv, r800_ffff_tmp69, byte_e2, byte_84;
		BitBlock r800_ffff_tmp70, sequence_e2_84, byte_e2_adv, r800_ffff_tmp71;
		BitBlock r800_ffff_tmp72, r800_ffff_tmp73, r800_ffff_tmp74, r800_ffff_tmp75;
		BitBlock r800_ffff_tmp76, r800_ffff_tmp77, r800_ffff_tmp78, r800_ffff_tmp79;
		BitBlock r800_ffff_tmp80, r800_ffff_tmp81, r800_ffff_tmp82, r800_ffff_tmp83;
		BitBlock r800_ffff_tmp84, r800_ffff_tmp85, r800_ffff_tmp86, r800_ffff_tmp87;
		BitBlock r800_ffff_tmp88, r800_ffff_tmp89, r800_ffff_tmp90, r800_ffff_tmp91;
		BitBlock r800_ffff_tmp92, cc_range_2102_213e_3, sequence_e2_84_adv;
		BitBlock r800_ffff_tmp93, byte_85, sequence_e2_85, sequence_e2_85_adv;
		BitBlock r800_ffff_tmp94, byte_86, sequence_e2_86, sequence_e2_86_adv;
		BitBlock r800_ffff_tmp95, byte_b0, sequence_e2_b0, r800_ffff_tmp96;
		BitBlock byte_range_80_ae, sequence_e2_b0_adv, r800_ffff_tmp97, byte_b1;
		BitBlock sequence_e2_b1, r800_ffff_tmp98, r800_ffff_tmp99, r800_ffff_tmp100;
		BitBlock r800_ffff_tmp101, r800_ffff_tmp102, r800_ffff_tmp103;
		BitBlock r800_ffff_tmp104, r800_ffff_tmp105, r800_ffff_tmp106;
		BitBlock r800_ffff_tmp107, r800_ffff_tmp108, r800_ffff_tmp109;
		BitBlock r800_ffff_tmp110, r800_ffff_tmp111, r800_ffff_tmp112;
		BitBlock r800_ffff_tmp113, cc_range_2c60_2c7e_3, sequence_e2_b1_adv;
		BitBlock r800_ffff_tmp114, byte_b2, sequence_e2_b2, cc_range_2c80_2cbe_3;
		BitBlock sequence_e2_b2_adv, r800_ffff_tmp115, byte_b3, sequence_e2_b3;
		BitBlock r800_ffff_tmp116, r800_ffff_tmp117, r800_ffff_tmp118;
		BitBlock r800_ffff_tmp119, r800_ffff_tmp120, r800_ffff_tmp121;
		BitBlock r800_ffff_tmp122, r800_ffff_tmp123, r800_ffff_tmp124;
		BitBlock r800_ffff_tmp125, cc_range_2cc0_2cf2_3, sequence_e2_b3_adv;
		BitBlock r800_ffff_tmp126, byte_ea, r800_ffff_tmp127, sequence_ea_99;
		BitBlock byte_ea_adv, r800_ffff_tmp128, r800_ffff_tmp129, cc_range_a640_a66c_3;
		BitBlock sequence_ea_99_adv, r800_ffff_tmp130, sequence_ea_9a;
		BitBlock r800_ffff_tmp131, r800_ffff_tmp132, cc_range_a680_a696_3;
		BitBlock sequence_ea_9a_adv, r800_ffff_tmp133, sequence_ea_9c;
		BitBlock r800_ffff_tmp134, r800_ffff_tmp135, r800_ffff_tmp136;
		BitBlock r800_ffff_tmp137, r800_ffff_tmp138, r800_ffff_tmp139;
		BitBlock r800_ffff_tmp140, r800_ffff_tmp141, r800_ffff_tmp142;
		BitBlock r800_ffff_tmp143, r800_ffff_tmp144, r800_ffff_tmp145;
		BitBlock r800_ffff_tmp146, cc_range_a722_a73e_3, sequence_ea_9c_adv;
		BitBlock r800_ffff_tmp147, sequence_ea_9d, r800_ffff_tmp148, r800_ffff_tmp149;
		BitBlock r800_ffff_tmp150, r800_ffff_tmp151, r800_ffff_tmp152;
		BitBlock r800_ffff_tmp153, r800_ffff_tmp154, r800_ffff_tmp155;
		BitBlock r800_ffff_tmp156, cc_range_a740_a77d_3, sequence_ea_9d_adv;
		BitBlock r800_ffff_tmp157, sequence_ea_9e, r800_ffff_tmp158, r800_ffff_tmp159;
		BitBlock r800_ffff_tmp160, r800_ffff_tmp161, r800_ffff_tmp162;
		BitBlock r800_ffff_tmp163, r800_ffff_tmp164, r800_ffff_tmp165;
		BitBlock r800_ffff_tmp166, r800_ffff_tmp167, cc_range_a780_a7aa_3;
		BitBlock sequence_ea_9e_adv, r800_ffff_tmp168, byte_ef, r800_ffff_tmp169;
		BitBlock sequence_ef_bc, byte_ef_adv, byte_range_a1_ba, sequence_ef_bc_adv;
		BitBlock r800_ffff_tmp170, sequence_f0_90, byte_range_80_bf, tmp161;
		BitBlock sequence_f0_90_byte_range_80_bf, tmp162;
		BitBlock sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock r10000_10fff_tmp1, sequence_f0_90_90, sequence_f0_90_adv;
		BitBlock r10000_10fff_tmp2, byte_range_80_a7, sequence_f0_90_90_adv;
		BitBlock r10000_10fff_tmp3;




        struct_Lu.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_andc(tmp1, basis_bits.bit_2);
        tmp3 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp4 = simd_or(basis_bits.bit_5, tmp3);
        tmp5 = simd_and(basis_bits.bit_4, tmp4);
        tmp6 = simd_not(tmp5);
        tmp7 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp8 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp9 = simd_or(tmp7, tmp8);
        tmp10 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(tmp9, basis_bits.bit_3));
        byte_range_41_5a = simd_and(tmp2, tmp10);
        struct_Lu.cc = simd_or(struct_Lu.cc, byte_range_41_5a);
        tmp11 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp12 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp13 = simd_and(tmp11, tmp12);
        byte_f0 = simd_andc(tmp13, tmp9);
        tmp14 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp15 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp16 = simd_and(tmp14, tmp15);
        tmp17 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp18 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp19 = simd_and(tmp17, tmp18);
        byte_9d = simd_and(tmp16, tmp19);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp20));
        sequence_f0_9d = simd_and(tmp20, byte_9d);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        byte_90 = simd_andc(tmp16, tmp9);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(2), tmp21));
        sequence_f0_9d_90 = simd_and(tmp21, byte_90);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(3), sequence_f0_9d_adv));
        sequence_f0_9d_90 = simd_and(sequence_f0_9d_adv, byte_90);
        tmp22 = simd_andc(tmp14, basis_bits.bit_2);
        tmp23 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp24 = simd_and(basis_bits.bit_4, tmp23);
        tmp25 = simd_and(basis_bits.bit_3, tmp24);
        tmp26 = simd_andc(tmp22, tmp25);
        tmp27 = simd_and(tmp14, tmp12);
        tmp28 = simd_and(tmp27, tmp7);
        cc_range_1d400_1d434_4 = simd_or(tmp26, tmp28);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_90, carryQ.get_carry_in(4), sequence_f0_9d_90_adv));
        tmp29 = simd_and(sequence_f0_9d_90_adv, cc_range_1d400_1d434_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp29);
        tmp30 = simd_andc(tmp18, tmp7);
        byte_91 = simd_and(tmp16, tmp30);
        sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
        sequence_f0_9d_91 = simd_and(sequence_f0_9d_adv, byte_91);
        tmp31 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp32 = simd_andc(tmp14, tmp31);
        tmp33 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
        tmp34 = simd_and(basis_bits.bit_4, tmp33);
        tmp35 = simd_andc(tmp32, tmp34);
        tmp36 = simd_and(tmp14, basis_bits.bit_2);
        tmp37 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
        tmp38 = simd_and(tmp36, tmp37);
        cc_range_1d440_1d468_4 = simd_or(tmp35, tmp38);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_91, carryQ.get_carry_in(5), sequence_f0_9d_91_adv));
        tmp39 = simd_and(sequence_f0_9d_91_adv, cc_range_1d440_1d468_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp39);
        tmp40 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp41 = simd_andc(tmp40, tmp7);
        byte_92 = simd_and(tmp16, tmp41);
        sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
        sequence_f0_9d_92 = simd_and(sequence_f0_9d_adv, byte_92);
        tmp42 = simd_or(tmp7, basis_bits.bit_6);
        tmp43 = simd_andc(tmp32, tmp42);
        tmp44 = simd_andc(tmp17, tmp8);
        tmp45 = simd_and(tmp16, tmp44);
        tmp46 = simd_or(tmp43, tmp45);
        tmp47 = simd_and(tmp17, basis_bits.bit_6);
        tmp48 = simd_and(tmp16, tmp47);
        tmp49 = simd_or(tmp46, tmp48);
        tmp50 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp51 = simd_and(tmp14, tmp50);
        tmp52 = simd_and(tmp51, tmp41);
        tmp53 = simd_or(tmp49, tmp52);
        tmp54 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp55 = simd_and(tmp51, tmp54);
        tmp56 = simd_not(basis_bits.bit_7);
        tmp57 = simd_or(simd_and(basis_bits.bit_6, tmp56), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
        tmp58 = simd_and(tmp55, tmp57);
        tmp59 = simd_or(tmp53, tmp58);
        tmp60 = simd_and(tmp51, basis_bits.bit_4);
        tmp61 = simd_not(tmp8);
        tmp62 = simd_or(simd_and(basis_bits.bit_5, tmp61), simd_andc(tmp8, basis_bits.bit_5));
        tmp63 = simd_and(tmp60, tmp62);
        tmp64 = simd_or(tmp59, tmp63);
        tmp65 = simd_or(basis_bits.bit_4, tmp33);
        tmp66 = simd_not(tmp65);
        tmp67 = simd_or(simd_and(basis_bits.bit_3, tmp66), simd_andc(tmp47, basis_bits.bit_3));
        tmp68 = simd_and(tmp36, tmp67);
        cc_range_1d480_1d4ae_4 = simd_or(tmp64, tmp68);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_92, carryQ.get_carry_in(6), sequence_f0_9d_92_adv));
        tmp69 = simd_and(sequence_f0_9d_92_adv, cc_range_1d480_1d4ae_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp69);
        tmp70 = simd_andc(tmp3, tmp7);
        byte_93 = simd_and(tmp16, tmp70);
        sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
        sequence_f0_9d_93 = simd_and(sequence_f0_9d_adv, byte_93);
        tmp71 = simd_or(basis_bits.bit_3, tmp24);
        tmp72 = simd_not(tmp71);
        tmp73 = simd_or(simd_and(basis_bits.bit_2, tmp72), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
        byte_range_90_a9 = simd_and(tmp14, tmp73);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_93, carryQ.get_carry_in(7), sequence_f0_9d_93_adv));
        tmp74 = simd_and(sequence_f0_9d_93_adv, byte_range_90_a9);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp74);
        tmp75 = simd_andc(tmp54, tmp8);
        byte_94 = simd_and(tmp16, tmp75);
        sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
        sequence_f0_9d_94 = simd_and(sequence_f0_9d_adv, byte_94);
        tmp76 = simd_andc(tmp54, basis_bits.bit_6);
        tmp77 = simd_not(tmp4);
        tmp78 = simd_and(basis_bits.bit_5, tmp3);
        tmp79 = simd_or(simd_and(basis_bits.bit_4, tmp77), simd_andc(tmp78, basis_bits.bit_4));
        tmp80 = simd_or(tmp76, tmp79);
        tmp81 = simd_and(tmp32, tmp80);
        tmp82 = simd_and(basis_bits.bit_5, tmp8);
        tmp83 = simd_or(basis_bits.bit_4, tmp82);
        tmp84 = simd_not(tmp83);
        tmp85 = simd_and(tmp17, tmp8);
        tmp86 = simd_or(simd_and(basis_bits.bit_3, tmp84), simd_andc(tmp85, basis_bits.bit_3));
        tmp87 = simd_and(tmp22, tmp86);
        tmp88 = simd_or(tmp81, tmp87);
        tmp89 = simd_not(tmp82);
        tmp90 = simd_or(simd_and(basis_bits.bit_4, tmp89), simd_andc(tmp33, basis_bits.bit_4));
        tmp91 = simd_and(tmp16, tmp90);
        tmp92 = simd_or(tmp88, tmp91);
        tmp93 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp94 = simd_andc(tmp93, basis_bits.bit_6);
        tmp95 = simd_and(tmp27, tmp94);
        tmp96 = simd_or(tmp92, tmp95);
        tmp97 = simd_and(tmp27, basis_bits.bit_4);
        tmp98 = simd_not(tmp3);
        tmp99 = simd_or(simd_and(basis_bits.bit_5, tmp98), simd_andc(tmp3, basis_bits.bit_5));
        tmp100 = simd_and(tmp97, tmp99);
        cc_range_1d504_1d53b_4 = simd_or(tmp96, tmp100);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_94, carryQ.get_carry_in(8), sequence_f0_9d_94_adv));
        tmp101 = simd_and(sequence_f0_9d_94_adv, cc_range_1d504_1d53b_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp101);
        tmp102 = simd_and(tmp54, tmp18);
        byte_95 = simd_and(tmp16, tmp102);
        sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
        sequence_f0_9d_95 = simd_and(sequence_f0_9d_adv, byte_95);
        tmp103 = simd_andc(tmp32, basis_bits.bit_4);
        tmp104 = simd_andc(tmp103, tmp82);
        tmp105 = simd_and(tmp54, tmp40);
        tmp106 = simd_and(tmp32, tmp105);
        tmp107 = simd_or(tmp104, tmp106);
        tmp108 = simd_not(tmp9);
        tmp109 = simd_or(simd_and(basis_bits.bit_3, tmp108), simd_andc(tmp24, basis_bits.bit_3));
        tmp110 = simd_and(tmp22, tmp109);
        tmp111 = simd_or(tmp107, tmp110);
        tmp112 = simd_or(basis_bits.bit_3, tmp17);
        tmp113 = simd_and(tmp36, tmp112);
        cc_range_1d540_1d56c_4 = simd_or(tmp111, tmp113);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_95, carryQ.get_carry_in(9), sequence_f0_9d_95_adv));
        tmp114 = simd_and(sequence_f0_9d_95_adv, cc_range_1d540_1d56c_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp114);
        byte_96 = simd_and(tmp16, tmp105);
        sequence_f0_9d_96 = simd_and(sequence_f0_9d_adv, byte_96);
        sequence_f0_9d_96 = simd_and(sequence_f0_9d_adv, byte_96);
        tmp115 = simd_andc(tmp103, tmp33);
        tmp116 = simd_andc(tmp36, tmp25);
        cc_range_1d580_1d5a0_4 = simd_or(tmp115, tmp116);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_96, carryQ.get_carry_in(10), sequence_f0_9d_96_adv));
        tmp117 = simd_and(sequence_f0_9d_96_adv, cc_range_1d580_1d5a0_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp117);
        tmp118 = simd_and(tmp54, tmp3);
        byte_97 = simd_and(tmp16, tmp118);
        sequence_f0_9d_97 = simd_and(sequence_f0_9d_adv, byte_97);
        sequence_f0_9d_97 = simd_and(sequence_f0_9d_adv, byte_97);
        tmp119 = simd_or(basis_bits.bit_3, tmp47);
        tmp120 = simd_not(tmp119);
        tmp121 = simd_and(basis_bits.bit_3, tmp7);
        tmp122 = simd_or(simd_and(basis_bits.bit_2, tmp120), simd_andc(tmp121, basis_bits.bit_2));
        byte_range_94_ad = simd_and(tmp14, tmp122);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_97, carryQ.get_carry_in(11), sequence_f0_9d_97_adv));
        tmp123 = simd_and(sequence_f0_9d_97_adv, byte_range_94_ad);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp123);
        tmp124 = simd_andc(tmp93, tmp8);
        byte_98 = simd_and(tmp16, tmp124);
        sequence_f0_9d_98 = simd_and(sequence_f0_9d_adv, byte_98);
        sequence_f0_9d_98 = simd_and(sequence_f0_9d_adv, byte_98);
        tmp125 = simd_or(basis_bits.bit_3, tmp42);
        tmp126 = simd_not(tmp125);
        tmp127 = simd_or(simd_and(basis_bits.bit_2, tmp126), simd_andc(tmp37, basis_bits.bit_2));
        tmp128 = simd_and(tmp14, tmp127);
        tmp129 = simd_and(tmp27, tmp17);
        cc_range_1d608_1d63c_4 = simd_or(tmp128, tmp129);
        carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_98, carryQ.get_carry_in(12), sequence_f0_9d_98_adv));
        tmp130 = simd_and(sequence_f0_9d_98_adv, cc_range_1d608_1d63c_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp130);
        tmp131 = simd_and(tmp93, tmp18);
        byte_99 = simd_and(tmp16, tmp131);
        sequence_f0_9d_99 = simd_and(sequence_f0_9d_adv, byte_99);
        sequence_f0_9d_99 = simd_and(sequence_f0_9d_adv, byte_99);
        tmp132 = simd_and(basis_bits.bit_3, tmp65);
        tmp133 = simd_andc(tmp22, tmp132);
        cc_range_1d640_1d670_4 = simd_or(tmp133, tmp27);
        carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_99, carryQ.get_carry_in(13), sequence_f0_9d_99_adv));
        tmp134 = simd_and(sequence_f0_9d_99_adv, cc_range_1d640_1d670_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp134);
        tmp135 = simd_and(tmp93, tmp40);
        byte_9a = simd_and(tmp16, tmp135);
        sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
        sequence_f0_9d_9a = simd_and(sequence_f0_9d_adv, byte_9a);
        tmp136 = simd_andc(tmp32, tmp24);
        cc_range_1d680_1d6a8_4 = simd_or(tmp136, tmp38);
        carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9a, carryQ.get_carry_in(14), sequence_f0_9d_9a_adv));
        tmp137 = simd_and(sequence_f0_9d_9a_adv, cc_range_1d680_1d6a8_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp137);
        tmp138 = simd_and(tmp93, tmp3);
        byte_9b = simd_and(tmp16, tmp138);
        sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
        sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
        tmp139 = simd_andc(tmp32, tmp9);
        tmp140 = simd_or(simd_and(basis_bits.bit_3, tmp6), simd_andc(tmp42, basis_bits.bit_3));
        tmp141 = simd_and(tmp36, tmp140);
        cc_range_1d6c0_1d6e2_4 = simd_or(tmp139, tmp141);
        carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(15), sequence_f0_9d_9b_adv));
        tmp142 = simd_and(sequence_f0_9d_9b_adv, cc_range_1d6c0_1d6e2_4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp142);
        byte_9c = simd_and(tmp16, tmp44);
        sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
        sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
        tmp143 = simd_and(basis_bits.bit_3, tmp83);
        tmp144 = simd_not(tmp143);
        tmp145 = simd_and(basis_bits.bit_3, tmp17);
        tmp146 = simd_or(simd_and(basis_bits.bit_2, tmp144), simd_andc(tmp145, basis_bits.bit_2));
        byte_range_9c_b4 = simd_and(tmp14, tmp146);
        carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(16), sequence_f0_9d_9c_adv));
        tmp147 = simd_and(sequence_f0_9d_9c_adv, byte_range_9c_b4);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp147);
        sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
        sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
        tmp148 = simd_and(tmp17, tmp3);
        tmp149 = simd_or(basis_bits.bit_3, tmp148);
        tmp150 = simd_not(tmp149);
        tmp151 = simd_or(simd_and(basis_bits.bit_2, tmp150), simd_andc(tmp132, basis_bits.bit_2));
        byte_range_96_ae = simd_and(tmp14, tmp151);
        carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(17), sequence_f0_9d_9d_adv));
        tmp152 = simd_and(sequence_f0_9d_9d_adv, byte_range_96_ae);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp152);
        tmp153 = simd_and(tmp17, tmp40);
        byte_9e = simd_and(tmp16, tmp153);
        sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
        sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
        tmp154 = simd_or(basis_bits.bit_5, tmp8);
        tmp155 = simd_and(basis_bits.bit_4, tmp154);
        tmp156 = simd_or(basis_bits.bit_3, tmp155);
        tmp157 = simd_not(tmp156);
        tmp158 = simd_or(simd_and(basis_bits.bit_2, tmp157), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
        byte_range_90_a8 = simd_and(tmp14, tmp158);
        carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(18), sequence_f0_9d_9e_adv));
        tmp159 = simd_and(sequence_f0_9d_9e_adv, byte_range_90_a8);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp159);
        byte_9f = simd_and(tmp16, tmp148);
        sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
        sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
        byte_8a = simd_and(tmp32, tmp135);
        carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(19), sequence_f0_9d_9f_adv));
        tmp160 = simd_and(sequence_f0_9d_9f_adv, byte_8a);
        struct_Lu.cc = simd_or(struct_Lu.cc, tmp160);
        byte_range_c0_df = simd_andc(tmp11, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(20, 16))) {
          r80_7ff_tmp1 = simd_andc(tmp11, tmp31);
          byte_c3 = simd_and(r80_7ff_tmp1, tmp70);
          r80_7ff_tmp2 = simd_or(basis_bits.bit_4, tmp78);
          r80_7ff_tmp3 = simd_and(basis_bits.bit_3, r80_7ff_tmp2);
          r80_7ff_tmp4 = simd_andc(tmp22, r80_7ff_tmp3);
          r80_7ff_tmp5 = simd_and(tmp16, basis_bits.bit_4);
          r80_7ff_tmp6 = simd_andc(r80_7ff_tmp5, tmp78);
          cc_range_c0_d8_2 = simd_or(r80_7ff_tmp4, r80_7ff_tmp6);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(20), byte_c3_adv));
          r80_7ff_tmp7 = simd_and(byte_c3_adv, cc_range_c0_d8_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp7);
          byte_c4 = simd_and(r80_7ff_tmp1, tmp75);
          r80_7ff_tmp8 = simd_andc(tmp9, tmp41);
          r80_7ff_tmp9 = simd_andc(r80_7ff_tmp8, tmp75);
          r80_7ff_tmp10 = simd_andc(r80_7ff_tmp9, tmp105);
          r80_7ff_tmp11 = simd_andc(r80_7ff_tmp10, tmp124);
          r80_7ff_tmp12 = simd_andc(r80_7ff_tmp11, tmp135);
          r80_7ff_tmp13 = simd_andc(r80_7ff_tmp12, tmp44);
          r80_7ff_tmp14 = simd_andc(r80_7ff_tmp13, tmp153);
          r80_7ff_tmp15 = simd_andc(tmp32, r80_7ff_tmp14);
          r80_7ff_tmp16 = simd_or(r80_7ff_tmp15, byte_90);
          r80_7ff_tmp17 = simd_or(r80_7ff_tmp16, byte_92);
          r80_7ff_tmp18 = simd_or(r80_7ff_tmp17, byte_94);
          r80_7ff_tmp19 = simd_or(r80_7ff_tmp18, byte_96);
          r80_7ff_tmp20 = simd_or(r80_7ff_tmp19, byte_98);
          r80_7ff_tmp21 = simd_or(r80_7ff_tmp20, byte_9a);
          r80_7ff_tmp22 = simd_or(r80_7ff_tmp21, byte_9c);
          r80_7ff_tmp23 = simd_or(r80_7ff_tmp22, byte_9e);
          r80_7ff_tmp24 = simd_andc(tmp51, tmp9);
          r80_7ff_tmp25 = simd_or(r80_7ff_tmp23, r80_7ff_tmp24);
          r80_7ff_tmp26 = simd_or(r80_7ff_tmp25, tmp52);
          r80_7ff_tmp27 = simd_and(tmp51, tmp75);
          r80_7ff_tmp28 = simd_or(r80_7ff_tmp26, r80_7ff_tmp27);
          r80_7ff_tmp29 = simd_and(tmp51, tmp105);
          r80_7ff_tmp30 = simd_or(r80_7ff_tmp28, r80_7ff_tmp29);
          r80_7ff_tmp31 = simd_and(tmp51, tmp124);
          r80_7ff_tmp32 = simd_or(r80_7ff_tmp30, r80_7ff_tmp31);
          r80_7ff_tmp33 = simd_and(tmp51, tmp135);
          r80_7ff_tmp34 = simd_or(r80_7ff_tmp32, r80_7ff_tmp33);
          r80_7ff_tmp35 = simd_and(tmp51, tmp44);
          r80_7ff_tmp36 = simd_or(r80_7ff_tmp34, r80_7ff_tmp35);
          r80_7ff_tmp37 = simd_and(tmp51, tmp153);
          r80_7ff_tmp38 = simd_or(r80_7ff_tmp36, r80_7ff_tmp37);
          r80_7ff_tmp39 = simd_andc(tmp27, tmp9);
          r80_7ff_tmp40 = simd_or(r80_7ff_tmp38, r80_7ff_tmp39);
          r80_7ff_tmp41 = simd_and(tmp27, tmp41);
          r80_7ff_tmp42 = simd_or(r80_7ff_tmp40, r80_7ff_tmp41);
          r80_7ff_tmp43 = simd_and(tmp27, tmp75);
          r80_7ff_tmp44 = simd_or(r80_7ff_tmp42, r80_7ff_tmp43);
          r80_7ff_tmp45 = simd_and(tmp27, tmp105);
          r80_7ff_tmp46 = simd_or(r80_7ff_tmp44, r80_7ff_tmp45);
          r80_7ff_tmp47 = simd_and(tmp27, tmp131);
          r80_7ff_tmp48 = simd_or(r80_7ff_tmp46, r80_7ff_tmp47);
          r80_7ff_tmp49 = simd_and(tmp27, tmp138);
          r80_7ff_tmp50 = simd_or(r80_7ff_tmp48, r80_7ff_tmp49);
          r80_7ff_tmp51 = simd_and(tmp27, tmp19);
          r80_7ff_tmp52 = simd_or(r80_7ff_tmp50, r80_7ff_tmp51);
          r80_7ff_tmp53 = simd_and(tmp27, tmp148);
          cc_range_100_13f_2 = simd_or(r80_7ff_tmp52, r80_7ff_tmp53);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_c4, carryQ.get_carry_in(21), byte_c4_adv));
          r80_7ff_tmp54 = simd_and(byte_c4_adv, cc_range_100_13f_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp54);
          byte_c5 = simd_and(r80_7ff_tmp1, tmp102);
          r80_7ff_tmp55 = simd_andc(basis_bits.bit_7, tmp7);
          r80_7ff_tmp56 = simd_or(r80_7ff_tmp55, tmp102);
          r80_7ff_tmp57 = simd_or(r80_7ff_tmp56, tmp118);
          r80_7ff_tmp58 = simd_or(r80_7ff_tmp57, tmp135);
          r80_7ff_tmp59 = simd_or(r80_7ff_tmp58, tmp44);
          r80_7ff_tmp60 = simd_or(r80_7ff_tmp59, tmp153);
          r80_7ff_tmp61 = simd_and(tmp32, r80_7ff_tmp60);
          r80_7ff_tmp62 = simd_or(r80_7ff_tmp61, byte_90);
          r80_7ff_tmp63 = simd_or(r80_7ff_tmp62, byte_92);
          r80_7ff_tmp64 = simd_or(r80_7ff_tmp63, byte_94);
          r80_7ff_tmp65 = simd_or(r80_7ff_tmp64, byte_96);
          r80_7ff_tmp66 = simd_or(r80_7ff_tmp65, byte_98);
          r80_7ff_tmp67 = simd_or(r80_7ff_tmp66, byte_9a);
          r80_7ff_tmp68 = simd_or(r80_7ff_tmp67, byte_9c);
          r80_7ff_tmp69 = simd_or(r80_7ff_tmp68, byte_9e);
          r80_7ff_tmp70 = simd_or(r80_7ff_tmp69, r80_7ff_tmp24);
          r80_7ff_tmp71 = simd_or(r80_7ff_tmp70, tmp52);
          r80_7ff_tmp72 = simd_or(r80_7ff_tmp71, r80_7ff_tmp27);
          r80_7ff_tmp73 = simd_or(r80_7ff_tmp72, r80_7ff_tmp29);
          r80_7ff_tmp74 = simd_or(r80_7ff_tmp73, r80_7ff_tmp31);
          r80_7ff_tmp75 = simd_or(r80_7ff_tmp74, r80_7ff_tmp33);
          r80_7ff_tmp76 = simd_or(r80_7ff_tmp75, r80_7ff_tmp35);
          r80_7ff_tmp77 = simd_or(r80_7ff_tmp76, r80_7ff_tmp37);
          r80_7ff_tmp78 = simd_or(r80_7ff_tmp77, r80_7ff_tmp39);
          r80_7ff_tmp79 = simd_or(r80_7ff_tmp78, r80_7ff_tmp41);
          r80_7ff_tmp80 = simd_or(r80_7ff_tmp79, r80_7ff_tmp43);
          r80_7ff_tmp81 = simd_or(r80_7ff_tmp80, r80_7ff_tmp45);
          r80_7ff_tmp82 = simd_or(r80_7ff_tmp81, tmp95);
          r80_7ff_tmp83 = simd_or(r80_7ff_tmp82, r80_7ff_tmp49);
          cc_range_141_17d_2 = simd_or(r80_7ff_tmp83, r80_7ff_tmp51);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_c5, carryQ.get_carry_in(22), byte_c5_adv));
          r80_7ff_tmp84 = simd_and(byte_c5_adv, cc_range_141_17d_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp84);
          byte_c6 = simd_and(r80_7ff_tmp1, tmp105);
          r80_7ff_tmp85 = simd_andc(tmp32, tmp7);
          r80_7ff_tmp86 = simd_and(r80_7ff_tmp85, tmp57);
          r80_7ff_tmp87 = simd_and(tmp32, tmp75);
          r80_7ff_tmp88 = simd_or(r80_7ff_tmp86, r80_7ff_tmp87);
          r80_7ff_tmp89 = simd_and(tmp54, basis_bits.bit_6);
          r80_7ff_tmp90 = simd_and(tmp32, r80_7ff_tmp89);
          r80_7ff_tmp91 = simd_or(r80_7ff_tmp88, r80_7ff_tmp90);
          r80_7ff_tmp92 = simd_and(tmp32, tmp93);
          r80_7ff_tmp93 = simd_and(r80_7ff_tmp92, tmp8);
          r80_7ff_tmp94 = simd_or(r80_7ff_tmp91, r80_7ff_tmp93);
          r80_7ff_tmp95 = simd_not(tmp42);
          r80_7ff_tmp96 = simd_or(simd_and(basis_bits.bit_3, r80_7ff_tmp95), simd_andc(tmp47, basis_bits.bit_3));
          r80_7ff_tmp97 = simd_and(tmp22, r80_7ff_tmp96);
          r80_7ff_tmp98 = simd_or(r80_7ff_tmp94, r80_7ff_tmp97);
          r80_7ff_tmp99 = simd_andc(tmp16, basis_bits.bit_4);
          r80_7ff_tmp100 = simd_or(simd_and(basis_bits.bit_5, tmp61), simd_andc(tmp3, basis_bits.bit_5));
          r80_7ff_tmp101 = simd_and(r80_7ff_tmp99, r80_7ff_tmp100);
          r80_7ff_tmp102 = simd_or(r80_7ff_tmp98, r80_7ff_tmp101);
          r80_7ff_tmp103 = simd_not(tmp154);
          r80_7ff_tmp104 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp103), simd_andc(tmp33, basis_bits.bit_4));
          r80_7ff_tmp105 = simd_and(tmp16, r80_7ff_tmp104);
          r80_7ff_tmp106 = simd_or(r80_7ff_tmp102, r80_7ff_tmp105);
          r80_7ff_tmp107 = simd_andc(tmp17, basis_bits.bit_6);
          r80_7ff_tmp108 = simd_and(tmp16, r80_7ff_tmp107);
          r80_7ff_tmp109 = simd_or(r80_7ff_tmp106, r80_7ff_tmp108);
          r80_7ff_tmp110 = simd_or(basis_bits.bit_3, tmp9);
          r80_7ff_tmp111 = simd_not(r80_7ff_tmp110);
          r80_7ff_tmp112 = simd_and(basis_bits.bit_3, tmp148);
          r80_7ff_tmp113 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp111), simd_andc(r80_7ff_tmp112, basis_bits.bit_2));
          r80_7ff_tmp114 = simd_and(tmp14, r80_7ff_tmp113);
          r80_7ff_tmp115 = simd_or(r80_7ff_tmp109, r80_7ff_tmp114);
          r80_7ff_tmp116 = simd_or(r80_7ff_tmp115, tmp52);
          r80_7ff_tmp117 = simd_or(r80_7ff_tmp116, r80_7ff_tmp27);
          r80_7ff_tmp118 = simd_and(tmp51, r80_7ff_tmp89);
          r80_7ff_tmp119 = simd_or(r80_7ff_tmp117, r80_7ff_tmp118);
          r80_7ff_tmp120 = simd_and(tmp51, tmp131);
          r80_7ff_tmp121 = simd_or(r80_7ff_tmp119, r80_7ff_tmp120);
          r80_7ff_tmp122 = simd_or(r80_7ff_tmp121, r80_7ff_tmp35);
          r80_7ff_tmp123 = simd_and(tmp51, tmp47);
          r80_7ff_tmp124 = simd_or(r80_7ff_tmp122, r80_7ff_tmp123);
          r80_7ff_tmp125 = simd_andc(tmp27, tmp7);
          r80_7ff_tmp126 = simd_and(r80_7ff_tmp125, tmp8);
          r80_7ff_tmp127 = simd_or(r80_7ff_tmp124, r80_7ff_tmp126);
          r80_7ff_tmp128 = simd_and(tmp27, tmp102);
          r80_7ff_tmp129 = simd_or(r80_7ff_tmp127, r80_7ff_tmp128);
          r80_7ff_tmp130 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp103), simd_andc(tmp78, basis_bits.bit_4));
          r80_7ff_tmp131 = simd_and(tmp27, r80_7ff_tmp130);
          r80_7ff_tmp132 = simd_or(r80_7ff_tmp129, r80_7ff_tmp131);
          r80_7ff_tmp133 = simd_and(tmp27, tmp44);
          cc_range_181_1bc_2 = simd_or(r80_7ff_tmp132, r80_7ff_tmp133);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(byte_c6, carryQ.get_carry_in(23), byte_c6_adv));
          r80_7ff_tmp134 = simd_and(byte_c6_adv, cc_range_181_1bc_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp134);
          byte_c7 = simd_and(r80_7ff_tmp1, tmp118);
          r80_7ff_tmp135 = simd_andc(tmp8, tmp3);
          r80_7ff_tmp136 = simd_andc(tmp54, r80_7ff_tmp135);
          r80_7ff_tmp137 = simd_or(r80_7ff_tmp136, tmp135);
          r80_7ff_tmp138 = simd_or(r80_7ff_tmp137, tmp19);
          r80_7ff_tmp139 = simd_or(r80_7ff_tmp138, tmp148);
          r80_7ff_tmp140 = simd_and(tmp32, r80_7ff_tmp139);
          r80_7ff_tmp141 = simd_or(r80_7ff_tmp140, byte_91);
          r80_7ff_tmp142 = simd_or(r80_7ff_tmp141, byte_93);
          r80_7ff_tmp143 = simd_or(r80_7ff_tmp142, byte_95);
          r80_7ff_tmp144 = simd_or(r80_7ff_tmp143, byte_97);
          r80_7ff_tmp145 = simd_or(r80_7ff_tmp144, byte_99);
          r80_7ff_tmp146 = simd_or(r80_7ff_tmp145, byte_9b);
          r80_7ff_tmp147 = simd_or(r80_7ff_tmp146, byte_9e);
          r80_7ff_tmp148 = simd_or(r80_7ff_tmp147, r80_7ff_tmp24);
          r80_7ff_tmp149 = simd_or(r80_7ff_tmp148, tmp52);
          r80_7ff_tmp150 = simd_or(r80_7ff_tmp149, r80_7ff_tmp27);
          r80_7ff_tmp151 = simd_or(r80_7ff_tmp150, r80_7ff_tmp29);
          r80_7ff_tmp152 = simd_or(r80_7ff_tmp151, r80_7ff_tmp31);
          r80_7ff_tmp153 = simd_or(r80_7ff_tmp152, r80_7ff_tmp33);
          r80_7ff_tmp154 = simd_or(r80_7ff_tmp153, r80_7ff_tmp35);
          r80_7ff_tmp155 = simd_or(r80_7ff_tmp154, r80_7ff_tmp37);
          r80_7ff_tmp156 = simd_and(tmp27, tmp30);
          r80_7ff_tmp157 = simd_or(r80_7ff_tmp155, r80_7ff_tmp156);
          r80_7ff_tmp158 = simd_or(r80_7ff_tmp157, r80_7ff_tmp43);
          r80_7ff_tmp159 = simd_and(tmp27, r80_7ff_tmp104);
          r80_7ff_tmp160 = simd_or(r80_7ff_tmp158, r80_7ff_tmp159);
          r80_7ff_tmp161 = simd_and(tmp27, tmp135);
          r80_7ff_tmp162 = simd_or(r80_7ff_tmp160, r80_7ff_tmp161);
          r80_7ff_tmp163 = simd_or(r80_7ff_tmp162, r80_7ff_tmp133);
          r80_7ff_tmp164 = simd_and(tmp27, tmp153);
          cc_range_1c4_1fe_2 = simd_or(r80_7ff_tmp163, r80_7ff_tmp164);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_c7, carryQ.get_carry_in(24), byte_c7_adv));
          r80_7ff_tmp165 = simd_and(byte_c7_adv, cc_range_1c4_1fe_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp165);
          byte_c8 = simd_and(r80_7ff_tmp1, tmp124);
          r80_7ff_tmp166 = simd_and(tmp93, basis_bits.bit_6);
          r80_7ff_tmp167 = simd_and(tmp27, r80_7ff_tmp166);
          r80_7ff_tmp168 = simd_or(r80_7ff_tmp42, r80_7ff_tmp167);
          r80_7ff_tmp169 = simd_and(tmp129, tmp57);
          cc_range_200_23d_2 = simd_or(r80_7ff_tmp168, r80_7ff_tmp169);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_c8, carryQ.get_carry_in(25), byte_c8_adv));
          r80_7ff_tmp170 = simd_and(byte_c8_adv, cc_range_200_23d_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp170);
          byte_c9 = simd_and(r80_7ff_tmp1, tmp131);
          r80_7ff_tmp171 = simd_and(tmp32, tmp30);
          r80_7ff_tmp172 = simd_and(tmp103, tmp99);
          r80_7ff_tmp173 = simd_or(r80_7ff_tmp171, r80_7ff_tmp172);
          r80_7ff_tmp174 = simd_and(tmp32, tmp124);
          r80_7ff_tmp175 = simd_or(r80_7ff_tmp173, r80_7ff_tmp174);
          r80_7ff_tmp176 = simd_or(r80_7ff_tmp175, byte_8a);
          r80_7ff_tmp177 = simd_and(tmp32, tmp44);
          r80_7ff_tmp178 = simd_or(r80_7ff_tmp176, r80_7ff_tmp177);
          r80_7ff_tmp179 = simd_and(tmp32, tmp153);
          cc_range_241_24e_2 = simd_or(r80_7ff_tmp178, r80_7ff_tmp179);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(byte_c9, carryQ.get_carry_in(26), byte_c9_adv));
          r80_7ff_tmp180 = simd_and(byte_c9_adv, cc_range_241_24e_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp180);
          byte_cd = simd_and(r80_7ff_tmp1, tmp19);
          r80_7ff_tmp181 = simd_andc(r80_7ff_tmp8, tmp105);
          cc_range_370_376_2 = simd_andc(tmp27, r80_7ff_tmp181);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(27), byte_cd_adv));
          r80_7ff_tmp182 = simd_and(byte_cd_adv, cc_range_370_376_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp182);
          byte_ce = simd_and(r80_7ff_tmp1, tmp153);
          r80_7ff_tmp183 = simd_andc(r80_7ff_tmp92, tmp3);
          r80_7ff_tmp184 = simd_or(tmp106, r80_7ff_tmp183);
          r80_7ff_tmp185 = simd_or(r80_7ff_tmp184, r80_7ff_tmp177);
          r80_7ff_tmp186 = simd_and(tmp32, tmp47);
          r80_7ff_tmp187 = simd_or(r80_7ff_tmp185, r80_7ff_tmp186);
          r80_7ff_tmp188 = simd_and(basis_bits.bit_3, tmp9);
          r80_7ff_tmp189 = simd_or(simd_and(basis_bits.bit_2, tmp126), simd_andc(r80_7ff_tmp188, basis_bits.bit_2));
          r80_7ff_tmp190 = simd_and(tmp14, r80_7ff_tmp189);
          r80_7ff_tmp191 = simd_or(r80_7ff_tmp187, r80_7ff_tmp190);
          r80_7ff_tmp192 = simd_not(basis_bits.bit_5);
          r80_7ff_tmp193 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp192), simd_andc(tmp4, basis_bits.bit_4));
          r80_7ff_tmp194 = simd_and(tmp51, r80_7ff_tmp193);
          cc_range_386_3a3_2 = simd_or(r80_7ff_tmp191, r80_7ff_tmp194);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(28), byte_ce_adv));
          r80_7ff_tmp195 = simd_and(byte_ce_adv, cc_range_386_3a3_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp195);
          byte_cf = simd_and(r80_7ff_tmp1, tmp148);
          r80_7ff_tmp196 = simd_and(tmp32, tmp148);
          r80_7ff_tmp197 = simd_or(simd_and(basis_bits.bit_5, tmp61), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r80_7ff_tmp198 = simd_and(r80_7ff_tmp99, r80_7ff_tmp197);
          r80_7ff_tmp199 = simd_or(r80_7ff_tmp196, r80_7ff_tmp198);
          r80_7ff_tmp200 = simd_or(r80_7ff_tmp199, byte_98);
          r80_7ff_tmp201 = simd_or(r80_7ff_tmp200, byte_9a);
          r80_7ff_tmp202 = simd_or(r80_7ff_tmp201, byte_9c);
          r80_7ff_tmp203 = simd_or(r80_7ff_tmp202, byte_9e);
          r80_7ff_tmp204 = simd_or(r80_7ff_tmp203, r80_7ff_tmp24);
          r80_7ff_tmp205 = simd_or(r80_7ff_tmp204, tmp52);
          r80_7ff_tmp206 = simd_or(r80_7ff_tmp205, r80_7ff_tmp27);
          r80_7ff_tmp207 = simd_or(r80_7ff_tmp206, r80_7ff_tmp29);
          r80_7ff_tmp208 = simd_or(r80_7ff_tmp207, r80_7ff_tmp31);
          r80_7ff_tmp209 = simd_or(r80_7ff_tmp208, r80_7ff_tmp33);
          r80_7ff_tmp210 = simd_or(r80_7ff_tmp209, r80_7ff_tmp35);
          r80_7ff_tmp211 = simd_or(r80_7ff_tmp210, r80_7ff_tmp37);
          r80_7ff_tmp212 = simd_or(r80_7ff_tmp211, r80_7ff_tmp43);
          r80_7ff_tmp213 = simd_and(tmp27, tmp118);
          r80_7ff_tmp214 = simd_or(r80_7ff_tmp212, r80_7ff_tmp213);
          r80_7ff_tmp215 = simd_and(tmp27, tmp93);
          r80_7ff_tmp216 = simd_and(r80_7ff_tmp215, tmp57);
          r80_7ff_tmp217 = simd_or(r80_7ff_tmp214, r80_7ff_tmp216);
          r80_7ff_tmp218 = simd_and(tmp129, tmp8);
          cc_range_3cf_3fd_2 = simd_or(r80_7ff_tmp217, r80_7ff_tmp218);
          carryQ.cq[29] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(29), byte_cf_adv));
          r80_7ff_tmp219 = simd_and(byte_cf_adv, cc_range_3cf_3fd_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp219);
          r80_7ff_tmp220 = simd_and(tmp11, tmp15);
          byte_d0 = simd_andc(r80_7ff_tmp220, tmp9);
          byte_range_80_af = simd_andc(tmp14, tmp12);
          carryQ.cq[30] = carryout2carry(pablo_blk_Advance(byte_d0, carryQ.get_carry_in(30), byte_d0_adv));
          r80_7ff_tmp221 = simd_and(byte_d0_adv, byte_range_80_af);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp221);
          byte_d1 = simd_and(r80_7ff_tmp220, tmp30);
          cc_range_460_47e_2 = simd_andc(tmp36, basis_bits.bit_7);
          carryQ.cq[31] = carryout2carry(pablo_blk_Advance(byte_d1, carryQ.get_carry_in(31), byte_d1_adv));
          r80_7ff_tmp222 = simd_and(byte_d1_adv, cc_range_460_47e_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp222);
          byte_d2 = simd_and(r80_7ff_tmp220, tmp41);
          r80_7ff_tmp223 = simd_andc(tmp9, tmp135);
          r80_7ff_tmp224 = simd_andc(r80_7ff_tmp223, tmp44);
          r80_7ff_tmp225 = simd_andc(r80_7ff_tmp224, tmp153);
          r80_7ff_tmp226 = simd_andc(tmp32, r80_7ff_tmp225);
          r80_7ff_tmp227 = simd_or(r80_7ff_tmp226, byte_90);
          r80_7ff_tmp228 = simd_or(r80_7ff_tmp227, byte_92);
          r80_7ff_tmp229 = simd_or(r80_7ff_tmp228, byte_94);
          r80_7ff_tmp230 = simd_or(r80_7ff_tmp229, byte_96);
          r80_7ff_tmp231 = simd_or(r80_7ff_tmp230, byte_98);
          r80_7ff_tmp232 = simd_or(r80_7ff_tmp231, byte_9a);
          r80_7ff_tmp233 = simd_or(r80_7ff_tmp232, byte_9c);
          r80_7ff_tmp234 = simd_or(r80_7ff_tmp233, byte_9e);
          r80_7ff_tmp235 = simd_or(r80_7ff_tmp234, r80_7ff_tmp24);
          r80_7ff_tmp236 = simd_or(r80_7ff_tmp235, tmp52);
          r80_7ff_tmp237 = simd_or(r80_7ff_tmp236, r80_7ff_tmp27);
          r80_7ff_tmp238 = simd_or(r80_7ff_tmp237, r80_7ff_tmp29);
          r80_7ff_tmp239 = simd_or(r80_7ff_tmp238, r80_7ff_tmp31);
          r80_7ff_tmp240 = simd_or(r80_7ff_tmp239, r80_7ff_tmp33);
          r80_7ff_tmp241 = simd_or(r80_7ff_tmp240, r80_7ff_tmp35);
          r80_7ff_tmp242 = simd_or(r80_7ff_tmp241, r80_7ff_tmp37);
          r80_7ff_tmp243 = simd_or(r80_7ff_tmp242, r80_7ff_tmp39);
          r80_7ff_tmp244 = simd_or(r80_7ff_tmp243, r80_7ff_tmp41);
          r80_7ff_tmp245 = simd_or(r80_7ff_tmp244, r80_7ff_tmp43);
          r80_7ff_tmp246 = simd_or(r80_7ff_tmp245, r80_7ff_tmp45);
          r80_7ff_tmp247 = simd_and(tmp27, tmp124);
          r80_7ff_tmp248 = simd_or(r80_7ff_tmp246, r80_7ff_tmp247);
          r80_7ff_tmp249 = simd_or(r80_7ff_tmp248, r80_7ff_tmp161);
          r80_7ff_tmp250 = simd_or(r80_7ff_tmp249, r80_7ff_tmp133);
          cc_range_480_4be_2 = simd_or(r80_7ff_tmp250, r80_7ff_tmp164);
          carryQ.cq[32] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(32), byte_d2_adv));
          r80_7ff_tmp251 = simd_and(byte_d2_adv, cc_range_480_4be_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp251);
          byte_d3 = simd_and(r80_7ff_tmp220, tmp70);
          r80_7ff_tmp252 = simd_andc(tmp42, tmp70);
          r80_7ff_tmp253 = simd_andc(r80_7ff_tmp252, tmp102);
          r80_7ff_tmp254 = simd_andc(r80_7ff_tmp253, tmp118);
          r80_7ff_tmp255 = simd_andc(r80_7ff_tmp254, tmp131);
          r80_7ff_tmp256 = simd_andc(r80_7ff_tmp255, tmp138);
          r80_7ff_tmp257 = simd_andc(r80_7ff_tmp256, tmp19);
          r80_7ff_tmp258 = simd_andc(tmp32, r80_7ff_tmp257);
          r80_7ff_tmp259 = simd_or(r80_7ff_tmp258, byte_90);
          r80_7ff_tmp260 = simd_or(r80_7ff_tmp259, byte_92);
          r80_7ff_tmp261 = simd_or(r80_7ff_tmp260, byte_94);
          r80_7ff_tmp262 = simd_or(r80_7ff_tmp261, byte_96);
          r80_7ff_tmp263 = simd_or(r80_7ff_tmp262, byte_98);
          r80_7ff_tmp264 = simd_or(r80_7ff_tmp263, byte_9a);
          r80_7ff_tmp265 = simd_or(r80_7ff_tmp264, byte_9c);
          r80_7ff_tmp266 = simd_or(r80_7ff_tmp265, byte_9e);
          r80_7ff_tmp267 = simd_or(r80_7ff_tmp266, r80_7ff_tmp24);
          r80_7ff_tmp268 = simd_or(r80_7ff_tmp267, tmp52);
          r80_7ff_tmp269 = simd_or(r80_7ff_tmp268, r80_7ff_tmp27);
          r80_7ff_tmp270 = simd_or(r80_7ff_tmp269, r80_7ff_tmp29);
          r80_7ff_tmp271 = simd_or(r80_7ff_tmp270, r80_7ff_tmp31);
          r80_7ff_tmp272 = simd_or(r80_7ff_tmp271, r80_7ff_tmp33);
          r80_7ff_tmp273 = simd_or(r80_7ff_tmp272, r80_7ff_tmp35);
          r80_7ff_tmp274 = simd_or(r80_7ff_tmp273, r80_7ff_tmp37);
          r80_7ff_tmp275 = simd_or(r80_7ff_tmp274, r80_7ff_tmp39);
          r80_7ff_tmp276 = simd_or(r80_7ff_tmp275, r80_7ff_tmp41);
          r80_7ff_tmp277 = simd_or(r80_7ff_tmp276, r80_7ff_tmp43);
          r80_7ff_tmp278 = simd_or(r80_7ff_tmp277, r80_7ff_tmp45);
          r80_7ff_tmp279 = simd_or(r80_7ff_tmp278, r80_7ff_tmp247);
          r80_7ff_tmp280 = simd_or(r80_7ff_tmp279, r80_7ff_tmp161);
          r80_7ff_tmp281 = simd_or(r80_7ff_tmp280, r80_7ff_tmp133);
          cc_range_4c0_4fe_2 = simd_or(r80_7ff_tmp281, r80_7ff_tmp164);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(byte_d3, carryQ.get_carry_in(33), byte_d3_adv));
          r80_7ff_tmp282 = simd_and(byte_d3_adv, cc_range_4c0_4fe_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp282);
          byte_d4 = simd_and(r80_7ff_tmp220, tmp75);
          r80_7ff_tmp283 = simd_or(basis_bits.bit_4, tmp154);
          r80_7ff_tmp284 = simd_and(tmp27, r80_7ff_tmp283);
          cc_range_500_531_2 = simd_or(r80_7ff_tmp30, r80_7ff_tmp284);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(34), byte_d4_adv));
          r80_7ff_tmp285 = simd_and(byte_d4_adv, cc_range_500_531_2);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp285);
          byte_d5 = simd_and(r80_7ff_tmp220, tmp102);
          byte_range_80_96 = simd_andc(tmp22, r80_7ff_tmp3);
          carryQ.cq[35] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(35), byte_d5_adv));
          r80_7ff_tmp286 = simd_and(byte_d5_adv, byte_range_80_96);
          struct_Lu.cc = simd_or(struct_Lu.cc, r80_7ff_tmp286);
        }
        else {
          carryQ.CarryDequeueEnqueue(20, 16);
        }
        byte_range_e0_ef = simd_and(tmp11, tmp50);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(36, 31))) {
          byte_e1 = simd_and(byte_range_e0_ef, tmp30);
          byte_82 = simd_and(tmp32, tmp41);
          carryQ.cq[36] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(36), r800_ffff_tmp1));
          sequence_e1_82 = simd_and(r800_ffff_tmp1, byte_82);
          carryQ.cq[37] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(37), byte_e1_adv));
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          byte_range_a0_bf = simd_and(tmp14, basis_bits.bit_2);
          carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(38), sequence_e1_82_adv));
          r800_ffff_tmp2 = simd_and(sequence_e1_82_adv, byte_range_a0_bf);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp2);
          byte_83 = simd_and(tmp32, tmp70);
          sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
          sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
          r800_ffff_tmp3 = simd_and(tmp32, tmp118);
          r800_ffff_tmp4 = simd_or(tmp115, r800_ffff_tmp3);
          r800_ffff_tmp5 = simd_and(tmp32, tmp19);
          cc_range_10c0_10cd_3 = simd_or(r800_ffff_tmp4, r800_ffff_tmp5);
          carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(39), sequence_e1_83_adv));
          r800_ffff_tmp6 = simd_and(sequence_e1_83_adv, cc_range_10c0_10cd_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp6);
          byte_b8 = simd_and(tmp27, tmp124);
          sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
          sequence_e1_b8 = simd_and(byte_e1_adv, byte_b8);
          cc_range_1e00_1e3e_3 = simd_andc(tmp14, basis_bits.bit_7);
          carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e1_b8, carryQ.get_carry_in(40), sequence_e1_b8_adv));
          r800_ffff_tmp7 = simd_and(sequence_e1_b8_adv, cc_range_1e00_1e3e_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp7);
          byte_b9 = simd_and(tmp27, tmp131);
          sequence_e1_b9 = simd_and(byte_e1_adv, byte_b9);
          sequence_e1_b9 = simd_and(byte_e1_adv, byte_b9);
          cc_range_1e40_1e7e_3 = simd_andc(tmp14, basis_bits.bit_7);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e1_b9, carryQ.get_carry_in(41), sequence_e1_b9_adv));
          r800_ffff_tmp8 = simd_and(sequence_e1_b9_adv, cc_range_1e40_1e7e_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp8);
          byte_ba = simd_and(tmp27, tmp135);
          sequence_e1_ba = simd_and(byte_e1_adv, byte_ba);
          sequence_e1_ba = simd_and(byte_e1_adv, byte_ba);
          r800_ffff_tmp9 = simd_andc(tmp9, tmp41);
          r800_ffff_tmp10 = simd_andc(r800_ffff_tmp9, tmp75);
          r800_ffff_tmp11 = simd_andc(r800_ffff_tmp10, tmp105);
          r800_ffff_tmp12 = simd_andc(r800_ffff_tmp11, tmp124);
          r800_ffff_tmp13 = simd_andc(r800_ffff_tmp12, tmp135);
          r800_ffff_tmp14 = simd_andc(r800_ffff_tmp13, tmp44);
          r800_ffff_tmp15 = simd_andc(r800_ffff_tmp14, tmp153);
          r800_ffff_tmp16 = simd_andc(tmp32, r800_ffff_tmp15);
          r800_ffff_tmp17 = simd_or(r800_ffff_tmp16, byte_90);
          r800_ffff_tmp18 = simd_or(r800_ffff_tmp17, byte_92);
          r800_ffff_tmp19 = simd_or(r800_ffff_tmp18, byte_94);
          r800_ffff_tmp20 = simd_or(r800_ffff_tmp19, byte_9e);
          r800_ffff_tmp21 = simd_andc(tmp51, tmp9);
          r800_ffff_tmp22 = simd_or(r800_ffff_tmp20, r800_ffff_tmp21);
          r800_ffff_tmp23 = simd_or(r800_ffff_tmp22, tmp52);
          r800_ffff_tmp24 = simd_and(tmp51, tmp75);
          r800_ffff_tmp25 = simd_or(r800_ffff_tmp23, r800_ffff_tmp24);
          r800_ffff_tmp26 = simd_and(tmp51, tmp105);
          r800_ffff_tmp27 = simd_or(r800_ffff_tmp25, r800_ffff_tmp26);
          r800_ffff_tmp28 = simd_and(tmp51, tmp124);
          r800_ffff_tmp29 = simd_or(r800_ffff_tmp27, r800_ffff_tmp28);
          r800_ffff_tmp30 = simd_and(tmp51, tmp135);
          r800_ffff_tmp31 = simd_or(r800_ffff_tmp29, r800_ffff_tmp30);
          r800_ffff_tmp32 = simd_and(tmp51, tmp44);
          r800_ffff_tmp33 = simd_or(r800_ffff_tmp31, r800_ffff_tmp32);
          r800_ffff_tmp34 = simd_and(tmp51, tmp153);
          r800_ffff_tmp35 = simd_or(r800_ffff_tmp33, r800_ffff_tmp34);
          r800_ffff_tmp36 = simd_andc(tmp27, tmp9);
          r800_ffff_tmp37 = simd_or(r800_ffff_tmp35, r800_ffff_tmp36);
          r800_ffff_tmp38 = simd_and(tmp27, tmp41);
          r800_ffff_tmp39 = simd_or(r800_ffff_tmp37, r800_ffff_tmp38);
          r800_ffff_tmp40 = simd_and(tmp27, tmp75);
          r800_ffff_tmp41 = simd_or(r800_ffff_tmp39, r800_ffff_tmp40);
          r800_ffff_tmp42 = simd_and(tmp27, tmp105);
          r800_ffff_tmp43 = simd_or(r800_ffff_tmp41, r800_ffff_tmp42);
          r800_ffff_tmp44 = simd_or(r800_ffff_tmp43, byte_b8);
          r800_ffff_tmp45 = simd_or(r800_ffff_tmp44, byte_ba);
          r800_ffff_tmp46 = simd_and(tmp27, tmp44);
          r800_ffff_tmp47 = simd_or(r800_ffff_tmp45, r800_ffff_tmp46);
          r800_ffff_tmp48 = simd_and(tmp27, tmp153);
          cc_range_1e80_1ebe_3 = simd_or(r800_ffff_tmp47, r800_ffff_tmp48);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e1_ba, carryQ.get_carry_in(42), sequence_e1_ba_adv));
          r800_ffff_tmp49 = simd_and(sequence_e1_ba_adv, cc_range_1e80_1ebe_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp49);
          byte_bb = simd_and(tmp27, tmp138);
          sequence_e1_bb = simd_and(byte_e1_adv, byte_bb);
          sequence_e1_bb = simd_and(byte_e1_adv, byte_bb);
          cc_range_1ec0_1efe_3 = simd_andc(tmp14, basis_bits.bit_7);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e1_bb, carryQ.get_carry_in(43), sequence_e1_bb_adv));
          r800_ffff_tmp50 = simd_and(sequence_e1_bb_adv, cc_range_1ec0_1efe_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp50);
          byte_bc = simd_and(tmp27, tmp44);
          sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
          sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
          r800_ffff_tmp51 = simd_and(tmp32, basis_bits.bit_4);
          r800_ffff_tmp52 = simd_and(tmp16, basis_bits.bit_4);
          r800_ffff_tmp53 = simd_andc(r800_ffff_tmp52, tmp33);
          r800_ffff_tmp54 = simd_or(r800_ffff_tmp51, r800_ffff_tmp53);
          r800_ffff_tmp55 = simd_or(r800_ffff_tmp54, tmp60);
          cc_range_1f08_1f38_3 = simd_or(r800_ffff_tmp55, tmp97);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(44), sequence_e1_bc_adv));
          r800_ffff_tmp56 = simd_and(sequence_e1_bc_adv, cc_range_1f08_1f38_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp56);
          byte_bd = simd_and(tmp27, tmp19);
          sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
          sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
          r800_ffff_tmp57 = simd_andc(r800_ffff_tmp51, tmp33);
          r800_ffff_tmp58 = simd_or(r800_ffff_tmp57, byte_99);
          r800_ffff_tmp59 = simd_or(r800_ffff_tmp58, byte_9b);
          r800_ffff_tmp60 = simd_or(r800_ffff_tmp59, byte_9d);
          r800_ffff_tmp61 = simd_or(r800_ffff_tmp60, byte_9f);
          cc_range_1f48_1f68_3 = simd_or(r800_ffff_tmp61, tmp60);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(45), sequence_e1_bd_adv));
          r800_ffff_tmp62 = simd_and(sequence_e1_bd_adv, cc_range_1f48_1f68_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp62);
          byte_be = simd_and(tmp27, tmp153);
          sequence_e1_be = simd_and(byte_e1_adv, byte_be);
          sequence_e1_be = simd_and(byte_e1_adv, byte_be);
          byte_range_b8_bb = simd_and(tmp27, tmp93);
          carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(46), sequence_e1_be_adv));
          r800_ffff_tmp63 = simd_and(sequence_e1_be_adv, byte_range_b8_bb);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp63);
          byte_bf = simd_and(tmp27, tmp148);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          r800_ffff_tmp64 = simd_andc(tmp31, tmp15);
          r800_ffff_tmp65 = simd_andc(tmp14, r800_ffff_tmp64);
          r800_ffff_tmp66 = simd_and(tmp93, r800_ffff_tmp65);
          r800_ffff_tmp67 = simd_andc(tmp60, tmp82);
          r800_ffff_tmp68 = simd_or(r800_ffff_tmp66, r800_ffff_tmp67);
          cc_range_1fc8_1ff8_3 = simd_or(r800_ffff_tmp68, byte_range_b8_bb);
          carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(47), sequence_e1_bf_adv));
          r800_ffff_tmp69 = simd_and(sequence_e1_bf_adv, cc_range_1fc8_1ff8_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp69);
          byte_e2 = simd_and(byte_range_e0_ef, tmp41);
          byte_84 = simd_and(tmp32, tmp75);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(48), r800_ffff_tmp70));
          sequence_e2_84 = simd_and(r800_ffff_tmp70, byte_84);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(49), byte_e2_adv));
          sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
          r800_ffff_tmp71 = simd_or(tmp41, tmp118);
          r800_ffff_tmp72 = simd_and(tmp32, r800_ffff_tmp71);
          r800_ffff_tmp73 = simd_not(basis_bits.bit_6);
          r800_ffff_tmp74 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp73), simd_andc(tmp3, basis_bits.bit_5));
          r800_ffff_tmp75 = simd_and(r800_ffff_tmp51, r800_ffff_tmp74);
          r800_ffff_tmp76 = simd_or(r800_ffff_tmp72, r800_ffff_tmp75);
          r800_ffff_tmp77 = simd_andc(tmp16, tmp7);
          r800_ffff_tmp78 = simd_andc(r800_ffff_tmp77, tmp3);
          r800_ffff_tmp79 = simd_or(r800_ffff_tmp76, r800_ffff_tmp78);
          r800_ffff_tmp80 = simd_or(r800_ffff_tmp79, byte_95);
          r800_ffff_tmp81 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp73), simd_andc(tmp8, basis_bits.bit_5));
          r800_ffff_tmp82 = simd_and(r800_ffff_tmp52, r800_ffff_tmp81);
          r800_ffff_tmp83 = simd_or(r800_ffff_tmp80, r800_ffff_tmp82);
          r800_ffff_tmp84 = simd_or(r800_ffff_tmp83, r800_ffff_tmp24);
          r800_ffff_tmp85 = simd_or(r800_ffff_tmp84, r800_ffff_tmp26);
          r800_ffff_tmp86 = simd_or(r800_ffff_tmp85, r800_ffff_tmp28);
          r800_ffff_tmp87 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp73), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp88 = simd_and(tmp60, r800_ffff_tmp87);
          r800_ffff_tmp89 = simd_or(r800_ffff_tmp86, r800_ffff_tmp88);
          r800_ffff_tmp90 = simd_andc(tmp27, tmp7);
          r800_ffff_tmp91 = simd_or(r800_ffff_tmp89, r800_ffff_tmp90);
          r800_ffff_tmp92 = simd_and(tmp27, tmp47);
          cc_range_2102_213e_3 = simd_or(r800_ffff_tmp91, r800_ffff_tmp92);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(50), sequence_e2_84_adv));
          r800_ffff_tmp93 = simd_and(sequence_e2_84_adv, cc_range_2102_213e_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp93);
          byte_85 = simd_and(tmp32, tmp102);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(51), sequence_e2_85_adv));
          r800_ffff_tmp94 = simd_and(sequence_e2_85_adv, byte_85);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp94);
          byte_86 = simd_and(tmp32, tmp105);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(52), sequence_e2_86_adv));
          r800_ffff_tmp95 = simd_and(sequence_e2_86_adv, byte_83);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp95);
          byte_b0 = simd_andc(tmp27, tmp9);
          sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
          sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
          r800_ffff_tmp96 = simd_and(basis_bits.bit_2, tmp149);
          byte_range_80_ae = simd_andc(tmp14, r800_ffff_tmp96);
          carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(53), sequence_e2_b0_adv));
          r800_ffff_tmp97 = simd_and(sequence_e2_b0_adv, byte_range_80_ae);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp97);
          byte_b1 = simd_and(tmp27, tmp30);
          sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
          sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
          r800_ffff_tmp98 = simd_andc(tmp51, basis_bits.bit_4);
          r800_ffff_tmp99 = simd_or(simd_and(basis_bits.bit_5, tmp61), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp100 = simd_and(r800_ffff_tmp98, r800_ffff_tmp99);
          r800_ffff_tmp101 = simd_or(r800_ffff_tmp21, r800_ffff_tmp100);
          r800_ffff_tmp102 = simd_and(tmp51, tmp118);
          r800_ffff_tmp103 = simd_or(r800_ffff_tmp101, r800_ffff_tmp102);
          r800_ffff_tmp104 = simd_and(tmp51, tmp131);
          r800_ffff_tmp105 = simd_or(r800_ffff_tmp103, r800_ffff_tmp104);
          r800_ffff_tmp106 = simd_and(tmp51, tmp138);
          r800_ffff_tmp107 = simd_or(r800_ffff_tmp105, r800_ffff_tmp106);
          r800_ffff_tmp108 = simd_or(simd_and(basis_bits.bit_3, tmp108), simd_andc(tmp85, basis_bits.bit_3));
          r800_ffff_tmp109 = simd_and(byte_range_a0_bf, r800_ffff_tmp108);
          r800_ffff_tmp110 = simd_or(r800_ffff_tmp107, r800_ffff_tmp109);
          r800_ffff_tmp111 = simd_or(r800_ffff_tmp110, r800_ffff_tmp38);
          r800_ffff_tmp112 = simd_and(tmp27, tmp102);
          r800_ffff_tmp113 = simd_or(r800_ffff_tmp111, r800_ffff_tmp112);
          cc_range_2c60_2c7e_3 = simd_or(r800_ffff_tmp113, r800_ffff_tmp92);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(54), sequence_e2_b1_adv));
          r800_ffff_tmp114 = simd_and(sequence_e2_b1_adv, cc_range_2c60_2c7e_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp114);
          byte_b2 = simd_and(tmp27, tmp41);
          sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
          sequence_e2_b2 = simd_and(byte_e2_adv, byte_b2);
          cc_range_2c80_2cbe_3 = simd_andc(tmp14, basis_bits.bit_7);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e2_b2, carryQ.get_carry_in(55), sequence_e2_b2_adv));
          r800_ffff_tmp115 = simd_and(sequence_e2_b2_adv, cc_range_2c80_2cbe_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp115);
          byte_b3 = simd_and(tmp27, tmp70);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          r800_ffff_tmp116 = simd_or(r800_ffff_tmp19, byte_96);
          r800_ffff_tmp117 = simd_or(r800_ffff_tmp116, byte_98);
          r800_ffff_tmp118 = simd_or(r800_ffff_tmp117, byte_9a);
          r800_ffff_tmp119 = simd_or(r800_ffff_tmp118, byte_9c);
          r800_ffff_tmp120 = simd_or(r800_ffff_tmp119, byte_9e);
          r800_ffff_tmp121 = simd_or(r800_ffff_tmp120, r800_ffff_tmp21);
          r800_ffff_tmp122 = simd_or(r800_ffff_tmp121, tmp52);
          r800_ffff_tmp123 = simd_or(r800_ffff_tmp122, r800_ffff_tmp106);
          r800_ffff_tmp124 = simd_and(tmp51, tmp19);
          r800_ffff_tmp125 = simd_or(r800_ffff_tmp123, r800_ffff_tmp124);
          cc_range_2cc0_2cf2_3 = simd_or(r800_ffff_tmp125, byte_b2);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(56), sequence_e2_b3_adv));
          r800_ffff_tmp126 = simd_and(sequence_e2_b3_adv, cc_range_2cc0_2cf2_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp126);
          byte_ea = simd_and(byte_range_e0_ef, tmp135);
          carryQ.cq[57] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(57), r800_ffff_tmp127));
          sequence_ea_99 = simd_and(r800_ffff_tmp127, byte_99);
          carryQ.cq[58] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(58), byte_ea_adv));
          sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
          r800_ffff_tmp128 = simd_and(basis_bits.bit_2, tmp119);
          r800_ffff_tmp129 = simd_andc(tmp14, r800_ffff_tmp128);
          cc_range_a640_a66c_3 = simd_andc(r800_ffff_tmp129, basis_bits.bit_7);
          carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(59), sequence_ea_99_adv));
          r800_ffff_tmp130 = simd_and(sequence_ea_99_adv, cc_range_a640_a66c_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp130);
          sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
          sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
          r800_ffff_tmp131 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
          r800_ffff_tmp132 = simd_andc(tmp22, r800_ffff_tmp131);
          cc_range_a680_a696_3 = simd_andc(r800_ffff_tmp132, basis_bits.bit_7);
          carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(60), sequence_ea_9a_adv));
          r800_ffff_tmp133 = simd_and(sequence_ea_9a_adv, cc_range_a680_a696_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp133);
          sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
          sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
          r800_ffff_tmp134 = simd_or(tmp41, tmp75);
          r800_ffff_tmp135 = simd_or(r800_ffff_tmp134, tmp105);
          r800_ffff_tmp136 = simd_or(r800_ffff_tmp135, tmp124);
          r800_ffff_tmp137 = simd_or(r800_ffff_tmp136, tmp135);
          r800_ffff_tmp138 = simd_or(r800_ffff_tmp137, tmp44);
          r800_ffff_tmp139 = simd_or(r800_ffff_tmp138, tmp153);
          r800_ffff_tmp140 = simd_and(tmp51, r800_ffff_tmp139);
          r800_ffff_tmp141 = simd_or(r800_ffff_tmp140, byte_b2);
          r800_ffff_tmp142 = simd_or(r800_ffff_tmp141, r800_ffff_tmp40);
          r800_ffff_tmp143 = simd_or(r800_ffff_tmp142, r800_ffff_tmp42);
          r800_ffff_tmp144 = simd_or(r800_ffff_tmp143, byte_b8);
          r800_ffff_tmp145 = simd_or(r800_ffff_tmp144, byte_ba);
          r800_ffff_tmp146 = simd_or(r800_ffff_tmp145, byte_bc);
          cc_range_a722_a73e_3 = simd_or(r800_ffff_tmp146, byte_be);
          carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(61), sequence_ea_9c_adv));
          r800_ffff_tmp147 = simd_and(sequence_ea_9c_adv, cc_range_a722_a73e_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp147);
          sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
          sequence_ea_9d = simd_and(byte_ea_adv, byte_9d);
          r800_ffff_tmp148 = simd_or(r800_ffff_tmp122, r800_ffff_tmp24);
          r800_ffff_tmp149 = simd_or(r800_ffff_tmp148, r800_ffff_tmp26);
          r800_ffff_tmp150 = simd_or(r800_ffff_tmp149, r800_ffff_tmp28);
          r800_ffff_tmp151 = simd_or(r800_ffff_tmp150, r800_ffff_tmp30);
          r800_ffff_tmp152 = simd_or(r800_ffff_tmp151, r800_ffff_tmp32);
          r800_ffff_tmp153 = simd_or(r800_ffff_tmp152, r800_ffff_tmp34);
          r800_ffff_tmp154 = simd_or(r800_ffff_tmp153, byte_b9);
          r800_ffff_tmp155 = simd_or(r800_ffff_tmp154, byte_bb);
          r800_ffff_tmp156 = simd_and(tmp129, tmp57);
          cc_range_a740_a77d_3 = simd_or(r800_ffff_tmp155, r800_ffff_tmp156);
          carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_ea_9d, carryQ.get_carry_in(62), sequence_ea_9d_adv));
          r800_ffff_tmp157 = simd_and(sequence_ea_9d_adv, cc_range_a740_a77d_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp157);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          r800_ffff_tmp158 = simd_andc(r800_ffff_tmp11, tmp138);
          r800_ffff_tmp159 = simd_andc(r800_ffff_tmp158, tmp19);
          r800_ffff_tmp160 = simd_andc(tmp32, r800_ffff_tmp159);
          r800_ffff_tmp161 = simd_or(r800_ffff_tmp160, byte_90);
          r800_ffff_tmp162 = simd_or(r800_ffff_tmp161, byte_92);
          r800_ffff_tmp163 = simd_or(r800_ffff_tmp162, r800_ffff_tmp21);
          r800_ffff_tmp164 = simd_or(r800_ffff_tmp163, tmp52);
          r800_ffff_tmp165 = simd_or(r800_ffff_tmp164, r800_ffff_tmp24);
          r800_ffff_tmp166 = simd_or(r800_ffff_tmp165, r800_ffff_tmp26);
          r800_ffff_tmp167 = simd_or(r800_ffff_tmp166, r800_ffff_tmp28);
          cc_range_a780_a7aa_3 = simd_or(r800_ffff_tmp167, r800_ffff_tmp30);
          carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(63), sequence_ea_9e_adv));
          r800_ffff_tmp168 = simd_and(sequence_ea_9e_adv, cc_range_a780_a7aa_3);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp168);
          byte_ef = simd_and(byte_range_e0_ef, tmp148);
          carryQ.cq[64] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(64), r800_ffff_tmp169));
          sequence_ef_bc = simd_and(r800_ffff_tmp169, byte_bc);
          carryQ.cq[65] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(65), byte_ef_adv));
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          byte_range_a1_ba = simd_and(byte_range_a0_bf, tmp10);
          carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(66), sequence_ef_bc_adv));
          r800_ffff_tmp170 = simd_and(sequence_ef_bc_adv, byte_range_a1_ba);
          struct_Lu.cc = simd_or(struct_Lu.cc, r800_ffff_tmp170);
        }
        else {
          carryQ.CarryDequeueEnqueue(36, 31);
        }
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(67), tmp161));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp161, byte_range_80_bf);
        carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(68), tmp162));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp162, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(69, 2))) {
          r10000_10fff_tmp1 = simd_and(byte_range_80_bf, tmp15);
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          sequence_f0_90_90 = simd_and(tmp161, byte_90);
          carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(69), sequence_f0_90_adv));
          sequence_f0_90_90 = simd_and(sequence_f0_90_adv, byte_90);
          r10000_10fff_tmp2 = simd_and(basis_bits.bit_2, tmp37);
          byte_range_80_a7 = simd_andc(byte_range_80_bf, r10000_10fff_tmp2);
          carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_f0_90_90, carryQ.get_carry_in(70), sequence_f0_90_90_adv));
          r10000_10fff_tmp3 = simd_and(sequence_f0_90_90_adv, byte_range_80_a7);
          struct_Lu.cc = simd_or(struct_Lu.cc, r10000_10fff_tmp3);
        }
        else {
          carryQ.CarryDequeueEnqueue(69, 2);
        }
  }
  CarryArray<71, 0> carryQ;
  };

  struct Pf {
  Pf() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Pf & struct_Pf) {
		BitBlock tmp1, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10, r80_7ff_tmp11, byte_bb;
		BitBlock byte_c2_adv, r80_7ff_tmp12, tmp2, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, byte_e2, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock byte_80, r800_ffff_tmp9, sequence_e2_80, byte_e2_adv, r800_ffff_tmp10;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13, r800_ffff_tmp14;
		BitBlock r800_ffff_tmp15, r800_ffff_tmp16, r800_ffff_tmp17, r800_ffff_tmp18;
		BitBlock r800_ffff_tmp19, cc_range_2019_203a_3, sequence_e2_80_adv;
		BitBlock r800_ffff_tmp20, r800_ffff_tmp21, byte_b8, sequence_e2_b8;
		BitBlock r800_ffff_tmp22, r800_ffff_tmp23, r800_ffff_tmp24, r800_ffff_tmp25;
		BitBlock r800_ffff_tmp26, r800_ffff_tmp27, r800_ffff_tmp28, r800_ffff_tmp29;
		BitBlock r800_ffff_tmp30, r800_ffff_tmp31, r800_ffff_tmp32, r800_ffff_tmp33;
		BitBlock r800_ffff_tmp34, r800_ffff_tmp35, r800_ffff_tmp36;
		BitBlock cc_range_2e03_2e21_3, sequence_e2_b8_adv, r800_ffff_tmp37;




        struct_Pf.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
          r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp2 = simd_andc(tmp1, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
          byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
          r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r80_7ff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp8 = simd_and(r80_7ff_tmp6, r80_7ff_tmp7);
          r80_7ff_tmp9 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp11 = simd_and(r80_7ff_tmp9, r80_7ff_tmp10);
          byte_bb = simd_and(r80_7ff_tmp8, r80_7ff_tmp11);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
          r80_7ff_tmp12 = simd_and(byte_c2_adv, byte_bb);
          struct_Pf.cc = simd_or(struct_Pf.cc, r80_7ff_tmp12);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 4))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp3 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp3);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp6 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp8 = simd_or(r800_ffff_tmp1, r800_ffff_tmp7);
          byte_80 = simd_andc(r800_ffff_tmp6, r800_ffff_tmp8);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r800_ffff_tmp9));
          sequence_e2_80 = simd_and(r800_ffff_tmp9, byte_80);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(2), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp10 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r800_ffff_tmp11 = simd_and(r800_ffff_tmp4, r800_ffff_tmp10);
          r800_ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp13 = simd_and(r800_ffff_tmp12, basis_bits.bit_4);
          r800_ffff_tmp14 = simd_and(r800_ffff_tmp11, r800_ffff_tmp13);
          r800_ffff_tmp15 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp16 = simd_and(r800_ffff_tmp4, r800_ffff_tmp15);
          r800_ffff_tmp17 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp18 = simd_and(r800_ffff_tmp17, r800_ffff_tmp2);
          r800_ffff_tmp19 = simd_and(r800_ffff_tmp16, r800_ffff_tmp18);
          cc_range_2019_203a_3 = simd_or(r800_ffff_tmp14, r800_ffff_tmp19);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(3), sequence_e2_80_adv));
          r800_ffff_tmp20 = simd_and(sequence_e2_80_adv, cc_range_2019_203a_3);
          struct_Pf.cc = simd_or(struct_Pf.cc, r800_ffff_tmp20);
          r800_ffff_tmp21 = simd_andc(r800_ffff_tmp17, r800_ffff_tmp7);
          byte_b8 = simd_and(r800_ffff_tmp16, r800_ffff_tmp21);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          r800_ffff_tmp22 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp23 = simd_andc(r800_ffff_tmp22, r800_ffff_tmp1);
          r800_ffff_tmp24 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r800_ffff_tmp25 = simd_and(r800_ffff_tmp24, r800_ffff_tmp12);
          r800_ffff_tmp26 = simd_or(r800_ffff_tmp23, r800_ffff_tmp25);
          r800_ffff_tmp27 = simd_or(r800_ffff_tmp26, r800_ffff_tmp18);
          r800_ffff_tmp28 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp29 = simd_and(r800_ffff_tmp28, r800_ffff_tmp12);
          r800_ffff_tmp30 = simd_or(r800_ffff_tmp27, r800_ffff_tmp29);
          r800_ffff_tmp31 = simd_and(r800_ffff_tmp6, r800_ffff_tmp30);
          r800_ffff_tmp32 = simd_and(r800_ffff_tmp11, r800_ffff_tmp29);
          r800_ffff_tmp33 = simd_or(r800_ffff_tmp31, r800_ffff_tmp32);
          r800_ffff_tmp34 = simd_and(r800_ffff_tmp4, tmp2);
          r800_ffff_tmp35 = simd_andc(r800_ffff_tmp12, r800_ffff_tmp1);
          r800_ffff_tmp36 = simd_and(r800_ffff_tmp34, r800_ffff_tmp35);
          cc_range_2e03_2e21_3 = simd_or(r800_ffff_tmp33, r800_ffff_tmp36);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(4), sequence_e2_b8_adv));
          r800_ffff_tmp37 = simd_and(sequence_e2_b8_adv, cc_range_2e03_2e21_3);
          struct_Pf.cc = simd_or(struct_Pf.cc, r800_ffff_tmp37);
        }
        else {
          carryQ.CarryDequeueEnqueue(1, 4);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Pf & struct_Pf, BitBlock EOF_mask) {
		BitBlock tmp1, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10, r80_7ff_tmp11, byte_bb;
		BitBlock byte_c2_adv, r80_7ff_tmp12, tmp2, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, byte_e2, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock byte_80, r800_ffff_tmp9, sequence_e2_80, byte_e2_adv, r800_ffff_tmp10;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13, r800_ffff_tmp14;
		BitBlock r800_ffff_tmp15, r800_ffff_tmp16, r800_ffff_tmp17, r800_ffff_tmp18;
		BitBlock r800_ffff_tmp19, cc_range_2019_203a_3, sequence_e2_80_adv;
		BitBlock r800_ffff_tmp20, r800_ffff_tmp21, byte_b8, sequence_e2_b8;
		BitBlock r800_ffff_tmp22, r800_ffff_tmp23, r800_ffff_tmp24, r800_ffff_tmp25;
		BitBlock r800_ffff_tmp26, r800_ffff_tmp27, r800_ffff_tmp28, r800_ffff_tmp29;
		BitBlock r800_ffff_tmp30, r800_ffff_tmp31, r800_ffff_tmp32, r800_ffff_tmp33;
		BitBlock r800_ffff_tmp34, r800_ffff_tmp35, r800_ffff_tmp36;
		BitBlock cc_range_2e03_2e21_3, sequence_e2_b8_adv, r800_ffff_tmp37;




        struct_Pf.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
          r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp2 = simd_andc(tmp1, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
          byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
          r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r80_7ff_tmp7 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp8 = simd_and(r80_7ff_tmp6, r80_7ff_tmp7);
          r80_7ff_tmp9 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp11 = simd_and(r80_7ff_tmp9, r80_7ff_tmp10);
          byte_bb = simd_and(r80_7ff_tmp8, r80_7ff_tmp11);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
          r80_7ff_tmp12 = simd_and(byte_c2_adv, byte_bb);
          struct_Pf.cc = simd_or(struct_Pf.cc, r80_7ff_tmp12);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 4))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp3 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp3);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp6 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp8 = simd_or(r800_ffff_tmp1, r800_ffff_tmp7);
          byte_80 = simd_andc(r800_ffff_tmp6, r800_ffff_tmp8);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r800_ffff_tmp9));
          sequence_e2_80 = simd_and(r800_ffff_tmp9, byte_80);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(2), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp10 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r800_ffff_tmp11 = simd_and(r800_ffff_tmp4, r800_ffff_tmp10);
          r800_ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp13 = simd_and(r800_ffff_tmp12, basis_bits.bit_4);
          r800_ffff_tmp14 = simd_and(r800_ffff_tmp11, r800_ffff_tmp13);
          r800_ffff_tmp15 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp16 = simd_and(r800_ffff_tmp4, r800_ffff_tmp15);
          r800_ffff_tmp17 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp18 = simd_and(r800_ffff_tmp17, r800_ffff_tmp2);
          r800_ffff_tmp19 = simd_and(r800_ffff_tmp16, r800_ffff_tmp18);
          cc_range_2019_203a_3 = simd_or(r800_ffff_tmp14, r800_ffff_tmp19);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(3), sequence_e2_80_adv));
          r800_ffff_tmp20 = simd_and(sequence_e2_80_adv, cc_range_2019_203a_3);
          struct_Pf.cc = simd_or(struct_Pf.cc, r800_ffff_tmp20);
          r800_ffff_tmp21 = simd_andc(r800_ffff_tmp17, r800_ffff_tmp7);
          byte_b8 = simd_and(r800_ffff_tmp16, r800_ffff_tmp21);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          r800_ffff_tmp22 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp23 = simd_andc(r800_ffff_tmp22, r800_ffff_tmp1);
          r800_ffff_tmp24 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r800_ffff_tmp25 = simd_and(r800_ffff_tmp24, r800_ffff_tmp12);
          r800_ffff_tmp26 = simd_or(r800_ffff_tmp23, r800_ffff_tmp25);
          r800_ffff_tmp27 = simd_or(r800_ffff_tmp26, r800_ffff_tmp18);
          r800_ffff_tmp28 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp29 = simd_and(r800_ffff_tmp28, r800_ffff_tmp12);
          r800_ffff_tmp30 = simd_or(r800_ffff_tmp27, r800_ffff_tmp29);
          r800_ffff_tmp31 = simd_and(r800_ffff_tmp6, r800_ffff_tmp30);
          r800_ffff_tmp32 = simd_and(r800_ffff_tmp11, r800_ffff_tmp29);
          r800_ffff_tmp33 = simd_or(r800_ffff_tmp31, r800_ffff_tmp32);
          r800_ffff_tmp34 = simd_and(r800_ffff_tmp4, tmp2);
          r800_ffff_tmp35 = simd_andc(r800_ffff_tmp12, r800_ffff_tmp1);
          r800_ffff_tmp36 = simd_and(r800_ffff_tmp34, r800_ffff_tmp35);
          cc_range_2e03_2e21_3 = simd_or(r800_ffff_tmp33, r800_ffff_tmp36);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(4), sequence_e2_b8_adv));
          r800_ffff_tmp37 = simd_and(sequence_e2_b8_adv, cc_range_2e03_2e21_3);
          struct_Pf.cc = simd_or(struct_Pf.cc, r800_ffff_tmp37);
        }
        else {
          carryQ.CarryDequeueEnqueue(1, 4);
        }
  }
  CarryArray<5, 0> carryQ;
  };

  struct Pd {
  Pd() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Pd & struct_Pd) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_2d, tmp7, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock byte_d6, r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9;
		BitBlock r80_7ff_tmp10, r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13;
		BitBlock r80_7ff_tmp14, r80_7ff_tmp15, cc_range_58a_5be_2, byte_d6_adv;
		BitBlock r80_7ff_tmp16, byte_range_e0_ef, r800_ffff_tmp1, r800_ffff_tmp2;
		BitBlock byte_e1, r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, byte_90, r800_ffff_tmp8;
		BitBlock sequence_e1_90, byte_e1_adv, r800_ffff_tmp9, r800_ffff_tmp10, byte_80;
		BitBlock sequence_e1_90_adv, r800_ffff_tmp11, r800_ffff_tmp12, byte_a0;
		BitBlock sequence_e1_a0, r800_ffff_tmp13, r800_ffff_tmp14, r800_ffff_tmp15;
		BitBlock byte_86, sequence_e1_a0_adv, r800_ffff_tmp16, r800_ffff_tmp17;
		BitBlock byte_e2, r800_ffff_tmp18, sequence_e2_80, byte_e2_adv;
		BitBlock r800_ffff_tmp19, r800_ffff_tmp20, byte_range_90_95;
		BitBlock sequence_e2_80_adv, r800_ffff_tmp21, r800_ffff_tmp22, r800_ffff_tmp23;
		BitBlock r800_ffff_tmp24, r800_ffff_tmp25, byte_b8, sequence_e2_b8;
		BitBlock r800_ffff_tmp26, r800_ffff_tmp27, r800_ffff_tmp28, r800_ffff_tmp29;
		BitBlock r800_ffff_tmp30, r800_ffff_tmp31, r800_ffff_tmp32;
		BitBlock cc_range_2e17_2e3a_3, sequence_e2_b8_adv, r800_ffff_tmp33;
		BitBlock r800_ffff_tmp34, byte_e3, r800_ffff_tmp35, sequence_e3_80;
		BitBlock byte_e3_adv, r800_ffff_tmp36, r800_ffff_tmp37, r800_ffff_tmp38;
		BitBlock cc_range_301c_3030_3, sequence_e3_80_adv, r800_ffff_tmp39, byte_82;
		BitBlock sequence_e3_82, sequence_e3_82_adv, r800_ffff_tmp40, r800_ffff_tmp41;
		BitBlock byte_ef, r800_ffff_tmp42, sequence_ef_b8, byte_ef_adv;
		BitBlock r800_ffff_tmp43, r800_ffff_tmp44, r800_ffff_tmp45, byte_range_b1_b2;
		BitBlock sequence_ef_b8_adv, r800_ffff_tmp46, r800_ffff_tmp47, byte_b9;
		BitBlock sequence_ef_b9, r800_ffff_tmp48, r800_ffff_tmp49;
		BitBlock cc_range_fe58_fe63_3, sequence_ef_b9_adv, r800_ffff_tmp50, byte_bc;
		BitBlock sequence_ef_bc, byte_8d, sequence_ef_bc_adv, r800_ffff_tmp51;




        struct_Pd.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp6 = simd_and(tmp4, tmp5);
        byte_2d = simd_and(tmp3, tmp6);
        struct_Pd.cc = simd_or(struct_Pd.cc, byte_2d);
        tmp7 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_c0_df = simd_andc(tmp7, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
          r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r80_7ff_tmp2 = simd_and(tmp7, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp5 = simd_and(r80_7ff_tmp3, r80_7ff_tmp4);
          byte_d6 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
          r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r80_7ff_tmp7 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp8 = simd_andc(r80_7ff_tmp6, r80_7ff_tmp7);
          r80_7ff_tmp9 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp10 = simd_and(r80_7ff_tmp9, r80_7ff_tmp4);
          r80_7ff_tmp11 = simd_and(r80_7ff_tmp8, r80_7ff_tmp10);
          r80_7ff_tmp12 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp13 = simd_and(r80_7ff_tmp6, r80_7ff_tmp12);
          r80_7ff_tmp14 = simd_and(tmp4, r80_7ff_tmp4);
          r80_7ff_tmp15 = simd_and(r80_7ff_tmp13, r80_7ff_tmp14);
          cc_range_58a_5be_2 = simd_or(r80_7ff_tmp11, r80_7ff_tmp15);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(0), byte_d6_adv));
          r80_7ff_tmp16 = simd_and(byte_d6_adv, cc_range_58a_5be_2);
          struct_Pd.cc = simd_or(struct_Pd.cc, r80_7ff_tmp16);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        byte_range_e0_ef = simd_and(tmp7, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 17))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_andc(tmp5, r800_ffff_tmp1);
          byte_e1 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
          r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r800_ffff_tmp5 = simd_and(r800_ffff_tmp3, r800_ffff_tmp4);
          r800_ffff_tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp7 = simd_or(r800_ffff_tmp1, r800_ffff_tmp6);
          byte_90 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r800_ffff_tmp8));
          sequence_e1_90 = simd_and(r800_ffff_tmp8, byte_90);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(2), byte_e1_adv));
          sequence_e1_90 = simd_and(byte_e1_adv, byte_90);
          r800_ffff_tmp9 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp10 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp9);
          byte_80 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp7);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_90, carryQ.get_carry_in(3), sequence_e1_90_adv));
          r800_ffff_tmp11 = simd_and(sequence_e1_90_adv, byte_80);
          struct_Pd.cc = simd_or(struct_Pd.cc, r800_ffff_tmp11);
          r800_ffff_tmp12 = simd_and(r800_ffff_tmp3, tmp2);
          byte_a0 = simd_andc(r800_ffff_tmp12, r800_ffff_tmp7);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          r800_ffff_tmp13 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r800_ffff_tmp14 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp15 = simd_and(r800_ffff_tmp13, r800_ffff_tmp14);
          byte_86 = simd_and(r800_ffff_tmp10, r800_ffff_tmp15);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(4), sequence_e1_a0_adv));
          r800_ffff_tmp16 = simd_and(sequence_e1_a0_adv, byte_86);
          struct_Pd.cc = simd_or(struct_Pd.cc, r800_ffff_tmp16);
          r800_ffff_tmp17 = simd_andc(r800_ffff_tmp14, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp17);
          carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(5), r800_ffff_tmp18));
          sequence_e2_80 = simd_and(r800_ffff_tmp18, byte_80);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(6), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp19 = simd_andc(r800_ffff_tmp5, basis_bits.bit_4);
          r800_ffff_tmp20 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          byte_range_90_95 = simd_andc(r800_ffff_tmp19, r800_ffff_tmp20);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(7), sequence_e2_80_adv));
          r800_ffff_tmp21 = simd_and(sequence_e2_80_adv, byte_range_90_95);
          struct_Pd.cc = simd_or(struct_Pd.cc, r800_ffff_tmp21);
          r800_ffff_tmp22 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp23 = simd_and(r800_ffff_tmp3, r800_ffff_tmp22);
          r800_ffff_tmp24 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp25 = simd_andc(r800_ffff_tmp24, r800_ffff_tmp6);
          byte_b8 = simd_and(r800_ffff_tmp23, r800_ffff_tmp25);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          r800_ffff_tmp26 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp27 = simd_and(r800_ffff_tmp13, r800_ffff_tmp26);
          r800_ffff_tmp28 = simd_and(r800_ffff_tmp24, r800_ffff_tmp14);
          r800_ffff_tmp29 = simd_or(r800_ffff_tmp27, r800_ffff_tmp28);
          r800_ffff_tmp30 = simd_and(r800_ffff_tmp5, r800_ffff_tmp29);
          r800_ffff_tmp31 = simd_and(r800_ffff_tmp24, basis_bits.bit_6);
          r800_ffff_tmp32 = simd_and(r800_ffff_tmp23, r800_ffff_tmp31);
          cc_range_2e17_2e3a_3 = simd_or(r800_ffff_tmp30, r800_ffff_tmp32);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(8), sequence_e2_b8_adv));
          r800_ffff_tmp33 = simd_and(sequence_e2_b8_adv, cc_range_2e17_2e3a_3);
          struct_Pd.cc = simd_or(struct_Pd.cc, r800_ffff_tmp33);
          r800_ffff_tmp34 = simd_andc(r800_ffff_tmp26, r800_ffff_tmp1);
          byte_e3 = simd_and(byte_range_e0_ef, r800_ffff_tmp34);
          carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(9), r800_ffff_tmp35));
          sequence_e3_80 = simd_and(r800_ffff_tmp35, byte_80);
          carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(10), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          r800_ffff_tmp36 = simd_andc(tmp4, r800_ffff_tmp6);
          r800_ffff_tmp37 = simd_and(r800_ffff_tmp5, r800_ffff_tmp36);
          r800_ffff_tmp38 = simd_andc(r800_ffff_tmp23, r800_ffff_tmp7);
          cc_range_301c_3030_3 = simd_or(r800_ffff_tmp37, r800_ffff_tmp38);
          carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(11), sequence_e3_80_adv));
          r800_ffff_tmp39 = simd_and(sequence_e3_80_adv, cc_range_301c_3030_3);
          struct_Pd.cc = simd_or(struct_Pd.cc, r800_ffff_tmp39);
          byte_82 = simd_and(r800_ffff_tmp10, r800_ffff_tmp17);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(12), sequence_e3_82_adv));
          r800_ffff_tmp40 = simd_and(sequence_e3_82_adv, byte_a0);
          struct_Pd.cc = simd_or(struct_Pd.cc, r800_ffff_tmp40);
          r800_ffff_tmp41 = simd_and(tmp4, r800_ffff_tmp26);
          byte_ef = simd_and(byte_range_e0_ef, r800_ffff_tmp41);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(13), r800_ffff_tmp42));
          sequence_ef_b8 = simd_and(r800_ffff_tmp42, byte_b8);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(14), byte_ef_adv));
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          r800_ffff_tmp43 = simd_andc(r800_ffff_tmp23, r800_ffff_tmp1);
          r800_ffff_tmp44 = simd_not(basis_bits.bit_7);
          r800_ffff_tmp45 = simd_or(simd_and(basis_bits.bit_6, r800_ffff_tmp44), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          byte_range_b1_b2 = simd_and(r800_ffff_tmp43, r800_ffff_tmp45);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(15), sequence_ef_b8_adv));
          r800_ffff_tmp46 = simd_and(sequence_ef_b8_adv, byte_range_b1_b2);
          struct_Pd.cc = simd_or(struct_Pd.cc, r800_ffff_tmp46);
          r800_ffff_tmp47 = simd_and(r800_ffff_tmp24, tmp5);
          byte_b9 = simd_and(r800_ffff_tmp23, r800_ffff_tmp47);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          r800_ffff_tmp48 = simd_and(r800_ffff_tmp5, r800_ffff_tmp25);
          r800_ffff_tmp49 = simd_and(r800_ffff_tmp12, r800_ffff_tmp34);
          cc_range_fe58_fe63_3 = simd_or(r800_ffff_tmp48, r800_ffff_tmp49);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(16), sequence_ef_b9_adv));
          r800_ffff_tmp50 = simd_and(sequence_ef_b9_adv, cc_range_fe58_fe63_3);
          struct_Pd.cc = simd_or(struct_Pd.cc, r800_ffff_tmp50);
          byte_bc = simd_and(r800_ffff_tmp23, r800_ffff_tmp36);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          byte_8d = simd_and(r800_ffff_tmp10, tmp6);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(17), sequence_ef_bc_adv));
          r800_ffff_tmp51 = simd_and(sequence_ef_bc_adv, byte_8d);
          struct_Pd.cc = simd_or(struct_Pd.cc, r800_ffff_tmp51);
        }
        else {
          carryQ.CarryDequeueEnqueue(1, 17);
        }
        carryQ.CarryQ_Adjust(18);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Pd & struct_Pd, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_2d, tmp7, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock byte_d6, r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9;
		BitBlock r80_7ff_tmp10, r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13;
		BitBlock r80_7ff_tmp14, r80_7ff_tmp15, cc_range_58a_5be_2, byte_d6_adv;
		BitBlock r80_7ff_tmp16, byte_range_e0_ef, r800_ffff_tmp1, r800_ffff_tmp2;
		BitBlock byte_e1, r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, byte_90, r800_ffff_tmp8;
		BitBlock sequence_e1_90, byte_e1_adv, r800_ffff_tmp9, r800_ffff_tmp10, byte_80;
		BitBlock sequence_e1_90_adv, r800_ffff_tmp11, r800_ffff_tmp12, byte_a0;
		BitBlock sequence_e1_a0, r800_ffff_tmp13, r800_ffff_tmp14, r800_ffff_tmp15;
		BitBlock byte_86, sequence_e1_a0_adv, r800_ffff_tmp16, r800_ffff_tmp17;
		BitBlock byte_e2, r800_ffff_tmp18, sequence_e2_80, byte_e2_adv;
		BitBlock r800_ffff_tmp19, r800_ffff_tmp20, byte_range_90_95;
		BitBlock sequence_e2_80_adv, r800_ffff_tmp21, r800_ffff_tmp22, r800_ffff_tmp23;
		BitBlock r800_ffff_tmp24, r800_ffff_tmp25, byte_b8, sequence_e2_b8;
		BitBlock r800_ffff_tmp26, r800_ffff_tmp27, r800_ffff_tmp28, r800_ffff_tmp29;
		BitBlock r800_ffff_tmp30, r800_ffff_tmp31, r800_ffff_tmp32;
		BitBlock cc_range_2e17_2e3a_3, sequence_e2_b8_adv, r800_ffff_tmp33;
		BitBlock r800_ffff_tmp34, byte_e3, r800_ffff_tmp35, sequence_e3_80;
		BitBlock byte_e3_adv, r800_ffff_tmp36, r800_ffff_tmp37, r800_ffff_tmp38;
		BitBlock cc_range_301c_3030_3, sequence_e3_80_adv, r800_ffff_tmp39, byte_82;
		BitBlock sequence_e3_82, sequence_e3_82_adv, r800_ffff_tmp40, r800_ffff_tmp41;
		BitBlock byte_ef, r800_ffff_tmp42, sequence_ef_b8, byte_ef_adv;
		BitBlock r800_ffff_tmp43, r800_ffff_tmp44, r800_ffff_tmp45, byte_range_b1_b2;
		BitBlock sequence_ef_b8_adv, r800_ffff_tmp46, r800_ffff_tmp47, byte_b9;
		BitBlock sequence_ef_b9, r800_ffff_tmp48, r800_ffff_tmp49;
		BitBlock cc_range_fe58_fe63_3, sequence_ef_b9_adv, r800_ffff_tmp50, byte_bc;
		BitBlock sequence_ef_bc, byte_8d, sequence_ef_bc_adv, r800_ffff_tmp51;




        struct_Pd.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp6 = simd_and(tmp4, tmp5);
        byte_2d = simd_and(tmp3, tmp6);
        struct_Pd.cc = simd_or(struct_Pd.cc, byte_2d);
        tmp7 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_c0_df = simd_andc(tmp7, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
          r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r80_7ff_tmp2 = simd_and(tmp7, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp5 = simd_and(r80_7ff_tmp3, r80_7ff_tmp4);
          byte_d6 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
          r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r80_7ff_tmp7 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp8 = simd_andc(r80_7ff_tmp6, r80_7ff_tmp7);
          r80_7ff_tmp9 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp10 = simd_and(r80_7ff_tmp9, r80_7ff_tmp4);
          r80_7ff_tmp11 = simd_and(r80_7ff_tmp8, r80_7ff_tmp10);
          r80_7ff_tmp12 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp13 = simd_and(r80_7ff_tmp6, r80_7ff_tmp12);
          r80_7ff_tmp14 = simd_and(tmp4, r80_7ff_tmp4);
          r80_7ff_tmp15 = simd_and(r80_7ff_tmp13, r80_7ff_tmp14);
          cc_range_58a_5be_2 = simd_or(r80_7ff_tmp11, r80_7ff_tmp15);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(0), byte_d6_adv));
          r80_7ff_tmp16 = simd_and(byte_d6_adv, cc_range_58a_5be_2);
          struct_Pd.cc = simd_or(struct_Pd.cc, r80_7ff_tmp16);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        byte_range_e0_ef = simd_and(tmp7, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 17))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_andc(tmp5, r800_ffff_tmp1);
          byte_e1 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
          r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r800_ffff_tmp5 = simd_and(r800_ffff_tmp3, r800_ffff_tmp4);
          r800_ffff_tmp6 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp7 = simd_or(r800_ffff_tmp1, r800_ffff_tmp6);
          byte_90 = simd_andc(r800_ffff_tmp5, r800_ffff_tmp7);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r800_ffff_tmp8));
          sequence_e1_90 = simd_and(r800_ffff_tmp8, byte_90);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(2), byte_e1_adv));
          sequence_e1_90 = simd_and(byte_e1_adv, byte_90);
          r800_ffff_tmp9 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp10 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp9);
          byte_80 = simd_andc(r800_ffff_tmp10, r800_ffff_tmp7);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_90, carryQ.get_carry_in(3), sequence_e1_90_adv));
          r800_ffff_tmp11 = simd_and(sequence_e1_90_adv, byte_80);
          struct_Pd.cc = simd_or(struct_Pd.cc, r800_ffff_tmp11);
          r800_ffff_tmp12 = simd_and(r800_ffff_tmp3, tmp2);
          byte_a0 = simd_andc(r800_ffff_tmp12, r800_ffff_tmp7);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          r800_ffff_tmp13 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r800_ffff_tmp14 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp15 = simd_and(r800_ffff_tmp13, r800_ffff_tmp14);
          byte_86 = simd_and(r800_ffff_tmp10, r800_ffff_tmp15);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(4), sequence_e1_a0_adv));
          r800_ffff_tmp16 = simd_and(sequence_e1_a0_adv, byte_86);
          struct_Pd.cc = simd_or(struct_Pd.cc, r800_ffff_tmp16);
          r800_ffff_tmp17 = simd_andc(r800_ffff_tmp14, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp17);
          carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(5), r800_ffff_tmp18));
          sequence_e2_80 = simd_and(r800_ffff_tmp18, byte_80);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(6), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp19 = simd_andc(r800_ffff_tmp5, basis_bits.bit_4);
          r800_ffff_tmp20 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          byte_range_90_95 = simd_andc(r800_ffff_tmp19, r800_ffff_tmp20);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(7), sequence_e2_80_adv));
          r800_ffff_tmp21 = simd_and(sequence_e2_80_adv, byte_range_90_95);
          struct_Pd.cc = simd_or(struct_Pd.cc, r800_ffff_tmp21);
          r800_ffff_tmp22 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp23 = simd_and(r800_ffff_tmp3, r800_ffff_tmp22);
          r800_ffff_tmp24 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp25 = simd_andc(r800_ffff_tmp24, r800_ffff_tmp6);
          byte_b8 = simd_and(r800_ffff_tmp23, r800_ffff_tmp25);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          r800_ffff_tmp26 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp27 = simd_and(r800_ffff_tmp13, r800_ffff_tmp26);
          r800_ffff_tmp28 = simd_and(r800_ffff_tmp24, r800_ffff_tmp14);
          r800_ffff_tmp29 = simd_or(r800_ffff_tmp27, r800_ffff_tmp28);
          r800_ffff_tmp30 = simd_and(r800_ffff_tmp5, r800_ffff_tmp29);
          r800_ffff_tmp31 = simd_and(r800_ffff_tmp24, basis_bits.bit_6);
          r800_ffff_tmp32 = simd_and(r800_ffff_tmp23, r800_ffff_tmp31);
          cc_range_2e17_2e3a_3 = simd_or(r800_ffff_tmp30, r800_ffff_tmp32);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(8), sequence_e2_b8_adv));
          r800_ffff_tmp33 = simd_and(sequence_e2_b8_adv, cc_range_2e17_2e3a_3);
          struct_Pd.cc = simd_or(struct_Pd.cc, r800_ffff_tmp33);
          r800_ffff_tmp34 = simd_andc(r800_ffff_tmp26, r800_ffff_tmp1);
          byte_e3 = simd_and(byte_range_e0_ef, r800_ffff_tmp34);
          carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(9), r800_ffff_tmp35));
          sequence_e3_80 = simd_and(r800_ffff_tmp35, byte_80);
          carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(10), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          r800_ffff_tmp36 = simd_andc(tmp4, r800_ffff_tmp6);
          r800_ffff_tmp37 = simd_and(r800_ffff_tmp5, r800_ffff_tmp36);
          r800_ffff_tmp38 = simd_andc(r800_ffff_tmp23, r800_ffff_tmp7);
          cc_range_301c_3030_3 = simd_or(r800_ffff_tmp37, r800_ffff_tmp38);
          carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(11), sequence_e3_80_adv));
          r800_ffff_tmp39 = simd_and(sequence_e3_80_adv, cc_range_301c_3030_3);
          struct_Pd.cc = simd_or(struct_Pd.cc, r800_ffff_tmp39);
          byte_82 = simd_and(r800_ffff_tmp10, r800_ffff_tmp17);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(12), sequence_e3_82_adv));
          r800_ffff_tmp40 = simd_and(sequence_e3_82_adv, byte_a0);
          struct_Pd.cc = simd_or(struct_Pd.cc, r800_ffff_tmp40);
          r800_ffff_tmp41 = simd_and(tmp4, r800_ffff_tmp26);
          byte_ef = simd_and(byte_range_e0_ef, r800_ffff_tmp41);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(13), r800_ffff_tmp42));
          sequence_ef_b8 = simd_and(r800_ffff_tmp42, byte_b8);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(14), byte_ef_adv));
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          r800_ffff_tmp43 = simd_andc(r800_ffff_tmp23, r800_ffff_tmp1);
          r800_ffff_tmp44 = simd_not(basis_bits.bit_7);
          r800_ffff_tmp45 = simd_or(simd_and(basis_bits.bit_6, r800_ffff_tmp44), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          byte_range_b1_b2 = simd_and(r800_ffff_tmp43, r800_ffff_tmp45);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(15), sequence_ef_b8_adv));
          r800_ffff_tmp46 = simd_and(sequence_ef_b8_adv, byte_range_b1_b2);
          struct_Pd.cc = simd_or(struct_Pd.cc, r800_ffff_tmp46);
          r800_ffff_tmp47 = simd_and(r800_ffff_tmp24, tmp5);
          byte_b9 = simd_and(r800_ffff_tmp23, r800_ffff_tmp47);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          r800_ffff_tmp48 = simd_and(r800_ffff_tmp5, r800_ffff_tmp25);
          r800_ffff_tmp49 = simd_and(r800_ffff_tmp12, r800_ffff_tmp34);
          cc_range_fe58_fe63_3 = simd_or(r800_ffff_tmp48, r800_ffff_tmp49);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(16), sequence_ef_b9_adv));
          r800_ffff_tmp50 = simd_and(sequence_ef_b9_adv, cc_range_fe58_fe63_3);
          struct_Pd.cc = simd_or(struct_Pd.cc, r800_ffff_tmp50);
          byte_bc = simd_and(r800_ffff_tmp23, r800_ffff_tmp36);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          byte_8d = simd_and(r800_ffff_tmp10, tmp6);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(17), sequence_ef_bc_adv));
          r800_ffff_tmp51 = simd_and(sequence_ef_bc_adv, byte_8d);
          struct_Pd.cc = simd_or(struct_Pd.cc, r800_ffff_tmp51);
        }
        else {
          carryQ.CarryDequeueEnqueue(1, 17);
        }
  }
  CarryArray<18, 0> carryQ;
  };

  struct Pe {
  Pe() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Pe & struct_Pe) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, cc_range_29_7d_1, tmp18;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, r800_ffff_tmp2, r800_ffff_tmp3;
		BitBlock byte_e0, r800_ffff_tmp4, r800_ffff_tmp5, r800_ffff_tmp6, byte_bc;
		BitBlock r800_ffff_tmp7, sequence_e0_bc, byte_e0_adv, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, cc_range_f3b_f3d_3;
		BitBlock sequence_e0_bc_adv, r800_ffff_tmp11, r800_ffff_tmp12, byte_e1;
		BitBlock r800_ffff_tmp13, r800_ffff_tmp14, r800_ffff_tmp15, byte_9a;
		BitBlock r800_ffff_tmp16, sequence_e1_9a, byte_e1_adv, byte_9c;
		BitBlock sequence_e1_9a_adv, r800_ffff_tmp17, r800_ffff_tmp18, byte_e2;
		BitBlock r800_ffff_tmp19, r800_ffff_tmp20, byte_81, r800_ffff_tmp21;
		BitBlock sequence_e2_81, byte_e2_adv, r800_ffff_tmp22, r800_ffff_tmp23;
		BitBlock r800_ffff_tmp24, r800_ffff_tmp25, r800_ffff_tmp26;
		BitBlock cc_range_2046_207e_3, sequence_e2_81_adv, r800_ffff_tmp27, byte_82;
		BitBlock sequence_e2_82, byte_8e, sequence_e2_82_adv, r800_ffff_tmp28, byte_8c;
		BitBlock sequence_e2_8c, r800_ffff_tmp29, r800_ffff_tmp30, r800_ffff_tmp31;
		BitBlock r800_ffff_tmp32, cc_range_2309_232a_3, sequence_e2_8c_adv;
		BitBlock r800_ffff_tmp33, byte_9d, sequence_e2_9d, r800_ffff_tmp34;
		BitBlock r800_ffff_tmp35, r800_ffff_tmp36, r800_ffff_tmp37, r800_ffff_tmp38;
		BitBlock r800_ffff_tmp39, cc_range_2769_2775_3, sequence_e2_9d_adv;
		BitBlock r800_ffff_tmp40, r800_ffff_tmp41, byte_9f, sequence_e2_9f;
		BitBlock r800_ffff_tmp42, r800_ffff_tmp43, r800_ffff_tmp44, r800_ffff_tmp45;
		BitBlock r800_ffff_tmp46, r800_ffff_tmp47, r800_ffff_tmp48, r800_ffff_tmp49;
		BitBlock r800_ffff_tmp50, r800_ffff_tmp51, cc_range_27c6_27ef_3;
		BitBlock sequence_e2_9f_adv, r800_ffff_tmp52, byte_a6, sequence_e2_a6;
		BitBlock r800_ffff_tmp53, r800_ffff_tmp54, r800_ffff_tmp55, r800_ffff_tmp56;
		BitBlock r800_ffff_tmp57, r800_ffff_tmp58, cc_range_2984_2998_3;
		BitBlock sequence_e2_a6_adv, r800_ffff_tmp59, byte_a7, sequence_e2_a7;
		BitBlock r800_ffff_tmp60, r800_ffff_tmp61, cc_range_29d9_29fd_3;
		BitBlock sequence_e2_a7_adv, r800_ffff_tmp62, r800_ffff_tmp63, byte_b8;
		BitBlock sequence_e2_b8, r800_ffff_tmp64, r800_ffff_tmp65, r800_ffff_tmp66;
		BitBlock cc_range_2e23_2e29_3, sequence_e2_b8_adv, r800_ffff_tmp67;
		BitBlock r800_ffff_tmp68, byte_e3, byte_80, r800_ffff_tmp69, sequence_e3_80;
		BitBlock byte_e3_adv, r800_ffff_tmp70, r800_ffff_tmp71, r800_ffff_tmp72;
		BitBlock r800_ffff_tmp73, r800_ffff_tmp74, r800_ffff_tmp75, r800_ffff_tmp76;
		BitBlock r800_ffff_tmp77, r800_ffff_tmp78, r800_ffff_tmp79, r800_ffff_tmp80;
		BitBlock r800_ffff_tmp81, r800_ffff_tmp82, r800_ffff_tmp83, r800_ffff_tmp84;
		BitBlock r800_ffff_tmp85, cc_range_3009_301e_3, sequence_e3_80_adv;
		BitBlock r800_ffff_tmp86, byte_ef, r800_ffff_tmp87, byte_b4, r800_ffff_tmp88;
		BitBlock sequence_ef_b4, byte_ef_adv, byte_bf, sequence_ef_b4_adv;
		BitBlock r800_ffff_tmp89, sequence_ef_b8, r800_ffff_tmp90, r800_ffff_tmp91;
		BitBlock r800_ffff_tmp92, r800_ffff_tmp93, r800_ffff_tmp94, r800_ffff_tmp95;
		BitBlock r800_ffff_tmp96, cc_range_fe18_fe3e_3, sequence_ef_b8_adv;
		BitBlock r800_ffff_tmp97, byte_b9, sequence_ef_b9, r800_ffff_tmp98;
		BitBlock r800_ffff_tmp99, r800_ffff_tmp100, r800_ffff_tmp101, r800_ffff_tmp102;
		BitBlock r800_ffff_tmp103, r800_ffff_tmp104, cc_range_fe40_fe5e_3;
		BitBlock sequence_ef_b9_adv, r800_ffff_tmp105, sequence_ef_bc;
		BitBlock r800_ffff_tmp106, cc_range_ff09_ff3d_3, sequence_ef_bc_adv;
		BitBlock r800_ffff_tmp107, byte_bd, sequence_ef_bd, r800_ffff_tmp108;
		BitBlock r800_ffff_tmp109, r800_ffff_tmp110, cc_range_ff5d_ff63_3;
		BitBlock sequence_ef_bd_adv, r800_ffff_tmp111;




        struct_Pe.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp6 = simd_and(tmp4, tmp5);
        tmp7 = simd_and(tmp3, tmp6);
        tmp8 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp10 = simd_and(tmp8, tmp9);
        tmp11 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp12 = simd_and(tmp11, tmp5);
        tmp13 = simd_and(tmp10, tmp12);
        tmp14 = simd_or(tmp7, tmp13);
        tmp15 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp16 = simd_and(tmp8, tmp15);
        tmp17 = simd_and(tmp16, tmp12);
        cc_range_29_7d_1 = simd_or(tmp14, tmp17);
        struct_Pe.cc = simd_or(struct_Pe.cc, cc_range_29_7d_1);
        tmp18 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_e0_ef = simd_and(tmp18, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 26))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp2);
          byte_e0 = simd_andc(byte_range_e0_ef, r800_ffff_tmp3);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp5 = simd_and(r800_ffff_tmp4, tmp15);
          r800_ffff_tmp6 = simd_andc(tmp11, r800_ffff_tmp2);
          byte_bc = simd_and(r800_ffff_tmp5, r800_ffff_tmp6);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(0), r800_ffff_tmp7));
          sequence_e0_bc = simd_and(r800_ffff_tmp7, byte_bc);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), byte_e0_adv));
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          r800_ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp9 = simd_and(tmp4, r800_ffff_tmp8);
          r800_ffff_tmp10 = simd_or(r800_ffff_tmp9, tmp12);
          cc_range_f3b_f3d_3 = simd_and(r800_ffff_tmp5, r800_ffff_tmp10);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(2), sequence_e0_bc_adv));
          r800_ffff_tmp11 = simd_and(sequence_e0_bc_adv, cc_range_f3b_f3d_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp11);
          r800_ffff_tmp12 = simd_andc(tmp5, r800_ffff_tmp1);
          byte_e1 = simd_and(byte_range_e0_ef, r800_ffff_tmp12);
          r800_ffff_tmp13 = simd_and(r800_ffff_tmp4, tmp9);
          r800_ffff_tmp14 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp15 = simd_and(tmp4, r800_ffff_tmp14);
          byte_9a = simd_and(r800_ffff_tmp13, r800_ffff_tmp15);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(3), r800_ffff_tmp16));
          sequence_e1_9a = simd_and(r800_ffff_tmp16, byte_9a);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(4), byte_e1_adv));
          sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
          byte_9c = simd_and(r800_ffff_tmp13, r800_ffff_tmp6);
          carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(5), sequence_e1_9a_adv));
          r800_ffff_tmp17 = simd_and(sequence_e1_9a_adv, byte_9c);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp17);
          r800_ffff_tmp18 = simd_andc(r800_ffff_tmp14, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp18);
          r800_ffff_tmp19 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp20 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp19);
          byte_81 = simd_and(r800_ffff_tmp20, r800_ffff_tmp12);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(6), r800_ffff_tmp21));
          sequence_e2_81 = simd_and(r800_ffff_tmp21, byte_81);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(7), byte_e2_adv));
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          r800_ffff_tmp22 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r800_ffff_tmp23 = simd_and(r800_ffff_tmp22, r800_ffff_tmp14);
          r800_ffff_tmp24 = simd_and(r800_ffff_tmp20, r800_ffff_tmp23);
          r800_ffff_tmp25 = simd_and(tmp11, r800_ffff_tmp14);
          r800_ffff_tmp26 = simd_and(r800_ffff_tmp5, r800_ffff_tmp25);
          cc_range_2046_207e_3 = simd_or(r800_ffff_tmp24, r800_ffff_tmp26);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(8), sequence_e2_81_adv));
          r800_ffff_tmp27 = simd_and(sequence_e2_81_adv, cc_range_2046_207e_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp27);
          byte_82 = simd_and(r800_ffff_tmp20, r800_ffff_tmp18);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          byte_8e = simd_and(r800_ffff_tmp20, r800_ffff_tmp25);
          carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(9), sequence_e2_82_adv));
          r800_ffff_tmp28 = simd_and(sequence_e2_82_adv, byte_8e);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp28);
          byte_8c = simd_and(r800_ffff_tmp20, r800_ffff_tmp6);
          sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
          sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
          r800_ffff_tmp29 = simd_and(tmp4, basis_bits.bit_7);
          r800_ffff_tmp30 = simd_and(r800_ffff_tmp20, r800_ffff_tmp29);
          r800_ffff_tmp31 = simd_and(r800_ffff_tmp4, tmp2);
          r800_ffff_tmp32 = simd_and(r800_ffff_tmp31, r800_ffff_tmp15);
          cc_range_2309_232a_3 = simd_or(r800_ffff_tmp30, r800_ffff_tmp32);
          carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e2_8c, carryQ.get_carry_in(10), sequence_e2_8c_adv));
          r800_ffff_tmp33 = simd_and(sequence_e2_8c_adv, cc_range_2309_232a_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp33);
          byte_9d = simd_and(r800_ffff_tmp13, tmp12);
          sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
          sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
          r800_ffff_tmp34 = simd_and(r800_ffff_tmp4, basis_bits.bit_2);
          r800_ffff_tmp35 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp36 = simd_or(basis_bits.bit_4, r800_ffff_tmp35);
          r800_ffff_tmp37 = simd_not(r800_ffff_tmp36);
          r800_ffff_tmp38 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp37), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
          r800_ffff_tmp39 = simd_and(r800_ffff_tmp34, r800_ffff_tmp38);
          cc_range_2769_2775_3 = simd_andc(r800_ffff_tmp39, basis_bits.bit_7);
          carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e2_9d, carryQ.get_carry_in(11), sequence_e2_9d_adv));
          r800_ffff_tmp40 = simd_and(sequence_e2_9d_adv, cc_range_2769_2775_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp40);
          r800_ffff_tmp41 = simd_and(tmp11, r800_ffff_tmp8);
          byte_9f = simd_and(r800_ffff_tmp13, r800_ffff_tmp41);
          sequence_e2_9f = simd_and(byte_e2_adv, byte_9f);
          sequence_e2_9f = simd_and(byte_e2_adv, byte_9f);
          r800_ffff_tmp42 = simd_and(r800_ffff_tmp22, r800_ffff_tmp8);
          r800_ffff_tmp43 = simd_and(r800_ffff_tmp31, r800_ffff_tmp42);
          r800_ffff_tmp44 = simd_or(r800_ffff_tmp24, r800_ffff_tmp43);
          r800_ffff_tmp45 = simd_and(r800_ffff_tmp31, tmp6);
          r800_ffff_tmp46 = simd_or(r800_ffff_tmp44, r800_ffff_tmp45);
          r800_ffff_tmp47 = simd_and(r800_ffff_tmp31, r800_ffff_tmp9);
          r800_ffff_tmp48 = simd_or(r800_ffff_tmp46, r800_ffff_tmp47);
          r800_ffff_tmp49 = simd_and(r800_ffff_tmp31, tmp12);
          r800_ffff_tmp50 = simd_or(r800_ffff_tmp48, r800_ffff_tmp49);
          r800_ffff_tmp51 = simd_and(r800_ffff_tmp31, r800_ffff_tmp41);
          cc_range_27c6_27ef_3 = simd_or(r800_ffff_tmp50, r800_ffff_tmp51);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e2_9f, carryQ.get_carry_in(12), sequence_e2_9f_adv));
          r800_ffff_tmp52 = simd_and(sequence_e2_9f_adv, cc_range_27c6_27ef_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp52);
          byte_a6 = simd_and(r800_ffff_tmp31, r800_ffff_tmp23);
          sequence_e2_a6 = simd_and(byte_e2_adv, byte_a6);
          sequence_e2_a6 = simd_and(byte_e2_adv, byte_a6);
          r800_ffff_tmp53 = simd_andc(r800_ffff_tmp4, basis_bits.bit_2);
          r800_ffff_tmp54 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp55 = simd_and(basis_bits.bit_4, r800_ffff_tmp54);
          r800_ffff_tmp56 = simd_not(r800_ffff_tmp55);
          r800_ffff_tmp57 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp56), simd_andc(r800_ffff_tmp1, basis_bits.bit_3));
          r800_ffff_tmp58 = simd_and(r800_ffff_tmp53, r800_ffff_tmp57);
          cc_range_2984_2998_3 = simd_andc(r800_ffff_tmp58, basis_bits.bit_7);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e2_a6, carryQ.get_carry_in(13), sequence_e2_a6_adv));
          r800_ffff_tmp59 = simd_and(sequence_e2_a6_adv, cc_range_2984_2998_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp59);
          byte_a7 = simd_and(r800_ffff_tmp31, r800_ffff_tmp42);
          sequence_e2_a7 = simd_and(byte_e2_adv, byte_a7);
          sequence_e2_a7 = simd_and(byte_e2_adv, byte_a7);
          r800_ffff_tmp60 = simd_and(r800_ffff_tmp13, r800_ffff_tmp29);
          r800_ffff_tmp61 = simd_and(r800_ffff_tmp5, tmp12);
          cc_range_29d9_29fd_3 = simd_or(r800_ffff_tmp60, r800_ffff_tmp61);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e2_a7, carryQ.get_carry_in(14), sequence_e2_a7_adv));
          r800_ffff_tmp62 = simd_and(sequence_e2_a7_adv, cc_range_29d9_29fd_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp62);
          r800_ffff_tmp63 = simd_andc(tmp4, r800_ffff_tmp2);
          byte_b8 = simd_and(r800_ffff_tmp5, r800_ffff_tmp63);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          r800_ffff_tmp64 = simd_not(r800_ffff_tmp54);
          r800_ffff_tmp65 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp64), simd_andc(r800_ffff_tmp54, basis_bits.bit_4));
          r800_ffff_tmp66 = simd_and(r800_ffff_tmp31, r800_ffff_tmp65);
          cc_range_2e23_2e29_3 = simd_andc(r800_ffff_tmp66, basis_bits.bit_7);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(15), sequence_e2_b8_adv));
          r800_ffff_tmp67 = simd_and(sequence_e2_b8_adv, cc_range_2e23_2e29_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp67);
          r800_ffff_tmp68 = simd_andc(r800_ffff_tmp8, r800_ffff_tmp1);
          byte_e3 = simd_and(byte_range_e0_ef, r800_ffff_tmp68);
          byte_80 = simd_andc(r800_ffff_tmp20, r800_ffff_tmp3);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(16), r800_ffff_tmp69));
          sequence_e3_80 = simd_and(r800_ffff_tmp69, byte_80);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(17), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          r800_ffff_tmp70 = simd_or(r800_ffff_tmp29, tmp12);
          r800_ffff_tmp71 = simd_or(r800_ffff_tmp70, r800_ffff_tmp41);
          r800_ffff_tmp72 = simd_and(r800_ffff_tmp20, r800_ffff_tmp71);
          r800_ffff_tmp73 = simd_and(r800_ffff_tmp13, r800_ffff_tmp12);
          r800_ffff_tmp74 = simd_or(r800_ffff_tmp72, r800_ffff_tmp73);
          r800_ffff_tmp75 = simd_and(r800_ffff_tmp22, tmp5);
          r800_ffff_tmp76 = simd_and(r800_ffff_tmp13, r800_ffff_tmp75);
          r800_ffff_tmp77 = simd_or(r800_ffff_tmp74, r800_ffff_tmp76);
          r800_ffff_tmp78 = simd_and(r800_ffff_tmp13, r800_ffff_tmp42);
          r800_ffff_tmp79 = simd_or(r800_ffff_tmp77, r800_ffff_tmp78);
          r800_ffff_tmp80 = simd_and(r800_ffff_tmp13, tmp6);
          r800_ffff_tmp81 = simd_or(r800_ffff_tmp79, r800_ffff_tmp80);
          r800_ffff_tmp82 = simd_and(r800_ffff_tmp13, r800_ffff_tmp9);
          r800_ffff_tmp83 = simd_or(r800_ffff_tmp81, r800_ffff_tmp82);
          r800_ffff_tmp84 = simd_and(tmp11, basis_bits.bit_6);
          r800_ffff_tmp85 = simd_and(r800_ffff_tmp13, r800_ffff_tmp84);
          cc_range_3009_301e_3 = simd_or(r800_ffff_tmp83, r800_ffff_tmp85);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(18), sequence_e3_80_adv));
          r800_ffff_tmp86 = simd_and(sequence_e3_80_adv, cc_range_3009_301e_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp86);
          byte_ef = simd_and(byte_range_e0_ef, r800_ffff_tmp41);
          r800_ffff_tmp87 = simd_andc(r800_ffff_tmp22, r800_ffff_tmp2);
          byte_b4 = simd_and(r800_ffff_tmp5, r800_ffff_tmp87);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(19), r800_ffff_tmp88));
          sequence_ef_b4 = simd_and(r800_ffff_tmp88, byte_b4);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(20), byte_ef_adv));
          sequence_ef_b4 = simd_and(byte_ef_adv, byte_b4);
          byte_bf = simd_and(r800_ffff_tmp5, r800_ffff_tmp41);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_ef_b4, carryQ.get_carry_in(21), sequence_ef_b4_adv));
          r800_ffff_tmp89 = simd_and(sequence_ef_b4_adv, byte_bf);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp89);
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          r800_ffff_tmp90 = simd_and(r800_ffff_tmp13, r800_ffff_tmp63);
          r800_ffff_tmp91 = simd_and(r800_ffff_tmp5, r800_ffff_tmp23);
          r800_ffff_tmp92 = simd_or(r800_ffff_tmp90, r800_ffff_tmp91);
          r800_ffff_tmp93 = simd_or(r800_ffff_tmp92, byte_b8);
          r800_ffff_tmp94 = simd_and(r800_ffff_tmp5, r800_ffff_tmp15);
          r800_ffff_tmp95 = simd_or(r800_ffff_tmp93, r800_ffff_tmp94);
          r800_ffff_tmp96 = simd_or(r800_ffff_tmp95, byte_bc);
          cc_range_fe18_fe3e_3 = simd_or(r800_ffff_tmp96, r800_ffff_tmp26);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(22), sequence_ef_b8_adv));
          r800_ffff_tmp97 = simd_and(sequence_ef_b8_adv, cc_range_fe18_fe3e_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp97);
          byte_b9 = simd_and(r800_ffff_tmp5, tmp6);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          r800_ffff_tmp98 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp18);
          r800_ffff_tmp99 = simd_andc(r800_ffff_tmp98, r800_ffff_tmp87);
          r800_ffff_tmp100 = simd_andc(r800_ffff_tmp99, r800_ffff_tmp63);
          r800_ffff_tmp101 = simd_andc(r800_ffff_tmp20, r800_ffff_tmp100);
          r800_ffff_tmp102 = simd_or(r800_ffff_tmp101, byte_9a);
          r800_ffff_tmp103 = simd_or(r800_ffff_tmp102, byte_9c);
          r800_ffff_tmp104 = simd_and(r800_ffff_tmp13, r800_ffff_tmp25);
          cc_range_fe40_fe5e_3 = simd_or(r800_ffff_tmp103, r800_ffff_tmp104);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(23), sequence_ef_b9_adv));
          r800_ffff_tmp105 = simd_and(sequence_ef_b9_adv, cc_range_fe40_fe5e_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp105);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          r800_ffff_tmp106 = simd_and(r800_ffff_tmp20, tmp6);
          cc_range_ff09_ff3d_3 = simd_or(r800_ffff_tmp106, r800_ffff_tmp61);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(24), sequence_ef_bc_adv));
          r800_ffff_tmp107 = simd_and(sequence_ef_bc_adv, cc_range_ff09_ff3d_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp107);
          byte_bd = simd_and(r800_ffff_tmp5, tmp12);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          r800_ffff_tmp108 = simd_andc(r800_ffff_tmp31, r800_ffff_tmp3);
          r800_ffff_tmp109 = simd_or(byte_9d, r800_ffff_tmp108);
          r800_ffff_tmp110 = simd_and(r800_ffff_tmp31, r800_ffff_tmp68);
          cc_range_ff5d_ff63_3 = simd_or(r800_ffff_tmp109, r800_ffff_tmp110);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(25), sequence_ef_bd_adv));
          r800_ffff_tmp111 = simd_and(sequence_ef_bd_adv, cc_range_ff5d_ff63_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp111);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 26);
        }
        carryQ.CarryQ_Adjust(26);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Pe & struct_Pe, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, cc_range_29_7d_1, tmp18;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, r800_ffff_tmp2, r800_ffff_tmp3;
		BitBlock byte_e0, r800_ffff_tmp4, r800_ffff_tmp5, r800_ffff_tmp6, byte_bc;
		BitBlock r800_ffff_tmp7, sequence_e0_bc, byte_e0_adv, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, cc_range_f3b_f3d_3;
		BitBlock sequence_e0_bc_adv, r800_ffff_tmp11, r800_ffff_tmp12, byte_e1;
		BitBlock r800_ffff_tmp13, r800_ffff_tmp14, r800_ffff_tmp15, byte_9a;
		BitBlock r800_ffff_tmp16, sequence_e1_9a, byte_e1_adv, byte_9c;
		BitBlock sequence_e1_9a_adv, r800_ffff_tmp17, r800_ffff_tmp18, byte_e2;
		BitBlock r800_ffff_tmp19, r800_ffff_tmp20, byte_81, r800_ffff_tmp21;
		BitBlock sequence_e2_81, byte_e2_adv, r800_ffff_tmp22, r800_ffff_tmp23;
		BitBlock r800_ffff_tmp24, r800_ffff_tmp25, r800_ffff_tmp26;
		BitBlock cc_range_2046_207e_3, sequence_e2_81_adv, r800_ffff_tmp27, byte_82;
		BitBlock sequence_e2_82, byte_8e, sequence_e2_82_adv, r800_ffff_tmp28, byte_8c;
		BitBlock sequence_e2_8c, r800_ffff_tmp29, r800_ffff_tmp30, r800_ffff_tmp31;
		BitBlock r800_ffff_tmp32, cc_range_2309_232a_3, sequence_e2_8c_adv;
		BitBlock r800_ffff_tmp33, byte_9d, sequence_e2_9d, r800_ffff_tmp34;
		BitBlock r800_ffff_tmp35, r800_ffff_tmp36, r800_ffff_tmp37, r800_ffff_tmp38;
		BitBlock r800_ffff_tmp39, cc_range_2769_2775_3, sequence_e2_9d_adv;
		BitBlock r800_ffff_tmp40, r800_ffff_tmp41, byte_9f, sequence_e2_9f;
		BitBlock r800_ffff_tmp42, r800_ffff_tmp43, r800_ffff_tmp44, r800_ffff_tmp45;
		BitBlock r800_ffff_tmp46, r800_ffff_tmp47, r800_ffff_tmp48, r800_ffff_tmp49;
		BitBlock r800_ffff_tmp50, r800_ffff_tmp51, cc_range_27c6_27ef_3;
		BitBlock sequence_e2_9f_adv, r800_ffff_tmp52, byte_a6, sequence_e2_a6;
		BitBlock r800_ffff_tmp53, r800_ffff_tmp54, r800_ffff_tmp55, r800_ffff_tmp56;
		BitBlock r800_ffff_tmp57, r800_ffff_tmp58, cc_range_2984_2998_3;
		BitBlock sequence_e2_a6_adv, r800_ffff_tmp59, byte_a7, sequence_e2_a7;
		BitBlock r800_ffff_tmp60, r800_ffff_tmp61, cc_range_29d9_29fd_3;
		BitBlock sequence_e2_a7_adv, r800_ffff_tmp62, r800_ffff_tmp63, byte_b8;
		BitBlock sequence_e2_b8, r800_ffff_tmp64, r800_ffff_tmp65, r800_ffff_tmp66;
		BitBlock cc_range_2e23_2e29_3, sequence_e2_b8_adv, r800_ffff_tmp67;
		BitBlock r800_ffff_tmp68, byte_e3, byte_80, r800_ffff_tmp69, sequence_e3_80;
		BitBlock byte_e3_adv, r800_ffff_tmp70, r800_ffff_tmp71, r800_ffff_tmp72;
		BitBlock r800_ffff_tmp73, r800_ffff_tmp74, r800_ffff_tmp75, r800_ffff_tmp76;
		BitBlock r800_ffff_tmp77, r800_ffff_tmp78, r800_ffff_tmp79, r800_ffff_tmp80;
		BitBlock r800_ffff_tmp81, r800_ffff_tmp82, r800_ffff_tmp83, r800_ffff_tmp84;
		BitBlock r800_ffff_tmp85, cc_range_3009_301e_3, sequence_e3_80_adv;
		BitBlock r800_ffff_tmp86, byte_ef, r800_ffff_tmp87, byte_b4, r800_ffff_tmp88;
		BitBlock sequence_ef_b4, byte_ef_adv, byte_bf, sequence_ef_b4_adv;
		BitBlock r800_ffff_tmp89, sequence_ef_b8, r800_ffff_tmp90, r800_ffff_tmp91;
		BitBlock r800_ffff_tmp92, r800_ffff_tmp93, r800_ffff_tmp94, r800_ffff_tmp95;
		BitBlock r800_ffff_tmp96, cc_range_fe18_fe3e_3, sequence_ef_b8_adv;
		BitBlock r800_ffff_tmp97, byte_b9, sequence_ef_b9, r800_ffff_tmp98;
		BitBlock r800_ffff_tmp99, r800_ffff_tmp100, r800_ffff_tmp101, r800_ffff_tmp102;
		BitBlock r800_ffff_tmp103, r800_ffff_tmp104, cc_range_fe40_fe5e_3;
		BitBlock sequence_ef_b9_adv, r800_ffff_tmp105, sequence_ef_bc;
		BitBlock r800_ffff_tmp106, cc_range_ff09_ff3d_3, sequence_ef_bc_adv;
		BitBlock r800_ffff_tmp107, byte_bd, sequence_ef_bd, r800_ffff_tmp108;
		BitBlock r800_ffff_tmp109, r800_ffff_tmp110, cc_range_ff5d_ff63_3;
		BitBlock sequence_ef_bd_adv, r800_ffff_tmp111;




        struct_Pe.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp6 = simd_and(tmp4, tmp5);
        tmp7 = simd_and(tmp3, tmp6);
        tmp8 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp9 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp10 = simd_and(tmp8, tmp9);
        tmp11 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp12 = simd_and(tmp11, tmp5);
        tmp13 = simd_and(tmp10, tmp12);
        tmp14 = simd_or(tmp7, tmp13);
        tmp15 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp16 = simd_and(tmp8, tmp15);
        tmp17 = simd_and(tmp16, tmp12);
        cc_range_29_7d_1 = simd_or(tmp14, tmp17);
        struct_Pe.cc = simd_or(struct_Pe.cc, cc_range_29_7d_1);
        tmp18 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_e0_ef = simd_and(tmp18, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 26))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp3 = simd_or(r800_ffff_tmp1, r800_ffff_tmp2);
          byte_e0 = simd_andc(byte_range_e0_ef, r800_ffff_tmp3);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp5 = simd_and(r800_ffff_tmp4, tmp15);
          r800_ffff_tmp6 = simd_andc(tmp11, r800_ffff_tmp2);
          byte_bc = simd_and(r800_ffff_tmp5, r800_ffff_tmp6);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(0), r800_ffff_tmp7));
          sequence_e0_bc = simd_and(r800_ffff_tmp7, byte_bc);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(1), byte_e0_adv));
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          r800_ffff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp9 = simd_and(tmp4, r800_ffff_tmp8);
          r800_ffff_tmp10 = simd_or(r800_ffff_tmp9, tmp12);
          cc_range_f3b_f3d_3 = simd_and(r800_ffff_tmp5, r800_ffff_tmp10);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(2), sequence_e0_bc_adv));
          r800_ffff_tmp11 = simd_and(sequence_e0_bc_adv, cc_range_f3b_f3d_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp11);
          r800_ffff_tmp12 = simd_andc(tmp5, r800_ffff_tmp1);
          byte_e1 = simd_and(byte_range_e0_ef, r800_ffff_tmp12);
          r800_ffff_tmp13 = simd_and(r800_ffff_tmp4, tmp9);
          r800_ffff_tmp14 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp15 = simd_and(tmp4, r800_ffff_tmp14);
          byte_9a = simd_and(r800_ffff_tmp13, r800_ffff_tmp15);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(3), r800_ffff_tmp16));
          sequence_e1_9a = simd_and(r800_ffff_tmp16, byte_9a);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(4), byte_e1_adv));
          sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
          byte_9c = simd_and(r800_ffff_tmp13, r800_ffff_tmp6);
          carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(5), sequence_e1_9a_adv));
          r800_ffff_tmp17 = simd_and(sequence_e1_9a_adv, byte_9c);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp17);
          r800_ffff_tmp18 = simd_andc(r800_ffff_tmp14, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp18);
          r800_ffff_tmp19 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp20 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp19);
          byte_81 = simd_and(r800_ffff_tmp20, r800_ffff_tmp12);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(6), r800_ffff_tmp21));
          sequence_e2_81 = simd_and(r800_ffff_tmp21, byte_81);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(7), byte_e2_adv));
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          r800_ffff_tmp22 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r800_ffff_tmp23 = simd_and(r800_ffff_tmp22, r800_ffff_tmp14);
          r800_ffff_tmp24 = simd_and(r800_ffff_tmp20, r800_ffff_tmp23);
          r800_ffff_tmp25 = simd_and(tmp11, r800_ffff_tmp14);
          r800_ffff_tmp26 = simd_and(r800_ffff_tmp5, r800_ffff_tmp25);
          cc_range_2046_207e_3 = simd_or(r800_ffff_tmp24, r800_ffff_tmp26);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(8), sequence_e2_81_adv));
          r800_ffff_tmp27 = simd_and(sequence_e2_81_adv, cc_range_2046_207e_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp27);
          byte_82 = simd_and(r800_ffff_tmp20, r800_ffff_tmp18);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          byte_8e = simd_and(r800_ffff_tmp20, r800_ffff_tmp25);
          carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(9), sequence_e2_82_adv));
          r800_ffff_tmp28 = simd_and(sequence_e2_82_adv, byte_8e);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp28);
          byte_8c = simd_and(r800_ffff_tmp20, r800_ffff_tmp6);
          sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
          sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
          r800_ffff_tmp29 = simd_and(tmp4, basis_bits.bit_7);
          r800_ffff_tmp30 = simd_and(r800_ffff_tmp20, r800_ffff_tmp29);
          r800_ffff_tmp31 = simd_and(r800_ffff_tmp4, tmp2);
          r800_ffff_tmp32 = simd_and(r800_ffff_tmp31, r800_ffff_tmp15);
          cc_range_2309_232a_3 = simd_or(r800_ffff_tmp30, r800_ffff_tmp32);
          carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e2_8c, carryQ.get_carry_in(10), sequence_e2_8c_adv));
          r800_ffff_tmp33 = simd_and(sequence_e2_8c_adv, cc_range_2309_232a_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp33);
          byte_9d = simd_and(r800_ffff_tmp13, tmp12);
          sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
          sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
          r800_ffff_tmp34 = simd_and(r800_ffff_tmp4, basis_bits.bit_2);
          r800_ffff_tmp35 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp36 = simd_or(basis_bits.bit_4, r800_ffff_tmp35);
          r800_ffff_tmp37 = simd_not(r800_ffff_tmp36);
          r800_ffff_tmp38 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp37), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
          r800_ffff_tmp39 = simd_and(r800_ffff_tmp34, r800_ffff_tmp38);
          cc_range_2769_2775_3 = simd_andc(r800_ffff_tmp39, basis_bits.bit_7);
          carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e2_9d, carryQ.get_carry_in(11), sequence_e2_9d_adv));
          r800_ffff_tmp40 = simd_and(sequence_e2_9d_adv, cc_range_2769_2775_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp40);
          r800_ffff_tmp41 = simd_and(tmp11, r800_ffff_tmp8);
          byte_9f = simd_and(r800_ffff_tmp13, r800_ffff_tmp41);
          sequence_e2_9f = simd_and(byte_e2_adv, byte_9f);
          sequence_e2_9f = simd_and(byte_e2_adv, byte_9f);
          r800_ffff_tmp42 = simd_and(r800_ffff_tmp22, r800_ffff_tmp8);
          r800_ffff_tmp43 = simd_and(r800_ffff_tmp31, r800_ffff_tmp42);
          r800_ffff_tmp44 = simd_or(r800_ffff_tmp24, r800_ffff_tmp43);
          r800_ffff_tmp45 = simd_and(r800_ffff_tmp31, tmp6);
          r800_ffff_tmp46 = simd_or(r800_ffff_tmp44, r800_ffff_tmp45);
          r800_ffff_tmp47 = simd_and(r800_ffff_tmp31, r800_ffff_tmp9);
          r800_ffff_tmp48 = simd_or(r800_ffff_tmp46, r800_ffff_tmp47);
          r800_ffff_tmp49 = simd_and(r800_ffff_tmp31, tmp12);
          r800_ffff_tmp50 = simd_or(r800_ffff_tmp48, r800_ffff_tmp49);
          r800_ffff_tmp51 = simd_and(r800_ffff_tmp31, r800_ffff_tmp41);
          cc_range_27c6_27ef_3 = simd_or(r800_ffff_tmp50, r800_ffff_tmp51);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_e2_9f, carryQ.get_carry_in(12), sequence_e2_9f_adv));
          r800_ffff_tmp52 = simd_and(sequence_e2_9f_adv, cc_range_27c6_27ef_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp52);
          byte_a6 = simd_and(r800_ffff_tmp31, r800_ffff_tmp23);
          sequence_e2_a6 = simd_and(byte_e2_adv, byte_a6);
          sequence_e2_a6 = simd_and(byte_e2_adv, byte_a6);
          r800_ffff_tmp53 = simd_andc(r800_ffff_tmp4, basis_bits.bit_2);
          r800_ffff_tmp54 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp55 = simd_and(basis_bits.bit_4, r800_ffff_tmp54);
          r800_ffff_tmp56 = simd_not(r800_ffff_tmp55);
          r800_ffff_tmp57 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp56), simd_andc(r800_ffff_tmp1, basis_bits.bit_3));
          r800_ffff_tmp58 = simd_and(r800_ffff_tmp53, r800_ffff_tmp57);
          cc_range_2984_2998_3 = simd_andc(r800_ffff_tmp58, basis_bits.bit_7);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_e2_a6, carryQ.get_carry_in(13), sequence_e2_a6_adv));
          r800_ffff_tmp59 = simd_and(sequence_e2_a6_adv, cc_range_2984_2998_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp59);
          byte_a7 = simd_and(r800_ffff_tmp31, r800_ffff_tmp42);
          sequence_e2_a7 = simd_and(byte_e2_adv, byte_a7);
          sequence_e2_a7 = simd_and(byte_e2_adv, byte_a7);
          r800_ffff_tmp60 = simd_and(r800_ffff_tmp13, r800_ffff_tmp29);
          r800_ffff_tmp61 = simd_and(r800_ffff_tmp5, tmp12);
          cc_range_29d9_29fd_3 = simd_or(r800_ffff_tmp60, r800_ffff_tmp61);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e2_a7, carryQ.get_carry_in(14), sequence_e2_a7_adv));
          r800_ffff_tmp62 = simd_and(sequence_e2_a7_adv, cc_range_29d9_29fd_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp62);
          r800_ffff_tmp63 = simd_andc(tmp4, r800_ffff_tmp2);
          byte_b8 = simd_and(r800_ffff_tmp5, r800_ffff_tmp63);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          r800_ffff_tmp64 = simd_not(r800_ffff_tmp54);
          r800_ffff_tmp65 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp64), simd_andc(r800_ffff_tmp54, basis_bits.bit_4));
          r800_ffff_tmp66 = simd_and(r800_ffff_tmp31, r800_ffff_tmp65);
          cc_range_2e23_2e29_3 = simd_andc(r800_ffff_tmp66, basis_bits.bit_7);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(15), sequence_e2_b8_adv));
          r800_ffff_tmp67 = simd_and(sequence_e2_b8_adv, cc_range_2e23_2e29_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp67);
          r800_ffff_tmp68 = simd_andc(r800_ffff_tmp8, r800_ffff_tmp1);
          byte_e3 = simd_and(byte_range_e0_ef, r800_ffff_tmp68);
          byte_80 = simd_andc(r800_ffff_tmp20, r800_ffff_tmp3);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(16), r800_ffff_tmp69));
          sequence_e3_80 = simd_and(r800_ffff_tmp69, byte_80);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(17), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          r800_ffff_tmp70 = simd_or(r800_ffff_tmp29, tmp12);
          r800_ffff_tmp71 = simd_or(r800_ffff_tmp70, r800_ffff_tmp41);
          r800_ffff_tmp72 = simd_and(r800_ffff_tmp20, r800_ffff_tmp71);
          r800_ffff_tmp73 = simd_and(r800_ffff_tmp13, r800_ffff_tmp12);
          r800_ffff_tmp74 = simd_or(r800_ffff_tmp72, r800_ffff_tmp73);
          r800_ffff_tmp75 = simd_and(r800_ffff_tmp22, tmp5);
          r800_ffff_tmp76 = simd_and(r800_ffff_tmp13, r800_ffff_tmp75);
          r800_ffff_tmp77 = simd_or(r800_ffff_tmp74, r800_ffff_tmp76);
          r800_ffff_tmp78 = simd_and(r800_ffff_tmp13, r800_ffff_tmp42);
          r800_ffff_tmp79 = simd_or(r800_ffff_tmp77, r800_ffff_tmp78);
          r800_ffff_tmp80 = simd_and(r800_ffff_tmp13, tmp6);
          r800_ffff_tmp81 = simd_or(r800_ffff_tmp79, r800_ffff_tmp80);
          r800_ffff_tmp82 = simd_and(r800_ffff_tmp13, r800_ffff_tmp9);
          r800_ffff_tmp83 = simd_or(r800_ffff_tmp81, r800_ffff_tmp82);
          r800_ffff_tmp84 = simd_and(tmp11, basis_bits.bit_6);
          r800_ffff_tmp85 = simd_and(r800_ffff_tmp13, r800_ffff_tmp84);
          cc_range_3009_301e_3 = simd_or(r800_ffff_tmp83, r800_ffff_tmp85);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(18), sequence_e3_80_adv));
          r800_ffff_tmp86 = simd_and(sequence_e3_80_adv, cc_range_3009_301e_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp86);
          byte_ef = simd_and(byte_range_e0_ef, r800_ffff_tmp41);
          r800_ffff_tmp87 = simd_andc(r800_ffff_tmp22, r800_ffff_tmp2);
          byte_b4 = simd_and(r800_ffff_tmp5, r800_ffff_tmp87);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(19), r800_ffff_tmp88));
          sequence_ef_b4 = simd_and(r800_ffff_tmp88, byte_b4);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(20), byte_ef_adv));
          sequence_ef_b4 = simd_and(byte_ef_adv, byte_b4);
          byte_bf = simd_and(r800_ffff_tmp5, r800_ffff_tmp41);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_ef_b4, carryQ.get_carry_in(21), sequence_ef_b4_adv));
          r800_ffff_tmp89 = simd_and(sequence_ef_b4_adv, byte_bf);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp89);
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          r800_ffff_tmp90 = simd_and(r800_ffff_tmp13, r800_ffff_tmp63);
          r800_ffff_tmp91 = simd_and(r800_ffff_tmp5, r800_ffff_tmp23);
          r800_ffff_tmp92 = simd_or(r800_ffff_tmp90, r800_ffff_tmp91);
          r800_ffff_tmp93 = simd_or(r800_ffff_tmp92, byte_b8);
          r800_ffff_tmp94 = simd_and(r800_ffff_tmp5, r800_ffff_tmp15);
          r800_ffff_tmp95 = simd_or(r800_ffff_tmp93, r800_ffff_tmp94);
          r800_ffff_tmp96 = simd_or(r800_ffff_tmp95, byte_bc);
          cc_range_fe18_fe3e_3 = simd_or(r800_ffff_tmp96, r800_ffff_tmp26);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(22), sequence_ef_b8_adv));
          r800_ffff_tmp97 = simd_and(sequence_ef_b8_adv, cc_range_fe18_fe3e_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp97);
          byte_b9 = simd_and(r800_ffff_tmp5, tmp6);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          r800_ffff_tmp98 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp18);
          r800_ffff_tmp99 = simd_andc(r800_ffff_tmp98, r800_ffff_tmp87);
          r800_ffff_tmp100 = simd_andc(r800_ffff_tmp99, r800_ffff_tmp63);
          r800_ffff_tmp101 = simd_andc(r800_ffff_tmp20, r800_ffff_tmp100);
          r800_ffff_tmp102 = simd_or(r800_ffff_tmp101, byte_9a);
          r800_ffff_tmp103 = simd_or(r800_ffff_tmp102, byte_9c);
          r800_ffff_tmp104 = simd_and(r800_ffff_tmp13, r800_ffff_tmp25);
          cc_range_fe40_fe5e_3 = simd_or(r800_ffff_tmp103, r800_ffff_tmp104);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(23), sequence_ef_b9_adv));
          r800_ffff_tmp105 = simd_and(sequence_ef_b9_adv, cc_range_fe40_fe5e_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp105);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          r800_ffff_tmp106 = simd_and(r800_ffff_tmp20, tmp6);
          cc_range_ff09_ff3d_3 = simd_or(r800_ffff_tmp106, r800_ffff_tmp61);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(24), sequence_ef_bc_adv));
          r800_ffff_tmp107 = simd_and(sequence_ef_bc_adv, cc_range_ff09_ff3d_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp107);
          byte_bd = simd_and(r800_ffff_tmp5, tmp12);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          r800_ffff_tmp108 = simd_andc(r800_ffff_tmp31, r800_ffff_tmp3);
          r800_ffff_tmp109 = simd_or(byte_9d, r800_ffff_tmp108);
          r800_ffff_tmp110 = simd_and(r800_ffff_tmp31, r800_ffff_tmp68);
          cc_range_ff5d_ff63_3 = simd_or(r800_ffff_tmp109, r800_ffff_tmp110);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(25), sequence_ef_bd_adv));
          r800_ffff_tmp111 = simd_and(sequence_ef_bd_adv, cc_range_ff5d_ff63_3);
          struct_Pe.cc = simd_or(struct_Pe.cc, r800_ffff_tmp111);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 26);
        }
  }
  CarryArray<26, 0> carryQ;
  };

  struct Pi {
  Pi() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Pi & struct_Pi) {
		BitBlock tmp1, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10, r80_7ff_tmp11, byte_ab;
		BitBlock byte_c2_adv, r80_7ff_tmp12, tmp2, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, byte_e2, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock byte_80, r800_ffff_tmp9, sequence_e2_80, byte_e2_adv, r800_ffff_tmp10;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13, r800_ffff_tmp14;
		BitBlock r800_ffff_tmp15, r800_ffff_tmp16, r800_ffff_tmp17, r800_ffff_tmp18;
		BitBlock r800_ffff_tmp19, r800_ffff_tmp20, r800_ffff_tmp21, r800_ffff_tmp22;
		BitBlock r800_ffff_tmp23, r800_ffff_tmp24, r800_ffff_tmp25, r800_ffff_tmp26;
		BitBlock r800_ffff_tmp27, r800_ffff_tmp28, r800_ffff_tmp29;
		BitBlock cc_range_2018_2039_3, sequence_e2_80_adv, r800_ffff_tmp30, byte_b8;
		BitBlock sequence_e2_b8, r800_ffff_tmp31, r800_ffff_tmp32, r800_ffff_tmp33;
		BitBlock r800_ffff_tmp34, r800_ffff_tmp35, r800_ffff_tmp36, r800_ffff_tmp37;
		BitBlock r800_ffff_tmp38, r800_ffff_tmp39, r800_ffff_tmp40, r800_ffff_tmp41;
		BitBlock cc_range_2e02_2e20_3, sequence_e2_b8_adv, r800_ffff_tmp42;




        struct_Pi.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
          r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp2 = simd_andc(tmp1, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
          byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
          r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r80_7ff_tmp7 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp8 = simd_and(r80_7ff_tmp6, r80_7ff_tmp7);
          r80_7ff_tmp9 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp11 = simd_and(r80_7ff_tmp9, r80_7ff_tmp10);
          byte_ab = simd_and(r80_7ff_tmp8, r80_7ff_tmp11);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
          r80_7ff_tmp12 = simd_and(byte_c2_adv, byte_ab);
          struct_Pi.cc = simd_or(struct_Pi.cc, r80_7ff_tmp12);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 4))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp3 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp3);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp6 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp8 = simd_or(r800_ffff_tmp1, r800_ffff_tmp7);
          byte_80 = simd_andc(r800_ffff_tmp6, r800_ffff_tmp8);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r800_ffff_tmp9));
          sequence_e2_80 = simd_and(r800_ffff_tmp9, byte_80);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(2), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp10 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r800_ffff_tmp11 = simd_and(r800_ffff_tmp4, r800_ffff_tmp10);
          r800_ffff_tmp12 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp13 = simd_andc(r800_ffff_tmp12, r800_ffff_tmp7);
          r800_ffff_tmp14 = simd_and(r800_ffff_tmp11, r800_ffff_tmp13);
          r800_ffff_tmp15 = simd_and(r800_ffff_tmp11, basis_bits.bit_4);
          r800_ffff_tmp16 = simd_not(r800_ffff_tmp7);
          r800_ffff_tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp18 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp16), simd_andc(r800_ffff_tmp17, basis_bits.bit_5));
          r800_ffff_tmp19 = simd_and(r800_ffff_tmp15, r800_ffff_tmp18);
          r800_ffff_tmp20 = simd_or(r800_ffff_tmp14, r800_ffff_tmp19);
          r800_ffff_tmp21 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp22 = simd_and(r800_ffff_tmp21, r800_ffff_tmp17);
          r800_ffff_tmp23 = simd_and(r800_ffff_tmp11, r800_ffff_tmp22);
          r800_ffff_tmp24 = simd_or(r800_ffff_tmp20, r800_ffff_tmp23);
          r800_ffff_tmp25 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp26 = simd_and(r800_ffff_tmp4, r800_ffff_tmp25);
          r800_ffff_tmp27 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp28 = simd_and(r800_ffff_tmp12, r800_ffff_tmp27);
          r800_ffff_tmp29 = simd_and(r800_ffff_tmp26, r800_ffff_tmp28);
          cc_range_2018_2039_3 = simd_or(r800_ffff_tmp24, r800_ffff_tmp29);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(3), sequence_e2_80_adv));
          r800_ffff_tmp30 = simd_and(sequence_e2_80_adv, cc_range_2018_2039_3);
          struct_Pi.cc = simd_or(struct_Pi.cc, r800_ffff_tmp30);
          byte_b8 = simd_and(r800_ffff_tmp26, r800_ffff_tmp13);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          r800_ffff_tmp31 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r800_ffff_tmp32 = simd_andc(r800_ffff_tmp31, r800_ffff_tmp7);
          r800_ffff_tmp33 = simd_or(r800_ffff_tmp3, r800_ffff_tmp32);
          r800_ffff_tmp34 = simd_or(r800_ffff_tmp33, r800_ffff_tmp28);
          r800_ffff_tmp35 = simd_andc(r800_ffff_tmp21, r800_ffff_tmp7);
          r800_ffff_tmp36 = simd_or(r800_ffff_tmp34, r800_ffff_tmp35);
          r800_ffff_tmp37 = simd_and(r800_ffff_tmp6, r800_ffff_tmp36);
          r800_ffff_tmp38 = simd_and(r800_ffff_tmp11, r800_ffff_tmp35);
          r800_ffff_tmp39 = simd_or(r800_ffff_tmp37, r800_ffff_tmp38);
          r800_ffff_tmp40 = simd_and(r800_ffff_tmp4, tmp2);
          r800_ffff_tmp41 = simd_andc(r800_ffff_tmp40, r800_ffff_tmp8);
          cc_range_2e02_2e20_3 = simd_or(r800_ffff_tmp39, r800_ffff_tmp41);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(4), sequence_e2_b8_adv));
          r800_ffff_tmp42 = simd_and(sequence_e2_b8_adv, cc_range_2e02_2e20_3);
          struct_Pi.cc = simd_or(struct_Pi.cc, r800_ffff_tmp42);
        }
        else {
          carryQ.CarryDequeueEnqueue(1, 4);
        }
        carryQ.CarryQ_Adjust(5);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Pi & struct_Pi, BitBlock EOF_mask) {
		BitBlock tmp1, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10, r80_7ff_tmp11, byte_ab;
		BitBlock byte_c2_adv, r80_7ff_tmp12, tmp2, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, byte_e2, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock byte_80, r800_ffff_tmp9, sequence_e2_80, byte_e2_adv, r800_ffff_tmp10;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13, r800_ffff_tmp14;
		BitBlock r800_ffff_tmp15, r800_ffff_tmp16, r800_ffff_tmp17, r800_ffff_tmp18;
		BitBlock r800_ffff_tmp19, r800_ffff_tmp20, r800_ffff_tmp21, r800_ffff_tmp22;
		BitBlock r800_ffff_tmp23, r800_ffff_tmp24, r800_ffff_tmp25, r800_ffff_tmp26;
		BitBlock r800_ffff_tmp27, r800_ffff_tmp28, r800_ffff_tmp29;
		BitBlock cc_range_2018_2039_3, sequence_e2_80_adv, r800_ffff_tmp30, byte_b8;
		BitBlock sequence_e2_b8, r800_ffff_tmp31, r800_ffff_tmp32, r800_ffff_tmp33;
		BitBlock r800_ffff_tmp34, r800_ffff_tmp35, r800_ffff_tmp36, r800_ffff_tmp37;
		BitBlock r800_ffff_tmp38, r800_ffff_tmp39, r800_ffff_tmp40, r800_ffff_tmp41;
		BitBlock cc_range_2e02_2e20_3, sequence_e2_b8_adv, r800_ffff_tmp42;




        struct_Pi.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
          r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp2 = simd_andc(tmp1, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
          byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
          r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r80_7ff_tmp7 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp8 = simd_and(r80_7ff_tmp6, r80_7ff_tmp7);
          r80_7ff_tmp9 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp10 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp11 = simd_and(r80_7ff_tmp9, r80_7ff_tmp10);
          byte_ab = simd_and(r80_7ff_tmp8, r80_7ff_tmp11);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
          r80_7ff_tmp12 = simd_and(byte_c2_adv, byte_ab);
          struct_Pi.cc = simd_or(struct_Pi.cc, r80_7ff_tmp12);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 4))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp3 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp3);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp6 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp8 = simd_or(r800_ffff_tmp1, r800_ffff_tmp7);
          byte_80 = simd_andc(r800_ffff_tmp6, r800_ffff_tmp8);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r800_ffff_tmp9));
          sequence_e2_80 = simd_and(r800_ffff_tmp9, byte_80);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(2), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp10 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r800_ffff_tmp11 = simd_and(r800_ffff_tmp4, r800_ffff_tmp10);
          r800_ffff_tmp12 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp13 = simd_andc(r800_ffff_tmp12, r800_ffff_tmp7);
          r800_ffff_tmp14 = simd_and(r800_ffff_tmp11, r800_ffff_tmp13);
          r800_ffff_tmp15 = simd_and(r800_ffff_tmp11, basis_bits.bit_4);
          r800_ffff_tmp16 = simd_not(r800_ffff_tmp7);
          r800_ffff_tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp18 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp16), simd_andc(r800_ffff_tmp17, basis_bits.bit_5));
          r800_ffff_tmp19 = simd_and(r800_ffff_tmp15, r800_ffff_tmp18);
          r800_ffff_tmp20 = simd_or(r800_ffff_tmp14, r800_ffff_tmp19);
          r800_ffff_tmp21 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp22 = simd_and(r800_ffff_tmp21, r800_ffff_tmp17);
          r800_ffff_tmp23 = simd_and(r800_ffff_tmp11, r800_ffff_tmp22);
          r800_ffff_tmp24 = simd_or(r800_ffff_tmp20, r800_ffff_tmp23);
          r800_ffff_tmp25 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp26 = simd_and(r800_ffff_tmp4, r800_ffff_tmp25);
          r800_ffff_tmp27 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp28 = simd_and(r800_ffff_tmp12, r800_ffff_tmp27);
          r800_ffff_tmp29 = simd_and(r800_ffff_tmp26, r800_ffff_tmp28);
          cc_range_2018_2039_3 = simd_or(r800_ffff_tmp24, r800_ffff_tmp29);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(3), sequence_e2_80_adv));
          r800_ffff_tmp30 = simd_and(sequence_e2_80_adv, cc_range_2018_2039_3);
          struct_Pi.cc = simd_or(struct_Pi.cc, r800_ffff_tmp30);
          byte_b8 = simd_and(r800_ffff_tmp26, r800_ffff_tmp13);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          r800_ffff_tmp31 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r800_ffff_tmp32 = simd_andc(r800_ffff_tmp31, r800_ffff_tmp7);
          r800_ffff_tmp33 = simd_or(r800_ffff_tmp3, r800_ffff_tmp32);
          r800_ffff_tmp34 = simd_or(r800_ffff_tmp33, r800_ffff_tmp28);
          r800_ffff_tmp35 = simd_andc(r800_ffff_tmp21, r800_ffff_tmp7);
          r800_ffff_tmp36 = simd_or(r800_ffff_tmp34, r800_ffff_tmp35);
          r800_ffff_tmp37 = simd_and(r800_ffff_tmp6, r800_ffff_tmp36);
          r800_ffff_tmp38 = simd_and(r800_ffff_tmp11, r800_ffff_tmp35);
          r800_ffff_tmp39 = simd_or(r800_ffff_tmp37, r800_ffff_tmp38);
          r800_ffff_tmp40 = simd_and(r800_ffff_tmp4, tmp2);
          r800_ffff_tmp41 = simd_andc(r800_ffff_tmp40, r800_ffff_tmp8);
          cc_range_2e02_2e20_3 = simd_or(r800_ffff_tmp39, r800_ffff_tmp41);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(4), sequence_e2_b8_adv));
          r800_ffff_tmp42 = simd_and(sequence_e2_b8_adv, cc_range_2e02_2e20_3);
          struct_Pi.cc = simd_or(struct_Pi.cc, r800_ffff_tmp42);
        }
        else {
          carryQ.CarryDequeueEnqueue(1, 4);
        }
  }
  CarryArray<5, 0> carryQ;
  };

  struct Po {
  Po() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Po & struct_Po) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp21;
		BitBlock tmp22, tmp23, tmp24, tmp25, tmp26, tmp27, tmp28, tmp29, tmp30, tmp31;
		BitBlock tmp32, tmp33, tmp34, tmp35, tmp36, tmp37, tmp38, tmp39, tmp40;
		BitBlock cc_range_21_5c_1, tmp41, tmp42, byte_f0, tmp43, tmp44, tmp45, tmp46;
		BitBlock byte_91, tmp47, sequence_f0_91, byte_f0_adv, tmp48, byte_81, tmp49;
		BitBlock sequence_f0_91_81, sequence_f0_91_adv, tmp50, tmp51, tmp52, tmp53;
		BitBlock byte_range_87_8d, sequence_f0_91_81_adv, tmp54, tmp55, byte_82;
		BitBlock sequence_f0_91_82, tmp56, tmp57, tmp58, tmp59, tmp60, tmp61;
		BitBlock cc_range_110bb_110be_4, sequence_f0_91_82_adv, tmp62, tmp63, byte_83;
		BitBlock sequence_f0_91_83, tmp64, byte_range_80_81, sequence_f0_91_83_adv;
		BitBlock tmp65, tmp66, byte_85, sequence_f0_91_85, byte_range_80_83;
		BitBlock sequence_f0_91_85_adv, tmp67, tmp68, byte_87, sequence_f0_91_87;
		BitBlock tmp69, tmp70, tmp71, tmp72, byte_range_85_88, sequence_f0_91_87_adv;
		BitBlock tmp73, byte_92, sequence_f0_92, tmp74, sequence_f0_92_91;
		BitBlock sequence_f0_92_adv, byte_range_b0_b3, sequence_f0_92_91_adv, tmp75;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, byte_c2, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8;
		BitBlock cc_range_a1_bf_2, byte_c2_adv, r80_7ff_tmp9, r80_7ff_tmp10, byte_cd;
		BitBlock r80_7ff_tmp11, byte_be, byte_cd_adv, r80_7ff_tmp12, byte_ce;
		BitBlock byte_ce_adv, r80_7ff_tmp13, r80_7ff_tmp14, byte_d5, r80_7ff_tmp15;
		BitBlock r80_7ff_tmp16, byte_range_9a_9f, byte_d5_adv, r80_7ff_tmp17;
		BitBlock r80_7ff_tmp18, byte_d6, r80_7ff_tmp19, byte_89, byte_d6_adv;
		BitBlock r80_7ff_tmp20, byte_d7, r80_7ff_tmp21, r80_7ff_tmp22, r80_7ff_tmp23;
		BitBlock r80_7ff_tmp24, r80_7ff_tmp25, cc_range_5c0_5f3_2, byte_d7_adv;
		BitBlock r80_7ff_tmp26, r80_7ff_tmp27, byte_d8, r80_7ff_tmp28, r80_7ff_tmp29;
		BitBlock r80_7ff_tmp30, r80_7ff_tmp31, r80_7ff_tmp32, r80_7ff_tmp33;
		BitBlock r80_7ff_tmp34, r80_7ff_tmp35, r80_7ff_tmp36, r80_7ff_tmp37;
		BitBlock r80_7ff_tmp38, cc_range_609_61e_2, byte_d8_adv, r80_7ff_tmp39;
		BitBlock byte_d9, r80_7ff_tmp40, r80_7ff_tmp41, r80_7ff_tmp42;
		BitBlock byte_range_aa_ad, byte_d9_adv, r80_7ff_tmp43, byte_db, r80_7ff_tmp44;
		BitBlock byte_94, byte_db_adv, r80_7ff_tmp45, byte_dc, r80_7ff_tmp46;
		BitBlock byte_range_80_8d, byte_dc_adv, r80_7ff_tmp47, byte_df, r80_7ff_tmp48;
		BitBlock r80_7ff_tmp49, byte_range_b7_b9, byte_df_adv, r80_7ff_tmp50;
		BitBlock byte_range_e0_ef, byte_e0, r800_ffff_tmp1, byte_a0, r800_ffff_tmp2;
		BitBlock sequence_e0_a0, byte_e0_adv, r800_ffff_tmp3, byte_range_b0_be;
		BitBlock sequence_e0_a0_adv, r800_ffff_tmp4, byte_a1, sequence_e0_a1;
		BitBlock r800_ffff_tmp5, byte_9e, sequence_e0_a1_adv, r800_ffff_tmp6, byte_a5;
		BitBlock sequence_e0_a5, r800_ffff_tmp7, r800_ffff_tmp8, r800_ffff_tmp9;
		BitBlock cc_range_964_970_3, sequence_e0_a5_adv, r800_ffff_tmp10;
		BitBlock r800_ffff_tmp11, byte_ab, sequence_e0_ab, byte_b0, sequence_e0_ab_adv;
		BitBlock r800_ffff_tmp12, byte_b7, sequence_e0_b7, r800_ffff_tmp13, byte_b4;
		BitBlock sequence_e0_b7_adv, r800_ffff_tmp14, r800_ffff_tmp15, byte_b9;
		BitBlock sequence_e0_b9, r800_ffff_tmp16, r800_ffff_tmp17, cc_range_e4f_e5a_3;
		BitBlock sequence_e0_b9_adv, r800_ffff_tmp18, byte_bc, sequence_e0_bc;
		BitBlock r800_ffff_tmp19, r800_ffff_tmp20, r800_ffff_tmp21, r800_ffff_tmp22;
		BitBlock r800_ffff_tmp23, r800_ffff_tmp24, cc_range_f04_f14_3;
		BitBlock sequence_e0_bc_adv, r800_ffff_tmp25, sequence_e0_be;
		BitBlock sequence_e0_be_adv, r800_ffff_tmp26, byte_bf, sequence_e0_bf;
		BitBlock r800_ffff_tmp27, r800_ffff_tmp28, r800_ffff_tmp29, r800_ffff_tmp30;
		BitBlock r800_ffff_tmp31, r800_ffff_tmp32, cc_range_fd0_fd9_3;
		BitBlock sequence_e0_bf_adv, r800_ffff_tmp33, byte_e1, r800_ffff_tmp34;
		BitBlock sequence_e1_81, byte_e1_adv, r800_ffff_tmp35, r800_ffff_tmp36;
		BitBlock byte_range_8a_8f, sequence_e1_81_adv, r800_ffff_tmp37, sequence_e1_83;
		BitBlock byte_bb, sequence_e1_83_adv, r800_ffff_tmp38, r800_ffff_tmp39;
		BitBlock byte_8d, sequence_e1_8d, r800_ffff_tmp40, byte_range_a0_a8;
		BitBlock sequence_e1_8d_adv, r800_ffff_tmp41, byte_99, sequence_e1_99;
		BitBlock r800_ffff_tmp42, byte_range_ad_ae, sequence_e1_99_adv;
		BitBlock r800_ffff_tmp43, byte_9b, sequence_e1_9b, r800_ffff_tmp44;
		BitBlock r800_ffff_tmp45, r800_ffff_tmp46, byte_range_ab_ad;
		BitBlock sequence_e1_9b_adv, r800_ffff_tmp47, byte_9c, sequence_e1_9c;
		BitBlock r800_ffff_tmp48, byte_range_b5_b6, sequence_e1_9c_adv;
		BitBlock r800_ffff_tmp49, byte_9f, sequence_e1_9f, r800_ffff_tmp50;
		BitBlock r800_ffff_tmp51, cc_range_17d4_17d8_3, sequence_e1_9f_adv;
		BitBlock r800_ffff_tmp52, sequence_e1_a0, r800_ffff_tmp53, r800_ffff_tmp54;
		BitBlock r800_ffff_tmp55, r800_ffff_tmp56, r800_ffff_tmp57, r800_ffff_tmp58;
		BitBlock cc_range_1800_1807_3, sequence_e1_a0_adv, r800_ffff_tmp59;
		BitBlock sequence_e1_a5, byte_range_84_85, sequence_e1_a5_adv, r800_ffff_tmp60;
		BitBlock r800_ffff_tmp61, byte_a8, sequence_e1_a8, byte_range_9e_9f;
		BitBlock sequence_e1_a8_adv, r800_ffff_tmp62, byte_aa, sequence_e1_aa;
		BitBlock r800_ffff_tmp63, r800_ffff_tmp64, r800_ffff_tmp65;
		BitBlock cc_range_1aa0_1aa8_3, sequence_e1_aa_adv, r800_ffff_tmp66, byte_ad;
		BitBlock sequence_e1_ad, r800_ffff_tmp67, r800_ffff_tmp68, r800_ffff_tmp69;
		BitBlock r800_ffff_tmp70, r800_ffff_tmp71, byte_range_9a_a0;
		BitBlock sequence_e1_ad_adv, r800_ffff_tmp72, byte_af, sequence_e1_af;
		BitBlock byte_range_bc_bf, sequence_e1_af_adv, r800_ffff_tmp73, sequence_e1_b0;
		BitBlock byte_range_bb_bf, sequence_e1_b0_adv, r800_ffff_tmp74, byte_b1;
		BitBlock sequence_e1_b1, byte_range_be_bf, sequence_e1_b1_adv, r800_ffff_tmp75;
		BitBlock byte_b3, sequence_e1_b3, r800_ffff_tmp76, cc_range_1cc0_1cd3_3;
		BitBlock sequence_e1_b3_adv, r800_ffff_tmp77, byte_e2, byte_80;
		BitBlock r800_ffff_tmp78, sequence_e2_80, byte_e2_adv, r800_ffff_tmp79;
		BitBlock r800_ffff_tmp80, r800_ffff_tmp81, r800_ffff_tmp82, r800_ffff_tmp83;
		BitBlock r800_ffff_tmp84, r800_ffff_tmp85, r800_ffff_tmp86;
		BitBlock cc_range_2016_203b_3, sequence_e2_80_adv, r800_ffff_tmp87;
		BitBlock sequence_e2_81, r800_ffff_tmp88, r800_ffff_tmp89, r800_ffff_tmp90;
		BitBlock r800_ffff_tmp91, r800_ffff_tmp92, r800_ffff_tmp93, r800_ffff_tmp94;
		BitBlock r800_ffff_tmp95, r800_ffff_tmp96, r800_ffff_tmp97;
		BitBlock cc_range_2041_2055_3, sequence_e2_81_adv, r800_ffff_tmp98;
		BitBlock sequence_e2_b3, r800_ffff_tmp99, r800_ffff_tmp100;
		BitBlock cc_range_2cf9_2cfe_3, sequence_e2_b3_adv, r800_ffff_tmp101, byte_b5;
		BitBlock sequence_e2_b5, sequence_e2_b5_adv, r800_ffff_tmp102, byte_b8;
		BitBlock sequence_e2_b8, r800_ffff_tmp103, r800_ffff_tmp104, r800_ffff_tmp105;
		BitBlock r800_ffff_tmp106, r800_ffff_tmp107, r800_ffff_tmp108;
		BitBlock r800_ffff_tmp109, r800_ffff_tmp110, r800_ffff_tmp111;
		BitBlock r800_ffff_tmp112, r800_ffff_tmp113, r800_ffff_tmp114;
		BitBlock r800_ffff_tmp115, r800_ffff_tmp116, r800_ffff_tmp117;
		BitBlock r800_ffff_tmp118, r800_ffff_tmp119, cc_range_2e00_2e30_3;
		BitBlock sequence_e2_b8_adv, r800_ffff_tmp120, byte_e3, r800_ffff_tmp121;
		BitBlock sequence_e3_80, byte_e3_adv, r800_ffff_tmp122, cc_range_3001_303d_3;
		BitBlock sequence_e3_80_adv, r800_ffff_tmp123, sequence_e3_83;
		BitBlock sequence_e3_83_adv, r800_ffff_tmp124, byte_ea, byte_93;
		BitBlock r800_ffff_tmp125, sequence_ea_93, byte_ea_adv, sequence_ea_93_adv;
		BitBlock r800_ffff_tmp126, byte_98, sequence_ea_98, r800_ffff_tmp127;
		BitBlock byte_range_8d_8f, sequence_ea_98_adv, r800_ffff_tmp128;
		BitBlock sequence_ea_99, r800_ffff_tmp129, cc_range_a673_a67e_3;
		BitBlock sequence_ea_99_adv, r800_ffff_tmp130, sequence_ea_9b;
		BitBlock r800_ffff_tmp131, byte_range_b2_b7, sequence_ea_9b_adv;
		BitBlock r800_ffff_tmp132, sequence_ea_a1, byte_range_b4_b7;
		BitBlock sequence_ea_a1_adv, r800_ffff_tmp133, byte_a3, sequence_ea_a3;
		BitBlock r800_ffff_tmp134, r800_ffff_tmp135, r800_ffff_tmp136;
		BitBlock cc_range_a8ce_a8f8_3, sequence_ea_a3_adv, r800_ffff_tmp137, byte_a4;
		BitBlock sequence_ea_a4, byte_range_ae_af, sequence_ea_a4_adv;
		BitBlock r800_ffff_tmp138, sequence_ea_a5, sequence_ea_a5_adv;
		BitBlock r800_ffff_tmp139, byte_a7, sequence_ea_a7, r800_ffff_tmp140;
		BitBlock r800_ffff_tmp141, cc_range_a9c1_a9de_3, sequence_ea_a7_adv;
		BitBlock r800_ffff_tmp142, byte_a9, sequence_ea_a9, byte_range_9c_9f;
		BitBlock sequence_ea_a9_adv, r800_ffff_tmp143, sequence_ea_ab;
		BitBlock r800_ffff_tmp144, cc_range_aade_aaf0_3, sequence_ea_ab_adv;
		BitBlock r800_ffff_tmp145, sequence_ea_af, sequence_ea_af_adv;
		BitBlock r800_ffff_tmp146, byte_ef, r800_ffff_tmp147, sequence_ef_b8;
		BitBlock byte_ef_adv, r800_ffff_tmp148, r800_ffff_tmp149, cc_range_fe10_fe30_3;
		BitBlock sequence_ef_b8_adv, r800_ffff_tmp150, sequence_ef_b9;
		BitBlock r800_ffff_tmp151, r800_ffff_tmp152, r800_ffff_tmp153;
		BitBlock r800_ffff_tmp154, r800_ffff_tmp155, r800_ffff_tmp156;
		BitBlock r800_ffff_tmp157, r800_ffff_tmp158, r800_ffff_tmp159;
		BitBlock r800_ffff_tmp160, r800_ffff_tmp161, r800_ffff_tmp162;
		BitBlock r800_ffff_tmp163, r800_ffff_tmp164, r800_ffff_tmp165;
		BitBlock r800_ffff_tmp166, r800_ffff_tmp167, cc_range_fe45_fe6a_3;
		BitBlock sequence_ef_b9_adv, r800_ffff_tmp168, sequence_ef_bc;
		BitBlock r800_ffff_tmp169, r800_ffff_tmp170, r800_ffff_tmp171;
		BitBlock r800_ffff_tmp172, r800_ffff_tmp173, r800_ffff_tmp174;
		BitBlock r800_ffff_tmp175, r800_ffff_tmp176, r800_ffff_tmp177;
		BitBlock r800_ffff_tmp178, r800_ffff_tmp179, cc_range_ff01_ff3c_3;
		BitBlock sequence_ef_bc_adv, r800_ffff_tmp180, byte_bd, sequence_ef_bd;
		BitBlock r800_ffff_tmp181, cc_range_ff61_ff64_3, sequence_ef_bd_adv;
		BitBlock r800_ffff_tmp182, byte_90, sequence_f0_90, byte_range_80_bf, tmp76;
		BitBlock sequence_f0_90_byte_range_80_bf, tmp77;
		BitBlock sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock r10000_10fff_tmp1, r10000_10fff_tmp2, r10000_10fff_tmp3, byte_84;
		BitBlock sequence_f0_90_84, sequence_f0_90_adv, r10000_10fff_tmp4;
		BitBlock byte_range_80_82, sequence_f0_90_84_adv, r10000_10fff_tmp5;
		BitBlock r10000_10fff_tmp6, byte_8e, sequence_f0_90_8e, sequence_f0_90_8e_adv;
		BitBlock r10000_10fff_tmp7, byte_8f, sequence_f0_90_8f, sequence_f0_90_8f_adv;
		BitBlock r10000_10fff_tmp8, r10000_10fff_tmp9, sequence_f0_90_a1, byte_97;
		BitBlock sequence_f0_90_a1_adv, r10000_10fff_tmp10, sequence_f0_90_a4;
		BitBlock r10000_10fff_tmp11, cc_range_1091f_1093f_4, sequence_f0_90_a4_adv;
		BitBlock r10000_10fff_tmp12, r10000_10fff_tmp13, sequence_f0_90_a9;
		BitBlock r10000_10fff_tmp14, r10000_10fff_tmp15, r10000_10fff_tmp16;
		BitBlock r10000_10fff_tmp17, cc_range_10a50_10a7f_4, sequence_f0_90_a9_adv;
		BitBlock r10000_10fff_tmp18, byte_ac, sequence_f0_90_ac, r10000_10fff_tmp19;
		BitBlock byte_range_b9_bf, sequence_f0_90_ac_adv, r10000_10fff_tmp20;




        struct_Po.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp2 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp3 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp4 = simd_andc(tmp3, tmp2);
        tmp5 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp6 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp7 = simd_andc(tmp5, tmp6);
        tmp8 = simd_andc(tmp4, tmp7);
        tmp9 = simd_and(tmp1, tmp8);
        tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp12 = simd_and(tmp10, tmp11);
        tmp13 = simd_and(tmp4, tmp12);
        tmp14 = simd_or(tmp9, tmp13);
        tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp16 = simd_andc(tmp15, tmp1);
        tmp17 = simd_and(tmp4, tmp16);
        tmp18 = simd_or(tmp14, tmp17);
        tmp19 = simd_and(tmp15, basis_bits.bit_6);
        tmp20 = simd_and(tmp4, tmp19);
        tmp21 = simd_or(tmp18, tmp20);
        tmp22 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp23 = simd_andc(tmp22, tmp2);
        tmp24 = simd_and(tmp10, basis_bits.bit_6);
        tmp25 = simd_and(tmp23, tmp24);
        tmp26 = simd_or(tmp21, tmp25);
        tmp27 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp28 = simd_or(tmp5, tmp1);
        tmp29 = simd_or(tmp27, tmp28);
        tmp30 = simd_not(tmp29);
        tmp31 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp32 = simd_and(tmp15, tmp31);
        tmp33 = simd_and(tmp22, tmp32);
        tmp34 = simd_or(simd_and(basis_bits.bit_1, tmp30), simd_andc(tmp33, basis_bits.bit_1));
        tmp35 = simd_andc(tmp34, basis_bits.bit_0);
        tmp36 = simd_or(tmp26, tmp35);
        tmp37 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp38 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp39 = simd_and(tmp37, tmp38);
        tmp40 = simd_and(tmp39, tmp16);
        cc_range_21_5c_1 = simd_or(tmp36, tmp40);
        struct_Po.cc = simd_or(struct_Po.cc, cc_range_21_5c_1);
        tmp41 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp42 = simd_and(tmp41, tmp22);
        byte_f0 = simd_andc(tmp42, tmp28);
        tmp43 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp44 = simd_and(tmp43, tmp38);
        tmp45 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp46 = simd_andc(tmp45, tmp5);
        byte_91 = simd_and(tmp44, tmp46);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp47));
        sequence_f0_91 = simd_and(tmp47, byte_91);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
        tmp48 = simd_andc(tmp43, tmp27);
        byte_81 = simd_and(tmp48, tmp46);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(2), tmp49));
        sequence_f0_91_81 = simd_and(tmp49, byte_81);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(3), sequence_f0_91_adv));
        sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
        tmp50 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
        tmp51 = simd_not(tmp50);
        tmp52 = simd_and(basis_bits.bit_5, tmp31);
        tmp53 = simd_or(simd_and(basis_bits.bit_4, tmp51), simd_andc(tmp52, basis_bits.bit_4));
        byte_range_87_8d = simd_and(tmp48, tmp53);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(4), sequence_f0_91_81_adv));
        tmp54 = simd_and(sequence_f0_91_81_adv, byte_range_87_8d);
        struct_Po.cc = simd_or(struct_Po.cc, tmp54);
        tmp55 = simd_andc(tmp11, tmp5);
        byte_82 = simd_and(tmp48, tmp55);
        sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
        sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
        tmp56 = simd_and(tmp43, tmp22);
        tmp57 = simd_and(tmp56, basis_bits.bit_4);
        tmp58 = simd_not(tmp1);
        tmp59 = simd_or(simd_and(basis_bits.bit_5, tmp58), simd_andc(tmp31, basis_bits.bit_5));
        tmp60 = simd_and(tmp57, tmp59);
        tmp61 = simd_and(tmp56, tmp19);
        cc_range_110bb_110be_4 = simd_or(tmp60, tmp61);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(5), sequence_f0_91_82_adv));
        tmp62 = simd_and(sequence_f0_91_82_adv, cc_range_110bb_110be_4);
        struct_Po.cc = simd_or(struct_Po.cc, tmp62);
        tmp63 = simd_andc(tmp31, tmp5);
        byte_83 = simd_and(tmp48, tmp63);
        sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
        sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
        tmp64 = simd_or(tmp5, basis_bits.bit_6);
        byte_range_80_81 = simd_andc(tmp48, tmp64);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(6), sequence_f0_91_83_adv));
        tmp65 = simd_and(sequence_f0_91_83_adv, byte_range_80_81);
        struct_Po.cc = simd_or(struct_Po.cc, tmp65);
        tmp66 = simd_and(tmp6, tmp45);
        byte_85 = simd_and(tmp48, tmp66);
        sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
        sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
        byte_range_80_83 = simd_andc(tmp48, tmp5);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(7), sequence_f0_91_85_adv));
        tmp67 = simd_and(sequence_f0_91_85_adv, byte_range_80_83);
        struct_Po.cc = simd_or(struct_Po.cc, tmp67);
        tmp68 = simd_and(tmp6, tmp31);
        byte_87 = simd_and(tmp48, tmp68);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        tmp69 = simd_or(basis_bits.bit_5, tmp1);
        tmp70 = simd_not(tmp69);
        tmp71 = simd_and(basis_bits.bit_5, tmp1);
        tmp72 = simd_or(simd_and(basis_bits.bit_4, tmp70), simd_andc(tmp71, basis_bits.bit_4));
        byte_range_85_88 = simd_and(tmp48, tmp72);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(8), sequence_f0_91_87_adv));
        tmp73 = simd_and(sequence_f0_91_87_adv, byte_range_85_88);
        struct_Po.cc = simd_or(struct_Po.cc, tmp73);
        byte_92 = simd_and(tmp44, tmp55);
        sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
        sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(9), tmp74));
        sequence_f0_92_91 = simd_and(tmp74, byte_91);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(10), sequence_f0_92_adv));
        sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
        byte_range_b0_b3 = simd_andc(tmp56, tmp5);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(11), sequence_f0_92_91_adv));
        tmp75 = simd_and(sequence_f0_92_91_adv, byte_range_b0_b3);
        struct_Po.cc = simd_or(struct_Po.cc, tmp75);
        byte_range_c0_df = simd_andc(tmp41, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(12, 11))) {
          r80_7ff_tmp1 = simd_andc(tmp41, tmp27);
          byte_c2 = simd_and(r80_7ff_tmp1, tmp55);
          r80_7ff_tmp2 = simd_and(tmp43, tmp3);
          r80_7ff_tmp3 = simd_or(tmp46, tmp68);
          r80_7ff_tmp4 = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
          r80_7ff_tmp5 = simd_and(tmp6, basis_bits.bit_6);
          r80_7ff_tmp6 = simd_and(tmp56, r80_7ff_tmp5);
          r80_7ff_tmp7 = simd_or(r80_7ff_tmp4, r80_7ff_tmp6);
          r80_7ff_tmp8 = simd_and(tmp56, tmp32);
          cc_range_a1_bf_2 = simd_or(r80_7ff_tmp7, r80_7ff_tmp8);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(12), byte_c2_adv));
          r80_7ff_tmp9 = simd_and(byte_c2_adv, cc_range_a1_bf_2);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp9);
          r80_7ff_tmp10 = simd_and(tmp15, tmp45);
          byte_cd = simd_and(r80_7ff_tmp1, r80_7ff_tmp10);
          r80_7ff_tmp11 = simd_and(tmp15, tmp11);
          byte_be = simd_and(tmp56, r80_7ff_tmp11);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(13), byte_cd_adv));
          r80_7ff_tmp12 = simd_and(byte_cd_adv, byte_be);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp12);
          byte_ce = simd_and(r80_7ff_tmp1, r80_7ff_tmp11);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(14), byte_ce_adv));
          r80_7ff_tmp13 = simd_and(byte_ce_adv, byte_87);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp13);
          r80_7ff_tmp14 = simd_and(tmp41, tmp38);
          byte_d5 = simd_and(r80_7ff_tmp14, tmp66);
          r80_7ff_tmp15 = simd_and(tmp44, basis_bits.bit_4);
          r80_7ff_tmp16 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          byte_range_9a_9f = simd_and(r80_7ff_tmp15, r80_7ff_tmp16);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(15), byte_d5_adv));
          r80_7ff_tmp17 = simd_and(byte_d5_adv, byte_range_9a_9f);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp17);
          r80_7ff_tmp18 = simd_and(tmp6, tmp11);
          byte_d6 = simd_and(r80_7ff_tmp14, r80_7ff_tmp18);
          r80_7ff_tmp19 = simd_and(tmp10, tmp45);
          byte_89 = simd_and(tmp48, r80_7ff_tmp19);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(16), byte_d6_adv));
          r80_7ff_tmp20 = simd_and(byte_d6_adv, byte_89);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp20);
          byte_d7 = simd_and(r80_7ff_tmp14, tmp68);
          r80_7ff_tmp21 = simd_andc(tmp28, tmp63);
          r80_7ff_tmp22 = simd_andc(r80_7ff_tmp21, r80_7ff_tmp18);
          r80_7ff_tmp23 = simd_andc(tmp48, r80_7ff_tmp22);
          r80_7ff_tmp24 = simd_andc(tmp56, basis_bits.bit_4);
          r80_7ff_tmp25 = simd_and(r80_7ff_tmp24, tmp59);
          cc_range_5c0_5f3_2 = simd_or(r80_7ff_tmp23, r80_7ff_tmp25);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(17), byte_d7_adv));
          r80_7ff_tmp26 = simd_and(byte_d7_adv, cc_range_5c0_5f3_2);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp26);
          r80_7ff_tmp27 = simd_andc(tmp10, tmp1);
          byte_d8 = simd_and(r80_7ff_tmp14, r80_7ff_tmp27);
          r80_7ff_tmp28 = simd_and(tmp48, tmp10);
          r80_7ff_tmp29 = simd_not(basis_bits.bit_7);
          r80_7ff_tmp30 = simd_or(simd_and(basis_bits.bit_6, r80_7ff_tmp29), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          r80_7ff_tmp31 = simd_and(r80_7ff_tmp28, r80_7ff_tmp30);
          r80_7ff_tmp32 = simd_andc(tmp15, basis_bits.bit_6);
          r80_7ff_tmp33 = simd_and(tmp48, r80_7ff_tmp32);
          r80_7ff_tmp34 = simd_or(r80_7ff_tmp31, r80_7ff_tmp33);
          r80_7ff_tmp35 = simd_and(tmp10, tmp31);
          r80_7ff_tmp36 = simd_and(tmp44, r80_7ff_tmp35);
          r80_7ff_tmp37 = simd_or(r80_7ff_tmp34, r80_7ff_tmp36);
          r80_7ff_tmp38 = simd_and(tmp44, tmp19);
          cc_range_609_61e_2 = simd_or(r80_7ff_tmp37, r80_7ff_tmp38);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(18), byte_d8_adv));
          r80_7ff_tmp39 = simd_and(byte_d8_adv, cc_range_609_61e_2);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp39);
          byte_d9 = simd_and(r80_7ff_tmp14, r80_7ff_tmp19);
          r80_7ff_tmp40 = simd_and(r80_7ff_tmp2, basis_bits.bit_4);
          r80_7ff_tmp41 = simd_not(basis_bits.bit_6);
          r80_7ff_tmp42 = simd_or(simd_and(basis_bits.bit_5, r80_7ff_tmp41), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          byte_range_aa_ad = simd_and(r80_7ff_tmp40, r80_7ff_tmp42);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(19), byte_d9_adv));
          r80_7ff_tmp43 = simd_and(byte_d9_adv, byte_range_aa_ad);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp43);
          byte_db = simd_and(r80_7ff_tmp14, r80_7ff_tmp35);
          r80_7ff_tmp44 = simd_andc(tmp6, tmp1);
          byte_94 = simd_and(tmp44, r80_7ff_tmp44);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(20), byte_db_adv));
          r80_7ff_tmp45 = simd_and(byte_db_adv, byte_94);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp45);
          byte_dc = simd_and(r80_7ff_tmp14, tmp16);
          r80_7ff_tmp46 = simd_and(basis_bits.bit_4, tmp50);
          byte_range_80_8d = simd_andc(tmp48, r80_7ff_tmp46);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(21), byte_dc_adv));
          r80_7ff_tmp47 = simd_and(byte_dc_adv, byte_range_80_8d);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp47);
          byte_df = simd_and(r80_7ff_tmp14, tmp32);
          r80_7ff_tmp48 = simd_not(r80_7ff_tmp16);
          r80_7ff_tmp49 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp48), simd_andc(tmp52, basis_bits.bit_4));
          byte_range_b7_b9 = simd_and(tmp56, r80_7ff_tmp49);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(22), byte_df_adv));
          r80_7ff_tmp50 = simd_and(byte_df_adv, byte_range_b7_b9);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp50);
        }
        else {
          carryQ.CarryDequeueEnqueue(12, 11);
        }
        byte_range_e0_ef = simd_and(tmp41, tmp3);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(23, 60))) {
          byte_e0 = simd_andc(byte_range_e0_ef, tmp28);
          r800_ffff_tmp1 = simd_and(tmp43, tmp3);
          byte_a0 = simd_andc(r800_ffff_tmp1, tmp28);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(23), r800_ffff_tmp2));
          sequence_e0_a0 = simd_and(r800_ffff_tmp2, byte_a0);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(24), byte_e0_adv));
          sequence_e0_a0 = simd_and(byte_e0_adv, byte_a0);
          r800_ffff_tmp3 = simd_and(basis_bits.bit_4, tmp52);
          byte_range_b0_be = simd_andc(tmp56, r800_ffff_tmp3);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(25), sequence_e0_a0_adv));
          r800_ffff_tmp4 = simd_and(sequence_e0_a0_adv, byte_range_b0_be);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp4);
          byte_a1 = simd_and(r800_ffff_tmp1, tmp46);
          sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
          sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
          r800_ffff_tmp5 = simd_and(tmp15, tmp11);
          byte_9e = simd_and(tmp44, r800_ffff_tmp5);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(26), sequence_e0_a1_adv));
          r800_ffff_tmp6 = simd_and(sequence_e0_a1_adv, byte_9e);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp6);
          byte_a5 = simd_and(r800_ffff_tmp1, tmp66);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          r800_ffff_tmp7 = simd_andc(tmp6, basis_bits.bit_6);
          r800_ffff_tmp8 = simd_and(r800_ffff_tmp1, r800_ffff_tmp7);
          r800_ffff_tmp9 = simd_andc(tmp56, tmp28);
          cc_range_964_970_3 = simd_or(r800_ffff_tmp8, r800_ffff_tmp9);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(27), sequence_e0_a5_adv));
          r800_ffff_tmp10 = simd_and(sequence_e0_a5_adv, cc_range_964_970_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp10);
          r800_ffff_tmp11 = simd_and(tmp10, tmp31);
          byte_ab = simd_and(r800_ffff_tmp1, r800_ffff_tmp11);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          byte_b0 = simd_andc(tmp56, tmp28);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(28), sequence_e0_ab_adv));
          r800_ffff_tmp12 = simd_and(sequence_e0_ab_adv, byte_b0);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp12);
          byte_b7 = simd_and(tmp56, tmp68);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          r800_ffff_tmp13 = simd_andc(tmp6, tmp1);
          byte_b4 = simd_and(tmp56, r800_ffff_tmp13);
          carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(29), sequence_e0_b7_adv));
          r800_ffff_tmp14 = simd_and(sequence_e0_b7_adv, byte_b4);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp14);
          r800_ffff_tmp15 = simd_and(tmp10, tmp45);
          byte_b9 = simd_and(tmp56, r800_ffff_tmp15);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          r800_ffff_tmp16 = simd_and(tmp48, tmp32);
          r800_ffff_tmp17 = simd_and(tmp44, tmp24);
          cc_range_e4f_e5a_3 = simd_or(r800_ffff_tmp16, r800_ffff_tmp17);
          carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(30), sequence_e0_b9_adv));
          r800_ffff_tmp18 = simd_and(sequence_e0_b9_adv, cc_range_e4f_e5a_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp18);
          byte_bc = simd_and(tmp56, tmp16);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          r800_ffff_tmp19 = simd_andc(tmp43, basis_bits.bit_2);
          r800_ffff_tmp20 = simd_or(tmp5, tmp31);
          r800_ffff_tmp21 = simd_not(r800_ffff_tmp20);
          r800_ffff_tmp22 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp21), simd_andc(tmp5, basis_bits.bit_3));
          r800_ffff_tmp23 = simd_and(r800_ffff_tmp19, r800_ffff_tmp22);
          r800_ffff_tmp24 = simd_and(tmp44, r800_ffff_tmp13);
          cc_range_f04_f14_3 = simd_or(r800_ffff_tmp23, r800_ffff_tmp24);
          carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(31), sequence_e0_bc_adv));
          r800_ffff_tmp25 = simd_and(sequence_e0_bc_adv, cc_range_f04_f14_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp25);
          byte_be = simd_and(tmp56, r800_ffff_tmp5);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(32), sequence_e0_be_adv));
          r800_ffff_tmp26 = simd_and(sequence_e0_be_adv, byte_85);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp26);
          byte_bf = simd_and(tmp56, tmp32);
          sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
          sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
          r800_ffff_tmp27 = simd_andc(tmp44, basis_bits.bit_4);
          r800_ffff_tmp28 = simd_andc(r800_ffff_tmp27, tmp71);
          r800_ffff_tmp29 = simd_and(tmp44, tmp10);
          r800_ffff_tmp30 = simd_not(basis_bits.bit_7);
          r800_ffff_tmp31 = simd_or(simd_and(basis_bits.bit_6, r800_ffff_tmp30), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          r800_ffff_tmp32 = simd_and(r800_ffff_tmp29, r800_ffff_tmp31);
          cc_range_fd0_fd9_3 = simd_or(r800_ffff_tmp28, r800_ffff_tmp32);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(33), sequence_e0_bf_adv));
          r800_ffff_tmp33 = simd_and(sequence_e0_bf_adv, cc_range_fd0_fd9_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp33);
          byte_e1 = simd_and(byte_range_e0_ef, tmp46);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(34), r800_ffff_tmp34));
          sequence_e1_81 = simd_and(r800_ffff_tmp34, byte_81);
          carryQ.cq[35] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(35), byte_e1_adv));
          sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
          r800_ffff_tmp35 = simd_and(tmp48, basis_bits.bit_4);
          r800_ffff_tmp36 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          byte_range_8a_8f = simd_and(r800_ffff_tmp35, r800_ffff_tmp36);
          carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(36), sequence_e1_81_adv));
          r800_ffff_tmp37 = simd_and(sequence_e1_81_adv, byte_range_8a_8f);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp37);
          sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
          sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
          byte_bb = simd_and(tmp56, r800_ffff_tmp11);
          carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(37), sequence_e1_83_adv));
          r800_ffff_tmp38 = simd_and(sequence_e1_83_adv, byte_bb);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp38);
          r800_ffff_tmp39 = simd_and(tmp15, tmp45);
          byte_8d = simd_and(tmp48, r800_ffff_tmp39);
          sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
          sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
          r800_ffff_tmp40 = simd_and(basis_bits.bit_4, tmp69);
          byte_range_a0_a8 = simd_andc(r800_ffff_tmp1, r800_ffff_tmp40);
          carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(38), sequence_e1_8d_adv));
          r800_ffff_tmp41 = simd_and(sequence_e1_8d_adv, byte_range_a0_a8);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp41);
          byte_99 = simd_and(tmp44, r800_ffff_tmp15);
          sequence_e1_99 = simd_and(byte_e1_adv, byte_99);
          sequence_e1_99 = simd_and(byte_e1_adv, byte_99);
          r800_ffff_tmp42 = simd_and(r800_ffff_tmp1, tmp15);
          byte_range_ad_ae = simd_and(r800_ffff_tmp42, r800_ffff_tmp31);
          carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e1_99, carryQ.get_carry_in(39), sequence_e1_99_adv));
          r800_ffff_tmp43 = simd_and(sequence_e1_99_adv, byte_range_ad_ae);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp43);
          byte_9b = simd_and(tmp44, r800_ffff_tmp11);
          sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
          sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
          r800_ffff_tmp44 = simd_and(r800_ffff_tmp1, basis_bits.bit_4);
          r800_ffff_tmp45 = simd_not(basis_bits.bit_6);
          r800_ffff_tmp46 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp45), simd_andc(tmp31, basis_bits.bit_5));
          byte_range_ab_ad = simd_and(r800_ffff_tmp44, r800_ffff_tmp46);
          carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(40), sequence_e1_9b_adv));
          r800_ffff_tmp47 = simd_and(sequence_e1_9b_adv, byte_range_ab_ad);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp47);
          byte_9c = simd_and(tmp44, tmp16);
          sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
          sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
          r800_ffff_tmp48 = simd_and(tmp56, tmp6);
          byte_range_b5_b6 = simd_and(r800_ffff_tmp48, r800_ffff_tmp31);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(41), sequence_e1_9c_adv));
          r800_ffff_tmp49 = simd_and(sequence_e1_9c_adv, byte_range_b5_b6);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp49);
          byte_9f = simd_and(tmp44, tmp32);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          r800_ffff_tmp50 = simd_or(tmp6, tmp10);
          r800_ffff_tmp51 = simd_and(tmp44, r800_ffff_tmp50);
          cc_range_17d4_17d8_3 = simd_andc(r800_ffff_tmp51, tmp31);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(42), sequence_e1_9f_adv));
          r800_ffff_tmp52 = simd_and(sequence_e1_9f_adv, cc_range_17d4_17d8_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp52);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          r800_ffff_tmp53 = simd_andc(tmp48, basis_bits.bit_4);
          r800_ffff_tmp54 = simd_andc(r800_ffff_tmp53, tmp50);
          r800_ffff_tmp55 = simd_or(basis_bits.bit_5, tmp31);
          r800_ffff_tmp56 = simd_not(r800_ffff_tmp55);
          r800_ffff_tmp57 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp56), simd_andc(tmp52, basis_bits.bit_4));
          r800_ffff_tmp58 = simd_and(tmp48, r800_ffff_tmp57);
          cc_range_1800_1807_3 = simd_or(r800_ffff_tmp54, r800_ffff_tmp58);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(43), sequence_e1_a0_adv));
          r800_ffff_tmp59 = simd_and(sequence_e1_a0_adv, cc_range_1800_1807_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp59);
          sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
          sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
          byte_range_84_85 = simd_and(tmp48, r800_ffff_tmp7);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(44), sequence_e1_a5_adv));
          r800_ffff_tmp60 = simd_and(sequence_e1_a5_adv, byte_range_84_85);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp60);
          r800_ffff_tmp61 = simd_andc(tmp10, tmp1);
          byte_a8 = simd_and(r800_ffff_tmp1, r800_ffff_tmp61);
          sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
          sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
          byte_range_9e_9f = simd_and(tmp44, tmp19);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(45), sequence_e1_a8_adv));
          r800_ffff_tmp62 = simd_and(sequence_e1_a8_adv, byte_range_9e_9f);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp62);
          byte_aa = simd_and(r800_ffff_tmp1, tmp12);
          sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
          sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
          r800_ffff_tmp63 = simd_andc(r800_ffff_tmp1, basis_bits.bit_4);
          r800_ffff_tmp64 = simd_andc(r800_ffff_tmp63, tmp52);
          r800_ffff_tmp65 = simd_andc(r800_ffff_tmp44, tmp50);
          cc_range_1aa0_1aa8_3 = simd_or(r800_ffff_tmp64, r800_ffff_tmp65);
          carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(46), sequence_e1_aa_adv));
          r800_ffff_tmp66 = simd_and(sequence_e1_aa_adv, cc_range_1aa0_1aa8_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp66);
          byte_ad = simd_and(r800_ffff_tmp1, r800_ffff_tmp39);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          r800_ffff_tmp67 = simd_or(basis_bits.bit_3, tmp28);
          r800_ffff_tmp68 = simd_not(r800_ffff_tmp67);
          r800_ffff_tmp69 = simd_and(basis_bits.bit_4, r800_ffff_tmp36);
          r800_ffff_tmp70 = simd_and(basis_bits.bit_3, r800_ffff_tmp69);
          r800_ffff_tmp71 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp68), simd_andc(r800_ffff_tmp70, basis_bits.bit_2));
          byte_range_9a_a0 = simd_and(tmp43, r800_ffff_tmp71);
          carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(47), sequence_e1_ad_adv));
          r800_ffff_tmp72 = simd_and(sequence_e1_ad_adv, byte_range_9a_a0);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp72);
          byte_af = simd_and(r800_ffff_tmp1, tmp32);
          sequence_e1_af = simd_and(byte_e1_adv, byte_af);
          sequence_e1_af = simd_and(byte_e1_adv, byte_af);
          byte_range_bc_bf = simd_and(tmp56, tmp15);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(48), sequence_e1_af_adv));
          r800_ffff_tmp73 = simd_and(sequence_e1_af_adv, byte_range_bc_bf);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp73);
          sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
          sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
          byte_range_bb_bf = simd_and(tmp57, r800_ffff_tmp55);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(49), sequence_e1_b0_adv));
          r800_ffff_tmp74 = simd_and(sequence_e1_b0_adv, byte_range_bb_bf);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp74);
          byte_b1 = simd_and(tmp56, tmp46);
          sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
          sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
          byte_range_be_bf = simd_and(tmp56, tmp19);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(50), sequence_e1_b1_adv));
          r800_ffff_tmp75 = simd_and(sequence_e1_b1_adv, byte_range_be_bf);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp75);
          byte_b3 = simd_and(tmp56, tmp63);
          sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
          sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
          r800_ffff_tmp76 = simd_and(tmp44, tmp63);
          cc_range_1cc0_1cd3_3 = simd_or(r800_ffff_tmp53, r800_ffff_tmp76);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(51), sequence_e1_b3_adv));
          r800_ffff_tmp77 = simd_and(sequence_e1_b3_adv, cc_range_1cc0_1cd3_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp77);
          byte_e2 = simd_and(byte_range_e0_ef, tmp55);
          byte_80 = simd_andc(tmp48, tmp28);
          carryQ.cq[52] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(52), r800_ffff_tmp78));
          sequence_e2_80 = simd_and(r800_ffff_tmp78, byte_80);
          carryQ.cq[53] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(53), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp79 = simd_and(tmp6, basis_bits.bit_6);
          r800_ffff_tmp80 = simd_and(tmp44, r800_ffff_tmp79);
          r800_ffff_tmp81 = simd_or(r800_ffff_tmp80, r800_ffff_tmp63);
          r800_ffff_tmp82 = simd_andc(tmp56, r800_ffff_tmp40);
          r800_ffff_tmp83 = simd_or(r800_ffff_tmp81, r800_ffff_tmp82);
          r800_ffff_tmp84 = simd_not(tmp31);
          r800_ffff_tmp85 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp84), simd_andc(tmp31, basis_bits.bit_5));
          r800_ffff_tmp86 = simd_and(tmp57, r800_ffff_tmp85);
          cc_range_2016_203b_3 = simd_or(r800_ffff_tmp83, r800_ffff_tmp86);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(54), sequence_e2_80_adv));
          r800_ffff_tmp87 = simd_and(sequence_e2_80_adv, cc_range_2016_203b_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp87);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          r800_ffff_tmp88 = simd_and(byte_range_80_83, tmp1);
          r800_ffff_tmp89 = simd_not(tmp64);
          r800_ffff_tmp90 = simd_or(basis_bits.bit_4, tmp52);
          r800_ffff_tmp91 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp89), simd_andc(r800_ffff_tmp90, basis_bits.bit_3));
          r800_ffff_tmp92 = simd_and(r800_ffff_tmp19, r800_ffff_tmp91);
          r800_ffff_tmp93 = simd_or(r800_ffff_tmp88, r800_ffff_tmp92);
          r800_ffff_tmp94 = simd_or(r800_ffff_tmp93, r800_ffff_tmp76);
          r800_ffff_tmp95 = simd_not(tmp52);
          r800_ffff_tmp96 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp95), simd_andc(tmp71, basis_bits.bit_4));
          r800_ffff_tmp97 = simd_and(tmp44, r800_ffff_tmp96);
          cc_range_2041_2055_3 = simd_or(r800_ffff_tmp94, r800_ffff_tmp97);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(55), sequence_e2_81_adv));
          r800_ffff_tmp98 = simd_and(sequence_e2_81_adv, cc_range_2041_2055_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp98);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          r800_ffff_tmp99 = simd_or(simd_and(basis_bits.bit_5, tmp58), simd_andc(tmp1, basis_bits.bit_5));
          r800_ffff_tmp100 = simd_and(tmp57, r800_ffff_tmp99);
          cc_range_2cf9_2cfe_3 = simd_or(r800_ffff_tmp100, byte_range_be_bf);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(56), sequence_e2_b3_adv));
          r800_ffff_tmp101 = simd_and(sequence_e2_b3_adv, cc_range_2cf9_2cfe_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp101);
          byte_b5 = simd_and(tmp56, tmp66);
          sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
          sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
          carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(57), sequence_e2_b5_adv));
          r800_ffff_tmp102 = simd_and(sequence_e2_b5_adv, byte_b0);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp102);
          byte_b8 = simd_and(tmp56, r800_ffff_tmp61);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          r800_ffff_tmp103 = simd_or(simd_and(basis_bits.bit_4, tmp70), simd_andc(tmp50, basis_bits.bit_4));
          r800_ffff_tmp104 = simd_andc(tmp64, r800_ffff_tmp103);
          r800_ffff_tmp105 = simd_andc(r800_ffff_tmp104, r800_ffff_tmp11);
          r800_ffff_tmp106 = simd_andc(tmp48, r800_ffff_tmp105);
          r800_ffff_tmp107 = simd_not(r800_ffff_tmp90);
          r800_ffff_tmp108 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp107), simd_andc(tmp19, basis_bits.bit_3));
          r800_ffff_tmp109 = simd_and(r800_ffff_tmp19, r800_ffff_tmp108);
          r800_ffff_tmp110 = simd_or(r800_ffff_tmp106, r800_ffff_tmp109);
          r800_ffff_tmp111 = simd_andc(tmp10, basis_bits.bit_6);
          r800_ffff_tmp112 = simd_and(tmp44, r800_ffff_tmp111);
          r800_ffff_tmp113 = simd_or(r800_ffff_tmp110, r800_ffff_tmp112);
          r800_ffff_tmp114 = simd_or(r800_ffff_tmp113, byte_9b);
          r800_ffff_tmp115 = simd_or(r800_ffff_tmp114, byte_range_9e_9f);
          r800_ffff_tmp116 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp84), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp117 = simd_and(r800_ffff_tmp44, r800_ffff_tmp116);
          r800_ffff_tmp118 = simd_or(r800_ffff_tmp115, r800_ffff_tmp117);
          r800_ffff_tmp119 = simd_andc(tmp56, r800_ffff_tmp69);
          cc_range_2e00_2e30_3 = simd_or(r800_ffff_tmp118, r800_ffff_tmp119);
          carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(58), sequence_e2_b8_adv));
          r800_ffff_tmp120 = simd_and(sequence_e2_b8_adv, cc_range_2e00_2e30_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp120);
          byte_e3 = simd_and(byte_range_e0_ef, tmp63);
          carryQ.cq[59] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(59), r800_ffff_tmp121));
          sequence_e3_80 = simd_and(r800_ffff_tmp121, byte_80);
          carryQ.cq[60] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(60), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          r800_ffff_tmp122 = simd_and(tmp56, r800_ffff_tmp39);
          cc_range_3001_303d_3 = simd_or(r800_ffff_tmp88, r800_ffff_tmp122);
          carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(61), sequence_e3_80_adv));
          r800_ffff_tmp123 = simd_and(sequence_e3_80_adv, cc_range_3001_303d_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp123);
          sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
          sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
          carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(62), sequence_e3_83_adv));
          r800_ffff_tmp124 = simd_and(sequence_e3_83_adv, byte_bb);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp124);
          byte_ea = simd_and(byte_range_e0_ef, tmp12);
          byte_93 = simd_and(tmp44, tmp63);
          carryQ.cq[63] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(63), r800_ffff_tmp125));
          sequence_ea_93 = simd_and(r800_ffff_tmp125, byte_93);
          carryQ.cq[64] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(64), byte_ea_adv));
          sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
          carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(65), sequence_ea_93_adv));
          r800_ffff_tmp126 = simd_and(sequence_ea_93_adv, byte_range_be_bf);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp126);
          byte_98 = simd_and(tmp44, r800_ffff_tmp61);
          sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
          sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
          r800_ffff_tmp127 = simd_and(tmp48, tmp15);
          byte_range_8d_8f = simd_and(r800_ffff_tmp127, tmp1);
          carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(66), sequence_ea_98_adv));
          r800_ffff_tmp128 = simd_and(sequence_ea_98_adv, byte_range_8d_8f);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp128);
          sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
          sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
          r800_ffff_tmp129 = simd_or(tmp63, r800_ffff_tmp5);
          cc_range_a673_a67e_3 = simd_and(tmp56, r800_ffff_tmp129);
          carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(67), sequence_ea_99_adv));
          r800_ffff_tmp130 = simd_and(sequence_ea_99_adv, cc_range_a673_a67e_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp130);
          sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
          sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
          r800_ffff_tmp131 = simd_andc(tmp56, basis_bits.bit_4);
          byte_range_b2_b7 = simd_and(r800_ffff_tmp131, r800_ffff_tmp36);
          carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(68), sequence_ea_9b_adv));
          r800_ffff_tmp132 = simd_and(sequence_ea_9b_adv, byte_range_b2_b7);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp132);
          sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
          sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
          byte_range_b4_b7 = simd_and(tmp56, tmp6);
          carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(69), sequence_ea_a1_adv));
          r800_ffff_tmp133 = simd_and(sequence_ea_a1_adv, byte_range_b4_b7);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp133);
          byte_a3 = simd_and(r800_ffff_tmp1, tmp63);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          r800_ffff_tmp134 = simd_and(tmp48, tmp19);
          r800_ffff_tmp135 = simd_and(tmp56, tmp10);
          r800_ffff_tmp136 = simd_andc(r800_ffff_tmp135, tmp31);
          cc_range_a8ce_a8f8_3 = simd_or(r800_ffff_tmp134, r800_ffff_tmp136);
          carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(70), sequence_ea_a3_adv));
          r800_ffff_tmp137 = simd_and(sequence_ea_a3_adv, cc_range_a8ce_a8f8_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp137);
          byte_a4 = simd_and(r800_ffff_tmp1, r800_ffff_tmp13);
          sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
          sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
          byte_range_ae_af = simd_and(r800_ffff_tmp1, tmp19);
          carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(71), sequence_ea_a4_adv));
          r800_ffff_tmp138 = simd_and(sequence_ea_a4_adv, byte_range_ae_af);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp138);
          sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
          sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
          carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(72), sequence_ea_a5_adv));
          r800_ffff_tmp139 = simd_and(sequence_ea_a5_adv, byte_9f);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp139);
          byte_a7 = simd_and(r800_ffff_tmp1, tmp68);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          r800_ffff_tmp140 = simd_or(simd_and(basis_bits.bit_4, tmp51), simd_andc(tmp69, basis_bits.bit_4));
          r800_ffff_tmp141 = simd_and(tmp48, r800_ffff_tmp140);
          cc_range_a9c1_a9de_3 = simd_or(r800_ffff_tmp141, byte_range_9e_9f);
          carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(73), sequence_ea_a7_adv));
          r800_ffff_tmp142 = simd_and(sequence_ea_a7_adv, cc_range_a9c1_a9de_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp142);
          byte_a9 = simd_and(r800_ffff_tmp1, r800_ffff_tmp15);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          byte_range_9c_9f = simd_and(tmp44, tmp15);
          carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(74), sequence_ea_a9_adv));
          r800_ffff_tmp143 = simd_and(sequence_ea_a9_adv, byte_range_9c_9f);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp143);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          r800_ffff_tmp144 = simd_andc(tmp56, tmp64);
          cc_range_aade_aaf0_3 = simd_or(byte_range_9e_9f, r800_ffff_tmp144);
          carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(75), sequence_ea_ab_adv));
          r800_ffff_tmp145 = simd_and(sequence_ea_ab_adv, cc_range_aade_aaf0_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp145);
          sequence_ea_af = simd_and(byte_ea_adv, byte_af);
          sequence_ea_af = simd_and(byte_ea_adv, byte_af);
          carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(76), sequence_ea_af_adv));
          r800_ffff_tmp146 = simd_and(sequence_ea_af_adv, byte_ab);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp146);
          byte_ef = simd_and(byte_range_e0_ef, tmp32);
          carryQ.cq[77] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(77), r800_ffff_tmp147));
          sequence_ef_b8 = simd_and(r800_ffff_tmp147, byte_b8);
          carryQ.cq[78] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(78), byte_ef_adv));
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          r800_ffff_tmp148 = simd_andc(r800_ffff_tmp27, tmp52);
          r800_ffff_tmp149 = simd_or(r800_ffff_tmp148, byte_99);
          cc_range_fe10_fe30_3 = simd_or(r800_ffff_tmp149, byte_b0);
          carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(79), sequence_ef_b8_adv));
          r800_ffff_tmp150 = simd_and(sequence_ef_b8_adv, cc_range_fe10_fe30_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp150);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          r800_ffff_tmp151 = simd_and(tmp48, tmp6);
          r800_ffff_tmp152 = simd_and(r800_ffff_tmp151, r800_ffff_tmp31);
          r800_ffff_tmp153 = simd_and(r800_ffff_tmp35, r800_ffff_tmp99);
          r800_ffff_tmp154 = simd_or(r800_ffff_tmp152, r800_ffff_tmp153);
          r800_ffff_tmp155 = simd_andc(tmp44, tmp5);
          r800_ffff_tmp156 = simd_andc(r800_ffff_tmp155, tmp31);
          r800_ffff_tmp157 = simd_or(r800_ffff_tmp154, r800_ffff_tmp156);
          r800_ffff_tmp158 = simd_and(tmp44, tmp6);
          r800_ffff_tmp159 = simd_or(r800_ffff_tmp157, r800_ffff_tmp158);
          r800_ffff_tmp160 = simd_or(basis_bits.bit_3, tmp64);
          r800_ffff_tmp161 = simd_not(r800_ffff_tmp160);
          r800_ffff_tmp162 = simd_and(basis_bits.bit_3, tmp32);
          r800_ffff_tmp163 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp161), simd_andc(r800_ffff_tmp162, basis_bits.bit_2));
          r800_ffff_tmp164 = simd_and(tmp43, r800_ffff_tmp163);
          r800_ffff_tmp165 = simd_or(r800_ffff_tmp159, r800_ffff_tmp164);
          r800_ffff_tmp166 = simd_or(r800_ffff_tmp165, byte_a8);
          r800_ffff_tmp167 = simd_and(r800_ffff_tmp1, tmp24);
          cc_range_fe45_fe6a_3 = simd_or(r800_ffff_tmp166, r800_ffff_tmp167);
          carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(80), sequence_ef_b9_adv));
          r800_ffff_tmp168 = simd_and(sequence_ef_b9_adv, cc_range_fe45_fe6a_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp168);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          r800_ffff_tmp169 = simd_andc(tmp48, tmp7);
          r800_ffff_tmp170 = simd_and(tmp1, r800_ffff_tmp169);
          r800_ffff_tmp171 = simd_and(tmp48, tmp12);
          r800_ffff_tmp172 = simd_or(r800_ffff_tmp170, r800_ffff_tmp171);
          r800_ffff_tmp173 = simd_and(tmp48, tmp16);
          r800_ffff_tmp174 = simd_or(r800_ffff_tmp172, r800_ffff_tmp173);
          r800_ffff_tmp175 = simd_or(r800_ffff_tmp174, r800_ffff_tmp134);
          r800_ffff_tmp176 = simd_or(r800_ffff_tmp175, r800_ffff_tmp17);
          r800_ffff_tmp177 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp68), simd_andc(r800_ffff_tmp162, basis_bits.bit_2));
          r800_ffff_tmp178 = simd_and(tmp43, r800_ffff_tmp177);
          r800_ffff_tmp179 = simd_or(r800_ffff_tmp176, r800_ffff_tmp178);
          cc_range_ff01_ff3c_3 = simd_or(r800_ffff_tmp179, byte_bc);
          carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(81), sequence_ef_bc_adv));
          r800_ffff_tmp180 = simd_and(sequence_ef_bc_adv, cc_range_ff01_ff3c_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp180);
          byte_bd = simd_and(tmp56, r800_ffff_tmp39);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          r800_ffff_tmp181 = simd_or(tmp46, r800_ffff_tmp7);
          cc_range_ff61_ff64_3 = simd_and(r800_ffff_tmp1, r800_ffff_tmp181);
          carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(82), sequence_ef_bd_adv));
          r800_ffff_tmp182 = simd_and(sequence_ef_bd_adv, cc_range_ff61_ff64_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp182);
        }
        else {
          carryQ.CarryDequeueEnqueue(23, 60);
        }
        byte_90 = simd_andc(tmp44, tmp28);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(83), tmp76));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp76, byte_range_80_bf);
        carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(84), tmp77));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp77, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(85, 8))) {
          r10000_10fff_tmp1 = simd_and(byte_range_80_bf, tmp38);
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          r10000_10fff_tmp2 = simd_andc(byte_range_80_bf, tmp27);
          r10000_10fff_tmp3 = simd_andc(tmp6, tmp1);
          byte_84 = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp3);
          sequence_f0_90_84 = simd_and(tmp76, byte_84);
          carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(85), sequence_f0_90_adv));
          sequence_f0_90_84 = simd_and(sequence_f0_90_adv, byte_84);
          r10000_10fff_tmp4 = simd_andc(r10000_10fff_tmp2, tmp5);
          byte_range_80_82 = simd_andc(r10000_10fff_tmp4, tmp31);
          carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(86), sequence_f0_90_84_adv));
          r10000_10fff_tmp5 = simd_and(sequence_f0_90_84_adv, byte_range_80_82);
          struct_Po.cc = simd_or(struct_Po.cc, r10000_10fff_tmp5);
          r10000_10fff_tmp6 = simd_and(tmp15, tmp11);
          byte_8e = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp6);
          sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
          sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
          byte_9f = simd_and(r10000_10fff_tmp1, tmp32);
          carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(87), sequence_f0_90_8e_adv));
          r10000_10fff_tmp7 = simd_and(sequence_f0_90_8e_adv, byte_9f);
          struct_Po.cc = simd_or(struct_Po.cc, r10000_10fff_tmp7);
          byte_8f = simd_and(r10000_10fff_tmp2, tmp32);
          sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
          sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
          carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(88), sequence_f0_90_8f_adv));
          r10000_10fff_tmp8 = simd_and(sequence_f0_90_8f_adv, byte_90);
          struct_Po.cc = simd_or(struct_Po.cc, r10000_10fff_tmp8);
          r10000_10fff_tmp9 = simd_and(byte_range_80_bf, tmp3);
          byte_a1 = simd_and(r10000_10fff_tmp9, tmp46);
          sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
          sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
          byte_97 = simd_and(r10000_10fff_tmp1, tmp68);
          carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(89), sequence_f0_90_a1_adv));
          r10000_10fff_tmp10 = simd_and(sequence_f0_90_a1_adv, byte_97);
          struct_Po.cc = simd_or(struct_Po.cc, r10000_10fff_tmp10);
          byte_a4 = simd_and(r10000_10fff_tmp9, r10000_10fff_tmp3);
          sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
          sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
          r10000_10fff_tmp11 = simd_and(byte_range_80_bf, basis_bits.bit_3);
          cc_range_1091f_1093f_4 = simd_and(tmp32, r10000_10fff_tmp11);
          carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(90), sequence_f0_90_a4_adv));
          r10000_10fff_tmp12 = simd_and(sequence_f0_90_a4_adv, cc_range_1091f_1093f_4);
          struct_Po.cc = simd_or(struct_Po.cc, r10000_10fff_tmp12);
          r10000_10fff_tmp13 = simd_and(tmp10, tmp45);
          byte_a9 = simd_and(r10000_10fff_tmp9, r10000_10fff_tmp13);
          sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
          sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
          r10000_10fff_tmp14 = simd_and(basis_bits.bit_4, tmp69);
          r10000_10fff_tmp15 = simd_andc(r10000_10fff_tmp1, r10000_10fff_tmp14);
          r10000_10fff_tmp16 = simd_and(byte_range_80_bf, tmp22);
          r10000_10fff_tmp17 = simd_and(r10000_10fff_tmp16, tmp32);
          cc_range_10a50_10a7f_4 = simd_or(r10000_10fff_tmp15, r10000_10fff_tmp17);
          carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(91), sequence_f0_90_a9_adv));
          r10000_10fff_tmp18 = simd_and(sequence_f0_90_a9_adv, cc_range_10a50_10a7f_4);
          struct_Po.cc = simd_or(struct_Po.cc, r10000_10fff_tmp18);
          byte_ac = simd_and(r10000_10fff_tmp9, tmp16);
          sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
          sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
          r10000_10fff_tmp19 = simd_and(r10000_10fff_tmp16, basis_bits.bit_4);
          byte_range_b9_bf = simd_and(r10000_10fff_tmp19, tmp69);
          carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(92), sequence_f0_90_ac_adv));
          r10000_10fff_tmp20 = simd_and(sequence_f0_90_ac_adv, byte_range_b9_bf);
          struct_Po.cc = simd_or(struct_Po.cc, r10000_10fff_tmp20);
        }
        else {
          carryQ.CarryDequeueEnqueue(85, 8);
        }
        carryQ.CarryQ_Adjust(93);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Po & struct_Po, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp21;
		BitBlock tmp22, tmp23, tmp24, tmp25, tmp26, tmp27, tmp28, tmp29, tmp30, tmp31;
		BitBlock tmp32, tmp33, tmp34, tmp35, tmp36, tmp37, tmp38, tmp39, tmp40;
		BitBlock cc_range_21_5c_1, tmp41, tmp42, byte_f0, tmp43, tmp44, tmp45, tmp46;
		BitBlock byte_91, tmp47, sequence_f0_91, byte_f0_adv, tmp48, byte_81, tmp49;
		BitBlock sequence_f0_91_81, sequence_f0_91_adv, tmp50, tmp51, tmp52, tmp53;
		BitBlock byte_range_87_8d, sequence_f0_91_81_adv, tmp54, tmp55, byte_82;
		BitBlock sequence_f0_91_82, tmp56, tmp57, tmp58, tmp59, tmp60, tmp61;
		BitBlock cc_range_110bb_110be_4, sequence_f0_91_82_adv, tmp62, tmp63, byte_83;
		BitBlock sequence_f0_91_83, tmp64, byte_range_80_81, sequence_f0_91_83_adv;
		BitBlock tmp65, tmp66, byte_85, sequence_f0_91_85, byte_range_80_83;
		BitBlock sequence_f0_91_85_adv, tmp67, tmp68, byte_87, sequence_f0_91_87;
		BitBlock tmp69, tmp70, tmp71, tmp72, byte_range_85_88, sequence_f0_91_87_adv;
		BitBlock tmp73, byte_92, sequence_f0_92, tmp74, sequence_f0_92_91;
		BitBlock sequence_f0_92_adv, byte_range_b0_b3, sequence_f0_92_91_adv, tmp75;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, byte_c2, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8;
		BitBlock cc_range_a1_bf_2, byte_c2_adv, r80_7ff_tmp9, r80_7ff_tmp10, byte_cd;
		BitBlock r80_7ff_tmp11, byte_be, byte_cd_adv, r80_7ff_tmp12, byte_ce;
		BitBlock byte_ce_adv, r80_7ff_tmp13, r80_7ff_tmp14, byte_d5, r80_7ff_tmp15;
		BitBlock r80_7ff_tmp16, byte_range_9a_9f, byte_d5_adv, r80_7ff_tmp17;
		BitBlock r80_7ff_tmp18, byte_d6, r80_7ff_tmp19, byte_89, byte_d6_adv;
		BitBlock r80_7ff_tmp20, byte_d7, r80_7ff_tmp21, r80_7ff_tmp22, r80_7ff_tmp23;
		BitBlock r80_7ff_tmp24, r80_7ff_tmp25, cc_range_5c0_5f3_2, byte_d7_adv;
		BitBlock r80_7ff_tmp26, r80_7ff_tmp27, byte_d8, r80_7ff_tmp28, r80_7ff_tmp29;
		BitBlock r80_7ff_tmp30, r80_7ff_tmp31, r80_7ff_tmp32, r80_7ff_tmp33;
		BitBlock r80_7ff_tmp34, r80_7ff_tmp35, r80_7ff_tmp36, r80_7ff_tmp37;
		BitBlock r80_7ff_tmp38, cc_range_609_61e_2, byte_d8_adv, r80_7ff_tmp39;
		BitBlock byte_d9, r80_7ff_tmp40, r80_7ff_tmp41, r80_7ff_tmp42;
		BitBlock byte_range_aa_ad, byte_d9_adv, r80_7ff_tmp43, byte_db, r80_7ff_tmp44;
		BitBlock byte_94, byte_db_adv, r80_7ff_tmp45, byte_dc, r80_7ff_tmp46;
		BitBlock byte_range_80_8d, byte_dc_adv, r80_7ff_tmp47, byte_df, r80_7ff_tmp48;
		BitBlock r80_7ff_tmp49, byte_range_b7_b9, byte_df_adv, r80_7ff_tmp50;
		BitBlock byte_range_e0_ef, byte_e0, r800_ffff_tmp1, byte_a0, r800_ffff_tmp2;
		BitBlock sequence_e0_a0, byte_e0_adv, r800_ffff_tmp3, byte_range_b0_be;
		BitBlock sequence_e0_a0_adv, r800_ffff_tmp4, byte_a1, sequence_e0_a1;
		BitBlock r800_ffff_tmp5, byte_9e, sequence_e0_a1_adv, r800_ffff_tmp6, byte_a5;
		BitBlock sequence_e0_a5, r800_ffff_tmp7, r800_ffff_tmp8, r800_ffff_tmp9;
		BitBlock cc_range_964_970_3, sequence_e0_a5_adv, r800_ffff_tmp10;
		BitBlock r800_ffff_tmp11, byte_ab, sequence_e0_ab, byte_b0, sequence_e0_ab_adv;
		BitBlock r800_ffff_tmp12, byte_b7, sequence_e0_b7, r800_ffff_tmp13, byte_b4;
		BitBlock sequence_e0_b7_adv, r800_ffff_tmp14, r800_ffff_tmp15, byte_b9;
		BitBlock sequence_e0_b9, r800_ffff_tmp16, r800_ffff_tmp17, cc_range_e4f_e5a_3;
		BitBlock sequence_e0_b9_adv, r800_ffff_tmp18, byte_bc, sequence_e0_bc;
		BitBlock r800_ffff_tmp19, r800_ffff_tmp20, r800_ffff_tmp21, r800_ffff_tmp22;
		BitBlock r800_ffff_tmp23, r800_ffff_tmp24, cc_range_f04_f14_3;
		BitBlock sequence_e0_bc_adv, r800_ffff_tmp25, sequence_e0_be;
		BitBlock sequence_e0_be_adv, r800_ffff_tmp26, byte_bf, sequence_e0_bf;
		BitBlock r800_ffff_tmp27, r800_ffff_tmp28, r800_ffff_tmp29, r800_ffff_tmp30;
		BitBlock r800_ffff_tmp31, r800_ffff_tmp32, cc_range_fd0_fd9_3;
		BitBlock sequence_e0_bf_adv, r800_ffff_tmp33, byte_e1, r800_ffff_tmp34;
		BitBlock sequence_e1_81, byte_e1_adv, r800_ffff_tmp35, r800_ffff_tmp36;
		BitBlock byte_range_8a_8f, sequence_e1_81_adv, r800_ffff_tmp37, sequence_e1_83;
		BitBlock byte_bb, sequence_e1_83_adv, r800_ffff_tmp38, r800_ffff_tmp39;
		BitBlock byte_8d, sequence_e1_8d, r800_ffff_tmp40, byte_range_a0_a8;
		BitBlock sequence_e1_8d_adv, r800_ffff_tmp41, byte_99, sequence_e1_99;
		BitBlock r800_ffff_tmp42, byte_range_ad_ae, sequence_e1_99_adv;
		BitBlock r800_ffff_tmp43, byte_9b, sequence_e1_9b, r800_ffff_tmp44;
		BitBlock r800_ffff_tmp45, r800_ffff_tmp46, byte_range_ab_ad;
		BitBlock sequence_e1_9b_adv, r800_ffff_tmp47, byte_9c, sequence_e1_9c;
		BitBlock r800_ffff_tmp48, byte_range_b5_b6, sequence_e1_9c_adv;
		BitBlock r800_ffff_tmp49, byte_9f, sequence_e1_9f, r800_ffff_tmp50;
		BitBlock r800_ffff_tmp51, cc_range_17d4_17d8_3, sequence_e1_9f_adv;
		BitBlock r800_ffff_tmp52, sequence_e1_a0, r800_ffff_tmp53, r800_ffff_tmp54;
		BitBlock r800_ffff_tmp55, r800_ffff_tmp56, r800_ffff_tmp57, r800_ffff_tmp58;
		BitBlock cc_range_1800_1807_3, sequence_e1_a0_adv, r800_ffff_tmp59;
		BitBlock sequence_e1_a5, byte_range_84_85, sequence_e1_a5_adv, r800_ffff_tmp60;
		BitBlock r800_ffff_tmp61, byte_a8, sequence_e1_a8, byte_range_9e_9f;
		BitBlock sequence_e1_a8_adv, r800_ffff_tmp62, byte_aa, sequence_e1_aa;
		BitBlock r800_ffff_tmp63, r800_ffff_tmp64, r800_ffff_tmp65;
		BitBlock cc_range_1aa0_1aa8_3, sequence_e1_aa_adv, r800_ffff_tmp66, byte_ad;
		BitBlock sequence_e1_ad, r800_ffff_tmp67, r800_ffff_tmp68, r800_ffff_tmp69;
		BitBlock r800_ffff_tmp70, r800_ffff_tmp71, byte_range_9a_a0;
		BitBlock sequence_e1_ad_adv, r800_ffff_tmp72, byte_af, sequence_e1_af;
		BitBlock byte_range_bc_bf, sequence_e1_af_adv, r800_ffff_tmp73, sequence_e1_b0;
		BitBlock byte_range_bb_bf, sequence_e1_b0_adv, r800_ffff_tmp74, byte_b1;
		BitBlock sequence_e1_b1, byte_range_be_bf, sequence_e1_b1_adv, r800_ffff_tmp75;
		BitBlock byte_b3, sequence_e1_b3, r800_ffff_tmp76, cc_range_1cc0_1cd3_3;
		BitBlock sequence_e1_b3_adv, r800_ffff_tmp77, byte_e2, byte_80;
		BitBlock r800_ffff_tmp78, sequence_e2_80, byte_e2_adv, r800_ffff_tmp79;
		BitBlock r800_ffff_tmp80, r800_ffff_tmp81, r800_ffff_tmp82, r800_ffff_tmp83;
		BitBlock r800_ffff_tmp84, r800_ffff_tmp85, r800_ffff_tmp86;
		BitBlock cc_range_2016_203b_3, sequence_e2_80_adv, r800_ffff_tmp87;
		BitBlock sequence_e2_81, r800_ffff_tmp88, r800_ffff_tmp89, r800_ffff_tmp90;
		BitBlock r800_ffff_tmp91, r800_ffff_tmp92, r800_ffff_tmp93, r800_ffff_tmp94;
		BitBlock r800_ffff_tmp95, r800_ffff_tmp96, r800_ffff_tmp97;
		BitBlock cc_range_2041_2055_3, sequence_e2_81_adv, r800_ffff_tmp98;
		BitBlock sequence_e2_b3, r800_ffff_tmp99, r800_ffff_tmp100;
		BitBlock cc_range_2cf9_2cfe_3, sequence_e2_b3_adv, r800_ffff_tmp101, byte_b5;
		BitBlock sequence_e2_b5, sequence_e2_b5_adv, r800_ffff_tmp102, byte_b8;
		BitBlock sequence_e2_b8, r800_ffff_tmp103, r800_ffff_tmp104, r800_ffff_tmp105;
		BitBlock r800_ffff_tmp106, r800_ffff_tmp107, r800_ffff_tmp108;
		BitBlock r800_ffff_tmp109, r800_ffff_tmp110, r800_ffff_tmp111;
		BitBlock r800_ffff_tmp112, r800_ffff_tmp113, r800_ffff_tmp114;
		BitBlock r800_ffff_tmp115, r800_ffff_tmp116, r800_ffff_tmp117;
		BitBlock r800_ffff_tmp118, r800_ffff_tmp119, cc_range_2e00_2e30_3;
		BitBlock sequence_e2_b8_adv, r800_ffff_tmp120, byte_e3, r800_ffff_tmp121;
		BitBlock sequence_e3_80, byte_e3_adv, r800_ffff_tmp122, cc_range_3001_303d_3;
		BitBlock sequence_e3_80_adv, r800_ffff_tmp123, sequence_e3_83;
		BitBlock sequence_e3_83_adv, r800_ffff_tmp124, byte_ea, byte_93;
		BitBlock r800_ffff_tmp125, sequence_ea_93, byte_ea_adv, sequence_ea_93_adv;
		BitBlock r800_ffff_tmp126, byte_98, sequence_ea_98, r800_ffff_tmp127;
		BitBlock byte_range_8d_8f, sequence_ea_98_adv, r800_ffff_tmp128;
		BitBlock sequence_ea_99, r800_ffff_tmp129, cc_range_a673_a67e_3;
		BitBlock sequence_ea_99_adv, r800_ffff_tmp130, sequence_ea_9b;
		BitBlock r800_ffff_tmp131, byte_range_b2_b7, sequence_ea_9b_adv;
		BitBlock r800_ffff_tmp132, sequence_ea_a1, byte_range_b4_b7;
		BitBlock sequence_ea_a1_adv, r800_ffff_tmp133, byte_a3, sequence_ea_a3;
		BitBlock r800_ffff_tmp134, r800_ffff_tmp135, r800_ffff_tmp136;
		BitBlock cc_range_a8ce_a8f8_3, sequence_ea_a3_adv, r800_ffff_tmp137, byte_a4;
		BitBlock sequence_ea_a4, byte_range_ae_af, sequence_ea_a4_adv;
		BitBlock r800_ffff_tmp138, sequence_ea_a5, sequence_ea_a5_adv;
		BitBlock r800_ffff_tmp139, byte_a7, sequence_ea_a7, r800_ffff_tmp140;
		BitBlock r800_ffff_tmp141, cc_range_a9c1_a9de_3, sequence_ea_a7_adv;
		BitBlock r800_ffff_tmp142, byte_a9, sequence_ea_a9, byte_range_9c_9f;
		BitBlock sequence_ea_a9_adv, r800_ffff_tmp143, sequence_ea_ab;
		BitBlock r800_ffff_tmp144, cc_range_aade_aaf0_3, sequence_ea_ab_adv;
		BitBlock r800_ffff_tmp145, sequence_ea_af, sequence_ea_af_adv;
		BitBlock r800_ffff_tmp146, byte_ef, r800_ffff_tmp147, sequence_ef_b8;
		BitBlock byte_ef_adv, r800_ffff_tmp148, r800_ffff_tmp149, cc_range_fe10_fe30_3;
		BitBlock sequence_ef_b8_adv, r800_ffff_tmp150, sequence_ef_b9;
		BitBlock r800_ffff_tmp151, r800_ffff_tmp152, r800_ffff_tmp153;
		BitBlock r800_ffff_tmp154, r800_ffff_tmp155, r800_ffff_tmp156;
		BitBlock r800_ffff_tmp157, r800_ffff_tmp158, r800_ffff_tmp159;
		BitBlock r800_ffff_tmp160, r800_ffff_tmp161, r800_ffff_tmp162;
		BitBlock r800_ffff_tmp163, r800_ffff_tmp164, r800_ffff_tmp165;
		BitBlock r800_ffff_tmp166, r800_ffff_tmp167, cc_range_fe45_fe6a_3;
		BitBlock sequence_ef_b9_adv, r800_ffff_tmp168, sequence_ef_bc;
		BitBlock r800_ffff_tmp169, r800_ffff_tmp170, r800_ffff_tmp171;
		BitBlock r800_ffff_tmp172, r800_ffff_tmp173, r800_ffff_tmp174;
		BitBlock r800_ffff_tmp175, r800_ffff_tmp176, r800_ffff_tmp177;
		BitBlock r800_ffff_tmp178, r800_ffff_tmp179, cc_range_ff01_ff3c_3;
		BitBlock sequence_ef_bc_adv, r800_ffff_tmp180, byte_bd, sequence_ef_bd;
		BitBlock r800_ffff_tmp181, cc_range_ff61_ff64_3, sequence_ef_bd_adv;
		BitBlock r800_ffff_tmp182, byte_90, sequence_f0_90, byte_range_80_bf, tmp76;
		BitBlock sequence_f0_90_byte_range_80_bf, tmp77;
		BitBlock sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock r10000_10fff_tmp1, r10000_10fff_tmp2, r10000_10fff_tmp3, byte_84;
		BitBlock sequence_f0_90_84, sequence_f0_90_adv, r10000_10fff_tmp4;
		BitBlock byte_range_80_82, sequence_f0_90_84_adv, r10000_10fff_tmp5;
		BitBlock r10000_10fff_tmp6, byte_8e, sequence_f0_90_8e, sequence_f0_90_8e_adv;
		BitBlock r10000_10fff_tmp7, byte_8f, sequence_f0_90_8f, sequence_f0_90_8f_adv;
		BitBlock r10000_10fff_tmp8, r10000_10fff_tmp9, sequence_f0_90_a1, byte_97;
		BitBlock sequence_f0_90_a1_adv, r10000_10fff_tmp10, sequence_f0_90_a4;
		BitBlock r10000_10fff_tmp11, cc_range_1091f_1093f_4, sequence_f0_90_a4_adv;
		BitBlock r10000_10fff_tmp12, r10000_10fff_tmp13, sequence_f0_90_a9;
		BitBlock r10000_10fff_tmp14, r10000_10fff_tmp15, r10000_10fff_tmp16;
		BitBlock r10000_10fff_tmp17, cc_range_10a50_10a7f_4, sequence_f0_90_a9_adv;
		BitBlock r10000_10fff_tmp18, byte_ac, sequence_f0_90_ac, r10000_10fff_tmp19;
		BitBlock byte_range_b9_bf, sequence_f0_90_ac_adv, r10000_10fff_tmp20;




        struct_Po.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp2 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp3 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp4 = simd_andc(tmp3, tmp2);
        tmp5 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp6 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp7 = simd_andc(tmp5, tmp6);
        tmp8 = simd_andc(tmp4, tmp7);
        tmp9 = simd_and(tmp1, tmp8);
        tmp10 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp11 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp12 = simd_and(tmp10, tmp11);
        tmp13 = simd_and(tmp4, tmp12);
        tmp14 = simd_or(tmp9, tmp13);
        tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp16 = simd_andc(tmp15, tmp1);
        tmp17 = simd_and(tmp4, tmp16);
        tmp18 = simd_or(tmp14, tmp17);
        tmp19 = simd_and(tmp15, basis_bits.bit_6);
        tmp20 = simd_and(tmp4, tmp19);
        tmp21 = simd_or(tmp18, tmp20);
        tmp22 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp23 = simd_andc(tmp22, tmp2);
        tmp24 = simd_and(tmp10, basis_bits.bit_6);
        tmp25 = simd_and(tmp23, tmp24);
        tmp26 = simd_or(tmp21, tmp25);
        tmp27 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp28 = simd_or(tmp5, tmp1);
        tmp29 = simd_or(tmp27, tmp28);
        tmp30 = simd_not(tmp29);
        tmp31 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp32 = simd_and(tmp15, tmp31);
        tmp33 = simd_and(tmp22, tmp32);
        tmp34 = simd_or(simd_and(basis_bits.bit_1, tmp30), simd_andc(tmp33, basis_bits.bit_1));
        tmp35 = simd_andc(tmp34, basis_bits.bit_0);
        tmp36 = simd_or(tmp26, tmp35);
        tmp37 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp38 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp39 = simd_and(tmp37, tmp38);
        tmp40 = simd_and(tmp39, tmp16);
        cc_range_21_5c_1 = simd_or(tmp36, tmp40);
        struct_Po.cc = simd_or(struct_Po.cc, cc_range_21_5c_1);
        tmp41 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp42 = simd_and(tmp41, tmp22);
        byte_f0 = simd_andc(tmp42, tmp28);
        tmp43 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp44 = simd_and(tmp43, tmp38);
        tmp45 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp46 = simd_andc(tmp45, tmp5);
        byte_91 = simd_and(tmp44, tmp46);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp47));
        sequence_f0_91 = simd_and(tmp47, byte_91);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
        tmp48 = simd_andc(tmp43, tmp27);
        byte_81 = simd_and(tmp48, tmp46);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(2), tmp49));
        sequence_f0_91_81 = simd_and(tmp49, byte_81);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(3), sequence_f0_91_adv));
        sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
        tmp50 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
        tmp51 = simd_not(tmp50);
        tmp52 = simd_and(basis_bits.bit_5, tmp31);
        tmp53 = simd_or(simd_and(basis_bits.bit_4, tmp51), simd_andc(tmp52, basis_bits.bit_4));
        byte_range_87_8d = simd_and(tmp48, tmp53);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(4), sequence_f0_91_81_adv));
        tmp54 = simd_and(sequence_f0_91_81_adv, byte_range_87_8d);
        struct_Po.cc = simd_or(struct_Po.cc, tmp54);
        tmp55 = simd_andc(tmp11, tmp5);
        byte_82 = simd_and(tmp48, tmp55);
        sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
        sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
        tmp56 = simd_and(tmp43, tmp22);
        tmp57 = simd_and(tmp56, basis_bits.bit_4);
        tmp58 = simd_not(tmp1);
        tmp59 = simd_or(simd_and(basis_bits.bit_5, tmp58), simd_andc(tmp31, basis_bits.bit_5));
        tmp60 = simd_and(tmp57, tmp59);
        tmp61 = simd_and(tmp56, tmp19);
        cc_range_110bb_110be_4 = simd_or(tmp60, tmp61);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(5), sequence_f0_91_82_adv));
        tmp62 = simd_and(sequence_f0_91_82_adv, cc_range_110bb_110be_4);
        struct_Po.cc = simd_or(struct_Po.cc, tmp62);
        tmp63 = simd_andc(tmp31, tmp5);
        byte_83 = simd_and(tmp48, tmp63);
        sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
        sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
        tmp64 = simd_or(tmp5, basis_bits.bit_6);
        byte_range_80_81 = simd_andc(tmp48, tmp64);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(6), sequence_f0_91_83_adv));
        tmp65 = simd_and(sequence_f0_91_83_adv, byte_range_80_81);
        struct_Po.cc = simd_or(struct_Po.cc, tmp65);
        tmp66 = simd_and(tmp6, tmp45);
        byte_85 = simd_and(tmp48, tmp66);
        sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
        sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
        byte_range_80_83 = simd_andc(tmp48, tmp5);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(7), sequence_f0_91_85_adv));
        tmp67 = simd_and(sequence_f0_91_85_adv, byte_range_80_83);
        struct_Po.cc = simd_or(struct_Po.cc, tmp67);
        tmp68 = simd_and(tmp6, tmp31);
        byte_87 = simd_and(tmp48, tmp68);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        tmp69 = simd_or(basis_bits.bit_5, tmp1);
        tmp70 = simd_not(tmp69);
        tmp71 = simd_and(basis_bits.bit_5, tmp1);
        tmp72 = simd_or(simd_and(basis_bits.bit_4, tmp70), simd_andc(tmp71, basis_bits.bit_4));
        byte_range_85_88 = simd_and(tmp48, tmp72);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(8), sequence_f0_91_87_adv));
        tmp73 = simd_and(sequence_f0_91_87_adv, byte_range_85_88);
        struct_Po.cc = simd_or(struct_Po.cc, tmp73);
        byte_92 = simd_and(tmp44, tmp55);
        sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
        sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(9), tmp74));
        sequence_f0_92_91 = simd_and(tmp74, byte_91);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(10), sequence_f0_92_adv));
        sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
        byte_range_b0_b3 = simd_andc(tmp56, tmp5);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(11), sequence_f0_92_91_adv));
        tmp75 = simd_and(sequence_f0_92_91_adv, byte_range_b0_b3);
        struct_Po.cc = simd_or(struct_Po.cc, tmp75);
        byte_range_c0_df = simd_andc(tmp41, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(12, 11))) {
          r80_7ff_tmp1 = simd_andc(tmp41, tmp27);
          byte_c2 = simd_and(r80_7ff_tmp1, tmp55);
          r80_7ff_tmp2 = simd_and(tmp43, tmp3);
          r80_7ff_tmp3 = simd_or(tmp46, tmp68);
          r80_7ff_tmp4 = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
          r80_7ff_tmp5 = simd_and(tmp6, basis_bits.bit_6);
          r80_7ff_tmp6 = simd_and(tmp56, r80_7ff_tmp5);
          r80_7ff_tmp7 = simd_or(r80_7ff_tmp4, r80_7ff_tmp6);
          r80_7ff_tmp8 = simd_and(tmp56, tmp32);
          cc_range_a1_bf_2 = simd_or(r80_7ff_tmp7, r80_7ff_tmp8);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(12), byte_c2_adv));
          r80_7ff_tmp9 = simd_and(byte_c2_adv, cc_range_a1_bf_2);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp9);
          r80_7ff_tmp10 = simd_and(tmp15, tmp45);
          byte_cd = simd_and(r80_7ff_tmp1, r80_7ff_tmp10);
          r80_7ff_tmp11 = simd_and(tmp15, tmp11);
          byte_be = simd_and(tmp56, r80_7ff_tmp11);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(13), byte_cd_adv));
          r80_7ff_tmp12 = simd_and(byte_cd_adv, byte_be);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp12);
          byte_ce = simd_and(r80_7ff_tmp1, r80_7ff_tmp11);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(14), byte_ce_adv));
          r80_7ff_tmp13 = simd_and(byte_ce_adv, byte_87);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp13);
          r80_7ff_tmp14 = simd_and(tmp41, tmp38);
          byte_d5 = simd_and(r80_7ff_tmp14, tmp66);
          r80_7ff_tmp15 = simd_and(tmp44, basis_bits.bit_4);
          r80_7ff_tmp16 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          byte_range_9a_9f = simd_and(r80_7ff_tmp15, r80_7ff_tmp16);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(15), byte_d5_adv));
          r80_7ff_tmp17 = simd_and(byte_d5_adv, byte_range_9a_9f);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp17);
          r80_7ff_tmp18 = simd_and(tmp6, tmp11);
          byte_d6 = simd_and(r80_7ff_tmp14, r80_7ff_tmp18);
          r80_7ff_tmp19 = simd_and(tmp10, tmp45);
          byte_89 = simd_and(tmp48, r80_7ff_tmp19);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(16), byte_d6_adv));
          r80_7ff_tmp20 = simd_and(byte_d6_adv, byte_89);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp20);
          byte_d7 = simd_and(r80_7ff_tmp14, tmp68);
          r80_7ff_tmp21 = simd_andc(tmp28, tmp63);
          r80_7ff_tmp22 = simd_andc(r80_7ff_tmp21, r80_7ff_tmp18);
          r80_7ff_tmp23 = simd_andc(tmp48, r80_7ff_tmp22);
          r80_7ff_tmp24 = simd_andc(tmp56, basis_bits.bit_4);
          r80_7ff_tmp25 = simd_and(r80_7ff_tmp24, tmp59);
          cc_range_5c0_5f3_2 = simd_or(r80_7ff_tmp23, r80_7ff_tmp25);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(17), byte_d7_adv));
          r80_7ff_tmp26 = simd_and(byte_d7_adv, cc_range_5c0_5f3_2);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp26);
          r80_7ff_tmp27 = simd_andc(tmp10, tmp1);
          byte_d8 = simd_and(r80_7ff_tmp14, r80_7ff_tmp27);
          r80_7ff_tmp28 = simd_and(tmp48, tmp10);
          r80_7ff_tmp29 = simd_not(basis_bits.bit_7);
          r80_7ff_tmp30 = simd_or(simd_and(basis_bits.bit_6, r80_7ff_tmp29), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          r80_7ff_tmp31 = simd_and(r80_7ff_tmp28, r80_7ff_tmp30);
          r80_7ff_tmp32 = simd_andc(tmp15, basis_bits.bit_6);
          r80_7ff_tmp33 = simd_and(tmp48, r80_7ff_tmp32);
          r80_7ff_tmp34 = simd_or(r80_7ff_tmp31, r80_7ff_tmp33);
          r80_7ff_tmp35 = simd_and(tmp10, tmp31);
          r80_7ff_tmp36 = simd_and(tmp44, r80_7ff_tmp35);
          r80_7ff_tmp37 = simd_or(r80_7ff_tmp34, r80_7ff_tmp36);
          r80_7ff_tmp38 = simd_and(tmp44, tmp19);
          cc_range_609_61e_2 = simd_or(r80_7ff_tmp37, r80_7ff_tmp38);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(18), byte_d8_adv));
          r80_7ff_tmp39 = simd_and(byte_d8_adv, cc_range_609_61e_2);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp39);
          byte_d9 = simd_and(r80_7ff_tmp14, r80_7ff_tmp19);
          r80_7ff_tmp40 = simd_and(r80_7ff_tmp2, basis_bits.bit_4);
          r80_7ff_tmp41 = simd_not(basis_bits.bit_6);
          r80_7ff_tmp42 = simd_or(simd_and(basis_bits.bit_5, r80_7ff_tmp41), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          byte_range_aa_ad = simd_and(r80_7ff_tmp40, r80_7ff_tmp42);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(19), byte_d9_adv));
          r80_7ff_tmp43 = simd_and(byte_d9_adv, byte_range_aa_ad);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp43);
          byte_db = simd_and(r80_7ff_tmp14, r80_7ff_tmp35);
          r80_7ff_tmp44 = simd_andc(tmp6, tmp1);
          byte_94 = simd_and(tmp44, r80_7ff_tmp44);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(20), byte_db_adv));
          r80_7ff_tmp45 = simd_and(byte_db_adv, byte_94);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp45);
          byte_dc = simd_and(r80_7ff_tmp14, tmp16);
          r80_7ff_tmp46 = simd_and(basis_bits.bit_4, tmp50);
          byte_range_80_8d = simd_andc(tmp48, r80_7ff_tmp46);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(21), byte_dc_adv));
          r80_7ff_tmp47 = simd_and(byte_dc_adv, byte_range_80_8d);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp47);
          byte_df = simd_and(r80_7ff_tmp14, tmp32);
          r80_7ff_tmp48 = simd_not(r80_7ff_tmp16);
          r80_7ff_tmp49 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp48), simd_andc(tmp52, basis_bits.bit_4));
          byte_range_b7_b9 = simd_and(tmp56, r80_7ff_tmp49);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(22), byte_df_adv));
          r80_7ff_tmp50 = simd_and(byte_df_adv, byte_range_b7_b9);
          struct_Po.cc = simd_or(struct_Po.cc, r80_7ff_tmp50);
        }
        else {
          carryQ.CarryDequeueEnqueue(12, 11);
        }
        byte_range_e0_ef = simd_and(tmp41, tmp3);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(23, 60))) {
          byte_e0 = simd_andc(byte_range_e0_ef, tmp28);
          r800_ffff_tmp1 = simd_and(tmp43, tmp3);
          byte_a0 = simd_andc(r800_ffff_tmp1, tmp28);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(23), r800_ffff_tmp2));
          sequence_e0_a0 = simd_and(r800_ffff_tmp2, byte_a0);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(24), byte_e0_adv));
          sequence_e0_a0 = simd_and(byte_e0_adv, byte_a0);
          r800_ffff_tmp3 = simd_and(basis_bits.bit_4, tmp52);
          byte_range_b0_be = simd_andc(tmp56, r800_ffff_tmp3);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(25), sequence_e0_a0_adv));
          r800_ffff_tmp4 = simd_and(sequence_e0_a0_adv, byte_range_b0_be);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp4);
          byte_a1 = simd_and(r800_ffff_tmp1, tmp46);
          sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
          sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
          r800_ffff_tmp5 = simd_and(tmp15, tmp11);
          byte_9e = simd_and(tmp44, r800_ffff_tmp5);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(26), sequence_e0_a1_adv));
          r800_ffff_tmp6 = simd_and(sequence_e0_a1_adv, byte_9e);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp6);
          byte_a5 = simd_and(r800_ffff_tmp1, tmp66);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          r800_ffff_tmp7 = simd_andc(tmp6, basis_bits.bit_6);
          r800_ffff_tmp8 = simd_and(r800_ffff_tmp1, r800_ffff_tmp7);
          r800_ffff_tmp9 = simd_andc(tmp56, tmp28);
          cc_range_964_970_3 = simd_or(r800_ffff_tmp8, r800_ffff_tmp9);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(27), sequence_e0_a5_adv));
          r800_ffff_tmp10 = simd_and(sequence_e0_a5_adv, cc_range_964_970_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp10);
          r800_ffff_tmp11 = simd_and(tmp10, tmp31);
          byte_ab = simd_and(r800_ffff_tmp1, r800_ffff_tmp11);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          byte_b0 = simd_andc(tmp56, tmp28);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(28), sequence_e0_ab_adv));
          r800_ffff_tmp12 = simd_and(sequence_e0_ab_adv, byte_b0);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp12);
          byte_b7 = simd_and(tmp56, tmp68);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          r800_ffff_tmp13 = simd_andc(tmp6, tmp1);
          byte_b4 = simd_and(tmp56, r800_ffff_tmp13);
          carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(29), sequence_e0_b7_adv));
          r800_ffff_tmp14 = simd_and(sequence_e0_b7_adv, byte_b4);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp14);
          r800_ffff_tmp15 = simd_and(tmp10, tmp45);
          byte_b9 = simd_and(tmp56, r800_ffff_tmp15);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          r800_ffff_tmp16 = simd_and(tmp48, tmp32);
          r800_ffff_tmp17 = simd_and(tmp44, tmp24);
          cc_range_e4f_e5a_3 = simd_or(r800_ffff_tmp16, r800_ffff_tmp17);
          carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(30), sequence_e0_b9_adv));
          r800_ffff_tmp18 = simd_and(sequence_e0_b9_adv, cc_range_e4f_e5a_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp18);
          byte_bc = simd_and(tmp56, tmp16);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          r800_ffff_tmp19 = simd_andc(tmp43, basis_bits.bit_2);
          r800_ffff_tmp20 = simd_or(tmp5, tmp31);
          r800_ffff_tmp21 = simd_not(r800_ffff_tmp20);
          r800_ffff_tmp22 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp21), simd_andc(tmp5, basis_bits.bit_3));
          r800_ffff_tmp23 = simd_and(r800_ffff_tmp19, r800_ffff_tmp22);
          r800_ffff_tmp24 = simd_and(tmp44, r800_ffff_tmp13);
          cc_range_f04_f14_3 = simd_or(r800_ffff_tmp23, r800_ffff_tmp24);
          carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(31), sequence_e0_bc_adv));
          r800_ffff_tmp25 = simd_and(sequence_e0_bc_adv, cc_range_f04_f14_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp25);
          byte_be = simd_and(tmp56, r800_ffff_tmp5);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(32), sequence_e0_be_adv));
          r800_ffff_tmp26 = simd_and(sequence_e0_be_adv, byte_85);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp26);
          byte_bf = simd_and(tmp56, tmp32);
          sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
          sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
          r800_ffff_tmp27 = simd_andc(tmp44, basis_bits.bit_4);
          r800_ffff_tmp28 = simd_andc(r800_ffff_tmp27, tmp71);
          r800_ffff_tmp29 = simd_and(tmp44, tmp10);
          r800_ffff_tmp30 = simd_not(basis_bits.bit_7);
          r800_ffff_tmp31 = simd_or(simd_and(basis_bits.bit_6, r800_ffff_tmp30), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          r800_ffff_tmp32 = simd_and(r800_ffff_tmp29, r800_ffff_tmp31);
          cc_range_fd0_fd9_3 = simd_or(r800_ffff_tmp28, r800_ffff_tmp32);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(33), sequence_e0_bf_adv));
          r800_ffff_tmp33 = simd_and(sequence_e0_bf_adv, cc_range_fd0_fd9_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp33);
          byte_e1 = simd_and(byte_range_e0_ef, tmp46);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(34), r800_ffff_tmp34));
          sequence_e1_81 = simd_and(r800_ffff_tmp34, byte_81);
          carryQ.cq[35] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(35), byte_e1_adv));
          sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
          r800_ffff_tmp35 = simd_and(tmp48, basis_bits.bit_4);
          r800_ffff_tmp36 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          byte_range_8a_8f = simd_and(r800_ffff_tmp35, r800_ffff_tmp36);
          carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(36), sequence_e1_81_adv));
          r800_ffff_tmp37 = simd_and(sequence_e1_81_adv, byte_range_8a_8f);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp37);
          sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
          sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
          byte_bb = simd_and(tmp56, r800_ffff_tmp11);
          carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(37), sequence_e1_83_adv));
          r800_ffff_tmp38 = simd_and(sequence_e1_83_adv, byte_bb);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp38);
          r800_ffff_tmp39 = simd_and(tmp15, tmp45);
          byte_8d = simd_and(tmp48, r800_ffff_tmp39);
          sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
          sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
          r800_ffff_tmp40 = simd_and(basis_bits.bit_4, tmp69);
          byte_range_a0_a8 = simd_andc(r800_ffff_tmp1, r800_ffff_tmp40);
          carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(38), sequence_e1_8d_adv));
          r800_ffff_tmp41 = simd_and(sequence_e1_8d_adv, byte_range_a0_a8);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp41);
          byte_99 = simd_and(tmp44, r800_ffff_tmp15);
          sequence_e1_99 = simd_and(byte_e1_adv, byte_99);
          sequence_e1_99 = simd_and(byte_e1_adv, byte_99);
          r800_ffff_tmp42 = simd_and(r800_ffff_tmp1, tmp15);
          byte_range_ad_ae = simd_and(r800_ffff_tmp42, r800_ffff_tmp31);
          carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e1_99, carryQ.get_carry_in(39), sequence_e1_99_adv));
          r800_ffff_tmp43 = simd_and(sequence_e1_99_adv, byte_range_ad_ae);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp43);
          byte_9b = simd_and(tmp44, r800_ffff_tmp11);
          sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
          sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
          r800_ffff_tmp44 = simd_and(r800_ffff_tmp1, basis_bits.bit_4);
          r800_ffff_tmp45 = simd_not(basis_bits.bit_6);
          r800_ffff_tmp46 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp45), simd_andc(tmp31, basis_bits.bit_5));
          byte_range_ab_ad = simd_and(r800_ffff_tmp44, r800_ffff_tmp46);
          carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(40), sequence_e1_9b_adv));
          r800_ffff_tmp47 = simd_and(sequence_e1_9b_adv, byte_range_ab_ad);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp47);
          byte_9c = simd_and(tmp44, tmp16);
          sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
          sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
          r800_ffff_tmp48 = simd_and(tmp56, tmp6);
          byte_range_b5_b6 = simd_and(r800_ffff_tmp48, r800_ffff_tmp31);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(41), sequence_e1_9c_adv));
          r800_ffff_tmp49 = simd_and(sequence_e1_9c_adv, byte_range_b5_b6);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp49);
          byte_9f = simd_and(tmp44, tmp32);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          r800_ffff_tmp50 = simd_or(tmp6, tmp10);
          r800_ffff_tmp51 = simd_and(tmp44, r800_ffff_tmp50);
          cc_range_17d4_17d8_3 = simd_andc(r800_ffff_tmp51, tmp31);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(42), sequence_e1_9f_adv));
          r800_ffff_tmp52 = simd_and(sequence_e1_9f_adv, cc_range_17d4_17d8_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp52);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          r800_ffff_tmp53 = simd_andc(tmp48, basis_bits.bit_4);
          r800_ffff_tmp54 = simd_andc(r800_ffff_tmp53, tmp50);
          r800_ffff_tmp55 = simd_or(basis_bits.bit_5, tmp31);
          r800_ffff_tmp56 = simd_not(r800_ffff_tmp55);
          r800_ffff_tmp57 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp56), simd_andc(tmp52, basis_bits.bit_4));
          r800_ffff_tmp58 = simd_and(tmp48, r800_ffff_tmp57);
          cc_range_1800_1807_3 = simd_or(r800_ffff_tmp54, r800_ffff_tmp58);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(43), sequence_e1_a0_adv));
          r800_ffff_tmp59 = simd_and(sequence_e1_a0_adv, cc_range_1800_1807_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp59);
          sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
          sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
          byte_range_84_85 = simd_and(tmp48, r800_ffff_tmp7);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(44), sequence_e1_a5_adv));
          r800_ffff_tmp60 = simd_and(sequence_e1_a5_adv, byte_range_84_85);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp60);
          r800_ffff_tmp61 = simd_andc(tmp10, tmp1);
          byte_a8 = simd_and(r800_ffff_tmp1, r800_ffff_tmp61);
          sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
          sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
          byte_range_9e_9f = simd_and(tmp44, tmp19);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(45), sequence_e1_a8_adv));
          r800_ffff_tmp62 = simd_and(sequence_e1_a8_adv, byte_range_9e_9f);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp62);
          byte_aa = simd_and(r800_ffff_tmp1, tmp12);
          sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
          sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
          r800_ffff_tmp63 = simd_andc(r800_ffff_tmp1, basis_bits.bit_4);
          r800_ffff_tmp64 = simd_andc(r800_ffff_tmp63, tmp52);
          r800_ffff_tmp65 = simd_andc(r800_ffff_tmp44, tmp50);
          cc_range_1aa0_1aa8_3 = simd_or(r800_ffff_tmp64, r800_ffff_tmp65);
          carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(46), sequence_e1_aa_adv));
          r800_ffff_tmp66 = simd_and(sequence_e1_aa_adv, cc_range_1aa0_1aa8_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp66);
          byte_ad = simd_and(r800_ffff_tmp1, r800_ffff_tmp39);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          r800_ffff_tmp67 = simd_or(basis_bits.bit_3, tmp28);
          r800_ffff_tmp68 = simd_not(r800_ffff_tmp67);
          r800_ffff_tmp69 = simd_and(basis_bits.bit_4, r800_ffff_tmp36);
          r800_ffff_tmp70 = simd_and(basis_bits.bit_3, r800_ffff_tmp69);
          r800_ffff_tmp71 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp68), simd_andc(r800_ffff_tmp70, basis_bits.bit_2));
          byte_range_9a_a0 = simd_and(tmp43, r800_ffff_tmp71);
          carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(47), sequence_e1_ad_adv));
          r800_ffff_tmp72 = simd_and(sequence_e1_ad_adv, byte_range_9a_a0);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp72);
          byte_af = simd_and(r800_ffff_tmp1, tmp32);
          sequence_e1_af = simd_and(byte_e1_adv, byte_af);
          sequence_e1_af = simd_and(byte_e1_adv, byte_af);
          byte_range_bc_bf = simd_and(tmp56, tmp15);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(48), sequence_e1_af_adv));
          r800_ffff_tmp73 = simd_and(sequence_e1_af_adv, byte_range_bc_bf);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp73);
          sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
          sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
          byte_range_bb_bf = simd_and(tmp57, r800_ffff_tmp55);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(49), sequence_e1_b0_adv));
          r800_ffff_tmp74 = simd_and(sequence_e1_b0_adv, byte_range_bb_bf);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp74);
          byte_b1 = simd_and(tmp56, tmp46);
          sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
          sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
          byte_range_be_bf = simd_and(tmp56, tmp19);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(50), sequence_e1_b1_adv));
          r800_ffff_tmp75 = simd_and(sequence_e1_b1_adv, byte_range_be_bf);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp75);
          byte_b3 = simd_and(tmp56, tmp63);
          sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
          sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
          r800_ffff_tmp76 = simd_and(tmp44, tmp63);
          cc_range_1cc0_1cd3_3 = simd_or(r800_ffff_tmp53, r800_ffff_tmp76);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(51), sequence_e1_b3_adv));
          r800_ffff_tmp77 = simd_and(sequence_e1_b3_adv, cc_range_1cc0_1cd3_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp77);
          byte_e2 = simd_and(byte_range_e0_ef, tmp55);
          byte_80 = simd_andc(tmp48, tmp28);
          carryQ.cq[52] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(52), r800_ffff_tmp78));
          sequence_e2_80 = simd_and(r800_ffff_tmp78, byte_80);
          carryQ.cq[53] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(53), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp79 = simd_and(tmp6, basis_bits.bit_6);
          r800_ffff_tmp80 = simd_and(tmp44, r800_ffff_tmp79);
          r800_ffff_tmp81 = simd_or(r800_ffff_tmp80, r800_ffff_tmp63);
          r800_ffff_tmp82 = simd_andc(tmp56, r800_ffff_tmp40);
          r800_ffff_tmp83 = simd_or(r800_ffff_tmp81, r800_ffff_tmp82);
          r800_ffff_tmp84 = simd_not(tmp31);
          r800_ffff_tmp85 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp84), simd_andc(tmp31, basis_bits.bit_5));
          r800_ffff_tmp86 = simd_and(tmp57, r800_ffff_tmp85);
          cc_range_2016_203b_3 = simd_or(r800_ffff_tmp83, r800_ffff_tmp86);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(54), sequence_e2_80_adv));
          r800_ffff_tmp87 = simd_and(sequence_e2_80_adv, cc_range_2016_203b_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp87);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          r800_ffff_tmp88 = simd_and(byte_range_80_83, tmp1);
          r800_ffff_tmp89 = simd_not(tmp64);
          r800_ffff_tmp90 = simd_or(basis_bits.bit_4, tmp52);
          r800_ffff_tmp91 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp89), simd_andc(r800_ffff_tmp90, basis_bits.bit_3));
          r800_ffff_tmp92 = simd_and(r800_ffff_tmp19, r800_ffff_tmp91);
          r800_ffff_tmp93 = simd_or(r800_ffff_tmp88, r800_ffff_tmp92);
          r800_ffff_tmp94 = simd_or(r800_ffff_tmp93, r800_ffff_tmp76);
          r800_ffff_tmp95 = simd_not(tmp52);
          r800_ffff_tmp96 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp95), simd_andc(tmp71, basis_bits.bit_4));
          r800_ffff_tmp97 = simd_and(tmp44, r800_ffff_tmp96);
          cc_range_2041_2055_3 = simd_or(r800_ffff_tmp94, r800_ffff_tmp97);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(55), sequence_e2_81_adv));
          r800_ffff_tmp98 = simd_and(sequence_e2_81_adv, cc_range_2041_2055_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp98);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          r800_ffff_tmp99 = simd_or(simd_and(basis_bits.bit_5, tmp58), simd_andc(tmp1, basis_bits.bit_5));
          r800_ffff_tmp100 = simd_and(tmp57, r800_ffff_tmp99);
          cc_range_2cf9_2cfe_3 = simd_or(r800_ffff_tmp100, byte_range_be_bf);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(56), sequence_e2_b3_adv));
          r800_ffff_tmp101 = simd_and(sequence_e2_b3_adv, cc_range_2cf9_2cfe_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp101);
          byte_b5 = simd_and(tmp56, tmp66);
          sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
          sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
          carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(57), sequence_e2_b5_adv));
          r800_ffff_tmp102 = simd_and(sequence_e2_b5_adv, byte_b0);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp102);
          byte_b8 = simd_and(tmp56, r800_ffff_tmp61);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          r800_ffff_tmp103 = simd_or(simd_and(basis_bits.bit_4, tmp70), simd_andc(tmp50, basis_bits.bit_4));
          r800_ffff_tmp104 = simd_andc(tmp64, r800_ffff_tmp103);
          r800_ffff_tmp105 = simd_andc(r800_ffff_tmp104, r800_ffff_tmp11);
          r800_ffff_tmp106 = simd_andc(tmp48, r800_ffff_tmp105);
          r800_ffff_tmp107 = simd_not(r800_ffff_tmp90);
          r800_ffff_tmp108 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp107), simd_andc(tmp19, basis_bits.bit_3));
          r800_ffff_tmp109 = simd_and(r800_ffff_tmp19, r800_ffff_tmp108);
          r800_ffff_tmp110 = simd_or(r800_ffff_tmp106, r800_ffff_tmp109);
          r800_ffff_tmp111 = simd_andc(tmp10, basis_bits.bit_6);
          r800_ffff_tmp112 = simd_and(tmp44, r800_ffff_tmp111);
          r800_ffff_tmp113 = simd_or(r800_ffff_tmp110, r800_ffff_tmp112);
          r800_ffff_tmp114 = simd_or(r800_ffff_tmp113, byte_9b);
          r800_ffff_tmp115 = simd_or(r800_ffff_tmp114, byte_range_9e_9f);
          r800_ffff_tmp116 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp84), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp117 = simd_and(r800_ffff_tmp44, r800_ffff_tmp116);
          r800_ffff_tmp118 = simd_or(r800_ffff_tmp115, r800_ffff_tmp117);
          r800_ffff_tmp119 = simd_andc(tmp56, r800_ffff_tmp69);
          cc_range_2e00_2e30_3 = simd_or(r800_ffff_tmp118, r800_ffff_tmp119);
          carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(58), sequence_e2_b8_adv));
          r800_ffff_tmp120 = simd_and(sequence_e2_b8_adv, cc_range_2e00_2e30_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp120);
          byte_e3 = simd_and(byte_range_e0_ef, tmp63);
          carryQ.cq[59] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(59), r800_ffff_tmp121));
          sequence_e3_80 = simd_and(r800_ffff_tmp121, byte_80);
          carryQ.cq[60] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(60), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          r800_ffff_tmp122 = simd_and(tmp56, r800_ffff_tmp39);
          cc_range_3001_303d_3 = simd_or(r800_ffff_tmp88, r800_ffff_tmp122);
          carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(61), sequence_e3_80_adv));
          r800_ffff_tmp123 = simd_and(sequence_e3_80_adv, cc_range_3001_303d_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp123);
          sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
          sequence_e3_83 = simd_and(byte_e3_adv, byte_83);
          carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e3_83, carryQ.get_carry_in(62), sequence_e3_83_adv));
          r800_ffff_tmp124 = simd_and(sequence_e3_83_adv, byte_bb);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp124);
          byte_ea = simd_and(byte_range_e0_ef, tmp12);
          byte_93 = simd_and(tmp44, tmp63);
          carryQ.cq[63] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(63), r800_ffff_tmp125));
          sequence_ea_93 = simd_and(r800_ffff_tmp125, byte_93);
          carryQ.cq[64] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(64), byte_ea_adv));
          sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
          carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(65), sequence_ea_93_adv));
          r800_ffff_tmp126 = simd_and(sequence_ea_93_adv, byte_range_be_bf);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp126);
          byte_98 = simd_and(tmp44, r800_ffff_tmp61);
          sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
          sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
          r800_ffff_tmp127 = simd_and(tmp48, tmp15);
          byte_range_8d_8f = simd_and(r800_ffff_tmp127, tmp1);
          carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(66), sequence_ea_98_adv));
          r800_ffff_tmp128 = simd_and(sequence_ea_98_adv, byte_range_8d_8f);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp128);
          sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
          sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
          r800_ffff_tmp129 = simd_or(tmp63, r800_ffff_tmp5);
          cc_range_a673_a67e_3 = simd_and(tmp56, r800_ffff_tmp129);
          carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(67), sequence_ea_99_adv));
          r800_ffff_tmp130 = simd_and(sequence_ea_99_adv, cc_range_a673_a67e_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp130);
          sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
          sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
          r800_ffff_tmp131 = simd_andc(tmp56, basis_bits.bit_4);
          byte_range_b2_b7 = simd_and(r800_ffff_tmp131, r800_ffff_tmp36);
          carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(68), sequence_ea_9b_adv));
          r800_ffff_tmp132 = simd_and(sequence_ea_9b_adv, byte_range_b2_b7);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp132);
          sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
          sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
          byte_range_b4_b7 = simd_and(tmp56, tmp6);
          carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(69), sequence_ea_a1_adv));
          r800_ffff_tmp133 = simd_and(sequence_ea_a1_adv, byte_range_b4_b7);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp133);
          byte_a3 = simd_and(r800_ffff_tmp1, tmp63);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          r800_ffff_tmp134 = simd_and(tmp48, tmp19);
          r800_ffff_tmp135 = simd_and(tmp56, tmp10);
          r800_ffff_tmp136 = simd_andc(r800_ffff_tmp135, tmp31);
          cc_range_a8ce_a8f8_3 = simd_or(r800_ffff_tmp134, r800_ffff_tmp136);
          carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(70), sequence_ea_a3_adv));
          r800_ffff_tmp137 = simd_and(sequence_ea_a3_adv, cc_range_a8ce_a8f8_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp137);
          byte_a4 = simd_and(r800_ffff_tmp1, r800_ffff_tmp13);
          sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
          sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
          byte_range_ae_af = simd_and(r800_ffff_tmp1, tmp19);
          carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(71), sequence_ea_a4_adv));
          r800_ffff_tmp138 = simd_and(sequence_ea_a4_adv, byte_range_ae_af);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp138);
          sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
          sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
          carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(72), sequence_ea_a5_adv));
          r800_ffff_tmp139 = simd_and(sequence_ea_a5_adv, byte_9f);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp139);
          byte_a7 = simd_and(r800_ffff_tmp1, tmp68);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          r800_ffff_tmp140 = simd_or(simd_and(basis_bits.bit_4, tmp51), simd_andc(tmp69, basis_bits.bit_4));
          r800_ffff_tmp141 = simd_and(tmp48, r800_ffff_tmp140);
          cc_range_a9c1_a9de_3 = simd_or(r800_ffff_tmp141, byte_range_9e_9f);
          carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(73), sequence_ea_a7_adv));
          r800_ffff_tmp142 = simd_and(sequence_ea_a7_adv, cc_range_a9c1_a9de_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp142);
          byte_a9 = simd_and(r800_ffff_tmp1, r800_ffff_tmp15);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          byte_range_9c_9f = simd_and(tmp44, tmp15);
          carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(74), sequence_ea_a9_adv));
          r800_ffff_tmp143 = simd_and(sequence_ea_a9_adv, byte_range_9c_9f);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp143);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          r800_ffff_tmp144 = simd_andc(tmp56, tmp64);
          cc_range_aade_aaf0_3 = simd_or(byte_range_9e_9f, r800_ffff_tmp144);
          carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(75), sequence_ea_ab_adv));
          r800_ffff_tmp145 = simd_and(sequence_ea_ab_adv, cc_range_aade_aaf0_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp145);
          sequence_ea_af = simd_and(byte_ea_adv, byte_af);
          sequence_ea_af = simd_and(byte_ea_adv, byte_af);
          carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(76), sequence_ea_af_adv));
          r800_ffff_tmp146 = simd_and(sequence_ea_af_adv, byte_ab);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp146);
          byte_ef = simd_and(byte_range_e0_ef, tmp32);
          carryQ.cq[77] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(77), r800_ffff_tmp147));
          sequence_ef_b8 = simd_and(r800_ffff_tmp147, byte_b8);
          carryQ.cq[78] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(78), byte_ef_adv));
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          r800_ffff_tmp148 = simd_andc(r800_ffff_tmp27, tmp52);
          r800_ffff_tmp149 = simd_or(r800_ffff_tmp148, byte_99);
          cc_range_fe10_fe30_3 = simd_or(r800_ffff_tmp149, byte_b0);
          carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(79), sequence_ef_b8_adv));
          r800_ffff_tmp150 = simd_and(sequence_ef_b8_adv, cc_range_fe10_fe30_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp150);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          r800_ffff_tmp151 = simd_and(tmp48, tmp6);
          r800_ffff_tmp152 = simd_and(r800_ffff_tmp151, r800_ffff_tmp31);
          r800_ffff_tmp153 = simd_and(r800_ffff_tmp35, r800_ffff_tmp99);
          r800_ffff_tmp154 = simd_or(r800_ffff_tmp152, r800_ffff_tmp153);
          r800_ffff_tmp155 = simd_andc(tmp44, tmp5);
          r800_ffff_tmp156 = simd_andc(r800_ffff_tmp155, tmp31);
          r800_ffff_tmp157 = simd_or(r800_ffff_tmp154, r800_ffff_tmp156);
          r800_ffff_tmp158 = simd_and(tmp44, tmp6);
          r800_ffff_tmp159 = simd_or(r800_ffff_tmp157, r800_ffff_tmp158);
          r800_ffff_tmp160 = simd_or(basis_bits.bit_3, tmp64);
          r800_ffff_tmp161 = simd_not(r800_ffff_tmp160);
          r800_ffff_tmp162 = simd_and(basis_bits.bit_3, tmp32);
          r800_ffff_tmp163 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp161), simd_andc(r800_ffff_tmp162, basis_bits.bit_2));
          r800_ffff_tmp164 = simd_and(tmp43, r800_ffff_tmp163);
          r800_ffff_tmp165 = simd_or(r800_ffff_tmp159, r800_ffff_tmp164);
          r800_ffff_tmp166 = simd_or(r800_ffff_tmp165, byte_a8);
          r800_ffff_tmp167 = simd_and(r800_ffff_tmp1, tmp24);
          cc_range_fe45_fe6a_3 = simd_or(r800_ffff_tmp166, r800_ffff_tmp167);
          carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(80), sequence_ef_b9_adv));
          r800_ffff_tmp168 = simd_and(sequence_ef_b9_adv, cc_range_fe45_fe6a_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp168);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          r800_ffff_tmp169 = simd_andc(tmp48, tmp7);
          r800_ffff_tmp170 = simd_and(tmp1, r800_ffff_tmp169);
          r800_ffff_tmp171 = simd_and(tmp48, tmp12);
          r800_ffff_tmp172 = simd_or(r800_ffff_tmp170, r800_ffff_tmp171);
          r800_ffff_tmp173 = simd_and(tmp48, tmp16);
          r800_ffff_tmp174 = simd_or(r800_ffff_tmp172, r800_ffff_tmp173);
          r800_ffff_tmp175 = simd_or(r800_ffff_tmp174, r800_ffff_tmp134);
          r800_ffff_tmp176 = simd_or(r800_ffff_tmp175, r800_ffff_tmp17);
          r800_ffff_tmp177 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp68), simd_andc(r800_ffff_tmp162, basis_bits.bit_2));
          r800_ffff_tmp178 = simd_and(tmp43, r800_ffff_tmp177);
          r800_ffff_tmp179 = simd_or(r800_ffff_tmp176, r800_ffff_tmp178);
          cc_range_ff01_ff3c_3 = simd_or(r800_ffff_tmp179, byte_bc);
          carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(81), sequence_ef_bc_adv));
          r800_ffff_tmp180 = simd_and(sequence_ef_bc_adv, cc_range_ff01_ff3c_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp180);
          byte_bd = simd_and(tmp56, r800_ffff_tmp39);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          r800_ffff_tmp181 = simd_or(tmp46, r800_ffff_tmp7);
          cc_range_ff61_ff64_3 = simd_and(r800_ffff_tmp1, r800_ffff_tmp181);
          carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(82), sequence_ef_bd_adv));
          r800_ffff_tmp182 = simd_and(sequence_ef_bd_adv, cc_range_ff61_ff64_3);
          struct_Po.cc = simd_or(struct_Po.cc, r800_ffff_tmp182);
        }
        else {
          carryQ.CarryDequeueEnqueue(23, 60);
        }
        byte_90 = simd_andc(tmp44, tmp28);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(83), tmp76));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp76, byte_range_80_bf);
        carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(84), tmp77));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp77, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(85, 8))) {
          r10000_10fff_tmp1 = simd_and(byte_range_80_bf, tmp38);
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          r10000_10fff_tmp2 = simd_andc(byte_range_80_bf, tmp27);
          r10000_10fff_tmp3 = simd_andc(tmp6, tmp1);
          byte_84 = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp3);
          sequence_f0_90_84 = simd_and(tmp76, byte_84);
          carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(85), sequence_f0_90_adv));
          sequence_f0_90_84 = simd_and(sequence_f0_90_adv, byte_84);
          r10000_10fff_tmp4 = simd_andc(r10000_10fff_tmp2, tmp5);
          byte_range_80_82 = simd_andc(r10000_10fff_tmp4, tmp31);
          carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(86), sequence_f0_90_84_adv));
          r10000_10fff_tmp5 = simd_and(sequence_f0_90_84_adv, byte_range_80_82);
          struct_Po.cc = simd_or(struct_Po.cc, r10000_10fff_tmp5);
          r10000_10fff_tmp6 = simd_and(tmp15, tmp11);
          byte_8e = simd_and(r10000_10fff_tmp2, r10000_10fff_tmp6);
          sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
          sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
          byte_9f = simd_and(r10000_10fff_tmp1, tmp32);
          carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(87), sequence_f0_90_8e_adv));
          r10000_10fff_tmp7 = simd_and(sequence_f0_90_8e_adv, byte_9f);
          struct_Po.cc = simd_or(struct_Po.cc, r10000_10fff_tmp7);
          byte_8f = simd_and(r10000_10fff_tmp2, tmp32);
          sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
          sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
          carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(88), sequence_f0_90_8f_adv));
          r10000_10fff_tmp8 = simd_and(sequence_f0_90_8f_adv, byte_90);
          struct_Po.cc = simd_or(struct_Po.cc, r10000_10fff_tmp8);
          r10000_10fff_tmp9 = simd_and(byte_range_80_bf, tmp3);
          byte_a1 = simd_and(r10000_10fff_tmp9, tmp46);
          sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
          sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
          byte_97 = simd_and(r10000_10fff_tmp1, tmp68);
          carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(89), sequence_f0_90_a1_adv));
          r10000_10fff_tmp10 = simd_and(sequence_f0_90_a1_adv, byte_97);
          struct_Po.cc = simd_or(struct_Po.cc, r10000_10fff_tmp10);
          byte_a4 = simd_and(r10000_10fff_tmp9, r10000_10fff_tmp3);
          sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
          sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
          r10000_10fff_tmp11 = simd_and(byte_range_80_bf, basis_bits.bit_3);
          cc_range_1091f_1093f_4 = simd_and(tmp32, r10000_10fff_tmp11);
          carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(90), sequence_f0_90_a4_adv));
          r10000_10fff_tmp12 = simd_and(sequence_f0_90_a4_adv, cc_range_1091f_1093f_4);
          struct_Po.cc = simd_or(struct_Po.cc, r10000_10fff_tmp12);
          r10000_10fff_tmp13 = simd_and(tmp10, tmp45);
          byte_a9 = simd_and(r10000_10fff_tmp9, r10000_10fff_tmp13);
          sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
          sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
          r10000_10fff_tmp14 = simd_and(basis_bits.bit_4, tmp69);
          r10000_10fff_tmp15 = simd_andc(r10000_10fff_tmp1, r10000_10fff_tmp14);
          r10000_10fff_tmp16 = simd_and(byte_range_80_bf, tmp22);
          r10000_10fff_tmp17 = simd_and(r10000_10fff_tmp16, tmp32);
          cc_range_10a50_10a7f_4 = simd_or(r10000_10fff_tmp15, r10000_10fff_tmp17);
          carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(91), sequence_f0_90_a9_adv));
          r10000_10fff_tmp18 = simd_and(sequence_f0_90_a9_adv, cc_range_10a50_10a7f_4);
          struct_Po.cc = simd_or(struct_Po.cc, r10000_10fff_tmp18);
          byte_ac = simd_and(r10000_10fff_tmp9, tmp16);
          sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
          sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
          r10000_10fff_tmp19 = simd_and(r10000_10fff_tmp16, basis_bits.bit_4);
          byte_range_b9_bf = simd_and(r10000_10fff_tmp19, tmp69);
          carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(92), sequence_f0_90_ac_adv));
          r10000_10fff_tmp20 = simd_and(sequence_f0_90_ac_adv, byte_range_b9_bf);
          struct_Po.cc = simd_or(struct_Po.cc, r10000_10fff_tmp20);
        }
        else {
          carryQ.CarryDequeueEnqueue(85, 8);
        }
  }
  CarryArray<93, 0> carryQ;
  };

  struct Me {
  Me() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Me & struct_Me) {
		BitBlock tmp1, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, byte_d2, r80_7ff_tmp6, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10, byte_range_88_89;
		BitBlock byte_d2_adv, r80_7ff_tmp11, tmp2, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, byte_e2, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock byte_83, r800_ffff_tmp9, sequence_e2_83, byte_e2_adv, r800_ffff_tmp10;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13, r800_ffff_tmp14;
		BitBlock r800_ffff_tmp15, r800_ffff_tmp16, r800_ffff_tmp17, r800_ffff_tmp18;
		BitBlock r800_ffff_tmp19, r800_ffff_tmp20, r800_ffff_tmp21, r800_ffff_tmp22;
		BitBlock r800_ffff_tmp23, cc_range_20dd_20e2_3, sequence_e2_83_adv;
		BitBlock r800_ffff_tmp24, r800_ffff_tmp25, r800_ffff_tmp26, byte_ea;
		BitBlock r800_ffff_tmp27, r800_ffff_tmp28, r800_ffff_tmp29, r800_ffff_tmp30;
		BitBlock byte_99, r800_ffff_tmp31, sequence_ea_99, byte_ea_adv;
		BitBlock r800_ffff_tmp32, r800_ffff_tmp33, r800_ffff_tmp34, byte_range_b0_b2;
		BitBlock sequence_ea_99_adv, r800_ffff_tmp35;




        struct_Me.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
          r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r80_7ff_tmp2 = simd_and(tmp1, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
          byte_d2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
          r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r80_7ff_tmp7 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp8 = simd_andc(r80_7ff_tmp6, r80_7ff_tmp7);
          r80_7ff_tmp9 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp10 = simd_andc(r80_7ff_tmp9, basis_bits.bit_6);
          byte_range_88_89 = simd_and(r80_7ff_tmp8, r80_7ff_tmp10);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(0), byte_d2_adv));
          r80_7ff_tmp11 = simd_and(byte_d2_adv, byte_range_88_89);
          struct_Me.cc = simd_or(struct_Me.cc, r80_7ff_tmp11);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 6))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp3 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp3);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp6 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp8 = simd_andc(r800_ffff_tmp7, r800_ffff_tmp1);
          byte_83 = simd_and(r800_ffff_tmp6, r800_ffff_tmp8);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r800_ffff_tmp9));
          sequence_e2_83 = simd_and(r800_ffff_tmp9, byte_83);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(2), byte_e2_adv));
          sequence_e2_83 = simd_and(byte_e2_adv, byte_83);
          r800_ffff_tmp10 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp11 = simd_or(r800_ffff_tmp1, r800_ffff_tmp10);
          r800_ffff_tmp12 = simd_or(basis_bits.bit_3, r800_ffff_tmp11);
          r800_ffff_tmp13 = simd_not(r800_ffff_tmp12);
          r800_ffff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp15 = simd_and(r800_ffff_tmp14, r800_ffff_tmp10);
          r800_ffff_tmp16 = simd_and(basis_bits.bit_3, r800_ffff_tmp15);
          r800_ffff_tmp17 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp13), simd_andc(r800_ffff_tmp16, basis_bits.bit_2));
          r800_ffff_tmp18 = simd_and(r800_ffff_tmp4, r800_ffff_tmp17);
          r800_ffff_tmp19 = simd_and(r800_ffff_tmp4, tmp2);
          r800_ffff_tmp20 = simd_andc(r800_ffff_tmp19, basis_bits.bit_4);
          r800_ffff_tmp21 = simd_not(r800_ffff_tmp10);
          r800_ffff_tmp22 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp21), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp23 = simd_and(r800_ffff_tmp20, r800_ffff_tmp22);
          cc_range_20dd_20e2_3 = simd_or(r800_ffff_tmp18, r800_ffff_tmp23);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(3), sequence_e2_83_adv));
          r800_ffff_tmp24 = simd_and(sequence_e2_83_adv, cc_range_20dd_20e2_3);
          struct_Me.cc = simd_or(struct_Me.cc, r800_ffff_tmp24);
          r800_ffff_tmp25 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp26 = simd_and(r800_ffff_tmp25, r800_ffff_tmp2);
          byte_ea = simd_and(byte_range_e0_ef, r800_ffff_tmp26);
          r800_ffff_tmp27 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r800_ffff_tmp28 = simd_and(r800_ffff_tmp4, r800_ffff_tmp27);
          r800_ffff_tmp29 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp30 = simd_and(r800_ffff_tmp25, r800_ffff_tmp29);
          byte_99 = simd_and(r800_ffff_tmp28, r800_ffff_tmp30);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(4), r800_ffff_tmp31));
          sequence_ea_99 = simd_and(r800_ffff_tmp31, byte_99);
          carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(5), byte_ea_adv));
          sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
          r800_ffff_tmp32 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp33 = simd_and(r800_ffff_tmp4, r800_ffff_tmp32);
          r800_ffff_tmp34 = simd_andc(r800_ffff_tmp33, r800_ffff_tmp1);
          byte_range_b0_b2 = simd_andc(r800_ffff_tmp34, r800_ffff_tmp7);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(6), sequence_ea_99_adv));
          r800_ffff_tmp35 = simd_and(sequence_ea_99_adv, byte_range_b0_b2);
          struct_Me.cc = simd_or(struct_Me.cc, r800_ffff_tmp35);
        }
        else {
          carryQ.CarryDequeueEnqueue(1, 6);
        }
        carryQ.CarryQ_Adjust(7);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Me & struct_Me, BitBlock EOF_mask) {
		BitBlock tmp1, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, byte_d2, r80_7ff_tmp6, r80_7ff_tmp7;
		BitBlock r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10, byte_range_88_89;
		BitBlock byte_d2_adv, r80_7ff_tmp11, tmp2, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, byte_e2, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock byte_83, r800_ffff_tmp9, sequence_e2_83, byte_e2_adv, r800_ffff_tmp10;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13, r800_ffff_tmp14;
		BitBlock r800_ffff_tmp15, r800_ffff_tmp16, r800_ffff_tmp17, r800_ffff_tmp18;
		BitBlock r800_ffff_tmp19, r800_ffff_tmp20, r800_ffff_tmp21, r800_ffff_tmp22;
		BitBlock r800_ffff_tmp23, cc_range_20dd_20e2_3, sequence_e2_83_adv;
		BitBlock r800_ffff_tmp24, r800_ffff_tmp25, r800_ffff_tmp26, byte_ea;
		BitBlock r800_ffff_tmp27, r800_ffff_tmp28, r800_ffff_tmp29, r800_ffff_tmp30;
		BitBlock byte_99, r800_ffff_tmp31, sequence_ea_99, byte_ea_adv;
		BitBlock r800_ffff_tmp32, r800_ffff_tmp33, r800_ffff_tmp34, byte_range_b0_b2;
		BitBlock sequence_ea_99_adv, r800_ffff_tmp35;




        struct_Me.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
          r80_7ff_tmp1 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r80_7ff_tmp2 = simd_and(tmp1, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
          byte_d2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
          r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r80_7ff_tmp7 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp8 = simd_andc(r80_7ff_tmp6, r80_7ff_tmp7);
          r80_7ff_tmp9 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp10 = simd_andc(r80_7ff_tmp9, basis_bits.bit_6);
          byte_range_88_89 = simd_and(r80_7ff_tmp8, r80_7ff_tmp10);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(0), byte_d2_adv));
          r80_7ff_tmp11 = simd_and(byte_d2_adv, byte_range_88_89);
          struct_Me.cc = simd_or(struct_Me.cc, r80_7ff_tmp11);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 6))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp3 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp3);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp6 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp8 = simd_andc(r800_ffff_tmp7, r800_ffff_tmp1);
          byte_83 = simd_and(r800_ffff_tmp6, r800_ffff_tmp8);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), r800_ffff_tmp9));
          sequence_e2_83 = simd_and(r800_ffff_tmp9, byte_83);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(2), byte_e2_adv));
          sequence_e2_83 = simd_and(byte_e2_adv, byte_83);
          r800_ffff_tmp10 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp11 = simd_or(r800_ffff_tmp1, r800_ffff_tmp10);
          r800_ffff_tmp12 = simd_or(basis_bits.bit_3, r800_ffff_tmp11);
          r800_ffff_tmp13 = simd_not(r800_ffff_tmp12);
          r800_ffff_tmp14 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp15 = simd_and(r800_ffff_tmp14, r800_ffff_tmp10);
          r800_ffff_tmp16 = simd_and(basis_bits.bit_3, r800_ffff_tmp15);
          r800_ffff_tmp17 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp13), simd_andc(r800_ffff_tmp16, basis_bits.bit_2));
          r800_ffff_tmp18 = simd_and(r800_ffff_tmp4, r800_ffff_tmp17);
          r800_ffff_tmp19 = simd_and(r800_ffff_tmp4, tmp2);
          r800_ffff_tmp20 = simd_andc(r800_ffff_tmp19, basis_bits.bit_4);
          r800_ffff_tmp21 = simd_not(r800_ffff_tmp10);
          r800_ffff_tmp22 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp21), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp23 = simd_and(r800_ffff_tmp20, r800_ffff_tmp22);
          cc_range_20dd_20e2_3 = simd_or(r800_ffff_tmp18, r800_ffff_tmp23);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(3), sequence_e2_83_adv));
          r800_ffff_tmp24 = simd_and(sequence_e2_83_adv, cc_range_20dd_20e2_3);
          struct_Me.cc = simd_or(struct_Me.cc, r800_ffff_tmp24);
          r800_ffff_tmp25 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp26 = simd_and(r800_ffff_tmp25, r800_ffff_tmp2);
          byte_ea = simd_and(byte_range_e0_ef, r800_ffff_tmp26);
          r800_ffff_tmp27 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r800_ffff_tmp28 = simd_and(r800_ffff_tmp4, r800_ffff_tmp27);
          r800_ffff_tmp29 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp30 = simd_and(r800_ffff_tmp25, r800_ffff_tmp29);
          byte_99 = simd_and(r800_ffff_tmp28, r800_ffff_tmp30);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(4), r800_ffff_tmp31));
          sequence_ea_99 = simd_and(r800_ffff_tmp31, byte_99);
          carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(5), byte_ea_adv));
          sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
          r800_ffff_tmp32 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp33 = simd_and(r800_ffff_tmp4, r800_ffff_tmp32);
          r800_ffff_tmp34 = simd_andc(r800_ffff_tmp33, r800_ffff_tmp1);
          byte_range_b0_b2 = simd_andc(r800_ffff_tmp34, r800_ffff_tmp7);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(6), sequence_ea_99_adv));
          r800_ffff_tmp35 = simd_and(sequence_ea_99_adv, byte_range_b0_b2);
          struct_Me.cc = simd_or(struct_Me.cc, r800_ffff_tmp35);
        }
        else {
          carryQ.CarryDequeueEnqueue(1, 6);
        }
  }
  CarryArray<7, 0> carryQ;
  };

  struct Mc {
  Mc() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Mc & struct_Mc) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f0, tmp7, tmp8, tmp9, tmp10;
		BitBlock tmp11, byte_91, tmp12, sequence_f0_91, byte_f0_adv, tmp13, tmp14;
		BitBlock byte_80, tmp15, sequence_f0_91_80, sequence_f0_91_adv, tmp16, tmp17;
		BitBlock tmp18, cc_range_11000_11002_4, sequence_f0_91_80_adv, tmp19, byte_82;
		BitBlock sequence_f0_91_82, tmp20, tmp21, tmp22, tmp23, tmp24, tmp25, tmp26;
		BitBlock tmp27, tmp28, tmp29, cc_range_11082_110b7_4, sequence_f0_91_82_adv;
		BitBlock tmp30, tmp31, tmp32, byte_84, sequence_f0_91_84, tmp33, tmp34, tmp35;
		BitBlock tmp36, byte_ac, sequence_f0_91_84_adv, tmp37, tmp38, byte_86;
		BitBlock sequence_f0_91_86, tmp39, tmp40, tmp41, tmp42, tmp43, tmp44, tmp45;
		BitBlock cc_range_11182_111bf_4, sequence_f0_91_86_adv, tmp46, tmp47, byte_87;
		BitBlock sequence_f0_91_87, sequence_f0_91_87_adv, tmp48, tmp49, tmp50;
		BitBlock byte_9a, sequence_f0_91_9a, tmp51, tmp52, tmp53, tmp54;
		BitBlock cc_range_116ac_116b6_4, sequence_f0_91_9a_adv, tmp55, byte_96;
		BitBlock sequence_f0_96, tmp56, byte_bd, tmp57, sequence_f0_96_bd;
		BitBlock sequence_f0_96_adv, tmp58, tmp59, tmp60, tmp61, byte_range_91_be;
		BitBlock sequence_f0_96_bd_adv, tmp62, byte_9d, sequence_f0_9d, tmp63, byte_85;
		BitBlock tmp64, sequence_f0_9d_85, sequence_f0_9d_adv, tmp65, tmp66, tmp67;
		BitBlock tmp68, tmp69, tmp70, tmp71, tmp72, tmp73, tmp74;
		BitBlock cc_range_1d165_1d16d_4, sequence_f0_9d_85_adv, tmp75;
		BitBlock byte_range_e0_ef, byte_e0, byte_a4, r800_ffff_tmp1, sequence_e0_a4;
		BitBlock byte_e0_adv, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock cc_range_903_93e_3, sequence_e0_a4_adv, r800_ffff_tmp9, byte_a5;
		BitBlock sequence_e0_a5, r800_ffff_tmp10, r800_ffff_tmp11, r800_ffff_tmp12;
		BitBlock r800_ffff_tmp13, r800_ffff_tmp14, r800_ffff_tmp15, cc_range_940_94e_3;
		BitBlock sequence_e0_a5_adv, r800_ffff_tmp16, byte_a6, sequence_e0_a6;
		BitBlock r800_ffff_tmp17, r800_ffff_tmp18, cc_range_982_9be_3;
		BitBlock sequence_e0_a6_adv, r800_ffff_tmp19, byte_a7, sequence_e0_a7;
		BitBlock r800_ffff_tmp20, r800_ffff_tmp21, r800_ffff_tmp22, r800_ffff_tmp23;
		BitBlock r800_ffff_tmp24, r800_ffff_tmp25, cc_range_9c0_9d7_3;
		BitBlock sequence_e0_a7_adv, r800_ffff_tmp26, r800_ffff_tmp27, byte_a8;
		BitBlock sequence_e0_a8, cc_range_a03_a3e_3, sequence_e0_a8_adv;
		BitBlock r800_ffff_tmp28, r800_ffff_tmp29, byte_a9, sequence_e0_a9;
		BitBlock sequence_e0_a9_adv, r800_ffff_tmp30, byte_aa, sequence_e0_aa;
		BitBlock cc_range_a83_abe_3, sequence_e0_aa_adv, r800_ffff_tmp31, byte_ab;
		BitBlock sequence_e0_ab, r800_ffff_tmp32, r800_ffff_tmp33, cc_range_ac0_acb_3;
		BitBlock sequence_e0_ab_adv, r800_ffff_tmp34, sequence_e0_ac, r800_ffff_tmp35;
		BitBlock r800_ffff_tmp36, cc_range_b02_b3e_3, sequence_e0_ac_adv;
		BitBlock r800_ffff_tmp37, byte_ad, sequence_e0_ad, cc_range_b40_b57_3;
		BitBlock sequence_e0_ad_adv, r800_ffff_tmp38, byte_ae, sequence_e0_ae;
		BitBlock byte_range_be_bf, sequence_e0_ae_adv, r800_ffff_tmp39, byte_af;
		BitBlock sequence_e0_af, r800_ffff_tmp40, r800_ffff_tmp41, r800_ffff_tmp42;
		BitBlock r800_ffff_tmp43, r800_ffff_tmp44, r800_ffff_tmp45, r800_ffff_tmp46;
		BitBlock r800_ffff_tmp47, r800_ffff_tmp48, cc_range_bc1_bd7_3;
		BitBlock sequence_e0_af_adv, r800_ffff_tmp49, byte_b0, sequence_e0_b0;
		BitBlock byte_range_81_83, sequence_e0_b0_adv, r800_ffff_tmp50, byte_b1;
		BitBlock sequence_e0_b1, r800_ffff_tmp51, byte_range_81_84, sequence_e0_b1_adv;
		BitBlock r800_ffff_tmp52, byte_b2, sequence_e0_b2, cc_range_c82_cbe_3;
		BitBlock sequence_e0_b2_adv, r800_ffff_tmp53, byte_b3, sequence_e0_b3;
		BitBlock r800_ffff_tmp54, r800_ffff_tmp55, r800_ffff_tmp56, r800_ffff_tmp57;
		BitBlock r800_ffff_tmp58, r800_ffff_tmp59, r800_ffff_tmp60, r800_ffff_tmp61;
		BitBlock r800_ffff_tmp62, cc_range_cc0_cd5_3, sequence_e0_b3_adv;
		BitBlock r800_ffff_tmp63, byte_b4, sequence_e0_b4, cc_range_d02_d3e_3;
		BitBlock sequence_e0_b4_adv, r800_ffff_tmp64, byte_b5, sequence_e0_b5;
		BitBlock r800_ffff_tmp65, r800_ffff_tmp66, r800_ffff_tmp67, cc_range_d40_d57_3;
		BitBlock sequence_e0_b5_adv, r800_ffff_tmp68, byte_b6, sequence_e0_b6;
		BitBlock byte_range_82_83, sequence_e0_b6_adv, r800_ffff_tmp69, byte_b7;
		BitBlock sequence_e0_b7, r800_ffff_tmp70, r800_ffff_tmp71, r800_ffff_tmp72;
		BitBlock r800_ffff_tmp73, r800_ffff_tmp74, r800_ffff_tmp75, r800_ffff_tmp76;
		BitBlock r800_ffff_tmp77, cc_range_dcf_df2_3, sequence_e0_b7_adv;
		BitBlock r800_ffff_tmp78, byte_bc, sequence_e0_bc, sequence_e0_bc_adv;
		BitBlock r800_ffff_tmp79, sequence_e0_bd, byte_bf, sequence_e0_bd_adv;
		BitBlock r800_ffff_tmp80, byte_e1, r800_ffff_tmp81, sequence_e1_80;
		BitBlock byte_e1_adv, r800_ffff_tmp82, r800_ffff_tmp83, r800_ffff_tmp84;
		BitBlock r800_ffff_tmp85, r800_ffff_tmp86, r800_ffff_tmp87, r800_ffff_tmp88;
		BitBlock cc_range_102b_103b_3, sequence_e1_80_adv, r800_ffff_tmp89, byte_81;
		BitBlock sequence_e1_81, r800_ffff_tmp90, r800_ffff_tmp91, r800_ffff_tmp92;
		BitBlock r800_ffff_tmp93, r800_ffff_tmp94, r800_ffff_tmp95, r800_ffff_tmp96;
		BitBlock r800_ffff_tmp97, cc_range_1056_1067_3, sequence_e1_81_adv;
		BitBlock r800_ffff_tmp98, sequence_e1_82, r800_ffff_tmp99, r800_ffff_tmp100;
		BitBlock r800_ffff_tmp101, r800_ffff_tmp102, r800_ffff_tmp103;
		BitBlock r800_ffff_tmp104, r800_ffff_tmp105, r800_ffff_tmp106;
		BitBlock cc_range_1083_109a_3, sequence_e1_82_adv, r800_ffff_tmp107, byte_9e;
		BitBlock sequence_e1_9e, r800_ffff_tmp108, cc_range_17b6_17be_3;
		BitBlock sequence_e1_9e_adv, r800_ffff_tmp109, byte_9f, sequence_e1_9f;
		BitBlock r800_ffff_tmp110, cc_range_17c0_17c7_3, sequence_e1_9f_adv;
		BitBlock r800_ffff_tmp111, sequence_e1_a4, r800_ffff_tmp112, r800_ffff_tmp113;
		BitBlock r800_ffff_tmp114, r800_ffff_tmp115, r800_ffff_tmp116;
		BitBlock r800_ffff_tmp117, r800_ffff_tmp118, r800_ffff_tmp119;
		BitBlock r800_ffff_tmp120, r800_ffff_tmp121, r800_ffff_tmp122;
		BitBlock cc_range_1923_1933_3, sequence_e1_a4_adv, r800_ffff_tmp123;
		BitBlock sequence_e1_a6, byte_range_b0_bf, sequence_e1_a6_adv;
		BitBlock r800_ffff_tmp124, sequence_e1_a7, r800_ffff_tmp125, r800_ffff_tmp126;
		BitBlock cc_range_19c0_19c8_3, sequence_e1_a7_adv, r800_ffff_tmp127;
		BitBlock sequence_e1_a8, r800_ffff_tmp128, byte_range_99_9a;
		BitBlock sequence_e1_a8_adv, r800_ffff_tmp129, sequence_e1_a9;
		BitBlock r800_ffff_tmp130, r800_ffff_tmp131, r800_ffff_tmp132;
		BitBlock r800_ffff_tmp133, r800_ffff_tmp134, r800_ffff_tmp135;
		BitBlock cc_range_1a55_1a6d_3, sequence_e1_a9_adv, r800_ffff_tmp136;
		BitBlock sequence_e1_ac, r800_ffff_tmp137, r800_ffff_tmp138, r800_ffff_tmp139;
		BitBlock r800_ffff_tmp140, r800_ffff_tmp141, r800_ffff_tmp142;
		BitBlock cc_range_1b04_1b3d_3, sequence_e1_ac_adv, r800_ffff_tmp143;
		BitBlock sequence_e1_ad, r800_ffff_tmp144, cc_range_1b40_1b43_3;
		BitBlock sequence_e1_ad_adv, r800_ffff_tmp145, sequence_e1_ae;
		BitBlock r800_ffff_tmp146, r800_ffff_tmp147, r800_ffff_tmp148;
		BitBlock r800_ffff_tmp149, r800_ffff_tmp150, r800_ffff_tmp151;
		BitBlock cc_range_1b82_1bac_3, sequence_e1_ae_adv, r800_ffff_tmp152;
		BitBlock sequence_e1_af, r800_ffff_tmp153, r800_ffff_tmp154, r800_ffff_tmp155;
		BitBlock r800_ffff_tmp156, cc_range_1be7_1bf2_3, sequence_e1_af_adv;
		BitBlock r800_ffff_tmp157, sequence_e1_b0, r800_ffff_tmp158, r800_ffff_tmp159;
		BitBlock r800_ffff_tmp160, r800_ffff_tmp161, r800_ffff_tmp162;
		BitBlock cc_range_1c24_1c34_3, sequence_e1_b0_adv, r800_ffff_tmp163;
		BitBlock sequence_e1_b3, cc_range_1ce1_1cf2_3, sequence_e1_b3_adv;
		BitBlock r800_ffff_tmp164, byte_e3, r800_ffff_tmp165, sequence_e3_80;
		BitBlock byte_e3_adv, byte_range_ae_af, sequence_e3_80_adv, r800_ffff_tmp166;
		BitBlock byte_ea, byte_a0, r800_ffff_tmp167, sequence_ea_a0, byte_ea_adv;
		BitBlock cc_range_a823_a827_3, sequence_ea_a0_adv, r800_ffff_tmp168, byte_a2;
		BitBlock sequence_ea_a2, r800_ffff_tmp169, cc_range_a880_a8b4_3;
		BitBlock sequence_ea_a2_adv, r800_ffff_tmp170, byte_a3, sequence_ea_a3;
		BitBlock byte_range_80_83, sequence_ea_a3_adv, r800_ffff_tmp171;
		BitBlock sequence_ea_a5, byte_range_92_93, sequence_ea_a5_adv;
		BitBlock r800_ffff_tmp172, sequence_ea_a6, r800_ffff_tmp173, r800_ffff_tmp174;
		BitBlock r800_ffff_tmp175, cc_range_a983_a9bd_3, sequence_ea_a6_adv;
		BitBlock r800_ffff_tmp176, sequence_ea_a7, sequence_ea_a7_adv;
		BitBlock r800_ffff_tmp177, sequence_ea_a8, r800_ffff_tmp178, r800_ffff_tmp179;
		BitBlock r800_ffff_tmp180, r800_ffff_tmp181, r800_ffff_tmp182;
		BitBlock cc_range_aa2f_aa33_3, sequence_ea_a8_adv, r800_ffff_tmp183;
		BitBlock sequence_ea_a9, r800_ffff_tmp184, cc_range_aa4d_aa7b_3;
		BitBlock sequence_ea_a9_adv, r800_ffff_tmp185, sequence_ea_ab;
		BitBlock r800_ffff_tmp186, r800_ffff_tmp187, cc_range_aaeb_aaf5_3;
		BitBlock sequence_ea_ab_adv, r800_ffff_tmp188, sequence_ea_af;
		BitBlock r800_ffff_tmp189, r800_ffff_tmp190, r800_ffff_tmp191;
		BitBlock cc_range_abe3_abec_3, sequence_ea_af_adv, r800_ffff_tmp192;




        struct_Mc.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_f0 = simd_andc(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp11 = simd_andc(tmp10, tmp4);
        byte_91 = simd_and(tmp9, tmp11);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp12));
        sequence_f0_91 = simd_and(tmp12, byte_91);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
        tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp14 = simd_andc(tmp7, tmp13);
        byte_80 = simd_andc(tmp14, tmp6);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(2), tmp15));
        sequence_f0_91_80 = simd_and(tmp15, byte_80);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(3), sequence_f0_91_adv));
        sequence_f0_91_80 = simd_and(sequence_f0_91_adv, byte_80);
        tmp16 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp17 = simd_andc(tmp16, tmp4);
        tmp18 = simd_andc(tmp6, tmp17);
        cc_range_11000_11002_4 = simd_andc(tmp14, tmp18);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(4), sequence_f0_91_80_adv));
        tmp19 = simd_and(sequence_f0_91_80_adv, cc_range_11000_11002_4);
        struct_Mc.cc = simd_or(struct_Mc.cc, tmp19);
        byte_82 = simd_and(tmp14, tmp17);
        sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
        sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
        tmp20 = simd_and(tmp7, tmp2);
        tmp21 = simd_andc(tmp20, tmp4);
        tmp22 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp23 = simd_andc(tmp21, tmp22);
        tmp24 = simd_or(byte_82, tmp23);
        tmp25 = simd_or(basis_bits.bit_5, tmp5);
        tmp26 = simd_not(tmp25);
        tmp27 = simd_and(basis_bits.bit_5, tmp22);
        tmp28 = simd_or(simd_and(basis_bits.bit_4, tmp26), simd_andc(tmp27, basis_bits.bit_4));
        tmp29 = simd_and(tmp20, tmp28);
        cc_range_11082_110b7_4 = simd_or(tmp24, tmp29);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(5), sequence_f0_91_82_adv));
        tmp30 = simd_and(sequence_f0_91_82_adv, cc_range_11082_110b7_4);
        struct_Mc.cc = simd_or(struct_Mc.cc, tmp30);
        tmp31 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp32 = simd_andc(tmp31, tmp5);
        byte_84 = simd_and(tmp14, tmp32);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        tmp33 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp34 = simd_and(tmp7, tmp33);
        tmp35 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp36 = simd_andc(tmp35, tmp5);
        byte_ac = simd_and(tmp34, tmp36);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(6), sequence_f0_91_84_adv));
        tmp37 = simd_and(sequence_f0_91_84_adv, byte_ac);
        struct_Mc.cc = simd_or(struct_Mc.cc, tmp37);
        tmp38 = simd_and(tmp31, tmp16);
        byte_86 = simd_and(tmp14, tmp38);
        sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
        sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
        tmp39 = simd_andc(tmp20, basis_bits.bit_4);
        tmp40 = simd_not(basis_bits.bit_6);
        tmp41 = simd_or(simd_and(basis_bits.bit_5, tmp40), simd_andc(tmp22, basis_bits.bit_5));
        tmp42 = simd_and(tmp39, tmp41);
        tmp43 = simd_or(byte_82, tmp42);
        tmp44 = simd_and(tmp35, tmp22);
        tmp45 = simd_and(tmp20, tmp44);
        cc_range_11182_111bf_4 = simd_or(tmp43, tmp45);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(7), sequence_f0_91_86_adv));
        tmp46 = simd_and(sequence_f0_91_86_adv, cc_range_11182_111bf_4);
        struct_Mc.cc = simd_or(struct_Mc.cc, tmp46);
        tmp47 = simd_and(tmp31, tmp22);
        byte_87 = simd_and(tmp14, tmp47);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(8), sequence_f0_91_87_adv));
        tmp48 = simd_and(sequence_f0_91_87_adv, byte_80);
        struct_Mc.cc = simd_or(struct_Mc.cc, tmp48);
        tmp49 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp50 = simd_and(tmp49, tmp16);
        byte_9a = simd_and(tmp9, tmp50);
        sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
        sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
        tmp51 = simd_andc(tmp5, basis_bits.bit_6);
        tmp52 = simd_andc(tmp35, tmp51);
        tmp53 = simd_and(tmp34, tmp52);
        tmp54 = simd_and(tmp20, tmp38);
        cc_range_116ac_116b6_4 = simd_or(tmp53, tmp54);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(9), sequence_f0_91_9a_adv));
        tmp55 = simd_and(sequence_f0_91_9a_adv, cc_range_116ac_116b6_4);
        struct_Mc.cc = simd_or(struct_Mc.cc, tmp55);
        byte_96 = simd_and(tmp9, tmp38);
        sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
        sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
        tmp56 = simd_and(tmp35, tmp10);
        byte_bd = simd_and(tmp20, tmp56);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(10), tmp57));
        sequence_f0_96_bd = simd_and(tmp57, byte_bd);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(11), sequence_f0_96_adv));
        sequence_f0_96_bd = simd_and(sequence_f0_96_adv, byte_bd);
        tmp58 = simd_and(basis_bits.bit_3, tmp44);
        tmp59 = simd_not(tmp58);
        tmp60 = simd_and(basis_bits.bit_3, tmp6);
        tmp61 = simd_or(simd_and(basis_bits.bit_2, tmp59), simd_andc(tmp60, basis_bits.bit_2));
        byte_range_91_be = simd_and(tmp7, tmp61);
        carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bd, carryQ.get_carry_in(12), sequence_f0_96_bd_adv));
        tmp62 = simd_and(sequence_f0_96_bd_adv, byte_range_91_be);
        struct_Mc.cc = simd_or(struct_Mc.cc, tmp62);
        byte_9d = simd_and(tmp9, tmp56);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        tmp63 = simd_and(tmp31, tmp10);
        byte_85 = simd_and(tmp14, tmp63);
        carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(13), tmp64));
        sequence_f0_9d_85 = simd_and(tmp64, byte_85);
        carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(14), sequence_f0_9d_adv));
        sequence_f0_9d_85 = simd_and(sequence_f0_9d_adv, byte_85);
        tmp65 = simd_and(tmp34, tmp31);
        tmp66 = simd_not(basis_bits.bit_7);
        tmp67 = simd_or(simd_and(basis_bits.bit_6, tmp66), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
        tmp68 = simd_and(tmp65, tmp67);
        tmp69 = simd_and(tmp7, basis_bits.bit_2);
        tmp70 = simd_or(tmp4, tmp22);
        tmp71 = simd_not(tmp70);
        tmp72 = simd_and(tmp35, tmp5);
        tmp73 = simd_or(simd_and(basis_bits.bit_3, tmp71), simd_andc(tmp72, basis_bits.bit_3));
        tmp74 = simd_and(tmp69, tmp73);
        cc_range_1d165_1d16d_4 = simd_or(tmp68, tmp74);
        carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(15), sequence_f0_9d_85_adv));
        tmp75 = simd_and(sequence_f0_9d_85_adv, cc_range_1d165_1d16d_4);
        struct_Mc.cc = simd_or(struct_Mc.cc, tmp75);
        byte_range_e0_ef = simd_and(tmp1, tmp33);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(16, 57))) {
          byte_e0 = simd_andc(byte_range_e0_ef, tmp6);
          byte_a4 = simd_and(tmp34, tmp32);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(16), r800_ffff_tmp1));
          sequence_e0_a4 = simd_and(r800_ffff_tmp1, byte_a4);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(17), byte_e0_adv));
          sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
          r800_ffff_tmp2 = simd_andc(tmp22, tmp4);
          r800_ffff_tmp3 = simd_and(tmp14, r800_ffff_tmp2);
          r800_ffff_tmp4 = simd_and(tmp49, tmp22);
          r800_ffff_tmp5 = simd_and(tmp20, r800_ffff_tmp4);
          r800_ffff_tmp6 = simd_or(r800_ffff_tmp3, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_and(tmp35, basis_bits.bit_6);
          r800_ffff_tmp8 = simd_and(tmp20, r800_ffff_tmp7);
          cc_range_903_93e_3 = simd_or(r800_ffff_tmp6, r800_ffff_tmp8);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(18), sequence_e0_a4_adv));
          r800_ffff_tmp9 = simd_and(sequence_e0_a4_adv, cc_range_903_93e_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp9);
          byte_a5 = simd_and(tmp34, tmp63);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          r800_ffff_tmp10 = simd_and(tmp14, basis_bits.bit_4);
          r800_ffff_tmp11 = simd_not(tmp5);
          r800_ffff_tmp12 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp11), simd_andc(tmp5, basis_bits.bit_5));
          r800_ffff_tmp13 = simd_and(r800_ffff_tmp10, r800_ffff_tmp12);
          r800_ffff_tmp14 = simd_or(byte_80, r800_ffff_tmp13);
          r800_ffff_tmp15 = simd_and(tmp14, r800_ffff_tmp7);
          cc_range_940_94e_3 = simd_or(r800_ffff_tmp14, r800_ffff_tmp15);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(19), sequence_e0_a5_adv));
          r800_ffff_tmp16 = simd_and(sequence_e0_a5_adv, cc_range_940_94e_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp16);
          byte_a6 = simd_and(tmp34, tmp38);
          sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
          sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
          r800_ffff_tmp17 = simd_andc(basis_bits.bit_6, tmp4);
          r800_ffff_tmp18 = simd_and(tmp14, r800_ffff_tmp17);
          cc_range_982_9be_3 = simd_or(r800_ffff_tmp18, r800_ffff_tmp8);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(20), sequence_e0_a6_adv));
          r800_ffff_tmp19 = simd_and(sequence_e0_a6_adv, cc_range_982_9be_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp19);
          byte_a7 = simd_and(tmp34, tmp47);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          r800_ffff_tmp20 = simd_andc(tmp6, tmp28);
          r800_ffff_tmp21 = simd_andc(tmp14, r800_ffff_tmp20);
          r800_ffff_tmp22 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp11), simd_andc(tmp22, basis_bits.bit_5));
          r800_ffff_tmp23 = simd_and(r800_ffff_tmp10, r800_ffff_tmp22);
          r800_ffff_tmp24 = simd_or(r800_ffff_tmp21, r800_ffff_tmp23);
          r800_ffff_tmp25 = simd_and(tmp9, tmp47);
          cc_range_9c0_9d7_3 = simd_or(r800_ffff_tmp24, r800_ffff_tmp25);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(21), sequence_e0_a7_adv));
          r800_ffff_tmp26 = simd_and(sequence_e0_a7_adv, cc_range_9c0_9d7_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp26);
          r800_ffff_tmp27 = simd_andc(tmp49, tmp5);
          byte_a8 = simd_and(tmp34, r800_ffff_tmp27);
          sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
          sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
          cc_range_a03_a3e_3 = simd_or(r800_ffff_tmp3, r800_ffff_tmp8);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(22), sequence_e0_a8_adv));
          r800_ffff_tmp28 = simd_and(sequence_e0_a8_adv, cc_range_a03_a3e_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp28);
          r800_ffff_tmp29 = simd_and(tmp49, tmp10);
          byte_a9 = simd_and(tmp34, r800_ffff_tmp29);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(23), sequence_e0_a9_adv));
          r800_ffff_tmp30 = simd_and(sequence_e0_a9_adv, byte_80);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp30);
          byte_aa = simd_and(tmp34, tmp50);
          sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
          sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
          cc_range_a83_abe_3 = simd_or(r800_ffff_tmp3, r800_ffff_tmp8);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(24), sequence_e0_aa_adv));
          r800_ffff_tmp31 = simd_and(sequence_e0_aa_adv, cc_range_a83_abe_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp31);
          byte_ab = simd_and(tmp34, r800_ffff_tmp4);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          r800_ffff_tmp32 = simd_andc(tmp6, r800_ffff_tmp29);
          r800_ffff_tmp33 = simd_andc(tmp14, r800_ffff_tmp32);
          cc_range_ac0_acb_3 = simd_or(r800_ffff_tmp33, r800_ffff_tmp23);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(25), sequence_e0_ab_adv));
          r800_ffff_tmp34 = simd_and(sequence_e0_ab_adv, cc_range_ac0_acb_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp34);
          sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
          sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
          r800_ffff_tmp35 = simd_and(tmp35, tmp16);
          r800_ffff_tmp36 = simd_and(tmp20, r800_ffff_tmp35);
          cc_range_b02_b3e_3 = simd_or(r800_ffff_tmp18, r800_ffff_tmp36);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(26), sequence_e0_ac_adv));
          r800_ffff_tmp37 = simd_and(sequence_e0_ac_adv, cc_range_b02_b3e_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp37);
          byte_ad = simd_and(tmp34, tmp56);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          cc_range_b40_b57_3 = simd_or(r800_ffff_tmp24, r800_ffff_tmp25);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(27), sequence_e0_ad_adv));
          r800_ffff_tmp38 = simd_and(sequence_e0_ad_adv, cc_range_b40_b57_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp38);
          byte_ae = simd_and(tmp34, r800_ffff_tmp35);
          sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
          sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
          byte_range_be_bf = simd_and(tmp20, r800_ffff_tmp7);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(28), sequence_e0_ae_adv));
          r800_ffff_tmp39 = simd_and(sequence_e0_ae_adv, byte_range_be_bf);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp39);
          byte_af = simd_and(tmp34, tmp44);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          r800_ffff_tmp40 = simd_andc(tmp14, tmp4);
          r800_ffff_tmp41 = simd_and(r800_ffff_tmp40, tmp67);
          r800_ffff_tmp42 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp43 = simd_or(simd_and(basis_bits.bit_4, tmp26), simd_andc(r800_ffff_tmp42, basis_bits.bit_4));
          r800_ffff_tmp44 = simd_and(tmp14, r800_ffff_tmp43);
          r800_ffff_tmp45 = simd_or(r800_ffff_tmp41, r800_ffff_tmp44);
          r800_ffff_tmp46 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp11), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp47 = simd_and(r800_ffff_tmp10, r800_ffff_tmp46);
          r800_ffff_tmp48 = simd_or(r800_ffff_tmp45, r800_ffff_tmp47);
          cc_range_bc1_bd7_3 = simd_or(r800_ffff_tmp48, r800_ffff_tmp25);
          carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(29), sequence_e0_af_adv));
          r800_ffff_tmp49 = simd_and(sequence_e0_af_adv, cc_range_bc1_bd7_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp49);
          byte_b0 = simd_andc(tmp20, tmp6);
          sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
          sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
          byte_range_81_83 = simd_and(r800_ffff_tmp40, tmp5);
          carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(30), sequence_e0_b0_adv));
          r800_ffff_tmp50 = simd_and(sequence_e0_b0_adv, byte_range_81_83);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp50);
          byte_b1 = simd_and(tmp20, tmp11);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          r800_ffff_tmp51 = simd_andc(tmp14, basis_bits.bit_4);
          byte_range_81_84 = simd_and(r800_ffff_tmp51, r800_ffff_tmp12);
          carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(31), sequence_e0_b1_adv));
          r800_ffff_tmp52 = simd_and(sequence_e0_b1_adv, byte_range_81_84);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp52);
          byte_b2 = simd_and(tmp20, tmp17);
          sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
          sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
          cc_range_c82_cbe_3 = simd_or(r800_ffff_tmp18, r800_ffff_tmp36);
          carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(32), sequence_e0_b2_adv));
          r800_ffff_tmp53 = simd_and(sequence_e0_b2_adv, cc_range_c82_cbe_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp53);
          byte_b3 = simd_and(tmp20, r800_ffff_tmp2);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          r800_ffff_tmp54 = simd_and(basis_bits.bit_5, tmp5);
          r800_ffff_tmp55 = simd_andc(r800_ffff_tmp51, r800_ffff_tmp54);
          r800_ffff_tmp56 = simd_and(tmp14, tmp28);
          r800_ffff_tmp57 = simd_or(r800_ffff_tmp55, r800_ffff_tmp56);
          r800_ffff_tmp58 = simd_and(tmp49, basis_bits.bit_6);
          r800_ffff_tmp59 = simd_and(tmp14, r800_ffff_tmp58);
          r800_ffff_tmp60 = simd_or(r800_ffff_tmp57, r800_ffff_tmp59);
          r800_ffff_tmp61 = simd_and(tmp9, tmp31);
          r800_ffff_tmp62 = simd_and(r800_ffff_tmp61, tmp67);
          cc_range_cc0_cd5_3 = simd_or(r800_ffff_tmp60, r800_ffff_tmp62);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(33), sequence_e0_b3_adv));
          r800_ffff_tmp63 = simd_and(sequence_e0_b3_adv, cc_range_cc0_cd5_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp63);
          byte_b4 = simd_and(tmp20, tmp32);
          sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
          sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
          cc_range_d02_d3e_3 = simd_or(r800_ffff_tmp18, byte_range_be_bf);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(34), sequence_e0_b4_adv));
          r800_ffff_tmp64 = simd_and(sequence_e0_b4_adv, cc_range_d02_d3e_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp64);
          byte_b5 = simd_and(tmp20, tmp63);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          r800_ffff_tmp65 = simd_andc(tmp6, r800_ffff_tmp43);
          r800_ffff_tmp66 = simd_andc(tmp14, r800_ffff_tmp65);
          r800_ffff_tmp67 = simd_or(r800_ffff_tmp66, r800_ffff_tmp47);
          cc_range_d40_d57_3 = simd_or(r800_ffff_tmp67, r800_ffff_tmp25);
          carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(35), sequence_e0_b5_adv));
          r800_ffff_tmp68 = simd_and(sequence_e0_b5_adv, cc_range_d40_d57_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp68);
          byte_b6 = simd_and(tmp20, tmp38);
          sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
          sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
          byte_range_82_83 = simd_and(tmp14, r800_ffff_tmp17);
          carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(36), sequence_e0_b6_adv));
          r800_ffff_tmp69 = simd_and(sequence_e0_b6_adv, byte_range_82_83);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp69);
          byte_b7 = simd_and(tmp20, tmp47);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          r800_ffff_tmp70 = simd_andc(tmp7, basis_bits.bit_2);
          r800_ffff_tmp71 = simd_or(tmp4, basis_bits.bit_6);
          r800_ffff_tmp72 = simd_not(r800_ffff_tmp71);
          r800_ffff_tmp73 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp72), simd_andc(tmp44, basis_bits.bit_3));
          r800_ffff_tmp74 = simd_and(r800_ffff_tmp70, r800_ffff_tmp73);
          r800_ffff_tmp75 = simd_and(tmp9, basis_bits.bit_4);
          r800_ffff_tmp76 = simd_or(r800_ffff_tmp74, r800_ffff_tmp75);
          r800_ffff_tmp77 = simd_and(tmp20, r800_ffff_tmp17);
          cc_range_dcf_df2_3 = simd_or(r800_ffff_tmp76, r800_ffff_tmp77);
          carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(37), sequence_e0_b7_adv));
          r800_ffff_tmp78 = simd_and(sequence_e0_b7_adv, cc_range_dcf_df2_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp78);
          byte_bc = simd_and(tmp20, tmp36);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(38), sequence_e0_bc_adv));
          r800_ffff_tmp79 = simd_and(sequence_e0_bc_adv, byte_range_be_bf);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp79);
          sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
          sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
          byte_bf = simd_and(tmp20, tmp44);
          carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(39), sequence_e0_bd_adv));
          r800_ffff_tmp80 = simd_and(sequence_e0_bd_adv, byte_bf);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp80);
          byte_e1 = simd_and(byte_range_e0_ef, tmp11);
          carryQ.cq[40] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(40), r800_ffff_tmp81));
          sequence_e1_80 = simd_and(r800_ffff_tmp81, byte_80);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(41), byte_e1_adv));
          sequence_e1_80 = simd_and(byte_e1_adv, byte_80);
          r800_ffff_tmp82 = simd_and(tmp34, basis_bits.bit_4);
          r800_ffff_tmp83 = simd_and(r800_ffff_tmp82, r800_ffff_tmp22);
          r800_ffff_tmp84 = simd_or(r800_ffff_tmp83, byte_b1);
          r800_ffff_tmp85 = simd_and(tmp20, r800_ffff_tmp27);
          r800_ffff_tmp86 = simd_or(r800_ffff_tmp84, r800_ffff_tmp85);
          r800_ffff_tmp87 = simd_and(tmp20, basis_bits.bit_4);
          r800_ffff_tmp88 = simd_and(r800_ffff_tmp87, r800_ffff_tmp22);
          cc_range_102b_103b_3 = simd_or(r800_ffff_tmp86, r800_ffff_tmp88);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(42), sequence_e1_80_adv));
          r800_ffff_tmp89 = simd_and(sequence_e1_80_adv, cc_range_102b_103b_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp89);
          byte_81 = simd_and(tmp14, tmp11);
          sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
          sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
          r800_ffff_tmp90 = simd_and(tmp31, basis_bits.bit_6);
          r800_ffff_tmp91 = simd_and(tmp9, r800_ffff_tmp90);
          r800_ffff_tmp92 = simd_andc(tmp34, basis_bits.bit_4);
          r800_ffff_tmp93 = simd_and(r800_ffff_tmp92, r800_ffff_tmp46);
          r800_ffff_tmp94 = simd_or(r800_ffff_tmp91, r800_ffff_tmp93);
          r800_ffff_tmp95 = simd_not(r800_ffff_tmp42);
          r800_ffff_tmp96 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp95), simd_andc(tmp27, basis_bits.bit_4));
          r800_ffff_tmp97 = simd_and(tmp34, r800_ffff_tmp96);
          cc_range_1056_1067_3 = simd_or(r800_ffff_tmp94, r800_ffff_tmp97);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(43), sequence_e1_81_adv));
          r800_ffff_tmp98 = simd_and(sequence_e1_81_adv, cc_range_1056_1067_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp98);
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          r800_ffff_tmp99 = simd_and(r800_ffff_tmp51, r800_ffff_tmp22);
          r800_ffff_tmp100 = simd_not(r800_ffff_tmp54);
          r800_ffff_tmp101 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp100), simd_andc(tmp27, basis_bits.bit_4));
          r800_ffff_tmp102 = simd_and(tmp14, r800_ffff_tmp101);
          r800_ffff_tmp103 = simd_or(r800_ffff_tmp99, r800_ffff_tmp102);
          r800_ffff_tmp104 = simd_and(tmp14, tmp44);
          r800_ffff_tmp105 = simd_or(r800_ffff_tmp103, r800_ffff_tmp104);
          r800_ffff_tmp106 = simd_and(r800_ffff_tmp75, r800_ffff_tmp46);
          cc_range_1083_109a_3 = simd_or(r800_ffff_tmp105, r800_ffff_tmp106);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(44), sequence_e1_82_adv));
          r800_ffff_tmp107 = simd_and(sequence_e1_82_adv, cc_range_1083_109a_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp107);
          byte_9e = simd_and(tmp9, r800_ffff_tmp35);
          sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
          sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
          r800_ffff_tmp108 = simd_or(tmp38, r800_ffff_tmp7);
          cc_range_17b6_17be_3 = simd_and(tmp20, r800_ffff_tmp108);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(45), sequence_e1_9e_adv));
          r800_ffff_tmp109 = simd_and(sequence_e1_9e_adv, cc_range_17b6_17be_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp109);
          byte_9f = simd_and(tmp9, tmp44);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          r800_ffff_tmp110 = simd_andc(r800_ffff_tmp51, r800_ffff_tmp42);
          cc_range_17c0_17c7_3 = simd_or(r800_ffff_tmp110, r800_ffff_tmp56);
          carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(46), sequence_e1_9f_adv));
          r800_ffff_tmp111 = simd_and(sequence_e1_9f_adv, cc_range_17c0_17c7_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp111);
          sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
          sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
          r800_ffff_tmp112 = simd_not(tmp22);
          r800_ffff_tmp113 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp112), simd_andc(tmp22, basis_bits.bit_5));
          r800_ffff_tmp114 = simd_and(r800_ffff_tmp92, r800_ffff_tmp113);
          r800_ffff_tmp115 = simd_and(tmp34, tmp49);
          r800_ffff_tmp116 = simd_and(r800_ffff_tmp115, tmp5);
          r800_ffff_tmp117 = simd_or(r800_ffff_tmp114, r800_ffff_tmp116);
          r800_ffff_tmp118 = simd_andc(tmp20, r800_ffff_tmp71);
          r800_ffff_tmp119 = simd_or(r800_ffff_tmp117, r800_ffff_tmp118);
          r800_ffff_tmp120 = simd_or(basis_bits.bit_5, tmp22);
          r800_ffff_tmp121 = simd_or(simd_and(basis_bits.bit_4, tmp26), simd_andc(r800_ffff_tmp120, basis_bits.bit_4));
          r800_ffff_tmp122 = simd_and(tmp20, r800_ffff_tmp121);
          cc_range_1923_1933_3 = simd_or(r800_ffff_tmp119, r800_ffff_tmp122);
          carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(47), sequence_e1_a4_adv));
          r800_ffff_tmp123 = simd_and(sequence_e1_a4_adv, cc_range_1923_1933_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp123);
          sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
          sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
          byte_range_b0_bf = simd_and(tmp7, tmp2);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(48), sequence_e1_a6_adv));
          r800_ffff_tmp124 = simd_and(sequence_e1_a6_adv, byte_range_b0_bf);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp124);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          r800_ffff_tmp125 = simd_andc(tmp49, basis_bits.bit_6);
          r800_ffff_tmp126 = simd_andc(tmp6, r800_ffff_tmp125);
          cc_range_19c0_19c8_3 = simd_andc(tmp14, r800_ffff_tmp126);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(49), sequence_e1_a7_adv));
          r800_ffff_tmp127 = simd_and(sequence_e1_a7_adv, cc_range_19c0_19c8_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp127);
          sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
          sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
          r800_ffff_tmp128 = simd_and(tmp9, tmp49);
          byte_range_99_9a = simd_and(r800_ffff_tmp128, tmp67);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(50), sequence_e1_a8_adv));
          r800_ffff_tmp129 = simd_and(sequence_e1_a8_adv, byte_range_99_9a);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp129);
          sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
          sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
          r800_ffff_tmp130 = simd_and(tmp31, basis_bits.bit_7);
          r800_ffff_tmp131 = simd_and(tmp9, r800_ffff_tmp130);
          r800_ffff_tmp132 = simd_and(tmp34, tmp11);
          r800_ffff_tmp133 = simd_or(r800_ffff_tmp131, r800_ffff_tmp132);
          r800_ffff_tmp134 = simd_and(r800_ffff_tmp92, r800_ffff_tmp22);
          r800_ffff_tmp135 = simd_or(r800_ffff_tmp133, r800_ffff_tmp134);
          cc_range_1a55_1a6d_3 = simd_or(r800_ffff_tmp135, tmp74);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(51), sequence_e1_a9_adv));
          r800_ffff_tmp136 = simd_and(sequence_e1_a9_adv, cc_range_1a55_1a6d_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp136);
          sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
          sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
          r800_ffff_tmp137 = simd_and(byte_range_b0_bf, tmp63);
          r800_ffff_tmp138 = simd_or(byte_84, r800_ffff_tmp137);
          r800_ffff_tmp139 = simd_and(byte_range_b0_bf, r800_ffff_tmp4);
          r800_ffff_tmp140 = simd_or(r800_ffff_tmp138, r800_ffff_tmp139);
          r800_ffff_tmp141 = simd_and(byte_range_b0_bf, tmp35);
          r800_ffff_tmp142 = simd_and(r800_ffff_tmp141, tmp5);
          cc_range_1b04_1b3d_3 = simd_or(r800_ffff_tmp140, r800_ffff_tmp142);
          carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(52), sequence_e1_ac_adv));
          r800_ffff_tmp143 = simd_and(sequence_e1_ac_adv, cc_range_1b04_1b3d_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp143);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          r800_ffff_tmp144 = simd_andc(tmp14, r800_ffff_tmp71);
          cc_range_1b40_1b43_3 = simd_or(r800_ffff_tmp144, r800_ffff_tmp99);
          carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(53), sequence_e1_ad_adv));
          r800_ffff_tmp145 = simd_and(sequence_e1_ad_adv, cc_range_1b40_1b43_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp145);
          sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
          sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
          r800_ffff_tmp146 = simd_or(byte_82, r800_ffff_tmp132);
          r800_ffff_tmp147 = simd_and(tmp34, r800_ffff_tmp90);
          r800_ffff_tmp148 = simd_or(r800_ffff_tmp146, r800_ffff_tmp147);
          r800_ffff_tmp149 = simd_or(r800_ffff_tmp148, byte_aa);
          r800_ffff_tmp150 = simd_andc(tmp35, basis_bits.bit_6);
          r800_ffff_tmp151 = simd_and(tmp34, r800_ffff_tmp150);
          cc_range_1b82_1bac_3 = simd_or(r800_ffff_tmp149, r800_ffff_tmp151);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(54), sequence_e1_ae_adv));
          r800_ffff_tmp152 = simd_and(sequence_e1_ae_adv, cc_range_1b82_1bac_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp152);
          sequence_e1_af = simd_and(byte_e1_adv, byte_af);
          sequence_e1_af = simd_and(byte_e1_adv, byte_af);
          r800_ffff_tmp153 = simd_and(r800_ffff_tmp82, r800_ffff_tmp46);
          r800_ffff_tmp154 = simd_or(byte_a7, r800_ffff_tmp153);
          r800_ffff_tmp155 = simd_or(r800_ffff_tmp154, byte_ae);
          r800_ffff_tmp156 = simd_and(byte_range_b0_bf, r800_ffff_tmp17);
          cc_range_1be7_1bf2_3 = simd_or(r800_ffff_tmp155, r800_ffff_tmp156);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(55), sequence_e1_af_adv));
          r800_ffff_tmp157 = simd_and(sequence_e1_af_adv, cc_range_1be7_1bf2_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp157);
          sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
          sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
          r800_ffff_tmp158 = simd_not(basis_bits.bit_5);
          r800_ffff_tmp159 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp158), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          r800_ffff_tmp160 = simd_and(tmp34, r800_ffff_tmp159);
          r800_ffff_tmp161 = simd_andc(tmp31, basis_bits.bit_6);
          r800_ffff_tmp162 = simd_and(byte_range_b0_bf, r800_ffff_tmp161);
          cc_range_1c24_1c34_3 = simd_or(r800_ffff_tmp160, r800_ffff_tmp162);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(56), sequence_e1_b0_adv));
          r800_ffff_tmp163 = simd_and(sequence_e1_b0_adv, cc_range_1c24_1c34_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp163);
          sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
          sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
          cc_range_1ce1_1cf2_3 = simd_or(r800_ffff_tmp132, r800_ffff_tmp156);
          carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(57), sequence_e1_b3_adv));
          r800_ffff_tmp164 = simd_and(sequence_e1_b3_adv, cc_range_1ce1_1cf2_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp164);
          byte_e3 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
          carryQ.cq[58] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(58), r800_ffff_tmp165));
          sequence_e3_80 = simd_and(r800_ffff_tmp165, byte_80);
          carryQ.cq[59] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(59), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          byte_range_ae_af = simd_and(tmp34, r800_ffff_tmp7);
          carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(60), sequence_e3_80_adv));
          r800_ffff_tmp166 = simd_and(sequence_e3_80_adv, byte_range_ae_af);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp166);
          byte_ea = simd_and(byte_range_e0_ef, tmp50);
          byte_a0 = simd_andc(tmp34, tmp6);
          carryQ.cq[61] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(61), r800_ffff_tmp167));
          sequence_ea_a0 = simd_and(r800_ffff_tmp167, byte_a0);
          carryQ.cq[62] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(62), byte_ea_adv));
          sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
          cc_range_a823_a827_3 = simd_or(r800_ffff_tmp134, byte_a7);
          carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(63), sequence_ea_a0_adv));
          r800_ffff_tmp168 = simd_and(sequence_ea_a0_adv, cc_range_a823_a827_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp168);
          byte_a2 = simd_and(tmp34, tmp17);
          sequence_ea_a2 = simd_and(byte_ea_adv, byte_a2);
          sequence_ea_a2 = simd_and(byte_ea_adv, byte_a2);
          r800_ffff_tmp169 = simd_and(byte_range_b0_bf, tmp4);
          cc_range_a880_a8b4_3 = simd_or(r800_ffff_tmp144, r800_ffff_tmp169);
          carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_ea_a2, carryQ.get_carry_in(64), sequence_ea_a2_adv));
          r800_ffff_tmp170 = simd_and(sequence_ea_a2_adv, cc_range_a880_a8b4_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp170);
          byte_a3 = simd_and(tmp34, r800_ffff_tmp2);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          byte_range_80_83 = simd_andc(tmp14, tmp4);
          carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(65), sequence_ea_a3_adv));
          r800_ffff_tmp171 = simd_and(sequence_ea_a3_adv, byte_range_80_83);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp171);
          sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
          sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
          byte_range_92_93 = simd_and(tmp9, r800_ffff_tmp17);
          carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(66), sequence_ea_a5_adv));
          r800_ffff_tmp172 = simd_and(sequence_ea_a5_adv, byte_range_92_93);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp172);
          sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
          sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
          r800_ffff_tmp173 = simd_or(r800_ffff_tmp3, r800_ffff_tmp162);
          r800_ffff_tmp174 = simd_and(byte_range_b0_bf, r800_ffff_tmp58);
          r800_ffff_tmp175 = simd_or(r800_ffff_tmp173, r800_ffff_tmp174);
          cc_range_a983_a9bd_3 = simd_or(r800_ffff_tmp175, r800_ffff_tmp142);
          carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(67), sequence_ea_a6_adv));
          r800_ffff_tmp176 = simd_and(sequence_ea_a6_adv, cc_range_a983_a9bd_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp176);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(68), sequence_ea_a7_adv));
          r800_ffff_tmp177 = simd_and(sequence_ea_a7_adv, byte_80);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp177);
          sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
          sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
          r800_ffff_tmp178 = simd_not(tmp6);
          r800_ffff_tmp179 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp178), simd_andc(tmp44, basis_bits.bit_3));
          r800_ffff_tmp180 = simd_and(tmp69, r800_ffff_tmp179);
          r800_ffff_tmp181 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
          r800_ffff_tmp182 = simd_and(r800_ffff_tmp181, r800_ffff_tmp22);
          cc_range_aa2f_aa33_3 = simd_or(r800_ffff_tmp180, r800_ffff_tmp182);
          carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(69), sequence_ea_a8_adv));
          r800_ffff_tmp183 = simd_and(sequence_ea_a8_adv, cc_range_aa2f_aa33_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp183);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          r800_ffff_tmp184 = simd_and(tmp14, tmp56);
          cc_range_aa4d_aa7b_3 = simd_or(r800_ffff_tmp184, r800_ffff_tmp139);
          carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(70), sequence_ea_a9_adv));
          r800_ffff_tmp185 = simd_and(sequence_ea_a9_adv, cc_range_aa4d_aa7b_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp185);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          r800_ffff_tmp186 = simd_or(r800_ffff_tmp4, r800_ffff_tmp7);
          r800_ffff_tmp187 = simd_and(tmp34, r800_ffff_tmp186);
          cc_range_aaeb_aaf5_3 = simd_or(r800_ffff_tmp187, r800_ffff_tmp137);
          carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(71), sequence_ea_ab_adv));
          r800_ffff_tmp188 = simd_and(sequence_ea_ab_adv, cc_range_aaeb_aaf5_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp188);
          sequence_ea_af = simd_and(byte_ea_adv, byte_af);
          sequence_ea_af = simd_and(byte_ea_adv, byte_af);
          r800_ffff_tmp189 = simd_or(r800_ffff_tmp134, r800_ffff_tmp147);
          r800_ffff_tmp190 = simd_and(r800_ffff_tmp115, tmp67);
          r800_ffff_tmp191 = simd_or(r800_ffff_tmp189, r800_ffff_tmp190);
          cc_range_abe3_abec_3 = simd_or(r800_ffff_tmp191, byte_ac);
          carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(72), sequence_ea_af_adv));
          r800_ffff_tmp192 = simd_and(sequence_ea_af_adv, cc_range_abe3_abec_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp192);
        }
        else {
          carryQ.CarryDequeueEnqueue(16, 57);
        }
        carryQ.CarryQ_Adjust(73);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Mc & struct_Mc, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f0, tmp7, tmp8, tmp9, tmp10;
		BitBlock tmp11, byte_91, tmp12, sequence_f0_91, byte_f0_adv, tmp13, tmp14;
		BitBlock byte_80, tmp15, sequence_f0_91_80, sequence_f0_91_adv, tmp16, tmp17;
		BitBlock tmp18, cc_range_11000_11002_4, sequence_f0_91_80_adv, tmp19, byte_82;
		BitBlock sequence_f0_91_82, tmp20, tmp21, tmp22, tmp23, tmp24, tmp25, tmp26;
		BitBlock tmp27, tmp28, tmp29, cc_range_11082_110b7_4, sequence_f0_91_82_adv;
		BitBlock tmp30, tmp31, tmp32, byte_84, sequence_f0_91_84, tmp33, tmp34, tmp35;
		BitBlock tmp36, byte_ac, sequence_f0_91_84_adv, tmp37, tmp38, byte_86;
		BitBlock sequence_f0_91_86, tmp39, tmp40, tmp41, tmp42, tmp43, tmp44, tmp45;
		BitBlock cc_range_11182_111bf_4, sequence_f0_91_86_adv, tmp46, tmp47, byte_87;
		BitBlock sequence_f0_91_87, sequence_f0_91_87_adv, tmp48, tmp49, tmp50;
		BitBlock byte_9a, sequence_f0_91_9a, tmp51, tmp52, tmp53, tmp54;
		BitBlock cc_range_116ac_116b6_4, sequence_f0_91_9a_adv, tmp55, byte_96;
		BitBlock sequence_f0_96, tmp56, byte_bd, tmp57, sequence_f0_96_bd;
		BitBlock sequence_f0_96_adv, tmp58, tmp59, tmp60, tmp61, byte_range_91_be;
		BitBlock sequence_f0_96_bd_adv, tmp62, byte_9d, sequence_f0_9d, tmp63, byte_85;
		BitBlock tmp64, sequence_f0_9d_85, sequence_f0_9d_adv, tmp65, tmp66, tmp67;
		BitBlock tmp68, tmp69, tmp70, tmp71, tmp72, tmp73, tmp74;
		BitBlock cc_range_1d165_1d16d_4, sequence_f0_9d_85_adv, tmp75;
		BitBlock byte_range_e0_ef, byte_e0, byte_a4, r800_ffff_tmp1, sequence_e0_a4;
		BitBlock byte_e0_adv, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock cc_range_903_93e_3, sequence_e0_a4_adv, r800_ffff_tmp9, byte_a5;
		BitBlock sequence_e0_a5, r800_ffff_tmp10, r800_ffff_tmp11, r800_ffff_tmp12;
		BitBlock r800_ffff_tmp13, r800_ffff_tmp14, r800_ffff_tmp15, cc_range_940_94e_3;
		BitBlock sequence_e0_a5_adv, r800_ffff_tmp16, byte_a6, sequence_e0_a6;
		BitBlock r800_ffff_tmp17, r800_ffff_tmp18, cc_range_982_9be_3;
		BitBlock sequence_e0_a6_adv, r800_ffff_tmp19, byte_a7, sequence_e0_a7;
		BitBlock r800_ffff_tmp20, r800_ffff_tmp21, r800_ffff_tmp22, r800_ffff_tmp23;
		BitBlock r800_ffff_tmp24, r800_ffff_tmp25, cc_range_9c0_9d7_3;
		BitBlock sequence_e0_a7_adv, r800_ffff_tmp26, r800_ffff_tmp27, byte_a8;
		BitBlock sequence_e0_a8, cc_range_a03_a3e_3, sequence_e0_a8_adv;
		BitBlock r800_ffff_tmp28, r800_ffff_tmp29, byte_a9, sequence_e0_a9;
		BitBlock sequence_e0_a9_adv, r800_ffff_tmp30, byte_aa, sequence_e0_aa;
		BitBlock cc_range_a83_abe_3, sequence_e0_aa_adv, r800_ffff_tmp31, byte_ab;
		BitBlock sequence_e0_ab, r800_ffff_tmp32, r800_ffff_tmp33, cc_range_ac0_acb_3;
		BitBlock sequence_e0_ab_adv, r800_ffff_tmp34, sequence_e0_ac, r800_ffff_tmp35;
		BitBlock r800_ffff_tmp36, cc_range_b02_b3e_3, sequence_e0_ac_adv;
		BitBlock r800_ffff_tmp37, byte_ad, sequence_e0_ad, cc_range_b40_b57_3;
		BitBlock sequence_e0_ad_adv, r800_ffff_tmp38, byte_ae, sequence_e0_ae;
		BitBlock byte_range_be_bf, sequence_e0_ae_adv, r800_ffff_tmp39, byte_af;
		BitBlock sequence_e0_af, r800_ffff_tmp40, r800_ffff_tmp41, r800_ffff_tmp42;
		BitBlock r800_ffff_tmp43, r800_ffff_tmp44, r800_ffff_tmp45, r800_ffff_tmp46;
		BitBlock r800_ffff_tmp47, r800_ffff_tmp48, cc_range_bc1_bd7_3;
		BitBlock sequence_e0_af_adv, r800_ffff_tmp49, byte_b0, sequence_e0_b0;
		BitBlock byte_range_81_83, sequence_e0_b0_adv, r800_ffff_tmp50, byte_b1;
		BitBlock sequence_e0_b1, r800_ffff_tmp51, byte_range_81_84, sequence_e0_b1_adv;
		BitBlock r800_ffff_tmp52, byte_b2, sequence_e0_b2, cc_range_c82_cbe_3;
		BitBlock sequence_e0_b2_adv, r800_ffff_tmp53, byte_b3, sequence_e0_b3;
		BitBlock r800_ffff_tmp54, r800_ffff_tmp55, r800_ffff_tmp56, r800_ffff_tmp57;
		BitBlock r800_ffff_tmp58, r800_ffff_tmp59, r800_ffff_tmp60, r800_ffff_tmp61;
		BitBlock r800_ffff_tmp62, cc_range_cc0_cd5_3, sequence_e0_b3_adv;
		BitBlock r800_ffff_tmp63, byte_b4, sequence_e0_b4, cc_range_d02_d3e_3;
		BitBlock sequence_e0_b4_adv, r800_ffff_tmp64, byte_b5, sequence_e0_b5;
		BitBlock r800_ffff_tmp65, r800_ffff_tmp66, r800_ffff_tmp67, cc_range_d40_d57_3;
		BitBlock sequence_e0_b5_adv, r800_ffff_tmp68, byte_b6, sequence_e0_b6;
		BitBlock byte_range_82_83, sequence_e0_b6_adv, r800_ffff_tmp69, byte_b7;
		BitBlock sequence_e0_b7, r800_ffff_tmp70, r800_ffff_tmp71, r800_ffff_tmp72;
		BitBlock r800_ffff_tmp73, r800_ffff_tmp74, r800_ffff_tmp75, r800_ffff_tmp76;
		BitBlock r800_ffff_tmp77, cc_range_dcf_df2_3, sequence_e0_b7_adv;
		BitBlock r800_ffff_tmp78, byte_bc, sequence_e0_bc, sequence_e0_bc_adv;
		BitBlock r800_ffff_tmp79, sequence_e0_bd, byte_bf, sequence_e0_bd_adv;
		BitBlock r800_ffff_tmp80, byte_e1, r800_ffff_tmp81, sequence_e1_80;
		BitBlock byte_e1_adv, r800_ffff_tmp82, r800_ffff_tmp83, r800_ffff_tmp84;
		BitBlock r800_ffff_tmp85, r800_ffff_tmp86, r800_ffff_tmp87, r800_ffff_tmp88;
		BitBlock cc_range_102b_103b_3, sequence_e1_80_adv, r800_ffff_tmp89, byte_81;
		BitBlock sequence_e1_81, r800_ffff_tmp90, r800_ffff_tmp91, r800_ffff_tmp92;
		BitBlock r800_ffff_tmp93, r800_ffff_tmp94, r800_ffff_tmp95, r800_ffff_tmp96;
		BitBlock r800_ffff_tmp97, cc_range_1056_1067_3, sequence_e1_81_adv;
		BitBlock r800_ffff_tmp98, sequence_e1_82, r800_ffff_tmp99, r800_ffff_tmp100;
		BitBlock r800_ffff_tmp101, r800_ffff_tmp102, r800_ffff_tmp103;
		BitBlock r800_ffff_tmp104, r800_ffff_tmp105, r800_ffff_tmp106;
		BitBlock cc_range_1083_109a_3, sequence_e1_82_adv, r800_ffff_tmp107, byte_9e;
		BitBlock sequence_e1_9e, r800_ffff_tmp108, cc_range_17b6_17be_3;
		BitBlock sequence_e1_9e_adv, r800_ffff_tmp109, byte_9f, sequence_e1_9f;
		BitBlock r800_ffff_tmp110, cc_range_17c0_17c7_3, sequence_e1_9f_adv;
		BitBlock r800_ffff_tmp111, sequence_e1_a4, r800_ffff_tmp112, r800_ffff_tmp113;
		BitBlock r800_ffff_tmp114, r800_ffff_tmp115, r800_ffff_tmp116;
		BitBlock r800_ffff_tmp117, r800_ffff_tmp118, r800_ffff_tmp119;
		BitBlock r800_ffff_tmp120, r800_ffff_tmp121, r800_ffff_tmp122;
		BitBlock cc_range_1923_1933_3, sequence_e1_a4_adv, r800_ffff_tmp123;
		BitBlock sequence_e1_a6, byte_range_b0_bf, sequence_e1_a6_adv;
		BitBlock r800_ffff_tmp124, sequence_e1_a7, r800_ffff_tmp125, r800_ffff_tmp126;
		BitBlock cc_range_19c0_19c8_3, sequence_e1_a7_adv, r800_ffff_tmp127;
		BitBlock sequence_e1_a8, r800_ffff_tmp128, byte_range_99_9a;
		BitBlock sequence_e1_a8_adv, r800_ffff_tmp129, sequence_e1_a9;
		BitBlock r800_ffff_tmp130, r800_ffff_tmp131, r800_ffff_tmp132;
		BitBlock r800_ffff_tmp133, r800_ffff_tmp134, r800_ffff_tmp135;
		BitBlock cc_range_1a55_1a6d_3, sequence_e1_a9_adv, r800_ffff_tmp136;
		BitBlock sequence_e1_ac, r800_ffff_tmp137, r800_ffff_tmp138, r800_ffff_tmp139;
		BitBlock r800_ffff_tmp140, r800_ffff_tmp141, r800_ffff_tmp142;
		BitBlock cc_range_1b04_1b3d_3, sequence_e1_ac_adv, r800_ffff_tmp143;
		BitBlock sequence_e1_ad, r800_ffff_tmp144, cc_range_1b40_1b43_3;
		BitBlock sequence_e1_ad_adv, r800_ffff_tmp145, sequence_e1_ae;
		BitBlock r800_ffff_tmp146, r800_ffff_tmp147, r800_ffff_tmp148;
		BitBlock r800_ffff_tmp149, r800_ffff_tmp150, r800_ffff_tmp151;
		BitBlock cc_range_1b82_1bac_3, sequence_e1_ae_adv, r800_ffff_tmp152;
		BitBlock sequence_e1_af, r800_ffff_tmp153, r800_ffff_tmp154, r800_ffff_tmp155;
		BitBlock r800_ffff_tmp156, cc_range_1be7_1bf2_3, sequence_e1_af_adv;
		BitBlock r800_ffff_tmp157, sequence_e1_b0, r800_ffff_tmp158, r800_ffff_tmp159;
		BitBlock r800_ffff_tmp160, r800_ffff_tmp161, r800_ffff_tmp162;
		BitBlock cc_range_1c24_1c34_3, sequence_e1_b0_adv, r800_ffff_tmp163;
		BitBlock sequence_e1_b3, cc_range_1ce1_1cf2_3, sequence_e1_b3_adv;
		BitBlock r800_ffff_tmp164, byte_e3, r800_ffff_tmp165, sequence_e3_80;
		BitBlock byte_e3_adv, byte_range_ae_af, sequence_e3_80_adv, r800_ffff_tmp166;
		BitBlock byte_ea, byte_a0, r800_ffff_tmp167, sequence_ea_a0, byte_ea_adv;
		BitBlock cc_range_a823_a827_3, sequence_ea_a0_adv, r800_ffff_tmp168, byte_a2;
		BitBlock sequence_ea_a2, r800_ffff_tmp169, cc_range_a880_a8b4_3;
		BitBlock sequence_ea_a2_adv, r800_ffff_tmp170, byte_a3, sequence_ea_a3;
		BitBlock byte_range_80_83, sequence_ea_a3_adv, r800_ffff_tmp171;
		BitBlock sequence_ea_a5, byte_range_92_93, sequence_ea_a5_adv;
		BitBlock r800_ffff_tmp172, sequence_ea_a6, r800_ffff_tmp173, r800_ffff_tmp174;
		BitBlock r800_ffff_tmp175, cc_range_a983_a9bd_3, sequence_ea_a6_adv;
		BitBlock r800_ffff_tmp176, sequence_ea_a7, sequence_ea_a7_adv;
		BitBlock r800_ffff_tmp177, sequence_ea_a8, r800_ffff_tmp178, r800_ffff_tmp179;
		BitBlock r800_ffff_tmp180, r800_ffff_tmp181, r800_ffff_tmp182;
		BitBlock cc_range_aa2f_aa33_3, sequence_ea_a8_adv, r800_ffff_tmp183;
		BitBlock sequence_ea_a9, r800_ffff_tmp184, cc_range_aa4d_aa7b_3;
		BitBlock sequence_ea_a9_adv, r800_ffff_tmp185, sequence_ea_ab;
		BitBlock r800_ffff_tmp186, r800_ffff_tmp187, cc_range_aaeb_aaf5_3;
		BitBlock sequence_ea_ab_adv, r800_ffff_tmp188, sequence_ea_af;
		BitBlock r800_ffff_tmp189, r800_ffff_tmp190, r800_ffff_tmp191;
		BitBlock cc_range_abe3_abec_3, sequence_ea_af_adv, r800_ffff_tmp192;




        struct_Mc.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_f0 = simd_andc(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp11 = simd_andc(tmp10, tmp4);
        byte_91 = simd_and(tmp9, tmp11);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp12));
        sequence_f0_91 = simd_and(tmp12, byte_91);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
        tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp14 = simd_andc(tmp7, tmp13);
        byte_80 = simd_andc(tmp14, tmp6);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(2), tmp15));
        sequence_f0_91_80 = simd_and(tmp15, byte_80);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(3), sequence_f0_91_adv));
        sequence_f0_91_80 = simd_and(sequence_f0_91_adv, byte_80);
        tmp16 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp17 = simd_andc(tmp16, tmp4);
        tmp18 = simd_andc(tmp6, tmp17);
        cc_range_11000_11002_4 = simd_andc(tmp14, tmp18);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(4), sequence_f0_91_80_adv));
        tmp19 = simd_and(sequence_f0_91_80_adv, cc_range_11000_11002_4);
        struct_Mc.cc = simd_or(struct_Mc.cc, tmp19);
        byte_82 = simd_and(tmp14, tmp17);
        sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
        sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
        tmp20 = simd_and(tmp7, tmp2);
        tmp21 = simd_andc(tmp20, tmp4);
        tmp22 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp23 = simd_andc(tmp21, tmp22);
        tmp24 = simd_or(byte_82, tmp23);
        tmp25 = simd_or(basis_bits.bit_5, tmp5);
        tmp26 = simd_not(tmp25);
        tmp27 = simd_and(basis_bits.bit_5, tmp22);
        tmp28 = simd_or(simd_and(basis_bits.bit_4, tmp26), simd_andc(tmp27, basis_bits.bit_4));
        tmp29 = simd_and(tmp20, tmp28);
        cc_range_11082_110b7_4 = simd_or(tmp24, tmp29);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(5), sequence_f0_91_82_adv));
        tmp30 = simd_and(sequence_f0_91_82_adv, cc_range_11082_110b7_4);
        struct_Mc.cc = simd_or(struct_Mc.cc, tmp30);
        tmp31 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp32 = simd_andc(tmp31, tmp5);
        byte_84 = simd_and(tmp14, tmp32);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        tmp33 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp34 = simd_and(tmp7, tmp33);
        tmp35 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp36 = simd_andc(tmp35, tmp5);
        byte_ac = simd_and(tmp34, tmp36);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(6), sequence_f0_91_84_adv));
        tmp37 = simd_and(sequence_f0_91_84_adv, byte_ac);
        struct_Mc.cc = simd_or(struct_Mc.cc, tmp37);
        tmp38 = simd_and(tmp31, tmp16);
        byte_86 = simd_and(tmp14, tmp38);
        sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
        sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
        tmp39 = simd_andc(tmp20, basis_bits.bit_4);
        tmp40 = simd_not(basis_bits.bit_6);
        tmp41 = simd_or(simd_and(basis_bits.bit_5, tmp40), simd_andc(tmp22, basis_bits.bit_5));
        tmp42 = simd_and(tmp39, tmp41);
        tmp43 = simd_or(byte_82, tmp42);
        tmp44 = simd_and(tmp35, tmp22);
        tmp45 = simd_and(tmp20, tmp44);
        cc_range_11182_111bf_4 = simd_or(tmp43, tmp45);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(7), sequence_f0_91_86_adv));
        tmp46 = simd_and(sequence_f0_91_86_adv, cc_range_11182_111bf_4);
        struct_Mc.cc = simd_or(struct_Mc.cc, tmp46);
        tmp47 = simd_and(tmp31, tmp22);
        byte_87 = simd_and(tmp14, tmp47);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(8), sequence_f0_91_87_adv));
        tmp48 = simd_and(sequence_f0_91_87_adv, byte_80);
        struct_Mc.cc = simd_or(struct_Mc.cc, tmp48);
        tmp49 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp50 = simd_and(tmp49, tmp16);
        byte_9a = simd_and(tmp9, tmp50);
        sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
        sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
        tmp51 = simd_andc(tmp5, basis_bits.bit_6);
        tmp52 = simd_andc(tmp35, tmp51);
        tmp53 = simd_and(tmp34, tmp52);
        tmp54 = simd_and(tmp20, tmp38);
        cc_range_116ac_116b6_4 = simd_or(tmp53, tmp54);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(9), sequence_f0_91_9a_adv));
        tmp55 = simd_and(sequence_f0_91_9a_adv, cc_range_116ac_116b6_4);
        struct_Mc.cc = simd_or(struct_Mc.cc, tmp55);
        byte_96 = simd_and(tmp9, tmp38);
        sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
        sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
        tmp56 = simd_and(tmp35, tmp10);
        byte_bd = simd_and(tmp20, tmp56);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(10), tmp57));
        sequence_f0_96_bd = simd_and(tmp57, byte_bd);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(11), sequence_f0_96_adv));
        sequence_f0_96_bd = simd_and(sequence_f0_96_adv, byte_bd);
        tmp58 = simd_and(basis_bits.bit_3, tmp44);
        tmp59 = simd_not(tmp58);
        tmp60 = simd_and(basis_bits.bit_3, tmp6);
        tmp61 = simd_or(simd_and(basis_bits.bit_2, tmp59), simd_andc(tmp60, basis_bits.bit_2));
        byte_range_91_be = simd_and(tmp7, tmp61);
        carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f0_96_bd, carryQ.get_carry_in(12), sequence_f0_96_bd_adv));
        tmp62 = simd_and(sequence_f0_96_bd_adv, byte_range_91_be);
        struct_Mc.cc = simd_or(struct_Mc.cc, tmp62);
        byte_9d = simd_and(tmp9, tmp56);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        tmp63 = simd_and(tmp31, tmp10);
        byte_85 = simd_and(tmp14, tmp63);
        carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(13), tmp64));
        sequence_f0_9d_85 = simd_and(tmp64, byte_85);
        carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(14), sequence_f0_9d_adv));
        sequence_f0_9d_85 = simd_and(sequence_f0_9d_adv, byte_85);
        tmp65 = simd_and(tmp34, tmp31);
        tmp66 = simd_not(basis_bits.bit_7);
        tmp67 = simd_or(simd_and(basis_bits.bit_6, tmp66), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
        tmp68 = simd_and(tmp65, tmp67);
        tmp69 = simd_and(tmp7, basis_bits.bit_2);
        tmp70 = simd_or(tmp4, tmp22);
        tmp71 = simd_not(tmp70);
        tmp72 = simd_and(tmp35, tmp5);
        tmp73 = simd_or(simd_and(basis_bits.bit_3, tmp71), simd_andc(tmp72, basis_bits.bit_3));
        tmp74 = simd_and(tmp69, tmp73);
        cc_range_1d165_1d16d_4 = simd_or(tmp68, tmp74);
        carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(15), sequence_f0_9d_85_adv));
        tmp75 = simd_and(sequence_f0_9d_85_adv, cc_range_1d165_1d16d_4);
        struct_Mc.cc = simd_or(struct_Mc.cc, tmp75);
        byte_range_e0_ef = simd_and(tmp1, tmp33);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(16, 57))) {
          byte_e0 = simd_andc(byte_range_e0_ef, tmp6);
          byte_a4 = simd_and(tmp34, tmp32);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(16), r800_ffff_tmp1));
          sequence_e0_a4 = simd_and(r800_ffff_tmp1, byte_a4);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(17), byte_e0_adv));
          sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
          r800_ffff_tmp2 = simd_andc(tmp22, tmp4);
          r800_ffff_tmp3 = simd_and(tmp14, r800_ffff_tmp2);
          r800_ffff_tmp4 = simd_and(tmp49, tmp22);
          r800_ffff_tmp5 = simd_and(tmp20, r800_ffff_tmp4);
          r800_ffff_tmp6 = simd_or(r800_ffff_tmp3, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_and(tmp35, basis_bits.bit_6);
          r800_ffff_tmp8 = simd_and(tmp20, r800_ffff_tmp7);
          cc_range_903_93e_3 = simd_or(r800_ffff_tmp6, r800_ffff_tmp8);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(18), sequence_e0_a4_adv));
          r800_ffff_tmp9 = simd_and(sequence_e0_a4_adv, cc_range_903_93e_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp9);
          byte_a5 = simd_and(tmp34, tmp63);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          r800_ffff_tmp10 = simd_and(tmp14, basis_bits.bit_4);
          r800_ffff_tmp11 = simd_not(tmp5);
          r800_ffff_tmp12 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp11), simd_andc(tmp5, basis_bits.bit_5));
          r800_ffff_tmp13 = simd_and(r800_ffff_tmp10, r800_ffff_tmp12);
          r800_ffff_tmp14 = simd_or(byte_80, r800_ffff_tmp13);
          r800_ffff_tmp15 = simd_and(tmp14, r800_ffff_tmp7);
          cc_range_940_94e_3 = simd_or(r800_ffff_tmp14, r800_ffff_tmp15);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(19), sequence_e0_a5_adv));
          r800_ffff_tmp16 = simd_and(sequence_e0_a5_adv, cc_range_940_94e_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp16);
          byte_a6 = simd_and(tmp34, tmp38);
          sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
          sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
          r800_ffff_tmp17 = simd_andc(basis_bits.bit_6, tmp4);
          r800_ffff_tmp18 = simd_and(tmp14, r800_ffff_tmp17);
          cc_range_982_9be_3 = simd_or(r800_ffff_tmp18, r800_ffff_tmp8);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(20), sequence_e0_a6_adv));
          r800_ffff_tmp19 = simd_and(sequence_e0_a6_adv, cc_range_982_9be_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp19);
          byte_a7 = simd_and(tmp34, tmp47);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          r800_ffff_tmp20 = simd_andc(tmp6, tmp28);
          r800_ffff_tmp21 = simd_andc(tmp14, r800_ffff_tmp20);
          r800_ffff_tmp22 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp11), simd_andc(tmp22, basis_bits.bit_5));
          r800_ffff_tmp23 = simd_and(r800_ffff_tmp10, r800_ffff_tmp22);
          r800_ffff_tmp24 = simd_or(r800_ffff_tmp21, r800_ffff_tmp23);
          r800_ffff_tmp25 = simd_and(tmp9, tmp47);
          cc_range_9c0_9d7_3 = simd_or(r800_ffff_tmp24, r800_ffff_tmp25);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(21), sequence_e0_a7_adv));
          r800_ffff_tmp26 = simd_and(sequence_e0_a7_adv, cc_range_9c0_9d7_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp26);
          r800_ffff_tmp27 = simd_andc(tmp49, tmp5);
          byte_a8 = simd_and(tmp34, r800_ffff_tmp27);
          sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
          sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
          cc_range_a03_a3e_3 = simd_or(r800_ffff_tmp3, r800_ffff_tmp8);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(22), sequence_e0_a8_adv));
          r800_ffff_tmp28 = simd_and(sequence_e0_a8_adv, cc_range_a03_a3e_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp28);
          r800_ffff_tmp29 = simd_and(tmp49, tmp10);
          byte_a9 = simd_and(tmp34, r800_ffff_tmp29);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(23), sequence_e0_a9_adv));
          r800_ffff_tmp30 = simd_and(sequence_e0_a9_adv, byte_80);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp30);
          byte_aa = simd_and(tmp34, tmp50);
          sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
          sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
          cc_range_a83_abe_3 = simd_or(r800_ffff_tmp3, r800_ffff_tmp8);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(24), sequence_e0_aa_adv));
          r800_ffff_tmp31 = simd_and(sequence_e0_aa_adv, cc_range_a83_abe_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp31);
          byte_ab = simd_and(tmp34, r800_ffff_tmp4);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          r800_ffff_tmp32 = simd_andc(tmp6, r800_ffff_tmp29);
          r800_ffff_tmp33 = simd_andc(tmp14, r800_ffff_tmp32);
          cc_range_ac0_acb_3 = simd_or(r800_ffff_tmp33, r800_ffff_tmp23);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(25), sequence_e0_ab_adv));
          r800_ffff_tmp34 = simd_and(sequence_e0_ab_adv, cc_range_ac0_acb_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp34);
          sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
          sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
          r800_ffff_tmp35 = simd_and(tmp35, tmp16);
          r800_ffff_tmp36 = simd_and(tmp20, r800_ffff_tmp35);
          cc_range_b02_b3e_3 = simd_or(r800_ffff_tmp18, r800_ffff_tmp36);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(26), sequence_e0_ac_adv));
          r800_ffff_tmp37 = simd_and(sequence_e0_ac_adv, cc_range_b02_b3e_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp37);
          byte_ad = simd_and(tmp34, tmp56);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          cc_range_b40_b57_3 = simd_or(r800_ffff_tmp24, r800_ffff_tmp25);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(27), sequence_e0_ad_adv));
          r800_ffff_tmp38 = simd_and(sequence_e0_ad_adv, cc_range_b40_b57_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp38);
          byte_ae = simd_and(tmp34, r800_ffff_tmp35);
          sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
          sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
          byte_range_be_bf = simd_and(tmp20, r800_ffff_tmp7);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(28), sequence_e0_ae_adv));
          r800_ffff_tmp39 = simd_and(sequence_e0_ae_adv, byte_range_be_bf);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp39);
          byte_af = simd_and(tmp34, tmp44);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          r800_ffff_tmp40 = simd_andc(tmp14, tmp4);
          r800_ffff_tmp41 = simd_and(r800_ffff_tmp40, tmp67);
          r800_ffff_tmp42 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp43 = simd_or(simd_and(basis_bits.bit_4, tmp26), simd_andc(r800_ffff_tmp42, basis_bits.bit_4));
          r800_ffff_tmp44 = simd_and(tmp14, r800_ffff_tmp43);
          r800_ffff_tmp45 = simd_or(r800_ffff_tmp41, r800_ffff_tmp44);
          r800_ffff_tmp46 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp11), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp47 = simd_and(r800_ffff_tmp10, r800_ffff_tmp46);
          r800_ffff_tmp48 = simd_or(r800_ffff_tmp45, r800_ffff_tmp47);
          cc_range_bc1_bd7_3 = simd_or(r800_ffff_tmp48, r800_ffff_tmp25);
          carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(29), sequence_e0_af_adv));
          r800_ffff_tmp49 = simd_and(sequence_e0_af_adv, cc_range_bc1_bd7_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp49);
          byte_b0 = simd_andc(tmp20, tmp6);
          sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
          sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
          byte_range_81_83 = simd_and(r800_ffff_tmp40, tmp5);
          carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(30), sequence_e0_b0_adv));
          r800_ffff_tmp50 = simd_and(sequence_e0_b0_adv, byte_range_81_83);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp50);
          byte_b1 = simd_and(tmp20, tmp11);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          r800_ffff_tmp51 = simd_andc(tmp14, basis_bits.bit_4);
          byte_range_81_84 = simd_and(r800_ffff_tmp51, r800_ffff_tmp12);
          carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(31), sequence_e0_b1_adv));
          r800_ffff_tmp52 = simd_and(sequence_e0_b1_adv, byte_range_81_84);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp52);
          byte_b2 = simd_and(tmp20, tmp17);
          sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
          sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
          cc_range_c82_cbe_3 = simd_or(r800_ffff_tmp18, r800_ffff_tmp36);
          carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(32), sequence_e0_b2_adv));
          r800_ffff_tmp53 = simd_and(sequence_e0_b2_adv, cc_range_c82_cbe_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp53);
          byte_b3 = simd_and(tmp20, r800_ffff_tmp2);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          r800_ffff_tmp54 = simd_and(basis_bits.bit_5, tmp5);
          r800_ffff_tmp55 = simd_andc(r800_ffff_tmp51, r800_ffff_tmp54);
          r800_ffff_tmp56 = simd_and(tmp14, tmp28);
          r800_ffff_tmp57 = simd_or(r800_ffff_tmp55, r800_ffff_tmp56);
          r800_ffff_tmp58 = simd_and(tmp49, basis_bits.bit_6);
          r800_ffff_tmp59 = simd_and(tmp14, r800_ffff_tmp58);
          r800_ffff_tmp60 = simd_or(r800_ffff_tmp57, r800_ffff_tmp59);
          r800_ffff_tmp61 = simd_and(tmp9, tmp31);
          r800_ffff_tmp62 = simd_and(r800_ffff_tmp61, tmp67);
          cc_range_cc0_cd5_3 = simd_or(r800_ffff_tmp60, r800_ffff_tmp62);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(33), sequence_e0_b3_adv));
          r800_ffff_tmp63 = simd_and(sequence_e0_b3_adv, cc_range_cc0_cd5_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp63);
          byte_b4 = simd_and(tmp20, tmp32);
          sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
          sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
          cc_range_d02_d3e_3 = simd_or(r800_ffff_tmp18, byte_range_be_bf);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(34), sequence_e0_b4_adv));
          r800_ffff_tmp64 = simd_and(sequence_e0_b4_adv, cc_range_d02_d3e_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp64);
          byte_b5 = simd_and(tmp20, tmp63);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          r800_ffff_tmp65 = simd_andc(tmp6, r800_ffff_tmp43);
          r800_ffff_tmp66 = simd_andc(tmp14, r800_ffff_tmp65);
          r800_ffff_tmp67 = simd_or(r800_ffff_tmp66, r800_ffff_tmp47);
          cc_range_d40_d57_3 = simd_or(r800_ffff_tmp67, r800_ffff_tmp25);
          carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(35), sequence_e0_b5_adv));
          r800_ffff_tmp68 = simd_and(sequence_e0_b5_adv, cc_range_d40_d57_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp68);
          byte_b6 = simd_and(tmp20, tmp38);
          sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
          sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
          byte_range_82_83 = simd_and(tmp14, r800_ffff_tmp17);
          carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(36), sequence_e0_b6_adv));
          r800_ffff_tmp69 = simd_and(sequence_e0_b6_adv, byte_range_82_83);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp69);
          byte_b7 = simd_and(tmp20, tmp47);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          r800_ffff_tmp70 = simd_andc(tmp7, basis_bits.bit_2);
          r800_ffff_tmp71 = simd_or(tmp4, basis_bits.bit_6);
          r800_ffff_tmp72 = simd_not(r800_ffff_tmp71);
          r800_ffff_tmp73 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp72), simd_andc(tmp44, basis_bits.bit_3));
          r800_ffff_tmp74 = simd_and(r800_ffff_tmp70, r800_ffff_tmp73);
          r800_ffff_tmp75 = simd_and(tmp9, basis_bits.bit_4);
          r800_ffff_tmp76 = simd_or(r800_ffff_tmp74, r800_ffff_tmp75);
          r800_ffff_tmp77 = simd_and(tmp20, r800_ffff_tmp17);
          cc_range_dcf_df2_3 = simd_or(r800_ffff_tmp76, r800_ffff_tmp77);
          carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(37), sequence_e0_b7_adv));
          r800_ffff_tmp78 = simd_and(sequence_e0_b7_adv, cc_range_dcf_df2_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp78);
          byte_bc = simd_and(tmp20, tmp36);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(38), sequence_e0_bc_adv));
          r800_ffff_tmp79 = simd_and(sequence_e0_bc_adv, byte_range_be_bf);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp79);
          sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
          sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
          byte_bf = simd_and(tmp20, tmp44);
          carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(39), sequence_e0_bd_adv));
          r800_ffff_tmp80 = simd_and(sequence_e0_bd_adv, byte_bf);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp80);
          byte_e1 = simd_and(byte_range_e0_ef, tmp11);
          carryQ.cq[40] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(40), r800_ffff_tmp81));
          sequence_e1_80 = simd_and(r800_ffff_tmp81, byte_80);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(41), byte_e1_adv));
          sequence_e1_80 = simd_and(byte_e1_adv, byte_80);
          r800_ffff_tmp82 = simd_and(tmp34, basis_bits.bit_4);
          r800_ffff_tmp83 = simd_and(r800_ffff_tmp82, r800_ffff_tmp22);
          r800_ffff_tmp84 = simd_or(r800_ffff_tmp83, byte_b1);
          r800_ffff_tmp85 = simd_and(tmp20, r800_ffff_tmp27);
          r800_ffff_tmp86 = simd_or(r800_ffff_tmp84, r800_ffff_tmp85);
          r800_ffff_tmp87 = simd_and(tmp20, basis_bits.bit_4);
          r800_ffff_tmp88 = simd_and(r800_ffff_tmp87, r800_ffff_tmp22);
          cc_range_102b_103b_3 = simd_or(r800_ffff_tmp86, r800_ffff_tmp88);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(42), sequence_e1_80_adv));
          r800_ffff_tmp89 = simd_and(sequence_e1_80_adv, cc_range_102b_103b_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp89);
          byte_81 = simd_and(tmp14, tmp11);
          sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
          sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
          r800_ffff_tmp90 = simd_and(tmp31, basis_bits.bit_6);
          r800_ffff_tmp91 = simd_and(tmp9, r800_ffff_tmp90);
          r800_ffff_tmp92 = simd_andc(tmp34, basis_bits.bit_4);
          r800_ffff_tmp93 = simd_and(r800_ffff_tmp92, r800_ffff_tmp46);
          r800_ffff_tmp94 = simd_or(r800_ffff_tmp91, r800_ffff_tmp93);
          r800_ffff_tmp95 = simd_not(r800_ffff_tmp42);
          r800_ffff_tmp96 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp95), simd_andc(tmp27, basis_bits.bit_4));
          r800_ffff_tmp97 = simd_and(tmp34, r800_ffff_tmp96);
          cc_range_1056_1067_3 = simd_or(r800_ffff_tmp94, r800_ffff_tmp97);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(43), sequence_e1_81_adv));
          r800_ffff_tmp98 = simd_and(sequence_e1_81_adv, cc_range_1056_1067_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp98);
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          r800_ffff_tmp99 = simd_and(r800_ffff_tmp51, r800_ffff_tmp22);
          r800_ffff_tmp100 = simd_not(r800_ffff_tmp54);
          r800_ffff_tmp101 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp100), simd_andc(tmp27, basis_bits.bit_4));
          r800_ffff_tmp102 = simd_and(tmp14, r800_ffff_tmp101);
          r800_ffff_tmp103 = simd_or(r800_ffff_tmp99, r800_ffff_tmp102);
          r800_ffff_tmp104 = simd_and(tmp14, tmp44);
          r800_ffff_tmp105 = simd_or(r800_ffff_tmp103, r800_ffff_tmp104);
          r800_ffff_tmp106 = simd_and(r800_ffff_tmp75, r800_ffff_tmp46);
          cc_range_1083_109a_3 = simd_or(r800_ffff_tmp105, r800_ffff_tmp106);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(44), sequence_e1_82_adv));
          r800_ffff_tmp107 = simd_and(sequence_e1_82_adv, cc_range_1083_109a_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp107);
          byte_9e = simd_and(tmp9, r800_ffff_tmp35);
          sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
          sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
          r800_ffff_tmp108 = simd_or(tmp38, r800_ffff_tmp7);
          cc_range_17b6_17be_3 = simd_and(tmp20, r800_ffff_tmp108);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(45), sequence_e1_9e_adv));
          r800_ffff_tmp109 = simd_and(sequence_e1_9e_adv, cc_range_17b6_17be_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp109);
          byte_9f = simd_and(tmp9, tmp44);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          r800_ffff_tmp110 = simd_andc(r800_ffff_tmp51, r800_ffff_tmp42);
          cc_range_17c0_17c7_3 = simd_or(r800_ffff_tmp110, r800_ffff_tmp56);
          carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(46), sequence_e1_9f_adv));
          r800_ffff_tmp111 = simd_and(sequence_e1_9f_adv, cc_range_17c0_17c7_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp111);
          sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
          sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
          r800_ffff_tmp112 = simd_not(tmp22);
          r800_ffff_tmp113 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp112), simd_andc(tmp22, basis_bits.bit_5));
          r800_ffff_tmp114 = simd_and(r800_ffff_tmp92, r800_ffff_tmp113);
          r800_ffff_tmp115 = simd_and(tmp34, tmp49);
          r800_ffff_tmp116 = simd_and(r800_ffff_tmp115, tmp5);
          r800_ffff_tmp117 = simd_or(r800_ffff_tmp114, r800_ffff_tmp116);
          r800_ffff_tmp118 = simd_andc(tmp20, r800_ffff_tmp71);
          r800_ffff_tmp119 = simd_or(r800_ffff_tmp117, r800_ffff_tmp118);
          r800_ffff_tmp120 = simd_or(basis_bits.bit_5, tmp22);
          r800_ffff_tmp121 = simd_or(simd_and(basis_bits.bit_4, tmp26), simd_andc(r800_ffff_tmp120, basis_bits.bit_4));
          r800_ffff_tmp122 = simd_and(tmp20, r800_ffff_tmp121);
          cc_range_1923_1933_3 = simd_or(r800_ffff_tmp119, r800_ffff_tmp122);
          carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(47), sequence_e1_a4_adv));
          r800_ffff_tmp123 = simd_and(sequence_e1_a4_adv, cc_range_1923_1933_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp123);
          sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
          sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
          byte_range_b0_bf = simd_and(tmp7, tmp2);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(48), sequence_e1_a6_adv));
          r800_ffff_tmp124 = simd_and(sequence_e1_a6_adv, byte_range_b0_bf);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp124);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          r800_ffff_tmp125 = simd_andc(tmp49, basis_bits.bit_6);
          r800_ffff_tmp126 = simd_andc(tmp6, r800_ffff_tmp125);
          cc_range_19c0_19c8_3 = simd_andc(tmp14, r800_ffff_tmp126);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(49), sequence_e1_a7_adv));
          r800_ffff_tmp127 = simd_and(sequence_e1_a7_adv, cc_range_19c0_19c8_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp127);
          sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
          sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
          r800_ffff_tmp128 = simd_and(tmp9, tmp49);
          byte_range_99_9a = simd_and(r800_ffff_tmp128, tmp67);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(50), sequence_e1_a8_adv));
          r800_ffff_tmp129 = simd_and(sequence_e1_a8_adv, byte_range_99_9a);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp129);
          sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
          sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
          r800_ffff_tmp130 = simd_and(tmp31, basis_bits.bit_7);
          r800_ffff_tmp131 = simd_and(tmp9, r800_ffff_tmp130);
          r800_ffff_tmp132 = simd_and(tmp34, tmp11);
          r800_ffff_tmp133 = simd_or(r800_ffff_tmp131, r800_ffff_tmp132);
          r800_ffff_tmp134 = simd_and(r800_ffff_tmp92, r800_ffff_tmp22);
          r800_ffff_tmp135 = simd_or(r800_ffff_tmp133, r800_ffff_tmp134);
          cc_range_1a55_1a6d_3 = simd_or(r800_ffff_tmp135, tmp74);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(51), sequence_e1_a9_adv));
          r800_ffff_tmp136 = simd_and(sequence_e1_a9_adv, cc_range_1a55_1a6d_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp136);
          sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
          sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
          r800_ffff_tmp137 = simd_and(byte_range_b0_bf, tmp63);
          r800_ffff_tmp138 = simd_or(byte_84, r800_ffff_tmp137);
          r800_ffff_tmp139 = simd_and(byte_range_b0_bf, r800_ffff_tmp4);
          r800_ffff_tmp140 = simd_or(r800_ffff_tmp138, r800_ffff_tmp139);
          r800_ffff_tmp141 = simd_and(byte_range_b0_bf, tmp35);
          r800_ffff_tmp142 = simd_and(r800_ffff_tmp141, tmp5);
          cc_range_1b04_1b3d_3 = simd_or(r800_ffff_tmp140, r800_ffff_tmp142);
          carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(52), sequence_e1_ac_adv));
          r800_ffff_tmp143 = simd_and(sequence_e1_ac_adv, cc_range_1b04_1b3d_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp143);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          r800_ffff_tmp144 = simd_andc(tmp14, r800_ffff_tmp71);
          cc_range_1b40_1b43_3 = simd_or(r800_ffff_tmp144, r800_ffff_tmp99);
          carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(53), sequence_e1_ad_adv));
          r800_ffff_tmp145 = simd_and(sequence_e1_ad_adv, cc_range_1b40_1b43_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp145);
          sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
          sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
          r800_ffff_tmp146 = simd_or(byte_82, r800_ffff_tmp132);
          r800_ffff_tmp147 = simd_and(tmp34, r800_ffff_tmp90);
          r800_ffff_tmp148 = simd_or(r800_ffff_tmp146, r800_ffff_tmp147);
          r800_ffff_tmp149 = simd_or(r800_ffff_tmp148, byte_aa);
          r800_ffff_tmp150 = simd_andc(tmp35, basis_bits.bit_6);
          r800_ffff_tmp151 = simd_and(tmp34, r800_ffff_tmp150);
          cc_range_1b82_1bac_3 = simd_or(r800_ffff_tmp149, r800_ffff_tmp151);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(54), sequence_e1_ae_adv));
          r800_ffff_tmp152 = simd_and(sequence_e1_ae_adv, cc_range_1b82_1bac_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp152);
          sequence_e1_af = simd_and(byte_e1_adv, byte_af);
          sequence_e1_af = simd_and(byte_e1_adv, byte_af);
          r800_ffff_tmp153 = simd_and(r800_ffff_tmp82, r800_ffff_tmp46);
          r800_ffff_tmp154 = simd_or(byte_a7, r800_ffff_tmp153);
          r800_ffff_tmp155 = simd_or(r800_ffff_tmp154, byte_ae);
          r800_ffff_tmp156 = simd_and(byte_range_b0_bf, r800_ffff_tmp17);
          cc_range_1be7_1bf2_3 = simd_or(r800_ffff_tmp155, r800_ffff_tmp156);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(55), sequence_e1_af_adv));
          r800_ffff_tmp157 = simd_and(sequence_e1_af_adv, cc_range_1be7_1bf2_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp157);
          sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
          sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
          r800_ffff_tmp158 = simd_not(basis_bits.bit_5);
          r800_ffff_tmp159 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp158), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          r800_ffff_tmp160 = simd_and(tmp34, r800_ffff_tmp159);
          r800_ffff_tmp161 = simd_andc(tmp31, basis_bits.bit_6);
          r800_ffff_tmp162 = simd_and(byte_range_b0_bf, r800_ffff_tmp161);
          cc_range_1c24_1c34_3 = simd_or(r800_ffff_tmp160, r800_ffff_tmp162);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(56), sequence_e1_b0_adv));
          r800_ffff_tmp163 = simd_and(sequence_e1_b0_adv, cc_range_1c24_1c34_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp163);
          sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
          sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
          cc_range_1ce1_1cf2_3 = simd_or(r800_ffff_tmp132, r800_ffff_tmp156);
          carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(57), sequence_e1_b3_adv));
          r800_ffff_tmp164 = simd_and(sequence_e1_b3_adv, cc_range_1ce1_1cf2_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp164);
          byte_e3 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
          carryQ.cq[58] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(58), r800_ffff_tmp165));
          sequence_e3_80 = simd_and(r800_ffff_tmp165, byte_80);
          carryQ.cq[59] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(59), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          byte_range_ae_af = simd_and(tmp34, r800_ffff_tmp7);
          carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(60), sequence_e3_80_adv));
          r800_ffff_tmp166 = simd_and(sequence_e3_80_adv, byte_range_ae_af);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp166);
          byte_ea = simd_and(byte_range_e0_ef, tmp50);
          byte_a0 = simd_andc(tmp34, tmp6);
          carryQ.cq[61] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(61), r800_ffff_tmp167));
          sequence_ea_a0 = simd_and(r800_ffff_tmp167, byte_a0);
          carryQ.cq[62] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(62), byte_ea_adv));
          sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
          cc_range_a823_a827_3 = simd_or(r800_ffff_tmp134, byte_a7);
          carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(63), sequence_ea_a0_adv));
          r800_ffff_tmp168 = simd_and(sequence_ea_a0_adv, cc_range_a823_a827_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp168);
          byte_a2 = simd_and(tmp34, tmp17);
          sequence_ea_a2 = simd_and(byte_ea_adv, byte_a2);
          sequence_ea_a2 = simd_and(byte_ea_adv, byte_a2);
          r800_ffff_tmp169 = simd_and(byte_range_b0_bf, tmp4);
          cc_range_a880_a8b4_3 = simd_or(r800_ffff_tmp144, r800_ffff_tmp169);
          carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_ea_a2, carryQ.get_carry_in(64), sequence_ea_a2_adv));
          r800_ffff_tmp170 = simd_and(sequence_ea_a2_adv, cc_range_a880_a8b4_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp170);
          byte_a3 = simd_and(tmp34, r800_ffff_tmp2);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          byte_range_80_83 = simd_andc(tmp14, tmp4);
          carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(65), sequence_ea_a3_adv));
          r800_ffff_tmp171 = simd_and(sequence_ea_a3_adv, byte_range_80_83);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp171);
          sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
          sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
          byte_range_92_93 = simd_and(tmp9, r800_ffff_tmp17);
          carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(66), sequence_ea_a5_adv));
          r800_ffff_tmp172 = simd_and(sequence_ea_a5_adv, byte_range_92_93);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp172);
          sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
          sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
          r800_ffff_tmp173 = simd_or(r800_ffff_tmp3, r800_ffff_tmp162);
          r800_ffff_tmp174 = simd_and(byte_range_b0_bf, r800_ffff_tmp58);
          r800_ffff_tmp175 = simd_or(r800_ffff_tmp173, r800_ffff_tmp174);
          cc_range_a983_a9bd_3 = simd_or(r800_ffff_tmp175, r800_ffff_tmp142);
          carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(67), sequence_ea_a6_adv));
          r800_ffff_tmp176 = simd_and(sequence_ea_a6_adv, cc_range_a983_a9bd_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp176);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(68), sequence_ea_a7_adv));
          r800_ffff_tmp177 = simd_and(sequence_ea_a7_adv, byte_80);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp177);
          sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
          sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
          r800_ffff_tmp178 = simd_not(tmp6);
          r800_ffff_tmp179 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp178), simd_andc(tmp44, basis_bits.bit_3));
          r800_ffff_tmp180 = simd_and(tmp69, r800_ffff_tmp179);
          r800_ffff_tmp181 = simd_andc(byte_range_b0_bf, basis_bits.bit_4);
          r800_ffff_tmp182 = simd_and(r800_ffff_tmp181, r800_ffff_tmp22);
          cc_range_aa2f_aa33_3 = simd_or(r800_ffff_tmp180, r800_ffff_tmp182);
          carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(69), sequence_ea_a8_adv));
          r800_ffff_tmp183 = simd_and(sequence_ea_a8_adv, cc_range_aa2f_aa33_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp183);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          r800_ffff_tmp184 = simd_and(tmp14, tmp56);
          cc_range_aa4d_aa7b_3 = simd_or(r800_ffff_tmp184, r800_ffff_tmp139);
          carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(70), sequence_ea_a9_adv));
          r800_ffff_tmp185 = simd_and(sequence_ea_a9_adv, cc_range_aa4d_aa7b_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp185);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          r800_ffff_tmp186 = simd_or(r800_ffff_tmp4, r800_ffff_tmp7);
          r800_ffff_tmp187 = simd_and(tmp34, r800_ffff_tmp186);
          cc_range_aaeb_aaf5_3 = simd_or(r800_ffff_tmp187, r800_ffff_tmp137);
          carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(71), sequence_ea_ab_adv));
          r800_ffff_tmp188 = simd_and(sequence_ea_ab_adv, cc_range_aaeb_aaf5_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp188);
          sequence_ea_af = simd_and(byte_ea_adv, byte_af);
          sequence_ea_af = simd_and(byte_ea_adv, byte_af);
          r800_ffff_tmp189 = simd_or(r800_ffff_tmp134, r800_ffff_tmp147);
          r800_ffff_tmp190 = simd_and(r800_ffff_tmp115, tmp67);
          r800_ffff_tmp191 = simd_or(r800_ffff_tmp189, r800_ffff_tmp190);
          cc_range_abe3_abec_3 = simd_or(r800_ffff_tmp191, byte_ac);
          carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(72), sequence_ea_af_adv));
          r800_ffff_tmp192 = simd_and(sequence_ea_af_adv, cc_range_abe3_abec_3);
          struct_Mc.cc = simd_or(struct_Mc.cc, r800_ffff_tmp192);
        }
        else {
          carryQ.CarryDequeueEnqueue(16, 57);
        }
  }
  CarryArray<73, 0> carryQ;
  };

  struct Mn {
  Mn() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Mn & struct_Mn) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f0, tmp7, tmp8, tmp9, tmp10;
		BitBlock tmp11, byte_91, tmp12, sequence_f0_91, byte_f0_adv, tmp13, tmp14;
		BitBlock byte_80, tmp15, sequence_f0_91_80, sequence_f0_91_adv, tmp16, tmp17;
		BitBlock tmp18, cc_range_11001_11038_4, sequence_f0_91_80_adv, tmp19, byte_81;
		BitBlock sequence_f0_91_81, tmp20, tmp21, tmp22, byte_range_80_86;
		BitBlock sequence_f0_91_81_adv, tmp23, tmp24, tmp25, byte_82;
		BitBlock sequence_f0_91_82, tmp26, tmp27, tmp28, tmp29, tmp30, tmp31, tmp32;
		BitBlock tmp33, tmp34, tmp35, tmp36, tmp37, cc_range_11080_110b9_4;
		BitBlock sequence_f0_91_82_adv, tmp38, tmp39, tmp40, byte_84;
		BitBlock sequence_f0_91_84, tmp41, tmp42, tmp43, tmp44, tmp45, tmp46, tmp47;
		BitBlock tmp48, tmp49, tmp50, tmp51, tmp52, tmp53, tmp54, tmp55, tmp56;
		BitBlock cc_range_11100_1112d_4, sequence_f0_91_84_adv, tmp57, tmp58, byte_86;
		BitBlock sequence_f0_91_86, tmp59, tmp60, tmp61, tmp62, cc_range_11180_111b6_4;
		BitBlock sequence_f0_91_86_adv, tmp63, tmp64, byte_9a, sequence_f0_91_9a;
		BitBlock tmp65, tmp66, tmp67, tmp68, tmp69, tmp70, tmp71, tmp72;
		BitBlock cc_range_116ab_116b7_4, sequence_f0_91_9a_adv, tmp73, byte_96;
		BitBlock sequence_f0_96, tmp74, byte_be, tmp75, sequence_f0_96_be;
		BitBlock sequence_f0_96_adv, tmp76, tmp77, tmp78, tmp79, tmp80;
		BitBlock byte_range_8f_92, sequence_f0_96_be_adv, tmp81, byte_9d;
		BitBlock sequence_f0_9d, tmp82, byte_85, tmp83, sequence_f0_9d_85;
		BitBlock sequence_f0_9d_adv, tmp84, tmp85, tmp86, tmp87, tmp88, tmp89;
		BitBlock cc_range_1d167_1d17b_4, sequence_f0_9d_85_adv, tmp90;
		BitBlock sequence_f0_9d_86, tmp91, tmp92, tmp93, tmp94, tmp95, tmp96, tmp97;
		BitBlock cc_range_1d180_1d1aa_4, sequence_f0_9d_86_adv, tmp98, tmp99, byte_89;
		BitBlock sequence_f0_9d_89, tmp100, tmp101, byte_range_82_84;
		BitBlock sequence_f0_9d_89_adv, tmp102, tmp103, byte_f3, byte_a0, tmp104;
		BitBlock sequence_f3_a0, byte_f3_adv, tmp105, byte_range_84_86, tmp106;
		BitBlock sequence_f3_a0_byte_range_84_86, byte_range_80_bf, tmp107;
		BitBlock sequence_f3_a0_byte_range_84_86_sfx, tmp108, tmp109, byte_87;
		BitBlock sequence_f3_a0_adv, sequence_f3_a0_87, byte_range_80_af, tmp110;
		BitBlock sequence_f3_a0_87_byte_range_80_af, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, byte_cc, byte_cc_adv, r80_7ff_tmp3, byte_cd;
		BitBlock byte_cd_adv, r80_7ff_tmp4, r80_7ff_tmp5, byte_d2, r80_7ff_tmp6;
		BitBlock byte_range_83_87, byte_d2_adv, r80_7ff_tmp7, byte_d6, r80_7ff_tmp8;
		BitBlock r80_7ff_tmp9, r80_7ff_tmp10, r80_7ff_tmp11, r80_7ff_tmp12;
		BitBlock r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15, cc_range_591_5bf_2;
		BitBlock byte_d6_adv, r80_7ff_tmp16, byte_d7, r80_7ff_tmp17, r80_7ff_tmp18;
		BitBlock r80_7ff_tmp19, r80_7ff_tmp20, r80_7ff_tmp21, cc_range_5c1_5c7_2;
		BitBlock byte_d7_adv, r80_7ff_tmp22, r80_7ff_tmp23, byte_d8, r80_7ff_tmp24;
		BitBlock r80_7ff_tmp25, byte_range_90_9a, byte_d8_adv, r80_7ff_tmp26, byte_d9;
		BitBlock r80_7ff_tmp27, r80_7ff_tmp28, r80_7ff_tmp29, r80_7ff_tmp30;
		BitBlock cc_range_64b_670_2, byte_d9_adv, r80_7ff_tmp31, byte_db;
		BitBlock r80_7ff_tmp32, r80_7ff_tmp33, r80_7ff_tmp34, r80_7ff_tmp35;
		BitBlock r80_7ff_tmp36, r80_7ff_tmp37, r80_7ff_tmp38, r80_7ff_tmp39;
		BitBlock r80_7ff_tmp40, r80_7ff_tmp41, r80_7ff_tmp42, r80_7ff_tmp43;
		BitBlock r80_7ff_tmp44, r80_7ff_tmp45, r80_7ff_tmp46, r80_7ff_tmp47;
		BitBlock cc_range_6d6_6ea_2, byte_db_adv, r80_7ff_tmp48, byte_dc;
		BitBlock r80_7ff_tmp49, cc_range_711_730_2, byte_dc_adv, r80_7ff_tmp50;
		BitBlock byte_dd, byte_range_80_8a, byte_dd_adv, r80_7ff_tmp51, byte_de;
		BitBlock r80_7ff_tmp52, r80_7ff_tmp53, r80_7ff_tmp54, r80_7ff_tmp55;
		BitBlock byte_range_a6_b0, byte_de_adv, r80_7ff_tmp56, byte_df, r80_7ff_tmp57;
		BitBlock r80_7ff_tmp58, byte_range_ab_b3, byte_df_adv, r80_7ff_tmp59;
		BitBlock byte_range_e0_ef, byte_e0, r800_ffff_tmp1, sequence_e0_a0;
		BitBlock byte_e0_adv, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, r800_ffff_tmp11, r800_ffff_tmp12;
		BitBlock r800_ffff_tmp13, r800_ffff_tmp14, r800_ffff_tmp15, r800_ffff_tmp16;
		BitBlock r800_ffff_tmp17, cc_range_816_829_3, sequence_e0_a0_adv;
		BitBlock r800_ffff_tmp18, byte_a1, sequence_e0_a1, r800_ffff_tmp19;
		BitBlock byte_range_99_9b, sequence_e0_a1_adv, r800_ffff_tmp20, byte_a3;
		BitBlock sequence_e0_a3, r800_ffff_tmp21, r800_ffff_tmp22, r800_ffff_tmp23;
		BitBlock byte_range_a4_be, sequence_e0_a3_adv, r800_ffff_tmp24, byte_a4;
		BitBlock sequence_e0_a4, r800_ffff_tmp25, r800_ffff_tmp26, r800_ffff_tmp27;
		BitBlock r800_ffff_tmp28, r800_ffff_tmp29, r800_ffff_tmp30, r800_ffff_tmp31;
		BitBlock cc_range_900_93c_3, sequence_e0_a4_adv, r800_ffff_tmp32, byte_a5;
		BitBlock sequence_e0_a5, r800_ffff_tmp33, r800_ffff_tmp34, r800_ffff_tmp35;
		BitBlock r800_ffff_tmp36, r800_ffff_tmp37, r800_ffff_tmp38, r800_ffff_tmp39;
		BitBlock r800_ffff_tmp40, r800_ffff_tmp41, r800_ffff_tmp42, cc_range_941_962_3;
		BitBlock sequence_e0_a5_adv, r800_ffff_tmp43, byte_a6, sequence_e0_a6;
		BitBlock r800_ffff_tmp44, cc_range_981_9bc_3, sequence_e0_a6_adv;
		BitBlock r800_ffff_tmp45, byte_a7, sequence_e0_a7, r800_ffff_tmp46;
		BitBlock r800_ffff_tmp47, r800_ffff_tmp48, r800_ffff_tmp49, r800_ffff_tmp50;
		BitBlock cc_range_9c1_9e2_3, sequence_e0_a7_adv, r800_ffff_tmp51;
		BitBlock r800_ffff_tmp52, byte_a8, sequence_e0_a8, r800_ffff_tmp53;
		BitBlock cc_range_a01_a3c_3, sequence_e0_a8_adv, r800_ffff_tmp54, byte_a9;
		BitBlock sequence_e0_a9, r800_ffff_tmp55, r800_ffff_tmp56, r800_ffff_tmp57;
		BitBlock r800_ffff_tmp58, r800_ffff_tmp59, r800_ffff_tmp60, r800_ffff_tmp61;
		BitBlock r800_ffff_tmp62, r800_ffff_tmp63, r800_ffff_tmp64, r800_ffff_tmp65;
		BitBlock r800_ffff_tmp66, cc_range_a41_a75_3, sequence_e0_a9_adv;
		BitBlock r800_ffff_tmp67, byte_aa, sequence_e0_aa, cc_range_a81_abc_3;
		BitBlock sequence_e0_aa_adv, r800_ffff_tmp68, byte_ab, sequence_e0_ab;
		BitBlock r800_ffff_tmp69, r800_ffff_tmp70, r800_ffff_tmp71, cc_range_ac1_ae2_3;
		BitBlock sequence_e0_ab_adv, r800_ffff_tmp72, byte_ac, sequence_e0_ac;
		BitBlock r800_ffff_tmp73, cc_range_b01_b3f_3, sequence_e0_ac_adv;
		BitBlock r800_ffff_tmp74, byte_ad, sequence_e0_ad, r800_ffff_tmp75;
		BitBlock r800_ffff_tmp76, cc_range_b41_b62_3, sequence_e0_ad_adv;
		BitBlock r800_ffff_tmp77, byte_ae, sequence_e0_ae, sequence_e0_ae_adv;
		BitBlock r800_ffff_tmp78, byte_af, sequence_e0_af, r800_ffff_tmp79;
		BitBlock cc_range_bc0_bcd_3, sequence_e0_af_adv, r800_ffff_tmp80, byte_b0;
		BitBlock sequence_e0_b0, r800_ffff_tmp81, byte_range_be_bf, sequence_e0_b0_adv;
		BitBlock r800_ffff_tmp82, byte_b1, sequence_e0_b1, r800_ffff_tmp83;
		BitBlock r800_ffff_tmp84, r800_ffff_tmp85, r800_ffff_tmp86, r800_ffff_tmp87;
		BitBlock r800_ffff_tmp88, r800_ffff_tmp89, r800_ffff_tmp90, cc_range_c40_c62_3;
		BitBlock sequence_e0_b1_adv, r800_ffff_tmp91, byte_b2, sequence_e0_b2;
		BitBlock r800_ffff_tmp92, r800_ffff_tmp93, cc_range_cbc_cbf_3;
		BitBlock sequence_e0_b2_adv, r800_ffff_tmp94, byte_b3, sequence_e0_b3;
		BitBlock r800_ffff_tmp95, r800_ffff_tmp96, r800_ffff_tmp97, cc_range_cc6_ce2_3;
		BitBlock sequence_e0_b3_adv, r800_ffff_tmp98, byte_b5, sequence_e0_b5;
		BitBlock cc_range_d41_d62_3, sequence_e0_b5_adv, r800_ffff_tmp99, byte_b7;
		BitBlock sequence_e0_b7, r800_ffff_tmp100, r800_ffff_tmp101, r800_ffff_tmp102;
		BitBlock cc_range_dca_dd6_3, sequence_e0_b7_adv, r800_ffff_tmp103, byte_b8;
		BitBlock sequence_e0_b8, r800_ffff_tmp104, r800_ffff_tmp105, r800_ffff_tmp106;
		BitBlock cc_range_e31_e34_3, sequence_e0_b8_adv, r800_ffff_tmp107, byte_b9;
		BitBlock sequence_e0_b9, r800_ffff_tmp108, byte_range_87_8e;
		BitBlock sequence_e0_b9_adv, r800_ffff_tmp109, byte_ba, sequence_e0_ba;
		BitBlock r800_ffff_tmp110, r800_ffff_tmp111, r800_ffff_tmp112;
		BitBlock r800_ffff_tmp113, r800_ffff_tmp114, r800_ffff_tmp115;
		BitBlock cc_range_eb1_ebb_3, sequence_e0_ba_adv, r800_ffff_tmp116, byte_bb;
		BitBlock sequence_e0_bb, byte_range_88_8d, sequence_e0_bb_adv;
		BitBlock r800_ffff_tmp117, byte_bc, sequence_e0_bc, r800_ffff_tmp118;
		BitBlock r800_ffff_tmp119, r800_ffff_tmp120, r800_ffff_tmp121;
		BitBlock cc_range_f18_f39_3, sequence_e0_bc_adv, r800_ffff_tmp122, byte_bd;
		BitBlock sequence_e0_bd, r800_ffff_tmp123, byte_range_b1_be;
		BitBlock sequence_e0_bd_adv, r800_ffff_tmp124, sequence_e0_be;
		BitBlock r800_ffff_tmp125, r800_ffff_tmp126, r800_ffff_tmp127;
		BitBlock r800_ffff_tmp128, r800_ffff_tmp129, r800_ffff_tmp130;
		BitBlock r800_ffff_tmp131, r800_ffff_tmp132, r800_ffff_tmp133;
		BitBlock r800_ffff_tmp134, r800_ffff_tmp135, r800_ffff_tmp136;
		BitBlock r800_ffff_tmp137, r800_ffff_tmp138, r800_ffff_tmp139;
		BitBlock cc_range_f80_f99_3, sequence_e0_be_adv, r800_ffff_tmp140, byte_bf;
		BitBlock sequence_e0_bf, sequence_e0_bf_adv, r800_ffff_tmp141, byte_e1;
		BitBlock r800_ffff_tmp142, sequence_e1_80, byte_e1_adv, r800_ffff_tmp143;
		BitBlock r800_ffff_tmp144, r800_ffff_tmp145, r800_ffff_tmp146;
		BitBlock r800_ffff_tmp147, r800_ffff_tmp148, r800_ffff_tmp149;
		BitBlock r800_ffff_tmp150, r800_ffff_tmp151, r800_ffff_tmp152;
		BitBlock r800_ffff_tmp153, cc_range_102d_103d_3, sequence_e1_80_adv;
		BitBlock r800_ffff_tmp154, sequence_e1_81, r800_ffff_tmp155, r800_ffff_tmp156;
		BitBlock r800_ffff_tmp157, r800_ffff_tmp158, r800_ffff_tmp159;
		BitBlock r800_ffff_tmp160, r800_ffff_tmp161, cc_range_1058_1071_3;
		BitBlock sequence_e1_81_adv, r800_ffff_tmp162, sequence_e1_82;
		BitBlock r800_ffff_tmp163, r800_ffff_tmp164, r800_ffff_tmp165;
		BitBlock r800_ffff_tmp166, r800_ffff_tmp167, r800_ffff_tmp168;
		BitBlock cc_range_1082_109d_3, sequence_e1_82_adv, r800_ffff_tmp169, byte_8d;
		BitBlock sequence_e1_8d, r800_ffff_tmp170, byte_range_9d_9f;
		BitBlock sequence_e1_8d_adv, r800_ffff_tmp171, byte_9c, sequence_e1_9c;
		BitBlock r800_ffff_tmp172, r800_ffff_tmp173, cc_range_1712_1732_3;
		BitBlock sequence_e1_9c_adv, r800_ffff_tmp174, sequence_e1_9d;
		BitBlock cc_range_1752_1772_3, sequence_e1_9d_adv, r800_ffff_tmp175, byte_9e;
		BitBlock sequence_e1_9e, r800_ffff_tmp176, r800_ffff_tmp177, r800_ffff_tmp178;
		BitBlock r800_ffff_tmp179, cc_range_17b4_17b7_3, sequence_e1_9e_adv;
		BitBlock r800_ffff_tmp180, byte_9f, sequence_e1_9f, r800_ffff_tmp181;
		BitBlock r800_ffff_tmp182, r800_ffff_tmp183, r800_ffff_tmp184;
		BitBlock r800_ffff_tmp185, cc_range_17c6_17dd_3, sequence_e1_9f_adv;
		BitBlock r800_ffff_tmp186, sequence_e1_a0, byte_range_8b_8d;
		BitBlock sequence_e1_a0_adv, r800_ffff_tmp187, byte_a2, sequence_e1_a2;
		BitBlock sequence_e1_a2_adv, r800_ffff_tmp188, sequence_e1_a4;
		BitBlock r800_ffff_tmp189, r800_ffff_tmp190, r800_ffff_tmp191;
		BitBlock r800_ffff_tmp192, r800_ffff_tmp193, r800_ffff_tmp194;
		BitBlock cc_range_1920_1939_3, sequence_e1_a4_adv, r800_ffff_tmp195;
		BitBlock sequence_e1_a8, r800_ffff_tmp196, cc_range_1a17_1a1b_3;
		BitBlock sequence_e1_a8_adv, r800_ffff_tmp197, sequence_e1_a9;
		BitBlock r800_ffff_tmp198, r800_ffff_tmp199, r800_ffff_tmp200;
		BitBlock r800_ffff_tmp201, r800_ffff_tmp202, r800_ffff_tmp203;
		BitBlock r800_ffff_tmp204, r800_ffff_tmp205, r800_ffff_tmp206;
		BitBlock r800_ffff_tmp207, r800_ffff_tmp208, r800_ffff_tmp209;
		BitBlock r800_ffff_tmp210, cc_range_1a56_1a7f_3, sequence_e1_a9_adv;
		BitBlock r800_ffff_tmp211, sequence_e1_ac, r800_ffff_tmp212, r800_ffff_tmp213;
		BitBlock r800_ffff_tmp214, r800_ffff_tmp215, r800_ffff_tmp216;
		BitBlock cc_range_1b00_1b3c_3, sequence_e1_ac_adv, r800_ffff_tmp217;
		BitBlock sequence_e1_ad, r800_ffff_tmp218, r800_ffff_tmp219;
		BitBlock cc_range_1b42_1b6b_3, sequence_e1_ad_adv, r800_ffff_tmp220;
		BitBlock sequence_e1_ae, r800_ffff_tmp221, r800_ffff_tmp222, r800_ffff_tmp223;
		BitBlock r800_ffff_tmp224, r800_ffff_tmp225, r800_ffff_tmp226;
		BitBlock cc_range_1b80_1bab_3, sequence_e1_ae_adv, r800_ffff_tmp227;
		BitBlock sequence_e1_af, r800_ffff_tmp228, r800_ffff_tmp229, r800_ffff_tmp230;
		BitBlock r800_ffff_tmp231, r800_ffff_tmp232, r800_ffff_tmp233;
		BitBlock cc_range_1be6_1bef_3, sequence_e1_af_adv, r800_ffff_tmp234;
		BitBlock sequence_e1_b0, r800_ffff_tmp235, r800_ffff_tmp236, r800_ffff_tmp237;
		BitBlock cc_range_1c2c_1c36_3, sequence_e1_b0_adv, r800_ffff_tmp238;
		BitBlock sequence_e1_b3, r800_ffff_tmp239, r800_ffff_tmp240, r800_ffff_tmp241;
		BitBlock r800_ffff_tmp242, r800_ffff_tmp243, r800_ffff_tmp244;
		BitBlock r800_ffff_tmp245, r800_ffff_tmp246, r800_ffff_tmp247;
		BitBlock r800_ffff_tmp248, cc_range_1cd0_1cf4_3, sequence_e1_b3_adv;
		BitBlock r800_ffff_tmp249, sequence_e1_b7, r800_ffff_tmp250, r800_ffff_tmp251;
		BitBlock r800_ffff_tmp252, r800_ffff_tmp253, cc_range_1dc0_1dfc_3;
		BitBlock sequence_e1_b7_adv, r800_ffff_tmp254, byte_e2, byte_83;
		BitBlock r800_ffff_tmp255, sequence_e2_83, byte_e2_adv, r800_ffff_tmp256;
		BitBlock r800_ffff_tmp257, r800_ffff_tmp258, r800_ffff_tmp259;
		BitBlock r800_ffff_tmp260, cc_range_20d0_20e5_3, sequence_e2_83_adv;
		BitBlock r800_ffff_tmp261, sequence_e2_b3, byte_range_af_b1;
		BitBlock sequence_e2_b3_adv, r800_ffff_tmp262, sequence_e2_b5;
		BitBlock sequence_e2_b5_adv, r800_ffff_tmp263, sequence_e2_b7;
		BitBlock byte_range_a0_bf, sequence_e2_b7_adv, r800_ffff_tmp264, byte_e3;
		BitBlock r800_ffff_tmp265, sequence_e3_80, byte_e3_adv, byte_range_aa_ad;
		BitBlock sequence_e3_80_adv, r800_ffff_tmp266, sequence_e3_82;
		BitBlock byte_range_99_9a, sequence_e3_82_adv, r800_ffff_tmp267, byte_ea;
		BitBlock byte_99, r800_ffff_tmp268, sequence_ea_99, byte_ea_adv;
		BitBlock r800_ffff_tmp269, r800_ffff_tmp270, cc_range_a66f_a674_3;
		BitBlock sequence_ea_99_adv, r800_ffff_tmp271, sequence_ea_9a;
		BitBlock sequence_ea_9a_adv, r800_ffff_tmp272, byte_9b, sequence_ea_9b;
		BitBlock byte_range_b0_b1, sequence_ea_9b_adv, r800_ffff_tmp273;
		BitBlock sequence_ea_a0, r800_ffff_tmp274, r800_ffff_tmp275, r800_ffff_tmp276;
		BitBlock r800_ffff_tmp277, r800_ffff_tmp278, cc_range_a802_a825_3;
		BitBlock sequence_ea_a0_adv, r800_ffff_tmp279, sequence_ea_a3;
		BitBlock r800_ffff_tmp280, r800_ffff_tmp281, r800_ffff_tmp282;
		BitBlock cc_range_a8c4_a8e0_3, sequence_ea_a3_adv, r800_ffff_tmp283;
		BitBlock sequence_ea_a4, r800_ffff_tmp284, byte_range_a6_ad;
		BitBlock sequence_ea_a4_adv, r800_ffff_tmp285, sequence_ea_a5;
		BitBlock r800_ffff_tmp286, byte_range_87_91, sequence_ea_a5_adv;
		BitBlock r800_ffff_tmp287, sequence_ea_a6, r800_ffff_tmp288, r800_ffff_tmp289;
		BitBlock r800_ffff_tmp290, cc_range_a980_a9bc_3, sequence_ea_a6_adv;
		BitBlock r800_ffff_tmp291, sequence_ea_a8, r800_ffff_tmp292, r800_ffff_tmp293;
		BitBlock r800_ffff_tmp294, r800_ffff_tmp295, r800_ffff_tmp296;
		BitBlock r800_ffff_tmp297, r800_ffff_tmp298, cc_range_aa29_aa35_3;
		BitBlock sequence_ea_a8_adv, r800_ffff_tmp299, sequence_ea_a9;
		BitBlock r800_ffff_tmp300, cc_range_aa43_aa4c_3, sequence_ea_a9_adv;
		BitBlock r800_ffff_tmp301, sequence_ea_aa, r800_ffff_tmp302, r800_ffff_tmp303;
		BitBlock r800_ffff_tmp304, r800_ffff_tmp305, cc_range_aab0_aabe_3;
		BitBlock sequence_ea_aa_adv, r800_ffff_tmp306, sequence_ea_ab;
		BitBlock r800_ffff_tmp307, r800_ffff_tmp308, r800_ffff_tmp309;
		BitBlock cc_range_aac1_aaf6_3, sequence_ea_ab_adv, r800_ffff_tmp310;
		BitBlock sequence_ea_af, r800_ffff_tmp311, r800_ffff_tmp312;
		BitBlock cc_range_abe5_abed_3, sequence_ea_af_adv, r800_ffff_tmp313, byte_ef;
		BitBlock r800_ffff_tmp314, sequence_ef_ac, byte_ef_adv, sequence_ef_ac_adv;
		BitBlock r800_ffff_tmp315, sequence_ef_b8, r800_ffff_tmp316;
		BitBlock cc_range_fe00_fe20_3, sequence_ef_b8_adv, r800_ffff_tmp317, tmp111;
		BitBlock byte_90, sequence_f0_90, tmp112, sequence_f0_90_byte_range_80_bf;
		BitBlock tmp113, sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock sequence_f0_90_87, sequence_f0_90_adv, r10000_10fff_tmp1;
		BitBlock sequence_f0_90_87_adv, r10000_10fff_tmp2, r10000_10fff_tmp3;
		BitBlock sequence_f0_90_a8, r10000_10fff_tmp4, r10000_10fff_tmp5;
		BitBlock r10000_10fff_tmp6, r10000_10fff_tmp7, r10000_10fff_tmp8;
		BitBlock r10000_10fff_tmp9, r10000_10fff_tmp10, r10000_10fff_tmp11;
		BitBlock r10000_10fff_tmp12, r10000_10fff_tmp13, r10000_10fff_tmp14;
		BitBlock cc_range_10a01_10a3f_4, sequence_f0_90_a8_adv, r10000_10fff_tmp15;




        struct_Mn.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_f0 = simd_andc(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp11 = simd_andc(tmp10, tmp4);
        byte_91 = simd_and(tmp9, tmp11);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp12));
        sequence_f0_91 = simd_and(tmp12, byte_91);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
        tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp14 = simd_andc(tmp7, tmp13);
        byte_80 = simd_andc(tmp14, tmp6);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(2), tmp15));
        sequence_f0_91_80 = simd_and(tmp15, byte_80);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(3), sequence_f0_91_adv));
        sequence_f0_91_80 = simd_and(sequence_f0_91_adv, byte_80);
        tmp16 = simd_and(tmp14, tmp11);
        tmp17 = simd_and(tmp7, tmp2);
        tmp18 = simd_and(tmp17, basis_bits.bit_4);
        cc_range_11001_11038_4 = simd_or(tmp16, tmp18);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(4), sequence_f0_91_80_adv));
        tmp19 = simd_and(sequence_f0_91_80_adv, cc_range_11001_11038_4);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp19);
        byte_81 = simd_and(tmp14, tmp11);
        sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
        sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
        tmp20 = simd_andc(tmp14, basis_bits.bit_4);
        tmp21 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp22 = simd_and(basis_bits.bit_5, tmp21);
        byte_range_80_86 = simd_andc(tmp20, tmp22);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(5), sequence_f0_91_81_adv));
        tmp23 = simd_and(sequence_f0_91_81_adv, byte_range_80_86);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp23);
        tmp24 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp25 = simd_andc(tmp24, tmp4);
        byte_82 = simd_and(tmp14, tmp25);
        sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
        sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
        tmp26 = simd_or(tmp4, basis_bits.bit_6);
        tmp27 = simd_andc(tmp14, tmp26);
        tmp28 = simd_andc(tmp17, basis_bits.bit_4);
        tmp29 = simd_not(tmp21);
        tmp30 = simd_or(simd_and(basis_bits.bit_5, tmp29), simd_andc(tmp21, basis_bits.bit_5));
        tmp31 = simd_and(tmp28, tmp30);
        tmp32 = simd_or(tmp27, tmp31);
        tmp33 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp34 = simd_and(tmp17, tmp33);
        tmp35 = simd_not(basis_bits.bit_7);
        tmp36 = simd_or(simd_and(basis_bits.bit_6, tmp35), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
        tmp37 = simd_and(tmp34, tmp36);
        cc_range_11080_110b9_4 = simd_or(tmp32, tmp37);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(6), sequence_f0_91_82_adv));
        tmp38 = simd_and(sequence_f0_91_82_adv, cc_range_11080_110b9_4);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp38);
        tmp39 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp40 = simd_andc(tmp39, tmp5);
        byte_84 = simd_and(tmp14, tmp40);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        tmp41 = simd_andc(tmp14, tmp4);
        tmp42 = simd_andc(tmp41, tmp21);
        tmp43 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp44 = simd_and(tmp7, tmp43);
        tmp45 = simd_not(basis_bits.bit_5);
        tmp46 = simd_or(simd_and(basis_bits.bit_4, tmp45), simd_andc(tmp22, basis_bits.bit_4));
        tmp47 = simd_and(tmp44, tmp46);
        tmp48 = simd_or(tmp42, tmp47);
        tmp49 = simd_and(tmp7, basis_bits.bit_2);
        tmp50 = simd_and(basis_bits.bit_5, tmp5);
        tmp51 = simd_or(basis_bits.bit_4, tmp50);
        tmp52 = simd_not(tmp51);
        tmp53 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp54 = simd_and(tmp53, tmp5);
        tmp55 = simd_or(simd_and(basis_bits.bit_3, tmp52), simd_andc(tmp54, basis_bits.bit_3));
        tmp56 = simd_and(tmp49, tmp55);
        cc_range_11100_1112d_4 = simd_or(tmp48, tmp56);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(7), sequence_f0_91_84_adv));
        tmp57 = simd_and(sequence_f0_91_84_adv, cc_range_11100_1112d_4);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp57);
        tmp58 = simd_and(tmp39, tmp24);
        byte_86 = simd_and(tmp14, tmp58);
        sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
        sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
        tmp59 = simd_not(tmp22);
        tmp60 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
        tmp61 = simd_or(simd_and(basis_bits.bit_4, tmp59), simd_andc(tmp60, basis_bits.bit_4));
        tmp62 = simd_and(tmp17, tmp61);
        cc_range_11180_111b6_4 = simd_or(tmp27, tmp62);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(8), sequence_f0_91_86_adv));
        tmp63 = simd_and(sequence_f0_91_86_adv, cc_range_11180_111b6_4);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp63);
        tmp64 = simd_and(tmp33, tmp24);
        byte_9a = simd_and(tmp9, tmp64);
        sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
        sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
        tmp65 = simd_and(tmp33, tmp21);
        tmp66 = simd_and(tmp53, tmp10);
        tmp67 = simd_or(tmp65, tmp66);
        tmp68 = simd_and(tmp44, tmp67);
        tmp69 = simd_andc(tmp28, tmp60);
        tmp70 = simd_or(tmp68, tmp69);
        tmp71 = simd_and(tmp39, tmp21);
        tmp72 = simd_and(tmp17, tmp71);
        cc_range_116ab_116b7_4 = simd_or(tmp70, tmp72);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(9), sequence_f0_91_9a_adv));
        tmp73 = simd_and(sequence_f0_91_9a_adv, cc_range_116ab_116b7_4);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp73);
        byte_96 = simd_and(tmp9, tmp58);
        sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
        sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
        tmp74 = simd_and(tmp53, tmp24);
        byte_be = simd_and(tmp17, tmp74);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(10), tmp75));
        sequence_f0_96_be = simd_and(tmp75, byte_be);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(11), sequence_f0_96_adv));
        sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
        tmp76 = simd_andc(tmp7, basis_bits.bit_2);
        tmp77 = simd_or(tmp4, tmp21);
        tmp78 = simd_not(tmp77);
        tmp79 = simd_and(tmp53, tmp21);
        tmp80 = simd_or(simd_and(basis_bits.bit_3, tmp78), simd_andc(tmp79, basis_bits.bit_3));
        byte_range_8f_92 = simd_and(tmp76, tmp80);
        carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(12), sequence_f0_96_be_adv));
        tmp81 = simd_and(sequence_f0_96_be_adv, byte_range_8f_92);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp81);
        byte_9d = simd_and(tmp9, tmp66);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        tmp82 = simd_and(tmp39, tmp10);
        byte_85 = simd_and(tmp14, tmp82);
        carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(13), tmp83));
        sequence_f0_9d_85 = simd_and(tmp83, byte_85);
        carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(14), sequence_f0_9d_adv));
        sequence_f0_9d_85 = simd_and(sequence_f0_9d_adv, byte_85);
        tmp84 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp85 = simd_not(tmp84);
        tmp86 = simd_or(simd_and(basis_bits.bit_4, tmp85), simd_andc(tmp22, basis_bits.bit_4));
        tmp87 = simd_and(tmp44, tmp86);
        tmp88 = simd_or(basis_bits.bit_5, tmp21);
        tmp89 = simd_and(tmp18, tmp88);
        cc_range_1d167_1d17b_4 = simd_or(tmp87, tmp89);
        carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(15), sequence_f0_9d_85_adv));
        tmp90 = simd_and(sequence_f0_9d_85_adv, cc_range_1d167_1d17b_4);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp90);
        sequence_f0_9d_86 = simd_and(sequence_f0_9d_adv, byte_86);
        sequence_f0_9d_86 = simd_and(sequence_f0_9d_adv, byte_86);
        tmp91 = simd_or(simd_and(basis_bits.bit_4, tmp45), simd_andc(tmp50, basis_bits.bit_4));
        tmp92 = simd_and(tmp14, tmp91);
        tmp93 = simd_or(tmp42, tmp92);
        tmp94 = simd_and(tmp44, basis_bits.bit_4);
        tmp95 = simd_not(basis_bits.bit_6);
        tmp96 = simd_or(simd_and(basis_bits.bit_5, tmp95), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
        tmp97 = simd_and(tmp94, tmp96);
        cc_range_1d180_1d1aa_4 = simd_or(tmp93, tmp97);
        carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_86, carryQ.get_carry_in(16), sequence_f0_9d_86_adv));
        tmp98 = simd_and(sequence_f0_9d_86_adv, cc_range_1d180_1d1aa_4);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp98);
        tmp99 = simd_and(tmp33, tmp10);
        byte_89 = simd_and(tmp14, tmp99);
        sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
        sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
        tmp100 = simd_not(tmp5);
        tmp101 = simd_or(simd_and(basis_bits.bit_5, tmp100), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
        byte_range_82_84 = simd_and(tmp20, tmp101);
        carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_89, carryQ.get_carry_in(17), sequence_f0_9d_89_adv));
        tmp102 = simd_and(sequence_f0_9d_89_adv, byte_range_82_84);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp102);
        tmp103 = simd_andc(tmp21, tmp4);
        byte_f3 = simd_and(tmp3, tmp103);
        byte_a0 = simd_andc(tmp44, tmp6);
        carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(18), tmp104));
        sequence_f3_a0 = simd_and(tmp104, byte_a0);
        carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(19), byte_f3_adv));
        sequence_f3_a0 = simd_and(byte_f3_adv, byte_a0);
        tmp105 = simd_and(tmp14, tmp39);
        byte_range_84_86 = simd_andc(tmp105, tmp21);
        carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(20), tmp106));
        sequence_f3_a0_byte_range_84_86 = simd_and(tmp106, byte_range_84_86);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_84_86, carryQ.get_carry_in(21), tmp107));
        sequence_f3_a0_byte_range_84_86_sfx = simd_and(tmp107, byte_range_80_bf);
        struct_Mn.cc = simd_or(struct_Mn.cc, sequence_f3_a0_byte_range_84_86_sfx);
        tmp108 = simd_and(byte_range_80_bf, tmp43);
        tmp109 = simd_andc(byte_range_80_bf, tmp13);
        byte_87 = simd_and(tmp109, tmp71);
        carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(22), sequence_f3_a0_adv));
        sequence_f3_a0_87 = simd_and(sequence_f3_a0_adv, byte_87);
        byte_range_80_af = simd_andc(byte_range_80_bf, tmp2);
        carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_87, carryQ.get_carry_in(23), tmp110));
        sequence_f3_a0_87_byte_range_80_af = simd_and(tmp110, byte_range_80_af);
        struct_Mn.cc = simd_or(struct_Mn.cc, sequence_f3_a0_87_byte_range_80_af);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(24, 12))) {
          r80_7ff_tmp1 = simd_andc(tmp1, tmp13);
          r80_7ff_tmp2 = simd_andc(tmp53, tmp5);
          byte_cc = simd_and(r80_7ff_tmp1, r80_7ff_tmp2);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_cc, carryQ.get_carry_in(24), byte_cc_adv));
          r80_7ff_tmp3 = simd_and(byte_cc_adv, byte_range_80_bf);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp3);
          byte_cd = simd_and(r80_7ff_tmp1, tmp66);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(25), byte_cd_adv));
          r80_7ff_tmp4 = simd_and(byte_cd_adv, byte_range_80_af);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp4);
          r80_7ff_tmp5 = simd_and(tmp1, tmp8);
          byte_d2 = simd_and(r80_7ff_tmp5, tmp25);
          r80_7ff_tmp6 = simd_andc(tmp109, basis_bits.bit_4);
          byte_range_83_87 = simd_and(r80_7ff_tmp6, tmp88);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(26), byte_d2_adv));
          r80_7ff_tmp7 = simd_and(byte_d2_adv, byte_range_83_87);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp7);
          byte_d6 = simd_and(r80_7ff_tmp5, tmp58);
          r80_7ff_tmp8 = simd_and(tmp53, basis_bits.bit_6);
          r80_7ff_tmp9 = simd_and(basis_bits.bit_3, r80_7ff_tmp8);
          r80_7ff_tmp10 = simd_not(r80_7ff_tmp9);
          r80_7ff_tmp11 = simd_and(basis_bits.bit_3, tmp6);
          r80_7ff_tmp12 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp10), simd_andc(r80_7ff_tmp11, basis_bits.bit_2));
          r80_7ff_tmp13 = simd_and(byte_range_80_bf, r80_7ff_tmp12);
          r80_7ff_tmp14 = simd_and(byte_range_80_bf, tmp2);
          r80_7ff_tmp15 = simd_and(r80_7ff_tmp14, tmp79);
          cc_range_591_5bf_2 = simd_or(r80_7ff_tmp13, r80_7ff_tmp15);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(27), byte_d6_adv));
          r80_7ff_tmp16 = simd_and(byte_d6_adv, cc_range_591_5bf_2);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp16);
          byte_d7 = simd_and(r80_7ff_tmp5, tmp71);
          r80_7ff_tmp17 = simd_andc(tmp109, tmp4);
          r80_7ff_tmp18 = simd_and(r80_7ff_tmp17, tmp36);
          r80_7ff_tmp19 = simd_andc(tmp39, basis_bits.bit_6);
          r80_7ff_tmp20 = simd_and(tmp109, r80_7ff_tmp19);
          r80_7ff_tmp21 = simd_or(r80_7ff_tmp18, r80_7ff_tmp20);
          cc_range_5c1_5c7_2 = simd_or(r80_7ff_tmp21, byte_87);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(28), byte_d7_adv));
          r80_7ff_tmp22 = simd_and(byte_d7_adv, cc_range_5c1_5c7_2);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp22);
          r80_7ff_tmp23 = simd_andc(tmp33, tmp5);
          byte_d8 = simd_and(r80_7ff_tmp5, r80_7ff_tmp23);
          r80_7ff_tmp24 = simd_and(byte_range_80_bf, tmp8);
          r80_7ff_tmp25 = simd_and(basis_bits.bit_4, tmp88);
          byte_range_90_9a = simd_andc(r80_7ff_tmp24, r80_7ff_tmp25);
          carryQ.cq[29] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(29), byte_d8_adv));
          r80_7ff_tmp26 = simd_and(byte_d8_adv, byte_range_90_9a);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp26);
          byte_d9 = simd_and(r80_7ff_tmp5, tmp99);
          r80_7ff_tmp27 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
          r80_7ff_tmp28 = simd_or(basis_bits.bit_3, r80_7ff_tmp25);
          r80_7ff_tmp29 = simd_and(r80_7ff_tmp27, r80_7ff_tmp28);
          r80_7ff_tmp30 = simd_andc(r80_7ff_tmp14, tmp6);
          cc_range_64b_670_2 = simd_or(r80_7ff_tmp29, r80_7ff_tmp30);
          carryQ.cq[30] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(30), byte_d9_adv));
          r80_7ff_tmp31 = simd_and(byte_d9_adv, cc_range_64b_670_2);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp31);
          byte_db = simd_and(r80_7ff_tmp5, tmp65);
          r80_7ff_tmp32 = simd_not(tmp50);
          r80_7ff_tmp33 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp32), simd_andc(tmp60, basis_bits.bit_4));
          r80_7ff_tmp34 = simd_and(r80_7ff_tmp24, r80_7ff_tmp33);
          r80_7ff_tmp35 = simd_or(basis_bits.bit_3, tmp51);
          r80_7ff_tmp36 = simd_not(r80_7ff_tmp35);
          r80_7ff_tmp37 = simd_and(basis_bits.bit_3, tmp79);
          r80_7ff_tmp38 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp36), simd_andc(r80_7ff_tmp37, basis_bits.bit_2));
          r80_7ff_tmp39 = simd_and(byte_range_80_bf, r80_7ff_tmp38);
          r80_7ff_tmp40 = simd_or(r80_7ff_tmp34, r80_7ff_tmp39);
          r80_7ff_tmp41 = simd_or(basis_bits.bit_5, tmp5);
          r80_7ff_tmp42 = simd_not(r80_7ff_tmp41);
          r80_7ff_tmp43 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp42), simd_andc(tmp22, basis_bits.bit_4));
          r80_7ff_tmp44 = simd_and(tmp108, r80_7ff_tmp43);
          r80_7ff_tmp45 = simd_or(r80_7ff_tmp40, r80_7ff_tmp44);
          r80_7ff_tmp46 = simd_and(tmp108, basis_bits.bit_4);
          r80_7ff_tmp47 = simd_and(r80_7ff_tmp46, tmp96);
          cc_range_6d6_6ea_2 = simd_or(r80_7ff_tmp45, r80_7ff_tmp47);
          carryQ.cq[31] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(31), byte_db_adv));
          r80_7ff_tmp48 = simd_and(byte_db_adv, cc_range_6d6_6ea_2);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp48);
          byte_dc = simd_and(r80_7ff_tmp5, r80_7ff_tmp2);
          r80_7ff_tmp49 = simd_and(r80_7ff_tmp24, tmp11);
          cc_range_711_730_2 = simd_or(r80_7ff_tmp49, r80_7ff_tmp14);
          carryQ.cq[32] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(32), byte_dc_adv));
          r80_7ff_tmp50 = simd_and(byte_dc_adv, cc_range_711_730_2);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp50);
          byte_dd = simd_and(r80_7ff_tmp5, tmp66);
          byte_range_80_8a = simd_andc(tmp109, r80_7ff_tmp25);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(33), byte_dd_adv));
          r80_7ff_tmp51 = simd_and(byte_dd_adv, byte_range_80_8a);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp51);
          byte_de = simd_and(r80_7ff_tmp5, tmp74);
          r80_7ff_tmp52 = simd_and(byte_range_80_bf, basis_bits.bit_2);
          r80_7ff_tmp53 = simd_not(tmp6);
          r80_7ff_tmp54 = simd_or(basis_bits.bit_4, tmp60);
          r80_7ff_tmp55 = simd_or(simd_and(basis_bits.bit_3, r80_7ff_tmp53), simd_andc(r80_7ff_tmp54, basis_bits.bit_3));
          byte_range_a6_b0 = simd_and(r80_7ff_tmp52, r80_7ff_tmp55);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(34), byte_de_adv));
          r80_7ff_tmp56 = simd_and(byte_de_adv, byte_range_a6_b0);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp56);
          byte_df = simd_and(r80_7ff_tmp5, tmp79);
          r80_7ff_tmp57 = simd_not(tmp4);
          r80_7ff_tmp58 = simd_or(simd_and(basis_bits.bit_3, r80_7ff_tmp57), simd_andc(r80_7ff_tmp25, basis_bits.bit_3));
          byte_range_ab_b3 = simd_and(r80_7ff_tmp52, r80_7ff_tmp58);
          carryQ.cq[35] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(35), byte_df_adv));
          r80_7ff_tmp59 = simd_and(byte_df_adv, byte_range_ab_b3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp59);
        }
        else {
          carryQ.CarryDequeueEnqueue(24, 12);
        }
        byte_range_e0_ef = simd_and(tmp1, tmp43);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(36, 82))) {
          byte_e0 = simd_andc(byte_range_e0_ef, tmp6);
          carryQ.cq[36] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(36), r800_ffff_tmp1));
          sequence_e0_a0 = simd_and(r800_ffff_tmp1, byte_a0);
          carryQ.cq[37] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(37), byte_e0_adv));
          sequence_e0_a0 = simd_and(byte_e0_adv, byte_a0);
          r800_ffff_tmp2 = simd_and(byte_range_80_bf, tmp8);
          r800_ffff_tmp3 = simd_or(simd_and(basis_bits.bit_4, tmp85), simd_andc(tmp60, basis_bits.bit_4));
          r800_ffff_tmp4 = simd_and(r800_ffff_tmp2, r800_ffff_tmp3);
          r800_ffff_tmp5 = simd_or(basis_bits.bit_3, tmp4);
          r800_ffff_tmp6 = simd_not(r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_and(basis_bits.bit_4, tmp88);
          r800_ffff_tmp8 = simd_and(basis_bits.bit_3, r800_ffff_tmp7);
          r800_ffff_tmp9 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp6), simd_andc(r800_ffff_tmp8, basis_bits.bit_2));
          r800_ffff_tmp10 = simd_and(byte_range_80_bf, r800_ffff_tmp9);
          r800_ffff_tmp11 = simd_or(r800_ffff_tmp4, r800_ffff_tmp10);
          r800_ffff_tmp12 = simd_and(tmp108, tmp39);
          r800_ffff_tmp13 = simd_and(r800_ffff_tmp12, tmp5);
          r800_ffff_tmp14 = simd_or(r800_ffff_tmp11, r800_ffff_tmp13);
          r800_ffff_tmp15 = simd_and(tmp108, basis_bits.bit_4);
          r800_ffff_tmp16 = simd_or(simd_and(basis_bits.bit_5, tmp95), simd_andc(tmp5, basis_bits.bit_5));
          r800_ffff_tmp17 = simd_and(r800_ffff_tmp15, r800_ffff_tmp16);
          cc_range_816_829_3 = simd_or(r800_ffff_tmp14, r800_ffff_tmp17);
          carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(38), sequence_e0_a0_adv));
          r800_ffff_tmp18 = simd_and(sequence_e0_a0_adv, cc_range_816_829_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp18);
          byte_a1 = simd_and(tmp108, tmp11);
          sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
          sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
          r800_ffff_tmp19 = simd_and(r800_ffff_tmp2, tmp33);
          byte_range_99_9b = simd_and(r800_ffff_tmp19, tmp5);
          carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(39), sequence_e0_a1_adv));
          r800_ffff_tmp20 = simd_and(sequence_e0_a1_adv, byte_range_99_9b);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp20);
          byte_a3 = simd_and(tmp108, tmp103);
          sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
          sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
          r800_ffff_tmp21 = simd_and(byte_range_80_bf, basis_bits.bit_2);
          r800_ffff_tmp22 = simd_not(tmp79);
          r800_ffff_tmp23 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp22), simd_andc(tmp4, basis_bits.bit_3));
          byte_range_a4_be = simd_and(r800_ffff_tmp21, r800_ffff_tmp23);
          carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e0_a3, carryQ.get_carry_in(40), sequence_e0_a3_adv));
          r800_ffff_tmp24 = simd_and(sequence_e0_a3_adv, byte_range_a4_be);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp24);
          byte_a4 = simd_and(tmp108, tmp40);
          sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
          sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
          r800_ffff_tmp25 = simd_andc(tmp109, tmp4);
          r800_ffff_tmp26 = simd_andc(r800_ffff_tmp25, tmp21);
          r800_ffff_tmp27 = simd_and(byte_range_80_bf, tmp2);
          r800_ffff_tmp28 = simd_and(r800_ffff_tmp27, tmp64);
          r800_ffff_tmp29 = simd_or(r800_ffff_tmp26, r800_ffff_tmp28);
          r800_ffff_tmp30 = simd_andc(tmp53, tmp5);
          r800_ffff_tmp31 = simd_and(r800_ffff_tmp27, r800_ffff_tmp30);
          cc_range_900_93c_3 = simd_or(r800_ffff_tmp29, r800_ffff_tmp31);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(41), sequence_e0_a4_adv));
          r800_ffff_tmp32 = simd_and(sequence_e0_a4_adv, cc_range_900_93c_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp32);
          byte_a5 = simd_and(tmp108, tmp82);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          r800_ffff_tmp33 = simd_or(basis_bits.bit_5, tmp5);
          r800_ffff_tmp34 = simd_not(r800_ffff_tmp33);
          r800_ffff_tmp35 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp34), simd_andc(r800_ffff_tmp33, basis_bits.bit_4));
          r800_ffff_tmp36 = simd_or(r800_ffff_tmp35, tmp66);
          r800_ffff_tmp37 = simd_and(tmp109, r800_ffff_tmp36);
          r800_ffff_tmp38 = simd_andc(r800_ffff_tmp2, basis_bits.bit_4);
          r800_ffff_tmp39 = simd_and(r800_ffff_tmp38, r800_ffff_tmp33);
          r800_ffff_tmp40 = simd_or(r800_ffff_tmp37, r800_ffff_tmp39);
          r800_ffff_tmp41 = simd_andc(basis_bits.bit_6, tmp4);
          r800_ffff_tmp42 = simd_and(tmp108, r800_ffff_tmp41);
          cc_range_941_962_3 = simd_or(r800_ffff_tmp40, r800_ffff_tmp42);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(42), sequence_e0_a5_adv));
          r800_ffff_tmp43 = simd_and(sequence_e0_a5_adv, cc_range_941_962_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp43);
          byte_a6 = simd_and(tmp108, tmp58);
          sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
          sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
          r800_ffff_tmp44 = simd_and(tmp109, tmp11);
          cc_range_981_9bc_3 = simd_or(r800_ffff_tmp44, r800_ffff_tmp31);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(43), sequence_e0_a6_adv));
          r800_ffff_tmp45 = simd_and(sequence_e0_a6_adv, cc_range_981_9bc_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp45);
          byte_a7 = simd_and(tmp108, tmp71);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          r800_ffff_tmp46 = simd_andc(tmp109, basis_bits.bit_4);
          r800_ffff_tmp47 = simd_or(simd_and(basis_bits.bit_5, tmp100), simd_andc(tmp5, basis_bits.bit_5));
          r800_ffff_tmp48 = simd_and(r800_ffff_tmp46, r800_ffff_tmp47);
          r800_ffff_tmp49 = simd_and(tmp109, tmp66);
          r800_ffff_tmp50 = simd_or(r800_ffff_tmp48, r800_ffff_tmp49);
          cc_range_9c1_9e2_3 = simd_or(r800_ffff_tmp50, r800_ffff_tmp42);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(44), sequence_e0_a7_adv));
          r800_ffff_tmp51 = simd_and(sequence_e0_a7_adv, cc_range_9c1_9e2_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp51);
          r800_ffff_tmp52 = simd_andc(tmp33, tmp5);
          byte_a8 = simd_and(tmp108, r800_ffff_tmp52);
          sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
          sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
          r800_ffff_tmp53 = simd_and(r800_ffff_tmp25, tmp36);
          cc_range_a01_a3c_3 = simd_or(r800_ffff_tmp53, r800_ffff_tmp31);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(45), sequence_e0_a8_adv));
          r800_ffff_tmp54 = simd_and(sequence_e0_a8_adv, cc_range_a01_a3c_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp54);
          byte_a9 = simd_and(tmp108, tmp99);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          r800_ffff_tmp55 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp34), simd_andc(tmp22, basis_bits.bit_4));
          r800_ffff_tmp56 = simd_and(tmp109, r800_ffff_tmp55);
          r800_ffff_tmp57 = simd_or(r800_ffff_tmp53, r800_ffff_tmp56);
          r800_ffff_tmp58 = simd_and(tmp109, basis_bits.bit_4);
          r800_ffff_tmp59 = simd_or(simd_and(basis_bits.bit_5, tmp95), simd_andc(tmp21, basis_bits.bit_5));
          r800_ffff_tmp60 = simd_and(r800_ffff_tmp58, r800_ffff_tmp59);
          r800_ffff_tmp61 = simd_or(r800_ffff_tmp57, r800_ffff_tmp60);
          r800_ffff_tmp62 = simd_and(r800_ffff_tmp2, tmp11);
          r800_ffff_tmp63 = simd_or(r800_ffff_tmp61, r800_ffff_tmp62);
          r800_ffff_tmp64 = simd_andc(r800_ffff_tmp27, tmp26);
          r800_ffff_tmp65 = simd_or(r800_ffff_tmp63, r800_ffff_tmp64);
          r800_ffff_tmp66 = simd_and(r800_ffff_tmp27, tmp82);
          cc_range_a41_a75_3 = simd_or(r800_ffff_tmp65, r800_ffff_tmp66);
          carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(46), sequence_e0_a9_adv));
          r800_ffff_tmp67 = simd_and(sequence_e0_a9_adv, cc_range_a41_a75_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp67);
          byte_aa = simd_and(tmp108, tmp64);
          sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
          sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
          cc_range_a81_abc_3 = simd_or(r800_ffff_tmp53, r800_ffff_tmp31);
          carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(47), sequence_e0_aa_adv));
          r800_ffff_tmp68 = simd_and(sequence_e0_aa_adv, cc_range_a81_abc_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp68);
          byte_ab = simd_and(tmp108, tmp65);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          r800_ffff_tmp69 = simd_and(r800_ffff_tmp46, r800_ffff_tmp16);
          r800_ffff_tmp70 = simd_or(r800_ffff_tmp69, r800_ffff_tmp56);
          r800_ffff_tmp71 = simd_or(r800_ffff_tmp70, r800_ffff_tmp49);
          cc_range_ac1_ae2_3 = simd_or(r800_ffff_tmp71, r800_ffff_tmp42);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(48), sequence_e0_ab_adv));
          r800_ffff_tmp72 = simd_and(sequence_e0_ab_adv, cc_range_ac1_ae2_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp72);
          byte_ac = simd_and(tmp108, r800_ffff_tmp30);
          sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
          sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
          r800_ffff_tmp73 = simd_and(r800_ffff_tmp27, tmp79);
          cc_range_b01_b3f_3 = simd_or(cc_range_981_9bc_3, r800_ffff_tmp73);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(49), sequence_e0_ac_adv));
          r800_ffff_tmp74 = simd_and(sequence_e0_ac_adv, cc_range_b01_b3f_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp74);
          byte_ad = simd_and(tmp108, tmp66);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          r800_ffff_tmp75 = simd_and(r800_ffff_tmp2, tmp58);
          r800_ffff_tmp76 = simd_or(r800_ffff_tmp50, r800_ffff_tmp75);
          cc_range_b41_b62_3 = simd_or(r800_ffff_tmp76, r800_ffff_tmp42);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(50), sequence_e0_ad_adv));
          r800_ffff_tmp77 = simd_and(sequence_e0_ad_adv, cc_range_b41_b62_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp77);
          byte_ae = simd_and(tmp108, tmp74);
          sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
          sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(51), sequence_e0_ae_adv));
          r800_ffff_tmp78 = simd_and(sequence_e0_ae_adv, byte_82);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp78);
          byte_af = simd_and(tmp108, tmp79);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          r800_ffff_tmp79 = simd_andc(tmp6, tmp66);
          cc_range_bc0_bcd_3 = simd_andc(tmp109, r800_ffff_tmp79);
          carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(52), sequence_e0_af_adv));
          r800_ffff_tmp80 = simd_and(sequence_e0_af_adv, cc_range_bc0_bcd_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp80);
          byte_b0 = simd_andc(r800_ffff_tmp27, tmp6);
          sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
          sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
          r800_ffff_tmp81 = simd_and(tmp53, basis_bits.bit_6);
          byte_range_be_bf = simd_and(r800_ffff_tmp27, r800_ffff_tmp81);
          carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(53), sequence_e0_b0_adv));
          r800_ffff_tmp82 = simd_and(sequence_e0_b0_adv, byte_range_be_bf);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp82);
          byte_b1 = simd_and(r800_ffff_tmp27, tmp11);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          r800_ffff_tmp83 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp34), simd_andc(tmp60, basis_bits.bit_4));
          r800_ffff_tmp84 = simd_andc(tmp6, r800_ffff_tmp83);
          r800_ffff_tmp85 = simd_andc(tmp109, r800_ffff_tmp84);
          r800_ffff_tmp86 = simd_and(r800_ffff_tmp58, tmp96);
          r800_ffff_tmp87 = simd_or(r800_ffff_tmp85, r800_ffff_tmp86);
          r800_ffff_tmp88 = simd_and(r800_ffff_tmp2, tmp39);
          r800_ffff_tmp89 = simd_and(r800_ffff_tmp88, tmp36);
          r800_ffff_tmp90 = simd_or(r800_ffff_tmp87, r800_ffff_tmp89);
          cc_range_c40_c62_3 = simd_or(r800_ffff_tmp90, r800_ffff_tmp42);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(54), sequence_e0_b1_adv));
          r800_ffff_tmp91 = simd_and(sequence_e0_b1_adv, cc_range_c40_c62_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp91);
          byte_b2 = simd_and(r800_ffff_tmp27, tmp25);
          sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
          sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
          r800_ffff_tmp92 = simd_andc(tmp5, tmp21);
          r800_ffff_tmp93 = simd_andc(tmp53, r800_ffff_tmp92);
          cc_range_cbc_cbf_3 = simd_and(r800_ffff_tmp27, r800_ffff_tmp93);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(55), sequence_e0_b2_adv));
          r800_ffff_tmp94 = simd_and(sequence_e0_b2_adv, cc_range_cbc_cbf_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp94);
          byte_b3 = simd_and(r800_ffff_tmp27, tmp103);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          r800_ffff_tmp95 = simd_andc(tmp53, basis_bits.bit_6);
          r800_ffff_tmp96 = simd_or(tmp58, r800_ffff_tmp95);
          r800_ffff_tmp97 = simd_and(tmp109, r800_ffff_tmp96);
          cc_range_cc6_ce2_3 = simd_or(r800_ffff_tmp97, r800_ffff_tmp42);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(56), sequence_e0_b3_adv));
          r800_ffff_tmp98 = simd_and(sequence_e0_b3_adv, cc_range_cc6_ce2_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp98);
          byte_b5 = simd_and(r800_ffff_tmp27, tmp82);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          cc_range_d41_d62_3 = simd_or(r800_ffff_tmp50, r800_ffff_tmp42);
          carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(57), sequence_e0_b5_adv));
          r800_ffff_tmp99 = simd_and(sequence_e0_b5_adv, cc_range_d41_d62_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp99);
          byte_b7 = simd_and(r800_ffff_tmp27, tmp71);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          r800_ffff_tmp100 = simd_and(tmp109, tmp64);
          r800_ffff_tmp101 = simd_and(r800_ffff_tmp38, tmp101);
          r800_ffff_tmp102 = simd_or(r800_ffff_tmp100, r800_ffff_tmp101);
          cc_range_dca_dd6_3 = simd_or(r800_ffff_tmp102, r800_ffff_tmp75);
          carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(58), sequence_e0_b7_adv));
          r800_ffff_tmp103 = simd_and(sequence_e0_b7_adv, cc_range_dca_dd6_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp103);
          byte_b8 = simd_and(r800_ffff_tmp27, r800_ffff_tmp52);
          sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
          sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
          r800_ffff_tmp104 = simd_not(tmp88);
          r800_ffff_tmp105 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp104), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          r800_ffff_tmp106 = simd_or(tmp11, r800_ffff_tmp105);
          cc_range_e31_e34_3 = simd_and(r800_ffff_tmp27, r800_ffff_tmp106);
          carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(59), sequence_e0_b8_adv));
          r800_ffff_tmp107 = simd_and(sequence_e0_b8_adv, cc_range_e31_e34_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp107);
          byte_b9 = simd_and(r800_ffff_tmp27, tmp99);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          r800_ffff_tmp108 = simd_or(simd_and(basis_bits.bit_4, tmp59), simd_andc(tmp22, basis_bits.bit_4));
          byte_range_87_8e = simd_and(tmp109, r800_ffff_tmp108);
          carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(60), sequence_e0_b9_adv));
          r800_ffff_tmp109 = simd_and(sequence_e0_b9_adv, byte_range_87_8e);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp109);
          byte_ba = simd_and(r800_ffff_tmp27, tmp64);
          sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
          sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
          r800_ffff_tmp110 = simd_or(simd_and(basis_bits.bit_4, tmp85), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          r800_ffff_tmp111 = simd_or(tmp11, r800_ffff_tmp110);
          r800_ffff_tmp112 = simd_and(r800_ffff_tmp27, r800_ffff_tmp111);
          r800_ffff_tmp113 = simd_and(r800_ffff_tmp27, basis_bits.bit_4);
          r800_ffff_tmp114 = simd_or(simd_and(basis_bits.bit_5, tmp100), simd_andc(tmp21, basis_bits.bit_5));
          r800_ffff_tmp115 = simd_and(r800_ffff_tmp113, r800_ffff_tmp114);
          cc_range_eb1_ebb_3 = simd_or(r800_ffff_tmp112, r800_ffff_tmp115);
          carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(61), sequence_e0_ba_adv));
          r800_ffff_tmp116 = simd_and(sequence_e0_ba_adv, cc_range_eb1_ebb_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp116);
          byte_bb = simd_and(r800_ffff_tmp27, tmp65);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          byte_range_88_8d = simd_andc(r800_ffff_tmp58, tmp60);
          carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(62), sequence_e0_bb_adv));
          r800_ffff_tmp117 = simd_and(sequence_e0_bb_adv, byte_range_88_8d);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp117);
          byte_bc = simd_and(r800_ffff_tmp27, r800_ffff_tmp30);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          r800_ffff_tmp118 = simd_andc(tmp33, basis_bits.bit_6);
          r800_ffff_tmp119 = simd_and(r800_ffff_tmp2, r800_ffff_tmp118);
          r800_ffff_tmp120 = simd_or(r800_ffff_tmp119, byte_b5);
          r800_ffff_tmp121 = simd_or(r800_ffff_tmp120, byte_b7);
          cc_range_f18_f39_3 = simd_or(r800_ffff_tmp121, byte_b9);
          carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(63), sequence_e0_bc_adv));
          r800_ffff_tmp122 = simd_and(sequence_e0_bc_adv, cc_range_f18_f39_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp122);
          byte_bd = simd_and(r800_ffff_tmp27, tmp66);
          sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
          sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
          r800_ffff_tmp123 = simd_or(simd_and(basis_bits.bit_4, tmp59), simd_andc(r800_ffff_tmp33, basis_bits.bit_4));
          byte_range_b1_be = simd_and(r800_ffff_tmp27, r800_ffff_tmp123);
          carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(64), sequence_e0_bd_adv));
          r800_ffff_tmp124 = simd_and(sequence_e0_bd_adv, byte_range_b1_be);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp124);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          r800_ffff_tmp125 = simd_andc(r800_ffff_tmp46, tmp50);
          r800_ffff_tmp126 = simd_and(tmp39, basis_bits.bit_6);
          r800_ffff_tmp127 = simd_and(tmp109, r800_ffff_tmp126);
          r800_ffff_tmp128 = simd_or(r800_ffff_tmp125, r800_ffff_tmp127);
          r800_ffff_tmp129 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
          r800_ffff_tmp130 = simd_not(basis_bits.bit_4);
          r800_ffff_tmp131 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp130), simd_andc(tmp54, basis_bits.bit_3));
          r800_ffff_tmp132 = simd_and(r800_ffff_tmp129, r800_ffff_tmp131);
          r800_ffff_tmp133 = simd_or(r800_ffff_tmp128, r800_ffff_tmp132);
          r800_ffff_tmp134 = simd_and(basis_bits.bit_3, tmp54);
          r800_ffff_tmp135 = simd_not(r800_ffff_tmp134);
          r800_ffff_tmp136 = simd_and(basis_bits.bit_4, r800_ffff_tmp33);
          r800_ffff_tmp137 = simd_and(basis_bits.bit_3, r800_ffff_tmp136);
          r800_ffff_tmp138 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp135), simd_andc(r800_ffff_tmp137, basis_bits.bit_2));
          r800_ffff_tmp139 = simd_and(byte_range_80_bf, r800_ffff_tmp138);
          cc_range_f80_f99_3 = simd_or(r800_ffff_tmp133, r800_ffff_tmp139);
          carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(65), sequence_e0_be_adv));
          r800_ffff_tmp140 = simd_and(sequence_e0_be_adv, cc_range_f80_f99_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp140);
          byte_bf = simd_and(r800_ffff_tmp27, tmp79);
          sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
          sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
          carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(66), sequence_e0_bf_adv));
          r800_ffff_tmp141 = simd_and(sequence_e0_bf_adv, byte_86);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp141);
          byte_e1 = simd_and(byte_range_e0_ef, tmp11);
          carryQ.cq[67] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(67), r800_ffff_tmp142));
          sequence_e1_80 = simd_and(r800_ffff_tmp142, byte_80);
          carryQ.cq[68] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(68), byte_e1_adv));
          sequence_e1_80 = simd_and(byte_e1_adv, byte_80);
          r800_ffff_tmp143 = simd_not(tmp6);
          r800_ffff_tmp144 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp143), simd_andc(tmp54, basis_bits.bit_3));
          r800_ffff_tmp145 = simd_and(r800_ffff_tmp21, r800_ffff_tmp144);
          r800_ffff_tmp146 = simd_andc(r800_ffff_tmp27, basis_bits.bit_4);
          r800_ffff_tmp147 = simd_and(r800_ffff_tmp146, tmp84);
          r800_ffff_tmp148 = simd_or(r800_ffff_tmp145, r800_ffff_tmp147);
          r800_ffff_tmp149 = simd_and(r800_ffff_tmp27, tmp33);
          r800_ffff_tmp150 = simd_and(r800_ffff_tmp149, tmp36);
          r800_ffff_tmp151 = simd_or(r800_ffff_tmp148, r800_ffff_tmp150);
          r800_ffff_tmp152 = simd_and(r800_ffff_tmp27, tmp53);
          r800_ffff_tmp153 = simd_and(r800_ffff_tmp152, tmp36);
          cc_range_102d_103d_3 = simd_or(r800_ffff_tmp151, r800_ffff_tmp153);
          carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(69), sequence_e1_80_adv));
          r800_ffff_tmp154 = simd_and(sequence_e1_80_adv, cc_range_102d_103d_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp154);
          sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
          sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
          r800_ffff_tmp155 = simd_or(basis_bits.bit_3, tmp6);
          r800_ffff_tmp156 = simd_not(r800_ffff_tmp155);
          r800_ffff_tmp157 = simd_and(basis_bits.bit_3, r800_ffff_tmp81);
          r800_ffff_tmp158 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp156), simd_andc(r800_ffff_tmp157, basis_bits.bit_2));
          r800_ffff_tmp159 = simd_and(byte_range_80_bf, r800_ffff_tmp158);
          r800_ffff_tmp160 = simd_or(r800_ffff_tmp119, r800_ffff_tmp159);
          r800_ffff_tmp161 = simd_and(r800_ffff_tmp146, r800_ffff_tmp47);
          cc_range_1058_1071_3 = simd_or(r800_ffff_tmp160, r800_ffff_tmp161);
          carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(70), sequence_e1_81_adv));
          r800_ffff_tmp162 = simd_and(sequence_e1_81_adv, cc_range_1058_1071_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp162);
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          r800_ffff_tmp163 = simd_and(tmp109, tmp25);
          r800_ffff_tmp164 = simd_and(tmp109, tmp39);
          r800_ffff_tmp165 = simd_and(r800_ffff_tmp164, tmp36);
          r800_ffff_tmp166 = simd_or(r800_ffff_tmp163, r800_ffff_tmp165);
          r800_ffff_tmp167 = simd_or(r800_ffff_tmp166, r800_ffff_tmp49);
          r800_ffff_tmp168 = simd_and(r800_ffff_tmp2, tmp66);
          cc_range_1082_109d_3 = simd_or(r800_ffff_tmp167, r800_ffff_tmp168);
          carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(71), sequence_e1_82_adv));
          r800_ffff_tmp169 = simd_and(sequence_e1_82_adv, cc_range_1082_109d_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp169);
          byte_8d = simd_and(tmp109, tmp66);
          sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
          sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
          r800_ffff_tmp170 = simd_and(r800_ffff_tmp2, tmp53);
          byte_range_9d_9f = simd_and(r800_ffff_tmp170, tmp5);
          carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(72), sequence_e1_8d_adv));
          r800_ffff_tmp171 = simd_and(sequence_e1_8d_adv, byte_range_9d_9f);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp171);
          byte_9c = simd_and(r800_ffff_tmp2, r800_ffff_tmp30);
          sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
          sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
          r800_ffff_tmp172 = simd_and(byte_range_80_bf, basis_bits.bit_3);
          r800_ffff_tmp173 = simd_andc(r800_ffff_tmp172, basis_bits.bit_4);
          cc_range_1712_1732_3 = simd_and(tmp101, r800_ffff_tmp173);
          carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(73), sequence_e1_9c_adv));
          r800_ffff_tmp174 = simd_and(sequence_e1_9c_adv, cc_range_1712_1732_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp174);
          sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
          sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
          cc_range_1752_1772_3 = simd_and(r800_ffff_tmp41, r800_ffff_tmp172);
          carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(74), sequence_e1_9d_adv));
          r800_ffff_tmp175 = simd_and(sequence_e1_9d_adv, cc_range_1752_1772_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp175);
          byte_9e = simd_and(r800_ffff_tmp2, tmp74);
          sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
          sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
          r800_ffff_tmp176 = simd_andc(tmp39, basis_bits.bit_6);
          r800_ffff_tmp177 = simd_not(tmp60);
          r800_ffff_tmp178 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp177), simd_andc(tmp22, basis_bits.bit_4));
          r800_ffff_tmp179 = simd_or(r800_ffff_tmp176, r800_ffff_tmp178);
          cc_range_17b4_17b7_3 = simd_and(r800_ffff_tmp27, r800_ffff_tmp179);
          carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(75), sequence_e1_9e_adv));
          r800_ffff_tmp180 = simd_and(sequence_e1_9e_adv, cc_range_17b4_17b7_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp180);
          byte_9f = simd_and(r800_ffff_tmp2, tmp79);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          r800_ffff_tmp181 = simd_and(tmp109, tmp58);
          r800_ffff_tmp182 = simd_not(tmp4);
          r800_ffff_tmp183 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp182), simd_andc(r800_ffff_tmp136, basis_bits.bit_3));
          r800_ffff_tmp184 = simd_and(r800_ffff_tmp129, r800_ffff_tmp183);
          r800_ffff_tmp185 = simd_or(r800_ffff_tmp181, r800_ffff_tmp184);
          cc_range_17c6_17dd_3 = simd_or(r800_ffff_tmp185, r800_ffff_tmp168);
          carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(76), sequence_e1_9f_adv));
          r800_ffff_tmp186 = simd_and(sequence_e1_9f_adv, cc_range_17c6_17dd_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp186);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          byte_range_8b_8d = simd_and(r800_ffff_tmp58, r800_ffff_tmp59);
          carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(77), sequence_e1_a0_adv));
          r800_ffff_tmp187 = simd_and(sequence_e1_a0_adv, byte_range_8b_8d);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp187);
          byte_a2 = simd_and(tmp108, tmp25);
          sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
          sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
          carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(78), sequence_e1_a2_adv));
          r800_ffff_tmp188 = simd_and(sequence_e1_a2_adv, byte_a9);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp188);
          sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
          sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
          r800_ffff_tmp189 = simd_andc(tmp108, tmp4);
          r800_ffff_tmp190 = simd_andc(r800_ffff_tmp189, tmp21);
          r800_ffff_tmp191 = simd_and(tmp108, r800_ffff_tmp55);
          r800_ffff_tmp192 = simd_or(r800_ffff_tmp190, r800_ffff_tmp191);
          r800_ffff_tmp193 = simd_or(r800_ffff_tmp192, byte_b2);
          r800_ffff_tmp194 = simd_and(r800_ffff_tmp149, tmp5);
          cc_range_1920_1939_3 = simd_or(r800_ffff_tmp193, r800_ffff_tmp194);
          carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(79), sequence_e1_a4_adv));
          r800_ffff_tmp195 = simd_and(sequence_e1_a4_adv, cc_range_1920_1939_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp195);
          sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
          sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
          r800_ffff_tmp196 = simd_or(r800_ffff_tmp55, tmp65);
          cc_range_1a17_1a1b_3 = simd_and(r800_ffff_tmp2, r800_ffff_tmp196);
          carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(80), sequence_e1_a8_adv));
          r800_ffff_tmp197 = simd_and(sequence_e1_a8_adv, cc_range_1a17_1a1b_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp197);
          sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
          sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
          r800_ffff_tmp198 = simd_and(r800_ffff_tmp2, basis_bits.bit_4);
          r800_ffff_tmp199 = simd_andc(r800_ffff_tmp198, tmp22);
          r800_ffff_tmp200 = simd_or(r800_ffff_tmp75, r800_ffff_tmp199);
          r800_ffff_tmp201 = simd_andc(tmp108, tmp6);
          r800_ffff_tmp202 = simd_or(r800_ffff_tmp200, r800_ffff_tmp201);
          r800_ffff_tmp203 = simd_or(r800_ffff_tmp202, byte_a2);
          r800_ffff_tmp204 = simd_not(tmp50);
          r800_ffff_tmp205 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp204), simd_andc(tmp50, basis_bits.bit_4));
          r800_ffff_tmp206 = simd_and(tmp108, r800_ffff_tmp205);
          r800_ffff_tmp207 = simd_or(r800_ffff_tmp203, r800_ffff_tmp206);
          r800_ffff_tmp208 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp204), simd_andc(tmp88, basis_bits.bit_4));
          r800_ffff_tmp209 = simd_and(r800_ffff_tmp27, r800_ffff_tmp208);
          r800_ffff_tmp210 = simd_or(r800_ffff_tmp207, r800_ffff_tmp209);
          cc_range_1a56_1a7f_3 = simd_or(r800_ffff_tmp210, byte_bf);
          carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(81), sequence_e1_a9_adv));
          r800_ffff_tmp211 = simd_and(sequence_e1_a9_adv, cc_range_1a56_1a7f_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp211);
          sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
          sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
          r800_ffff_tmp212 = simd_and(r800_ffff_tmp27, tmp40);
          r800_ffff_tmp213 = simd_or(r800_ffff_tmp25, r800_ffff_tmp212);
          r800_ffff_tmp214 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp104), simd_andc(tmp60, basis_bits.bit_4));
          r800_ffff_tmp215 = simd_and(r800_ffff_tmp27, r800_ffff_tmp214);
          r800_ffff_tmp216 = simd_or(r800_ffff_tmp213, r800_ffff_tmp215);
          cc_range_1b00_1b3c_3 = simd_or(r800_ffff_tmp216, byte_bc);
          carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(82), sequence_e1_ac_adv));
          r800_ffff_tmp217 = simd_and(sequence_e1_ac_adv, cc_range_1b00_1b3c_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp217);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          r800_ffff_tmp218 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp182), simd_andc(r800_ffff_tmp7, basis_bits.bit_3));
          r800_ffff_tmp219 = simd_and(r800_ffff_tmp21, r800_ffff_tmp218);
          cc_range_1b42_1b6b_3 = simd_or(r800_ffff_tmp163, r800_ffff_tmp219);
          carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(83), sequence_e1_ad_adv));
          r800_ffff_tmp220 = simd_and(sequence_e1_ad_adv, cc_range_1b42_1b6b_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp220);
          sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
          sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
          r800_ffff_tmp221 = simd_andc(tmp109, tmp26);
          r800_ffff_tmp222 = simd_andc(tmp108, basis_bits.bit_4);
          r800_ffff_tmp223 = simd_and(r800_ffff_tmp222, tmp96);
          r800_ffff_tmp224 = simd_or(r800_ffff_tmp221, r800_ffff_tmp223);
          r800_ffff_tmp225 = simd_and(tmp108, r800_ffff_tmp118);
          r800_ffff_tmp226 = simd_or(r800_ffff_tmp224, r800_ffff_tmp225);
          cc_range_1b80_1bab_3 = simd_or(r800_ffff_tmp226, byte_ab);
          carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(84), sequence_e1_ae_adv));
          r800_ffff_tmp227 = simd_and(sequence_e1_ae_adv, cc_range_1b80_1bab_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp227);
          sequence_e1_af = simd_and(byte_e1_adv, byte_af);
          sequence_e1_af = simd_and(byte_e1_adv, byte_af);
          r800_ffff_tmp228 = simd_or(tmp58, r800_ffff_tmp118);
          r800_ffff_tmp229 = simd_or(r800_ffff_tmp228, tmp66);
          r800_ffff_tmp230 = simd_and(tmp108, r800_ffff_tmp229);
          r800_ffff_tmp231 = simd_not(tmp26);
          r800_ffff_tmp232 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp231), simd_andc(tmp79, basis_bits.bit_3));
          r800_ffff_tmp233 = simd_and(r800_ffff_tmp21, r800_ffff_tmp232);
          cc_range_1be6_1bef_3 = simd_or(r800_ffff_tmp230, r800_ffff_tmp233);
          carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(85), sequence_e1_af_adv));
          r800_ffff_tmp234 = simd_and(sequence_e1_af_adv, cc_range_1be6_1bef_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp234);
          sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
          sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
          r800_ffff_tmp235 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp182), simd_andc(tmp53, basis_bits.bit_3));
          r800_ffff_tmp236 = simd_and(r800_ffff_tmp21, r800_ffff_tmp235);
          r800_ffff_tmp237 = simd_and(r800_ffff_tmp27, r800_ffff_tmp126);
          cc_range_1c2c_1c36_3 = simd_or(r800_ffff_tmp236, r800_ffff_tmp237);
          carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(86), sequence_e1_b0_adv));
          r800_ffff_tmp238 = simd_and(sequence_e1_b0_adv, cc_range_1c2c_1c36_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp238);
          sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
          sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
          r800_ffff_tmp239 = simd_andc(r800_ffff_tmp2, tmp4);
          r800_ffff_tmp240 = simd_andc(r800_ffff_tmp239, tmp21);
          r800_ffff_tmp241 = simd_and(basis_bits.bit_3, tmp4);
          r800_ffff_tmp242 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp156), simd_andc(r800_ffff_tmp241, basis_bits.bit_2));
          r800_ffff_tmp243 = simd_and(byte_range_80_bf, r800_ffff_tmp242);
          r800_ffff_tmp244 = simd_or(r800_ffff_tmp240, r800_ffff_tmp243);
          r800_ffff_tmp245 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp34), simd_andc(tmp84, basis_bits.bit_4));
          r800_ffff_tmp246 = simd_and(tmp108, r800_ffff_tmp245);
          r800_ffff_tmp247 = simd_or(r800_ffff_tmp244, r800_ffff_tmp246);
          r800_ffff_tmp248 = simd_or(r800_ffff_tmp247, byte_ad);
          cc_range_1cd0_1cf4_3 = simd_or(r800_ffff_tmp248, r800_ffff_tmp212);
          carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(87), sequence_e1_b3_adv));
          r800_ffff_tmp249 = simd_and(sequence_e1_b3_adv, cc_range_1cd0_1cf4_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp249);
          sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
          sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
          r800_ffff_tmp250 = simd_or(basis_bits.bit_4, tmp22);
          r800_ffff_tmp251 = simd_or(basis_bits.bit_3, r800_ffff_tmp250);
          r800_ffff_tmp252 = simd_and(basis_bits.bit_2, r800_ffff_tmp251);
          r800_ffff_tmp253 = simd_andc(byte_range_80_bf, r800_ffff_tmp252);
          cc_range_1dc0_1dfc_3 = simd_or(r800_ffff_tmp253, r800_ffff_tmp152);
          carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e1_b7, carryQ.get_carry_in(88), sequence_e1_b7_adv));
          r800_ffff_tmp254 = simd_and(sequence_e1_b7_adv, cc_range_1dc0_1dfc_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp254);
          byte_e2 = simd_and(byte_range_e0_ef, tmp25);
          byte_83 = simd_and(tmp109, tmp103);
          carryQ.cq[89] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(89), r800_ffff_tmp255));
          sequence_e2_83 = simd_and(r800_ffff_tmp255, byte_83);
          carryQ.cq[90] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(90), byte_e2_adv));
          sequence_e2_83 = simd_and(byte_e2_adv, byte_83);
          r800_ffff_tmp256 = simd_and(basis_bits.bit_4, tmp50);
          r800_ffff_tmp257 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp256);
          r800_ffff_tmp258 = simd_or(r800_ffff_tmp257, byte_a1);
          r800_ffff_tmp259 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp143), simd_andc(tmp51, basis_bits.bit_3));
          r800_ffff_tmp260 = simd_and(r800_ffff_tmp21, r800_ffff_tmp259);
          cc_range_20d0_20e5_3 = simd_or(r800_ffff_tmp258, r800_ffff_tmp260);
          carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(91), sequence_e2_83_adv));
          r800_ffff_tmp261 = simd_and(sequence_e2_83_adv, cc_range_20d0_20e5_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp261);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          byte_range_af_b1 = simd_and(r800_ffff_tmp21, r800_ffff_tmp232);
          carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(92), sequence_e2_b3_adv));
          r800_ffff_tmp262 = simd_and(sequence_e2_b3_adv, byte_range_af_b1);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp262);
          sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
          sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
          carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(93), sequence_e2_b5_adv));
          r800_ffff_tmp263 = simd_and(sequence_e2_b5_adv, byte_bf);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp263);
          sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
          sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
          byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
          carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(94), sequence_e2_b7_adv));
          r800_ffff_tmp264 = simd_and(sequence_e2_b7_adv, byte_range_a0_bf);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp264);
          byte_e3 = simd_and(byte_range_e0_ef, tmp103);
          carryQ.cq[95] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(95), r800_ffff_tmp265));
          sequence_e3_80 = simd_and(r800_ffff_tmp265, byte_80);
          carryQ.cq[96] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(96), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          byte_range_aa_ad = simd_and(r800_ffff_tmp15, tmp96);
          carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(97), sequence_e3_80_adv));
          r800_ffff_tmp266 = simd_and(sequence_e3_80_adv, byte_range_aa_ad);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp266);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          byte_range_99_9a = simd_and(r800_ffff_tmp19, tmp36);
          carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(98), sequence_e3_82_adv));
          r800_ffff_tmp267 = simd_and(sequence_e3_82_adv, byte_range_99_9a);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp267);
          byte_ea = simd_and(byte_range_e0_ef, tmp64);
          byte_99 = simd_and(r800_ffff_tmp2, tmp99);
          carryQ.cq[99] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(99), r800_ffff_tmp268));
          sequence_ea_99 = simd_and(r800_ffff_tmp268, byte_99);
          carryQ.cq[100] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(100), byte_ea_adv));
          sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
          r800_ffff_tmp269 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp177), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          r800_ffff_tmp270 = simd_and(r800_ffff_tmp27, r800_ffff_tmp269);
          cc_range_a66f_a674_3 = simd_or(byte_af, r800_ffff_tmp270);
          carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(101), sequence_ea_99_adv));
          r800_ffff_tmp271 = simd_and(sequence_ea_99_adv, cc_range_a66f_a674_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp271);
          sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
          sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
          carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(102), sequence_ea_9a_adv));
          r800_ffff_tmp272 = simd_and(sequence_ea_9a_adv, byte_9f);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp272);
          byte_9b = simd_and(r800_ffff_tmp2, tmp65);
          sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
          sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
          byte_range_b0_b1 = simd_andc(r800_ffff_tmp27, tmp26);
          carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(103), sequence_ea_9b_adv));
          r800_ffff_tmp273 = simd_and(sequence_ea_9b_adv, byte_range_b0_b1);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp273);
          sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
          sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
          r800_ffff_tmp274 = simd_andc(tmp4, tmp39);
          r800_ffff_tmp275 = simd_andc(tmp24, r800_ffff_tmp274);
          r800_ffff_tmp276 = simd_or(r800_ffff_tmp275, tmp65);
          r800_ffff_tmp277 = simd_and(tmp109, r800_ffff_tmp276);
          r800_ffff_tmp278 = simd_and(r800_ffff_tmp12, tmp36);
          cc_range_a802_a825_3 = simd_or(r800_ffff_tmp277, r800_ffff_tmp278);
          carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(104), sequence_ea_a0_adv));
          r800_ffff_tmp279 = simd_and(sequence_ea_a0_adv, cc_range_a802_a825_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp279);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          r800_ffff_tmp280 = simd_and(tmp109, tmp40);
          r800_ffff_tmp281 = simd_and(basis_bits.bit_3, tmp26);
          r800_ffff_tmp282 = simd_andc(byte_range_a0_bf, r800_ffff_tmp281);
          cc_range_a8c4_a8e0_3 = simd_or(r800_ffff_tmp280, r800_ffff_tmp282);
          carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(105), sequence_ea_a3_adv));
          r800_ffff_tmp283 = simd_and(sequence_ea_a3_adv, cc_range_a8c4_a8e0_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp283);
          sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
          sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
          r800_ffff_tmp284 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp177), simd_andc(tmp60, basis_bits.bit_4));
          byte_range_a6_ad = simd_and(tmp108, r800_ffff_tmp284);
          carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(106), sequence_ea_a4_adv));
          r800_ffff_tmp285 = simd_and(sequence_ea_a4_adv, byte_range_a6_ad);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp285);
          sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
          sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
          r800_ffff_tmp286 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp231), simd_andc(r800_ffff_tmp250, basis_bits.bit_3));
          byte_range_87_91 = simd_and(r800_ffff_tmp129, r800_ffff_tmp286);
          carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(107), sequence_ea_a5_adv));
          r800_ffff_tmp287 = simd_and(sequence_ea_a5_adv, byte_range_87_91);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp287);
          sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
          sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
          r800_ffff_tmp288 = simd_or(r800_ffff_tmp26, byte_b3);
          r800_ffff_tmp289 = simd_and(r800_ffff_tmp27, r800_ffff_tmp3);
          r800_ffff_tmp290 = simd_or(r800_ffff_tmp288, r800_ffff_tmp289);
          cc_range_a980_a9bc_3 = simd_or(r800_ffff_tmp290, byte_bc);
          carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(108), sequence_ea_a6_adv));
          r800_ffff_tmp291 = simd_and(sequence_ea_a6_adv, cc_range_a980_a9bc_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp291);
          sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
          sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
          r800_ffff_tmp292 = simd_or(simd_and(basis_bits.bit_5, tmp29), simd_andc(tmp5, basis_bits.bit_5));
          r800_ffff_tmp293 = simd_and(r800_ffff_tmp15, r800_ffff_tmp292);
          r800_ffff_tmp294 = simd_andc(r800_ffff_tmp27, tmp4);
          r800_ffff_tmp295 = simd_and(r800_ffff_tmp294, tmp36);
          r800_ffff_tmp296 = simd_or(r800_ffff_tmp293, r800_ffff_tmp295);
          r800_ffff_tmp297 = simd_and(r800_ffff_tmp27, tmp39);
          r800_ffff_tmp298 = simd_and(r800_ffff_tmp297, tmp36);
          cc_range_aa29_aa35_3 = simd_or(r800_ffff_tmp296, r800_ffff_tmp298);
          carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(109), sequence_ea_a8_adv));
          r800_ffff_tmp299 = simd_and(sequence_ea_a8_adv, cc_range_aa29_aa35_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp299);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          r800_ffff_tmp300 = simd_or(tmp103, r800_ffff_tmp30);
          cc_range_aa43_aa4c_3 = simd_and(tmp109, r800_ffff_tmp300);
          carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(110), sequence_ea_a9_adv));
          r800_ffff_tmp301 = simd_and(sequence_ea_a9_adv, cc_range_aa43_aa4c_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp301);
          sequence_ea_aa = simd_and(byte_ea_adv, byte_aa);
          sequence_ea_aa = simd_and(byte_ea_adv, byte_aa);
          r800_ffff_tmp302 = simd_and(r800_ffff_tmp146, tmp101);
          r800_ffff_tmp303 = simd_or(byte_b0, r800_ffff_tmp302);
          r800_ffff_tmp304 = simd_and(r800_ffff_tmp27, r800_ffff_tmp55);
          r800_ffff_tmp305 = simd_or(r800_ffff_tmp303, r800_ffff_tmp304);
          cc_range_aab0_aabe_3 = simd_or(r800_ffff_tmp305, byte_range_be_bf);
          carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_ea_aa, carryQ.get_carry_in(111), sequence_ea_aa_adv));
          r800_ffff_tmp306 = simd_and(sequence_ea_aa_adv, cc_range_aab0_aabe_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp306);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          r800_ffff_tmp307 = simd_and(tmp108, r800_ffff_tmp95);
          r800_ffff_tmp308 = simd_or(r800_ffff_tmp44, r800_ffff_tmp307);
          r800_ffff_tmp309 = simd_and(r800_ffff_tmp27, tmp58);
          cc_range_aac1_aaf6_3 = simd_or(r800_ffff_tmp308, r800_ffff_tmp309);
          carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(112), sequence_ea_ab_adv));
          r800_ffff_tmp310 = simd_and(sequence_ea_ab_adv, cc_range_aac1_aaf6_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp310);
          sequence_ea_af = simd_and(byte_ea_adv, byte_af);
          sequence_ea_af = simd_and(byte_ea_adv, byte_af);
          r800_ffff_tmp311 = simd_or(tmp82, r800_ffff_tmp52);
          r800_ffff_tmp312 = simd_or(r800_ffff_tmp311, tmp66);
          cc_range_abe5_abed_3 = simd_and(tmp108, r800_ffff_tmp312);
          carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(113), sequence_ea_af_adv));
          r800_ffff_tmp313 = simd_and(sequence_ea_af_adv, cc_range_abe5_abed_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp313);
          byte_ef = simd_and(byte_range_e0_ef, tmp79);
          carryQ.cq[114] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(114), r800_ffff_tmp314));
          sequence_ef_ac = simd_and(r800_ffff_tmp314, byte_ac);
          carryQ.cq[115] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(115), byte_ef_adv));
          sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
          carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(116), sequence_ef_ac_adv));
          r800_ffff_tmp315 = simd_and(sequence_ef_ac_adv, byte_9e);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp315);
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          r800_ffff_tmp316 = simd_andc(r800_ffff_tmp222, tmp22);
          cc_range_fe00_fe20_3 = simd_or(tmp109, r800_ffff_tmp316);
          carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(117), sequence_ef_b8_adv));
          r800_ffff_tmp317 = simd_and(sequence_ef_b8_adv, cc_range_fe00_fe20_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp317);
        }
        else {
          carryQ.CarryDequeueEnqueue(36, 82);
        }
        tmp111 = simd_and(byte_range_80_bf, tmp8);
        byte_90 = simd_andc(tmp111, tmp6);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(118), tmp112));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp112, byte_range_80_bf);
        carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(119), tmp113));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp113, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(120, 3))) {
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          sequence_f0_90_87 = simd_and(tmp112, byte_87);
          carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(120), sequence_f0_90_adv));
          sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
          r10000_10fff_tmp1 = simd_and(byte_range_80_bf, tmp2);
          byte_bd = simd_and(r10000_10fff_tmp1, tmp66);
          carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(121), sequence_f0_90_87_adv));
          r10000_10fff_tmp2 = simd_and(sequence_f0_90_87_adv, byte_bd);
          struct_Mn.cc = simd_or(struct_Mn.cc, r10000_10fff_tmp2);
          r10000_10fff_tmp3 = simd_andc(tmp33, tmp5);
          byte_a8 = simd_and(tmp108, r10000_10fff_tmp3);
          sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
          sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
          r10000_10fff_tmp4 = simd_andc(tmp109, tmp4);
          r10000_10fff_tmp5 = simd_and(r10000_10fff_tmp4, tmp5);
          r10000_10fff_tmp6 = simd_and(tmp109, tmp39);
          r10000_10fff_tmp7 = simd_and(r10000_10fff_tmp6, tmp36);
          r10000_10fff_tmp8 = simd_or(r10000_10fff_tmp5, r10000_10fff_tmp7);
          r10000_10fff_tmp9 = simd_and(tmp109, tmp53);
          r10000_10fff_tmp10 = simd_or(r10000_10fff_tmp8, r10000_10fff_tmp9);
          r10000_10fff_tmp11 = simd_and(r10000_10fff_tmp1, tmp33);
          r10000_10fff_tmp12 = simd_andc(r10000_10fff_tmp11, tmp21);
          r10000_10fff_tmp13 = simd_or(r10000_10fff_tmp10, r10000_10fff_tmp12);
          r10000_10fff_tmp14 = simd_and(r10000_10fff_tmp1, tmp79);
          cc_range_10a01_10a3f_4 = simd_or(r10000_10fff_tmp13, r10000_10fff_tmp14);
          carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(122), sequence_f0_90_a8_adv));
          r10000_10fff_tmp15 = simd_and(sequence_f0_90_a8_adv, cc_range_10a01_10a3f_4);
          struct_Mn.cc = simd_or(struct_Mn.cc, r10000_10fff_tmp15);
        }
        else {
          carryQ.CarryDequeueEnqueue(120, 3);
        }
        carryQ.CarryQ_Adjust(123);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Mn & struct_Mn, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f0, tmp7, tmp8, tmp9, tmp10;
		BitBlock tmp11, byte_91, tmp12, sequence_f0_91, byte_f0_adv, tmp13, tmp14;
		BitBlock byte_80, tmp15, sequence_f0_91_80, sequence_f0_91_adv, tmp16, tmp17;
		BitBlock tmp18, cc_range_11001_11038_4, sequence_f0_91_80_adv, tmp19, byte_81;
		BitBlock sequence_f0_91_81, tmp20, tmp21, tmp22, byte_range_80_86;
		BitBlock sequence_f0_91_81_adv, tmp23, tmp24, tmp25, byte_82;
		BitBlock sequence_f0_91_82, tmp26, tmp27, tmp28, tmp29, tmp30, tmp31, tmp32;
		BitBlock tmp33, tmp34, tmp35, tmp36, tmp37, cc_range_11080_110b9_4;
		BitBlock sequence_f0_91_82_adv, tmp38, tmp39, tmp40, byte_84;
		BitBlock sequence_f0_91_84, tmp41, tmp42, tmp43, tmp44, tmp45, tmp46, tmp47;
		BitBlock tmp48, tmp49, tmp50, tmp51, tmp52, tmp53, tmp54, tmp55, tmp56;
		BitBlock cc_range_11100_1112d_4, sequence_f0_91_84_adv, tmp57, tmp58, byte_86;
		BitBlock sequence_f0_91_86, tmp59, tmp60, tmp61, tmp62, cc_range_11180_111b6_4;
		BitBlock sequence_f0_91_86_adv, tmp63, tmp64, byte_9a, sequence_f0_91_9a;
		BitBlock tmp65, tmp66, tmp67, tmp68, tmp69, tmp70, tmp71, tmp72;
		BitBlock cc_range_116ab_116b7_4, sequence_f0_91_9a_adv, tmp73, byte_96;
		BitBlock sequence_f0_96, tmp74, byte_be, tmp75, sequence_f0_96_be;
		BitBlock sequence_f0_96_adv, tmp76, tmp77, tmp78, tmp79, tmp80;
		BitBlock byte_range_8f_92, sequence_f0_96_be_adv, tmp81, byte_9d;
		BitBlock sequence_f0_9d, tmp82, byte_85, tmp83, sequence_f0_9d_85;
		BitBlock sequence_f0_9d_adv, tmp84, tmp85, tmp86, tmp87, tmp88, tmp89;
		BitBlock cc_range_1d167_1d17b_4, sequence_f0_9d_85_adv, tmp90;
		BitBlock sequence_f0_9d_86, tmp91, tmp92, tmp93, tmp94, tmp95, tmp96, tmp97;
		BitBlock cc_range_1d180_1d1aa_4, sequence_f0_9d_86_adv, tmp98, tmp99, byte_89;
		BitBlock sequence_f0_9d_89, tmp100, tmp101, byte_range_82_84;
		BitBlock sequence_f0_9d_89_adv, tmp102, tmp103, byte_f3, byte_a0, tmp104;
		BitBlock sequence_f3_a0, byte_f3_adv, tmp105, byte_range_84_86, tmp106;
		BitBlock sequence_f3_a0_byte_range_84_86, byte_range_80_bf, tmp107;
		BitBlock sequence_f3_a0_byte_range_84_86_sfx, tmp108, tmp109, byte_87;
		BitBlock sequence_f3_a0_adv, sequence_f3_a0_87, byte_range_80_af, tmp110;
		BitBlock sequence_f3_a0_87_byte_range_80_af, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, byte_cc, byte_cc_adv, r80_7ff_tmp3, byte_cd;
		BitBlock byte_cd_adv, r80_7ff_tmp4, r80_7ff_tmp5, byte_d2, r80_7ff_tmp6;
		BitBlock byte_range_83_87, byte_d2_adv, r80_7ff_tmp7, byte_d6, r80_7ff_tmp8;
		BitBlock r80_7ff_tmp9, r80_7ff_tmp10, r80_7ff_tmp11, r80_7ff_tmp12;
		BitBlock r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15, cc_range_591_5bf_2;
		BitBlock byte_d6_adv, r80_7ff_tmp16, byte_d7, r80_7ff_tmp17, r80_7ff_tmp18;
		BitBlock r80_7ff_tmp19, r80_7ff_tmp20, r80_7ff_tmp21, cc_range_5c1_5c7_2;
		BitBlock byte_d7_adv, r80_7ff_tmp22, r80_7ff_tmp23, byte_d8, r80_7ff_tmp24;
		BitBlock r80_7ff_tmp25, byte_range_90_9a, byte_d8_adv, r80_7ff_tmp26, byte_d9;
		BitBlock r80_7ff_tmp27, r80_7ff_tmp28, r80_7ff_tmp29, r80_7ff_tmp30;
		BitBlock cc_range_64b_670_2, byte_d9_adv, r80_7ff_tmp31, byte_db;
		BitBlock r80_7ff_tmp32, r80_7ff_tmp33, r80_7ff_tmp34, r80_7ff_tmp35;
		BitBlock r80_7ff_tmp36, r80_7ff_tmp37, r80_7ff_tmp38, r80_7ff_tmp39;
		BitBlock r80_7ff_tmp40, r80_7ff_tmp41, r80_7ff_tmp42, r80_7ff_tmp43;
		BitBlock r80_7ff_tmp44, r80_7ff_tmp45, r80_7ff_tmp46, r80_7ff_tmp47;
		BitBlock cc_range_6d6_6ea_2, byte_db_adv, r80_7ff_tmp48, byte_dc;
		BitBlock r80_7ff_tmp49, cc_range_711_730_2, byte_dc_adv, r80_7ff_tmp50;
		BitBlock byte_dd, byte_range_80_8a, byte_dd_adv, r80_7ff_tmp51, byte_de;
		BitBlock r80_7ff_tmp52, r80_7ff_tmp53, r80_7ff_tmp54, r80_7ff_tmp55;
		BitBlock byte_range_a6_b0, byte_de_adv, r80_7ff_tmp56, byte_df, r80_7ff_tmp57;
		BitBlock r80_7ff_tmp58, byte_range_ab_b3, byte_df_adv, r80_7ff_tmp59;
		BitBlock byte_range_e0_ef, byte_e0, r800_ffff_tmp1, sequence_e0_a0;
		BitBlock byte_e0_adv, r800_ffff_tmp2, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, r800_ffff_tmp11, r800_ffff_tmp12;
		BitBlock r800_ffff_tmp13, r800_ffff_tmp14, r800_ffff_tmp15, r800_ffff_tmp16;
		BitBlock r800_ffff_tmp17, cc_range_816_829_3, sequence_e0_a0_adv;
		BitBlock r800_ffff_tmp18, byte_a1, sequence_e0_a1, r800_ffff_tmp19;
		BitBlock byte_range_99_9b, sequence_e0_a1_adv, r800_ffff_tmp20, byte_a3;
		BitBlock sequence_e0_a3, r800_ffff_tmp21, r800_ffff_tmp22, r800_ffff_tmp23;
		BitBlock byte_range_a4_be, sequence_e0_a3_adv, r800_ffff_tmp24, byte_a4;
		BitBlock sequence_e0_a4, r800_ffff_tmp25, r800_ffff_tmp26, r800_ffff_tmp27;
		BitBlock r800_ffff_tmp28, r800_ffff_tmp29, r800_ffff_tmp30, r800_ffff_tmp31;
		BitBlock cc_range_900_93c_3, sequence_e0_a4_adv, r800_ffff_tmp32, byte_a5;
		BitBlock sequence_e0_a5, r800_ffff_tmp33, r800_ffff_tmp34, r800_ffff_tmp35;
		BitBlock r800_ffff_tmp36, r800_ffff_tmp37, r800_ffff_tmp38, r800_ffff_tmp39;
		BitBlock r800_ffff_tmp40, r800_ffff_tmp41, r800_ffff_tmp42, cc_range_941_962_3;
		BitBlock sequence_e0_a5_adv, r800_ffff_tmp43, byte_a6, sequence_e0_a6;
		BitBlock r800_ffff_tmp44, cc_range_981_9bc_3, sequence_e0_a6_adv;
		BitBlock r800_ffff_tmp45, byte_a7, sequence_e0_a7, r800_ffff_tmp46;
		BitBlock r800_ffff_tmp47, r800_ffff_tmp48, r800_ffff_tmp49, r800_ffff_tmp50;
		BitBlock cc_range_9c1_9e2_3, sequence_e0_a7_adv, r800_ffff_tmp51;
		BitBlock r800_ffff_tmp52, byte_a8, sequence_e0_a8, r800_ffff_tmp53;
		BitBlock cc_range_a01_a3c_3, sequence_e0_a8_adv, r800_ffff_tmp54, byte_a9;
		BitBlock sequence_e0_a9, r800_ffff_tmp55, r800_ffff_tmp56, r800_ffff_tmp57;
		BitBlock r800_ffff_tmp58, r800_ffff_tmp59, r800_ffff_tmp60, r800_ffff_tmp61;
		BitBlock r800_ffff_tmp62, r800_ffff_tmp63, r800_ffff_tmp64, r800_ffff_tmp65;
		BitBlock r800_ffff_tmp66, cc_range_a41_a75_3, sequence_e0_a9_adv;
		BitBlock r800_ffff_tmp67, byte_aa, sequence_e0_aa, cc_range_a81_abc_3;
		BitBlock sequence_e0_aa_adv, r800_ffff_tmp68, byte_ab, sequence_e0_ab;
		BitBlock r800_ffff_tmp69, r800_ffff_tmp70, r800_ffff_tmp71, cc_range_ac1_ae2_3;
		BitBlock sequence_e0_ab_adv, r800_ffff_tmp72, byte_ac, sequence_e0_ac;
		BitBlock r800_ffff_tmp73, cc_range_b01_b3f_3, sequence_e0_ac_adv;
		BitBlock r800_ffff_tmp74, byte_ad, sequence_e0_ad, r800_ffff_tmp75;
		BitBlock r800_ffff_tmp76, cc_range_b41_b62_3, sequence_e0_ad_adv;
		BitBlock r800_ffff_tmp77, byte_ae, sequence_e0_ae, sequence_e0_ae_adv;
		BitBlock r800_ffff_tmp78, byte_af, sequence_e0_af, r800_ffff_tmp79;
		BitBlock cc_range_bc0_bcd_3, sequence_e0_af_adv, r800_ffff_tmp80, byte_b0;
		BitBlock sequence_e0_b0, r800_ffff_tmp81, byte_range_be_bf, sequence_e0_b0_adv;
		BitBlock r800_ffff_tmp82, byte_b1, sequence_e0_b1, r800_ffff_tmp83;
		BitBlock r800_ffff_tmp84, r800_ffff_tmp85, r800_ffff_tmp86, r800_ffff_tmp87;
		BitBlock r800_ffff_tmp88, r800_ffff_tmp89, r800_ffff_tmp90, cc_range_c40_c62_3;
		BitBlock sequence_e0_b1_adv, r800_ffff_tmp91, byte_b2, sequence_e0_b2;
		BitBlock r800_ffff_tmp92, r800_ffff_tmp93, cc_range_cbc_cbf_3;
		BitBlock sequence_e0_b2_adv, r800_ffff_tmp94, byte_b3, sequence_e0_b3;
		BitBlock r800_ffff_tmp95, r800_ffff_tmp96, r800_ffff_tmp97, cc_range_cc6_ce2_3;
		BitBlock sequence_e0_b3_adv, r800_ffff_tmp98, byte_b5, sequence_e0_b5;
		BitBlock cc_range_d41_d62_3, sequence_e0_b5_adv, r800_ffff_tmp99, byte_b7;
		BitBlock sequence_e0_b7, r800_ffff_tmp100, r800_ffff_tmp101, r800_ffff_tmp102;
		BitBlock cc_range_dca_dd6_3, sequence_e0_b7_adv, r800_ffff_tmp103, byte_b8;
		BitBlock sequence_e0_b8, r800_ffff_tmp104, r800_ffff_tmp105, r800_ffff_tmp106;
		BitBlock cc_range_e31_e34_3, sequence_e0_b8_adv, r800_ffff_tmp107, byte_b9;
		BitBlock sequence_e0_b9, r800_ffff_tmp108, byte_range_87_8e;
		BitBlock sequence_e0_b9_adv, r800_ffff_tmp109, byte_ba, sequence_e0_ba;
		BitBlock r800_ffff_tmp110, r800_ffff_tmp111, r800_ffff_tmp112;
		BitBlock r800_ffff_tmp113, r800_ffff_tmp114, r800_ffff_tmp115;
		BitBlock cc_range_eb1_ebb_3, sequence_e0_ba_adv, r800_ffff_tmp116, byte_bb;
		BitBlock sequence_e0_bb, byte_range_88_8d, sequence_e0_bb_adv;
		BitBlock r800_ffff_tmp117, byte_bc, sequence_e0_bc, r800_ffff_tmp118;
		BitBlock r800_ffff_tmp119, r800_ffff_tmp120, r800_ffff_tmp121;
		BitBlock cc_range_f18_f39_3, sequence_e0_bc_adv, r800_ffff_tmp122, byte_bd;
		BitBlock sequence_e0_bd, r800_ffff_tmp123, byte_range_b1_be;
		BitBlock sequence_e0_bd_adv, r800_ffff_tmp124, sequence_e0_be;
		BitBlock r800_ffff_tmp125, r800_ffff_tmp126, r800_ffff_tmp127;
		BitBlock r800_ffff_tmp128, r800_ffff_tmp129, r800_ffff_tmp130;
		BitBlock r800_ffff_tmp131, r800_ffff_tmp132, r800_ffff_tmp133;
		BitBlock r800_ffff_tmp134, r800_ffff_tmp135, r800_ffff_tmp136;
		BitBlock r800_ffff_tmp137, r800_ffff_tmp138, r800_ffff_tmp139;
		BitBlock cc_range_f80_f99_3, sequence_e0_be_adv, r800_ffff_tmp140, byte_bf;
		BitBlock sequence_e0_bf, sequence_e0_bf_adv, r800_ffff_tmp141, byte_e1;
		BitBlock r800_ffff_tmp142, sequence_e1_80, byte_e1_adv, r800_ffff_tmp143;
		BitBlock r800_ffff_tmp144, r800_ffff_tmp145, r800_ffff_tmp146;
		BitBlock r800_ffff_tmp147, r800_ffff_tmp148, r800_ffff_tmp149;
		BitBlock r800_ffff_tmp150, r800_ffff_tmp151, r800_ffff_tmp152;
		BitBlock r800_ffff_tmp153, cc_range_102d_103d_3, sequence_e1_80_adv;
		BitBlock r800_ffff_tmp154, sequence_e1_81, r800_ffff_tmp155, r800_ffff_tmp156;
		BitBlock r800_ffff_tmp157, r800_ffff_tmp158, r800_ffff_tmp159;
		BitBlock r800_ffff_tmp160, r800_ffff_tmp161, cc_range_1058_1071_3;
		BitBlock sequence_e1_81_adv, r800_ffff_tmp162, sequence_e1_82;
		BitBlock r800_ffff_tmp163, r800_ffff_tmp164, r800_ffff_tmp165;
		BitBlock r800_ffff_tmp166, r800_ffff_tmp167, r800_ffff_tmp168;
		BitBlock cc_range_1082_109d_3, sequence_e1_82_adv, r800_ffff_tmp169, byte_8d;
		BitBlock sequence_e1_8d, r800_ffff_tmp170, byte_range_9d_9f;
		BitBlock sequence_e1_8d_adv, r800_ffff_tmp171, byte_9c, sequence_e1_9c;
		BitBlock r800_ffff_tmp172, r800_ffff_tmp173, cc_range_1712_1732_3;
		BitBlock sequence_e1_9c_adv, r800_ffff_tmp174, sequence_e1_9d;
		BitBlock cc_range_1752_1772_3, sequence_e1_9d_adv, r800_ffff_tmp175, byte_9e;
		BitBlock sequence_e1_9e, r800_ffff_tmp176, r800_ffff_tmp177, r800_ffff_tmp178;
		BitBlock r800_ffff_tmp179, cc_range_17b4_17b7_3, sequence_e1_9e_adv;
		BitBlock r800_ffff_tmp180, byte_9f, sequence_e1_9f, r800_ffff_tmp181;
		BitBlock r800_ffff_tmp182, r800_ffff_tmp183, r800_ffff_tmp184;
		BitBlock r800_ffff_tmp185, cc_range_17c6_17dd_3, sequence_e1_9f_adv;
		BitBlock r800_ffff_tmp186, sequence_e1_a0, byte_range_8b_8d;
		BitBlock sequence_e1_a0_adv, r800_ffff_tmp187, byte_a2, sequence_e1_a2;
		BitBlock sequence_e1_a2_adv, r800_ffff_tmp188, sequence_e1_a4;
		BitBlock r800_ffff_tmp189, r800_ffff_tmp190, r800_ffff_tmp191;
		BitBlock r800_ffff_tmp192, r800_ffff_tmp193, r800_ffff_tmp194;
		BitBlock cc_range_1920_1939_3, sequence_e1_a4_adv, r800_ffff_tmp195;
		BitBlock sequence_e1_a8, r800_ffff_tmp196, cc_range_1a17_1a1b_3;
		BitBlock sequence_e1_a8_adv, r800_ffff_tmp197, sequence_e1_a9;
		BitBlock r800_ffff_tmp198, r800_ffff_tmp199, r800_ffff_tmp200;
		BitBlock r800_ffff_tmp201, r800_ffff_tmp202, r800_ffff_tmp203;
		BitBlock r800_ffff_tmp204, r800_ffff_tmp205, r800_ffff_tmp206;
		BitBlock r800_ffff_tmp207, r800_ffff_tmp208, r800_ffff_tmp209;
		BitBlock r800_ffff_tmp210, cc_range_1a56_1a7f_3, sequence_e1_a9_adv;
		BitBlock r800_ffff_tmp211, sequence_e1_ac, r800_ffff_tmp212, r800_ffff_tmp213;
		BitBlock r800_ffff_tmp214, r800_ffff_tmp215, r800_ffff_tmp216;
		BitBlock cc_range_1b00_1b3c_3, sequence_e1_ac_adv, r800_ffff_tmp217;
		BitBlock sequence_e1_ad, r800_ffff_tmp218, r800_ffff_tmp219;
		BitBlock cc_range_1b42_1b6b_3, sequence_e1_ad_adv, r800_ffff_tmp220;
		BitBlock sequence_e1_ae, r800_ffff_tmp221, r800_ffff_tmp222, r800_ffff_tmp223;
		BitBlock r800_ffff_tmp224, r800_ffff_tmp225, r800_ffff_tmp226;
		BitBlock cc_range_1b80_1bab_3, sequence_e1_ae_adv, r800_ffff_tmp227;
		BitBlock sequence_e1_af, r800_ffff_tmp228, r800_ffff_tmp229, r800_ffff_tmp230;
		BitBlock r800_ffff_tmp231, r800_ffff_tmp232, r800_ffff_tmp233;
		BitBlock cc_range_1be6_1bef_3, sequence_e1_af_adv, r800_ffff_tmp234;
		BitBlock sequence_e1_b0, r800_ffff_tmp235, r800_ffff_tmp236, r800_ffff_tmp237;
		BitBlock cc_range_1c2c_1c36_3, sequence_e1_b0_adv, r800_ffff_tmp238;
		BitBlock sequence_e1_b3, r800_ffff_tmp239, r800_ffff_tmp240, r800_ffff_tmp241;
		BitBlock r800_ffff_tmp242, r800_ffff_tmp243, r800_ffff_tmp244;
		BitBlock r800_ffff_tmp245, r800_ffff_tmp246, r800_ffff_tmp247;
		BitBlock r800_ffff_tmp248, cc_range_1cd0_1cf4_3, sequence_e1_b3_adv;
		BitBlock r800_ffff_tmp249, sequence_e1_b7, r800_ffff_tmp250, r800_ffff_tmp251;
		BitBlock r800_ffff_tmp252, r800_ffff_tmp253, cc_range_1dc0_1dfc_3;
		BitBlock sequence_e1_b7_adv, r800_ffff_tmp254, byte_e2, byte_83;
		BitBlock r800_ffff_tmp255, sequence_e2_83, byte_e2_adv, r800_ffff_tmp256;
		BitBlock r800_ffff_tmp257, r800_ffff_tmp258, r800_ffff_tmp259;
		BitBlock r800_ffff_tmp260, cc_range_20d0_20e5_3, sequence_e2_83_adv;
		BitBlock r800_ffff_tmp261, sequence_e2_b3, byte_range_af_b1;
		BitBlock sequence_e2_b3_adv, r800_ffff_tmp262, sequence_e2_b5;
		BitBlock sequence_e2_b5_adv, r800_ffff_tmp263, sequence_e2_b7;
		BitBlock byte_range_a0_bf, sequence_e2_b7_adv, r800_ffff_tmp264, byte_e3;
		BitBlock r800_ffff_tmp265, sequence_e3_80, byte_e3_adv, byte_range_aa_ad;
		BitBlock sequence_e3_80_adv, r800_ffff_tmp266, sequence_e3_82;
		BitBlock byte_range_99_9a, sequence_e3_82_adv, r800_ffff_tmp267, byte_ea;
		BitBlock byte_99, r800_ffff_tmp268, sequence_ea_99, byte_ea_adv;
		BitBlock r800_ffff_tmp269, r800_ffff_tmp270, cc_range_a66f_a674_3;
		BitBlock sequence_ea_99_adv, r800_ffff_tmp271, sequence_ea_9a;
		BitBlock sequence_ea_9a_adv, r800_ffff_tmp272, byte_9b, sequence_ea_9b;
		BitBlock byte_range_b0_b1, sequence_ea_9b_adv, r800_ffff_tmp273;
		BitBlock sequence_ea_a0, r800_ffff_tmp274, r800_ffff_tmp275, r800_ffff_tmp276;
		BitBlock r800_ffff_tmp277, r800_ffff_tmp278, cc_range_a802_a825_3;
		BitBlock sequence_ea_a0_adv, r800_ffff_tmp279, sequence_ea_a3;
		BitBlock r800_ffff_tmp280, r800_ffff_tmp281, r800_ffff_tmp282;
		BitBlock cc_range_a8c4_a8e0_3, sequence_ea_a3_adv, r800_ffff_tmp283;
		BitBlock sequence_ea_a4, r800_ffff_tmp284, byte_range_a6_ad;
		BitBlock sequence_ea_a4_adv, r800_ffff_tmp285, sequence_ea_a5;
		BitBlock r800_ffff_tmp286, byte_range_87_91, sequence_ea_a5_adv;
		BitBlock r800_ffff_tmp287, sequence_ea_a6, r800_ffff_tmp288, r800_ffff_tmp289;
		BitBlock r800_ffff_tmp290, cc_range_a980_a9bc_3, sequence_ea_a6_adv;
		BitBlock r800_ffff_tmp291, sequence_ea_a8, r800_ffff_tmp292, r800_ffff_tmp293;
		BitBlock r800_ffff_tmp294, r800_ffff_tmp295, r800_ffff_tmp296;
		BitBlock r800_ffff_tmp297, r800_ffff_tmp298, cc_range_aa29_aa35_3;
		BitBlock sequence_ea_a8_adv, r800_ffff_tmp299, sequence_ea_a9;
		BitBlock r800_ffff_tmp300, cc_range_aa43_aa4c_3, sequence_ea_a9_adv;
		BitBlock r800_ffff_tmp301, sequence_ea_aa, r800_ffff_tmp302, r800_ffff_tmp303;
		BitBlock r800_ffff_tmp304, r800_ffff_tmp305, cc_range_aab0_aabe_3;
		BitBlock sequence_ea_aa_adv, r800_ffff_tmp306, sequence_ea_ab;
		BitBlock r800_ffff_tmp307, r800_ffff_tmp308, r800_ffff_tmp309;
		BitBlock cc_range_aac1_aaf6_3, sequence_ea_ab_adv, r800_ffff_tmp310;
		BitBlock sequence_ea_af, r800_ffff_tmp311, r800_ffff_tmp312;
		BitBlock cc_range_abe5_abed_3, sequence_ea_af_adv, r800_ffff_tmp313, byte_ef;
		BitBlock r800_ffff_tmp314, sequence_ef_ac, byte_ef_adv, sequence_ef_ac_adv;
		BitBlock r800_ffff_tmp315, sequence_ef_b8, r800_ffff_tmp316;
		BitBlock cc_range_fe00_fe20_3, sequence_ef_b8_adv, r800_ffff_tmp317, tmp111;
		BitBlock byte_90, sequence_f0_90, tmp112, sequence_f0_90_byte_range_80_bf;
		BitBlock tmp113, sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock sequence_f0_90_87, sequence_f0_90_adv, r10000_10fff_tmp1;
		BitBlock sequence_f0_90_87_adv, r10000_10fff_tmp2, r10000_10fff_tmp3;
		BitBlock sequence_f0_90_a8, r10000_10fff_tmp4, r10000_10fff_tmp5;
		BitBlock r10000_10fff_tmp6, r10000_10fff_tmp7, r10000_10fff_tmp8;
		BitBlock r10000_10fff_tmp9, r10000_10fff_tmp10, r10000_10fff_tmp11;
		BitBlock r10000_10fff_tmp12, r10000_10fff_tmp13, r10000_10fff_tmp14;
		BitBlock cc_range_10a01_10a3f_4, sequence_f0_90_a8_adv, r10000_10fff_tmp15;




        struct_Mn.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_f0 = simd_andc(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp11 = simd_andc(tmp10, tmp4);
        byte_91 = simd_and(tmp9, tmp11);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp12));
        sequence_f0_91 = simd_and(tmp12, byte_91);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
        tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp14 = simd_andc(tmp7, tmp13);
        byte_80 = simd_andc(tmp14, tmp6);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(2), tmp15));
        sequence_f0_91_80 = simd_and(tmp15, byte_80);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(3), sequence_f0_91_adv));
        sequence_f0_91_80 = simd_and(sequence_f0_91_adv, byte_80);
        tmp16 = simd_and(tmp14, tmp11);
        tmp17 = simd_and(tmp7, tmp2);
        tmp18 = simd_and(tmp17, basis_bits.bit_4);
        cc_range_11001_11038_4 = simd_or(tmp16, tmp18);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_91_80, carryQ.get_carry_in(4), sequence_f0_91_80_adv));
        tmp19 = simd_and(sequence_f0_91_80_adv, cc_range_11001_11038_4);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp19);
        byte_81 = simd_and(tmp14, tmp11);
        sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
        sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
        tmp20 = simd_andc(tmp14, basis_bits.bit_4);
        tmp21 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp22 = simd_and(basis_bits.bit_5, tmp21);
        byte_range_80_86 = simd_andc(tmp20, tmp22);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(5), sequence_f0_91_81_adv));
        tmp23 = simd_and(sequence_f0_91_81_adv, byte_range_80_86);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp23);
        tmp24 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp25 = simd_andc(tmp24, tmp4);
        byte_82 = simd_and(tmp14, tmp25);
        sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
        sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
        tmp26 = simd_or(tmp4, basis_bits.bit_6);
        tmp27 = simd_andc(tmp14, tmp26);
        tmp28 = simd_andc(tmp17, basis_bits.bit_4);
        tmp29 = simd_not(tmp21);
        tmp30 = simd_or(simd_and(basis_bits.bit_5, tmp29), simd_andc(tmp21, basis_bits.bit_5));
        tmp31 = simd_and(tmp28, tmp30);
        tmp32 = simd_or(tmp27, tmp31);
        tmp33 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp34 = simd_and(tmp17, tmp33);
        tmp35 = simd_not(basis_bits.bit_7);
        tmp36 = simd_or(simd_and(basis_bits.bit_6, tmp35), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
        tmp37 = simd_and(tmp34, tmp36);
        cc_range_11080_110b9_4 = simd_or(tmp32, tmp37);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(6), sequence_f0_91_82_adv));
        tmp38 = simd_and(sequence_f0_91_82_adv, cc_range_11080_110b9_4);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp38);
        tmp39 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp40 = simd_andc(tmp39, tmp5);
        byte_84 = simd_and(tmp14, tmp40);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        tmp41 = simd_andc(tmp14, tmp4);
        tmp42 = simd_andc(tmp41, tmp21);
        tmp43 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp44 = simd_and(tmp7, tmp43);
        tmp45 = simd_not(basis_bits.bit_5);
        tmp46 = simd_or(simd_and(basis_bits.bit_4, tmp45), simd_andc(tmp22, basis_bits.bit_4));
        tmp47 = simd_and(tmp44, tmp46);
        tmp48 = simd_or(tmp42, tmp47);
        tmp49 = simd_and(tmp7, basis_bits.bit_2);
        tmp50 = simd_and(basis_bits.bit_5, tmp5);
        tmp51 = simd_or(basis_bits.bit_4, tmp50);
        tmp52 = simd_not(tmp51);
        tmp53 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp54 = simd_and(tmp53, tmp5);
        tmp55 = simd_or(simd_and(basis_bits.bit_3, tmp52), simd_andc(tmp54, basis_bits.bit_3));
        tmp56 = simd_and(tmp49, tmp55);
        cc_range_11100_1112d_4 = simd_or(tmp48, tmp56);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(7), sequence_f0_91_84_adv));
        tmp57 = simd_and(sequence_f0_91_84_adv, cc_range_11100_1112d_4);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp57);
        tmp58 = simd_and(tmp39, tmp24);
        byte_86 = simd_and(tmp14, tmp58);
        sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
        sequence_f0_91_86 = simd_and(sequence_f0_91_adv, byte_86);
        tmp59 = simd_not(tmp22);
        tmp60 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
        tmp61 = simd_or(simd_and(basis_bits.bit_4, tmp59), simd_andc(tmp60, basis_bits.bit_4));
        tmp62 = simd_and(tmp17, tmp61);
        cc_range_11180_111b6_4 = simd_or(tmp27, tmp62);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_91_86, carryQ.get_carry_in(8), sequence_f0_91_86_adv));
        tmp63 = simd_and(sequence_f0_91_86_adv, cc_range_11180_111b6_4);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp63);
        tmp64 = simd_and(tmp33, tmp24);
        byte_9a = simd_and(tmp9, tmp64);
        sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
        sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
        tmp65 = simd_and(tmp33, tmp21);
        tmp66 = simd_and(tmp53, tmp10);
        tmp67 = simd_or(tmp65, tmp66);
        tmp68 = simd_and(tmp44, tmp67);
        tmp69 = simd_andc(tmp28, tmp60);
        tmp70 = simd_or(tmp68, tmp69);
        tmp71 = simd_and(tmp39, tmp21);
        tmp72 = simd_and(tmp17, tmp71);
        cc_range_116ab_116b7_4 = simd_or(tmp70, tmp72);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(9), sequence_f0_91_9a_adv));
        tmp73 = simd_and(sequence_f0_91_9a_adv, cc_range_116ab_116b7_4);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp73);
        byte_96 = simd_and(tmp9, tmp58);
        sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
        sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
        tmp74 = simd_and(tmp53, tmp24);
        byte_be = simd_and(tmp17, tmp74);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(10), tmp75));
        sequence_f0_96_be = simd_and(tmp75, byte_be);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(11), sequence_f0_96_adv));
        sequence_f0_96_be = simd_and(sequence_f0_96_adv, byte_be);
        tmp76 = simd_andc(tmp7, basis_bits.bit_2);
        tmp77 = simd_or(tmp4, tmp21);
        tmp78 = simd_not(tmp77);
        tmp79 = simd_and(tmp53, tmp21);
        tmp80 = simd_or(simd_and(basis_bits.bit_3, tmp78), simd_andc(tmp79, basis_bits.bit_3));
        byte_range_8f_92 = simd_and(tmp76, tmp80);
        carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f0_96_be, carryQ.get_carry_in(12), sequence_f0_96_be_adv));
        tmp81 = simd_and(sequence_f0_96_be_adv, byte_range_8f_92);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp81);
        byte_9d = simd_and(tmp9, tmp66);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        tmp82 = simd_and(tmp39, tmp10);
        byte_85 = simd_and(tmp14, tmp82);
        carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(13), tmp83));
        sequence_f0_9d_85 = simd_and(tmp83, byte_85);
        carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(14), sequence_f0_9d_adv));
        sequence_f0_9d_85 = simd_and(sequence_f0_9d_adv, byte_85);
        tmp84 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp85 = simd_not(tmp84);
        tmp86 = simd_or(simd_and(basis_bits.bit_4, tmp85), simd_andc(tmp22, basis_bits.bit_4));
        tmp87 = simd_and(tmp44, tmp86);
        tmp88 = simd_or(basis_bits.bit_5, tmp21);
        tmp89 = simd_and(tmp18, tmp88);
        cc_range_1d167_1d17b_4 = simd_or(tmp87, tmp89);
        carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(15), sequence_f0_9d_85_adv));
        tmp90 = simd_and(sequence_f0_9d_85_adv, cc_range_1d167_1d17b_4);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp90);
        sequence_f0_9d_86 = simd_and(sequence_f0_9d_adv, byte_86);
        sequence_f0_9d_86 = simd_and(sequence_f0_9d_adv, byte_86);
        tmp91 = simd_or(simd_and(basis_bits.bit_4, tmp45), simd_andc(tmp50, basis_bits.bit_4));
        tmp92 = simd_and(tmp14, tmp91);
        tmp93 = simd_or(tmp42, tmp92);
        tmp94 = simd_and(tmp44, basis_bits.bit_4);
        tmp95 = simd_not(basis_bits.bit_6);
        tmp96 = simd_or(simd_and(basis_bits.bit_5, tmp95), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
        tmp97 = simd_and(tmp94, tmp96);
        cc_range_1d180_1d1aa_4 = simd_or(tmp93, tmp97);
        carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_86, carryQ.get_carry_in(16), sequence_f0_9d_86_adv));
        tmp98 = simd_and(sequence_f0_9d_86_adv, cc_range_1d180_1d1aa_4);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp98);
        tmp99 = simd_and(tmp33, tmp10);
        byte_89 = simd_and(tmp14, tmp99);
        sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
        sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
        tmp100 = simd_not(tmp5);
        tmp101 = simd_or(simd_and(basis_bits.bit_5, tmp100), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
        byte_range_82_84 = simd_and(tmp20, tmp101);
        carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_89, carryQ.get_carry_in(17), sequence_f0_9d_89_adv));
        tmp102 = simd_and(sequence_f0_9d_89_adv, byte_range_82_84);
        struct_Mn.cc = simd_or(struct_Mn.cc, tmp102);
        tmp103 = simd_andc(tmp21, tmp4);
        byte_f3 = simd_and(tmp3, tmp103);
        byte_a0 = simd_andc(tmp44, tmp6);
        carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(18), tmp104));
        sequence_f3_a0 = simd_and(tmp104, byte_a0);
        carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(19), byte_f3_adv));
        sequence_f3_a0 = simd_and(byte_f3_adv, byte_a0);
        tmp105 = simd_and(tmp14, tmp39);
        byte_range_84_86 = simd_andc(tmp105, tmp21);
        carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(20), tmp106));
        sequence_f3_a0_byte_range_84_86 = simd_and(tmp106, byte_range_84_86);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_byte_range_84_86, carryQ.get_carry_in(21), tmp107));
        sequence_f3_a0_byte_range_84_86_sfx = simd_and(tmp107, byte_range_80_bf);
        struct_Mn.cc = simd_or(struct_Mn.cc, sequence_f3_a0_byte_range_84_86_sfx);
        tmp108 = simd_and(byte_range_80_bf, tmp43);
        tmp109 = simd_andc(byte_range_80_bf, tmp13);
        byte_87 = simd_and(tmp109, tmp71);
        carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(22), sequence_f3_a0_adv));
        sequence_f3_a0_87 = simd_and(sequence_f3_a0_adv, byte_87);
        byte_range_80_af = simd_andc(byte_range_80_bf, tmp2);
        carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_87, carryQ.get_carry_in(23), tmp110));
        sequence_f3_a0_87_byte_range_80_af = simd_and(tmp110, byte_range_80_af);
        struct_Mn.cc = simd_or(struct_Mn.cc, sequence_f3_a0_87_byte_range_80_af);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(24, 12))) {
          r80_7ff_tmp1 = simd_andc(tmp1, tmp13);
          r80_7ff_tmp2 = simd_andc(tmp53, tmp5);
          byte_cc = simd_and(r80_7ff_tmp1, r80_7ff_tmp2);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_cc, carryQ.get_carry_in(24), byte_cc_adv));
          r80_7ff_tmp3 = simd_and(byte_cc_adv, byte_range_80_bf);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp3);
          byte_cd = simd_and(r80_7ff_tmp1, tmp66);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(25), byte_cd_adv));
          r80_7ff_tmp4 = simd_and(byte_cd_adv, byte_range_80_af);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp4);
          r80_7ff_tmp5 = simd_and(tmp1, tmp8);
          byte_d2 = simd_and(r80_7ff_tmp5, tmp25);
          r80_7ff_tmp6 = simd_andc(tmp109, basis_bits.bit_4);
          byte_range_83_87 = simd_and(r80_7ff_tmp6, tmp88);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(26), byte_d2_adv));
          r80_7ff_tmp7 = simd_and(byte_d2_adv, byte_range_83_87);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp7);
          byte_d6 = simd_and(r80_7ff_tmp5, tmp58);
          r80_7ff_tmp8 = simd_and(tmp53, basis_bits.bit_6);
          r80_7ff_tmp9 = simd_and(basis_bits.bit_3, r80_7ff_tmp8);
          r80_7ff_tmp10 = simd_not(r80_7ff_tmp9);
          r80_7ff_tmp11 = simd_and(basis_bits.bit_3, tmp6);
          r80_7ff_tmp12 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp10), simd_andc(r80_7ff_tmp11, basis_bits.bit_2));
          r80_7ff_tmp13 = simd_and(byte_range_80_bf, r80_7ff_tmp12);
          r80_7ff_tmp14 = simd_and(byte_range_80_bf, tmp2);
          r80_7ff_tmp15 = simd_and(r80_7ff_tmp14, tmp79);
          cc_range_591_5bf_2 = simd_or(r80_7ff_tmp13, r80_7ff_tmp15);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(27), byte_d6_adv));
          r80_7ff_tmp16 = simd_and(byte_d6_adv, cc_range_591_5bf_2);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp16);
          byte_d7 = simd_and(r80_7ff_tmp5, tmp71);
          r80_7ff_tmp17 = simd_andc(tmp109, tmp4);
          r80_7ff_tmp18 = simd_and(r80_7ff_tmp17, tmp36);
          r80_7ff_tmp19 = simd_andc(tmp39, basis_bits.bit_6);
          r80_7ff_tmp20 = simd_and(tmp109, r80_7ff_tmp19);
          r80_7ff_tmp21 = simd_or(r80_7ff_tmp18, r80_7ff_tmp20);
          cc_range_5c1_5c7_2 = simd_or(r80_7ff_tmp21, byte_87);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(28), byte_d7_adv));
          r80_7ff_tmp22 = simd_and(byte_d7_adv, cc_range_5c1_5c7_2);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp22);
          r80_7ff_tmp23 = simd_andc(tmp33, tmp5);
          byte_d8 = simd_and(r80_7ff_tmp5, r80_7ff_tmp23);
          r80_7ff_tmp24 = simd_and(byte_range_80_bf, tmp8);
          r80_7ff_tmp25 = simd_and(basis_bits.bit_4, tmp88);
          byte_range_90_9a = simd_andc(r80_7ff_tmp24, r80_7ff_tmp25);
          carryQ.cq[29] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(29), byte_d8_adv));
          r80_7ff_tmp26 = simd_and(byte_d8_adv, byte_range_90_9a);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp26);
          byte_d9 = simd_and(r80_7ff_tmp5, tmp99);
          r80_7ff_tmp27 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
          r80_7ff_tmp28 = simd_or(basis_bits.bit_3, r80_7ff_tmp25);
          r80_7ff_tmp29 = simd_and(r80_7ff_tmp27, r80_7ff_tmp28);
          r80_7ff_tmp30 = simd_andc(r80_7ff_tmp14, tmp6);
          cc_range_64b_670_2 = simd_or(r80_7ff_tmp29, r80_7ff_tmp30);
          carryQ.cq[30] = carryout2carry(pablo_blk_Advance(byte_d9, carryQ.get_carry_in(30), byte_d9_adv));
          r80_7ff_tmp31 = simd_and(byte_d9_adv, cc_range_64b_670_2);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp31);
          byte_db = simd_and(r80_7ff_tmp5, tmp65);
          r80_7ff_tmp32 = simd_not(tmp50);
          r80_7ff_tmp33 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp32), simd_andc(tmp60, basis_bits.bit_4));
          r80_7ff_tmp34 = simd_and(r80_7ff_tmp24, r80_7ff_tmp33);
          r80_7ff_tmp35 = simd_or(basis_bits.bit_3, tmp51);
          r80_7ff_tmp36 = simd_not(r80_7ff_tmp35);
          r80_7ff_tmp37 = simd_and(basis_bits.bit_3, tmp79);
          r80_7ff_tmp38 = simd_or(simd_and(basis_bits.bit_2, r80_7ff_tmp36), simd_andc(r80_7ff_tmp37, basis_bits.bit_2));
          r80_7ff_tmp39 = simd_and(byte_range_80_bf, r80_7ff_tmp38);
          r80_7ff_tmp40 = simd_or(r80_7ff_tmp34, r80_7ff_tmp39);
          r80_7ff_tmp41 = simd_or(basis_bits.bit_5, tmp5);
          r80_7ff_tmp42 = simd_not(r80_7ff_tmp41);
          r80_7ff_tmp43 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp42), simd_andc(tmp22, basis_bits.bit_4));
          r80_7ff_tmp44 = simd_and(tmp108, r80_7ff_tmp43);
          r80_7ff_tmp45 = simd_or(r80_7ff_tmp40, r80_7ff_tmp44);
          r80_7ff_tmp46 = simd_and(tmp108, basis_bits.bit_4);
          r80_7ff_tmp47 = simd_and(r80_7ff_tmp46, tmp96);
          cc_range_6d6_6ea_2 = simd_or(r80_7ff_tmp45, r80_7ff_tmp47);
          carryQ.cq[31] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(31), byte_db_adv));
          r80_7ff_tmp48 = simd_and(byte_db_adv, cc_range_6d6_6ea_2);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp48);
          byte_dc = simd_and(r80_7ff_tmp5, r80_7ff_tmp2);
          r80_7ff_tmp49 = simd_and(r80_7ff_tmp24, tmp11);
          cc_range_711_730_2 = simd_or(r80_7ff_tmp49, r80_7ff_tmp14);
          carryQ.cq[32] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(32), byte_dc_adv));
          r80_7ff_tmp50 = simd_and(byte_dc_adv, cc_range_711_730_2);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp50);
          byte_dd = simd_and(r80_7ff_tmp5, tmp66);
          byte_range_80_8a = simd_andc(tmp109, r80_7ff_tmp25);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(33), byte_dd_adv));
          r80_7ff_tmp51 = simd_and(byte_dd_adv, byte_range_80_8a);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp51);
          byte_de = simd_and(r80_7ff_tmp5, tmp74);
          r80_7ff_tmp52 = simd_and(byte_range_80_bf, basis_bits.bit_2);
          r80_7ff_tmp53 = simd_not(tmp6);
          r80_7ff_tmp54 = simd_or(basis_bits.bit_4, tmp60);
          r80_7ff_tmp55 = simd_or(simd_and(basis_bits.bit_3, r80_7ff_tmp53), simd_andc(r80_7ff_tmp54, basis_bits.bit_3));
          byte_range_a6_b0 = simd_and(r80_7ff_tmp52, r80_7ff_tmp55);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(34), byte_de_adv));
          r80_7ff_tmp56 = simd_and(byte_de_adv, byte_range_a6_b0);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp56);
          byte_df = simd_and(r80_7ff_tmp5, tmp79);
          r80_7ff_tmp57 = simd_not(tmp4);
          r80_7ff_tmp58 = simd_or(simd_and(basis_bits.bit_3, r80_7ff_tmp57), simd_andc(r80_7ff_tmp25, basis_bits.bit_3));
          byte_range_ab_b3 = simd_and(r80_7ff_tmp52, r80_7ff_tmp58);
          carryQ.cq[35] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(35), byte_df_adv));
          r80_7ff_tmp59 = simd_and(byte_df_adv, byte_range_ab_b3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r80_7ff_tmp59);
        }
        else {
          carryQ.CarryDequeueEnqueue(24, 12);
        }
        byte_range_e0_ef = simd_and(tmp1, tmp43);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(36, 82))) {
          byte_e0 = simd_andc(byte_range_e0_ef, tmp6);
          carryQ.cq[36] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(36), r800_ffff_tmp1));
          sequence_e0_a0 = simd_and(r800_ffff_tmp1, byte_a0);
          carryQ.cq[37] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(37), byte_e0_adv));
          sequence_e0_a0 = simd_and(byte_e0_adv, byte_a0);
          r800_ffff_tmp2 = simd_and(byte_range_80_bf, tmp8);
          r800_ffff_tmp3 = simd_or(simd_and(basis_bits.bit_4, tmp85), simd_andc(tmp60, basis_bits.bit_4));
          r800_ffff_tmp4 = simd_and(r800_ffff_tmp2, r800_ffff_tmp3);
          r800_ffff_tmp5 = simd_or(basis_bits.bit_3, tmp4);
          r800_ffff_tmp6 = simd_not(r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_and(basis_bits.bit_4, tmp88);
          r800_ffff_tmp8 = simd_and(basis_bits.bit_3, r800_ffff_tmp7);
          r800_ffff_tmp9 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp6), simd_andc(r800_ffff_tmp8, basis_bits.bit_2));
          r800_ffff_tmp10 = simd_and(byte_range_80_bf, r800_ffff_tmp9);
          r800_ffff_tmp11 = simd_or(r800_ffff_tmp4, r800_ffff_tmp10);
          r800_ffff_tmp12 = simd_and(tmp108, tmp39);
          r800_ffff_tmp13 = simd_and(r800_ffff_tmp12, tmp5);
          r800_ffff_tmp14 = simd_or(r800_ffff_tmp11, r800_ffff_tmp13);
          r800_ffff_tmp15 = simd_and(tmp108, basis_bits.bit_4);
          r800_ffff_tmp16 = simd_or(simd_and(basis_bits.bit_5, tmp95), simd_andc(tmp5, basis_bits.bit_5));
          r800_ffff_tmp17 = simd_and(r800_ffff_tmp15, r800_ffff_tmp16);
          cc_range_816_829_3 = simd_or(r800_ffff_tmp14, r800_ffff_tmp17);
          carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(38), sequence_e0_a0_adv));
          r800_ffff_tmp18 = simd_and(sequence_e0_a0_adv, cc_range_816_829_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp18);
          byte_a1 = simd_and(tmp108, tmp11);
          sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
          sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
          r800_ffff_tmp19 = simd_and(r800_ffff_tmp2, tmp33);
          byte_range_99_9b = simd_and(r800_ffff_tmp19, tmp5);
          carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(39), sequence_e0_a1_adv));
          r800_ffff_tmp20 = simd_and(sequence_e0_a1_adv, byte_range_99_9b);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp20);
          byte_a3 = simd_and(tmp108, tmp103);
          sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
          sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
          r800_ffff_tmp21 = simd_and(byte_range_80_bf, basis_bits.bit_2);
          r800_ffff_tmp22 = simd_not(tmp79);
          r800_ffff_tmp23 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp22), simd_andc(tmp4, basis_bits.bit_3));
          byte_range_a4_be = simd_and(r800_ffff_tmp21, r800_ffff_tmp23);
          carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_e0_a3, carryQ.get_carry_in(40), sequence_e0_a3_adv));
          r800_ffff_tmp24 = simd_and(sequence_e0_a3_adv, byte_range_a4_be);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp24);
          byte_a4 = simd_and(tmp108, tmp40);
          sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
          sequence_e0_a4 = simd_and(byte_e0_adv, byte_a4);
          r800_ffff_tmp25 = simd_andc(tmp109, tmp4);
          r800_ffff_tmp26 = simd_andc(r800_ffff_tmp25, tmp21);
          r800_ffff_tmp27 = simd_and(byte_range_80_bf, tmp2);
          r800_ffff_tmp28 = simd_and(r800_ffff_tmp27, tmp64);
          r800_ffff_tmp29 = simd_or(r800_ffff_tmp26, r800_ffff_tmp28);
          r800_ffff_tmp30 = simd_andc(tmp53, tmp5);
          r800_ffff_tmp31 = simd_and(r800_ffff_tmp27, r800_ffff_tmp30);
          cc_range_900_93c_3 = simd_or(r800_ffff_tmp29, r800_ffff_tmp31);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_e0_a4, carryQ.get_carry_in(41), sequence_e0_a4_adv));
          r800_ffff_tmp32 = simd_and(sequence_e0_a4_adv, cc_range_900_93c_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp32);
          byte_a5 = simd_and(tmp108, tmp82);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          r800_ffff_tmp33 = simd_or(basis_bits.bit_5, tmp5);
          r800_ffff_tmp34 = simd_not(r800_ffff_tmp33);
          r800_ffff_tmp35 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp34), simd_andc(r800_ffff_tmp33, basis_bits.bit_4));
          r800_ffff_tmp36 = simd_or(r800_ffff_tmp35, tmp66);
          r800_ffff_tmp37 = simd_and(tmp109, r800_ffff_tmp36);
          r800_ffff_tmp38 = simd_andc(r800_ffff_tmp2, basis_bits.bit_4);
          r800_ffff_tmp39 = simd_and(r800_ffff_tmp38, r800_ffff_tmp33);
          r800_ffff_tmp40 = simd_or(r800_ffff_tmp37, r800_ffff_tmp39);
          r800_ffff_tmp41 = simd_andc(basis_bits.bit_6, tmp4);
          r800_ffff_tmp42 = simd_and(tmp108, r800_ffff_tmp41);
          cc_range_941_962_3 = simd_or(r800_ffff_tmp40, r800_ffff_tmp42);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(42), sequence_e0_a5_adv));
          r800_ffff_tmp43 = simd_and(sequence_e0_a5_adv, cc_range_941_962_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp43);
          byte_a6 = simd_and(tmp108, tmp58);
          sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
          sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
          r800_ffff_tmp44 = simd_and(tmp109, tmp11);
          cc_range_981_9bc_3 = simd_or(r800_ffff_tmp44, r800_ffff_tmp31);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(43), sequence_e0_a6_adv));
          r800_ffff_tmp45 = simd_and(sequence_e0_a6_adv, cc_range_981_9bc_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp45);
          byte_a7 = simd_and(tmp108, tmp71);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          r800_ffff_tmp46 = simd_andc(tmp109, basis_bits.bit_4);
          r800_ffff_tmp47 = simd_or(simd_and(basis_bits.bit_5, tmp100), simd_andc(tmp5, basis_bits.bit_5));
          r800_ffff_tmp48 = simd_and(r800_ffff_tmp46, r800_ffff_tmp47);
          r800_ffff_tmp49 = simd_and(tmp109, tmp66);
          r800_ffff_tmp50 = simd_or(r800_ffff_tmp48, r800_ffff_tmp49);
          cc_range_9c1_9e2_3 = simd_or(r800_ffff_tmp50, r800_ffff_tmp42);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(44), sequence_e0_a7_adv));
          r800_ffff_tmp51 = simd_and(sequence_e0_a7_adv, cc_range_9c1_9e2_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp51);
          r800_ffff_tmp52 = simd_andc(tmp33, tmp5);
          byte_a8 = simd_and(tmp108, r800_ffff_tmp52);
          sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
          sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
          r800_ffff_tmp53 = simd_and(r800_ffff_tmp25, tmp36);
          cc_range_a01_a3c_3 = simd_or(r800_ffff_tmp53, r800_ffff_tmp31);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(45), sequence_e0_a8_adv));
          r800_ffff_tmp54 = simd_and(sequence_e0_a8_adv, cc_range_a01_a3c_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp54);
          byte_a9 = simd_and(tmp108, tmp99);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          r800_ffff_tmp55 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp34), simd_andc(tmp22, basis_bits.bit_4));
          r800_ffff_tmp56 = simd_and(tmp109, r800_ffff_tmp55);
          r800_ffff_tmp57 = simd_or(r800_ffff_tmp53, r800_ffff_tmp56);
          r800_ffff_tmp58 = simd_and(tmp109, basis_bits.bit_4);
          r800_ffff_tmp59 = simd_or(simd_and(basis_bits.bit_5, tmp95), simd_andc(tmp21, basis_bits.bit_5));
          r800_ffff_tmp60 = simd_and(r800_ffff_tmp58, r800_ffff_tmp59);
          r800_ffff_tmp61 = simd_or(r800_ffff_tmp57, r800_ffff_tmp60);
          r800_ffff_tmp62 = simd_and(r800_ffff_tmp2, tmp11);
          r800_ffff_tmp63 = simd_or(r800_ffff_tmp61, r800_ffff_tmp62);
          r800_ffff_tmp64 = simd_andc(r800_ffff_tmp27, tmp26);
          r800_ffff_tmp65 = simd_or(r800_ffff_tmp63, r800_ffff_tmp64);
          r800_ffff_tmp66 = simd_and(r800_ffff_tmp27, tmp82);
          cc_range_a41_a75_3 = simd_or(r800_ffff_tmp65, r800_ffff_tmp66);
          carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(46), sequence_e0_a9_adv));
          r800_ffff_tmp67 = simd_and(sequence_e0_a9_adv, cc_range_a41_a75_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp67);
          byte_aa = simd_and(tmp108, tmp64);
          sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
          sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
          cc_range_a81_abc_3 = simd_or(r800_ffff_tmp53, r800_ffff_tmp31);
          carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(47), sequence_e0_aa_adv));
          r800_ffff_tmp68 = simd_and(sequence_e0_aa_adv, cc_range_a81_abc_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp68);
          byte_ab = simd_and(tmp108, tmp65);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          r800_ffff_tmp69 = simd_and(r800_ffff_tmp46, r800_ffff_tmp16);
          r800_ffff_tmp70 = simd_or(r800_ffff_tmp69, r800_ffff_tmp56);
          r800_ffff_tmp71 = simd_or(r800_ffff_tmp70, r800_ffff_tmp49);
          cc_range_ac1_ae2_3 = simd_or(r800_ffff_tmp71, r800_ffff_tmp42);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(48), sequence_e0_ab_adv));
          r800_ffff_tmp72 = simd_and(sequence_e0_ab_adv, cc_range_ac1_ae2_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp72);
          byte_ac = simd_and(tmp108, r800_ffff_tmp30);
          sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
          sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
          r800_ffff_tmp73 = simd_and(r800_ffff_tmp27, tmp79);
          cc_range_b01_b3f_3 = simd_or(cc_range_981_9bc_3, r800_ffff_tmp73);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(49), sequence_e0_ac_adv));
          r800_ffff_tmp74 = simd_and(sequence_e0_ac_adv, cc_range_b01_b3f_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp74);
          byte_ad = simd_and(tmp108, tmp66);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          r800_ffff_tmp75 = simd_and(r800_ffff_tmp2, tmp58);
          r800_ffff_tmp76 = simd_or(r800_ffff_tmp50, r800_ffff_tmp75);
          cc_range_b41_b62_3 = simd_or(r800_ffff_tmp76, r800_ffff_tmp42);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(50), sequence_e0_ad_adv));
          r800_ffff_tmp77 = simd_and(sequence_e0_ad_adv, cc_range_b41_b62_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp77);
          byte_ae = simd_and(tmp108, tmp74);
          sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
          sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(51), sequence_e0_ae_adv));
          r800_ffff_tmp78 = simd_and(sequence_e0_ae_adv, byte_82);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp78);
          byte_af = simd_and(tmp108, tmp79);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          r800_ffff_tmp79 = simd_andc(tmp6, tmp66);
          cc_range_bc0_bcd_3 = simd_andc(tmp109, r800_ffff_tmp79);
          carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(52), sequence_e0_af_adv));
          r800_ffff_tmp80 = simd_and(sequence_e0_af_adv, cc_range_bc0_bcd_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp80);
          byte_b0 = simd_andc(r800_ffff_tmp27, tmp6);
          sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
          sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
          r800_ffff_tmp81 = simd_and(tmp53, basis_bits.bit_6);
          byte_range_be_bf = simd_and(r800_ffff_tmp27, r800_ffff_tmp81);
          carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(53), sequence_e0_b0_adv));
          r800_ffff_tmp82 = simd_and(sequence_e0_b0_adv, byte_range_be_bf);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp82);
          byte_b1 = simd_and(r800_ffff_tmp27, tmp11);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          r800_ffff_tmp83 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp34), simd_andc(tmp60, basis_bits.bit_4));
          r800_ffff_tmp84 = simd_andc(tmp6, r800_ffff_tmp83);
          r800_ffff_tmp85 = simd_andc(tmp109, r800_ffff_tmp84);
          r800_ffff_tmp86 = simd_and(r800_ffff_tmp58, tmp96);
          r800_ffff_tmp87 = simd_or(r800_ffff_tmp85, r800_ffff_tmp86);
          r800_ffff_tmp88 = simd_and(r800_ffff_tmp2, tmp39);
          r800_ffff_tmp89 = simd_and(r800_ffff_tmp88, tmp36);
          r800_ffff_tmp90 = simd_or(r800_ffff_tmp87, r800_ffff_tmp89);
          cc_range_c40_c62_3 = simd_or(r800_ffff_tmp90, r800_ffff_tmp42);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(54), sequence_e0_b1_adv));
          r800_ffff_tmp91 = simd_and(sequence_e0_b1_adv, cc_range_c40_c62_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp91);
          byte_b2 = simd_and(r800_ffff_tmp27, tmp25);
          sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
          sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
          r800_ffff_tmp92 = simd_andc(tmp5, tmp21);
          r800_ffff_tmp93 = simd_andc(tmp53, r800_ffff_tmp92);
          cc_range_cbc_cbf_3 = simd_and(r800_ffff_tmp27, r800_ffff_tmp93);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(55), sequence_e0_b2_adv));
          r800_ffff_tmp94 = simd_and(sequence_e0_b2_adv, cc_range_cbc_cbf_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp94);
          byte_b3 = simd_and(r800_ffff_tmp27, tmp103);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          r800_ffff_tmp95 = simd_andc(tmp53, basis_bits.bit_6);
          r800_ffff_tmp96 = simd_or(tmp58, r800_ffff_tmp95);
          r800_ffff_tmp97 = simd_and(tmp109, r800_ffff_tmp96);
          cc_range_cc6_ce2_3 = simd_or(r800_ffff_tmp97, r800_ffff_tmp42);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(56), sequence_e0_b3_adv));
          r800_ffff_tmp98 = simd_and(sequence_e0_b3_adv, cc_range_cc6_ce2_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp98);
          byte_b5 = simd_and(r800_ffff_tmp27, tmp82);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          cc_range_d41_d62_3 = simd_or(r800_ffff_tmp50, r800_ffff_tmp42);
          carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(57), sequence_e0_b5_adv));
          r800_ffff_tmp99 = simd_and(sequence_e0_b5_adv, cc_range_d41_d62_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp99);
          byte_b7 = simd_and(r800_ffff_tmp27, tmp71);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          r800_ffff_tmp100 = simd_and(tmp109, tmp64);
          r800_ffff_tmp101 = simd_and(r800_ffff_tmp38, tmp101);
          r800_ffff_tmp102 = simd_or(r800_ffff_tmp100, r800_ffff_tmp101);
          cc_range_dca_dd6_3 = simd_or(r800_ffff_tmp102, r800_ffff_tmp75);
          carryQ.cq[58] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(58), sequence_e0_b7_adv));
          r800_ffff_tmp103 = simd_and(sequence_e0_b7_adv, cc_range_dca_dd6_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp103);
          byte_b8 = simd_and(r800_ffff_tmp27, r800_ffff_tmp52);
          sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
          sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
          r800_ffff_tmp104 = simd_not(tmp88);
          r800_ffff_tmp105 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp104), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          r800_ffff_tmp106 = simd_or(tmp11, r800_ffff_tmp105);
          cc_range_e31_e34_3 = simd_and(r800_ffff_tmp27, r800_ffff_tmp106);
          carryQ.cq[59] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(59), sequence_e0_b8_adv));
          r800_ffff_tmp107 = simd_and(sequence_e0_b8_adv, cc_range_e31_e34_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp107);
          byte_b9 = simd_and(r800_ffff_tmp27, tmp99);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          r800_ffff_tmp108 = simd_or(simd_and(basis_bits.bit_4, tmp59), simd_andc(tmp22, basis_bits.bit_4));
          byte_range_87_8e = simd_and(tmp109, r800_ffff_tmp108);
          carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(60), sequence_e0_b9_adv));
          r800_ffff_tmp109 = simd_and(sequence_e0_b9_adv, byte_range_87_8e);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp109);
          byte_ba = simd_and(r800_ffff_tmp27, tmp64);
          sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
          sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
          r800_ffff_tmp110 = simd_or(simd_and(basis_bits.bit_4, tmp85), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          r800_ffff_tmp111 = simd_or(tmp11, r800_ffff_tmp110);
          r800_ffff_tmp112 = simd_and(r800_ffff_tmp27, r800_ffff_tmp111);
          r800_ffff_tmp113 = simd_and(r800_ffff_tmp27, basis_bits.bit_4);
          r800_ffff_tmp114 = simd_or(simd_and(basis_bits.bit_5, tmp100), simd_andc(tmp21, basis_bits.bit_5));
          r800_ffff_tmp115 = simd_and(r800_ffff_tmp113, r800_ffff_tmp114);
          cc_range_eb1_ebb_3 = simd_or(r800_ffff_tmp112, r800_ffff_tmp115);
          carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(61), sequence_e0_ba_adv));
          r800_ffff_tmp116 = simd_and(sequence_e0_ba_adv, cc_range_eb1_ebb_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp116);
          byte_bb = simd_and(r800_ffff_tmp27, tmp65);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          byte_range_88_8d = simd_andc(r800_ffff_tmp58, tmp60);
          carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(62), sequence_e0_bb_adv));
          r800_ffff_tmp117 = simd_and(sequence_e0_bb_adv, byte_range_88_8d);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp117);
          byte_bc = simd_and(r800_ffff_tmp27, r800_ffff_tmp30);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          r800_ffff_tmp118 = simd_andc(tmp33, basis_bits.bit_6);
          r800_ffff_tmp119 = simd_and(r800_ffff_tmp2, r800_ffff_tmp118);
          r800_ffff_tmp120 = simd_or(r800_ffff_tmp119, byte_b5);
          r800_ffff_tmp121 = simd_or(r800_ffff_tmp120, byte_b7);
          cc_range_f18_f39_3 = simd_or(r800_ffff_tmp121, byte_b9);
          carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(63), sequence_e0_bc_adv));
          r800_ffff_tmp122 = simd_and(sequence_e0_bc_adv, cc_range_f18_f39_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp122);
          byte_bd = simd_and(r800_ffff_tmp27, tmp66);
          sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
          sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
          r800_ffff_tmp123 = simd_or(simd_and(basis_bits.bit_4, tmp59), simd_andc(r800_ffff_tmp33, basis_bits.bit_4));
          byte_range_b1_be = simd_and(r800_ffff_tmp27, r800_ffff_tmp123);
          carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(64), sequence_e0_bd_adv));
          r800_ffff_tmp124 = simd_and(sequence_e0_bd_adv, byte_range_b1_be);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp124);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          r800_ffff_tmp125 = simd_andc(r800_ffff_tmp46, tmp50);
          r800_ffff_tmp126 = simd_and(tmp39, basis_bits.bit_6);
          r800_ffff_tmp127 = simd_and(tmp109, r800_ffff_tmp126);
          r800_ffff_tmp128 = simd_or(r800_ffff_tmp125, r800_ffff_tmp127);
          r800_ffff_tmp129 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
          r800_ffff_tmp130 = simd_not(basis_bits.bit_4);
          r800_ffff_tmp131 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp130), simd_andc(tmp54, basis_bits.bit_3));
          r800_ffff_tmp132 = simd_and(r800_ffff_tmp129, r800_ffff_tmp131);
          r800_ffff_tmp133 = simd_or(r800_ffff_tmp128, r800_ffff_tmp132);
          r800_ffff_tmp134 = simd_and(basis_bits.bit_3, tmp54);
          r800_ffff_tmp135 = simd_not(r800_ffff_tmp134);
          r800_ffff_tmp136 = simd_and(basis_bits.bit_4, r800_ffff_tmp33);
          r800_ffff_tmp137 = simd_and(basis_bits.bit_3, r800_ffff_tmp136);
          r800_ffff_tmp138 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp135), simd_andc(r800_ffff_tmp137, basis_bits.bit_2));
          r800_ffff_tmp139 = simd_and(byte_range_80_bf, r800_ffff_tmp138);
          cc_range_f80_f99_3 = simd_or(r800_ffff_tmp133, r800_ffff_tmp139);
          carryQ.cq[65] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(65), sequence_e0_be_adv));
          r800_ffff_tmp140 = simd_and(sequence_e0_be_adv, cc_range_f80_f99_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp140);
          byte_bf = simd_and(r800_ffff_tmp27, tmp79);
          sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
          sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
          carryQ.cq[66] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(66), sequence_e0_bf_adv));
          r800_ffff_tmp141 = simd_and(sequence_e0_bf_adv, byte_86);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp141);
          byte_e1 = simd_and(byte_range_e0_ef, tmp11);
          carryQ.cq[67] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(67), r800_ffff_tmp142));
          sequence_e1_80 = simd_and(r800_ffff_tmp142, byte_80);
          carryQ.cq[68] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(68), byte_e1_adv));
          sequence_e1_80 = simd_and(byte_e1_adv, byte_80);
          r800_ffff_tmp143 = simd_not(tmp6);
          r800_ffff_tmp144 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp143), simd_andc(tmp54, basis_bits.bit_3));
          r800_ffff_tmp145 = simd_and(r800_ffff_tmp21, r800_ffff_tmp144);
          r800_ffff_tmp146 = simd_andc(r800_ffff_tmp27, basis_bits.bit_4);
          r800_ffff_tmp147 = simd_and(r800_ffff_tmp146, tmp84);
          r800_ffff_tmp148 = simd_or(r800_ffff_tmp145, r800_ffff_tmp147);
          r800_ffff_tmp149 = simd_and(r800_ffff_tmp27, tmp33);
          r800_ffff_tmp150 = simd_and(r800_ffff_tmp149, tmp36);
          r800_ffff_tmp151 = simd_or(r800_ffff_tmp148, r800_ffff_tmp150);
          r800_ffff_tmp152 = simd_and(r800_ffff_tmp27, tmp53);
          r800_ffff_tmp153 = simd_and(r800_ffff_tmp152, tmp36);
          cc_range_102d_103d_3 = simd_or(r800_ffff_tmp151, r800_ffff_tmp153);
          carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e1_80, carryQ.get_carry_in(69), sequence_e1_80_adv));
          r800_ffff_tmp154 = simd_and(sequence_e1_80_adv, cc_range_102d_103d_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp154);
          sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
          sequence_e1_81 = simd_and(byte_e1_adv, byte_81);
          r800_ffff_tmp155 = simd_or(basis_bits.bit_3, tmp6);
          r800_ffff_tmp156 = simd_not(r800_ffff_tmp155);
          r800_ffff_tmp157 = simd_and(basis_bits.bit_3, r800_ffff_tmp81);
          r800_ffff_tmp158 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp156), simd_andc(r800_ffff_tmp157, basis_bits.bit_2));
          r800_ffff_tmp159 = simd_and(byte_range_80_bf, r800_ffff_tmp158);
          r800_ffff_tmp160 = simd_or(r800_ffff_tmp119, r800_ffff_tmp159);
          r800_ffff_tmp161 = simd_and(r800_ffff_tmp146, r800_ffff_tmp47);
          cc_range_1058_1071_3 = simd_or(r800_ffff_tmp160, r800_ffff_tmp161);
          carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e1_81, carryQ.get_carry_in(70), sequence_e1_81_adv));
          r800_ffff_tmp162 = simd_and(sequence_e1_81_adv, cc_range_1058_1071_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp162);
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          r800_ffff_tmp163 = simd_and(tmp109, tmp25);
          r800_ffff_tmp164 = simd_and(tmp109, tmp39);
          r800_ffff_tmp165 = simd_and(r800_ffff_tmp164, tmp36);
          r800_ffff_tmp166 = simd_or(r800_ffff_tmp163, r800_ffff_tmp165);
          r800_ffff_tmp167 = simd_or(r800_ffff_tmp166, r800_ffff_tmp49);
          r800_ffff_tmp168 = simd_and(r800_ffff_tmp2, tmp66);
          cc_range_1082_109d_3 = simd_or(r800_ffff_tmp167, r800_ffff_tmp168);
          carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(71), sequence_e1_82_adv));
          r800_ffff_tmp169 = simd_and(sequence_e1_82_adv, cc_range_1082_109d_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp169);
          byte_8d = simd_and(tmp109, tmp66);
          sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
          sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
          r800_ffff_tmp170 = simd_and(r800_ffff_tmp2, tmp53);
          byte_range_9d_9f = simd_and(r800_ffff_tmp170, tmp5);
          carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(72), sequence_e1_8d_adv));
          r800_ffff_tmp171 = simd_and(sequence_e1_8d_adv, byte_range_9d_9f);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp171);
          byte_9c = simd_and(r800_ffff_tmp2, r800_ffff_tmp30);
          sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
          sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
          r800_ffff_tmp172 = simd_and(byte_range_80_bf, basis_bits.bit_3);
          r800_ffff_tmp173 = simd_andc(r800_ffff_tmp172, basis_bits.bit_4);
          cc_range_1712_1732_3 = simd_and(tmp101, r800_ffff_tmp173);
          carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(73), sequence_e1_9c_adv));
          r800_ffff_tmp174 = simd_and(sequence_e1_9c_adv, cc_range_1712_1732_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp174);
          sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
          sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
          cc_range_1752_1772_3 = simd_and(r800_ffff_tmp41, r800_ffff_tmp172);
          carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(74), sequence_e1_9d_adv));
          r800_ffff_tmp175 = simd_and(sequence_e1_9d_adv, cc_range_1752_1772_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp175);
          byte_9e = simd_and(r800_ffff_tmp2, tmp74);
          sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
          sequence_e1_9e = simd_and(byte_e1_adv, byte_9e);
          r800_ffff_tmp176 = simd_andc(tmp39, basis_bits.bit_6);
          r800_ffff_tmp177 = simd_not(tmp60);
          r800_ffff_tmp178 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp177), simd_andc(tmp22, basis_bits.bit_4));
          r800_ffff_tmp179 = simd_or(r800_ffff_tmp176, r800_ffff_tmp178);
          cc_range_17b4_17b7_3 = simd_and(r800_ffff_tmp27, r800_ffff_tmp179);
          carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e1_9e, carryQ.get_carry_in(75), sequence_e1_9e_adv));
          r800_ffff_tmp180 = simd_and(sequence_e1_9e_adv, cc_range_17b4_17b7_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp180);
          byte_9f = simd_and(r800_ffff_tmp2, tmp79);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          r800_ffff_tmp181 = simd_and(tmp109, tmp58);
          r800_ffff_tmp182 = simd_not(tmp4);
          r800_ffff_tmp183 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp182), simd_andc(r800_ffff_tmp136, basis_bits.bit_3));
          r800_ffff_tmp184 = simd_and(r800_ffff_tmp129, r800_ffff_tmp183);
          r800_ffff_tmp185 = simd_or(r800_ffff_tmp181, r800_ffff_tmp184);
          cc_range_17c6_17dd_3 = simd_or(r800_ffff_tmp185, r800_ffff_tmp168);
          carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(76), sequence_e1_9f_adv));
          r800_ffff_tmp186 = simd_and(sequence_e1_9f_adv, cc_range_17c6_17dd_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp186);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          byte_range_8b_8d = simd_and(r800_ffff_tmp58, r800_ffff_tmp59);
          carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(77), sequence_e1_a0_adv));
          r800_ffff_tmp187 = simd_and(sequence_e1_a0_adv, byte_range_8b_8d);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp187);
          byte_a2 = simd_and(tmp108, tmp25);
          sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
          sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
          carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(78), sequence_e1_a2_adv));
          r800_ffff_tmp188 = simd_and(sequence_e1_a2_adv, byte_a9);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp188);
          sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
          sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
          r800_ffff_tmp189 = simd_andc(tmp108, tmp4);
          r800_ffff_tmp190 = simd_andc(r800_ffff_tmp189, tmp21);
          r800_ffff_tmp191 = simd_and(tmp108, r800_ffff_tmp55);
          r800_ffff_tmp192 = simd_or(r800_ffff_tmp190, r800_ffff_tmp191);
          r800_ffff_tmp193 = simd_or(r800_ffff_tmp192, byte_b2);
          r800_ffff_tmp194 = simd_and(r800_ffff_tmp149, tmp5);
          cc_range_1920_1939_3 = simd_or(r800_ffff_tmp193, r800_ffff_tmp194);
          carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(79), sequence_e1_a4_adv));
          r800_ffff_tmp195 = simd_and(sequence_e1_a4_adv, cc_range_1920_1939_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp195);
          sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
          sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
          r800_ffff_tmp196 = simd_or(r800_ffff_tmp55, tmp65);
          cc_range_1a17_1a1b_3 = simd_and(r800_ffff_tmp2, r800_ffff_tmp196);
          carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(80), sequence_e1_a8_adv));
          r800_ffff_tmp197 = simd_and(sequence_e1_a8_adv, cc_range_1a17_1a1b_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp197);
          sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
          sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
          r800_ffff_tmp198 = simd_and(r800_ffff_tmp2, basis_bits.bit_4);
          r800_ffff_tmp199 = simd_andc(r800_ffff_tmp198, tmp22);
          r800_ffff_tmp200 = simd_or(r800_ffff_tmp75, r800_ffff_tmp199);
          r800_ffff_tmp201 = simd_andc(tmp108, tmp6);
          r800_ffff_tmp202 = simd_or(r800_ffff_tmp200, r800_ffff_tmp201);
          r800_ffff_tmp203 = simd_or(r800_ffff_tmp202, byte_a2);
          r800_ffff_tmp204 = simd_not(tmp50);
          r800_ffff_tmp205 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp204), simd_andc(tmp50, basis_bits.bit_4));
          r800_ffff_tmp206 = simd_and(tmp108, r800_ffff_tmp205);
          r800_ffff_tmp207 = simd_or(r800_ffff_tmp203, r800_ffff_tmp206);
          r800_ffff_tmp208 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp204), simd_andc(tmp88, basis_bits.bit_4));
          r800_ffff_tmp209 = simd_and(r800_ffff_tmp27, r800_ffff_tmp208);
          r800_ffff_tmp210 = simd_or(r800_ffff_tmp207, r800_ffff_tmp209);
          cc_range_1a56_1a7f_3 = simd_or(r800_ffff_tmp210, byte_bf);
          carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(81), sequence_e1_a9_adv));
          r800_ffff_tmp211 = simd_and(sequence_e1_a9_adv, cc_range_1a56_1a7f_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp211);
          sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
          sequence_e1_ac = simd_and(byte_e1_adv, byte_ac);
          r800_ffff_tmp212 = simd_and(r800_ffff_tmp27, tmp40);
          r800_ffff_tmp213 = simd_or(r800_ffff_tmp25, r800_ffff_tmp212);
          r800_ffff_tmp214 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp104), simd_andc(tmp60, basis_bits.bit_4));
          r800_ffff_tmp215 = simd_and(r800_ffff_tmp27, r800_ffff_tmp214);
          r800_ffff_tmp216 = simd_or(r800_ffff_tmp213, r800_ffff_tmp215);
          cc_range_1b00_1b3c_3 = simd_or(r800_ffff_tmp216, byte_bc);
          carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e1_ac, carryQ.get_carry_in(82), sequence_e1_ac_adv));
          r800_ffff_tmp217 = simd_and(sequence_e1_ac_adv, cc_range_1b00_1b3c_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp217);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          r800_ffff_tmp218 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp182), simd_andc(r800_ffff_tmp7, basis_bits.bit_3));
          r800_ffff_tmp219 = simd_and(r800_ffff_tmp21, r800_ffff_tmp218);
          cc_range_1b42_1b6b_3 = simd_or(r800_ffff_tmp163, r800_ffff_tmp219);
          carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(83), sequence_e1_ad_adv));
          r800_ffff_tmp220 = simd_and(sequence_e1_ad_adv, cc_range_1b42_1b6b_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp220);
          sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
          sequence_e1_ae = simd_and(byte_e1_adv, byte_ae);
          r800_ffff_tmp221 = simd_andc(tmp109, tmp26);
          r800_ffff_tmp222 = simd_andc(tmp108, basis_bits.bit_4);
          r800_ffff_tmp223 = simd_and(r800_ffff_tmp222, tmp96);
          r800_ffff_tmp224 = simd_or(r800_ffff_tmp221, r800_ffff_tmp223);
          r800_ffff_tmp225 = simd_and(tmp108, r800_ffff_tmp118);
          r800_ffff_tmp226 = simd_or(r800_ffff_tmp224, r800_ffff_tmp225);
          cc_range_1b80_1bab_3 = simd_or(r800_ffff_tmp226, byte_ab);
          carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e1_ae, carryQ.get_carry_in(84), sequence_e1_ae_adv));
          r800_ffff_tmp227 = simd_and(sequence_e1_ae_adv, cc_range_1b80_1bab_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp227);
          sequence_e1_af = simd_and(byte_e1_adv, byte_af);
          sequence_e1_af = simd_and(byte_e1_adv, byte_af);
          r800_ffff_tmp228 = simd_or(tmp58, r800_ffff_tmp118);
          r800_ffff_tmp229 = simd_or(r800_ffff_tmp228, tmp66);
          r800_ffff_tmp230 = simd_and(tmp108, r800_ffff_tmp229);
          r800_ffff_tmp231 = simd_not(tmp26);
          r800_ffff_tmp232 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp231), simd_andc(tmp79, basis_bits.bit_3));
          r800_ffff_tmp233 = simd_and(r800_ffff_tmp21, r800_ffff_tmp232);
          cc_range_1be6_1bef_3 = simd_or(r800_ffff_tmp230, r800_ffff_tmp233);
          carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(85), sequence_e1_af_adv));
          r800_ffff_tmp234 = simd_and(sequence_e1_af_adv, cc_range_1be6_1bef_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp234);
          sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
          sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
          r800_ffff_tmp235 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp182), simd_andc(tmp53, basis_bits.bit_3));
          r800_ffff_tmp236 = simd_and(r800_ffff_tmp21, r800_ffff_tmp235);
          r800_ffff_tmp237 = simd_and(r800_ffff_tmp27, r800_ffff_tmp126);
          cc_range_1c2c_1c36_3 = simd_or(r800_ffff_tmp236, r800_ffff_tmp237);
          carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(86), sequence_e1_b0_adv));
          r800_ffff_tmp238 = simd_and(sequence_e1_b0_adv, cc_range_1c2c_1c36_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp238);
          sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
          sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
          r800_ffff_tmp239 = simd_andc(r800_ffff_tmp2, tmp4);
          r800_ffff_tmp240 = simd_andc(r800_ffff_tmp239, tmp21);
          r800_ffff_tmp241 = simd_and(basis_bits.bit_3, tmp4);
          r800_ffff_tmp242 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp156), simd_andc(r800_ffff_tmp241, basis_bits.bit_2));
          r800_ffff_tmp243 = simd_and(byte_range_80_bf, r800_ffff_tmp242);
          r800_ffff_tmp244 = simd_or(r800_ffff_tmp240, r800_ffff_tmp243);
          r800_ffff_tmp245 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp34), simd_andc(tmp84, basis_bits.bit_4));
          r800_ffff_tmp246 = simd_and(tmp108, r800_ffff_tmp245);
          r800_ffff_tmp247 = simd_or(r800_ffff_tmp244, r800_ffff_tmp246);
          r800_ffff_tmp248 = simd_or(r800_ffff_tmp247, byte_ad);
          cc_range_1cd0_1cf4_3 = simd_or(r800_ffff_tmp248, r800_ffff_tmp212);
          carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(87), sequence_e1_b3_adv));
          r800_ffff_tmp249 = simd_and(sequence_e1_b3_adv, cc_range_1cd0_1cf4_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp249);
          sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
          sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
          r800_ffff_tmp250 = simd_or(basis_bits.bit_4, tmp22);
          r800_ffff_tmp251 = simd_or(basis_bits.bit_3, r800_ffff_tmp250);
          r800_ffff_tmp252 = simd_and(basis_bits.bit_2, r800_ffff_tmp251);
          r800_ffff_tmp253 = simd_andc(byte_range_80_bf, r800_ffff_tmp252);
          cc_range_1dc0_1dfc_3 = simd_or(r800_ffff_tmp253, r800_ffff_tmp152);
          carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e1_b7, carryQ.get_carry_in(88), sequence_e1_b7_adv));
          r800_ffff_tmp254 = simd_and(sequence_e1_b7_adv, cc_range_1dc0_1dfc_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp254);
          byte_e2 = simd_and(byte_range_e0_ef, tmp25);
          byte_83 = simd_and(tmp109, tmp103);
          carryQ.cq[89] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(89), r800_ffff_tmp255));
          sequence_e2_83 = simd_and(r800_ffff_tmp255, byte_83);
          carryQ.cq[90] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(90), byte_e2_adv));
          sequence_e2_83 = simd_and(byte_e2_adv, byte_83);
          r800_ffff_tmp256 = simd_and(basis_bits.bit_4, tmp50);
          r800_ffff_tmp257 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp256);
          r800_ffff_tmp258 = simd_or(r800_ffff_tmp257, byte_a1);
          r800_ffff_tmp259 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp143), simd_andc(tmp51, basis_bits.bit_3));
          r800_ffff_tmp260 = simd_and(r800_ffff_tmp21, r800_ffff_tmp259);
          cc_range_20d0_20e5_3 = simd_or(r800_ffff_tmp258, r800_ffff_tmp260);
          carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(91), sequence_e2_83_adv));
          r800_ffff_tmp261 = simd_and(sequence_e2_83_adv, cc_range_20d0_20e5_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp261);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          byte_range_af_b1 = simd_and(r800_ffff_tmp21, r800_ffff_tmp232);
          carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(92), sequence_e2_b3_adv));
          r800_ffff_tmp262 = simd_and(sequence_e2_b3_adv, byte_range_af_b1);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp262);
          sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
          sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
          carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(93), sequence_e2_b5_adv));
          r800_ffff_tmp263 = simd_and(sequence_e2_b5_adv, byte_bf);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp263);
          sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
          sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
          byte_range_a0_bf = simd_and(byte_range_80_bf, basis_bits.bit_2);
          carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(94), sequence_e2_b7_adv));
          r800_ffff_tmp264 = simd_and(sequence_e2_b7_adv, byte_range_a0_bf);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp264);
          byte_e3 = simd_and(byte_range_e0_ef, tmp103);
          carryQ.cq[95] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(95), r800_ffff_tmp265));
          sequence_e3_80 = simd_and(r800_ffff_tmp265, byte_80);
          carryQ.cq[96] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(96), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          byte_range_aa_ad = simd_and(r800_ffff_tmp15, tmp96);
          carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(97), sequence_e3_80_adv));
          r800_ffff_tmp266 = simd_and(sequence_e3_80_adv, byte_range_aa_ad);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp266);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          byte_range_99_9a = simd_and(r800_ffff_tmp19, tmp36);
          carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(98), sequence_e3_82_adv));
          r800_ffff_tmp267 = simd_and(sequence_e3_82_adv, byte_range_99_9a);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp267);
          byte_ea = simd_and(byte_range_e0_ef, tmp64);
          byte_99 = simd_and(r800_ffff_tmp2, tmp99);
          carryQ.cq[99] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(99), r800_ffff_tmp268));
          sequence_ea_99 = simd_and(r800_ffff_tmp268, byte_99);
          carryQ.cq[100] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(100), byte_ea_adv));
          sequence_ea_99 = simd_and(byte_ea_adv, byte_99);
          r800_ffff_tmp269 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp177), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          r800_ffff_tmp270 = simd_and(r800_ffff_tmp27, r800_ffff_tmp269);
          cc_range_a66f_a674_3 = simd_or(byte_af, r800_ffff_tmp270);
          carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_ea_99, carryQ.get_carry_in(101), sequence_ea_99_adv));
          r800_ffff_tmp271 = simd_and(sequence_ea_99_adv, cc_range_a66f_a674_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp271);
          sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
          sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
          carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(102), sequence_ea_9a_adv));
          r800_ffff_tmp272 = simd_and(sequence_ea_9a_adv, byte_9f);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp272);
          byte_9b = simd_and(r800_ffff_tmp2, tmp65);
          sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
          sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
          byte_range_b0_b1 = simd_andc(r800_ffff_tmp27, tmp26);
          carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(103), sequence_ea_9b_adv));
          r800_ffff_tmp273 = simd_and(sequence_ea_9b_adv, byte_range_b0_b1);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp273);
          sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
          sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
          r800_ffff_tmp274 = simd_andc(tmp4, tmp39);
          r800_ffff_tmp275 = simd_andc(tmp24, r800_ffff_tmp274);
          r800_ffff_tmp276 = simd_or(r800_ffff_tmp275, tmp65);
          r800_ffff_tmp277 = simd_and(tmp109, r800_ffff_tmp276);
          r800_ffff_tmp278 = simd_and(r800_ffff_tmp12, tmp36);
          cc_range_a802_a825_3 = simd_or(r800_ffff_tmp277, r800_ffff_tmp278);
          carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(104), sequence_ea_a0_adv));
          r800_ffff_tmp279 = simd_and(sequence_ea_a0_adv, cc_range_a802_a825_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp279);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          r800_ffff_tmp280 = simd_and(tmp109, tmp40);
          r800_ffff_tmp281 = simd_and(basis_bits.bit_3, tmp26);
          r800_ffff_tmp282 = simd_andc(byte_range_a0_bf, r800_ffff_tmp281);
          cc_range_a8c4_a8e0_3 = simd_or(r800_ffff_tmp280, r800_ffff_tmp282);
          carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(105), sequence_ea_a3_adv));
          r800_ffff_tmp283 = simd_and(sequence_ea_a3_adv, cc_range_a8c4_a8e0_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp283);
          sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
          sequence_ea_a4 = simd_and(byte_ea_adv, byte_a4);
          r800_ffff_tmp284 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp177), simd_andc(tmp60, basis_bits.bit_4));
          byte_range_a6_ad = simd_and(tmp108, r800_ffff_tmp284);
          carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_ea_a4, carryQ.get_carry_in(106), sequence_ea_a4_adv));
          r800_ffff_tmp285 = simd_and(sequence_ea_a4_adv, byte_range_a6_ad);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp285);
          sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
          sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
          r800_ffff_tmp286 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp231), simd_andc(r800_ffff_tmp250, basis_bits.bit_3));
          byte_range_87_91 = simd_and(r800_ffff_tmp129, r800_ffff_tmp286);
          carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(107), sequence_ea_a5_adv));
          r800_ffff_tmp287 = simd_and(sequence_ea_a5_adv, byte_range_87_91);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp287);
          sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
          sequence_ea_a6 = simd_and(byte_ea_adv, byte_a6);
          r800_ffff_tmp288 = simd_or(r800_ffff_tmp26, byte_b3);
          r800_ffff_tmp289 = simd_and(r800_ffff_tmp27, r800_ffff_tmp3);
          r800_ffff_tmp290 = simd_or(r800_ffff_tmp288, r800_ffff_tmp289);
          cc_range_a980_a9bc_3 = simd_or(r800_ffff_tmp290, byte_bc);
          carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_ea_a6, carryQ.get_carry_in(108), sequence_ea_a6_adv));
          r800_ffff_tmp291 = simd_and(sequence_ea_a6_adv, cc_range_a980_a9bc_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp291);
          sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
          sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
          r800_ffff_tmp292 = simd_or(simd_and(basis_bits.bit_5, tmp29), simd_andc(tmp5, basis_bits.bit_5));
          r800_ffff_tmp293 = simd_and(r800_ffff_tmp15, r800_ffff_tmp292);
          r800_ffff_tmp294 = simd_andc(r800_ffff_tmp27, tmp4);
          r800_ffff_tmp295 = simd_and(r800_ffff_tmp294, tmp36);
          r800_ffff_tmp296 = simd_or(r800_ffff_tmp293, r800_ffff_tmp295);
          r800_ffff_tmp297 = simd_and(r800_ffff_tmp27, tmp39);
          r800_ffff_tmp298 = simd_and(r800_ffff_tmp297, tmp36);
          cc_range_aa29_aa35_3 = simd_or(r800_ffff_tmp296, r800_ffff_tmp298);
          carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(109), sequence_ea_a8_adv));
          r800_ffff_tmp299 = simd_and(sequence_ea_a8_adv, cc_range_aa29_aa35_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp299);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          r800_ffff_tmp300 = simd_or(tmp103, r800_ffff_tmp30);
          cc_range_aa43_aa4c_3 = simd_and(tmp109, r800_ffff_tmp300);
          carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(110), sequence_ea_a9_adv));
          r800_ffff_tmp301 = simd_and(sequence_ea_a9_adv, cc_range_aa43_aa4c_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp301);
          sequence_ea_aa = simd_and(byte_ea_adv, byte_aa);
          sequence_ea_aa = simd_and(byte_ea_adv, byte_aa);
          r800_ffff_tmp302 = simd_and(r800_ffff_tmp146, tmp101);
          r800_ffff_tmp303 = simd_or(byte_b0, r800_ffff_tmp302);
          r800_ffff_tmp304 = simd_and(r800_ffff_tmp27, r800_ffff_tmp55);
          r800_ffff_tmp305 = simd_or(r800_ffff_tmp303, r800_ffff_tmp304);
          cc_range_aab0_aabe_3 = simd_or(r800_ffff_tmp305, byte_range_be_bf);
          carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_ea_aa, carryQ.get_carry_in(111), sequence_ea_aa_adv));
          r800_ffff_tmp306 = simd_and(sequence_ea_aa_adv, cc_range_aab0_aabe_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp306);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          r800_ffff_tmp307 = simd_and(tmp108, r800_ffff_tmp95);
          r800_ffff_tmp308 = simd_or(r800_ffff_tmp44, r800_ffff_tmp307);
          r800_ffff_tmp309 = simd_and(r800_ffff_tmp27, tmp58);
          cc_range_aac1_aaf6_3 = simd_or(r800_ffff_tmp308, r800_ffff_tmp309);
          carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(112), sequence_ea_ab_adv));
          r800_ffff_tmp310 = simd_and(sequence_ea_ab_adv, cc_range_aac1_aaf6_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp310);
          sequence_ea_af = simd_and(byte_ea_adv, byte_af);
          sequence_ea_af = simd_and(byte_ea_adv, byte_af);
          r800_ffff_tmp311 = simd_or(tmp82, r800_ffff_tmp52);
          r800_ffff_tmp312 = simd_or(r800_ffff_tmp311, tmp66);
          cc_range_abe5_abed_3 = simd_and(tmp108, r800_ffff_tmp312);
          carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(113), sequence_ea_af_adv));
          r800_ffff_tmp313 = simd_and(sequence_ea_af_adv, cc_range_abe5_abed_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp313);
          byte_ef = simd_and(byte_range_e0_ef, tmp79);
          carryQ.cq[114] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(114), r800_ffff_tmp314));
          sequence_ef_ac = simd_and(r800_ffff_tmp314, byte_ac);
          carryQ.cq[115] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(115), byte_ef_adv));
          sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
          carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(116), sequence_ef_ac_adv));
          r800_ffff_tmp315 = simd_and(sequence_ef_ac_adv, byte_9e);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp315);
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          r800_ffff_tmp316 = simd_andc(r800_ffff_tmp222, tmp22);
          cc_range_fe00_fe20_3 = simd_or(tmp109, r800_ffff_tmp316);
          carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(117), sequence_ef_b8_adv));
          r800_ffff_tmp317 = simd_and(sequence_ef_b8_adv, cc_range_fe00_fe20_3);
          struct_Mn.cc = simd_or(struct_Mn.cc, r800_ffff_tmp317);
        }
        else {
          carryQ.CarryDequeueEnqueue(36, 82);
        }
        tmp111 = simd_and(byte_range_80_bf, tmp8);
        byte_90 = simd_andc(tmp111, tmp6);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(118), tmp112));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp112, byte_range_80_bf);
        carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(119), tmp113));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp113, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(120, 3))) {
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          sequence_f0_90_87 = simd_and(tmp112, byte_87);
          carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(120), sequence_f0_90_adv));
          sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
          r10000_10fff_tmp1 = simd_and(byte_range_80_bf, tmp2);
          byte_bd = simd_and(r10000_10fff_tmp1, tmp66);
          carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(121), sequence_f0_90_87_adv));
          r10000_10fff_tmp2 = simd_and(sequence_f0_90_87_adv, byte_bd);
          struct_Mn.cc = simd_or(struct_Mn.cc, r10000_10fff_tmp2);
          r10000_10fff_tmp3 = simd_andc(tmp33, tmp5);
          byte_a8 = simd_and(tmp108, r10000_10fff_tmp3);
          sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
          sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
          r10000_10fff_tmp4 = simd_andc(tmp109, tmp4);
          r10000_10fff_tmp5 = simd_and(r10000_10fff_tmp4, tmp5);
          r10000_10fff_tmp6 = simd_and(tmp109, tmp39);
          r10000_10fff_tmp7 = simd_and(r10000_10fff_tmp6, tmp36);
          r10000_10fff_tmp8 = simd_or(r10000_10fff_tmp5, r10000_10fff_tmp7);
          r10000_10fff_tmp9 = simd_and(tmp109, tmp53);
          r10000_10fff_tmp10 = simd_or(r10000_10fff_tmp8, r10000_10fff_tmp9);
          r10000_10fff_tmp11 = simd_and(r10000_10fff_tmp1, tmp33);
          r10000_10fff_tmp12 = simd_andc(r10000_10fff_tmp11, tmp21);
          r10000_10fff_tmp13 = simd_or(r10000_10fff_tmp10, r10000_10fff_tmp12);
          r10000_10fff_tmp14 = simd_and(r10000_10fff_tmp1, tmp79);
          cc_range_10a01_10a3f_4 = simd_or(r10000_10fff_tmp13, r10000_10fff_tmp14);
          carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(122), sequence_f0_90_a8_adv));
          r10000_10fff_tmp15 = simd_and(sequence_f0_90_a8_adv, cc_range_10a01_10a3f_4);
          struct_Mn.cc = simd_or(struct_Mn.cc, r10000_10fff_tmp15);
        }
        else {
          carryQ.CarryDequeueEnqueue(120, 3);
        }
  }
  CarryArray<123, 0> carryQ;
  };

  struct Sk {
  Sk() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Sk & struct_Sk) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, cc_range_5e_60_1, tmp14, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, byte_c2, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13, r80_7ff_tmp14;
		BitBlock r80_7ff_tmp15, r80_7ff_tmp16, r80_7ff_tmp17, r80_7ff_tmp18;
		BitBlock cc_range_a8_b8_2, byte_c2_adv, r80_7ff_tmp19, r80_7ff_tmp20, byte_cb;
		BitBlock r80_7ff_tmp21, r80_7ff_tmp22, r80_7ff_tmp23, r80_7ff_tmp24;
		BitBlock r80_7ff_tmp25, r80_7ff_tmp26, r80_7ff_tmp27, r80_7ff_tmp28;
		BitBlock r80_7ff_tmp29, r80_7ff_tmp30, r80_7ff_tmp31, r80_7ff_tmp32;
		BitBlock r80_7ff_tmp33, r80_7ff_tmp34, r80_7ff_tmp35, r80_7ff_tmp36;
		BitBlock r80_7ff_tmp37, r80_7ff_tmp38, r80_7ff_tmp39, r80_7ff_tmp40;
		BitBlock r80_7ff_tmp41, r80_7ff_tmp42, cc_range_2c2_2ef_2, byte_cb_adv;
		BitBlock r80_7ff_tmp43, byte_cd, r80_7ff_tmp44, byte_b5, byte_cd_adv;
		BitBlock r80_7ff_tmp45, byte_ce, r80_7ff_tmp46, byte_range_84_85, byte_ce_adv;
		BitBlock r80_7ff_tmp47, byte_range_e0_ef, r800_ffff_tmp1, r800_ffff_tmp2;
		BitBlock byte_e1, r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5, byte_be;
		BitBlock r800_ffff_tmp6, sequence_e1_be, byte_e1_adv, r800_ffff_tmp7;
		BitBlock cc_range_1fbd_1fbf_3, sequence_e1_be_adv, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, byte_bf, sequence_e1_bf;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13, r800_ffff_tmp14;
		BitBlock r800_ffff_tmp15, r800_ffff_tmp16, r800_ffff_tmp17, r800_ffff_tmp18;
		BitBlock r800_ffff_tmp19, r800_ffff_tmp20, r800_ffff_tmp21, r800_ffff_tmp22;
		BitBlock r800_ffff_tmp23, r800_ffff_tmp24, r800_ffff_tmp25, r800_ffff_tmp26;
		BitBlock r800_ffff_tmp27, r800_ffff_tmp28, r800_ffff_tmp29;
		BitBlock cc_range_1fc0_1ffd_3, sequence_e1_bf_adv, r800_ffff_tmp30;
		BitBlock r800_ffff_tmp31, byte_e3, r800_ffff_tmp32, byte_82, r800_ffff_tmp33;
		BitBlock sequence_e3_82, byte_e3_adv, r800_ffff_tmp34, r800_ffff_tmp35;
		BitBlock r800_ffff_tmp36, byte_range_9b_9c, sequence_e3_82_adv;
		BitBlock r800_ffff_tmp37, r800_ffff_tmp38, r800_ffff_tmp39, byte_ea;
		BitBlock r800_ffff_tmp40, byte_9c, r800_ffff_tmp41, sequence_ea_9c;
		BitBlock byte_ea_adv, r800_ffff_tmp42, r800_ffff_tmp43, r800_ffff_tmp44;
		BitBlock r800_ffff_tmp45, r800_ffff_tmp46, r800_ffff_tmp47;
		BitBlock cc_range_a700_a720_3, sequence_ea_9c_adv, r800_ffff_tmp48, byte_9e;
		BitBlock sequence_ea_9e, r800_ffff_tmp49, byte_range_89_8a, sequence_ea_9e_adv;
		BitBlock r800_ffff_tmp50, byte_ef, byte_ae, r800_ffff_tmp51, sequence_ef_ae;
		BitBlock byte_ef_adv, r800_ffff_tmp52, r800_ffff_tmp53, byte_range_b2_bf;
		BitBlock sequence_ef_ae_adv, r800_ffff_tmp54, byte_af, sequence_ef_af;
		BitBlock byte_range_80_81, sequence_ef_af_adv, r800_ffff_tmp55, byte_bc;
		BitBlock sequence_ef_bc, sequence_ef_bc_adv, r800_ffff_tmp56, r800_ffff_tmp57;
		BitBlock byte_bd, sequence_ef_bd, byte_80, sequence_ef_bd_adv, r800_ffff_tmp58;
		BitBlock sequence_ef_bf, byte_a3, sequence_ef_bf_adv, r800_ffff_tmp59;




        struct_Sk.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_and(tmp4, tmp5);
        tmp7 = simd_and(tmp3, tmp6);
        tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp9 = simd_and(tmp1, tmp8);
        tmp10 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp11 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp12 = simd_or(tmp10, tmp11);
        tmp13 = simd_andc(tmp9, tmp12);
        cc_range_5e_60_1 = simd_or(tmp7, tmp13);
        struct_Sk.cc = simd_or(struct_Sk.cc, cc_range_5e_60_1);
        tmp14 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_c0_df = simd_andc(tmp14, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 4))) {
          r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp2 = simd_andc(tmp14, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_andc(tmp5, tmp10);
          byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
          r80_7ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r80_7ff_tmp5 = simd_and(r80_7ff_tmp4, tmp8);
          r80_7ff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp7 = simd_andc(r80_7ff_tmp6, tmp11);
          r80_7ff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp9 = simd_and(tmp4, r80_7ff_tmp8);
          r80_7ff_tmp10 = simd_or(r80_7ff_tmp7, r80_7ff_tmp9);
          r80_7ff_tmp11 = simd_and(r80_7ff_tmp5, r80_7ff_tmp10);
          r80_7ff_tmp12 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp13 = simd_and(r80_7ff_tmp4, r80_7ff_tmp12);
          r80_7ff_tmp14 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r80_7ff_tmp15 = simd_andc(r80_7ff_tmp14, tmp11);
          r80_7ff_tmp16 = simd_and(r80_7ff_tmp13, r80_7ff_tmp15);
          r80_7ff_tmp17 = simd_or(r80_7ff_tmp11, r80_7ff_tmp16);
          r80_7ff_tmp18 = simd_and(r80_7ff_tmp13, r80_7ff_tmp7);
          cc_range_a8_b8_2 = simd_or(r80_7ff_tmp17, r80_7ff_tmp18);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
          r80_7ff_tmp19 = simd_and(byte_c2_adv, cc_range_a8_b8_2);
          struct_Sk.cc = simd_or(struct_Sk.cc, r80_7ff_tmp19);
          r80_7ff_tmp20 = simd_and(r80_7ff_tmp6, r80_7ff_tmp8);
          byte_cb = simd_and(r80_7ff_tmp2, r80_7ff_tmp20);
          r80_7ff_tmp21 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
          r80_7ff_tmp22 = simd_andc(r80_7ff_tmp21, basis_bits.bit_4);
          r80_7ff_tmp23 = simd_not(basis_bits.bit_6);
          r80_7ff_tmp24 = simd_or(simd_and(basis_bits.bit_5, r80_7ff_tmp23), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r80_7ff_tmp25 = simd_and(r80_7ff_tmp22, r80_7ff_tmp24);
          r80_7ff_tmp26 = simd_and(r80_7ff_tmp4, tmp2);
          r80_7ff_tmp27 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          r80_7ff_tmp28 = simd_or(basis_bits.bit_4, r80_7ff_tmp27);
          r80_7ff_tmp29 = simd_and(r80_7ff_tmp26, r80_7ff_tmp28);
          r80_7ff_tmp30 = simd_or(r80_7ff_tmp25, r80_7ff_tmp29);
          r80_7ff_tmp31 = simd_not(basis_bits.bit_5);
          r80_7ff_tmp32 = simd_and(basis_bits.bit_5, tmp11);
          r80_7ff_tmp33 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp31), simd_andc(r80_7ff_tmp32, basis_bits.bit_4));
          r80_7ff_tmp34 = simd_and(r80_7ff_tmp5, r80_7ff_tmp33);
          r80_7ff_tmp35 = simd_or(r80_7ff_tmp30, r80_7ff_tmp34);
          r80_7ff_tmp36 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r80_7ff_tmp37 = simd_and(tmp4, r80_7ff_tmp36);
          r80_7ff_tmp38 = simd_and(r80_7ff_tmp5, r80_7ff_tmp37);
          r80_7ff_tmp39 = simd_or(r80_7ff_tmp35, r80_7ff_tmp38);
          r80_7ff_tmp40 = simd_and(r80_7ff_tmp4, basis_bits.bit_2);
          r80_7ff_tmp41 = simd_or(basis_bits.bit_3, r80_7ff_tmp9);
          r80_7ff_tmp42 = simd_and(r80_7ff_tmp40, r80_7ff_tmp41);
          cc_range_2c2_2ef_2 = simd_or(r80_7ff_tmp39, r80_7ff_tmp42);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(1), byte_cb_adv));
          r80_7ff_tmp43 = simd_and(byte_cb_adv, cc_range_2c2_2ef_2);
          struct_Sk.cc = simd_or(struct_Sk.cc, r80_7ff_tmp43);
          byte_cd = simd_and(r80_7ff_tmp2, r80_7ff_tmp37);
          r80_7ff_tmp44 = simd_and(r80_7ff_tmp14, r80_7ff_tmp36);
          byte_b5 = simd_and(r80_7ff_tmp13, r80_7ff_tmp44);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(2), byte_cd_adv));
          r80_7ff_tmp45 = simd_and(byte_cd_adv, byte_b5);
          struct_Sk.cc = simd_or(struct_Sk.cc, r80_7ff_tmp45);
          byte_ce = simd_and(r80_7ff_tmp2, tmp6);
          r80_7ff_tmp46 = simd_andc(r80_7ff_tmp14, basis_bits.bit_6);
          byte_range_84_85 = simd_and(r80_7ff_tmp21, r80_7ff_tmp46);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(3), byte_ce_adv));
          r80_7ff_tmp47 = simd_and(byte_ce_adv, byte_range_84_85);
          struct_Sk.cc = simd_or(struct_Sk.cc, r80_7ff_tmp47);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        byte_range_e0_ef = simd_and(tmp14, tmp8);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(4, 18))) {
          r800_ffff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp10);
          byte_e1 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
          r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp5 = simd_and(r800_ffff_tmp3, r800_ffff_tmp4);
          byte_be = simd_and(r800_ffff_tmp5, tmp6);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(4), r800_ffff_tmp6));
          sequence_e1_be = simd_and(r800_ffff_tmp6, byte_be);
          carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(5), byte_e1_adv));
          sequence_e1_be = simd_and(byte_e1_adv, byte_be);
          r800_ffff_tmp7 = simd_and(tmp4, basis_bits.bit_7);
          cc_range_1fbd_1fbf_3 = simd_and(r800_ffff_tmp5, r800_ffff_tmp7);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(6), sequence_e1_be_adv));
          r800_ffff_tmp8 = simd_and(sequence_e1_be_adv, cc_range_1fbd_1fbf_3);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp8);
          r800_ffff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp10 = simd_and(tmp4, r800_ffff_tmp9);
          byte_bf = simd_and(r800_ffff_tmp5, r800_ffff_tmp10);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          r800_ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp12 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp11);
          r800_ffff_tmp13 = simd_or(tmp10, basis_bits.bit_6);
          r800_ffff_tmp14 = simd_andc(r800_ffff_tmp12, r800_ffff_tmp13);
          r800_ffff_tmp15 = simd_and(r800_ffff_tmp12, tmp4);
          r800_ffff_tmp16 = simd_and(r800_ffff_tmp15, tmp11);
          r800_ffff_tmp17 = simd_or(r800_ffff_tmp14, r800_ffff_tmp16);
          r800_ffff_tmp18 = simd_and(r800_ffff_tmp3, tmp2);
          r800_ffff_tmp19 = simd_and(r800_ffff_tmp18, tmp4);
          r800_ffff_tmp20 = simd_and(r800_ffff_tmp19, tmp11);
          r800_ffff_tmp21 = simd_or(r800_ffff_tmp17, r800_ffff_tmp20);
          r800_ffff_tmp22 = simd_and(r800_ffff_tmp3, tmp8);
          r800_ffff_tmp23 = simd_and(r800_ffff_tmp22, tmp4);
          r800_ffff_tmp24 = simd_and(r800_ffff_tmp23, tmp11);
          r800_ffff_tmp25 = simd_or(r800_ffff_tmp21, r800_ffff_tmp24);
          r800_ffff_tmp26 = simd_and(r800_ffff_tmp5, tmp4);
          r800_ffff_tmp27 = simd_not(basis_bits.bit_7);
          r800_ffff_tmp28 = simd_or(simd_and(basis_bits.bit_6, r800_ffff_tmp27), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          r800_ffff_tmp29 = simd_and(r800_ffff_tmp26, r800_ffff_tmp28);
          cc_range_1fc0_1ffd_3 = simd_or(r800_ffff_tmp25, r800_ffff_tmp29);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(7), sequence_e1_bf_adv));
          r800_ffff_tmp30 = simd_and(sequence_e1_bf_adv, cc_range_1fc0_1ffd_3);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp30);
          r800_ffff_tmp31 = simd_andc(r800_ffff_tmp9, tmp10);
          byte_e3 = simd_and(byte_range_e0_ef, r800_ffff_tmp31);
          r800_ffff_tmp32 = simd_andc(tmp5, tmp10);
          byte_82 = simd_and(r800_ffff_tmp12, r800_ffff_tmp32);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(8), r800_ffff_tmp33));
          sequence_e3_82 = simd_and(r800_ffff_tmp33, byte_82);
          carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(9), byte_e3_adv));
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          r800_ffff_tmp34 = simd_and(r800_ffff_tmp18, basis_bits.bit_4);
          r800_ffff_tmp35 = simd_not(tmp11);
          r800_ffff_tmp36 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp35), simd_andc(r800_ffff_tmp9, basis_bits.bit_5));
          byte_range_9b_9c = simd_and(r800_ffff_tmp34, r800_ffff_tmp36);
          carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(10), sequence_e3_82_adv));
          r800_ffff_tmp37 = simd_and(sequence_e3_82_adv, byte_range_9b_9c);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp37);
          r800_ffff_tmp38 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp39 = simd_and(r800_ffff_tmp38, tmp5);
          byte_ea = simd_and(byte_range_e0_ef, r800_ffff_tmp39);
          r800_ffff_tmp40 = simd_andc(tmp4, tmp11);
          byte_9c = simd_and(r800_ffff_tmp18, r800_ffff_tmp40);
          carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(11), r800_ffff_tmp41));
          sequence_ea_9c = simd_and(r800_ffff_tmp41, byte_9c);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(12), byte_ea_adv));
          sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
          r800_ffff_tmp42 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
          r800_ffff_tmp43 = simd_and(basis_bits.bit_5, r800_ffff_tmp9);
          r800_ffff_tmp44 = simd_or(basis_bits.bit_4, r800_ffff_tmp43);
          r800_ffff_tmp45 = simd_and(basis_bits.bit_3, r800_ffff_tmp44);
          r800_ffff_tmp46 = simd_andc(r800_ffff_tmp42, r800_ffff_tmp45);
          r800_ffff_tmp47 = simd_andc(r800_ffff_tmp22, r800_ffff_tmp13);
          cc_range_a700_a720_3 = simd_or(r800_ffff_tmp46, r800_ffff_tmp47);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(13), sequence_ea_9c_adv));
          r800_ffff_tmp48 = simd_and(sequence_ea_9c_adv, cc_range_a700_a720_3);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp48);
          byte_9e = simd_and(r800_ffff_tmp18, tmp6);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          r800_ffff_tmp49 = simd_and(r800_ffff_tmp12, r800_ffff_tmp38);
          byte_range_89_8a = simd_and(r800_ffff_tmp49, r800_ffff_tmp28);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(14), sequence_ea_9e_adv));
          r800_ffff_tmp50 = simd_and(sequence_ea_9e_adv, byte_range_89_8a);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp50);
          byte_ef = simd_and(byte_range_e0_ef, r800_ffff_tmp10);
          byte_ae = simd_and(r800_ffff_tmp22, tmp6);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(15), r800_ffff_tmp51));
          sequence_ef_ae = simd_and(r800_ffff_tmp51, byte_ae);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(16), byte_ef_adv));
          sequence_ef_ae = simd_and(byte_ef_adv, byte_ae);
          r800_ffff_tmp52 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp53 = simd_or(basis_bits.bit_4, r800_ffff_tmp52);
          byte_range_b2_bf = simd_and(r800_ffff_tmp5, r800_ffff_tmp53);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_ef_ae, carryQ.get_carry_in(17), sequence_ef_ae_adv));
          r800_ffff_tmp54 = simd_and(sequence_ef_ae_adv, byte_range_b2_bf);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp54);
          byte_af = simd_and(r800_ffff_tmp22, r800_ffff_tmp10);
          sequence_ef_af = simd_and(byte_ef_adv, byte_af);
          sequence_ef_af = simd_and(byte_ef_adv, byte_af);
          byte_range_80_81 = simd_andc(r800_ffff_tmp12, r800_ffff_tmp13);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(18), sequence_ef_af_adv));
          r800_ffff_tmp55 = simd_and(sequence_ef_af_adv, byte_range_80_81);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp55);
          byte_bc = simd_and(r800_ffff_tmp5, r800_ffff_tmp40);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(19), sequence_ef_bc_adv));
          r800_ffff_tmp56 = simd_and(sequence_ef_bc_adv, byte_be);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp56);
          r800_ffff_tmp57 = simd_and(tmp4, r800_ffff_tmp1);
          byte_bd = simd_and(r800_ffff_tmp5, r800_ffff_tmp57);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          byte_80 = simd_andc(r800_ffff_tmp12, tmp12);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(20), sequence_ef_bd_adv));
          r800_ffff_tmp58 = simd_and(sequence_ef_bd_adv, byte_80);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp58);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          byte_a3 = simd_and(r800_ffff_tmp22, r800_ffff_tmp31);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(21), sequence_ef_bf_adv));
          r800_ffff_tmp59 = simd_and(sequence_ef_bf_adv, byte_a3);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp59);
        }
        else {
          carryQ.CarryDequeueEnqueue(4, 18);
        }
        carryQ.CarryQ_Adjust(22);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Sk & struct_Sk, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, cc_range_5e_60_1, tmp14, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, r80_7ff_tmp3, byte_c2, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13, r80_7ff_tmp14;
		BitBlock r80_7ff_tmp15, r80_7ff_tmp16, r80_7ff_tmp17, r80_7ff_tmp18;
		BitBlock cc_range_a8_b8_2, byte_c2_adv, r80_7ff_tmp19, r80_7ff_tmp20, byte_cb;
		BitBlock r80_7ff_tmp21, r80_7ff_tmp22, r80_7ff_tmp23, r80_7ff_tmp24;
		BitBlock r80_7ff_tmp25, r80_7ff_tmp26, r80_7ff_tmp27, r80_7ff_tmp28;
		BitBlock r80_7ff_tmp29, r80_7ff_tmp30, r80_7ff_tmp31, r80_7ff_tmp32;
		BitBlock r80_7ff_tmp33, r80_7ff_tmp34, r80_7ff_tmp35, r80_7ff_tmp36;
		BitBlock r80_7ff_tmp37, r80_7ff_tmp38, r80_7ff_tmp39, r80_7ff_tmp40;
		BitBlock r80_7ff_tmp41, r80_7ff_tmp42, cc_range_2c2_2ef_2, byte_cb_adv;
		BitBlock r80_7ff_tmp43, byte_cd, r80_7ff_tmp44, byte_b5, byte_cd_adv;
		BitBlock r80_7ff_tmp45, byte_ce, r80_7ff_tmp46, byte_range_84_85, byte_ce_adv;
		BitBlock r80_7ff_tmp47, byte_range_e0_ef, r800_ffff_tmp1, r800_ffff_tmp2;
		BitBlock byte_e1, r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5, byte_be;
		BitBlock r800_ffff_tmp6, sequence_e1_be, byte_e1_adv, r800_ffff_tmp7;
		BitBlock cc_range_1fbd_1fbf_3, sequence_e1_be_adv, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, r800_ffff_tmp10, byte_bf, sequence_e1_bf;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13, r800_ffff_tmp14;
		BitBlock r800_ffff_tmp15, r800_ffff_tmp16, r800_ffff_tmp17, r800_ffff_tmp18;
		BitBlock r800_ffff_tmp19, r800_ffff_tmp20, r800_ffff_tmp21, r800_ffff_tmp22;
		BitBlock r800_ffff_tmp23, r800_ffff_tmp24, r800_ffff_tmp25, r800_ffff_tmp26;
		BitBlock r800_ffff_tmp27, r800_ffff_tmp28, r800_ffff_tmp29;
		BitBlock cc_range_1fc0_1ffd_3, sequence_e1_bf_adv, r800_ffff_tmp30;
		BitBlock r800_ffff_tmp31, byte_e3, r800_ffff_tmp32, byte_82, r800_ffff_tmp33;
		BitBlock sequence_e3_82, byte_e3_adv, r800_ffff_tmp34, r800_ffff_tmp35;
		BitBlock r800_ffff_tmp36, byte_range_9b_9c, sequence_e3_82_adv;
		BitBlock r800_ffff_tmp37, r800_ffff_tmp38, r800_ffff_tmp39, byte_ea;
		BitBlock r800_ffff_tmp40, byte_9c, r800_ffff_tmp41, sequence_ea_9c;
		BitBlock byte_ea_adv, r800_ffff_tmp42, r800_ffff_tmp43, r800_ffff_tmp44;
		BitBlock r800_ffff_tmp45, r800_ffff_tmp46, r800_ffff_tmp47;
		BitBlock cc_range_a700_a720_3, sequence_ea_9c_adv, r800_ffff_tmp48, byte_9e;
		BitBlock sequence_ea_9e, r800_ffff_tmp49, byte_range_89_8a, sequence_ea_9e_adv;
		BitBlock r800_ffff_tmp50, byte_ef, byte_ae, r800_ffff_tmp51, sequence_ef_ae;
		BitBlock byte_ef_adv, r800_ffff_tmp52, r800_ffff_tmp53, byte_range_b2_bf;
		BitBlock sequence_ef_ae_adv, r800_ffff_tmp54, byte_af, sequence_ef_af;
		BitBlock byte_range_80_81, sequence_ef_af_adv, r800_ffff_tmp55, byte_bc;
		BitBlock sequence_ef_bc, sequence_ef_bc_adv, r800_ffff_tmp56, r800_ffff_tmp57;
		BitBlock byte_bd, sequence_ef_bd, byte_80, sequence_ef_bd_adv, r800_ffff_tmp58;
		BitBlock sequence_ef_bf, byte_a3, sequence_ef_bf_adv, r800_ffff_tmp59;




        struct_Sk.cc = simd<1>::constant<0>();
        tmp1 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp2 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_and(tmp4, tmp5);
        tmp7 = simd_and(tmp3, tmp6);
        tmp8 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp9 = simd_and(tmp1, tmp8);
        tmp10 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp11 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp12 = simd_or(tmp10, tmp11);
        tmp13 = simd_andc(tmp9, tmp12);
        cc_range_5e_60_1 = simd_or(tmp7, tmp13);
        struct_Sk.cc = simd_or(struct_Sk.cc, cc_range_5e_60_1);
        tmp14 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_c0_df = simd_andc(tmp14, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 4))) {
          r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp2 = simd_andc(tmp14, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_andc(tmp5, tmp10);
          byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp3);
          r80_7ff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r80_7ff_tmp5 = simd_and(r80_7ff_tmp4, tmp8);
          r80_7ff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp7 = simd_andc(r80_7ff_tmp6, tmp11);
          r80_7ff_tmp8 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp9 = simd_and(tmp4, r80_7ff_tmp8);
          r80_7ff_tmp10 = simd_or(r80_7ff_tmp7, r80_7ff_tmp9);
          r80_7ff_tmp11 = simd_and(r80_7ff_tmp5, r80_7ff_tmp10);
          r80_7ff_tmp12 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp13 = simd_and(r80_7ff_tmp4, r80_7ff_tmp12);
          r80_7ff_tmp14 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
          r80_7ff_tmp15 = simd_andc(r80_7ff_tmp14, tmp11);
          r80_7ff_tmp16 = simd_and(r80_7ff_tmp13, r80_7ff_tmp15);
          r80_7ff_tmp17 = simd_or(r80_7ff_tmp11, r80_7ff_tmp16);
          r80_7ff_tmp18 = simd_and(r80_7ff_tmp13, r80_7ff_tmp7);
          cc_range_a8_b8_2 = simd_or(r80_7ff_tmp17, r80_7ff_tmp18);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
          r80_7ff_tmp19 = simd_and(byte_c2_adv, cc_range_a8_b8_2);
          struct_Sk.cc = simd_or(struct_Sk.cc, r80_7ff_tmp19);
          r80_7ff_tmp20 = simd_and(r80_7ff_tmp6, r80_7ff_tmp8);
          byte_cb = simd_and(r80_7ff_tmp2, r80_7ff_tmp20);
          r80_7ff_tmp21 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp1);
          r80_7ff_tmp22 = simd_andc(r80_7ff_tmp21, basis_bits.bit_4);
          r80_7ff_tmp23 = simd_not(basis_bits.bit_6);
          r80_7ff_tmp24 = simd_or(simd_and(basis_bits.bit_5, r80_7ff_tmp23), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r80_7ff_tmp25 = simd_and(r80_7ff_tmp22, r80_7ff_tmp24);
          r80_7ff_tmp26 = simd_and(r80_7ff_tmp4, tmp2);
          r80_7ff_tmp27 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          r80_7ff_tmp28 = simd_or(basis_bits.bit_4, r80_7ff_tmp27);
          r80_7ff_tmp29 = simd_and(r80_7ff_tmp26, r80_7ff_tmp28);
          r80_7ff_tmp30 = simd_or(r80_7ff_tmp25, r80_7ff_tmp29);
          r80_7ff_tmp31 = simd_not(basis_bits.bit_5);
          r80_7ff_tmp32 = simd_and(basis_bits.bit_5, tmp11);
          r80_7ff_tmp33 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp31), simd_andc(r80_7ff_tmp32, basis_bits.bit_4));
          r80_7ff_tmp34 = simd_and(r80_7ff_tmp5, r80_7ff_tmp33);
          r80_7ff_tmp35 = simd_or(r80_7ff_tmp30, r80_7ff_tmp34);
          r80_7ff_tmp36 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r80_7ff_tmp37 = simd_and(tmp4, r80_7ff_tmp36);
          r80_7ff_tmp38 = simd_and(r80_7ff_tmp5, r80_7ff_tmp37);
          r80_7ff_tmp39 = simd_or(r80_7ff_tmp35, r80_7ff_tmp38);
          r80_7ff_tmp40 = simd_and(r80_7ff_tmp4, basis_bits.bit_2);
          r80_7ff_tmp41 = simd_or(basis_bits.bit_3, r80_7ff_tmp9);
          r80_7ff_tmp42 = simd_and(r80_7ff_tmp40, r80_7ff_tmp41);
          cc_range_2c2_2ef_2 = simd_or(r80_7ff_tmp39, r80_7ff_tmp42);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_cb, carryQ.get_carry_in(1), byte_cb_adv));
          r80_7ff_tmp43 = simd_and(byte_cb_adv, cc_range_2c2_2ef_2);
          struct_Sk.cc = simd_or(struct_Sk.cc, r80_7ff_tmp43);
          byte_cd = simd_and(r80_7ff_tmp2, r80_7ff_tmp37);
          r80_7ff_tmp44 = simd_and(r80_7ff_tmp14, r80_7ff_tmp36);
          byte_b5 = simd_and(r80_7ff_tmp13, r80_7ff_tmp44);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(2), byte_cd_adv));
          r80_7ff_tmp45 = simd_and(byte_cd_adv, byte_b5);
          struct_Sk.cc = simd_or(struct_Sk.cc, r80_7ff_tmp45);
          byte_ce = simd_and(r80_7ff_tmp2, tmp6);
          r80_7ff_tmp46 = simd_andc(r80_7ff_tmp14, basis_bits.bit_6);
          byte_range_84_85 = simd_and(r80_7ff_tmp21, r80_7ff_tmp46);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(3), byte_ce_adv));
          r80_7ff_tmp47 = simd_and(byte_ce_adv, byte_range_84_85);
          struct_Sk.cc = simd_or(struct_Sk.cc, r80_7ff_tmp47);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 4);
        }
        byte_range_e0_ef = simd_and(tmp14, tmp8);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(4, 18))) {
          r800_ffff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp10);
          byte_e1 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
          r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp5 = simd_and(r800_ffff_tmp3, r800_ffff_tmp4);
          byte_be = simd_and(r800_ffff_tmp5, tmp6);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(4), r800_ffff_tmp6));
          sequence_e1_be = simd_and(r800_ffff_tmp6, byte_be);
          carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(5), byte_e1_adv));
          sequence_e1_be = simd_and(byte_e1_adv, byte_be);
          r800_ffff_tmp7 = simd_and(tmp4, basis_bits.bit_7);
          cc_range_1fbd_1fbf_3 = simd_and(r800_ffff_tmp5, r800_ffff_tmp7);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(6), sequence_e1_be_adv));
          r800_ffff_tmp8 = simd_and(sequence_e1_be_adv, cc_range_1fbd_1fbf_3);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp8);
          r800_ffff_tmp9 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp10 = simd_and(tmp4, r800_ffff_tmp9);
          byte_bf = simd_and(r800_ffff_tmp5, r800_ffff_tmp10);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          r800_ffff_tmp11 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp12 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp11);
          r800_ffff_tmp13 = simd_or(tmp10, basis_bits.bit_6);
          r800_ffff_tmp14 = simd_andc(r800_ffff_tmp12, r800_ffff_tmp13);
          r800_ffff_tmp15 = simd_and(r800_ffff_tmp12, tmp4);
          r800_ffff_tmp16 = simd_and(r800_ffff_tmp15, tmp11);
          r800_ffff_tmp17 = simd_or(r800_ffff_tmp14, r800_ffff_tmp16);
          r800_ffff_tmp18 = simd_and(r800_ffff_tmp3, tmp2);
          r800_ffff_tmp19 = simd_and(r800_ffff_tmp18, tmp4);
          r800_ffff_tmp20 = simd_and(r800_ffff_tmp19, tmp11);
          r800_ffff_tmp21 = simd_or(r800_ffff_tmp17, r800_ffff_tmp20);
          r800_ffff_tmp22 = simd_and(r800_ffff_tmp3, tmp8);
          r800_ffff_tmp23 = simd_and(r800_ffff_tmp22, tmp4);
          r800_ffff_tmp24 = simd_and(r800_ffff_tmp23, tmp11);
          r800_ffff_tmp25 = simd_or(r800_ffff_tmp21, r800_ffff_tmp24);
          r800_ffff_tmp26 = simd_and(r800_ffff_tmp5, tmp4);
          r800_ffff_tmp27 = simd_not(basis_bits.bit_7);
          r800_ffff_tmp28 = simd_or(simd_and(basis_bits.bit_6, r800_ffff_tmp27), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          r800_ffff_tmp29 = simd_and(r800_ffff_tmp26, r800_ffff_tmp28);
          cc_range_1fc0_1ffd_3 = simd_or(r800_ffff_tmp25, r800_ffff_tmp29);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(7), sequence_e1_bf_adv));
          r800_ffff_tmp30 = simd_and(sequence_e1_bf_adv, cc_range_1fc0_1ffd_3);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp30);
          r800_ffff_tmp31 = simd_andc(r800_ffff_tmp9, tmp10);
          byte_e3 = simd_and(byte_range_e0_ef, r800_ffff_tmp31);
          r800_ffff_tmp32 = simd_andc(tmp5, tmp10);
          byte_82 = simd_and(r800_ffff_tmp12, r800_ffff_tmp32);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(8), r800_ffff_tmp33));
          sequence_e3_82 = simd_and(r800_ffff_tmp33, byte_82);
          carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(9), byte_e3_adv));
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          r800_ffff_tmp34 = simd_and(r800_ffff_tmp18, basis_bits.bit_4);
          r800_ffff_tmp35 = simd_not(tmp11);
          r800_ffff_tmp36 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp35), simd_andc(r800_ffff_tmp9, basis_bits.bit_5));
          byte_range_9b_9c = simd_and(r800_ffff_tmp34, r800_ffff_tmp36);
          carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(10), sequence_e3_82_adv));
          r800_ffff_tmp37 = simd_and(sequence_e3_82_adv, byte_range_9b_9c);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp37);
          r800_ffff_tmp38 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp39 = simd_and(r800_ffff_tmp38, tmp5);
          byte_ea = simd_and(byte_range_e0_ef, r800_ffff_tmp39);
          r800_ffff_tmp40 = simd_andc(tmp4, tmp11);
          byte_9c = simd_and(r800_ffff_tmp18, r800_ffff_tmp40);
          carryQ.cq[11] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(11), r800_ffff_tmp41));
          sequence_ea_9c = simd_and(r800_ffff_tmp41, byte_9c);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(12), byte_ea_adv));
          sequence_ea_9c = simd_and(byte_ea_adv, byte_9c);
          r800_ffff_tmp42 = simd_andc(r800_ffff_tmp3, basis_bits.bit_2);
          r800_ffff_tmp43 = simd_and(basis_bits.bit_5, r800_ffff_tmp9);
          r800_ffff_tmp44 = simd_or(basis_bits.bit_4, r800_ffff_tmp43);
          r800_ffff_tmp45 = simd_and(basis_bits.bit_3, r800_ffff_tmp44);
          r800_ffff_tmp46 = simd_andc(r800_ffff_tmp42, r800_ffff_tmp45);
          r800_ffff_tmp47 = simd_andc(r800_ffff_tmp22, r800_ffff_tmp13);
          cc_range_a700_a720_3 = simd_or(r800_ffff_tmp46, r800_ffff_tmp47);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_ea_9c, carryQ.get_carry_in(13), sequence_ea_9c_adv));
          r800_ffff_tmp48 = simd_and(sequence_ea_9c_adv, cc_range_a700_a720_3);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp48);
          byte_9e = simd_and(r800_ffff_tmp18, tmp6);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          r800_ffff_tmp49 = simd_and(r800_ffff_tmp12, r800_ffff_tmp38);
          byte_range_89_8a = simd_and(r800_ffff_tmp49, r800_ffff_tmp28);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(14), sequence_ea_9e_adv));
          r800_ffff_tmp50 = simd_and(sequence_ea_9e_adv, byte_range_89_8a);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp50);
          byte_ef = simd_and(byte_range_e0_ef, r800_ffff_tmp10);
          byte_ae = simd_and(r800_ffff_tmp22, tmp6);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(15), r800_ffff_tmp51));
          sequence_ef_ae = simd_and(r800_ffff_tmp51, byte_ae);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(16), byte_ef_adv));
          sequence_ef_ae = simd_and(byte_ef_adv, byte_ae);
          r800_ffff_tmp52 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp53 = simd_or(basis_bits.bit_4, r800_ffff_tmp52);
          byte_range_b2_bf = simd_and(r800_ffff_tmp5, r800_ffff_tmp53);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_ef_ae, carryQ.get_carry_in(17), sequence_ef_ae_adv));
          r800_ffff_tmp54 = simd_and(sequence_ef_ae_adv, byte_range_b2_bf);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp54);
          byte_af = simd_and(r800_ffff_tmp22, r800_ffff_tmp10);
          sequence_ef_af = simd_and(byte_ef_adv, byte_af);
          sequence_ef_af = simd_and(byte_ef_adv, byte_af);
          byte_range_80_81 = simd_andc(r800_ffff_tmp12, r800_ffff_tmp13);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(18), sequence_ef_af_adv));
          r800_ffff_tmp55 = simd_and(sequence_ef_af_adv, byte_range_80_81);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp55);
          byte_bc = simd_and(r800_ffff_tmp5, r800_ffff_tmp40);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(19), sequence_ef_bc_adv));
          r800_ffff_tmp56 = simd_and(sequence_ef_bc_adv, byte_be);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp56);
          r800_ffff_tmp57 = simd_and(tmp4, r800_ffff_tmp1);
          byte_bd = simd_and(r800_ffff_tmp5, r800_ffff_tmp57);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          byte_80 = simd_andc(r800_ffff_tmp12, tmp12);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(20), sequence_ef_bd_adv));
          r800_ffff_tmp58 = simd_and(sequence_ef_bd_adv, byte_80);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp58);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          byte_a3 = simd_and(r800_ffff_tmp22, r800_ffff_tmp31);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(21), sequence_ef_bf_adv));
          r800_ffff_tmp59 = simd_and(sequence_ef_bf_adv, byte_a3);
          struct_Sk.cc = simd_or(struct_Sk.cc, r800_ffff_tmp59);
        }
        else {
          carryQ.CarryDequeueEnqueue(4, 18);
        }
  }
  CarryArray<22, 0> carryQ;
  };

  struct So {
  So() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_So & struct_So) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f0, tmp7, tmp8, tmp9, tmp10;
		BitBlock tmp11, tmp12, byte_9d, tmp13, sequence_f0_9d, byte_f0_adv, tmp14;
		BitBlock tmp15, tmp16, tmp17, byte_range_80_82, tmp18;
		BitBlock sequence_f0_9d_byte_range_80_82, byte_range_80_bf, tmp19;
		BitBlock sequence_f0_9d_byte_range_80_82_sfx, tmp20, tmp21, tmp22, byte_83;
		BitBlock sequence_f0_9d_adv, sequence_f0_9d_83, tmp23, tmp24, tmp25, tmp26;
		BitBlock byte_range_80_b5, tmp27, sequence_f0_9d_83_byte_range_80_b5, tmp28;
		BitBlock tmp29, byte_84, sequence_f0_9d_84, tmp30, tmp31, tmp32, tmp33;
		BitBlock byte_range_80_a6, tmp34, sequence_f0_9d_84_byte_range_80_a6, tmp35;
		BitBlock byte_85, sequence_f0_9d_85, tmp36, tmp37, tmp38, tmp39;
		BitBlock byte_range_80_a4, tmp40, sequence_f0_9d_85_byte_range_80_a4, tmp41;
		BitBlock tmp42, byte_86, sequence_f0_9d_86, tmp43, tmp44, tmp45;
		BitBlock byte_range_83_84, tmp46, sequence_f0_9d_86_byte_range_83_84, tmp47;
		BitBlock byte_87, sequence_f0_9d_87, tmp48, tmp49, tmp50, byte_range_80_9d;
		BitBlock tmp51, sequence_f0_9d_87_byte_range_80_9d, tmp52, tmp53, byte_88;
		BitBlock sequence_f0_9d_88, tmp54, sequence_f0_9d_88_byte_range_80_bf, tmp55;
		BitBlock byte_89, sequence_f0_9d_89, tmp56, byte_range_80_81, tmp57;
		BitBlock sequence_f0_9d_89_byte_range_80_81, tmp58, byte_8c, sequence_f0_9d_8c;
		BitBlock tmp59, sequence_f0_9d_8c_byte_range_80_bf, byte_8d, sequence_f0_9d_8d;
		BitBlock tmp60, byte_range_80_96, tmp61, sequence_f0_9d_8d_byte_range_80_96;
		BitBlock tmp62, byte_9f, sequence_f0_9f, byte_80, tmp63, sequence_f0_9f_80;
		BitBlock sequence_f0_9f_adv, tmp64, tmp65, tmp66, cc_range_1f000_1f030_4;
		BitBlock sequence_f0_9f_80_adv, tmp67, tmp68, byte_81, sequence_f0_9f_81;
		BitBlock sequence_f0_9f_81_adv, tmp69, tmp70, byte_82, sequence_f0_9f_82;
		BitBlock tmp71, tmp72, tmp73, tmp74, tmp75, tmp76, tmp77, tmp78, tmp79, tmp80;
		BitBlock tmp81, tmp82, cc_range_1f080_1f0b1_4, sequence_f0_9f_82_adv, tmp83;
		BitBlock sequence_f0_9f_83, tmp84, tmp85, tmp86, cc_range_1f0c1_1f0d1_4;
		BitBlock sequence_f0_9f_83_adv, tmp87, sequence_f0_9f_84, tmp88, tmp89, tmp90;
		BitBlock tmp91, cc_range_1f110_1f130_4, sequence_f0_9f_84_adv, tmp92;
		BitBlock sequence_f0_9f_85, cc_range_1f140_1f170_4, sequence_f0_9f_85_adv;
		BitBlock tmp93, sequence_f0_9f_86, tmp94, tmp95, tmp96, byte_range_80_9a;
		BitBlock sequence_f0_9f_86_adv, tmp97, sequence_f0_9f_87, tmp98, tmp99;
		BitBlock byte_range_a6_bf, sequence_f0_9f_87_adv, tmp100, sequence_f0_9f_88;
		BitBlock tmp101, tmp102, tmp103, tmp104, tmp105, cc_range_1f200_1f210_4;
		BitBlock sequence_f0_9f_88_adv, tmp106, sequence_f0_9f_89, tmp107, tmp108;
		BitBlock tmp109, cc_range_1f240_1f250_4, sequence_f0_9f_89_adv, tmp110;
		BitBlock sequence_f0_9f_8c, tmp111, tmp112, tmp113, tmp114, tmp115, tmp116;
		BitBlock tmp117, cc_range_1f300_1f337_4, sequence_f0_9f_8c_adv, tmp118;
		BitBlock sequence_f0_9f_8d, tmp119, tmp120, tmp121, byte_range_80_bc;
		BitBlock sequence_f0_9f_8d_adv, tmp122, tmp123, byte_8e, sequence_f0_9f_8e;
		BitBlock cc_range_1f380_1f3a0_4, sequence_f0_9f_8e_adv, tmp124, byte_8f;
		BitBlock sequence_f0_9f_8f, tmp125, tmp126, tmp127, tmp128, tmp129, tmp130;
		BitBlock tmp131, cc_range_1f3c0_1f3e0_4, sequence_f0_9f_8f_adv, tmp132;
		BitBlock byte_90, sequence_f0_9f_90, tmp133, tmp134, byte_range_80_be;
		BitBlock sequence_f0_9f_90_adv, tmp135, byte_91, sequence_f0_9f_91, tmp136;
		BitBlock tmp137, tmp138, cc_range_1f440_1f442_4, sequence_f0_9f_91_adv, tmp139;
		BitBlock byte_92, sequence_f0_9f_92, sequence_f0_9f_92_adv, tmp140, byte_93;
		BitBlock sequence_f0_9f_93, tmp141, tmp142, tmp143, tmp144, tmp145, tmp146;
		BitBlock cc_range_1f4c0_1f4f9_4, sequence_f0_9f_93_adv, tmp147, byte_94;
		BitBlock sequence_f0_9f_94, tmp148, byte_range_80_bd, sequence_f0_9f_94_adv;
		BitBlock tmp149, byte_95, sequence_f0_9f_95, tmp150, tmp151, tmp152, tmp153;
		BitBlock cc_range_1f540_1f550_4, sequence_f0_9f_95_adv, tmp154, byte_97;
		BitBlock sequence_f0_9f_97, byte_range_bb_bf, sequence_f0_9f_97_adv, tmp155;
		BitBlock byte_98, sequence_f0_9f_98, sequence_f0_9f_98_adv, tmp156, byte_99;
		BitBlock sequence_f0_9f_99, tmp157, cc_range_1f640_1f645_4;
		BitBlock sequence_f0_9f_99_adv, tmp158, tmp159, byte_9a, sequence_f0_9f_9a;
		BitBlock sequence_f0_9f_9a_adv, tmp160, tmp161, byte_9b, sequence_f0_9f_9b;
		BitBlock byte_range_80_85, sequence_f0_9f_9b_adv, tmp162, byte_9c;
		BitBlock sequence_f0_9f_9c, sequence_f0_9f_9c_adv, tmp163, sequence_f0_9f_9d;
		BitBlock tmp164, byte_range_80_b3, sequence_f0_9f_9d_adv, tmp165;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, byte_c2, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, cc_range_a6_b0_2, byte_c2_adv;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, byte_d2, byte_d2_adv, r80_7ff_tmp8;
		BitBlock byte_d8, byte_range_8e_8f, byte_d8_adv, r80_7ff_tmp9, byte_db;
		BitBlock r80_7ff_tmp10, r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13;
		BitBlock r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16, cc_range_6de_6fd_2;
		BitBlock byte_db_adv, r80_7ff_tmp17, byte_df, byte_b6, byte_df_adv;
		BitBlock r80_7ff_tmp18, byte_range_e0_ef, byte_e0, byte_a7, r800_ffff_tmp1;
		BitBlock sequence_e0_a7, byte_e0_adv, byte_ba, sequence_e0_a7_adv;
		BitBlock r800_ffff_tmp2, byte_ad, sequence_e0_ad, byte_b0, sequence_e0_ad_adv;
		BitBlock r800_ffff_tmp3, byte_af, sequence_e0_af, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, cc_range_bf3_bfa_3;
		BitBlock sequence_e0_af_adv, r800_ffff_tmp7, byte_b1, sequence_e0_b1, byte_bf;
		BitBlock sequence_e0_b1_adv, r800_ffff_tmp8, byte_b5, sequence_e0_b5, byte_b9;
		BitBlock sequence_e0_b5_adv, r800_ffff_tmp9, byte_bc, sequence_e0_bc;
		BitBlock r800_ffff_tmp10, r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13;
		BitBlock r800_ffff_tmp14, r800_ffff_tmp15, r800_ffff_tmp16, r800_ffff_tmp17;
		BitBlock r800_ffff_tmp18, r800_ffff_tmp19, r800_ffff_tmp20, r800_ffff_tmp21;
		BitBlock r800_ffff_tmp22, r800_ffff_tmp23, cc_range_f01_f38_3;
		BitBlock sequence_e0_bc_adv, r800_ffff_tmp24, byte_be, sequence_e0_be;
		BitBlock byte_range_be_bf, sequence_e0_be_adv, r800_ffff_tmp25, sequence_e0_bf;
		BitBlock r800_ffff_tmp26, r800_ffff_tmp27, r800_ffff_tmp28, r800_ffff_tmp29;
		BitBlock r800_ffff_tmp30, r800_ffff_tmp31, r800_ffff_tmp32, r800_ffff_tmp33;
		BitBlock cc_range_fc0_fd5_3, sequence_e0_bf_adv, r800_ffff_tmp34, byte_e1;
		BitBlock r800_ffff_tmp35, sequence_e1_82, byte_e1_adv, byte_range_9e_9f;
		BitBlock sequence_e1_82_adv, r800_ffff_tmp36, sequence_e1_8e, r800_ffff_tmp37;
		BitBlock byte_range_90_99, sequence_e1_8e_adv, r800_ffff_tmp38, byte_a5;
		BitBlock sequence_e1_a5, sequence_e1_a5_adv, r800_ffff_tmp39, sequence_e1_a7;
		BitBlock r800_ffff_tmp40, byte_range_9e_bf, sequence_e1_a7_adv;
		BitBlock r800_ffff_tmp41, sequence_e1_ad, r800_ffff_tmp42, r800_ffff_tmp43;
		BitBlock r800_ffff_tmp44, r800_ffff_tmp45, cc_range_1b61_1b74_3;
		BitBlock sequence_e1_ad_adv, r800_ffff_tmp46, byte_e2, r800_ffff_tmp47;
		BitBlock sequence_e2_84, byte_e2_adv, r800_ffff_tmp48, r800_ffff_tmp49;
		BitBlock r800_ffff_tmp50, r800_ffff_tmp51, r800_ffff_tmp52, r800_ffff_tmp53;
		BitBlock r800_ffff_tmp54, r800_ffff_tmp55, r800_ffff_tmp56, r800_ffff_tmp57;
		BitBlock r800_ffff_tmp58, r800_ffff_tmp59, r800_ffff_tmp60, r800_ffff_tmp61;
		BitBlock r800_ffff_tmp62, r800_ffff_tmp63, r800_ffff_tmp64, r800_ffff_tmp65;
		BitBlock r800_ffff_tmp66, r800_ffff_tmp67, r800_ffff_tmp68, r800_ffff_tmp69;
		BitBlock r800_ffff_tmp70, r800_ffff_tmp71, cc_range_2100_213a_3;
		BitBlock sequence_e2_84_adv, r800_ffff_tmp72, sequence_e2_85, r800_ffff_tmp73;
		BitBlock r800_ffff_tmp74, r800_ffff_tmp75, cc_range_214a_214f_3;
		BitBlock sequence_e2_85_adv, r800_ffff_tmp76, sequence_e2_86, r800_ffff_tmp77;
		BitBlock r800_ffff_tmp78, r800_ffff_tmp79, r800_ffff_tmp80, r800_ffff_tmp81;
		BitBlock r800_ffff_tmp82, r800_ffff_tmp83, r800_ffff_tmp84, r800_ffff_tmp85;
		BitBlock r800_ffff_tmp86, r800_ffff_tmp87, r800_ffff_tmp88, r800_ffff_tmp89;
		BitBlock r800_ffff_tmp90, r800_ffff_tmp91, r800_ffff_tmp92, r800_ffff_tmp93;
		BitBlock cc_range_2195_21af_3, sequence_e2_86_adv, r800_ffff_tmp94;
		BitBlock sequence_e2_87, r800_ffff_tmp95, r800_ffff_tmp96, r800_ffff_tmp97;
		BitBlock r800_ffff_tmp98, r800_ffff_tmp99, r800_ffff_tmp100, r800_ffff_tmp101;
		BitBlock r800_ffff_tmp102, cc_range_21c0_21d5_3, sequence_e2_87_adv;
		BitBlock r800_ffff_tmp103, sequence_e2_8c, r800_ffff_tmp104, r800_ffff_tmp105;
		BitBlock r800_ffff_tmp106, r800_ffff_tmp107, r800_ffff_tmp108;
		BitBlock r800_ffff_tmp109, r800_ffff_tmp110, cc_range_2300_232b_3;
		BitBlock sequence_e2_8c_adv, r800_ffff_tmp111, sequence_e2_8d;
		BitBlock r800_ffff_tmp112, r800_ffff_tmp113, r800_ffff_tmp114;
		BitBlock r800_ffff_tmp115, r800_ffff_tmp116, cc_range_2340_237d_3;
		BitBlock sequence_e2_8d_adv, r800_ffff_tmp117, sequence_e2_8e;
		BitBlock r800_ffff_tmp118, cc_range_2380_23b4_3, sequence_e2_8e_adv;
		BitBlock r800_ffff_tmp119, sequence_e2_8f, r800_ffff_tmp120, r800_ffff_tmp121;
		BitBlock r800_ffff_tmp122, r800_ffff_tmp123, cc_range_23c0_23e2_3;
		BitBlock sequence_e2_8f_adv, r800_ffff_tmp124, sequence_e2_90;
		BitBlock sequence_e2_90_adv, r800_ffff_tmp125, sequence_e2_91;
		BitBlock byte_range_80_8a, sequence_e2_91_adv, r800_ffff_tmp126;
		BitBlock sequence_e2_92, r800_ffff_tmp127, byte_range_9c_bf;
		BitBlock sequence_e2_92_adv, r800_ffff_tmp128, sequence_e2_93;
		BitBlock r800_ffff_tmp129, r800_ffff_tmp130, byte_range_80_a9;
		BitBlock sequence_e2_93_adv, r800_ffff_tmp131, byte_range_94_95;
		BitBlock byte_e2_byte_range_94_95, r800_ffff_tmp132;
		BitBlock byte_e2_byte_range_94_95_sfx, byte_96, sequence_e2_96;
		BitBlock r800_ffff_tmp133, byte_range_80_b6, r800_ffff_tmp134;
		BitBlock sequence_e2_96_byte_range_80_b6, sequence_e2_97, r800_ffff_tmp135;
		BitBlock sequence_e2_97_80, sequence_e2_98, r800_ffff_tmp136;
		BitBlock sequence_e2_98_byte_range_80_bf, sequence_e2_99, r800_ffff_tmp137;
		BitBlock byte_range_80_ae, r800_ffff_tmp138, sequence_e2_99_byte_range_80_ae;
		BitBlock sequence_e2_9a, r800_ffff_tmp139, sequence_e2_9a_byte_range_80_bf;
		BitBlock sequence_e2_9c, r800_ffff_tmp140, byte_range_81_bf, r800_ffff_tmp141;
		BitBlock sequence_e2_9c_byte_range_81_bf, sequence_e2_9d, r800_ffff_tmp142;
		BitBlock byte_range_80_a7, r800_ffff_tmp143, sequence_e2_9d_byte_range_80_a7;
		BitBlock byte_9e, sequence_e2_9e, r800_ffff_tmp144, byte_range_94_bf;
		BitBlock r800_ffff_tmp145, sequence_e2_9e_byte_range_94_bf, byte_a0;
		BitBlock sequence_e2_a0, r800_ffff_tmp146, sequence_e2_a0_byte_range_80_bf;
		BitBlock byte_ac, sequence_e2_ac, byte_range_80_af, r800_ffff_tmp147;
		BitBlock sequence_e2_ac_byte_range_80_af, sequence_e2_ad, r800_ffff_tmp148;
		BitBlock byte_range_85_86, r800_ffff_tmp149, sequence_e2_ad_byte_range_85_86;
		BitBlock byte_b3, sequence_e2_b3, r800_ffff_tmp150, byte_range_a5_aa;
		BitBlock r800_ffff_tmp151, sequence_e2_b3_byte_range_a5_aa, sequence_e2_ba;
		BitBlock r800_ffff_tmp152, byte_range_80_99, r800_ffff_tmp153;
		BitBlock sequence_e2_ba_byte_range_80_99, byte_bb, sequence_e2_bb;
		BitBlock r800_ffff_tmp154, sequence_e2_bb_byte_range_80_b3, sequence_e2_bc;
		BitBlock r800_ffff_tmp155, sequence_e2_bc_byte_range_80_bf, sequence_e2_bf;
		BitBlock byte_range_80_95, r800_ffff_tmp156, sequence_e2_bf_byte_range_80_95;
		BitBlock byte_e3, r800_ffff_tmp157, sequence_e3_80, byte_e3_adv;
		BitBlock r800_ffff_tmp158, r800_ffff_tmp159, r800_ffff_tmp160;
		BitBlock r800_ffff_tmp161, r800_ffff_tmp162, r800_ffff_tmp163;
		BitBlock cc_range_3004_303e_3, sequence_e3_80_adv, r800_ffff_tmp164;
		BitBlock sequence_e3_86, r800_ffff_tmp165, cc_range_3190_3196_3;
		BitBlock sequence_e3_86_adv, r800_ffff_tmp166, sequence_e3_87;
		BitBlock r800_ffff_tmp167, byte_range_80_a3, sequence_e3_87_adv;
		BitBlock r800_ffff_tmp168, sequence_e3_88, r800_ffff_tmp169, r800_ffff_tmp170;
		BitBlock cc_range_3200_322a_3, sequence_e3_88_adv, r800_ffff_tmp171;
		BitBlock sequence_e3_89, r800_ffff_tmp172, cc_range_3240_3260_3;
		BitBlock sequence_e3_89_adv, r800_ffff_tmp173, byte_8a, sequence_e3_8a;
		BitBlock r800_ffff_tmp174, r800_ffff_tmp175, byte_range_8a_b0;
		BitBlock sequence_e3_8a_adv, r800_ffff_tmp176, byte_8b, sequence_e3_8b;
		BitBlock sequence_e3_8b_adv, r800_ffff_tmp177, byte_range_8c_8f;
		BitBlock byte_e3_byte_range_8c_8f, r800_ffff_tmp178;
		BitBlock byte_e3_byte_range_8c_8f_sfx, byte_e4, byte_b7, r800_ffff_tmp179;
		BitBlock sequence_e4_b7, byte_e4_adv, sequence_e4_b7_adv, r800_ffff_tmp180;
		BitBlock byte_ea, r800_ffff_tmp181, sequence_ea_92, byte_ea_adv;
		BitBlock byte_range_90_bf, sequence_ea_92_adv, r800_ffff_tmp182;
		BitBlock sequence_ea_93, byte_range_80_86, sequence_ea_93_adv;
		BitBlock r800_ffff_tmp183, sequence_ea_a0, r800_ffff_tmp184, r800_ffff_tmp185;
		BitBlock cc_range_a828_a839_3, sequence_ea_a0_adv, r800_ffff_tmp186, byte_a9;
		BitBlock sequence_ea_a9, r800_ffff_tmp187, byte_range_b7_b9;
		BitBlock sequence_ea_a9_adv, r800_ffff_tmp188, byte_ef, r800_ffff_tmp189;
		BitBlock sequence_ef_b7, byte_ef_adv, byte_bd, sequence_ef_b7_adv;
		BitBlock r800_ffff_tmp190, sequence_ef_bf, r800_ffff_tmp191, r800_ffff_tmp192;
		BitBlock r800_ffff_tmp193, r800_ffff_tmp194, r800_ffff_tmp195;
		BitBlock r800_ffff_tmp196, r800_ffff_tmp197, cc_range_ffe4_fffc_3;
		BitBlock sequence_ef_bf_adv, r800_ffff_tmp198, sequence_f0_90, tmp166;
		BitBlock sequence_f0_90_byte_range_80_bf, tmp167;
		BitBlock sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock sequence_f0_90_84, sequence_f0_90_adv, byte_range_b7_bf;
		BitBlock sequence_f0_90_84_adv, r10000_10fff_tmp1, sequence_f0_90_85;
		BitBlock byte_range_b9_bf, sequence_f0_90_85_adv, r10000_10fff_tmp2;
		BitBlock sequence_f0_90_86, r10000_10fff_tmp3, r10000_10fff_tmp4;
		BitBlock r10000_10fff_tmp5, r10000_10fff_tmp6, cc_range_10180_10190_4;
		BitBlock sequence_f0_90_86_adv, r10000_10fff_tmp7, sequence_f0_90_87;
		BitBlock r10000_10fff_tmp8, r10000_10fff_tmp9, byte_range_90_bc;
		BitBlock sequence_f0_90_87_adv, r10000_10fff_tmp10;




        struct_So.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_f0 = simd_andc(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp12 = simd_and(tmp10, tmp11);
        byte_9d = simd_and(tmp9, tmp12);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp13));
        sequence_f0_9d = simd_and(tmp13, byte_9d);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        tmp14 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp15 = simd_andc(tmp7, tmp14);
        tmp16 = simd_andc(tmp15, tmp4);
        tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        byte_range_80_82 = simd_andc(tmp16, tmp17);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(2), tmp18));
        sequence_f0_9d_byte_range_80_82 = simd_and(tmp18, byte_range_80_82);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_80_82, carryQ.get_carry_in(3), tmp19));
        sequence_f0_9d_byte_range_80_82_sfx = simd_and(tmp19, byte_range_80_bf);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_byte_range_80_82_sfx);
        tmp20 = simd_and(byte_range_80_bf, tmp8);
        tmp21 = simd_andc(byte_range_80_bf, tmp14);
        tmp22 = simd_andc(tmp17, tmp4);
        byte_83 = simd_and(tmp21, tmp22);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(4), sequence_f0_9d_adv));
        sequence_f0_9d_83 = simd_and(sequence_f0_9d_adv, byte_83);
        tmp23 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
        tmp24 = simd_or(basis_bits.bit_4, tmp23);
        tmp25 = simd_and(basis_bits.bit_3, tmp24);
        tmp26 = simd_and(basis_bits.bit_2, tmp25);
        byte_range_80_b5 = simd_andc(byte_range_80_bf, tmp26);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_83, carryQ.get_carry_in(5), tmp27));
        sequence_f0_9d_83_byte_range_80_b5 = simd_and(tmp27, byte_range_80_b5);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_83_byte_range_80_b5);
        tmp28 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp29 = simd_andc(tmp28, tmp5);
        byte_84 = simd_and(tmp21, tmp29);
        sequence_f0_9d_84 = simd_and(sequence_f0_9d_adv, byte_84);
        tmp30 = simd_and(basis_bits.bit_5, tmp17);
        tmp31 = simd_or(basis_bits.bit_4, tmp30);
        tmp32 = simd_or(basis_bits.bit_3, tmp31);
        tmp33 = simd_and(basis_bits.bit_2, tmp32);
        byte_range_80_a6 = simd_andc(byte_range_80_bf, tmp33);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_84, carryQ.get_carry_in(6), tmp34));
        sequence_f0_9d_84_byte_range_80_a6 = simd_and(tmp34, byte_range_80_a6);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_84_byte_range_80_a6);
        tmp35 = simd_and(tmp28, tmp11);
        byte_85 = simd_and(tmp21, tmp35);
        sequence_f0_9d_85 = simd_and(sequence_f0_9d_adv, byte_85);
        tmp36 = simd_and(basis_bits.bit_5, tmp5);
        tmp37 = simd_or(basis_bits.bit_4, tmp36);
        tmp38 = simd_or(basis_bits.bit_3, tmp37);
        tmp39 = simd_and(basis_bits.bit_2, tmp38);
        byte_range_80_a4 = simd_andc(byte_range_80_bf, tmp39);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(7), tmp40));
        sequence_f0_9d_85_byte_range_80_a4 = simd_and(tmp40, byte_range_80_a4);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_85_byte_range_80_a4);
        tmp41 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp42 = simd_and(tmp28, tmp41);
        byte_86 = simd_and(tmp21, tmp42);
        sequence_f0_9d_86 = simd_and(sequence_f0_9d_adv, byte_86);
        tmp43 = simd_andc(tmp21, basis_bits.bit_4);
        tmp44 = simd_not(tmp5);
        tmp45 = simd_or(simd_and(basis_bits.bit_5, tmp44), simd_andc(tmp17, basis_bits.bit_5));
        byte_range_83_84 = simd_and(tmp43, tmp45);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_86, carryQ.get_carry_in(8), tmp46));
        sequence_f0_9d_86_byte_range_83_84 = simd_and(tmp46, byte_range_83_84);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_86_byte_range_83_84);
        tmp47 = simd_and(tmp28, tmp17);
        byte_87 = simd_and(tmp21, tmp47);
        sequence_f0_9d_87 = simd_and(sequence_f0_9d_adv, byte_87);
        tmp48 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
        tmp49 = simd_and(tmp10, basis_bits.bit_6);
        tmp50 = simd_and(basis_bits.bit_3, tmp49);
        byte_range_80_9d = simd_andc(tmp48, tmp50);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_87, carryQ.get_carry_in(9), tmp51));
        sequence_f0_9d_87_byte_range_80_9d = simd_and(tmp51, byte_range_80_9d);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_87_byte_range_80_9d);
        tmp52 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp53 = simd_andc(tmp52, tmp5);
        byte_88 = simd_and(tmp21, tmp53);
        sequence_f0_9d_88 = simd_and(sequence_f0_9d_adv, byte_88);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_88, carryQ.get_carry_in(10), tmp54));
        sequence_f0_9d_88_byte_range_80_bf = simd_and(tmp54, byte_range_80_bf);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_88_byte_range_80_bf);
        tmp55 = simd_and(tmp52, tmp11);
        byte_89 = simd_and(tmp21, tmp55);
        sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
        tmp56 = simd_or(tmp4, basis_bits.bit_6);
        byte_range_80_81 = simd_andc(tmp21, tmp56);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_89, carryQ.get_carry_in(11), tmp57));
        sequence_f0_9d_89_byte_range_80_81 = simd_and(tmp57, byte_range_80_81);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_89_byte_range_80_81);
        tmp58 = simd_andc(tmp10, tmp5);
        byte_8c = simd_and(tmp21, tmp58);
        sequence_f0_9d_8c = simd_and(sequence_f0_9d_adv, byte_8c);
        carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8c, carryQ.get_carry_in(12), tmp59));
        sequence_f0_9d_8c_byte_range_80_bf = simd_and(tmp59, byte_range_80_bf);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_8c_byte_range_80_bf);
        byte_8d = simd_and(tmp21, tmp12);
        sequence_f0_9d_8d = simd_and(sequence_f0_9d_adv, byte_8d);
        tmp60 = simd_and(basis_bits.bit_3, tmp31);
        byte_range_80_96 = simd_andc(tmp48, tmp60);
        carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8d, carryQ.get_carry_in(13), tmp61));
        sequence_f0_9d_8d_byte_range_80_96 = simd_and(tmp61, byte_range_80_96);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_8d_byte_range_80_96);
        tmp62 = simd_and(tmp10, tmp17);
        byte_9f = simd_and(tmp20, tmp62);
        sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
        sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
        byte_80 = simd_andc(tmp21, tmp6);
        carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(14), tmp63));
        sequence_f0_9f_80 = simd_and(tmp63, byte_80);
        carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(15), sequence_f0_9f_adv));
        sequence_f0_9f_80 = simd_and(sequence_f0_9f_adv, byte_80);
        tmp64 = simd_or(basis_bits.bit_3, tmp10);
        tmp65 = simd_and(basis_bits.bit_2, tmp64);
        tmp66 = simd_andc(tmp65, tmp2);
        cc_range_1f000_1f030_4 = simd_andc(byte_range_80_bf, tmp66);
        carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_80, carryQ.get_carry_in(16), sequence_f0_9f_80_adv));
        tmp67 = simd_and(sequence_f0_9f_80_adv, cc_range_1f000_1f030_4);
        struct_So.cc = simd_or(struct_So.cc, tmp67);
        tmp68 = simd_andc(tmp11, tmp4);
        byte_81 = simd_and(tmp21, tmp68);
        sequence_f0_9f_81 = simd_and(sequence_f0_9f_adv, byte_81);
        sequence_f0_9f_81 = simd_and(sequence_f0_9f_adv, byte_81);
        carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_81, carryQ.get_carry_in(17), sequence_f0_9f_81_adv));
        tmp69 = simd_and(sequence_f0_9f_81_adv, byte_range_80_bf);
        struct_So.cc = simd_or(struct_So.cc, tmp69);
        tmp70 = simd_andc(tmp41, tmp4);
        byte_82 = simd_and(tmp21, tmp70);
        sequence_f0_9f_82 = simd_and(sequence_f0_9f_adv, byte_82);
        sequence_f0_9f_82 = simd_and(sequence_f0_9f_adv, byte_82);
        tmp71 = simd_and(basis_bits.bit_3, tmp4);
        tmp72 = simd_andc(tmp48, tmp71);
        tmp73 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp74 = simd_and(byte_range_80_bf, tmp73);
        tmp75 = simd_and(basis_bits.bit_4, tmp30);
        tmp76 = simd_andc(tmp74, tmp75);
        tmp77 = simd_or(tmp72, tmp76);
        tmp78 = simd_and(byte_range_80_bf, tmp2);
        tmp79 = simd_not(tmp30);
        tmp80 = simd_or(basis_bits.bit_5, tmp5);
        tmp81 = simd_or(simd_and(basis_bits.bit_4, tmp79), simd_andc(tmp80, basis_bits.bit_4));
        tmp82 = simd_and(tmp78, tmp81);
        cc_range_1f080_1f0b1_4 = simd_or(tmp77, tmp82);
        carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_82, carryQ.get_carry_in(18), sequence_f0_9f_82_adv));
        tmp83 = simd_and(sequence_f0_9f_82_adv, cc_range_1f080_1f0b1_4);
        struct_So.cc = simd_or(struct_So.cc, tmp83);
        sequence_f0_9f_83 = simd_and(sequence_f0_9f_adv, byte_83);
        sequence_f0_9f_83 = simd_and(sequence_f0_9f_adv, byte_83);
        tmp84 = simd_or(basis_bits.bit_4, tmp80);
        tmp85 = simd_andc(tmp14, tmp8);
        tmp86 = simd_andc(byte_range_80_bf, tmp85);
        cc_range_1f0c1_1f0d1_4 = simd_and(tmp84, tmp86);
        carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_83, carryQ.get_carry_in(19), sequence_f0_9f_83_adv));
        tmp87 = simd_and(sequence_f0_9f_83_adv, cc_range_1f0c1_1f0d1_4);
        struct_So.cc = simd_or(struct_So.cc, tmp87);
        sequence_f0_9f_84 = simd_and(sequence_f0_9f_adv, byte_84);
        sequence_f0_9f_84 = simd_and(sequence_f0_9f_adv, byte_84);
        tmp88 = simd_or(basis_bits.bit_3, tmp62);
        tmp89 = simd_not(tmp88);
        tmp90 = simd_or(simd_and(basis_bits.bit_2, tmp89), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
        tmp91 = simd_or(tmp90, tmp2);
        cc_range_1f110_1f130_4 = simd_and(byte_range_80_bf, tmp91);
        carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_84, carryQ.get_carry_in(20), sequence_f0_9f_84_adv));
        tmp92 = simd_and(sequence_f0_9f_84_adv, cc_range_1f110_1f130_4);
        struct_So.cc = simd_or(struct_So.cc, tmp92);
        sequence_f0_9f_85 = simd_and(sequence_f0_9f_adv, byte_85);
        sequence_f0_9f_85 = simd_and(sequence_f0_9f_adv, byte_85);
        cc_range_1f140_1f170_4 = simd_andc(byte_range_80_bf, tmp66);
        carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_85, carryQ.get_carry_in(21), sequence_f0_9f_85_adv));
        tmp93 = simd_and(sequence_f0_9f_85_adv, cc_range_1f140_1f170_4);
        struct_So.cc = simd_or(struct_So.cc, tmp93);
        sequence_f0_9f_86 = simd_and(sequence_f0_9f_adv, byte_86);
        sequence_f0_9f_86 = simd_and(sequence_f0_9f_adv, byte_86);
        tmp94 = simd_or(basis_bits.bit_5, tmp17);
        tmp95 = simd_and(basis_bits.bit_4, tmp94);
        tmp96 = simd_and(basis_bits.bit_3, tmp95);
        byte_range_80_9a = simd_andc(tmp48, tmp96);
        carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_86, carryQ.get_carry_in(22), sequence_f0_9f_86_adv));
        tmp97 = simd_and(sequence_f0_9f_86_adv, byte_range_80_9a);
        struct_So.cc = simd_or(struct_So.cc, tmp97);
        sequence_f0_9f_87 = simd_and(sequence_f0_9f_adv, byte_87);
        sequence_f0_9f_87 = simd_and(sequence_f0_9f_adv, byte_87);
        tmp98 = simd_and(byte_range_80_bf, basis_bits.bit_2);
        tmp99 = simd_or(basis_bits.bit_3, tmp24);
        byte_range_a6_bf = simd_and(tmp98, tmp99);
        carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_87, carryQ.get_carry_in(23), sequence_f0_9f_87_adv));
        tmp100 = simd_and(sequence_f0_9f_87_adv, byte_range_a6_bf);
        struct_So.cc = simd_or(struct_So.cc, tmp100);
        sequence_f0_9f_88 = simd_and(sequence_f0_9f_adv, byte_88);
        sequence_f0_9f_88 = simd_and(sequence_f0_9f_adv, byte_88);
        tmp101 = simd_andc(tmp21, tmp4);
        tmp102 = simd_andc(tmp101, tmp17);
        tmp103 = simd_not(tmp96);
        tmp104 = simd_or(simd_and(basis_bits.bit_2, tmp103), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
        tmp105 = simd_and(byte_range_80_bf, tmp104);
        cc_range_1f200_1f210_4 = simd_or(tmp102, tmp105);
        carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_88, carryQ.get_carry_in(24), sequence_f0_9f_88_adv));
        tmp106 = simd_and(sequence_f0_9f_88_adv, cc_range_1f200_1f210_4);
        struct_So.cc = simd_or(struct_So.cc, tmp106);
        sequence_f0_9f_89 = simd_and(sequence_f0_9f_adv, byte_89);
        sequence_f0_9f_89 = simd_and(sequence_f0_9f_adv, byte_89);
        tmp107 = simd_and(basis_bits.bit_4, tmp80);
        tmp108 = simd_andc(tmp21, tmp107);
        tmp109 = simd_andc(tmp20, tmp56);
        cc_range_1f240_1f250_4 = simd_or(tmp108, tmp109);
        carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_89, carryQ.get_carry_in(25), sequence_f0_9f_89_adv));
        tmp110 = simd_and(sequence_f0_9f_89_adv, cc_range_1f240_1f250_4);
        struct_So.cc = simd_or(struct_So.cc, tmp110);
        sequence_f0_9f_8c = simd_and(sequence_f0_9f_adv, byte_8c);
        sequence_f0_9f_8c = simd_and(sequence_f0_9f_adv, byte_8c);
        tmp111 = simd_or(basis_bits.bit_3, tmp6);
        tmp112 = simd_and(basis_bits.bit_2, tmp111);
        tmp113 = simd_andc(byte_range_80_bf, tmp112);
        tmp114 = simd_andc(tmp78, basis_bits.bit_4);
        tmp115 = simd_andc(tmp114, tmp23);
        tmp116 = simd_or(tmp113, tmp115);
        tmp117 = simd_and(tmp78, tmp31);
        cc_range_1f300_1f337_4 = simd_or(tmp116, tmp117);
        carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8c, carryQ.get_carry_in(26), sequence_f0_9f_8c_adv));
        tmp118 = simd_and(sequence_f0_9f_8c_adv, cc_range_1f300_1f337_4);
        struct_So.cc = simd_or(struct_So.cc, tmp118);
        sequence_f0_9f_8d = simd_and(sequence_f0_9f_adv, byte_8d);
        sequence_f0_9f_8d = simd_and(sequence_f0_9f_adv, byte_8d);
        tmp119 = simd_and(tmp10, tmp5);
        tmp120 = simd_and(basis_bits.bit_3, tmp119);
        tmp121 = simd_and(basis_bits.bit_2, tmp120);
        byte_range_80_bc = simd_andc(byte_range_80_bf, tmp121);
        carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8d, carryQ.get_carry_in(27), sequence_f0_9f_8d_adv));
        tmp122 = simd_and(sequence_f0_9f_8d_adv, byte_range_80_bc);
        struct_So.cc = simd_or(struct_So.cc, tmp122);
        tmp123 = simd_and(tmp10, tmp41);
        byte_8e = simd_and(tmp21, tmp123);
        sequence_f0_9f_8e = simd_and(sequence_f0_9f_adv, byte_8e);
        sequence_f0_9f_8e = simd_and(sequence_f0_9f_adv, byte_8e);
        cc_range_1f380_1f3a0_4 = simd_or(tmp72, tmp98);
        carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8e, carryQ.get_carry_in(28), sequence_f0_9f_8e_adv));
        tmp124 = simd_and(sequence_f0_9f_8e_adv, cc_range_1f380_1f3a0_4);
        struct_So.cc = simd_or(struct_So.cc, tmp124);
        byte_8f = simd_and(tmp21, tmp62);
        sequence_f0_9f_8f = simd_and(sequence_f0_9f_adv, byte_8f);
        sequence_f0_9f_8f = simd_and(sequence_f0_9f_adv, byte_8f);
        tmp125 = simd_andc(tmp43, tmp36);
        tmp126 = simd_not(tmp94);
        tmp127 = simd_or(simd_and(basis_bits.bit_4, tmp126), simd_andc(tmp23, basis_bits.bit_4));
        tmp128 = simd_and(tmp21, tmp127);
        tmp129 = simd_or(tmp125, tmp128);
        tmp130 = simd_and(basis_bits.bit_3, tmp6);
        tmp131 = simd_andc(tmp98, tmp130);
        cc_range_1f3c0_1f3e0_4 = simd_or(tmp129, tmp131);
        carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8f, carryQ.get_carry_in(29), sequence_f0_9f_8f_adv));
        tmp132 = simd_and(sequence_f0_9f_8f_adv, cc_range_1f3c0_1f3e0_4);
        struct_So.cc = simd_or(struct_So.cc, tmp132);
        byte_90 = simd_andc(tmp20, tmp6);
        sequence_f0_9f_90 = simd_and(sequence_f0_9f_adv, byte_90);
        sequence_f0_9f_90 = simd_and(sequence_f0_9f_adv, byte_90);
        tmp133 = simd_and(basis_bits.bit_3, tmp62);
        tmp134 = simd_and(basis_bits.bit_2, tmp133);
        byte_range_80_be = simd_andc(byte_range_80_bf, tmp134);
        carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_90, carryQ.get_carry_in(30), sequence_f0_9f_90_adv));
        tmp135 = simd_and(sequence_f0_9f_90_adv, byte_range_80_be);
        struct_So.cc = simd_or(struct_So.cc, tmp135);
        byte_91 = simd_and(tmp20, tmp68);
        sequence_f0_9f_91 = simd_and(sequence_f0_9f_adv, byte_91);
        sequence_f0_9f_91 = simd_and(sequence_f0_9f_adv, byte_91);
        tmp136 = simd_or(basis_bits.bit_3, tmp56);
        tmp137 = simd_or(basis_bits.bit_2, tmp136);
        tmp138 = simd_and(byte_range_80_bf, tmp137);
        cc_range_1f440_1f442_4 = simd_or(byte_80, tmp138);
        carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_91, carryQ.get_carry_in(31), sequence_f0_9f_91_adv));
        tmp139 = simd_and(sequence_f0_9f_91_adv, cc_range_1f440_1f442_4);
        struct_So.cc = simd_or(struct_So.cc, tmp139);
        byte_92 = simd_and(tmp20, tmp70);
        sequence_f0_9f_92 = simd_and(sequence_f0_9f_adv, byte_92);
        sequence_f0_9f_92 = simd_and(sequence_f0_9f_adv, byte_92);
        carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_92, carryQ.get_carry_in(32), sequence_f0_9f_92_adv));
        tmp140 = simd_and(sequence_f0_9f_92_adv, byte_range_80_bf);
        struct_So.cc = simd_or(struct_So.cc, tmp140);
        byte_93 = simd_and(tmp20, tmp22);
        sequence_f0_9f_93 = simd_and(sequence_f0_9f_adv, byte_93);
        sequence_f0_9f_93 = simd_and(sequence_f0_9f_adv, byte_93);
        tmp141 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
        tmp142 = simd_and(basis_bits.bit_2, tmp141);
        tmp143 = simd_andc(byte_range_80_bf, tmp142);
        tmp144 = simd_and(tmp78, basis_bits.bit_4);
        tmp145 = simd_or(simd_and(basis_bits.bit_5, tmp44), simd_andc(tmp5, basis_bits.bit_5));
        tmp146 = simd_and(tmp144, tmp145);
        cc_range_1f4c0_1f4f9_4 = simd_or(tmp143, tmp146);
        carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_93, carryQ.get_carry_in(33), sequence_f0_9f_93_adv));
        tmp147 = simd_and(sequence_f0_9f_93_adv, cc_range_1f4c0_1f4f9_4);
        struct_So.cc = simd_or(struct_So.cc, tmp147);
        byte_94 = simd_and(tmp20, tmp29);
        sequence_f0_9f_94 = simd_and(sequence_f0_9f_adv, byte_94);
        sequence_f0_9f_94 = simd_and(sequence_f0_9f_adv, byte_94);
        tmp148 = simd_and(basis_bits.bit_2, tmp50);
        byte_range_80_bd = simd_andc(byte_range_80_bf, tmp148);
        carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_94, carryQ.get_carry_in(34), sequence_f0_9f_94_adv));
        tmp149 = simd_and(sequence_f0_9f_94_adv, byte_range_80_bd);
        struct_So.cc = simd_or(struct_So.cc, tmp149);
        byte_95 = simd_and(tmp20, tmp35);
        sequence_f0_9f_95 = simd_and(sequence_f0_9f_adv, byte_95);
        sequence_f0_9f_95 = simd_and(sequence_f0_9f_adv, byte_95);
        tmp150 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
        tmp151 = simd_not(tmp150);
        tmp152 = simd_or(simd_and(basis_bits.bit_2, tmp151), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
        tmp153 = simd_and(byte_range_80_bf, tmp152);
        cc_range_1f540_1f550_4 = simd_or(tmp101, tmp153);
        carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_95, carryQ.get_carry_in(35), sequence_f0_9f_95_adv));
        tmp154 = simd_and(sequence_f0_9f_95_adv, cc_range_1f540_1f550_4);
        struct_So.cc = simd_or(struct_So.cc, tmp154);
        byte_97 = simd_and(tmp20, tmp47);
        sequence_f0_9f_97 = simd_and(sequence_f0_9f_adv, byte_97);
        sequence_f0_9f_97 = simd_and(sequence_f0_9f_adv, byte_97);
        byte_range_bb_bf = simd_and(tmp144, tmp94);
        carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_97, carryQ.get_carry_in(36), sequence_f0_9f_97_adv));
        tmp155 = simd_and(sequence_f0_9f_97_adv, byte_range_bb_bf);
        struct_So.cc = simd_or(struct_So.cc, tmp155);
        byte_98 = simd_and(tmp20, tmp53);
        sequence_f0_9f_98 = simd_and(sequence_f0_9f_adv, byte_98);
        sequence_f0_9f_98 = simd_and(sequence_f0_9f_adv, byte_98);
        carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_98, carryQ.get_carry_in(37), sequence_f0_9f_98_adv));
        tmp156 = simd_and(sequence_f0_9f_98_adv, byte_range_80_bf);
        struct_So.cc = simd_or(struct_So.cc, tmp156);
        byte_99 = simd_and(tmp20, tmp55);
        sequence_f0_9f_99 = simd_and(sequence_f0_9f_adv, byte_99);
        sequence_f0_9f_99 = simd_and(sequence_f0_9f_adv, byte_99);
        tmp157 = simd_andc(tmp6, tmp37);
        cc_range_1f640_1f645_4 = simd_andc(tmp21, tmp157);
        carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_99, carryQ.get_carry_in(38), sequence_f0_9f_99_adv));
        tmp158 = simd_and(sequence_f0_9f_99_adv, cc_range_1f640_1f645_4);
        struct_So.cc = simd_or(struct_So.cc, tmp158);
        tmp159 = simd_and(tmp52, tmp41);
        byte_9a = simd_and(tmp20, tmp159);
        sequence_f0_9f_9a = simd_and(sequence_f0_9f_adv, byte_9a);
        sequence_f0_9f_9a = simd_and(sequence_f0_9f_adv, byte_9a);
        carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9a, carryQ.get_carry_in(39), sequence_f0_9f_9a_adv));
        tmp160 = simd_and(sequence_f0_9f_9a_adv, byte_range_80_bf);
        struct_So.cc = simd_or(struct_So.cc, tmp160);
        tmp161 = simd_and(tmp52, tmp17);
        byte_9b = simd_and(tmp20, tmp161);
        sequence_f0_9f_9b = simd_and(sequence_f0_9f_adv, byte_9b);
        sequence_f0_9f_9b = simd_and(sequence_f0_9f_adv, byte_9b);
        byte_range_80_85 = simd_andc(tmp43, tmp23);
        carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9b, carryQ.get_carry_in(40), sequence_f0_9f_9b_adv));
        tmp162 = simd_and(sequence_f0_9f_9b_adv, byte_range_80_85);
        struct_So.cc = simd_or(struct_So.cc, tmp162);
        byte_9c = simd_and(tmp20, tmp58);
        sequence_f0_9f_9c = simd_and(sequence_f0_9f_adv, byte_9c);
        sequence_f0_9f_9c = simd_and(sequence_f0_9f_adv, byte_9c);
        carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9c, carryQ.get_carry_in(41), sequence_f0_9f_9c_adv));
        tmp163 = simd_and(sequence_f0_9f_9c_adv, byte_range_80_bf);
        struct_So.cc = simd_or(struct_So.cc, tmp163);
        sequence_f0_9f_9d = simd_and(sequence_f0_9f_adv, byte_9d);
        sequence_f0_9f_9d = simd_and(sequence_f0_9f_adv, byte_9d);
        tmp164 = simd_and(basis_bits.bit_2, tmp71);
        byte_range_80_b3 = simd_andc(byte_range_80_bf, tmp164);
        carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9d, carryQ.get_carry_in(42), sequence_f0_9f_9d_adv));
        tmp165 = simd_and(sequence_f0_9f_9d_adv, byte_range_80_b3);
        struct_So.cc = simd_or(struct_So.cc, tmp165);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(43, 5))) {
          r80_7ff_tmp1 = simd_andc(tmp1, tmp14);
          byte_c2 = simd_and(r80_7ff_tmp1, tmp70);
          r80_7ff_tmp2 = simd_or(tmp42, tmp55);
          r80_7ff_tmp3 = simd_or(r80_7ff_tmp2, tmp123);
          r80_7ff_tmp4 = simd_and(tmp74, r80_7ff_tmp3);
          r80_7ff_tmp5 = simd_andc(tmp78, tmp6);
          cc_range_a6_b0_2 = simd_or(r80_7ff_tmp4, r80_7ff_tmp5);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(43), byte_c2_adv));
          r80_7ff_tmp6 = simd_and(byte_c2_adv, cc_range_a6_b0_2);
          struct_So.cc = simd_or(struct_So.cc, r80_7ff_tmp6);
          r80_7ff_tmp7 = simd_and(tmp1, tmp8);
          byte_d2 = simd_and(r80_7ff_tmp7, tmp70);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(44), byte_d2_adv));
          r80_7ff_tmp8 = simd_and(byte_d2_adv, byte_82);
          struct_So.cc = simd_or(struct_So.cc, r80_7ff_tmp8);
          byte_d8 = simd_and(r80_7ff_tmp7, tmp53);
          byte_range_8e_8f = simd_and(tmp21, tmp49);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(45), byte_d8_adv));
          r80_7ff_tmp9 = simd_and(byte_d8_adv, byte_range_8e_8f);
          struct_So.cc = simd_or(struct_So.cc, r80_7ff_tmp9);
          byte_db = simd_and(r80_7ff_tmp7, tmp161);
          r80_7ff_tmp10 = simd_and(tmp20, tmp123);
          r80_7ff_tmp11 = simd_and(tmp74, tmp55);
          r80_7ff_tmp12 = simd_or(r80_7ff_tmp10, r80_7ff_tmp11);
          r80_7ff_tmp13 = simd_and(tmp78, tmp10);
          r80_7ff_tmp14 = simd_not(basis_bits.bit_7);
          r80_7ff_tmp15 = simd_or(simd_and(basis_bits.bit_6, r80_7ff_tmp14), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          r80_7ff_tmp16 = simd_and(r80_7ff_tmp13, r80_7ff_tmp15);
          cc_range_6de_6fd_2 = simd_or(r80_7ff_tmp12, r80_7ff_tmp16);
          carryQ.cq[46] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(46), byte_db_adv));
          r80_7ff_tmp17 = simd_and(byte_db_adv, cc_range_6de_6fd_2);
          struct_So.cc = simd_or(struct_So.cc, r80_7ff_tmp17);
          byte_df = simd_and(r80_7ff_tmp7, tmp62);
          byte_b6 = simd_and(tmp78, tmp42);
          carryQ.cq[47] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(47), byte_df_adv));
          r80_7ff_tmp18 = simd_and(byte_df_adv, byte_b6);
          struct_So.cc = simd_or(struct_So.cc, r80_7ff_tmp18);
        }
        else {
          carryQ.CarryDequeueEnqueue(43, 5);
        }
        byte_range_e0_ef = simd_and(tmp1, tmp73);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(48, 71))) {
          byte_e0 = simd_andc(byte_range_e0_ef, tmp6);
          byte_a7 = simd_and(tmp74, tmp47);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(48), r800_ffff_tmp1));
          sequence_e0_a7 = simd_and(r800_ffff_tmp1, byte_a7);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(49), byte_e0_adv));
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          byte_ba = simd_and(tmp78, tmp159);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(50), sequence_e0_a7_adv));
          r800_ffff_tmp2 = simd_and(sequence_e0_a7_adv, byte_ba);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp2);
          byte_ad = simd_and(tmp74, tmp12);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          byte_b0 = simd_andc(tmp78, tmp6);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(51), sequence_e0_ad_adv));
          r800_ffff_tmp3 = simd_and(sequence_e0_ad_adv, byte_b0);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp3);
          byte_af = simd_and(tmp74, tmp62);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          r800_ffff_tmp4 = simd_not(tmp80);
          r800_ffff_tmp5 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp4), simd_andc(tmp94, basis_bits.bit_4));
          r800_ffff_tmp6 = simd_or(r800_ffff_tmp5, tmp159);
          cc_range_bf3_bfa_3 = simd_and(tmp78, r800_ffff_tmp6);
          carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(52), sequence_e0_af_adv));
          r800_ffff_tmp7 = simd_and(sequence_e0_af_adv, cc_range_bf3_bfa_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp7);
          byte_b1 = simd_and(tmp78, tmp68);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          byte_bf = simd_and(tmp78, tmp62);
          carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(53), sequence_e0_b1_adv));
          r800_ffff_tmp8 = simd_and(sequence_e0_b1_adv, byte_bf);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp8);
          byte_b5 = simd_and(tmp78, tmp35);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          byte_b9 = simd_and(tmp78, tmp55);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(54), sequence_e0_b5_adv));
          r800_ffff_tmp9 = simd_and(sequence_e0_b5_adv, byte_b9);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp9);
          byte_bc = simd_and(tmp78, tmp58);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          r800_ffff_tmp10 = simd_and(tmp101, tmp5);
          r800_ffff_tmp11 = simd_or(r800_ffff_tmp10, byte_93);
          r800_ffff_tmp12 = simd_and(tmp20, tmp28);
          r800_ffff_tmp13 = simd_and(r800_ffff_tmp12, tmp5);
          r800_ffff_tmp14 = simd_or(r800_ffff_tmp11, r800_ffff_tmp13);
          r800_ffff_tmp15 = simd_and(tmp20, basis_bits.bit_4);
          r800_ffff_tmp16 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp17 = simd_and(r800_ffff_tmp15, r800_ffff_tmp16);
          r800_ffff_tmp18 = simd_or(r800_ffff_tmp14, r800_ffff_tmp17);
          r800_ffff_tmp19 = simd_and(tmp78, tmp29);
          r800_ffff_tmp20 = simd_or(r800_ffff_tmp18, r800_ffff_tmp19);
          r800_ffff_tmp21 = simd_and(tmp78, tmp42);
          r800_ffff_tmp22 = simd_or(r800_ffff_tmp20, r800_ffff_tmp21);
          r800_ffff_tmp23 = simd_and(tmp78, tmp53);
          cc_range_f01_f38_3 = simd_or(r800_ffff_tmp22, r800_ffff_tmp23);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(55), sequence_e0_bc_adv));
          r800_ffff_tmp24 = simd_and(sequence_e0_bc_adv, cc_range_f01_f38_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp24);
          byte_be = simd_and(tmp78, tmp123);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          byte_range_be_bf = simd_and(tmp78, tmp49);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(56), sequence_e0_be_adv));
          r800_ffff_tmp25 = simd_and(sequence_e0_be_adv, byte_range_be_bf);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp25);
          sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
          sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
          r800_ffff_tmp26 = simd_not(tmp36);
          r800_ffff_tmp27 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp26), simd_andc(tmp30, basis_bits.bit_4));
          r800_ffff_tmp28 = simd_and(tmp21, r800_ffff_tmp27);
          r800_ffff_tmp29 = simd_or(byte_range_80_85, r800_ffff_tmp28);
          r800_ffff_tmp30 = simd_and(tmp21, tmp49);
          r800_ffff_tmp31 = simd_or(r800_ffff_tmp29, r800_ffff_tmp30);
          r800_ffff_tmp32 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp4), simd_andc(tmp36, basis_bits.bit_4));
          r800_ffff_tmp33 = simd_and(tmp20, r800_ffff_tmp32);
          cc_range_fc0_fd5_3 = simd_or(r800_ffff_tmp31, r800_ffff_tmp33);
          carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(57), sequence_e0_bf_adv));
          r800_ffff_tmp34 = simd_and(sequence_e0_bf_adv, cc_range_fc0_fd5_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp34);
          byte_e1 = simd_and(byte_range_e0_ef, tmp68);
          carryQ.cq[58] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(58), r800_ffff_tmp35));
          sequence_e1_82 = simd_and(r800_ffff_tmp35, byte_82);
          carryQ.cq[59] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(59), byte_e1_adv));
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          byte_range_9e_9f = simd_and(tmp20, tmp49);
          carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(60), sequence_e1_82_adv));
          r800_ffff_tmp36 = simd_and(sequence_e1_82_adv, byte_range_9e_9f);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp36);
          sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
          sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
          r800_ffff_tmp37 = simd_and(basis_bits.bit_4, r800_ffff_tmp16);
          byte_range_90_99 = simd_andc(tmp20, r800_ffff_tmp37);
          carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(61), sequence_e1_8e_adv));
          r800_ffff_tmp38 = simd_and(sequence_e1_8e_adv, byte_range_90_99);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp38);
          byte_a5 = simd_and(tmp74, tmp35);
          sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
          sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
          carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(62), sequence_e1_a5_adv));
          r800_ffff_tmp39 = simd_and(sequence_e1_a5_adv, byte_80);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp39);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          r800_ffff_tmp40 = simd_or(basis_bits.bit_2, tmp50);
          byte_range_9e_bf = simd_and(byte_range_80_bf, r800_ffff_tmp40);
          carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(63), sequence_e1_a7_adv));
          r800_ffff_tmp41 = simd_and(sequence_e1_a7_adv, byte_range_9e_bf);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp41);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          r800_ffff_tmp42 = simd_or(simd_and(basis_bits.bit_4, tmp126), simd_andc(tmp80, basis_bits.bit_4));
          r800_ffff_tmp43 = simd_and(tmp74, r800_ffff_tmp42);
          r800_ffff_tmp44 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp26), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          r800_ffff_tmp45 = simd_and(tmp78, r800_ffff_tmp44);
          cc_range_1b61_1b74_3 = simd_or(r800_ffff_tmp43, r800_ffff_tmp45);
          carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(64), sequence_e1_ad_adv));
          r800_ffff_tmp46 = simd_and(sequence_e1_ad_adv, cc_range_1b61_1b74_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp46);
          byte_e2 = simd_and(byte_range_e0_ef, tmp70);
          carryQ.cq[65] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(65), r800_ffff_tmp47));
          sequence_e2_84 = simd_and(r800_ffff_tmp47, byte_84);
          carryQ.cq[66] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(66), byte_e2_adv));
          sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
          r800_ffff_tmp48 = simd_not(tmp17);
          r800_ffff_tmp49 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp48), simd_andc(tmp17, basis_bits.bit_5));
          r800_ffff_tmp50 = simd_and(tmp43, r800_ffff_tmp49);
          r800_ffff_tmp51 = simd_or(byte_range_80_81, r800_ffff_tmp50);
          r800_ffff_tmp52 = simd_andc(tmp52, basis_bits.bit_6);
          r800_ffff_tmp53 = simd_and(tmp21, r800_ffff_tmp52);
          r800_ffff_tmp54 = simd_or(r800_ffff_tmp51, r800_ffff_tmp53);
          r800_ffff_tmp55 = simd_or(r800_ffff_tmp54, byte_94);
          r800_ffff_tmp56 = simd_and(tmp28, basis_bits.bit_6);
          r800_ffff_tmp57 = simd_and(tmp20, r800_ffff_tmp56);
          r800_ffff_tmp58 = simd_or(r800_ffff_tmp55, r800_ffff_tmp57);
          r800_ffff_tmp59 = simd_or(basis_bits.bit_3, tmp4);
          r800_ffff_tmp60 = simd_not(r800_ffff_tmp59);
          r800_ffff_tmp61 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp60), simd_andc(tmp50, basis_bits.bit_2));
          r800_ffff_tmp62 = simd_and(byte_range_80_bf, r800_ffff_tmp61);
          r800_ffff_tmp63 = simd_or(r800_ffff_tmp58, r800_ffff_tmp62);
          r800_ffff_tmp64 = simd_or(r800_ffff_tmp63, byte_a5);
          r800_ffff_tmp65 = simd_or(r800_ffff_tmp64, byte_a7);
          r800_ffff_tmp66 = simd_and(tmp74, tmp55);
          r800_ffff_tmp67 = simd_or(r800_ffff_tmp65, r800_ffff_tmp66);
          r800_ffff_tmp68 = simd_and(tmp74, tmp123);
          r800_ffff_tmp69 = simd_or(r800_ffff_tmp67, r800_ffff_tmp68);
          r800_ffff_tmp70 = simd_and(tmp52, basis_bits.bit_6);
          r800_ffff_tmp71 = simd_and(tmp78, r800_ffff_tmp70);
          cc_range_2100_213a_3 = simd_or(r800_ffff_tmp69, r800_ffff_tmp71);
          carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(67), sequence_e2_84_adv));
          r800_ffff_tmp72 = simd_and(sequence_e2_84_adv, cc_range_2100_213a_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp72);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          r800_ffff_tmp73 = simd_andc(tmp10, basis_bits.bit_6);
          r800_ffff_tmp74 = simd_or(tmp159, r800_ffff_tmp73);
          r800_ffff_tmp75 = simd_or(r800_ffff_tmp74, tmp62);
          cc_range_214a_214f_3 = simd_and(tmp21, r800_ffff_tmp75);
          carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(68), sequence_e2_85_adv));
          r800_ffff_tmp76 = simd_and(sequence_e2_85_adv, cc_range_214a_214f_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp76);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          r800_ffff_tmp77 = simd_not(r800_ffff_tmp16);
          r800_ffff_tmp78 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp77), simd_andc(tmp36, basis_bits.bit_4));
          r800_ffff_tmp79 = simd_or(r800_ffff_tmp78, tmp10);
          r800_ffff_tmp80 = simd_and(tmp20, r800_ffff_tmp79);
          r800_ffff_tmp81 = simd_andc(tmp74, tmp4);
          r800_ffff_tmp82 = simd_not(basis_bits.bit_7);
          r800_ffff_tmp83 = simd_or(simd_and(basis_bits.bit_6, r800_ffff_tmp82), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          r800_ffff_tmp84 = simd_and(r800_ffff_tmp81, r800_ffff_tmp83);
          r800_ffff_tmp85 = simd_or(r800_ffff_tmp80, r800_ffff_tmp84);
          r800_ffff_tmp86 = simd_andc(tmp28, basis_bits.bit_6);
          r800_ffff_tmp87 = simd_and(tmp74, r800_ffff_tmp86);
          r800_ffff_tmp88 = simd_or(r800_ffff_tmp85, r800_ffff_tmp87);
          r800_ffff_tmp89 = simd_not(tmp23);
          r800_ffff_tmp90 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp89), simd_andc(tmp30, basis_bits.bit_4));
          r800_ffff_tmp91 = simd_and(tmp74, r800_ffff_tmp90);
          r800_ffff_tmp92 = simd_or(r800_ffff_tmp88, r800_ffff_tmp91);
          r800_ffff_tmp93 = simd_and(tmp98, tmp88);
          cc_range_2195_21af_3 = simd_or(r800_ffff_tmp92, r800_ffff_tmp93);
          carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(69), sequence_e2_86_adv));
          r800_ffff_tmp94 = simd_and(sequence_e2_86_adv, cc_range_2195_21af_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp94);
          sequence_e2_87 = simd_and(byte_e2_adv, byte_87);
          sequence_e2_87 = simd_and(byte_e2_adv, byte_87);
          r800_ffff_tmp95 = simd_and(basis_bits.bit_4, tmp23);
          r800_ffff_tmp96 = simd_andc(tmp21, r800_ffff_tmp95);
          r800_ffff_tmp97 = simd_or(r800_ffff_tmp96, tmp109);
          r800_ffff_tmp98 = simd_or(r800_ffff_tmp97, byte_93);
          r800_ffff_tmp99 = simd_not(tmp71);
          r800_ffff_tmp100 = simd_and(basis_bits.bit_3, tmp37);
          r800_ffff_tmp101 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp99), simd_andc(r800_ffff_tmp100, basis_bits.bit_2));
          r800_ffff_tmp102 = simd_and(byte_range_80_bf, r800_ffff_tmp101);
          cc_range_21c0_21d5_3 = simd_or(r800_ffff_tmp98, r800_ffff_tmp102);
          carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e2_87, carryQ.get_carry_in(70), sequence_e2_87_adv));
          r800_ffff_tmp103 = simd_and(sequence_e2_87_adv, cc_range_21c0_21d5_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp103);
          sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
          sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
          r800_ffff_tmp104 = simd_and(tmp48, tmp64);
          r800_ffff_tmp105 = simd_or(tmp43, r800_ffff_tmp104);
          r800_ffff_tmp106 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp4), simd_andc(r800_ffff_tmp16, basis_bits.bit_4));
          r800_ffff_tmp107 = simd_and(tmp74, r800_ffff_tmp106);
          r800_ffff_tmp108 = simd_or(r800_ffff_tmp105, r800_ffff_tmp107);
          r800_ffff_tmp109 = simd_or(basis_bits.bit_3, tmp95);
          r800_ffff_tmp110 = simd_and(tmp98, r800_ffff_tmp109);
          cc_range_2300_232b_3 = simd_or(r800_ffff_tmp108, r800_ffff_tmp110);
          carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e2_8c, carryQ.get_carry_in(71), sequence_e2_8c_adv));
          r800_ffff_tmp111 = simd_and(sequence_e2_8c_adv, cc_range_2300_232b_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp111);
          sequence_e2_8d = simd_and(byte_e2_adv, byte_8d);
          sequence_e2_8d = simd_and(byte_e2_adv, byte_8d);
          r800_ffff_tmp112 = simd_and(basis_bits.bit_3, tmp10);
          r800_ffff_tmp113 = simd_and(basis_bits.bit_2, r800_ffff_tmp112);
          r800_ffff_tmp114 = simd_andc(byte_range_80_bf, r800_ffff_tmp113);
          r800_ffff_tmp115 = simd_and(tmp78, tmp10);
          r800_ffff_tmp116 = simd_and(r800_ffff_tmp115, tmp5);
          cc_range_2340_237d_3 = simd_or(r800_ffff_tmp114, r800_ffff_tmp116);
          carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e2_8d, carryQ.get_carry_in(72), sequence_e2_8d_adv));
          r800_ffff_tmp117 = simd_and(sequence_e2_8d_adv, cc_range_2340_237d_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp117);
          sequence_e2_8e = simd_and(byte_e2_adv, byte_8e);
          sequence_e2_8e = simd_and(byte_e2_adv, byte_8e);
          r800_ffff_tmp118 = simd_and(tmp78, tmp4);
          cc_range_2380_23b4_3 = simd_or(byte_range_80_9a, r800_ffff_tmp118);
          carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e2_8e, carryQ.get_carry_in(73), sequence_e2_8e_adv));
          r800_ffff_tmp119 = simd_and(sequence_e2_8e_adv, cc_range_2380_23b4_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp119);
          sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
          sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
          r800_ffff_tmp120 = simd_andc(tmp48, r800_ffff_tmp112);
          r800_ffff_tmp121 = simd_not(tmp4);
          r800_ffff_tmp122 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp121), simd_andc(tmp56, basis_bits.bit_3));
          r800_ffff_tmp123 = simd_and(tmp98, r800_ffff_tmp122);
          cc_range_23c0_23e2_3 = simd_or(r800_ffff_tmp120, r800_ffff_tmp123);
          carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e2_8f, carryQ.get_carry_in(74), sequence_e2_8f_adv));
          r800_ffff_tmp124 = simd_and(sequence_e2_8f_adv, cc_range_23c0_23e2_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp124);
          sequence_e2_90 = simd_and(byte_e2_adv, byte_90);
          sequence_e2_90 = simd_and(byte_e2_adv, byte_90);
          carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e2_90, carryQ.get_carry_in(75), sequence_e2_90_adv));
          r800_ffff_tmp125 = simd_and(sequence_e2_90_adv, byte_range_80_a6);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp125);
          sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
          sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
          byte_range_80_8a = simd_andc(tmp21, tmp95);
          carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e2_91, carryQ.get_carry_in(76), sequence_e2_91_adv));
          r800_ffff_tmp126 = simd_and(sequence_e2_91_adv, byte_range_80_8a);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp126);
          sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
          sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
          r800_ffff_tmp127 = simd_or(basis_bits.bit_2, r800_ffff_tmp112);
          byte_range_9c_bf = simd_and(byte_range_80_bf, r800_ffff_tmp127);
          carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e2_92, carryQ.get_carry_in(77), sequence_e2_92_adv));
          r800_ffff_tmp128 = simd_and(sequence_e2_92_adv, byte_range_9c_bf);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp128);
          sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
          sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
          r800_ffff_tmp129 = simd_or(basis_bits.bit_3, r800_ffff_tmp37);
          r800_ffff_tmp130 = simd_and(basis_bits.bit_2, r800_ffff_tmp129);
          byte_range_80_a9 = simd_andc(byte_range_80_bf, r800_ffff_tmp130);
          carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(78), sequence_e2_93_adv));
          r800_ffff_tmp131 = simd_and(sequence_e2_93_adv, byte_range_80_a9);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp131);
          byte_range_94_95 = simd_and(tmp20, r800_ffff_tmp86);
          byte_e2_byte_range_94_95 = simd_and(byte_e2_adv, byte_range_94_95);
          carryQ.cq[79] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_94_95, carryQ.get_carry_in(79), r800_ffff_tmp132));
          byte_e2_byte_range_94_95_sfx = simd_and(r800_ffff_tmp132, byte_range_80_bf);
          struct_So.cc = simd_or(struct_So.cc, byte_e2_byte_range_94_95_sfx);
          byte_96 = simd_and(tmp20, tmp42);
          sequence_e2_96 = simd_and(byte_e2_adv, byte_96);
          r800_ffff_tmp133 = simd_and(basis_bits.bit_2, tmp60);
          byte_range_80_b6 = simd_andc(byte_range_80_bf, r800_ffff_tmp133);
          carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_e2_96, carryQ.get_carry_in(80), r800_ffff_tmp134));
          sequence_e2_96_byte_range_80_b6 = simd_and(r800_ffff_tmp134, byte_range_80_b6);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_96_byte_range_80_b6);
          sequence_e2_97 = simd_and(byte_e2_adv, byte_97);
          carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_e2_97, carryQ.get_carry_in(81), r800_ffff_tmp135));
          sequence_e2_97_80 = simd_and(r800_ffff_tmp135, byte_80);
          sequence_e2_98 = simd_and(byte_e2_adv, byte_98);
          carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e2_98, carryQ.get_carry_in(82), r800_ffff_tmp136));
          sequence_e2_98_byte_range_80_bf = simd_and(r800_ffff_tmp136, byte_range_80_bf);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_98_byte_range_80_bf);
          sequence_e2_99 = simd_and(byte_e2_adv, byte_99);
          r800_ffff_tmp137 = simd_and(basis_bits.bit_2, tmp88);
          byte_range_80_ae = simd_andc(byte_range_80_bf, r800_ffff_tmp137);
          carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e2_99, carryQ.get_carry_in(83), r800_ffff_tmp138));
          sequence_e2_99_byte_range_80_ae = simd_and(r800_ffff_tmp138, byte_range_80_ae);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_99_byte_range_80_ae);
          sequence_e2_9a = simd_and(byte_e2_adv, byte_9a);
          carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e2_9a, carryQ.get_carry_in(84), r800_ffff_tmp139));
          sequence_e2_9a_byte_range_80_bf = simd_and(r800_ffff_tmp139, byte_range_80_bf);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_9a_byte_range_80_bf);
          sequence_e2_9c = simd_and(byte_e2_adv, byte_9c);
          r800_ffff_tmp140 = simd_or(basis_bits.bit_2, tmp111);
          byte_range_81_bf = simd_and(byte_range_80_bf, r800_ffff_tmp140);
          carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e2_9c, carryQ.get_carry_in(85), r800_ffff_tmp141));
          sequence_e2_9c_byte_range_81_bf = simd_and(r800_ffff_tmp141, byte_range_81_bf);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_9c_byte_range_81_bf);
          sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
          r800_ffff_tmp142 = simd_and(basis_bits.bit_2, tmp150);
          byte_range_80_a7 = simd_andc(byte_range_80_bf, r800_ffff_tmp142);
          carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_e2_9d, carryQ.get_carry_in(86), r800_ffff_tmp143));
          sequence_e2_9d_byte_range_80_a7 = simd_and(r800_ffff_tmp143, byte_range_80_a7);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_9d_byte_range_80_a7);
          byte_9e = simd_and(tmp20, tmp123);
          sequence_e2_9e = simd_and(byte_e2_adv, byte_9e);
          r800_ffff_tmp144 = simd_or(basis_bits.bit_2, tmp71);
          byte_range_94_bf = simd_and(byte_range_80_bf, r800_ffff_tmp144);
          carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_e2_9e, carryQ.get_carry_in(87), r800_ffff_tmp145));
          sequence_e2_9e_byte_range_94_bf = simd_and(r800_ffff_tmp145, byte_range_94_bf);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_9e_byte_range_94_bf);
          byte_a0 = simd_andc(tmp74, tmp6);
          sequence_e2_a0 = simd_and(byte_e2_adv, byte_a0);
          carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e2_a0, carryQ.get_carry_in(88), r800_ffff_tmp146));
          sequence_e2_a0_byte_range_80_bf = simd_and(r800_ffff_tmp146, byte_range_80_bf);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_a0_byte_range_80_bf);
          byte_ac = simd_and(tmp74, tmp58);
          sequence_e2_ac = simd_and(byte_e2_adv, byte_ac);
          byte_range_80_af = simd_andc(byte_range_80_bf, tmp2);
          carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_e2_ac, carryQ.get_carry_in(89), r800_ffff_tmp147));
          sequence_e2_ac_byte_range_80_af = simd_and(r800_ffff_tmp147, byte_range_80_af);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_ac_byte_range_80_af);
          sequence_e2_ad = simd_and(byte_e2_adv, byte_ad);
          r800_ffff_tmp148 = simd_and(tmp21, tmp28);
          byte_range_85_86 = simd_and(r800_ffff_tmp148, r800_ffff_tmp83);
          carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_e2_ad, carryQ.get_carry_in(90), r800_ffff_tmp149));
          sequence_e2_ad_byte_range_85_86 = simd_and(r800_ffff_tmp149, byte_range_85_86);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_ad_byte_range_85_86);
          byte_b3 = simd_and(tmp78, tmp22);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          r800_ffff_tmp150 = simd_or(simd_and(basis_bits.bit_4, tmp126), simd_andc(tmp36, basis_bits.bit_4));
          byte_range_a5_aa = simd_and(tmp74, r800_ffff_tmp150);
          carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(91), r800_ffff_tmp151));
          sequence_e2_b3_byte_range_a5_aa = simd_and(r800_ffff_tmp151, byte_range_a5_aa);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_b3_byte_range_a5_aa);
          sequence_e2_ba = simd_and(byte_e2_adv, byte_ba);
          r800_ffff_tmp152 = simd_and(basis_bits.bit_3, r800_ffff_tmp37);
          byte_range_80_99 = simd_andc(tmp48, r800_ffff_tmp152);
          carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_e2_ba, carryQ.get_carry_in(92), r800_ffff_tmp153));
          sequence_e2_ba_byte_range_80_99 = simd_and(r800_ffff_tmp153, byte_range_80_99);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_ba_byte_range_80_99);
          byte_bb = simd_and(tmp78, tmp161);
          sequence_e2_bb = simd_and(byte_e2_adv, byte_bb);
          carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e2_bb, carryQ.get_carry_in(93), r800_ffff_tmp154));
          sequence_e2_bb_byte_range_80_b3 = simd_and(r800_ffff_tmp154, byte_range_80_b3);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_bb_byte_range_80_b3);
          sequence_e2_bc = simd_and(byte_e2_adv, byte_bc);
          carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_e2_bc, carryQ.get_carry_in(94), r800_ffff_tmp155));
          sequence_e2_bc_byte_range_80_bf = simd_and(r800_ffff_tmp155, byte_range_80_bf);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_bc_byte_range_80_bf);
          sequence_e2_bf = simd_and(byte_e2_adv, byte_bf);
          byte_range_80_95 = simd_andc(tmp48, tmp25);
          carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_e2_bf, carryQ.get_carry_in(95), r800_ffff_tmp156));
          sequence_e2_bf_byte_range_80_95 = simd_and(r800_ffff_tmp156, byte_range_80_95);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_bf_byte_range_80_95);
          byte_e3 = simd_and(byte_range_e0_ef, tmp22);
          carryQ.cq[96] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(96), r800_ffff_tmp157));
          sequence_e3_80 = simd_and(r800_ffff_tmp157, byte_80);
          carryQ.cq[97] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(97), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          r800_ffff_tmp158 = simd_andc(basis_bits.bit_6, tmp4);
          r800_ffff_tmp159 = simd_and(tmp20, r800_ffff_tmp158);
          r800_ffff_tmp160 = simd_or(byte_84, r800_ffff_tmp159);
          r800_ffff_tmp161 = simd_or(r800_ffff_tmp160, byte_a0);
          r800_ffff_tmp162 = simd_and(tmp78, r800_ffff_tmp56);
          r800_ffff_tmp163 = simd_or(r800_ffff_tmp161, r800_ffff_tmp162);
          cc_range_3004_303e_3 = simd_or(r800_ffff_tmp163, byte_range_be_bf);
          carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(98), sequence_e3_80_adv));
          r800_ffff_tmp164 = simd_and(sequence_e3_80_adv, cc_range_3004_303e_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp164);
          sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
          sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
          r800_ffff_tmp165 = simd_andc(tmp56, tmp24);
          cc_range_3190_3196_3 = simd_andc(tmp20, r800_ffff_tmp165);
          carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(99), sequence_e3_86_adv));
          r800_ffff_tmp166 = simd_and(sequence_e3_86_adv, cc_range_3190_3196_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp166);
          sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
          sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
          r800_ffff_tmp167 = simd_and(basis_bits.bit_2, r800_ffff_tmp59);
          byte_range_80_a3 = simd_andc(byte_range_80_bf, r800_ffff_tmp167);
          carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(100), sequence_e3_87_adv));
          r800_ffff_tmp168 = simd_and(sequence_e3_87_adv, byte_range_80_a3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp168);
          sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
          sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
          r800_ffff_tmp169 = simd_andc(tmp48, tmp133);
          r800_ffff_tmp170 = simd_and(tmp98, r800_ffff_tmp129);
          cc_range_3200_322a_3 = simd_or(r800_ffff_tmp169, r800_ffff_tmp170);
          carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_e3_88, carryQ.get_carry_in(101), sequence_e3_88_adv));
          r800_ffff_tmp171 = simd_and(sequence_e3_88_adv, cc_range_3200_322a_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp171);
          sequence_e3_89 = simd_and(byte_e3_adv, byte_89);
          sequence_e3_89 = simd_and(byte_e3_adv, byte_89);
          r800_ffff_tmp172 = simd_or(tmp43, byte_90);
          cc_range_3240_3260_3 = simd_or(r800_ffff_tmp172, tmp98);
          carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_e3_89, carryQ.get_carry_in(102), sequence_e3_89_adv));
          r800_ffff_tmp173 = simd_and(sequence_e3_89_adv, cc_range_3240_3260_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp173);
          byte_8a = simd_and(tmp21, tmp159);
          sequence_e3_8a = simd_and(byte_e3_adv, byte_8a);
          sequence_e3_8a = simd_and(byte_e3_adv, byte_8a);
          r800_ffff_tmp174 = simd_not(tmp130);
          r800_ffff_tmp175 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp174), simd_andc(r800_ffff_tmp129, basis_bits.bit_2));
          byte_range_8a_b0 = simd_and(byte_range_80_bf, r800_ffff_tmp175);
          carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_e3_8a, carryQ.get_carry_in(103), sequence_e3_8a_adv));
          r800_ffff_tmp176 = simd_and(sequence_e3_8a_adv, byte_range_8a_b0);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp176);
          byte_8b = simd_and(tmp21, tmp161);
          sequence_e3_8b = simd_and(byte_e3_adv, byte_8b);
          sequence_e3_8b = simd_and(byte_e3_adv, byte_8b);
          carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_e3_8b, carryQ.get_carry_in(104), sequence_e3_8b_adv));
          r800_ffff_tmp177 = simd_and(sequence_e3_8b_adv, byte_range_80_be);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp177);
          byte_range_8c_8f = simd_and(tmp21, tmp10);
          byte_e3_byte_range_8c_8f = simd_and(byte_e3_adv, byte_range_8c_8f);
          carryQ.cq[105] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_8c_8f, carryQ.get_carry_in(105), r800_ffff_tmp178));
          byte_e3_byte_range_8c_8f_sfx = simd_and(r800_ffff_tmp178, byte_range_80_bf);
          struct_So.cc = simd_or(struct_So.cc, byte_e3_byte_range_8c_8f_sfx);
          byte_e4 = simd_and(byte_range_e0_ef, tmp29);
          byte_b7 = simd_and(tmp78, tmp47);
          carryQ.cq[106] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(106), r800_ffff_tmp179));
          sequence_e4_b7 = simd_and(r800_ffff_tmp179, byte_b7);
          carryQ.cq[107] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(107), byte_e4_adv));
          sequence_e4_b7 = simd_and(byte_e4_adv, byte_b7);
          carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_e4_b7, carryQ.get_carry_in(108), sequence_e4_b7_adv));
          r800_ffff_tmp180 = simd_and(sequence_e4_b7_adv, byte_range_80_bf);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp180);
          byte_ea = simd_and(byte_range_e0_ef, tmp159);
          carryQ.cq[109] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(109), r800_ffff_tmp181));
          sequence_ea_92 = simd_and(r800_ffff_tmp181, byte_92);
          carryQ.cq[110] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(110), byte_ea_adv));
          sequence_ea_92 = simd_and(byte_ea_adv, byte_92);
          byte_range_90_bf = simd_and(byte_range_80_bf, tmp14);
          carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(111), sequence_ea_92_adv));
          r800_ffff_tmp182 = simd_and(sequence_ea_92_adv, byte_range_90_bf);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp182);
          sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
          sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
          byte_range_80_86 = simd_andc(tmp43, tmp30);
          carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(112), sequence_ea_93_adv));
          r800_ffff_tmp183 = simd_and(sequence_ea_93_adv, byte_range_80_86);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp183);
          sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
          sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
          r800_ffff_tmp184 = simd_and(tmp74, tmp52);
          r800_ffff_tmp185 = simd_or(r800_ffff_tmp184, r800_ffff_tmp162);
          cc_range_a828_a839_3 = simd_or(r800_ffff_tmp185, byte_b9);
          carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(113), sequence_ea_a0_adv));
          r800_ffff_tmp186 = simd_and(sequence_ea_a0_adv, cc_range_a828_a839_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp186);
          byte_a9 = simd_and(tmp74, tmp55);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          r800_ffff_tmp187 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp77), simd_andc(tmp30, basis_bits.bit_4));
          byte_range_b7_b9 = simd_and(tmp78, r800_ffff_tmp187);
          carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(114), sequence_ea_a9_adv));
          r800_ffff_tmp188 = simd_and(sequence_ea_a9_adv, byte_range_b7_b9);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp188);
          byte_ef = simd_and(byte_range_e0_ef, tmp62);
          carryQ.cq[115] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(115), r800_ffff_tmp189));
          sequence_ef_b7 = simd_and(r800_ffff_tmp189, byte_b7);
          carryQ.cq[116] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(116), byte_ef_adv));
          sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
          byte_bd = simd_and(tmp78, tmp12);
          carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(117), sequence_ef_b7_adv));
          r800_ffff_tmp190 = simd_and(sequence_ef_b7_adv, byte_bd);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp190);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          r800_ffff_tmp191 = simd_or(tmp28, tmp52);
          r800_ffff_tmp192 = simd_andc(r800_ffff_tmp191, tmp5);
          r800_ffff_tmp193 = simd_and(tmp74, r800_ffff_tmp192);
          r800_ffff_tmp194 = simd_and(tmp74, tmp10);
          r800_ffff_tmp195 = simd_and(r800_ffff_tmp194, r800_ffff_tmp83);
          r800_ffff_tmp196 = simd_or(r800_ffff_tmp193, r800_ffff_tmp195);
          r800_ffff_tmp197 = simd_and(tmp78, r800_ffff_tmp73);
          cc_range_ffe4_fffc_3 = simd_or(r800_ffff_tmp196, r800_ffff_tmp197);
          carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(118), sequence_ef_bf_adv));
          r800_ffff_tmp198 = simd_and(sequence_ef_bf_adv, cc_range_ffe4_fffc_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp198);
        }
        else {
          carryQ.CarryDequeueEnqueue(48, 71);
        }
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(119), tmp166));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp166, byte_range_80_bf);
        carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(120), tmp167));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp167, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(121, 5))) {
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          sequence_f0_90_84 = simd_and(tmp166, byte_84);
          carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(121), sequence_f0_90_adv));
          sequence_f0_90_84 = simd_and(sequence_f0_90_adv, byte_84);
          byte_range_b7_bf = simd_and(tmp78, tmp31);
          carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(122), sequence_f0_90_84_adv));
          r10000_10fff_tmp1 = simd_and(sequence_f0_90_84_adv, byte_range_b7_bf);
          struct_So.cc = simd_or(struct_So.cc, r10000_10fff_tmp1);
          sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
          sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
          byte_range_b9_bf = simd_and(tmp144, tmp80);
          carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_f0_90_85, carryQ.get_carry_in(123), sequence_f0_90_85_adv));
          r10000_10fff_tmp2 = simd_and(sequence_f0_90_85_adv, byte_range_b9_bf);
          struct_So.cc = simd_or(struct_So.cc, r10000_10fff_tmp2);
          sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
          sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
          r10000_10fff_tmp3 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          r10000_10fff_tmp4 = simd_and(basis_bits.bit_4, r10000_10fff_tmp3);
          r10000_10fff_tmp5 = simd_andc(tmp21, r10000_10fff_tmp4);
          r10000_10fff_tmp6 = simd_andc(tmp20, tmp10);
          cc_range_10180_10190_4 = simd_or(r10000_10fff_tmp5, r10000_10fff_tmp6);
          carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_f0_90_86, carryQ.get_carry_in(124), sequence_f0_90_86_adv));
          r10000_10fff_tmp7 = simd_and(sequence_f0_90_86_adv, cc_range_10180_10190_4);
          struct_So.cc = simd_or(struct_So.cc, r10000_10fff_tmp7);
          sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
          sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
          r10000_10fff_tmp8 = simd_not(tmp120);
          r10000_10fff_tmp9 = simd_or(simd_and(basis_bits.bit_2, r10000_10fff_tmp8), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
          byte_range_90_bc = simd_and(byte_range_80_bf, r10000_10fff_tmp9);
          carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(125), sequence_f0_90_87_adv));
          r10000_10fff_tmp10 = simd_and(sequence_f0_90_87_adv, byte_range_90_bc);
          struct_So.cc = simd_or(struct_So.cc, r10000_10fff_tmp10);
        }
        else {
          carryQ.CarryDequeueEnqueue(121, 5);
        }
        carryQ.CarryQ_Adjust(126);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_So & struct_So, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f0, tmp7, tmp8, tmp9, tmp10;
		BitBlock tmp11, tmp12, byte_9d, tmp13, sequence_f0_9d, byte_f0_adv, tmp14;
		BitBlock tmp15, tmp16, tmp17, byte_range_80_82, tmp18;
		BitBlock sequence_f0_9d_byte_range_80_82, byte_range_80_bf, tmp19;
		BitBlock sequence_f0_9d_byte_range_80_82_sfx, tmp20, tmp21, tmp22, byte_83;
		BitBlock sequence_f0_9d_adv, sequence_f0_9d_83, tmp23, tmp24, tmp25, tmp26;
		BitBlock byte_range_80_b5, tmp27, sequence_f0_9d_83_byte_range_80_b5, tmp28;
		BitBlock tmp29, byte_84, sequence_f0_9d_84, tmp30, tmp31, tmp32, tmp33;
		BitBlock byte_range_80_a6, tmp34, sequence_f0_9d_84_byte_range_80_a6, tmp35;
		BitBlock byte_85, sequence_f0_9d_85, tmp36, tmp37, tmp38, tmp39;
		BitBlock byte_range_80_a4, tmp40, sequence_f0_9d_85_byte_range_80_a4, tmp41;
		BitBlock tmp42, byte_86, sequence_f0_9d_86, tmp43, tmp44, tmp45;
		BitBlock byte_range_83_84, tmp46, sequence_f0_9d_86_byte_range_83_84, tmp47;
		BitBlock byte_87, sequence_f0_9d_87, tmp48, tmp49, tmp50, byte_range_80_9d;
		BitBlock tmp51, sequence_f0_9d_87_byte_range_80_9d, tmp52, tmp53, byte_88;
		BitBlock sequence_f0_9d_88, tmp54, sequence_f0_9d_88_byte_range_80_bf, tmp55;
		BitBlock byte_89, sequence_f0_9d_89, tmp56, byte_range_80_81, tmp57;
		BitBlock sequence_f0_9d_89_byte_range_80_81, tmp58, byte_8c, sequence_f0_9d_8c;
		BitBlock tmp59, sequence_f0_9d_8c_byte_range_80_bf, byte_8d, sequence_f0_9d_8d;
		BitBlock tmp60, byte_range_80_96, tmp61, sequence_f0_9d_8d_byte_range_80_96;
		BitBlock tmp62, byte_9f, sequence_f0_9f, byte_80, tmp63, sequence_f0_9f_80;
		BitBlock sequence_f0_9f_adv, tmp64, tmp65, tmp66, cc_range_1f000_1f030_4;
		BitBlock sequence_f0_9f_80_adv, tmp67, tmp68, byte_81, sequence_f0_9f_81;
		BitBlock sequence_f0_9f_81_adv, tmp69, tmp70, byte_82, sequence_f0_9f_82;
		BitBlock tmp71, tmp72, tmp73, tmp74, tmp75, tmp76, tmp77, tmp78, tmp79, tmp80;
		BitBlock tmp81, tmp82, cc_range_1f080_1f0b1_4, sequence_f0_9f_82_adv, tmp83;
		BitBlock sequence_f0_9f_83, tmp84, tmp85, tmp86, cc_range_1f0c1_1f0d1_4;
		BitBlock sequence_f0_9f_83_adv, tmp87, sequence_f0_9f_84, tmp88, tmp89, tmp90;
		BitBlock tmp91, cc_range_1f110_1f130_4, sequence_f0_9f_84_adv, tmp92;
		BitBlock sequence_f0_9f_85, cc_range_1f140_1f170_4, sequence_f0_9f_85_adv;
		BitBlock tmp93, sequence_f0_9f_86, tmp94, tmp95, tmp96, byte_range_80_9a;
		BitBlock sequence_f0_9f_86_adv, tmp97, sequence_f0_9f_87, tmp98, tmp99;
		BitBlock byte_range_a6_bf, sequence_f0_9f_87_adv, tmp100, sequence_f0_9f_88;
		BitBlock tmp101, tmp102, tmp103, tmp104, tmp105, cc_range_1f200_1f210_4;
		BitBlock sequence_f0_9f_88_adv, tmp106, sequence_f0_9f_89, tmp107, tmp108;
		BitBlock tmp109, cc_range_1f240_1f250_4, sequence_f0_9f_89_adv, tmp110;
		BitBlock sequence_f0_9f_8c, tmp111, tmp112, tmp113, tmp114, tmp115, tmp116;
		BitBlock tmp117, cc_range_1f300_1f337_4, sequence_f0_9f_8c_adv, tmp118;
		BitBlock sequence_f0_9f_8d, tmp119, tmp120, tmp121, byte_range_80_bc;
		BitBlock sequence_f0_9f_8d_adv, tmp122, tmp123, byte_8e, sequence_f0_9f_8e;
		BitBlock cc_range_1f380_1f3a0_4, sequence_f0_9f_8e_adv, tmp124, byte_8f;
		BitBlock sequence_f0_9f_8f, tmp125, tmp126, tmp127, tmp128, tmp129, tmp130;
		BitBlock tmp131, cc_range_1f3c0_1f3e0_4, sequence_f0_9f_8f_adv, tmp132;
		BitBlock byte_90, sequence_f0_9f_90, tmp133, tmp134, byte_range_80_be;
		BitBlock sequence_f0_9f_90_adv, tmp135, byte_91, sequence_f0_9f_91, tmp136;
		BitBlock tmp137, tmp138, cc_range_1f440_1f442_4, sequence_f0_9f_91_adv, tmp139;
		BitBlock byte_92, sequence_f0_9f_92, sequence_f0_9f_92_adv, tmp140, byte_93;
		BitBlock sequence_f0_9f_93, tmp141, tmp142, tmp143, tmp144, tmp145, tmp146;
		BitBlock cc_range_1f4c0_1f4f9_4, sequence_f0_9f_93_adv, tmp147, byte_94;
		BitBlock sequence_f0_9f_94, tmp148, byte_range_80_bd, sequence_f0_9f_94_adv;
		BitBlock tmp149, byte_95, sequence_f0_9f_95, tmp150, tmp151, tmp152, tmp153;
		BitBlock cc_range_1f540_1f550_4, sequence_f0_9f_95_adv, tmp154, byte_97;
		BitBlock sequence_f0_9f_97, byte_range_bb_bf, sequence_f0_9f_97_adv, tmp155;
		BitBlock byte_98, sequence_f0_9f_98, sequence_f0_9f_98_adv, tmp156, byte_99;
		BitBlock sequence_f0_9f_99, tmp157, cc_range_1f640_1f645_4;
		BitBlock sequence_f0_9f_99_adv, tmp158, tmp159, byte_9a, sequence_f0_9f_9a;
		BitBlock sequence_f0_9f_9a_adv, tmp160, tmp161, byte_9b, sequence_f0_9f_9b;
		BitBlock byte_range_80_85, sequence_f0_9f_9b_adv, tmp162, byte_9c;
		BitBlock sequence_f0_9f_9c, sequence_f0_9f_9c_adv, tmp163, sequence_f0_9f_9d;
		BitBlock tmp164, byte_range_80_b3, sequence_f0_9f_9d_adv, tmp165;
		BitBlock byte_range_c0_df, r80_7ff_tmp1, byte_c2, r80_7ff_tmp2, r80_7ff_tmp3;
		BitBlock r80_7ff_tmp4, r80_7ff_tmp5, cc_range_a6_b0_2, byte_c2_adv;
		BitBlock r80_7ff_tmp6, r80_7ff_tmp7, byte_d2, byte_d2_adv, r80_7ff_tmp8;
		BitBlock byte_d8, byte_range_8e_8f, byte_d8_adv, r80_7ff_tmp9, byte_db;
		BitBlock r80_7ff_tmp10, r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13;
		BitBlock r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16, cc_range_6de_6fd_2;
		BitBlock byte_db_adv, r80_7ff_tmp17, byte_df, byte_b6, byte_df_adv;
		BitBlock r80_7ff_tmp18, byte_range_e0_ef, byte_e0, byte_a7, r800_ffff_tmp1;
		BitBlock sequence_e0_a7, byte_e0_adv, byte_ba, sequence_e0_a7_adv;
		BitBlock r800_ffff_tmp2, byte_ad, sequence_e0_ad, byte_b0, sequence_e0_ad_adv;
		BitBlock r800_ffff_tmp3, byte_af, sequence_e0_af, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, cc_range_bf3_bfa_3;
		BitBlock sequence_e0_af_adv, r800_ffff_tmp7, byte_b1, sequence_e0_b1, byte_bf;
		BitBlock sequence_e0_b1_adv, r800_ffff_tmp8, byte_b5, sequence_e0_b5, byte_b9;
		BitBlock sequence_e0_b5_adv, r800_ffff_tmp9, byte_bc, sequence_e0_bc;
		BitBlock r800_ffff_tmp10, r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13;
		BitBlock r800_ffff_tmp14, r800_ffff_tmp15, r800_ffff_tmp16, r800_ffff_tmp17;
		BitBlock r800_ffff_tmp18, r800_ffff_tmp19, r800_ffff_tmp20, r800_ffff_tmp21;
		BitBlock r800_ffff_tmp22, r800_ffff_tmp23, cc_range_f01_f38_3;
		BitBlock sequence_e0_bc_adv, r800_ffff_tmp24, byte_be, sequence_e0_be;
		BitBlock byte_range_be_bf, sequence_e0_be_adv, r800_ffff_tmp25, sequence_e0_bf;
		BitBlock r800_ffff_tmp26, r800_ffff_tmp27, r800_ffff_tmp28, r800_ffff_tmp29;
		BitBlock r800_ffff_tmp30, r800_ffff_tmp31, r800_ffff_tmp32, r800_ffff_tmp33;
		BitBlock cc_range_fc0_fd5_3, sequence_e0_bf_adv, r800_ffff_tmp34, byte_e1;
		BitBlock r800_ffff_tmp35, sequence_e1_82, byte_e1_adv, byte_range_9e_9f;
		BitBlock sequence_e1_82_adv, r800_ffff_tmp36, sequence_e1_8e, r800_ffff_tmp37;
		BitBlock byte_range_90_99, sequence_e1_8e_adv, r800_ffff_tmp38, byte_a5;
		BitBlock sequence_e1_a5, sequence_e1_a5_adv, r800_ffff_tmp39, sequence_e1_a7;
		BitBlock r800_ffff_tmp40, byte_range_9e_bf, sequence_e1_a7_adv;
		BitBlock r800_ffff_tmp41, sequence_e1_ad, r800_ffff_tmp42, r800_ffff_tmp43;
		BitBlock r800_ffff_tmp44, r800_ffff_tmp45, cc_range_1b61_1b74_3;
		BitBlock sequence_e1_ad_adv, r800_ffff_tmp46, byte_e2, r800_ffff_tmp47;
		BitBlock sequence_e2_84, byte_e2_adv, r800_ffff_tmp48, r800_ffff_tmp49;
		BitBlock r800_ffff_tmp50, r800_ffff_tmp51, r800_ffff_tmp52, r800_ffff_tmp53;
		BitBlock r800_ffff_tmp54, r800_ffff_tmp55, r800_ffff_tmp56, r800_ffff_tmp57;
		BitBlock r800_ffff_tmp58, r800_ffff_tmp59, r800_ffff_tmp60, r800_ffff_tmp61;
		BitBlock r800_ffff_tmp62, r800_ffff_tmp63, r800_ffff_tmp64, r800_ffff_tmp65;
		BitBlock r800_ffff_tmp66, r800_ffff_tmp67, r800_ffff_tmp68, r800_ffff_tmp69;
		BitBlock r800_ffff_tmp70, r800_ffff_tmp71, cc_range_2100_213a_3;
		BitBlock sequence_e2_84_adv, r800_ffff_tmp72, sequence_e2_85, r800_ffff_tmp73;
		BitBlock r800_ffff_tmp74, r800_ffff_tmp75, cc_range_214a_214f_3;
		BitBlock sequence_e2_85_adv, r800_ffff_tmp76, sequence_e2_86, r800_ffff_tmp77;
		BitBlock r800_ffff_tmp78, r800_ffff_tmp79, r800_ffff_tmp80, r800_ffff_tmp81;
		BitBlock r800_ffff_tmp82, r800_ffff_tmp83, r800_ffff_tmp84, r800_ffff_tmp85;
		BitBlock r800_ffff_tmp86, r800_ffff_tmp87, r800_ffff_tmp88, r800_ffff_tmp89;
		BitBlock r800_ffff_tmp90, r800_ffff_tmp91, r800_ffff_tmp92, r800_ffff_tmp93;
		BitBlock cc_range_2195_21af_3, sequence_e2_86_adv, r800_ffff_tmp94;
		BitBlock sequence_e2_87, r800_ffff_tmp95, r800_ffff_tmp96, r800_ffff_tmp97;
		BitBlock r800_ffff_tmp98, r800_ffff_tmp99, r800_ffff_tmp100, r800_ffff_tmp101;
		BitBlock r800_ffff_tmp102, cc_range_21c0_21d5_3, sequence_e2_87_adv;
		BitBlock r800_ffff_tmp103, sequence_e2_8c, r800_ffff_tmp104, r800_ffff_tmp105;
		BitBlock r800_ffff_tmp106, r800_ffff_tmp107, r800_ffff_tmp108;
		BitBlock r800_ffff_tmp109, r800_ffff_tmp110, cc_range_2300_232b_3;
		BitBlock sequence_e2_8c_adv, r800_ffff_tmp111, sequence_e2_8d;
		BitBlock r800_ffff_tmp112, r800_ffff_tmp113, r800_ffff_tmp114;
		BitBlock r800_ffff_tmp115, r800_ffff_tmp116, cc_range_2340_237d_3;
		BitBlock sequence_e2_8d_adv, r800_ffff_tmp117, sequence_e2_8e;
		BitBlock r800_ffff_tmp118, cc_range_2380_23b4_3, sequence_e2_8e_adv;
		BitBlock r800_ffff_tmp119, sequence_e2_8f, r800_ffff_tmp120, r800_ffff_tmp121;
		BitBlock r800_ffff_tmp122, r800_ffff_tmp123, cc_range_23c0_23e2_3;
		BitBlock sequence_e2_8f_adv, r800_ffff_tmp124, sequence_e2_90;
		BitBlock sequence_e2_90_adv, r800_ffff_tmp125, sequence_e2_91;
		BitBlock byte_range_80_8a, sequence_e2_91_adv, r800_ffff_tmp126;
		BitBlock sequence_e2_92, r800_ffff_tmp127, byte_range_9c_bf;
		BitBlock sequence_e2_92_adv, r800_ffff_tmp128, sequence_e2_93;
		BitBlock r800_ffff_tmp129, r800_ffff_tmp130, byte_range_80_a9;
		BitBlock sequence_e2_93_adv, r800_ffff_tmp131, byte_range_94_95;
		BitBlock byte_e2_byte_range_94_95, r800_ffff_tmp132;
		BitBlock byte_e2_byte_range_94_95_sfx, byte_96, sequence_e2_96;
		BitBlock r800_ffff_tmp133, byte_range_80_b6, r800_ffff_tmp134;
		BitBlock sequence_e2_96_byte_range_80_b6, sequence_e2_97, r800_ffff_tmp135;
		BitBlock sequence_e2_97_80, sequence_e2_98, r800_ffff_tmp136;
		BitBlock sequence_e2_98_byte_range_80_bf, sequence_e2_99, r800_ffff_tmp137;
		BitBlock byte_range_80_ae, r800_ffff_tmp138, sequence_e2_99_byte_range_80_ae;
		BitBlock sequence_e2_9a, r800_ffff_tmp139, sequence_e2_9a_byte_range_80_bf;
		BitBlock sequence_e2_9c, r800_ffff_tmp140, byte_range_81_bf, r800_ffff_tmp141;
		BitBlock sequence_e2_9c_byte_range_81_bf, sequence_e2_9d, r800_ffff_tmp142;
		BitBlock byte_range_80_a7, r800_ffff_tmp143, sequence_e2_9d_byte_range_80_a7;
		BitBlock byte_9e, sequence_e2_9e, r800_ffff_tmp144, byte_range_94_bf;
		BitBlock r800_ffff_tmp145, sequence_e2_9e_byte_range_94_bf, byte_a0;
		BitBlock sequence_e2_a0, r800_ffff_tmp146, sequence_e2_a0_byte_range_80_bf;
		BitBlock byte_ac, sequence_e2_ac, byte_range_80_af, r800_ffff_tmp147;
		BitBlock sequence_e2_ac_byte_range_80_af, sequence_e2_ad, r800_ffff_tmp148;
		BitBlock byte_range_85_86, r800_ffff_tmp149, sequence_e2_ad_byte_range_85_86;
		BitBlock byte_b3, sequence_e2_b3, r800_ffff_tmp150, byte_range_a5_aa;
		BitBlock r800_ffff_tmp151, sequence_e2_b3_byte_range_a5_aa, sequence_e2_ba;
		BitBlock r800_ffff_tmp152, byte_range_80_99, r800_ffff_tmp153;
		BitBlock sequence_e2_ba_byte_range_80_99, byte_bb, sequence_e2_bb;
		BitBlock r800_ffff_tmp154, sequence_e2_bb_byte_range_80_b3, sequence_e2_bc;
		BitBlock r800_ffff_tmp155, sequence_e2_bc_byte_range_80_bf, sequence_e2_bf;
		BitBlock byte_range_80_95, r800_ffff_tmp156, sequence_e2_bf_byte_range_80_95;
		BitBlock byte_e3, r800_ffff_tmp157, sequence_e3_80, byte_e3_adv;
		BitBlock r800_ffff_tmp158, r800_ffff_tmp159, r800_ffff_tmp160;
		BitBlock r800_ffff_tmp161, r800_ffff_tmp162, r800_ffff_tmp163;
		BitBlock cc_range_3004_303e_3, sequence_e3_80_adv, r800_ffff_tmp164;
		BitBlock sequence_e3_86, r800_ffff_tmp165, cc_range_3190_3196_3;
		BitBlock sequence_e3_86_adv, r800_ffff_tmp166, sequence_e3_87;
		BitBlock r800_ffff_tmp167, byte_range_80_a3, sequence_e3_87_adv;
		BitBlock r800_ffff_tmp168, sequence_e3_88, r800_ffff_tmp169, r800_ffff_tmp170;
		BitBlock cc_range_3200_322a_3, sequence_e3_88_adv, r800_ffff_tmp171;
		BitBlock sequence_e3_89, r800_ffff_tmp172, cc_range_3240_3260_3;
		BitBlock sequence_e3_89_adv, r800_ffff_tmp173, byte_8a, sequence_e3_8a;
		BitBlock r800_ffff_tmp174, r800_ffff_tmp175, byte_range_8a_b0;
		BitBlock sequence_e3_8a_adv, r800_ffff_tmp176, byte_8b, sequence_e3_8b;
		BitBlock sequence_e3_8b_adv, r800_ffff_tmp177, byte_range_8c_8f;
		BitBlock byte_e3_byte_range_8c_8f, r800_ffff_tmp178;
		BitBlock byte_e3_byte_range_8c_8f_sfx, byte_e4, byte_b7, r800_ffff_tmp179;
		BitBlock sequence_e4_b7, byte_e4_adv, sequence_e4_b7_adv, r800_ffff_tmp180;
		BitBlock byte_ea, r800_ffff_tmp181, sequence_ea_92, byte_ea_adv;
		BitBlock byte_range_90_bf, sequence_ea_92_adv, r800_ffff_tmp182;
		BitBlock sequence_ea_93, byte_range_80_86, sequence_ea_93_adv;
		BitBlock r800_ffff_tmp183, sequence_ea_a0, r800_ffff_tmp184, r800_ffff_tmp185;
		BitBlock cc_range_a828_a839_3, sequence_ea_a0_adv, r800_ffff_tmp186, byte_a9;
		BitBlock sequence_ea_a9, r800_ffff_tmp187, byte_range_b7_b9;
		BitBlock sequence_ea_a9_adv, r800_ffff_tmp188, byte_ef, r800_ffff_tmp189;
		BitBlock sequence_ef_b7, byte_ef_adv, byte_bd, sequence_ef_b7_adv;
		BitBlock r800_ffff_tmp190, sequence_ef_bf, r800_ffff_tmp191, r800_ffff_tmp192;
		BitBlock r800_ffff_tmp193, r800_ffff_tmp194, r800_ffff_tmp195;
		BitBlock r800_ffff_tmp196, r800_ffff_tmp197, cc_range_ffe4_fffc_3;
		BitBlock sequence_ef_bf_adv, r800_ffff_tmp198, sequence_f0_90, tmp166;
		BitBlock sequence_f0_90_byte_range_80_bf, tmp167;
		BitBlock sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock sequence_f0_90_84, sequence_f0_90_adv, byte_range_b7_bf;
		BitBlock sequence_f0_90_84_adv, r10000_10fff_tmp1, sequence_f0_90_85;
		BitBlock byte_range_b9_bf, sequence_f0_90_85_adv, r10000_10fff_tmp2;
		BitBlock sequence_f0_90_86, r10000_10fff_tmp3, r10000_10fff_tmp4;
		BitBlock r10000_10fff_tmp5, r10000_10fff_tmp6, cc_range_10180_10190_4;
		BitBlock sequence_f0_90_86_adv, r10000_10fff_tmp7, sequence_f0_90_87;
		BitBlock r10000_10fff_tmp8, r10000_10fff_tmp9, byte_range_90_bc;
		BitBlock sequence_f0_90_87_adv, r10000_10fff_tmp10;




        struct_So.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_f0 = simd_andc(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp11 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp12 = simd_and(tmp10, tmp11);
        byte_9d = simd_and(tmp9, tmp12);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp13));
        sequence_f0_9d = simd_and(tmp13, byte_9d);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        tmp14 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp15 = simd_andc(tmp7, tmp14);
        tmp16 = simd_andc(tmp15, tmp4);
        tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        byte_range_80_82 = simd_andc(tmp16, tmp17);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(2), tmp18));
        sequence_f0_9d_byte_range_80_82 = simd_and(tmp18, byte_range_80_82);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_byte_range_80_82, carryQ.get_carry_in(3), tmp19));
        sequence_f0_9d_byte_range_80_82_sfx = simd_and(tmp19, byte_range_80_bf);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_byte_range_80_82_sfx);
        tmp20 = simd_and(byte_range_80_bf, tmp8);
        tmp21 = simd_andc(byte_range_80_bf, tmp14);
        tmp22 = simd_andc(tmp17, tmp4);
        byte_83 = simd_and(tmp21, tmp22);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(4), sequence_f0_9d_adv));
        sequence_f0_9d_83 = simd_and(sequence_f0_9d_adv, byte_83);
        tmp23 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
        tmp24 = simd_or(basis_bits.bit_4, tmp23);
        tmp25 = simd_and(basis_bits.bit_3, tmp24);
        tmp26 = simd_and(basis_bits.bit_2, tmp25);
        byte_range_80_b5 = simd_andc(byte_range_80_bf, tmp26);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_83, carryQ.get_carry_in(5), tmp27));
        sequence_f0_9d_83_byte_range_80_b5 = simd_and(tmp27, byte_range_80_b5);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_83_byte_range_80_b5);
        tmp28 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp29 = simd_andc(tmp28, tmp5);
        byte_84 = simd_and(tmp21, tmp29);
        sequence_f0_9d_84 = simd_and(sequence_f0_9d_adv, byte_84);
        tmp30 = simd_and(basis_bits.bit_5, tmp17);
        tmp31 = simd_or(basis_bits.bit_4, tmp30);
        tmp32 = simd_or(basis_bits.bit_3, tmp31);
        tmp33 = simd_and(basis_bits.bit_2, tmp32);
        byte_range_80_a6 = simd_andc(byte_range_80_bf, tmp33);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_84, carryQ.get_carry_in(6), tmp34));
        sequence_f0_9d_84_byte_range_80_a6 = simd_and(tmp34, byte_range_80_a6);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_84_byte_range_80_a6);
        tmp35 = simd_and(tmp28, tmp11);
        byte_85 = simd_and(tmp21, tmp35);
        sequence_f0_9d_85 = simd_and(sequence_f0_9d_adv, byte_85);
        tmp36 = simd_and(basis_bits.bit_5, tmp5);
        tmp37 = simd_or(basis_bits.bit_4, tmp36);
        tmp38 = simd_or(basis_bits.bit_3, tmp37);
        tmp39 = simd_and(basis_bits.bit_2, tmp38);
        byte_range_80_a4 = simd_andc(byte_range_80_bf, tmp39);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(7), tmp40));
        sequence_f0_9d_85_byte_range_80_a4 = simd_and(tmp40, byte_range_80_a4);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_85_byte_range_80_a4);
        tmp41 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp42 = simd_and(tmp28, tmp41);
        byte_86 = simd_and(tmp21, tmp42);
        sequence_f0_9d_86 = simd_and(sequence_f0_9d_adv, byte_86);
        tmp43 = simd_andc(tmp21, basis_bits.bit_4);
        tmp44 = simd_not(tmp5);
        tmp45 = simd_or(simd_and(basis_bits.bit_5, tmp44), simd_andc(tmp17, basis_bits.bit_5));
        byte_range_83_84 = simd_and(tmp43, tmp45);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_86, carryQ.get_carry_in(8), tmp46));
        sequence_f0_9d_86_byte_range_83_84 = simd_and(tmp46, byte_range_83_84);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_86_byte_range_83_84);
        tmp47 = simd_and(tmp28, tmp17);
        byte_87 = simd_and(tmp21, tmp47);
        sequence_f0_9d_87 = simd_and(sequence_f0_9d_adv, byte_87);
        tmp48 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
        tmp49 = simd_and(tmp10, basis_bits.bit_6);
        tmp50 = simd_and(basis_bits.bit_3, tmp49);
        byte_range_80_9d = simd_andc(tmp48, tmp50);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_87, carryQ.get_carry_in(9), tmp51));
        sequence_f0_9d_87_byte_range_80_9d = simd_and(tmp51, byte_range_80_9d);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_87_byte_range_80_9d);
        tmp52 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp53 = simd_andc(tmp52, tmp5);
        byte_88 = simd_and(tmp21, tmp53);
        sequence_f0_9d_88 = simd_and(sequence_f0_9d_adv, byte_88);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_88, carryQ.get_carry_in(10), tmp54));
        sequence_f0_9d_88_byte_range_80_bf = simd_and(tmp54, byte_range_80_bf);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_88_byte_range_80_bf);
        tmp55 = simd_and(tmp52, tmp11);
        byte_89 = simd_and(tmp21, tmp55);
        sequence_f0_9d_89 = simd_and(sequence_f0_9d_adv, byte_89);
        tmp56 = simd_or(tmp4, basis_bits.bit_6);
        byte_range_80_81 = simd_andc(tmp21, tmp56);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_89, carryQ.get_carry_in(11), tmp57));
        sequence_f0_9d_89_byte_range_80_81 = simd_and(tmp57, byte_range_80_81);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_89_byte_range_80_81);
        tmp58 = simd_andc(tmp10, tmp5);
        byte_8c = simd_and(tmp21, tmp58);
        sequence_f0_9d_8c = simd_and(sequence_f0_9d_adv, byte_8c);
        carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8c, carryQ.get_carry_in(12), tmp59));
        sequence_f0_9d_8c_byte_range_80_bf = simd_and(tmp59, byte_range_80_bf);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_8c_byte_range_80_bf);
        byte_8d = simd_and(tmp21, tmp12);
        sequence_f0_9d_8d = simd_and(sequence_f0_9d_adv, byte_8d);
        tmp60 = simd_and(basis_bits.bit_3, tmp31);
        byte_range_80_96 = simd_andc(tmp48, tmp60);
        carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_8d, carryQ.get_carry_in(13), tmp61));
        sequence_f0_9d_8d_byte_range_80_96 = simd_and(tmp61, byte_range_80_96);
        struct_So.cc = simd_or(struct_So.cc, sequence_f0_9d_8d_byte_range_80_96);
        tmp62 = simd_and(tmp10, tmp17);
        byte_9f = simd_and(tmp20, tmp62);
        sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
        sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
        byte_80 = simd_andc(tmp21, tmp6);
        carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(14), tmp63));
        sequence_f0_9f_80 = simd_and(tmp63, byte_80);
        carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(15), sequence_f0_9f_adv));
        sequence_f0_9f_80 = simd_and(sequence_f0_9f_adv, byte_80);
        tmp64 = simd_or(basis_bits.bit_3, tmp10);
        tmp65 = simd_and(basis_bits.bit_2, tmp64);
        tmp66 = simd_andc(tmp65, tmp2);
        cc_range_1f000_1f030_4 = simd_andc(byte_range_80_bf, tmp66);
        carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_80, carryQ.get_carry_in(16), sequence_f0_9f_80_adv));
        tmp67 = simd_and(sequence_f0_9f_80_adv, cc_range_1f000_1f030_4);
        struct_So.cc = simd_or(struct_So.cc, tmp67);
        tmp68 = simd_andc(tmp11, tmp4);
        byte_81 = simd_and(tmp21, tmp68);
        sequence_f0_9f_81 = simd_and(sequence_f0_9f_adv, byte_81);
        sequence_f0_9f_81 = simd_and(sequence_f0_9f_adv, byte_81);
        carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_81, carryQ.get_carry_in(17), sequence_f0_9f_81_adv));
        tmp69 = simd_and(sequence_f0_9f_81_adv, byte_range_80_bf);
        struct_So.cc = simd_or(struct_So.cc, tmp69);
        tmp70 = simd_andc(tmp41, tmp4);
        byte_82 = simd_and(tmp21, tmp70);
        sequence_f0_9f_82 = simd_and(sequence_f0_9f_adv, byte_82);
        sequence_f0_9f_82 = simd_and(sequence_f0_9f_adv, byte_82);
        tmp71 = simd_and(basis_bits.bit_3, tmp4);
        tmp72 = simd_andc(tmp48, tmp71);
        tmp73 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp74 = simd_and(byte_range_80_bf, tmp73);
        tmp75 = simd_and(basis_bits.bit_4, tmp30);
        tmp76 = simd_andc(tmp74, tmp75);
        tmp77 = simd_or(tmp72, tmp76);
        tmp78 = simd_and(byte_range_80_bf, tmp2);
        tmp79 = simd_not(tmp30);
        tmp80 = simd_or(basis_bits.bit_5, tmp5);
        tmp81 = simd_or(simd_and(basis_bits.bit_4, tmp79), simd_andc(tmp80, basis_bits.bit_4));
        tmp82 = simd_and(tmp78, tmp81);
        cc_range_1f080_1f0b1_4 = simd_or(tmp77, tmp82);
        carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_82, carryQ.get_carry_in(18), sequence_f0_9f_82_adv));
        tmp83 = simd_and(sequence_f0_9f_82_adv, cc_range_1f080_1f0b1_4);
        struct_So.cc = simd_or(struct_So.cc, tmp83);
        sequence_f0_9f_83 = simd_and(sequence_f0_9f_adv, byte_83);
        sequence_f0_9f_83 = simd_and(sequence_f0_9f_adv, byte_83);
        tmp84 = simd_or(basis_bits.bit_4, tmp80);
        tmp85 = simd_andc(tmp14, tmp8);
        tmp86 = simd_andc(byte_range_80_bf, tmp85);
        cc_range_1f0c1_1f0d1_4 = simd_and(tmp84, tmp86);
        carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_83, carryQ.get_carry_in(19), sequence_f0_9f_83_adv));
        tmp87 = simd_and(sequence_f0_9f_83_adv, cc_range_1f0c1_1f0d1_4);
        struct_So.cc = simd_or(struct_So.cc, tmp87);
        sequence_f0_9f_84 = simd_and(sequence_f0_9f_adv, byte_84);
        sequence_f0_9f_84 = simd_and(sequence_f0_9f_adv, byte_84);
        tmp88 = simd_or(basis_bits.bit_3, tmp62);
        tmp89 = simd_not(tmp88);
        tmp90 = simd_or(simd_and(basis_bits.bit_2, tmp89), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
        tmp91 = simd_or(tmp90, tmp2);
        cc_range_1f110_1f130_4 = simd_and(byte_range_80_bf, tmp91);
        carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_84, carryQ.get_carry_in(20), sequence_f0_9f_84_adv));
        tmp92 = simd_and(sequence_f0_9f_84_adv, cc_range_1f110_1f130_4);
        struct_So.cc = simd_or(struct_So.cc, tmp92);
        sequence_f0_9f_85 = simd_and(sequence_f0_9f_adv, byte_85);
        sequence_f0_9f_85 = simd_and(sequence_f0_9f_adv, byte_85);
        cc_range_1f140_1f170_4 = simd_andc(byte_range_80_bf, tmp66);
        carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_85, carryQ.get_carry_in(21), sequence_f0_9f_85_adv));
        tmp93 = simd_and(sequence_f0_9f_85_adv, cc_range_1f140_1f170_4);
        struct_So.cc = simd_or(struct_So.cc, tmp93);
        sequence_f0_9f_86 = simd_and(sequence_f0_9f_adv, byte_86);
        sequence_f0_9f_86 = simd_and(sequence_f0_9f_adv, byte_86);
        tmp94 = simd_or(basis_bits.bit_5, tmp17);
        tmp95 = simd_and(basis_bits.bit_4, tmp94);
        tmp96 = simd_and(basis_bits.bit_3, tmp95);
        byte_range_80_9a = simd_andc(tmp48, tmp96);
        carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_86, carryQ.get_carry_in(22), sequence_f0_9f_86_adv));
        tmp97 = simd_and(sequence_f0_9f_86_adv, byte_range_80_9a);
        struct_So.cc = simd_or(struct_So.cc, tmp97);
        sequence_f0_9f_87 = simd_and(sequence_f0_9f_adv, byte_87);
        sequence_f0_9f_87 = simd_and(sequence_f0_9f_adv, byte_87);
        tmp98 = simd_and(byte_range_80_bf, basis_bits.bit_2);
        tmp99 = simd_or(basis_bits.bit_3, tmp24);
        byte_range_a6_bf = simd_and(tmp98, tmp99);
        carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_87, carryQ.get_carry_in(23), sequence_f0_9f_87_adv));
        tmp100 = simd_and(sequence_f0_9f_87_adv, byte_range_a6_bf);
        struct_So.cc = simd_or(struct_So.cc, tmp100);
        sequence_f0_9f_88 = simd_and(sequence_f0_9f_adv, byte_88);
        sequence_f0_9f_88 = simd_and(sequence_f0_9f_adv, byte_88);
        tmp101 = simd_andc(tmp21, tmp4);
        tmp102 = simd_andc(tmp101, tmp17);
        tmp103 = simd_not(tmp96);
        tmp104 = simd_or(simd_and(basis_bits.bit_2, tmp103), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
        tmp105 = simd_and(byte_range_80_bf, tmp104);
        cc_range_1f200_1f210_4 = simd_or(tmp102, tmp105);
        carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_88, carryQ.get_carry_in(24), sequence_f0_9f_88_adv));
        tmp106 = simd_and(sequence_f0_9f_88_adv, cc_range_1f200_1f210_4);
        struct_So.cc = simd_or(struct_So.cc, tmp106);
        sequence_f0_9f_89 = simd_and(sequence_f0_9f_adv, byte_89);
        sequence_f0_9f_89 = simd_and(sequence_f0_9f_adv, byte_89);
        tmp107 = simd_and(basis_bits.bit_4, tmp80);
        tmp108 = simd_andc(tmp21, tmp107);
        tmp109 = simd_andc(tmp20, tmp56);
        cc_range_1f240_1f250_4 = simd_or(tmp108, tmp109);
        carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_89, carryQ.get_carry_in(25), sequence_f0_9f_89_adv));
        tmp110 = simd_and(sequence_f0_9f_89_adv, cc_range_1f240_1f250_4);
        struct_So.cc = simd_or(struct_So.cc, tmp110);
        sequence_f0_9f_8c = simd_and(sequence_f0_9f_adv, byte_8c);
        sequence_f0_9f_8c = simd_and(sequence_f0_9f_adv, byte_8c);
        tmp111 = simd_or(basis_bits.bit_3, tmp6);
        tmp112 = simd_and(basis_bits.bit_2, tmp111);
        tmp113 = simd_andc(byte_range_80_bf, tmp112);
        tmp114 = simd_andc(tmp78, basis_bits.bit_4);
        tmp115 = simd_andc(tmp114, tmp23);
        tmp116 = simd_or(tmp113, tmp115);
        tmp117 = simd_and(tmp78, tmp31);
        cc_range_1f300_1f337_4 = simd_or(tmp116, tmp117);
        carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8c, carryQ.get_carry_in(26), sequence_f0_9f_8c_adv));
        tmp118 = simd_and(sequence_f0_9f_8c_adv, cc_range_1f300_1f337_4);
        struct_So.cc = simd_or(struct_So.cc, tmp118);
        sequence_f0_9f_8d = simd_and(sequence_f0_9f_adv, byte_8d);
        sequence_f0_9f_8d = simd_and(sequence_f0_9f_adv, byte_8d);
        tmp119 = simd_and(tmp10, tmp5);
        tmp120 = simd_and(basis_bits.bit_3, tmp119);
        tmp121 = simd_and(basis_bits.bit_2, tmp120);
        byte_range_80_bc = simd_andc(byte_range_80_bf, tmp121);
        carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8d, carryQ.get_carry_in(27), sequence_f0_9f_8d_adv));
        tmp122 = simd_and(sequence_f0_9f_8d_adv, byte_range_80_bc);
        struct_So.cc = simd_or(struct_So.cc, tmp122);
        tmp123 = simd_and(tmp10, tmp41);
        byte_8e = simd_and(tmp21, tmp123);
        sequence_f0_9f_8e = simd_and(sequence_f0_9f_adv, byte_8e);
        sequence_f0_9f_8e = simd_and(sequence_f0_9f_adv, byte_8e);
        cc_range_1f380_1f3a0_4 = simd_or(tmp72, tmp98);
        carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8e, carryQ.get_carry_in(28), sequence_f0_9f_8e_adv));
        tmp124 = simd_and(sequence_f0_9f_8e_adv, cc_range_1f380_1f3a0_4);
        struct_So.cc = simd_or(struct_So.cc, tmp124);
        byte_8f = simd_and(tmp21, tmp62);
        sequence_f0_9f_8f = simd_and(sequence_f0_9f_adv, byte_8f);
        sequence_f0_9f_8f = simd_and(sequence_f0_9f_adv, byte_8f);
        tmp125 = simd_andc(tmp43, tmp36);
        tmp126 = simd_not(tmp94);
        tmp127 = simd_or(simd_and(basis_bits.bit_4, tmp126), simd_andc(tmp23, basis_bits.bit_4));
        tmp128 = simd_and(tmp21, tmp127);
        tmp129 = simd_or(tmp125, tmp128);
        tmp130 = simd_and(basis_bits.bit_3, tmp6);
        tmp131 = simd_andc(tmp98, tmp130);
        cc_range_1f3c0_1f3e0_4 = simd_or(tmp129, tmp131);
        carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_8f, carryQ.get_carry_in(29), sequence_f0_9f_8f_adv));
        tmp132 = simd_and(sequence_f0_9f_8f_adv, cc_range_1f3c0_1f3e0_4);
        struct_So.cc = simd_or(struct_So.cc, tmp132);
        byte_90 = simd_andc(tmp20, tmp6);
        sequence_f0_9f_90 = simd_and(sequence_f0_9f_adv, byte_90);
        sequence_f0_9f_90 = simd_and(sequence_f0_9f_adv, byte_90);
        tmp133 = simd_and(basis_bits.bit_3, tmp62);
        tmp134 = simd_and(basis_bits.bit_2, tmp133);
        byte_range_80_be = simd_andc(byte_range_80_bf, tmp134);
        carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_90, carryQ.get_carry_in(30), sequence_f0_9f_90_adv));
        tmp135 = simd_and(sequence_f0_9f_90_adv, byte_range_80_be);
        struct_So.cc = simd_or(struct_So.cc, tmp135);
        byte_91 = simd_and(tmp20, tmp68);
        sequence_f0_9f_91 = simd_and(sequence_f0_9f_adv, byte_91);
        sequence_f0_9f_91 = simd_and(sequence_f0_9f_adv, byte_91);
        tmp136 = simd_or(basis_bits.bit_3, tmp56);
        tmp137 = simd_or(basis_bits.bit_2, tmp136);
        tmp138 = simd_and(byte_range_80_bf, tmp137);
        cc_range_1f440_1f442_4 = simd_or(byte_80, tmp138);
        carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_91, carryQ.get_carry_in(31), sequence_f0_9f_91_adv));
        tmp139 = simd_and(sequence_f0_9f_91_adv, cc_range_1f440_1f442_4);
        struct_So.cc = simd_or(struct_So.cc, tmp139);
        byte_92 = simd_and(tmp20, tmp70);
        sequence_f0_9f_92 = simd_and(sequence_f0_9f_adv, byte_92);
        sequence_f0_9f_92 = simd_and(sequence_f0_9f_adv, byte_92);
        carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_92, carryQ.get_carry_in(32), sequence_f0_9f_92_adv));
        tmp140 = simd_and(sequence_f0_9f_92_adv, byte_range_80_bf);
        struct_So.cc = simd_or(struct_So.cc, tmp140);
        byte_93 = simd_and(tmp20, tmp22);
        sequence_f0_9f_93 = simd_and(sequence_f0_9f_adv, byte_93);
        sequence_f0_9f_93 = simd_and(sequence_f0_9f_adv, byte_93);
        tmp141 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
        tmp142 = simd_and(basis_bits.bit_2, tmp141);
        tmp143 = simd_andc(byte_range_80_bf, tmp142);
        tmp144 = simd_and(tmp78, basis_bits.bit_4);
        tmp145 = simd_or(simd_and(basis_bits.bit_5, tmp44), simd_andc(tmp5, basis_bits.bit_5));
        tmp146 = simd_and(tmp144, tmp145);
        cc_range_1f4c0_1f4f9_4 = simd_or(tmp143, tmp146);
        carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_93, carryQ.get_carry_in(33), sequence_f0_9f_93_adv));
        tmp147 = simd_and(sequence_f0_9f_93_adv, cc_range_1f4c0_1f4f9_4);
        struct_So.cc = simd_or(struct_So.cc, tmp147);
        byte_94 = simd_and(tmp20, tmp29);
        sequence_f0_9f_94 = simd_and(sequence_f0_9f_adv, byte_94);
        sequence_f0_9f_94 = simd_and(sequence_f0_9f_adv, byte_94);
        tmp148 = simd_and(basis_bits.bit_2, tmp50);
        byte_range_80_bd = simd_andc(byte_range_80_bf, tmp148);
        carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_94, carryQ.get_carry_in(34), sequence_f0_9f_94_adv));
        tmp149 = simd_and(sequence_f0_9f_94_adv, byte_range_80_bd);
        struct_So.cc = simd_or(struct_So.cc, tmp149);
        byte_95 = simd_and(tmp20, tmp35);
        sequence_f0_9f_95 = simd_and(sequence_f0_9f_adv, byte_95);
        sequence_f0_9f_95 = simd_and(sequence_f0_9f_adv, byte_95);
        tmp150 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
        tmp151 = simd_not(tmp150);
        tmp152 = simd_or(simd_and(basis_bits.bit_2, tmp151), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
        tmp153 = simd_and(byte_range_80_bf, tmp152);
        cc_range_1f540_1f550_4 = simd_or(tmp101, tmp153);
        carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_95, carryQ.get_carry_in(35), sequence_f0_9f_95_adv));
        tmp154 = simd_and(sequence_f0_9f_95_adv, cc_range_1f540_1f550_4);
        struct_So.cc = simd_or(struct_So.cc, tmp154);
        byte_97 = simd_and(tmp20, tmp47);
        sequence_f0_9f_97 = simd_and(sequence_f0_9f_adv, byte_97);
        sequence_f0_9f_97 = simd_and(sequence_f0_9f_adv, byte_97);
        byte_range_bb_bf = simd_and(tmp144, tmp94);
        carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_97, carryQ.get_carry_in(36), sequence_f0_9f_97_adv));
        tmp155 = simd_and(sequence_f0_9f_97_adv, byte_range_bb_bf);
        struct_So.cc = simd_or(struct_So.cc, tmp155);
        byte_98 = simd_and(tmp20, tmp53);
        sequence_f0_9f_98 = simd_and(sequence_f0_9f_adv, byte_98);
        sequence_f0_9f_98 = simd_and(sequence_f0_9f_adv, byte_98);
        carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_98, carryQ.get_carry_in(37), sequence_f0_9f_98_adv));
        tmp156 = simd_and(sequence_f0_9f_98_adv, byte_range_80_bf);
        struct_So.cc = simd_or(struct_So.cc, tmp156);
        byte_99 = simd_and(tmp20, tmp55);
        sequence_f0_9f_99 = simd_and(sequence_f0_9f_adv, byte_99);
        sequence_f0_9f_99 = simd_and(sequence_f0_9f_adv, byte_99);
        tmp157 = simd_andc(tmp6, tmp37);
        cc_range_1f640_1f645_4 = simd_andc(tmp21, tmp157);
        carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_99, carryQ.get_carry_in(38), sequence_f0_9f_99_adv));
        tmp158 = simd_and(sequence_f0_9f_99_adv, cc_range_1f640_1f645_4);
        struct_So.cc = simd_or(struct_So.cc, tmp158);
        tmp159 = simd_and(tmp52, tmp41);
        byte_9a = simd_and(tmp20, tmp159);
        sequence_f0_9f_9a = simd_and(sequence_f0_9f_adv, byte_9a);
        sequence_f0_9f_9a = simd_and(sequence_f0_9f_adv, byte_9a);
        carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9a, carryQ.get_carry_in(39), sequence_f0_9f_9a_adv));
        tmp160 = simd_and(sequence_f0_9f_9a_adv, byte_range_80_bf);
        struct_So.cc = simd_or(struct_So.cc, tmp160);
        tmp161 = simd_and(tmp52, tmp17);
        byte_9b = simd_and(tmp20, tmp161);
        sequence_f0_9f_9b = simd_and(sequence_f0_9f_adv, byte_9b);
        sequence_f0_9f_9b = simd_and(sequence_f0_9f_adv, byte_9b);
        byte_range_80_85 = simd_andc(tmp43, tmp23);
        carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9b, carryQ.get_carry_in(40), sequence_f0_9f_9b_adv));
        tmp162 = simd_and(sequence_f0_9f_9b_adv, byte_range_80_85);
        struct_So.cc = simd_or(struct_So.cc, tmp162);
        byte_9c = simd_and(tmp20, tmp58);
        sequence_f0_9f_9c = simd_and(sequence_f0_9f_adv, byte_9c);
        sequence_f0_9f_9c = simd_and(sequence_f0_9f_adv, byte_9c);
        carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9c, carryQ.get_carry_in(41), sequence_f0_9f_9c_adv));
        tmp163 = simd_and(sequence_f0_9f_9c_adv, byte_range_80_bf);
        struct_So.cc = simd_or(struct_So.cc, tmp163);
        sequence_f0_9f_9d = simd_and(sequence_f0_9f_adv, byte_9d);
        sequence_f0_9f_9d = simd_and(sequence_f0_9f_adv, byte_9d);
        tmp164 = simd_and(basis_bits.bit_2, tmp71);
        byte_range_80_b3 = simd_andc(byte_range_80_bf, tmp164);
        carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_9d, carryQ.get_carry_in(42), sequence_f0_9f_9d_adv));
        tmp165 = simd_and(sequence_f0_9f_9d_adv, byte_range_80_b3);
        struct_So.cc = simd_or(struct_So.cc, tmp165);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(43, 5))) {
          r80_7ff_tmp1 = simd_andc(tmp1, tmp14);
          byte_c2 = simd_and(r80_7ff_tmp1, tmp70);
          r80_7ff_tmp2 = simd_or(tmp42, tmp55);
          r80_7ff_tmp3 = simd_or(r80_7ff_tmp2, tmp123);
          r80_7ff_tmp4 = simd_and(tmp74, r80_7ff_tmp3);
          r80_7ff_tmp5 = simd_andc(tmp78, tmp6);
          cc_range_a6_b0_2 = simd_or(r80_7ff_tmp4, r80_7ff_tmp5);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(43), byte_c2_adv));
          r80_7ff_tmp6 = simd_and(byte_c2_adv, cc_range_a6_b0_2);
          struct_So.cc = simd_or(struct_So.cc, r80_7ff_tmp6);
          r80_7ff_tmp7 = simd_and(tmp1, tmp8);
          byte_d2 = simd_and(r80_7ff_tmp7, tmp70);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(byte_d2, carryQ.get_carry_in(44), byte_d2_adv));
          r80_7ff_tmp8 = simd_and(byte_d2_adv, byte_82);
          struct_So.cc = simd_or(struct_So.cc, r80_7ff_tmp8);
          byte_d8 = simd_and(r80_7ff_tmp7, tmp53);
          byte_range_8e_8f = simd_and(tmp21, tmp49);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(45), byte_d8_adv));
          r80_7ff_tmp9 = simd_and(byte_d8_adv, byte_range_8e_8f);
          struct_So.cc = simd_or(struct_So.cc, r80_7ff_tmp9);
          byte_db = simd_and(r80_7ff_tmp7, tmp161);
          r80_7ff_tmp10 = simd_and(tmp20, tmp123);
          r80_7ff_tmp11 = simd_and(tmp74, tmp55);
          r80_7ff_tmp12 = simd_or(r80_7ff_tmp10, r80_7ff_tmp11);
          r80_7ff_tmp13 = simd_and(tmp78, tmp10);
          r80_7ff_tmp14 = simd_not(basis_bits.bit_7);
          r80_7ff_tmp15 = simd_or(simd_and(basis_bits.bit_6, r80_7ff_tmp14), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          r80_7ff_tmp16 = simd_and(r80_7ff_tmp13, r80_7ff_tmp15);
          cc_range_6de_6fd_2 = simd_or(r80_7ff_tmp12, r80_7ff_tmp16);
          carryQ.cq[46] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(46), byte_db_adv));
          r80_7ff_tmp17 = simd_and(byte_db_adv, cc_range_6de_6fd_2);
          struct_So.cc = simd_or(struct_So.cc, r80_7ff_tmp17);
          byte_df = simd_and(r80_7ff_tmp7, tmp62);
          byte_b6 = simd_and(tmp78, tmp42);
          carryQ.cq[47] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(47), byte_df_adv));
          r80_7ff_tmp18 = simd_and(byte_df_adv, byte_b6);
          struct_So.cc = simd_or(struct_So.cc, r80_7ff_tmp18);
        }
        else {
          carryQ.CarryDequeueEnqueue(43, 5);
        }
        byte_range_e0_ef = simd_and(tmp1, tmp73);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(48, 71))) {
          byte_e0 = simd_andc(byte_range_e0_ef, tmp6);
          byte_a7 = simd_and(tmp74, tmp47);
          carryQ.cq[48] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(48), r800_ffff_tmp1));
          sequence_e0_a7 = simd_and(r800_ffff_tmp1, byte_a7);
          carryQ.cq[49] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(49), byte_e0_adv));
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          byte_ba = simd_and(tmp78, tmp159);
          carryQ.cq[50] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(50), sequence_e0_a7_adv));
          r800_ffff_tmp2 = simd_and(sequence_e0_a7_adv, byte_ba);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp2);
          byte_ad = simd_and(tmp74, tmp12);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          byte_b0 = simd_andc(tmp78, tmp6);
          carryQ.cq[51] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(51), sequence_e0_ad_adv));
          r800_ffff_tmp3 = simd_and(sequence_e0_ad_adv, byte_b0);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp3);
          byte_af = simd_and(tmp74, tmp62);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          r800_ffff_tmp4 = simd_not(tmp80);
          r800_ffff_tmp5 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp4), simd_andc(tmp94, basis_bits.bit_4));
          r800_ffff_tmp6 = simd_or(r800_ffff_tmp5, tmp159);
          cc_range_bf3_bfa_3 = simd_and(tmp78, r800_ffff_tmp6);
          carryQ.cq[52] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(52), sequence_e0_af_adv));
          r800_ffff_tmp7 = simd_and(sequence_e0_af_adv, cc_range_bf3_bfa_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp7);
          byte_b1 = simd_and(tmp78, tmp68);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          byte_bf = simd_and(tmp78, tmp62);
          carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(53), sequence_e0_b1_adv));
          r800_ffff_tmp8 = simd_and(sequence_e0_b1_adv, byte_bf);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp8);
          byte_b5 = simd_and(tmp78, tmp35);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          byte_b9 = simd_and(tmp78, tmp55);
          carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(54), sequence_e0_b5_adv));
          r800_ffff_tmp9 = simd_and(sequence_e0_b5_adv, byte_b9);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp9);
          byte_bc = simd_and(tmp78, tmp58);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          sequence_e0_bc = simd_and(byte_e0_adv, byte_bc);
          r800_ffff_tmp10 = simd_and(tmp101, tmp5);
          r800_ffff_tmp11 = simd_or(r800_ffff_tmp10, byte_93);
          r800_ffff_tmp12 = simd_and(tmp20, tmp28);
          r800_ffff_tmp13 = simd_and(r800_ffff_tmp12, tmp5);
          r800_ffff_tmp14 = simd_or(r800_ffff_tmp11, r800_ffff_tmp13);
          r800_ffff_tmp15 = simd_and(tmp20, basis_bits.bit_4);
          r800_ffff_tmp16 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp17 = simd_and(r800_ffff_tmp15, r800_ffff_tmp16);
          r800_ffff_tmp18 = simd_or(r800_ffff_tmp14, r800_ffff_tmp17);
          r800_ffff_tmp19 = simd_and(tmp78, tmp29);
          r800_ffff_tmp20 = simd_or(r800_ffff_tmp18, r800_ffff_tmp19);
          r800_ffff_tmp21 = simd_and(tmp78, tmp42);
          r800_ffff_tmp22 = simd_or(r800_ffff_tmp20, r800_ffff_tmp21);
          r800_ffff_tmp23 = simd_and(tmp78, tmp53);
          cc_range_f01_f38_3 = simd_or(r800_ffff_tmp22, r800_ffff_tmp23);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(sequence_e0_bc, carryQ.get_carry_in(55), sequence_e0_bc_adv));
          r800_ffff_tmp24 = simd_and(sequence_e0_bc_adv, cc_range_f01_f38_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp24);
          byte_be = simd_and(tmp78, tmp123);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          byte_range_be_bf = simd_and(tmp78, tmp49);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(56), sequence_e0_be_adv));
          r800_ffff_tmp25 = simd_and(sequence_e0_be_adv, byte_range_be_bf);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp25);
          sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
          sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
          r800_ffff_tmp26 = simd_not(tmp36);
          r800_ffff_tmp27 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp26), simd_andc(tmp30, basis_bits.bit_4));
          r800_ffff_tmp28 = simd_and(tmp21, r800_ffff_tmp27);
          r800_ffff_tmp29 = simd_or(byte_range_80_85, r800_ffff_tmp28);
          r800_ffff_tmp30 = simd_and(tmp21, tmp49);
          r800_ffff_tmp31 = simd_or(r800_ffff_tmp29, r800_ffff_tmp30);
          r800_ffff_tmp32 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp4), simd_andc(tmp36, basis_bits.bit_4));
          r800_ffff_tmp33 = simd_and(tmp20, r800_ffff_tmp32);
          cc_range_fc0_fd5_3 = simd_or(r800_ffff_tmp31, r800_ffff_tmp33);
          carryQ.cq[57] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(57), sequence_e0_bf_adv));
          r800_ffff_tmp34 = simd_and(sequence_e0_bf_adv, cc_range_fc0_fd5_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp34);
          byte_e1 = simd_and(byte_range_e0_ef, tmp68);
          carryQ.cq[58] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(58), r800_ffff_tmp35));
          sequence_e1_82 = simd_and(r800_ffff_tmp35, byte_82);
          carryQ.cq[59] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(59), byte_e1_adv));
          sequence_e1_82 = simd_and(byte_e1_adv, byte_82);
          byte_range_9e_9f = simd_and(tmp20, tmp49);
          carryQ.cq[60] = carryout2carry(pablo_blk_Advance(sequence_e1_82, carryQ.get_carry_in(60), sequence_e1_82_adv));
          r800_ffff_tmp36 = simd_and(sequence_e1_82_adv, byte_range_9e_9f);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp36);
          sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
          sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
          r800_ffff_tmp37 = simd_and(basis_bits.bit_4, r800_ffff_tmp16);
          byte_range_90_99 = simd_andc(tmp20, r800_ffff_tmp37);
          carryQ.cq[61] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(61), sequence_e1_8e_adv));
          r800_ffff_tmp38 = simd_and(sequence_e1_8e_adv, byte_range_90_99);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp38);
          byte_a5 = simd_and(tmp74, tmp35);
          sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
          sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
          carryQ.cq[62] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(62), sequence_e1_a5_adv));
          r800_ffff_tmp39 = simd_and(sequence_e1_a5_adv, byte_80);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp39);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          r800_ffff_tmp40 = simd_or(basis_bits.bit_2, tmp50);
          byte_range_9e_bf = simd_and(byte_range_80_bf, r800_ffff_tmp40);
          carryQ.cq[63] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(63), sequence_e1_a7_adv));
          r800_ffff_tmp41 = simd_and(sequence_e1_a7_adv, byte_range_9e_bf);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp41);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          r800_ffff_tmp42 = simd_or(simd_and(basis_bits.bit_4, tmp126), simd_andc(tmp80, basis_bits.bit_4));
          r800_ffff_tmp43 = simd_and(tmp74, r800_ffff_tmp42);
          r800_ffff_tmp44 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp26), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          r800_ffff_tmp45 = simd_and(tmp78, r800_ffff_tmp44);
          cc_range_1b61_1b74_3 = simd_or(r800_ffff_tmp43, r800_ffff_tmp45);
          carryQ.cq[64] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(64), sequence_e1_ad_adv));
          r800_ffff_tmp46 = simd_and(sequence_e1_ad_adv, cc_range_1b61_1b74_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp46);
          byte_e2 = simd_and(byte_range_e0_ef, tmp70);
          carryQ.cq[65] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(65), r800_ffff_tmp47));
          sequence_e2_84 = simd_and(r800_ffff_tmp47, byte_84);
          carryQ.cq[66] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(66), byte_e2_adv));
          sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
          r800_ffff_tmp48 = simd_not(tmp17);
          r800_ffff_tmp49 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp48), simd_andc(tmp17, basis_bits.bit_5));
          r800_ffff_tmp50 = simd_and(tmp43, r800_ffff_tmp49);
          r800_ffff_tmp51 = simd_or(byte_range_80_81, r800_ffff_tmp50);
          r800_ffff_tmp52 = simd_andc(tmp52, basis_bits.bit_6);
          r800_ffff_tmp53 = simd_and(tmp21, r800_ffff_tmp52);
          r800_ffff_tmp54 = simd_or(r800_ffff_tmp51, r800_ffff_tmp53);
          r800_ffff_tmp55 = simd_or(r800_ffff_tmp54, byte_94);
          r800_ffff_tmp56 = simd_and(tmp28, basis_bits.bit_6);
          r800_ffff_tmp57 = simd_and(tmp20, r800_ffff_tmp56);
          r800_ffff_tmp58 = simd_or(r800_ffff_tmp55, r800_ffff_tmp57);
          r800_ffff_tmp59 = simd_or(basis_bits.bit_3, tmp4);
          r800_ffff_tmp60 = simd_not(r800_ffff_tmp59);
          r800_ffff_tmp61 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp60), simd_andc(tmp50, basis_bits.bit_2));
          r800_ffff_tmp62 = simd_and(byte_range_80_bf, r800_ffff_tmp61);
          r800_ffff_tmp63 = simd_or(r800_ffff_tmp58, r800_ffff_tmp62);
          r800_ffff_tmp64 = simd_or(r800_ffff_tmp63, byte_a5);
          r800_ffff_tmp65 = simd_or(r800_ffff_tmp64, byte_a7);
          r800_ffff_tmp66 = simd_and(tmp74, tmp55);
          r800_ffff_tmp67 = simd_or(r800_ffff_tmp65, r800_ffff_tmp66);
          r800_ffff_tmp68 = simd_and(tmp74, tmp123);
          r800_ffff_tmp69 = simd_or(r800_ffff_tmp67, r800_ffff_tmp68);
          r800_ffff_tmp70 = simd_and(tmp52, basis_bits.bit_6);
          r800_ffff_tmp71 = simd_and(tmp78, r800_ffff_tmp70);
          cc_range_2100_213a_3 = simd_or(r800_ffff_tmp69, r800_ffff_tmp71);
          carryQ.cq[67] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(67), sequence_e2_84_adv));
          r800_ffff_tmp72 = simd_and(sequence_e2_84_adv, cc_range_2100_213a_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp72);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          r800_ffff_tmp73 = simd_andc(tmp10, basis_bits.bit_6);
          r800_ffff_tmp74 = simd_or(tmp159, r800_ffff_tmp73);
          r800_ffff_tmp75 = simd_or(r800_ffff_tmp74, tmp62);
          cc_range_214a_214f_3 = simd_and(tmp21, r800_ffff_tmp75);
          carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(68), sequence_e2_85_adv));
          r800_ffff_tmp76 = simd_and(sequence_e2_85_adv, cc_range_214a_214f_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp76);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          r800_ffff_tmp77 = simd_not(r800_ffff_tmp16);
          r800_ffff_tmp78 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp77), simd_andc(tmp36, basis_bits.bit_4));
          r800_ffff_tmp79 = simd_or(r800_ffff_tmp78, tmp10);
          r800_ffff_tmp80 = simd_and(tmp20, r800_ffff_tmp79);
          r800_ffff_tmp81 = simd_andc(tmp74, tmp4);
          r800_ffff_tmp82 = simd_not(basis_bits.bit_7);
          r800_ffff_tmp83 = simd_or(simd_and(basis_bits.bit_6, r800_ffff_tmp82), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          r800_ffff_tmp84 = simd_and(r800_ffff_tmp81, r800_ffff_tmp83);
          r800_ffff_tmp85 = simd_or(r800_ffff_tmp80, r800_ffff_tmp84);
          r800_ffff_tmp86 = simd_andc(tmp28, basis_bits.bit_6);
          r800_ffff_tmp87 = simd_and(tmp74, r800_ffff_tmp86);
          r800_ffff_tmp88 = simd_or(r800_ffff_tmp85, r800_ffff_tmp87);
          r800_ffff_tmp89 = simd_not(tmp23);
          r800_ffff_tmp90 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp89), simd_andc(tmp30, basis_bits.bit_4));
          r800_ffff_tmp91 = simd_and(tmp74, r800_ffff_tmp90);
          r800_ffff_tmp92 = simd_or(r800_ffff_tmp88, r800_ffff_tmp91);
          r800_ffff_tmp93 = simd_and(tmp98, tmp88);
          cc_range_2195_21af_3 = simd_or(r800_ffff_tmp92, r800_ffff_tmp93);
          carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(69), sequence_e2_86_adv));
          r800_ffff_tmp94 = simd_and(sequence_e2_86_adv, cc_range_2195_21af_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp94);
          sequence_e2_87 = simd_and(byte_e2_adv, byte_87);
          sequence_e2_87 = simd_and(byte_e2_adv, byte_87);
          r800_ffff_tmp95 = simd_and(basis_bits.bit_4, tmp23);
          r800_ffff_tmp96 = simd_andc(tmp21, r800_ffff_tmp95);
          r800_ffff_tmp97 = simd_or(r800_ffff_tmp96, tmp109);
          r800_ffff_tmp98 = simd_or(r800_ffff_tmp97, byte_93);
          r800_ffff_tmp99 = simd_not(tmp71);
          r800_ffff_tmp100 = simd_and(basis_bits.bit_3, tmp37);
          r800_ffff_tmp101 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp99), simd_andc(r800_ffff_tmp100, basis_bits.bit_2));
          r800_ffff_tmp102 = simd_and(byte_range_80_bf, r800_ffff_tmp101);
          cc_range_21c0_21d5_3 = simd_or(r800_ffff_tmp98, r800_ffff_tmp102);
          carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e2_87, carryQ.get_carry_in(70), sequence_e2_87_adv));
          r800_ffff_tmp103 = simd_and(sequence_e2_87_adv, cc_range_21c0_21d5_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp103);
          sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
          sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
          r800_ffff_tmp104 = simd_and(tmp48, tmp64);
          r800_ffff_tmp105 = simd_or(tmp43, r800_ffff_tmp104);
          r800_ffff_tmp106 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp4), simd_andc(r800_ffff_tmp16, basis_bits.bit_4));
          r800_ffff_tmp107 = simd_and(tmp74, r800_ffff_tmp106);
          r800_ffff_tmp108 = simd_or(r800_ffff_tmp105, r800_ffff_tmp107);
          r800_ffff_tmp109 = simd_or(basis_bits.bit_3, tmp95);
          r800_ffff_tmp110 = simd_and(tmp98, r800_ffff_tmp109);
          cc_range_2300_232b_3 = simd_or(r800_ffff_tmp108, r800_ffff_tmp110);
          carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e2_8c, carryQ.get_carry_in(71), sequence_e2_8c_adv));
          r800_ffff_tmp111 = simd_and(sequence_e2_8c_adv, cc_range_2300_232b_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp111);
          sequence_e2_8d = simd_and(byte_e2_adv, byte_8d);
          sequence_e2_8d = simd_and(byte_e2_adv, byte_8d);
          r800_ffff_tmp112 = simd_and(basis_bits.bit_3, tmp10);
          r800_ffff_tmp113 = simd_and(basis_bits.bit_2, r800_ffff_tmp112);
          r800_ffff_tmp114 = simd_andc(byte_range_80_bf, r800_ffff_tmp113);
          r800_ffff_tmp115 = simd_and(tmp78, tmp10);
          r800_ffff_tmp116 = simd_and(r800_ffff_tmp115, tmp5);
          cc_range_2340_237d_3 = simd_or(r800_ffff_tmp114, r800_ffff_tmp116);
          carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e2_8d, carryQ.get_carry_in(72), sequence_e2_8d_adv));
          r800_ffff_tmp117 = simd_and(sequence_e2_8d_adv, cc_range_2340_237d_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp117);
          sequence_e2_8e = simd_and(byte_e2_adv, byte_8e);
          sequence_e2_8e = simd_and(byte_e2_adv, byte_8e);
          r800_ffff_tmp118 = simd_and(tmp78, tmp4);
          cc_range_2380_23b4_3 = simd_or(byte_range_80_9a, r800_ffff_tmp118);
          carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e2_8e, carryQ.get_carry_in(73), sequence_e2_8e_adv));
          r800_ffff_tmp119 = simd_and(sequence_e2_8e_adv, cc_range_2380_23b4_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp119);
          sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
          sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
          r800_ffff_tmp120 = simd_andc(tmp48, r800_ffff_tmp112);
          r800_ffff_tmp121 = simd_not(tmp4);
          r800_ffff_tmp122 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp121), simd_andc(tmp56, basis_bits.bit_3));
          r800_ffff_tmp123 = simd_and(tmp98, r800_ffff_tmp122);
          cc_range_23c0_23e2_3 = simd_or(r800_ffff_tmp120, r800_ffff_tmp123);
          carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e2_8f, carryQ.get_carry_in(74), sequence_e2_8f_adv));
          r800_ffff_tmp124 = simd_and(sequence_e2_8f_adv, cc_range_23c0_23e2_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp124);
          sequence_e2_90 = simd_and(byte_e2_adv, byte_90);
          sequence_e2_90 = simd_and(byte_e2_adv, byte_90);
          carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e2_90, carryQ.get_carry_in(75), sequence_e2_90_adv));
          r800_ffff_tmp125 = simd_and(sequence_e2_90_adv, byte_range_80_a6);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp125);
          sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
          sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
          byte_range_80_8a = simd_andc(tmp21, tmp95);
          carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e2_91, carryQ.get_carry_in(76), sequence_e2_91_adv));
          r800_ffff_tmp126 = simd_and(sequence_e2_91_adv, byte_range_80_8a);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp126);
          sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
          sequence_e2_92 = simd_and(byte_e2_adv, byte_92);
          r800_ffff_tmp127 = simd_or(basis_bits.bit_2, r800_ffff_tmp112);
          byte_range_9c_bf = simd_and(byte_range_80_bf, r800_ffff_tmp127);
          carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e2_92, carryQ.get_carry_in(77), sequence_e2_92_adv));
          r800_ffff_tmp128 = simd_and(sequence_e2_92_adv, byte_range_9c_bf);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp128);
          sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
          sequence_e2_93 = simd_and(byte_e2_adv, byte_93);
          r800_ffff_tmp129 = simd_or(basis_bits.bit_3, r800_ffff_tmp37);
          r800_ffff_tmp130 = simd_and(basis_bits.bit_2, r800_ffff_tmp129);
          byte_range_80_a9 = simd_andc(byte_range_80_bf, r800_ffff_tmp130);
          carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e2_93, carryQ.get_carry_in(78), sequence_e2_93_adv));
          r800_ffff_tmp131 = simd_and(sequence_e2_93_adv, byte_range_80_a9);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp131);
          byte_range_94_95 = simd_and(tmp20, r800_ffff_tmp86);
          byte_e2_byte_range_94_95 = simd_and(byte_e2_adv, byte_range_94_95);
          carryQ.cq[79] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_94_95, carryQ.get_carry_in(79), r800_ffff_tmp132));
          byte_e2_byte_range_94_95_sfx = simd_and(r800_ffff_tmp132, byte_range_80_bf);
          struct_So.cc = simd_or(struct_So.cc, byte_e2_byte_range_94_95_sfx);
          byte_96 = simd_and(tmp20, tmp42);
          sequence_e2_96 = simd_and(byte_e2_adv, byte_96);
          r800_ffff_tmp133 = simd_and(basis_bits.bit_2, tmp60);
          byte_range_80_b6 = simd_andc(byte_range_80_bf, r800_ffff_tmp133);
          carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_e2_96, carryQ.get_carry_in(80), r800_ffff_tmp134));
          sequence_e2_96_byte_range_80_b6 = simd_and(r800_ffff_tmp134, byte_range_80_b6);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_96_byte_range_80_b6);
          sequence_e2_97 = simd_and(byte_e2_adv, byte_97);
          carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_e2_97, carryQ.get_carry_in(81), r800_ffff_tmp135));
          sequence_e2_97_80 = simd_and(r800_ffff_tmp135, byte_80);
          sequence_e2_98 = simd_and(byte_e2_adv, byte_98);
          carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e2_98, carryQ.get_carry_in(82), r800_ffff_tmp136));
          sequence_e2_98_byte_range_80_bf = simd_and(r800_ffff_tmp136, byte_range_80_bf);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_98_byte_range_80_bf);
          sequence_e2_99 = simd_and(byte_e2_adv, byte_99);
          r800_ffff_tmp137 = simd_and(basis_bits.bit_2, tmp88);
          byte_range_80_ae = simd_andc(byte_range_80_bf, r800_ffff_tmp137);
          carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e2_99, carryQ.get_carry_in(83), r800_ffff_tmp138));
          sequence_e2_99_byte_range_80_ae = simd_and(r800_ffff_tmp138, byte_range_80_ae);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_99_byte_range_80_ae);
          sequence_e2_9a = simd_and(byte_e2_adv, byte_9a);
          carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e2_9a, carryQ.get_carry_in(84), r800_ffff_tmp139));
          sequence_e2_9a_byte_range_80_bf = simd_and(r800_ffff_tmp139, byte_range_80_bf);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_9a_byte_range_80_bf);
          sequence_e2_9c = simd_and(byte_e2_adv, byte_9c);
          r800_ffff_tmp140 = simd_or(basis_bits.bit_2, tmp111);
          byte_range_81_bf = simd_and(byte_range_80_bf, r800_ffff_tmp140);
          carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e2_9c, carryQ.get_carry_in(85), r800_ffff_tmp141));
          sequence_e2_9c_byte_range_81_bf = simd_and(r800_ffff_tmp141, byte_range_81_bf);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_9c_byte_range_81_bf);
          sequence_e2_9d = simd_and(byte_e2_adv, byte_9d);
          r800_ffff_tmp142 = simd_and(basis_bits.bit_2, tmp150);
          byte_range_80_a7 = simd_andc(byte_range_80_bf, r800_ffff_tmp142);
          carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_e2_9d, carryQ.get_carry_in(86), r800_ffff_tmp143));
          sequence_e2_9d_byte_range_80_a7 = simd_and(r800_ffff_tmp143, byte_range_80_a7);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_9d_byte_range_80_a7);
          byte_9e = simd_and(tmp20, tmp123);
          sequence_e2_9e = simd_and(byte_e2_adv, byte_9e);
          r800_ffff_tmp144 = simd_or(basis_bits.bit_2, tmp71);
          byte_range_94_bf = simd_and(byte_range_80_bf, r800_ffff_tmp144);
          carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_e2_9e, carryQ.get_carry_in(87), r800_ffff_tmp145));
          sequence_e2_9e_byte_range_94_bf = simd_and(r800_ffff_tmp145, byte_range_94_bf);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_9e_byte_range_94_bf);
          byte_a0 = simd_andc(tmp74, tmp6);
          sequence_e2_a0 = simd_and(byte_e2_adv, byte_a0);
          carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e2_a0, carryQ.get_carry_in(88), r800_ffff_tmp146));
          sequence_e2_a0_byte_range_80_bf = simd_and(r800_ffff_tmp146, byte_range_80_bf);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_a0_byte_range_80_bf);
          byte_ac = simd_and(tmp74, tmp58);
          sequence_e2_ac = simd_and(byte_e2_adv, byte_ac);
          byte_range_80_af = simd_andc(byte_range_80_bf, tmp2);
          carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_e2_ac, carryQ.get_carry_in(89), r800_ffff_tmp147));
          sequence_e2_ac_byte_range_80_af = simd_and(r800_ffff_tmp147, byte_range_80_af);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_ac_byte_range_80_af);
          sequence_e2_ad = simd_and(byte_e2_adv, byte_ad);
          r800_ffff_tmp148 = simd_and(tmp21, tmp28);
          byte_range_85_86 = simd_and(r800_ffff_tmp148, r800_ffff_tmp83);
          carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_e2_ad, carryQ.get_carry_in(90), r800_ffff_tmp149));
          sequence_e2_ad_byte_range_85_86 = simd_and(r800_ffff_tmp149, byte_range_85_86);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_ad_byte_range_85_86);
          byte_b3 = simd_and(tmp78, tmp22);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          r800_ffff_tmp150 = simd_or(simd_and(basis_bits.bit_4, tmp126), simd_andc(tmp36, basis_bits.bit_4));
          byte_range_a5_aa = simd_and(tmp74, r800_ffff_tmp150);
          carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(91), r800_ffff_tmp151));
          sequence_e2_b3_byte_range_a5_aa = simd_and(r800_ffff_tmp151, byte_range_a5_aa);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_b3_byte_range_a5_aa);
          sequence_e2_ba = simd_and(byte_e2_adv, byte_ba);
          r800_ffff_tmp152 = simd_and(basis_bits.bit_3, r800_ffff_tmp37);
          byte_range_80_99 = simd_andc(tmp48, r800_ffff_tmp152);
          carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_e2_ba, carryQ.get_carry_in(92), r800_ffff_tmp153));
          sequence_e2_ba_byte_range_80_99 = simd_and(r800_ffff_tmp153, byte_range_80_99);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_ba_byte_range_80_99);
          byte_bb = simd_and(tmp78, tmp161);
          sequence_e2_bb = simd_and(byte_e2_adv, byte_bb);
          carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e2_bb, carryQ.get_carry_in(93), r800_ffff_tmp154));
          sequence_e2_bb_byte_range_80_b3 = simd_and(r800_ffff_tmp154, byte_range_80_b3);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_bb_byte_range_80_b3);
          sequence_e2_bc = simd_and(byte_e2_adv, byte_bc);
          carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_e2_bc, carryQ.get_carry_in(94), r800_ffff_tmp155));
          sequence_e2_bc_byte_range_80_bf = simd_and(r800_ffff_tmp155, byte_range_80_bf);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_bc_byte_range_80_bf);
          sequence_e2_bf = simd_and(byte_e2_adv, byte_bf);
          byte_range_80_95 = simd_andc(tmp48, tmp25);
          carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_e2_bf, carryQ.get_carry_in(95), r800_ffff_tmp156));
          sequence_e2_bf_byte_range_80_95 = simd_and(r800_ffff_tmp156, byte_range_80_95);
          struct_So.cc = simd_or(struct_So.cc, sequence_e2_bf_byte_range_80_95);
          byte_e3 = simd_and(byte_range_e0_ef, tmp22);
          carryQ.cq[96] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(96), r800_ffff_tmp157));
          sequence_e3_80 = simd_and(r800_ffff_tmp157, byte_80);
          carryQ.cq[97] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(97), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          r800_ffff_tmp158 = simd_andc(basis_bits.bit_6, tmp4);
          r800_ffff_tmp159 = simd_and(tmp20, r800_ffff_tmp158);
          r800_ffff_tmp160 = simd_or(byte_84, r800_ffff_tmp159);
          r800_ffff_tmp161 = simd_or(r800_ffff_tmp160, byte_a0);
          r800_ffff_tmp162 = simd_and(tmp78, r800_ffff_tmp56);
          r800_ffff_tmp163 = simd_or(r800_ffff_tmp161, r800_ffff_tmp162);
          cc_range_3004_303e_3 = simd_or(r800_ffff_tmp163, byte_range_be_bf);
          carryQ.cq[98] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(98), sequence_e3_80_adv));
          r800_ffff_tmp164 = simd_and(sequence_e3_80_adv, cc_range_3004_303e_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp164);
          sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
          sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
          r800_ffff_tmp165 = simd_andc(tmp56, tmp24);
          cc_range_3190_3196_3 = simd_andc(tmp20, r800_ffff_tmp165);
          carryQ.cq[99] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(99), sequence_e3_86_adv));
          r800_ffff_tmp166 = simd_and(sequence_e3_86_adv, cc_range_3190_3196_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp166);
          sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
          sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
          r800_ffff_tmp167 = simd_and(basis_bits.bit_2, r800_ffff_tmp59);
          byte_range_80_a3 = simd_andc(byte_range_80_bf, r800_ffff_tmp167);
          carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(100), sequence_e3_87_adv));
          r800_ffff_tmp168 = simd_and(sequence_e3_87_adv, byte_range_80_a3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp168);
          sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
          sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
          r800_ffff_tmp169 = simd_andc(tmp48, tmp133);
          r800_ffff_tmp170 = simd_and(tmp98, r800_ffff_tmp129);
          cc_range_3200_322a_3 = simd_or(r800_ffff_tmp169, r800_ffff_tmp170);
          carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_e3_88, carryQ.get_carry_in(101), sequence_e3_88_adv));
          r800_ffff_tmp171 = simd_and(sequence_e3_88_adv, cc_range_3200_322a_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp171);
          sequence_e3_89 = simd_and(byte_e3_adv, byte_89);
          sequence_e3_89 = simd_and(byte_e3_adv, byte_89);
          r800_ffff_tmp172 = simd_or(tmp43, byte_90);
          cc_range_3240_3260_3 = simd_or(r800_ffff_tmp172, tmp98);
          carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_e3_89, carryQ.get_carry_in(102), sequence_e3_89_adv));
          r800_ffff_tmp173 = simd_and(sequence_e3_89_adv, cc_range_3240_3260_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp173);
          byte_8a = simd_and(tmp21, tmp159);
          sequence_e3_8a = simd_and(byte_e3_adv, byte_8a);
          sequence_e3_8a = simd_and(byte_e3_adv, byte_8a);
          r800_ffff_tmp174 = simd_not(tmp130);
          r800_ffff_tmp175 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp174), simd_andc(r800_ffff_tmp129, basis_bits.bit_2));
          byte_range_8a_b0 = simd_and(byte_range_80_bf, r800_ffff_tmp175);
          carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_e3_8a, carryQ.get_carry_in(103), sequence_e3_8a_adv));
          r800_ffff_tmp176 = simd_and(sequence_e3_8a_adv, byte_range_8a_b0);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp176);
          byte_8b = simd_and(tmp21, tmp161);
          sequence_e3_8b = simd_and(byte_e3_adv, byte_8b);
          sequence_e3_8b = simd_and(byte_e3_adv, byte_8b);
          carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_e3_8b, carryQ.get_carry_in(104), sequence_e3_8b_adv));
          r800_ffff_tmp177 = simd_and(sequence_e3_8b_adv, byte_range_80_be);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp177);
          byte_range_8c_8f = simd_and(tmp21, tmp10);
          byte_e3_byte_range_8c_8f = simd_and(byte_e3_adv, byte_range_8c_8f);
          carryQ.cq[105] = carryout2carry(pablo_blk_Advance(byte_e3_byte_range_8c_8f, carryQ.get_carry_in(105), r800_ffff_tmp178));
          byte_e3_byte_range_8c_8f_sfx = simd_and(r800_ffff_tmp178, byte_range_80_bf);
          struct_So.cc = simd_or(struct_So.cc, byte_e3_byte_range_8c_8f_sfx);
          byte_e4 = simd_and(byte_range_e0_ef, tmp29);
          byte_b7 = simd_and(tmp78, tmp47);
          carryQ.cq[106] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(106), r800_ffff_tmp179));
          sequence_e4_b7 = simd_and(r800_ffff_tmp179, byte_b7);
          carryQ.cq[107] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(107), byte_e4_adv));
          sequence_e4_b7 = simd_and(byte_e4_adv, byte_b7);
          carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_e4_b7, carryQ.get_carry_in(108), sequence_e4_b7_adv));
          r800_ffff_tmp180 = simd_and(sequence_e4_b7_adv, byte_range_80_bf);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp180);
          byte_ea = simd_and(byte_range_e0_ef, tmp159);
          carryQ.cq[109] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(109), r800_ffff_tmp181));
          sequence_ea_92 = simd_and(r800_ffff_tmp181, byte_92);
          carryQ.cq[110] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(110), byte_ea_adv));
          sequence_ea_92 = simd_and(byte_ea_adv, byte_92);
          byte_range_90_bf = simd_and(byte_range_80_bf, tmp14);
          carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(111), sequence_ea_92_adv));
          r800_ffff_tmp182 = simd_and(sequence_ea_92_adv, byte_range_90_bf);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp182);
          sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
          sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
          byte_range_80_86 = simd_andc(tmp43, tmp30);
          carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(112), sequence_ea_93_adv));
          r800_ffff_tmp183 = simd_and(sequence_ea_93_adv, byte_range_80_86);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp183);
          sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
          sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
          r800_ffff_tmp184 = simd_and(tmp74, tmp52);
          r800_ffff_tmp185 = simd_or(r800_ffff_tmp184, r800_ffff_tmp162);
          cc_range_a828_a839_3 = simd_or(r800_ffff_tmp185, byte_b9);
          carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(113), sequence_ea_a0_adv));
          r800_ffff_tmp186 = simd_and(sequence_ea_a0_adv, cc_range_a828_a839_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp186);
          byte_a9 = simd_and(tmp74, tmp55);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          r800_ffff_tmp187 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp77), simd_andc(tmp30, basis_bits.bit_4));
          byte_range_b7_b9 = simd_and(tmp78, r800_ffff_tmp187);
          carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(114), sequence_ea_a9_adv));
          r800_ffff_tmp188 = simd_and(sequence_ea_a9_adv, byte_range_b7_b9);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp188);
          byte_ef = simd_and(byte_range_e0_ef, tmp62);
          carryQ.cq[115] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(115), r800_ffff_tmp189));
          sequence_ef_b7 = simd_and(r800_ffff_tmp189, byte_b7);
          carryQ.cq[116] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(116), byte_ef_adv));
          sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
          byte_bd = simd_and(tmp78, tmp12);
          carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(117), sequence_ef_b7_adv));
          r800_ffff_tmp190 = simd_and(sequence_ef_b7_adv, byte_bd);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp190);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          r800_ffff_tmp191 = simd_or(tmp28, tmp52);
          r800_ffff_tmp192 = simd_andc(r800_ffff_tmp191, tmp5);
          r800_ffff_tmp193 = simd_and(tmp74, r800_ffff_tmp192);
          r800_ffff_tmp194 = simd_and(tmp74, tmp10);
          r800_ffff_tmp195 = simd_and(r800_ffff_tmp194, r800_ffff_tmp83);
          r800_ffff_tmp196 = simd_or(r800_ffff_tmp193, r800_ffff_tmp195);
          r800_ffff_tmp197 = simd_and(tmp78, r800_ffff_tmp73);
          cc_range_ffe4_fffc_3 = simd_or(r800_ffff_tmp196, r800_ffff_tmp197);
          carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(118), sequence_ef_bf_adv));
          r800_ffff_tmp198 = simd_and(sequence_ef_bf_adv, cc_range_ffe4_fffc_3);
          struct_So.cc = simd_or(struct_So.cc, r800_ffff_tmp198);
        }
        else {
          carryQ.CarryDequeueEnqueue(48, 71);
        }
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(119), tmp166));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp166, byte_range_80_bf);
        carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(120), tmp167));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp167, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(121, 5))) {
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          sequence_f0_90_84 = simd_and(tmp166, byte_84);
          carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(121), sequence_f0_90_adv));
          sequence_f0_90_84 = simd_and(sequence_f0_90_adv, byte_84);
          byte_range_b7_bf = simd_and(tmp78, tmp31);
          carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(122), sequence_f0_90_84_adv));
          r10000_10fff_tmp1 = simd_and(sequence_f0_90_84_adv, byte_range_b7_bf);
          struct_So.cc = simd_or(struct_So.cc, r10000_10fff_tmp1);
          sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
          sequence_f0_90_85 = simd_and(sequence_f0_90_adv, byte_85);
          byte_range_b9_bf = simd_and(tmp144, tmp80);
          carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_f0_90_85, carryQ.get_carry_in(123), sequence_f0_90_85_adv));
          r10000_10fff_tmp2 = simd_and(sequence_f0_90_85_adv, byte_range_b9_bf);
          struct_So.cc = simd_or(struct_So.cc, r10000_10fff_tmp2);
          sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
          sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
          r10000_10fff_tmp3 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
          r10000_10fff_tmp4 = simd_and(basis_bits.bit_4, r10000_10fff_tmp3);
          r10000_10fff_tmp5 = simd_andc(tmp21, r10000_10fff_tmp4);
          r10000_10fff_tmp6 = simd_andc(tmp20, tmp10);
          cc_range_10180_10190_4 = simd_or(r10000_10fff_tmp5, r10000_10fff_tmp6);
          carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_f0_90_86, carryQ.get_carry_in(124), sequence_f0_90_86_adv));
          r10000_10fff_tmp7 = simd_and(sequence_f0_90_86_adv, cc_range_10180_10190_4);
          struct_So.cc = simd_or(struct_So.cc, r10000_10fff_tmp7);
          sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
          sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
          r10000_10fff_tmp8 = simd_not(tmp120);
          r10000_10fff_tmp9 = simd_or(simd_and(basis_bits.bit_2, r10000_10fff_tmp8), simd_andc(basis_bits.bit_3, basis_bits.bit_2));
          byte_range_90_bc = simd_and(byte_range_80_bf, r10000_10fff_tmp9);
          carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(125), sequence_f0_90_87_adv));
          r10000_10fff_tmp10 = simd_and(sequence_f0_90_87_adv, byte_range_90_bc);
          struct_So.cc = simd_or(struct_So.cc, r10000_10fff_tmp10);
        }
        else {
          carryQ.CarryDequeueEnqueue(121, 5);
        }
  }
  CarryArray<126, 0> carryQ;
  };

  struct Sm {
  Sm() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Sm & struct_Sm) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp21;
		BitBlock tmp22, cc_range_2b_7e_1, tmp23, tmp24, tmp25, tmp26, byte_f0, tmp27;
		BitBlock tmp28, tmp29, tmp30, tmp31, byte_9d, tmp32, sequence_f0_9d;
		BitBlock byte_f0_adv, byte_9b, tmp33, sequence_f0_9d_9b, sequence_f0_9d_adv;
		BitBlock tmp34, tmp35, tmp36, tmp37, tmp38, tmp39, tmp40;
		BitBlock cc_range_1d6c1_1d6fb_4, sequence_f0_9d_9b_adv, tmp41, byte_9c;
		BitBlock sequence_f0_9d_9c, tmp42, tmp43, tmp44, cc_range_1d715_1d735_4;
		BitBlock sequence_f0_9d_9c_adv, tmp45, sequence_f0_9d_9d, tmp46, tmp47, tmp48;
		BitBlock cc_range_1d74f_1d76f_4, sequence_f0_9d_9d_adv, tmp49, byte_9e;
		BitBlock sequence_f0_9d_9e, tmp50, cc_range_1d789_1d7a9_4;
		BitBlock sequence_f0_9d_9e_adv, tmp51, byte_9f, sequence_f0_9d_9f, tmp52;
		BitBlock byte_83, sequence_f0_9d_9f_adv, tmp53, sequence_f0_9e, byte_bb, tmp54;
		BitBlock sequence_f0_9e_bb, sequence_f0_9e_adv, tmp55, byte_range_b0_b1;
		BitBlock sequence_f0_9e_bb_adv, tmp56, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, byte_c2, r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock cc_range_ac_b1_2, byte_c2_adv, r80_7ff_tmp6, byte_c3, r80_7ff_tmp7;
		BitBlock cc_range_d7_f7_2, byte_c3_adv, r80_7ff_tmp8, byte_cf, r80_7ff_tmp9;
		BitBlock byte_b6, byte_cf_adv, r80_7ff_tmp10, r80_7ff_tmp11, r80_7ff_tmp12;
		BitBlock byte_d8, r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16;
		BitBlock byte_range_86_88, byte_d8_adv, r80_7ff_tmp17, byte_range_e0_ef;
		BitBlock r800_ffff_tmp1, byte_e2, byte_81, r800_ffff_tmp2, sequence_e2_81;
		BitBlock byte_e2_adv, r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8, r800_ffff_tmp9;
		BitBlock r800_ffff_tmp10, cc_range_2044_207a_3, sequence_e2_81_adv;
		BitBlock r800_ffff_tmp11, byte_82, sequence_e2_82, r800_ffff_tmp12;
		BitBlock byte_range_8a_8c, sequence_e2_82_adv, r800_ffff_tmp13, byte_84;
		BitBlock sequence_e2_84, r800_ffff_tmp14, byte_98, sequence_e2_84_adv;
		BitBlock r800_ffff_tmp15, byte_85, sequence_e2_85, r800_ffff_tmp16;
		BitBlock r800_ffff_tmp17, r800_ffff_tmp18, r800_ffff_tmp19;
		BitBlock cc_range_2140_214b_3, sequence_e2_85_adv, r800_ffff_tmp20;
		BitBlock r800_ffff_tmp21, byte_86, sequence_e2_86, r800_ffff_tmp22;
		BitBlock r800_ffff_tmp23, r800_ffff_tmp24, r800_ffff_tmp25, r800_ffff_tmp26;
		BitBlock r800_ffff_tmp27, r800_ffff_tmp28, r800_ffff_tmp29, r800_ffff_tmp30;
		BitBlock r800_ffff_tmp31, r800_ffff_tmp32, r800_ffff_tmp33, r800_ffff_tmp34;
		BitBlock cc_range_2190_21ae_3, sequence_e2_86_adv, r800_ffff_tmp35;
		BitBlock r800_ffff_tmp36, byte_87, sequence_e2_87, r800_ffff_tmp37;
		BitBlock r800_ffff_tmp38, r800_ffff_tmp39, r800_ffff_tmp40, r800_ffff_tmp41;
		BitBlock r800_ffff_tmp42, cc_range_21ce_21f4_3, sequence_e2_87_adv;
		BitBlock r800_ffff_tmp43, byte_range_88_8b, byte_e2_byte_range_88_8b;
		BitBlock byte_range_80_bf, r800_ffff_tmp44, byte_e2_byte_range_88_8b_sfx;
		BitBlock r800_ffff_tmp45, byte_8c, sequence_e2_8c, r800_ffff_tmp46;
		BitBlock byte_range_a0_a1, r800_ffff_tmp47, sequence_e2_8c_byte_range_a0_a1;
		BitBlock byte_8d, sequence_e2_8d, r800_ffff_tmp48, byte_bc, r800_ffff_tmp49;
		BitBlock sequence_e2_8d_bc, byte_8e, sequence_e2_8e, r800_ffff_tmp50;
		BitBlock r800_ffff_tmp51, r800_ffff_tmp52, r800_ffff_tmp53, r800_ffff_tmp54;
		BitBlock r800_ffff_tmp55, byte_range_9b_b3, r800_ffff_tmp56;
		BitBlock sequence_e2_8e_byte_range_9b_b3, byte_8f, sequence_e2_8f;
		BitBlock r800_ffff_tmp57, r800_ffff_tmp58, r800_ffff_tmp59, r800_ffff_tmp60;
		BitBlock byte_range_9c_a1, r800_ffff_tmp61, sequence_e2_8f_byte_range_9c_a1;
		BitBlock r800_ffff_tmp62, byte_96, sequence_e2_96, byte_b7, r800_ffff_tmp63;
		BitBlock sequence_e2_96_b7, byte_97, sequence_e2_97, r800_ffff_tmp64;
		BitBlock sequence_e2_97_81, byte_99, sequence_e2_99, byte_af, r800_ffff_tmp65;
		BitBlock sequence_e2_99_af, sequence_e2_9f, r800_ffff_tmp66, byte_range_80_84;
		BitBlock r800_ffff_tmp67, sequence_e2_9f_byte_range_80_84, byte_a4;
		BitBlock sequence_e2_a4, r800_ffff_tmp68, sequence_e2_a4_byte_range_80_bf;
		BitBlock byte_a6, sequence_e2_a6, r800_ffff_tmp69, byte_range_80_82;
		BitBlock r800_ffff_tmp70, sequence_e2_a6_byte_range_80_82, byte_a7;
		BitBlock sequence_e2_a7, r800_ffff_tmp71, r800_ffff_tmp72, byte_range_80_97;
		BitBlock r800_ffff_tmp73, sequence_e2_a7_byte_range_80_97, byte_a8;
		BitBlock sequence_e2_a8, r800_ffff_tmp74, sequence_e2_a8_byte_range_80_bf;
		BitBlock byte_ac, sequence_e2_ac, byte_range_b0_bf, r800_ffff_tmp75;
		BitBlock sequence_e2_ac_byte_range_b0_bf, byte_ad, sequence_e2_ad;
		BitBlock r800_ffff_tmp76, sequence_e2_ad_byte_range_80_84, byte_ef;
		BitBlock r800_ffff_tmp77, sequence_ef_ac, byte_ef_adv, byte_a9;
		BitBlock sequence_ef_ac_adv, r800_ffff_tmp78, byte_b9, sequence_ef_b9;
		BitBlock r800_ffff_tmp79, r800_ffff_tmp80, r800_ffff_tmp81;
		BitBlock cc_range_fe62_fe64_3, sequence_ef_b9_adv, r800_ffff_tmp82;
		BitBlock sequence_ef_bc, r800_ffff_tmp83, r800_ffff_tmp84, r800_ffff_tmp85;
		BitBlock cc_range_ff0b_ff1c_3, sequence_ef_bc_adv, r800_ffff_tmp86, byte_bd;
		BitBlock sequence_ef_bd, r800_ffff_tmp87, r800_ffff_tmp88;
		BitBlock cc_range_ff5c_ff5e_3, sequence_ef_bd_adv, r800_ffff_tmp89, byte_bf;
		BitBlock sequence_ef_bf, r800_ffff_tmp90, r800_ffff_tmp91, r800_ffff_tmp92;
		BitBlock cc_range_ffe2_ffe9_3, sequence_ef_bf_adv, r800_ffff_tmp93;




        struct_Sm.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_and(tmp4, tmp5);
        tmp7 = simd_and(tmp3, tmp6);
        tmp8 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp9 = simd_andc(tmp8, tmp1);
        tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp11 = simd_and(tmp9, tmp10);
        tmp12 = simd_andc(tmp11, tmp5);
        tmp13 = simd_or(tmp7, tmp12);
        tmp14 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp15 = simd_and(tmp14, tmp8);
        tmp16 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp17 = simd_andc(tmp10, tmp16);
        tmp18 = simd_and(tmp15, tmp17);
        tmp19 = simd_or(tmp13, tmp18);
        tmp20 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp21 = simd_and(tmp10, tmp20);
        tmp22 = simd_and(tmp15, tmp21);
        cc_range_2b_7e_1 = simd_or(tmp19, tmp22);
        struct_Sm.cc = simd_or(struct_Sm.cc, cc_range_2b_7e_1);
        tmp23 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp24 = simd_and(tmp23, tmp8);
        tmp25 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp26 = simd_or(tmp25, tmp16);
        byte_f0 = simd_andc(tmp24, tmp26);
        tmp27 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp28 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp29 = simd_and(tmp27, tmp28);
        tmp30 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp31 = simd_and(tmp10, tmp30);
        byte_9d = simd_and(tmp29, tmp31);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp32));
        sequence_f0_9d = simd_and(tmp32, byte_9d);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        byte_9b = simd_and(tmp29, tmp6);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(2), tmp33));
        sequence_f0_9d_9b = simd_and(tmp33, byte_9b);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(3), sequence_f0_9d_adv));
        sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
        tmp34 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp35 = simd_andc(tmp27, tmp34);
        tmp36 = simd_andc(tmp30, tmp25);
        tmp37 = simd_and(tmp35, tmp36);
        tmp38 = simd_or(tmp37, byte_9b);
        tmp39 = simd_and(tmp27, tmp8);
        tmp40 = simd_and(tmp39, tmp6);
        cc_range_1d6c1_1d6fb_4 = simd_or(tmp38, tmp40);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(4), sequence_f0_9d_9b_adv));
        tmp41 = simd_and(sequence_f0_9d_9b_adv, cc_range_1d6c1_1d6fb_4);
        struct_Sm.cc = simd_or(struct_Sm.cc, tmp41);
        byte_9c = simd_and(tmp29, tmp17);
        sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
        sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
        tmp42 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp43 = simd_and(tmp42, tmp30);
        tmp44 = simd_and(tmp27, basis_bits.bit_3);
        cc_range_1d715_1d735_4 = simd_and(tmp43, tmp44);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(5), sequence_f0_9d_9c_adv));
        tmp45 = simd_and(sequence_f0_9d_9c_adv, cc_range_1d715_1d735_4);
        struct_Sm.cc = simd_or(struct_Sm.cc, tmp45);
        sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
        sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
        tmp46 = simd_and(tmp10, tmp5);
        tmp47 = simd_andc(tmp34, tmp2);
        tmp48 = simd_andc(tmp27, tmp47);
        cc_range_1d74f_1d76f_4 = simd_and(tmp46, tmp48);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(6), sequence_f0_9d_9d_adv));
        tmp49 = simd_and(sequence_f0_9d_9d_adv, cc_range_1d74f_1d76f_4);
        struct_Sm.cc = simd_or(struct_Sm.cc, tmp49);
        byte_9e = simd_and(tmp29, tmp21);
        sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
        sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
        tmp50 = simd_and(tmp4, tmp30);
        cc_range_1d789_1d7a9_4 = simd_and(tmp50, tmp48);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(7), sequence_f0_9d_9e_adv));
        tmp51 = simd_and(sequence_f0_9d_9e_adv, cc_range_1d789_1d7a9_4);
        struct_Sm.cc = simd_or(struct_Sm.cc, tmp51);
        byte_9f = simd_and(tmp29, tmp46);
        sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
        sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
        tmp52 = simd_andc(tmp5, tmp25);
        byte_83 = simd_and(tmp35, tmp52);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(8), sequence_f0_9d_9f_adv));
        tmp53 = simd_and(sequence_f0_9d_9f_adv, byte_83);
        struct_Sm.cc = simd_or(struct_Sm.cc, tmp53);
        sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
        sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
        byte_bb = simd_and(tmp39, tmp6);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(9), tmp54));
        sequence_f0_9e_bb = simd_and(tmp54, byte_bb);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(10), sequence_f0_9e_adv));
        sequence_f0_9e_bb = simd_and(sequence_f0_9e_adv, byte_bb);
        tmp55 = simd_or(tmp25, basis_bits.bit_6);
        byte_range_b0_b1 = simd_andc(tmp39, tmp55);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_bb, carryQ.get_carry_in(11), sequence_f0_9e_bb_adv));
        tmp56 = simd_and(sequence_f0_9e_bb_adv, byte_range_b0_b1);
        struct_Sm.cc = simd_or(struct_Sm.cc, tmp56);
        byte_range_c0_df = simd_andc(tmp23, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(12, 4))) {
          r80_7ff_tmp1 = simd_andc(tmp23, tmp34);
          r80_7ff_tmp2 = simd_andc(tmp20, tmp25);
          byte_c2 = simd_and(r80_7ff_tmp1, r80_7ff_tmp2);
          r80_7ff_tmp3 = simd_and(tmp27, tmp2);
          r80_7ff_tmp4 = simd_and(r80_7ff_tmp3, tmp17);
          r80_7ff_tmp5 = simd_and(tmp39, tmp36);
          cc_range_ac_b1_2 = simd_or(r80_7ff_tmp4, r80_7ff_tmp5);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(12), byte_c2_adv));
          r80_7ff_tmp6 = simd_and(byte_c2_adv, cc_range_ac_b1_2);
          struct_Sm.cc = simd_or(struct_Sm.cc, r80_7ff_tmp6);
          byte_c3 = simd_and(r80_7ff_tmp1, tmp52);
          r80_7ff_tmp7 = simd_and(tmp42, tmp5);
          cc_range_d7_f7_2 = simd_and(r80_7ff_tmp7, tmp44);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(13), byte_c3_adv));
          r80_7ff_tmp8 = simd_and(byte_c3_adv, cc_range_d7_f7_2);
          struct_Sm.cc = simd_or(struct_Sm.cc, r80_7ff_tmp8);
          byte_cf = simd_and(r80_7ff_tmp1, tmp46);
          r80_7ff_tmp9 = simd_and(tmp42, tmp20);
          byte_b6 = simd_and(tmp39, r80_7ff_tmp9);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(14), byte_cf_adv));
          r80_7ff_tmp10 = simd_and(byte_cf_adv, byte_b6);
          struct_Sm.cc = simd_or(struct_Sm.cc, r80_7ff_tmp10);
          r80_7ff_tmp11 = simd_and(tmp23, tmp28);
          r80_7ff_tmp12 = simd_andc(tmp4, tmp16);
          byte_d8 = simd_and(r80_7ff_tmp11, r80_7ff_tmp12);
          r80_7ff_tmp13 = simd_or(basis_bits.bit_5, tmp16);
          r80_7ff_tmp14 = simd_not(r80_7ff_tmp13);
          r80_7ff_tmp15 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r80_7ff_tmp16 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp14), simd_andc(r80_7ff_tmp15, basis_bits.bit_4));
          byte_range_86_88 = simd_and(tmp35, r80_7ff_tmp16);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(15), byte_d8_adv));
          r80_7ff_tmp17 = simd_and(byte_d8_adv, byte_range_86_88);
          struct_Sm.cc = simd_or(struct_Sm.cc, r80_7ff_tmp17);
        }
        else {
          carryQ.CarryDequeueEnqueue(12, 4);
        }
        byte_range_e0_ef = simd_and(tmp23, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(16, 30))) {
          r800_ffff_tmp1 = simd_andc(tmp20, tmp25);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp1);
          byte_81 = simd_and(tmp35, tmp36);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(16), r800_ffff_tmp2));
          sequence_e2_81 = simd_and(r800_ffff_tmp2, byte_81);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(17), byte_e2_adv));
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          r800_ffff_tmp3 = simd_andc(tmp42, tmp16);
          r800_ffff_tmp4 = simd_and(tmp35, r800_ffff_tmp3);
          r800_ffff_tmp5 = simd_and(tmp29, r800_ffff_tmp1);
          r800_ffff_tmp6 = simd_or(r800_ffff_tmp4, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_and(tmp39, basis_bits.bit_4);
          r800_ffff_tmp8 = simd_not(tmp16);
          r800_ffff_tmp9 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp8), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp10 = simd_and(r800_ffff_tmp7, r800_ffff_tmp9);
          cc_range_2044_207a_3 = simd_or(r800_ffff_tmp6, r800_ffff_tmp10);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(18), sequence_e2_81_adv));
          r800_ffff_tmp11 = simd_and(sequence_e2_81_adv, cc_range_2044_207a_3);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp11);
          byte_82 = simd_and(tmp35, r800_ffff_tmp1);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          r800_ffff_tmp12 = simd_and(tmp35, basis_bits.bit_4);
          byte_range_8a_8c = simd_and(r800_ffff_tmp12, r800_ffff_tmp9);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(19), sequence_e2_82_adv));
          r800_ffff_tmp13 = simd_and(sequence_e2_82_adv, byte_range_8a_8c);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp13);
          byte_84 = simd_and(tmp35, r800_ffff_tmp3);
          sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
          sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
          r800_ffff_tmp14 = simd_andc(tmp4, tmp16);
          byte_98 = simd_and(tmp29, r800_ffff_tmp14);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(20), sequence_e2_84_adv));
          r800_ffff_tmp15 = simd_and(sequence_e2_84_adv, byte_98);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp15);
          byte_85 = simd_and(tmp35, tmp43);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          r800_ffff_tmp16 = simd_andc(tmp35, basis_bits.bit_4);
          r800_ffff_tmp17 = simd_and(basis_bits.bit_5, tmp16);
          r800_ffff_tmp18 = simd_andc(r800_ffff_tmp16, r800_ffff_tmp17);
          r800_ffff_tmp19 = simd_and(tmp35, tmp6);
          cc_range_2140_214b_3 = simd_or(r800_ffff_tmp18, r800_ffff_tmp19);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(21), sequence_e2_85_adv));
          r800_ffff_tmp20 = simd_and(sequence_e2_85_adv, cc_range_2140_214b_3);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp20);
          r800_ffff_tmp21 = simd_and(tmp42, tmp20);
          byte_86 = simd_and(tmp35, r800_ffff_tmp21);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          r800_ffff_tmp22 = simd_andc(tmp29, basis_bits.bit_4);
          r800_ffff_tmp23 = simd_andc(r800_ffff_tmp22, r800_ffff_tmp17);
          r800_ffff_tmp24 = simd_and(tmp4, basis_bits.bit_6);
          r800_ffff_tmp25 = simd_and(tmp29, r800_ffff_tmp24);
          r800_ffff_tmp26 = simd_or(r800_ffff_tmp23, r800_ffff_tmp25);
          r800_ffff_tmp27 = simd_and(tmp27, tmp2);
          r800_ffff_tmp28 = simd_andc(r800_ffff_tmp27, tmp26);
          r800_ffff_tmp29 = simd_or(r800_ffff_tmp26, r800_ffff_tmp28);
          r800_ffff_tmp30 = simd_and(r800_ffff_tmp27, tmp52);
          r800_ffff_tmp31 = simd_or(r800_ffff_tmp29, r800_ffff_tmp30);
          r800_ffff_tmp32 = simd_and(r800_ffff_tmp27, r800_ffff_tmp21);
          r800_ffff_tmp33 = simd_or(r800_ffff_tmp31, r800_ffff_tmp32);
          r800_ffff_tmp34 = simd_and(r800_ffff_tmp27, tmp21);
          cc_range_2190_21ae_3 = simd_or(r800_ffff_tmp33, r800_ffff_tmp34);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(22), sequence_e2_86_adv));
          r800_ffff_tmp35 = simd_and(sequence_e2_86_adv, cc_range_2190_21ae_3);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp35);
          r800_ffff_tmp36 = simd_and(tmp42, tmp5);
          byte_87 = simd_and(tmp35, r800_ffff_tmp36);
          sequence_e2_87 = simd_and(byte_e2_adv, byte_87);
          sequence_e2_87 = simd_and(byte_e2_adv, byte_87);
          r800_ffff_tmp37 = simd_and(tmp10, basis_bits.bit_6);
          r800_ffff_tmp38 = simd_and(tmp35, r800_ffff_tmp37);
          r800_ffff_tmp39 = simd_or(r800_ffff_tmp38, r800_ffff_tmp5);
          r800_ffff_tmp40 = simd_and(tmp29, r800_ffff_tmp3);
          r800_ffff_tmp41 = simd_or(r800_ffff_tmp39, r800_ffff_tmp40);
          r800_ffff_tmp42 = simd_and(tmp39, tmp25);
          cc_range_21ce_21f4_3 = simd_or(r800_ffff_tmp41, r800_ffff_tmp42);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e2_87, carryQ.get_carry_in(23), sequence_e2_87_adv));
          r800_ffff_tmp43 = simd_and(sequence_e2_87_adv, cc_range_21ce_21f4_3);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp43);
          byte_range_88_8b = simd_and(tmp35, tmp4);
          byte_e2_byte_range_88_8b = simd_and(byte_e2_adv, byte_range_88_8b);
          byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_88_8b, carryQ.get_carry_in(24), r800_ffff_tmp44));
          byte_e2_byte_range_88_8b_sfx = simd_and(r800_ffff_tmp44, byte_range_80_bf);
          struct_Sm.cc = simd_or(struct_Sm.cc, byte_e2_byte_range_88_8b_sfx);
          r800_ffff_tmp45 = simd_andc(byte_range_80_bf, tmp34);
          byte_8c = simd_and(r800_ffff_tmp45, tmp17);
          sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
          r800_ffff_tmp46 = simd_and(byte_range_80_bf, tmp2);
          byte_range_a0_a1 = simd_andc(r800_ffff_tmp46, tmp55);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e2_8c, carryQ.get_carry_in(25), r800_ffff_tmp47));
          sequence_e2_8c_byte_range_a0_a1 = simd_and(r800_ffff_tmp47, byte_range_a0_a1);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_8c_byte_range_a0_a1);
          byte_8d = simd_and(r800_ffff_tmp45, tmp31);
          sequence_e2_8d = simd_and(byte_e2_adv, byte_8d);
          r800_ffff_tmp48 = simd_and(byte_range_80_bf, tmp8);
          byte_bc = simd_and(r800_ffff_tmp48, tmp17);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e2_8d, carryQ.get_carry_in(26), r800_ffff_tmp49));
          sequence_e2_8d_bc = simd_and(r800_ffff_tmp49, byte_bc);
          byte_8e = simd_and(r800_ffff_tmp45, tmp21);
          sequence_e2_8e = simd_and(byte_e2_adv, byte_8e);
          r800_ffff_tmp50 = simd_and(basis_bits.bit_3, tmp25);
          r800_ffff_tmp51 = simd_not(r800_ffff_tmp50);
          r800_ffff_tmp52 = simd_or(basis_bits.bit_5, tmp5);
          r800_ffff_tmp53 = simd_and(basis_bits.bit_4, r800_ffff_tmp52);
          r800_ffff_tmp54 = simd_and(basis_bits.bit_3, r800_ffff_tmp53);
          r800_ffff_tmp55 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp51), simd_andc(r800_ffff_tmp54, basis_bits.bit_2));
          byte_range_9b_b3 = simd_and(byte_range_80_bf, r800_ffff_tmp55);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e2_8e, carryQ.get_carry_in(27), r800_ffff_tmp56));
          sequence_e2_8e_byte_range_9b_b3 = simd_and(r800_ffff_tmp56, byte_range_9b_b3);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_8e_byte_range_9b_b3);
          byte_8f = simd_and(r800_ffff_tmp45, tmp46);
          sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
          r800_ffff_tmp57 = simd_or(basis_bits.bit_3, tmp55);
          r800_ffff_tmp58 = simd_not(r800_ffff_tmp57);
          r800_ffff_tmp59 = simd_and(basis_bits.bit_3, tmp10);
          r800_ffff_tmp60 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp58), simd_andc(r800_ffff_tmp59, basis_bits.bit_2));
          byte_range_9c_a1 = simd_and(byte_range_80_bf, r800_ffff_tmp60);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e2_8f, carryQ.get_carry_in(28), r800_ffff_tmp61));
          sequence_e2_8f_byte_range_9c_a1 = simd_and(r800_ffff_tmp61, byte_range_9c_a1);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_8f_byte_range_9c_a1);
          r800_ffff_tmp62 = simd_and(byte_range_80_bf, tmp28);
          byte_96 = simd_and(r800_ffff_tmp62, r800_ffff_tmp21);
          sequence_e2_96 = simd_and(byte_e2_adv, byte_96);
          byte_b7 = simd_and(r800_ffff_tmp48, r800_ffff_tmp36);
          carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e2_96, carryQ.get_carry_in(29), r800_ffff_tmp63));
          sequence_e2_96_b7 = simd_and(r800_ffff_tmp63, byte_b7);
          byte_97 = simd_and(r800_ffff_tmp62, r800_ffff_tmp36);
          sequence_e2_97 = simd_and(byte_e2_adv, byte_97);
          carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e2_97, carryQ.get_carry_in(30), r800_ffff_tmp64));
          sequence_e2_97_81 = simd_and(r800_ffff_tmp64, byte_81);
          byte_99 = simd_and(r800_ffff_tmp62, tmp50);
          sequence_e2_99 = simd_and(byte_e2_adv, byte_99);
          byte_af = simd_and(r800_ffff_tmp46, tmp46);
          carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e2_99, carryQ.get_carry_in(31), r800_ffff_tmp65));
          sequence_e2_99_af = simd_and(r800_ffff_tmp65, byte_af);
          sequence_e2_9f = simd_and(byte_e2_adv, byte_9f);
          r800_ffff_tmp66 = simd_andc(r800_ffff_tmp45, basis_bits.bit_4);
          byte_range_80_84 = simd_andc(r800_ffff_tmp66, r800_ffff_tmp17);
          carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e2_9f, carryQ.get_carry_in(32), r800_ffff_tmp67));
          sequence_e2_9f_byte_range_80_84 = simd_and(r800_ffff_tmp67, byte_range_80_84);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_9f_byte_range_80_84);
          byte_a4 = simd_and(r800_ffff_tmp46, r800_ffff_tmp3);
          sequence_e2_a4 = simd_and(byte_e2_adv, byte_a4);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_a4, carryQ.get_carry_in(33), r800_ffff_tmp68));
          sequence_e2_a4_byte_range_80_bf = simd_and(r800_ffff_tmp68, byte_range_80_bf);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_a4_byte_range_80_bf);
          byte_a6 = simd_and(r800_ffff_tmp46, r800_ffff_tmp21);
          sequence_e2_a6 = simd_and(byte_e2_adv, byte_a6);
          r800_ffff_tmp69 = simd_andc(r800_ffff_tmp45, tmp25);
          byte_range_80_82 = simd_andc(r800_ffff_tmp69, tmp5);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_a6, carryQ.get_carry_in(34), r800_ffff_tmp70));
          sequence_e2_a6_byte_range_80_82 = simd_and(r800_ffff_tmp70, byte_range_80_82);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_a6_byte_range_80_82);
          byte_a7 = simd_and(r800_ffff_tmp46, r800_ffff_tmp36);
          sequence_e2_a7 = simd_and(byte_e2_adv, byte_a7);
          r800_ffff_tmp71 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
          r800_ffff_tmp72 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
          byte_range_80_97 = simd_andc(r800_ffff_tmp71, r800_ffff_tmp72);
          carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e2_a7, carryQ.get_carry_in(35), r800_ffff_tmp73));
          sequence_e2_a7_byte_range_80_97 = simd_and(r800_ffff_tmp73, byte_range_80_97);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_a7_byte_range_80_97);
          byte_a8 = simd_and(r800_ffff_tmp46, r800_ffff_tmp14);
          sequence_e2_a8 = simd_and(byte_e2_adv, byte_a8);
          carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e2_a8, carryQ.get_carry_in(36), r800_ffff_tmp74));
          sequence_e2_a8_byte_range_80_bf = simd_and(r800_ffff_tmp74, byte_range_80_bf);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_a8_byte_range_80_bf);
          byte_ac = simd_and(r800_ffff_tmp46, tmp17);
          sequence_e2_ac = simd_and(byte_e2_adv, byte_ac);
          byte_range_b0_bf = simd_and(byte_range_80_bf, tmp8);
          carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e2_ac, carryQ.get_carry_in(37), r800_ffff_tmp75));
          sequence_e2_ac_byte_range_b0_bf = simd_and(r800_ffff_tmp75, byte_range_b0_bf);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_ac_byte_range_b0_bf);
          byte_ad = simd_and(r800_ffff_tmp46, tmp31);
          sequence_e2_ad = simd_and(byte_e2_adv, byte_ad);
          carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e2_ad, carryQ.get_carry_in(38), r800_ffff_tmp76));
          sequence_e2_ad_byte_range_80_84 = simd_and(r800_ffff_tmp76, byte_range_80_84);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_ad_byte_range_80_84);
          byte_ef = simd_and(byte_range_e0_ef, tmp46);
          carryQ.cq[39] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(39), r800_ffff_tmp77));
          sequence_ef_ac = simd_and(r800_ffff_tmp77, byte_ac);
          carryQ.cq[40] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(40), byte_ef_adv));
          sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
          byte_a9 = simd_and(r800_ffff_tmp46, tmp50);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(41), sequence_ef_ac_adv));
          r800_ffff_tmp78 = simd_and(sequence_ef_ac_adv, byte_a9);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp78);
          byte_b9 = simd_and(byte_range_b0_bf, tmp50);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          r800_ffff_tmp79 = simd_and(r800_ffff_tmp46, r800_ffff_tmp1);
          r800_ffff_tmp80 = simd_and(r800_ffff_tmp46, tmp42);
          r800_ffff_tmp81 = simd_andc(r800_ffff_tmp80, tmp5);
          cc_range_fe62_fe64_3 = simd_or(r800_ffff_tmp79, r800_ffff_tmp81);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(42), sequence_ef_b9_adv));
          r800_ffff_tmp82 = simd_and(sequence_ef_b9_adv, cc_range_fe62_fe64_3);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp82);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          r800_ffff_tmp83 = simd_and(r800_ffff_tmp45, tmp6);
          r800_ffff_tmp84 = simd_and(r800_ffff_tmp62, tmp10);
          r800_ffff_tmp85 = simd_andc(r800_ffff_tmp84, tmp5);
          cc_range_ff0b_ff1c_3 = simd_or(r800_ffff_tmp83, r800_ffff_tmp85);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(43), sequence_ef_bc_adv));
          r800_ffff_tmp86 = simd_and(sequence_ef_bc_adv, cc_range_ff0b_ff1c_3);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp86);
          byte_bd = simd_and(byte_range_b0_bf, tmp31);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          r800_ffff_tmp87 = simd_andc(tmp16, tmp20);
          r800_ffff_tmp88 = simd_andc(tmp10, r800_ffff_tmp87);
          cc_range_ff5c_ff5e_3 = simd_and(r800_ffff_tmp62, r800_ffff_tmp88);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(44), sequence_ef_bd_adv));
          r800_ffff_tmp89 = simd_and(sequence_ef_bd_adv, cc_range_ff5c_ff5e_3);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp89);
          byte_bf = simd_and(byte_range_b0_bf, tmp46);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          r800_ffff_tmp90 = simd_and(r800_ffff_tmp46, basis_bits.bit_4);
          r800_ffff_tmp91 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp8), simd_andc(tmp16, basis_bits.bit_5));
          r800_ffff_tmp92 = simd_and(r800_ffff_tmp90, r800_ffff_tmp91);
          cc_range_ffe2_ffe9_3 = simd_or(r800_ffff_tmp79, r800_ffff_tmp92);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(45), sequence_ef_bf_adv));
          r800_ffff_tmp93 = simd_and(sequence_ef_bf_adv, cc_range_ffe2_ffe9_3);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp93);
        }
        else {
          carryQ.CarryDequeueEnqueue(16, 30);
        }
        carryQ.CarryQ_Adjust(46);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Sm & struct_Sm, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11;
		BitBlock tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp21;
		BitBlock tmp22, cc_range_2b_7e_1, tmp23, tmp24, tmp25, tmp26, byte_f0, tmp27;
		BitBlock tmp28, tmp29, tmp30, tmp31, byte_9d, tmp32, sequence_f0_9d;
		BitBlock byte_f0_adv, byte_9b, tmp33, sequence_f0_9d_9b, sequence_f0_9d_adv;
		BitBlock tmp34, tmp35, tmp36, tmp37, tmp38, tmp39, tmp40;
		BitBlock cc_range_1d6c1_1d6fb_4, sequence_f0_9d_9b_adv, tmp41, byte_9c;
		BitBlock sequence_f0_9d_9c, tmp42, tmp43, tmp44, cc_range_1d715_1d735_4;
		BitBlock sequence_f0_9d_9c_adv, tmp45, sequence_f0_9d_9d, tmp46, tmp47, tmp48;
		BitBlock cc_range_1d74f_1d76f_4, sequence_f0_9d_9d_adv, tmp49, byte_9e;
		BitBlock sequence_f0_9d_9e, tmp50, cc_range_1d789_1d7a9_4;
		BitBlock sequence_f0_9d_9e_adv, tmp51, byte_9f, sequence_f0_9d_9f, tmp52;
		BitBlock byte_83, sequence_f0_9d_9f_adv, tmp53, sequence_f0_9e, byte_bb, tmp54;
		BitBlock sequence_f0_9e_bb, sequence_f0_9e_adv, tmp55, byte_range_b0_b1;
		BitBlock sequence_f0_9e_bb_adv, tmp56, byte_range_c0_df, r80_7ff_tmp1;
		BitBlock r80_7ff_tmp2, byte_c2, r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock cc_range_ac_b1_2, byte_c2_adv, r80_7ff_tmp6, byte_c3, r80_7ff_tmp7;
		BitBlock cc_range_d7_f7_2, byte_c3_adv, r80_7ff_tmp8, byte_cf, r80_7ff_tmp9;
		BitBlock byte_b6, byte_cf_adv, r80_7ff_tmp10, r80_7ff_tmp11, r80_7ff_tmp12;
		BitBlock byte_d8, r80_7ff_tmp13, r80_7ff_tmp14, r80_7ff_tmp15, r80_7ff_tmp16;
		BitBlock byte_range_86_88, byte_d8_adv, r80_7ff_tmp17, byte_range_e0_ef;
		BitBlock r800_ffff_tmp1, byte_e2, byte_81, r800_ffff_tmp2, sequence_e2_81;
		BitBlock byte_e2_adv, r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8, r800_ffff_tmp9;
		BitBlock r800_ffff_tmp10, cc_range_2044_207a_3, sequence_e2_81_adv;
		BitBlock r800_ffff_tmp11, byte_82, sequence_e2_82, r800_ffff_tmp12;
		BitBlock byte_range_8a_8c, sequence_e2_82_adv, r800_ffff_tmp13, byte_84;
		BitBlock sequence_e2_84, r800_ffff_tmp14, byte_98, sequence_e2_84_adv;
		BitBlock r800_ffff_tmp15, byte_85, sequence_e2_85, r800_ffff_tmp16;
		BitBlock r800_ffff_tmp17, r800_ffff_tmp18, r800_ffff_tmp19;
		BitBlock cc_range_2140_214b_3, sequence_e2_85_adv, r800_ffff_tmp20;
		BitBlock r800_ffff_tmp21, byte_86, sequence_e2_86, r800_ffff_tmp22;
		BitBlock r800_ffff_tmp23, r800_ffff_tmp24, r800_ffff_tmp25, r800_ffff_tmp26;
		BitBlock r800_ffff_tmp27, r800_ffff_tmp28, r800_ffff_tmp29, r800_ffff_tmp30;
		BitBlock r800_ffff_tmp31, r800_ffff_tmp32, r800_ffff_tmp33, r800_ffff_tmp34;
		BitBlock cc_range_2190_21ae_3, sequence_e2_86_adv, r800_ffff_tmp35;
		BitBlock r800_ffff_tmp36, byte_87, sequence_e2_87, r800_ffff_tmp37;
		BitBlock r800_ffff_tmp38, r800_ffff_tmp39, r800_ffff_tmp40, r800_ffff_tmp41;
		BitBlock r800_ffff_tmp42, cc_range_21ce_21f4_3, sequence_e2_87_adv;
		BitBlock r800_ffff_tmp43, byte_range_88_8b, byte_e2_byte_range_88_8b;
		BitBlock byte_range_80_bf, r800_ffff_tmp44, byte_e2_byte_range_88_8b_sfx;
		BitBlock r800_ffff_tmp45, byte_8c, sequence_e2_8c, r800_ffff_tmp46;
		BitBlock byte_range_a0_a1, r800_ffff_tmp47, sequence_e2_8c_byte_range_a0_a1;
		BitBlock byte_8d, sequence_e2_8d, r800_ffff_tmp48, byte_bc, r800_ffff_tmp49;
		BitBlock sequence_e2_8d_bc, byte_8e, sequence_e2_8e, r800_ffff_tmp50;
		BitBlock r800_ffff_tmp51, r800_ffff_tmp52, r800_ffff_tmp53, r800_ffff_tmp54;
		BitBlock r800_ffff_tmp55, byte_range_9b_b3, r800_ffff_tmp56;
		BitBlock sequence_e2_8e_byte_range_9b_b3, byte_8f, sequence_e2_8f;
		BitBlock r800_ffff_tmp57, r800_ffff_tmp58, r800_ffff_tmp59, r800_ffff_tmp60;
		BitBlock byte_range_9c_a1, r800_ffff_tmp61, sequence_e2_8f_byte_range_9c_a1;
		BitBlock r800_ffff_tmp62, byte_96, sequence_e2_96, byte_b7, r800_ffff_tmp63;
		BitBlock sequence_e2_96_b7, byte_97, sequence_e2_97, r800_ffff_tmp64;
		BitBlock sequence_e2_97_81, byte_99, sequence_e2_99, byte_af, r800_ffff_tmp65;
		BitBlock sequence_e2_99_af, sequence_e2_9f, r800_ffff_tmp66, byte_range_80_84;
		BitBlock r800_ffff_tmp67, sequence_e2_9f_byte_range_80_84, byte_a4;
		BitBlock sequence_e2_a4, r800_ffff_tmp68, sequence_e2_a4_byte_range_80_bf;
		BitBlock byte_a6, sequence_e2_a6, r800_ffff_tmp69, byte_range_80_82;
		BitBlock r800_ffff_tmp70, sequence_e2_a6_byte_range_80_82, byte_a7;
		BitBlock sequence_e2_a7, r800_ffff_tmp71, r800_ffff_tmp72, byte_range_80_97;
		BitBlock r800_ffff_tmp73, sequence_e2_a7_byte_range_80_97, byte_a8;
		BitBlock sequence_e2_a8, r800_ffff_tmp74, sequence_e2_a8_byte_range_80_bf;
		BitBlock byte_ac, sequence_e2_ac, byte_range_b0_bf, r800_ffff_tmp75;
		BitBlock sequence_e2_ac_byte_range_b0_bf, byte_ad, sequence_e2_ad;
		BitBlock r800_ffff_tmp76, sequence_e2_ad_byte_range_80_84, byte_ef;
		BitBlock r800_ffff_tmp77, sequence_ef_ac, byte_ef_adv, byte_a9;
		BitBlock sequence_ef_ac_adv, r800_ffff_tmp78, byte_b9, sequence_ef_b9;
		BitBlock r800_ffff_tmp79, r800_ffff_tmp80, r800_ffff_tmp81;
		BitBlock cc_range_fe62_fe64_3, sequence_ef_b9_adv, r800_ffff_tmp82;
		BitBlock sequence_ef_bc, r800_ffff_tmp83, r800_ffff_tmp84, r800_ffff_tmp85;
		BitBlock cc_range_ff0b_ff1c_3, sequence_ef_bc_adv, r800_ffff_tmp86, byte_bd;
		BitBlock sequence_ef_bd, r800_ffff_tmp87, r800_ffff_tmp88;
		BitBlock cc_range_ff5c_ff5e_3, sequence_ef_bd_adv, r800_ffff_tmp89, byte_bf;
		BitBlock sequence_ef_bf, r800_ffff_tmp90, r800_ffff_tmp91, r800_ffff_tmp92;
		BitBlock cc_range_ffe2_ffe9_3, sequence_ef_bf_adv, r800_ffff_tmp93;




        struct_Sm.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_and(tmp4, tmp5);
        tmp7 = simd_and(tmp3, tmp6);
        tmp8 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp9 = simd_andc(tmp8, tmp1);
        tmp10 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp11 = simd_and(tmp9, tmp10);
        tmp12 = simd_andc(tmp11, tmp5);
        tmp13 = simd_or(tmp7, tmp12);
        tmp14 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp15 = simd_and(tmp14, tmp8);
        tmp16 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp17 = simd_andc(tmp10, tmp16);
        tmp18 = simd_and(tmp15, tmp17);
        tmp19 = simd_or(tmp13, tmp18);
        tmp20 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp21 = simd_and(tmp10, tmp20);
        tmp22 = simd_and(tmp15, tmp21);
        cc_range_2b_7e_1 = simd_or(tmp19, tmp22);
        struct_Sm.cc = simd_or(struct_Sm.cc, cc_range_2b_7e_1);
        tmp23 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp24 = simd_and(tmp23, tmp8);
        tmp25 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp26 = simd_or(tmp25, tmp16);
        byte_f0 = simd_andc(tmp24, tmp26);
        tmp27 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp28 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp29 = simd_and(tmp27, tmp28);
        tmp30 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp31 = simd_and(tmp10, tmp30);
        byte_9d = simd_and(tmp29, tmp31);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp32));
        sequence_f0_9d = simd_and(tmp32, byte_9d);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        byte_9b = simd_and(tmp29, tmp6);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(2), tmp33));
        sequence_f0_9d_9b = simd_and(tmp33, byte_9b);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(3), sequence_f0_9d_adv));
        sequence_f0_9d_9b = simd_and(sequence_f0_9d_adv, byte_9b);
        tmp34 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp35 = simd_andc(tmp27, tmp34);
        tmp36 = simd_andc(tmp30, tmp25);
        tmp37 = simd_and(tmp35, tmp36);
        tmp38 = simd_or(tmp37, byte_9b);
        tmp39 = simd_and(tmp27, tmp8);
        tmp40 = simd_and(tmp39, tmp6);
        cc_range_1d6c1_1d6fb_4 = simd_or(tmp38, tmp40);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9b, carryQ.get_carry_in(4), sequence_f0_9d_9b_adv));
        tmp41 = simd_and(sequence_f0_9d_9b_adv, cc_range_1d6c1_1d6fb_4);
        struct_Sm.cc = simd_or(struct_Sm.cc, tmp41);
        byte_9c = simd_and(tmp29, tmp17);
        sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
        sequence_f0_9d_9c = simd_and(sequence_f0_9d_adv, byte_9c);
        tmp42 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp43 = simd_and(tmp42, tmp30);
        tmp44 = simd_and(tmp27, basis_bits.bit_3);
        cc_range_1d715_1d735_4 = simd_and(tmp43, tmp44);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9c, carryQ.get_carry_in(5), sequence_f0_9d_9c_adv));
        tmp45 = simd_and(sequence_f0_9d_9c_adv, cc_range_1d715_1d735_4);
        struct_Sm.cc = simd_or(struct_Sm.cc, tmp45);
        sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
        sequence_f0_9d_9d = simd_and(sequence_f0_9d_adv, byte_9d);
        tmp46 = simd_and(tmp10, tmp5);
        tmp47 = simd_andc(tmp34, tmp2);
        tmp48 = simd_andc(tmp27, tmp47);
        cc_range_1d74f_1d76f_4 = simd_and(tmp46, tmp48);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9d, carryQ.get_carry_in(6), sequence_f0_9d_9d_adv));
        tmp49 = simd_and(sequence_f0_9d_9d_adv, cc_range_1d74f_1d76f_4);
        struct_Sm.cc = simd_or(struct_Sm.cc, tmp49);
        byte_9e = simd_and(tmp29, tmp21);
        sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
        sequence_f0_9d_9e = simd_and(sequence_f0_9d_adv, byte_9e);
        tmp50 = simd_and(tmp4, tmp30);
        cc_range_1d789_1d7a9_4 = simd_and(tmp50, tmp48);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9e, carryQ.get_carry_in(7), sequence_f0_9d_9e_adv));
        tmp51 = simd_and(sequence_f0_9d_9e_adv, cc_range_1d789_1d7a9_4);
        struct_Sm.cc = simd_or(struct_Sm.cc, tmp51);
        byte_9f = simd_and(tmp29, tmp46);
        sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
        sequence_f0_9d_9f = simd_and(sequence_f0_9d_adv, byte_9f);
        tmp52 = simd_andc(tmp5, tmp25);
        byte_83 = simd_and(tmp35, tmp52);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_9f, carryQ.get_carry_in(8), sequence_f0_9d_9f_adv));
        tmp53 = simd_and(sequence_f0_9d_9f_adv, byte_83);
        struct_Sm.cc = simd_or(struct_Sm.cc, tmp53);
        sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
        sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
        byte_bb = simd_and(tmp39, tmp6);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(9), tmp54));
        sequence_f0_9e_bb = simd_and(tmp54, byte_bb);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(10), sequence_f0_9e_adv));
        sequence_f0_9e_bb = simd_and(sequence_f0_9e_adv, byte_bb);
        tmp55 = simd_or(tmp25, basis_bits.bit_6);
        byte_range_b0_b1 = simd_andc(tmp39, tmp55);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_bb, carryQ.get_carry_in(11), sequence_f0_9e_bb_adv));
        tmp56 = simd_and(sequence_f0_9e_bb_adv, byte_range_b0_b1);
        struct_Sm.cc = simd_or(struct_Sm.cc, tmp56);
        byte_range_c0_df = simd_andc(tmp23, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(12, 4))) {
          r80_7ff_tmp1 = simd_andc(tmp23, tmp34);
          r80_7ff_tmp2 = simd_andc(tmp20, tmp25);
          byte_c2 = simd_and(r80_7ff_tmp1, r80_7ff_tmp2);
          r80_7ff_tmp3 = simd_and(tmp27, tmp2);
          r80_7ff_tmp4 = simd_and(r80_7ff_tmp3, tmp17);
          r80_7ff_tmp5 = simd_and(tmp39, tmp36);
          cc_range_ac_b1_2 = simd_or(r80_7ff_tmp4, r80_7ff_tmp5);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(12), byte_c2_adv));
          r80_7ff_tmp6 = simd_and(byte_c2_adv, cc_range_ac_b1_2);
          struct_Sm.cc = simd_or(struct_Sm.cc, r80_7ff_tmp6);
          byte_c3 = simd_and(r80_7ff_tmp1, tmp52);
          r80_7ff_tmp7 = simd_and(tmp42, tmp5);
          cc_range_d7_f7_2 = simd_and(r80_7ff_tmp7, tmp44);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_c3, carryQ.get_carry_in(13), byte_c3_adv));
          r80_7ff_tmp8 = simd_and(byte_c3_adv, cc_range_d7_f7_2);
          struct_Sm.cc = simd_or(struct_Sm.cc, r80_7ff_tmp8);
          byte_cf = simd_and(r80_7ff_tmp1, tmp46);
          r80_7ff_tmp9 = simd_and(tmp42, tmp20);
          byte_b6 = simd_and(tmp39, r80_7ff_tmp9);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_cf, carryQ.get_carry_in(14), byte_cf_adv));
          r80_7ff_tmp10 = simd_and(byte_cf_adv, byte_b6);
          struct_Sm.cc = simd_or(struct_Sm.cc, r80_7ff_tmp10);
          r80_7ff_tmp11 = simd_and(tmp23, tmp28);
          r80_7ff_tmp12 = simd_andc(tmp4, tmp16);
          byte_d8 = simd_and(r80_7ff_tmp11, r80_7ff_tmp12);
          r80_7ff_tmp13 = simd_or(basis_bits.bit_5, tmp16);
          r80_7ff_tmp14 = simd_not(r80_7ff_tmp13);
          r80_7ff_tmp15 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r80_7ff_tmp16 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp14), simd_andc(r80_7ff_tmp15, basis_bits.bit_4));
          byte_range_86_88 = simd_and(tmp35, r80_7ff_tmp16);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(15), byte_d8_adv));
          r80_7ff_tmp17 = simd_and(byte_d8_adv, byte_range_86_88);
          struct_Sm.cc = simd_or(struct_Sm.cc, r80_7ff_tmp17);
        }
        else {
          carryQ.CarryDequeueEnqueue(12, 4);
        }
        byte_range_e0_ef = simd_and(tmp23, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(16, 30))) {
          r800_ffff_tmp1 = simd_andc(tmp20, tmp25);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp1);
          byte_81 = simd_and(tmp35, tmp36);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(16), r800_ffff_tmp2));
          sequence_e2_81 = simd_and(r800_ffff_tmp2, byte_81);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(17), byte_e2_adv));
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          r800_ffff_tmp3 = simd_andc(tmp42, tmp16);
          r800_ffff_tmp4 = simd_and(tmp35, r800_ffff_tmp3);
          r800_ffff_tmp5 = simd_and(tmp29, r800_ffff_tmp1);
          r800_ffff_tmp6 = simd_or(r800_ffff_tmp4, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_and(tmp39, basis_bits.bit_4);
          r800_ffff_tmp8 = simd_not(tmp16);
          r800_ffff_tmp9 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp8), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp10 = simd_and(r800_ffff_tmp7, r800_ffff_tmp9);
          cc_range_2044_207a_3 = simd_or(r800_ffff_tmp6, r800_ffff_tmp10);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(18), sequence_e2_81_adv));
          r800_ffff_tmp11 = simd_and(sequence_e2_81_adv, cc_range_2044_207a_3);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp11);
          byte_82 = simd_and(tmp35, r800_ffff_tmp1);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          r800_ffff_tmp12 = simd_and(tmp35, basis_bits.bit_4);
          byte_range_8a_8c = simd_and(r800_ffff_tmp12, r800_ffff_tmp9);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(19), sequence_e2_82_adv));
          r800_ffff_tmp13 = simd_and(sequence_e2_82_adv, byte_range_8a_8c);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp13);
          byte_84 = simd_and(tmp35, r800_ffff_tmp3);
          sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
          sequence_e2_84 = simd_and(byte_e2_adv, byte_84);
          r800_ffff_tmp14 = simd_andc(tmp4, tmp16);
          byte_98 = simd_and(tmp29, r800_ffff_tmp14);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e2_84, carryQ.get_carry_in(20), sequence_e2_84_adv));
          r800_ffff_tmp15 = simd_and(sequence_e2_84_adv, byte_98);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp15);
          byte_85 = simd_and(tmp35, tmp43);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          sequence_e2_85 = simd_and(byte_e2_adv, byte_85);
          r800_ffff_tmp16 = simd_andc(tmp35, basis_bits.bit_4);
          r800_ffff_tmp17 = simd_and(basis_bits.bit_5, tmp16);
          r800_ffff_tmp18 = simd_andc(r800_ffff_tmp16, r800_ffff_tmp17);
          r800_ffff_tmp19 = simd_and(tmp35, tmp6);
          cc_range_2140_214b_3 = simd_or(r800_ffff_tmp18, r800_ffff_tmp19);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_e2_85, carryQ.get_carry_in(21), sequence_e2_85_adv));
          r800_ffff_tmp20 = simd_and(sequence_e2_85_adv, cc_range_2140_214b_3);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp20);
          r800_ffff_tmp21 = simd_and(tmp42, tmp20);
          byte_86 = simd_and(tmp35, r800_ffff_tmp21);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          r800_ffff_tmp22 = simd_andc(tmp29, basis_bits.bit_4);
          r800_ffff_tmp23 = simd_andc(r800_ffff_tmp22, r800_ffff_tmp17);
          r800_ffff_tmp24 = simd_and(tmp4, basis_bits.bit_6);
          r800_ffff_tmp25 = simd_and(tmp29, r800_ffff_tmp24);
          r800_ffff_tmp26 = simd_or(r800_ffff_tmp23, r800_ffff_tmp25);
          r800_ffff_tmp27 = simd_and(tmp27, tmp2);
          r800_ffff_tmp28 = simd_andc(r800_ffff_tmp27, tmp26);
          r800_ffff_tmp29 = simd_or(r800_ffff_tmp26, r800_ffff_tmp28);
          r800_ffff_tmp30 = simd_and(r800_ffff_tmp27, tmp52);
          r800_ffff_tmp31 = simd_or(r800_ffff_tmp29, r800_ffff_tmp30);
          r800_ffff_tmp32 = simd_and(r800_ffff_tmp27, r800_ffff_tmp21);
          r800_ffff_tmp33 = simd_or(r800_ffff_tmp31, r800_ffff_tmp32);
          r800_ffff_tmp34 = simd_and(r800_ffff_tmp27, tmp21);
          cc_range_2190_21ae_3 = simd_or(r800_ffff_tmp33, r800_ffff_tmp34);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(22), sequence_e2_86_adv));
          r800_ffff_tmp35 = simd_and(sequence_e2_86_adv, cc_range_2190_21ae_3);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp35);
          r800_ffff_tmp36 = simd_and(tmp42, tmp5);
          byte_87 = simd_and(tmp35, r800_ffff_tmp36);
          sequence_e2_87 = simd_and(byte_e2_adv, byte_87);
          sequence_e2_87 = simd_and(byte_e2_adv, byte_87);
          r800_ffff_tmp37 = simd_and(tmp10, basis_bits.bit_6);
          r800_ffff_tmp38 = simd_and(tmp35, r800_ffff_tmp37);
          r800_ffff_tmp39 = simd_or(r800_ffff_tmp38, r800_ffff_tmp5);
          r800_ffff_tmp40 = simd_and(tmp29, r800_ffff_tmp3);
          r800_ffff_tmp41 = simd_or(r800_ffff_tmp39, r800_ffff_tmp40);
          r800_ffff_tmp42 = simd_and(tmp39, tmp25);
          cc_range_21ce_21f4_3 = simd_or(r800_ffff_tmp41, r800_ffff_tmp42);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e2_87, carryQ.get_carry_in(23), sequence_e2_87_adv));
          r800_ffff_tmp43 = simd_and(sequence_e2_87_adv, cc_range_21ce_21f4_3);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp43);
          byte_range_88_8b = simd_and(tmp35, tmp4);
          byte_e2_byte_range_88_8b = simd_and(byte_e2_adv, byte_range_88_8b);
          byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_88_8b, carryQ.get_carry_in(24), r800_ffff_tmp44));
          byte_e2_byte_range_88_8b_sfx = simd_and(r800_ffff_tmp44, byte_range_80_bf);
          struct_Sm.cc = simd_or(struct_Sm.cc, byte_e2_byte_range_88_8b_sfx);
          r800_ffff_tmp45 = simd_andc(byte_range_80_bf, tmp34);
          byte_8c = simd_and(r800_ffff_tmp45, tmp17);
          sequence_e2_8c = simd_and(byte_e2_adv, byte_8c);
          r800_ffff_tmp46 = simd_and(byte_range_80_bf, tmp2);
          byte_range_a0_a1 = simd_andc(r800_ffff_tmp46, tmp55);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_e2_8c, carryQ.get_carry_in(25), r800_ffff_tmp47));
          sequence_e2_8c_byte_range_a0_a1 = simd_and(r800_ffff_tmp47, byte_range_a0_a1);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_8c_byte_range_a0_a1);
          byte_8d = simd_and(r800_ffff_tmp45, tmp31);
          sequence_e2_8d = simd_and(byte_e2_adv, byte_8d);
          r800_ffff_tmp48 = simd_and(byte_range_80_bf, tmp8);
          byte_bc = simd_and(r800_ffff_tmp48, tmp17);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_e2_8d, carryQ.get_carry_in(26), r800_ffff_tmp49));
          sequence_e2_8d_bc = simd_and(r800_ffff_tmp49, byte_bc);
          byte_8e = simd_and(r800_ffff_tmp45, tmp21);
          sequence_e2_8e = simd_and(byte_e2_adv, byte_8e);
          r800_ffff_tmp50 = simd_and(basis_bits.bit_3, tmp25);
          r800_ffff_tmp51 = simd_not(r800_ffff_tmp50);
          r800_ffff_tmp52 = simd_or(basis_bits.bit_5, tmp5);
          r800_ffff_tmp53 = simd_and(basis_bits.bit_4, r800_ffff_tmp52);
          r800_ffff_tmp54 = simd_and(basis_bits.bit_3, r800_ffff_tmp53);
          r800_ffff_tmp55 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp51), simd_andc(r800_ffff_tmp54, basis_bits.bit_2));
          byte_range_9b_b3 = simd_and(byte_range_80_bf, r800_ffff_tmp55);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_e2_8e, carryQ.get_carry_in(27), r800_ffff_tmp56));
          sequence_e2_8e_byte_range_9b_b3 = simd_and(r800_ffff_tmp56, byte_range_9b_b3);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_8e_byte_range_9b_b3);
          byte_8f = simd_and(r800_ffff_tmp45, tmp46);
          sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
          r800_ffff_tmp57 = simd_or(basis_bits.bit_3, tmp55);
          r800_ffff_tmp58 = simd_not(r800_ffff_tmp57);
          r800_ffff_tmp59 = simd_and(basis_bits.bit_3, tmp10);
          r800_ffff_tmp60 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp58), simd_andc(r800_ffff_tmp59, basis_bits.bit_2));
          byte_range_9c_a1 = simd_and(byte_range_80_bf, r800_ffff_tmp60);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_e2_8f, carryQ.get_carry_in(28), r800_ffff_tmp61));
          sequence_e2_8f_byte_range_9c_a1 = simd_and(r800_ffff_tmp61, byte_range_9c_a1);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_8f_byte_range_9c_a1);
          r800_ffff_tmp62 = simd_and(byte_range_80_bf, tmp28);
          byte_96 = simd_and(r800_ffff_tmp62, r800_ffff_tmp21);
          sequence_e2_96 = simd_and(byte_e2_adv, byte_96);
          byte_b7 = simd_and(r800_ffff_tmp48, r800_ffff_tmp36);
          carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_e2_96, carryQ.get_carry_in(29), r800_ffff_tmp63));
          sequence_e2_96_b7 = simd_and(r800_ffff_tmp63, byte_b7);
          byte_97 = simd_and(r800_ffff_tmp62, r800_ffff_tmp36);
          sequence_e2_97 = simd_and(byte_e2_adv, byte_97);
          carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_e2_97, carryQ.get_carry_in(30), r800_ffff_tmp64));
          sequence_e2_97_81 = simd_and(r800_ffff_tmp64, byte_81);
          byte_99 = simd_and(r800_ffff_tmp62, tmp50);
          sequence_e2_99 = simd_and(byte_e2_adv, byte_99);
          byte_af = simd_and(r800_ffff_tmp46, tmp46);
          carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_e2_99, carryQ.get_carry_in(31), r800_ffff_tmp65));
          sequence_e2_99_af = simd_and(r800_ffff_tmp65, byte_af);
          sequence_e2_9f = simd_and(byte_e2_adv, byte_9f);
          r800_ffff_tmp66 = simd_andc(r800_ffff_tmp45, basis_bits.bit_4);
          byte_range_80_84 = simd_andc(r800_ffff_tmp66, r800_ffff_tmp17);
          carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_e2_9f, carryQ.get_carry_in(32), r800_ffff_tmp67));
          sequence_e2_9f_byte_range_80_84 = simd_and(r800_ffff_tmp67, byte_range_80_84);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_9f_byte_range_80_84);
          byte_a4 = simd_and(r800_ffff_tmp46, r800_ffff_tmp3);
          sequence_e2_a4 = simd_and(byte_e2_adv, byte_a4);
          carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_e2_a4, carryQ.get_carry_in(33), r800_ffff_tmp68));
          sequence_e2_a4_byte_range_80_bf = simd_and(r800_ffff_tmp68, byte_range_80_bf);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_a4_byte_range_80_bf);
          byte_a6 = simd_and(r800_ffff_tmp46, r800_ffff_tmp21);
          sequence_e2_a6 = simd_and(byte_e2_adv, byte_a6);
          r800_ffff_tmp69 = simd_andc(r800_ffff_tmp45, tmp25);
          byte_range_80_82 = simd_andc(r800_ffff_tmp69, tmp5);
          carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_e2_a6, carryQ.get_carry_in(34), r800_ffff_tmp70));
          sequence_e2_a6_byte_range_80_82 = simd_and(r800_ffff_tmp70, byte_range_80_82);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_a6_byte_range_80_82);
          byte_a7 = simd_and(r800_ffff_tmp46, r800_ffff_tmp36);
          sequence_e2_a7 = simd_and(byte_e2_adv, byte_a7);
          r800_ffff_tmp71 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
          r800_ffff_tmp72 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
          byte_range_80_97 = simd_andc(r800_ffff_tmp71, r800_ffff_tmp72);
          carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_e2_a7, carryQ.get_carry_in(35), r800_ffff_tmp73));
          sequence_e2_a7_byte_range_80_97 = simd_and(r800_ffff_tmp73, byte_range_80_97);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_a7_byte_range_80_97);
          byte_a8 = simd_and(r800_ffff_tmp46, r800_ffff_tmp14);
          sequence_e2_a8 = simd_and(byte_e2_adv, byte_a8);
          carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_e2_a8, carryQ.get_carry_in(36), r800_ffff_tmp74));
          sequence_e2_a8_byte_range_80_bf = simd_and(r800_ffff_tmp74, byte_range_80_bf);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_a8_byte_range_80_bf);
          byte_ac = simd_and(r800_ffff_tmp46, tmp17);
          sequence_e2_ac = simd_and(byte_e2_adv, byte_ac);
          byte_range_b0_bf = simd_and(byte_range_80_bf, tmp8);
          carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_e2_ac, carryQ.get_carry_in(37), r800_ffff_tmp75));
          sequence_e2_ac_byte_range_b0_bf = simd_and(r800_ffff_tmp75, byte_range_b0_bf);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_ac_byte_range_b0_bf);
          byte_ad = simd_and(r800_ffff_tmp46, tmp31);
          sequence_e2_ad = simd_and(byte_e2_adv, byte_ad);
          carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_e2_ad, carryQ.get_carry_in(38), r800_ffff_tmp76));
          sequence_e2_ad_byte_range_80_84 = simd_and(r800_ffff_tmp76, byte_range_80_84);
          struct_Sm.cc = simd_or(struct_Sm.cc, sequence_e2_ad_byte_range_80_84);
          byte_ef = simd_and(byte_range_e0_ef, tmp46);
          carryQ.cq[39] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(39), r800_ffff_tmp77));
          sequence_ef_ac = simd_and(r800_ffff_tmp77, byte_ac);
          carryQ.cq[40] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(40), byte_ef_adv));
          sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
          byte_a9 = simd_and(r800_ffff_tmp46, tmp50);
          carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(41), sequence_ef_ac_adv));
          r800_ffff_tmp78 = simd_and(sequence_ef_ac_adv, byte_a9);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp78);
          byte_b9 = simd_and(byte_range_b0_bf, tmp50);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          r800_ffff_tmp79 = simd_and(r800_ffff_tmp46, r800_ffff_tmp1);
          r800_ffff_tmp80 = simd_and(r800_ffff_tmp46, tmp42);
          r800_ffff_tmp81 = simd_andc(r800_ffff_tmp80, tmp5);
          cc_range_fe62_fe64_3 = simd_or(r800_ffff_tmp79, r800_ffff_tmp81);
          carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(42), sequence_ef_b9_adv));
          r800_ffff_tmp82 = simd_and(sequence_ef_b9_adv, cc_range_fe62_fe64_3);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp82);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          r800_ffff_tmp83 = simd_and(r800_ffff_tmp45, tmp6);
          r800_ffff_tmp84 = simd_and(r800_ffff_tmp62, tmp10);
          r800_ffff_tmp85 = simd_andc(r800_ffff_tmp84, tmp5);
          cc_range_ff0b_ff1c_3 = simd_or(r800_ffff_tmp83, r800_ffff_tmp85);
          carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(43), sequence_ef_bc_adv));
          r800_ffff_tmp86 = simd_and(sequence_ef_bc_adv, cc_range_ff0b_ff1c_3);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp86);
          byte_bd = simd_and(byte_range_b0_bf, tmp31);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          sequence_ef_bd = simd_and(byte_ef_adv, byte_bd);
          r800_ffff_tmp87 = simd_andc(tmp16, tmp20);
          r800_ffff_tmp88 = simd_andc(tmp10, r800_ffff_tmp87);
          cc_range_ff5c_ff5e_3 = simd_and(r800_ffff_tmp62, r800_ffff_tmp88);
          carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_ef_bd, carryQ.get_carry_in(44), sequence_ef_bd_adv));
          r800_ffff_tmp89 = simd_and(sequence_ef_bd_adv, cc_range_ff5c_ff5e_3);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp89);
          byte_bf = simd_and(byte_range_b0_bf, tmp46);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          r800_ffff_tmp90 = simd_and(r800_ffff_tmp46, basis_bits.bit_4);
          r800_ffff_tmp91 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp8), simd_andc(tmp16, basis_bits.bit_5));
          r800_ffff_tmp92 = simd_and(r800_ffff_tmp90, r800_ffff_tmp91);
          cc_range_ffe2_ffe9_3 = simd_or(r800_ffff_tmp79, r800_ffff_tmp92);
          carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(45), sequence_ef_bf_adv));
          r800_ffff_tmp93 = simd_and(sequence_ef_bf_adv, cc_range_ffe2_ffe9_3);
          struct_Sm.cc = simd_or(struct_Sm.cc, r800_ffff_tmp93);
        }
        else {
          carryQ.CarryDequeueEnqueue(16, 30);
        }
  }
  CarryArray<46, 0> carryQ;
  };

  struct Sc {
  Sc() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Sc & struct_Sc) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_24, tmp7, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock byte_c2, r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9;
		BitBlock r80_7ff_tmp10, byte_range_a2_a5, byte_c2_adv, r80_7ff_tmp11;
		BitBlock r80_7ff_tmp12, r80_7ff_tmp13, r80_7ff_tmp14, byte_d6, r80_7ff_tmp15;
		BitBlock r80_7ff_tmp16, r80_7ff_tmp17, r80_7ff_tmp18, byte_8f, byte_d6_adv;
		BitBlock r80_7ff_tmp19, r80_7ff_tmp20, r80_7ff_tmp21, byte_d8, r80_7ff_tmp22;
		BitBlock byte_8b, byte_d8_adv, r80_7ff_tmp23, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_e0, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, byte_a7, r800_ffff_tmp7;
		BitBlock sequence_e0_a7, byte_e0_adv, r800_ffff_tmp8, r800_ffff_tmp9;
		BitBlock r800_ffff_tmp10, r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13;
		BitBlock cc_range_9f2_9fb_3, sequence_e0_a7_adv, r800_ffff_tmp14, byte_ab;
		BitBlock sequence_e0_ab, r800_ffff_tmp15, r800_ffff_tmp16, byte_b1;
		BitBlock sequence_e0_ab_adv, r800_ffff_tmp17, r800_ffff_tmp18, r800_ffff_tmp19;
		BitBlock byte_af, sequence_e0_af, r800_ffff_tmp20, byte_b9, sequence_e0_af_adv;
		BitBlock r800_ffff_tmp21, r800_ffff_tmp22, byte_b8, sequence_e0_b8, byte_bf;
		BitBlock sequence_e0_b8_adv, r800_ffff_tmp23, byte_e1, r800_ffff_tmp24;
		BitBlock r800_ffff_tmp25, byte_9f, r800_ffff_tmp26, sequence_e1_9f;
		BitBlock byte_e1_adv, byte_9b, sequence_e1_9f_adv, r800_ffff_tmp27;
		BitBlock r800_ffff_tmp28, r800_ffff_tmp29, byte_e2, r800_ffff_tmp30;
		BitBlock r800_ffff_tmp31, byte_82, r800_ffff_tmp32, sequence_e2_82;
		BitBlock byte_e2_adv, r800_ffff_tmp33, r800_ffff_tmp34, r800_ffff_tmp35;
		BitBlock r800_ffff_tmp36, byte_range_a0_ba, sequence_e2_82_adv;
		BitBlock r800_ffff_tmp37, r800_ffff_tmp38, byte_ea, byte_a0, r800_ffff_tmp39;
		BitBlock sequence_ea_a0, byte_ea_adv, sequence_ea_a0_adv, r800_ffff_tmp40;
		BitBlock byte_ef, byte_b7, r800_ffff_tmp41, sequence_ef_b7, byte_ef_adv;
		BitBlock r800_ffff_tmp42, byte_bc, sequence_ef_b7_adv, r800_ffff_tmp43;
		BitBlock sequence_ef_b9, byte_a9, sequence_ef_b9_adv, r800_ffff_tmp44;
		BitBlock sequence_ef_bc, byte_84, sequence_ef_bc_adv, r800_ffff_tmp45;
		BitBlock sequence_ef_bf, r800_ffff_tmp46, r800_ffff_tmp47, r800_ffff_tmp48;
		BitBlock r800_ffff_tmp49, r800_ffff_tmp50, r800_ffff_tmp51;
		BitBlock cc_range_ffe0_ffe5_3, sequence_ef_bf_adv, r800_ffff_tmp52;




        struct_Sc.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_andc(tmp4, tmp5);
        byte_24 = simd_and(tmp3, tmp6);
        struct_Sc.cc = simd_or(struct_Sc.cc, byte_24);
        tmp7 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_c0_df = simd_andc(tmp7, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 3))) {
          r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp2 = simd_andc(tmp7, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
          byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
          r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r80_7ff_tmp7 = simd_and(r80_7ff_tmp6, tmp2);
          r80_7ff_tmp8 = simd_andc(r80_7ff_tmp7, basis_bits.bit_4);
          r80_7ff_tmp9 = simd_not(basis_bits.bit_6);
          r80_7ff_tmp10 = simd_or(simd_and(basis_bits.bit_5, r80_7ff_tmp9), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          byte_range_a2_a5 = simd_and(r80_7ff_tmp8, r80_7ff_tmp10);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
          r80_7ff_tmp11 = simd_and(byte_c2_adv, byte_range_a2_a5);
          struct_Sc.cc = simd_or(struct_Sc.cc, r80_7ff_tmp11);
          r80_7ff_tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r80_7ff_tmp13 = simd_and(tmp7, r80_7ff_tmp12);
          r80_7ff_tmp14 = simd_and(tmp4, r80_7ff_tmp4);
          byte_d6 = simd_and(r80_7ff_tmp13, r80_7ff_tmp14);
          r80_7ff_tmp15 = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
          r80_7ff_tmp16 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp18 = simd_and(r80_7ff_tmp16, r80_7ff_tmp17);
          byte_8f = simd_and(r80_7ff_tmp15, r80_7ff_tmp18);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(1), byte_d6_adv));
          r80_7ff_tmp19 = simd_and(byte_d6_adv, byte_8f);
          struct_Sc.cc = simd_or(struct_Sc.cc, r80_7ff_tmp19);
          r80_7ff_tmp20 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp21 = simd_andc(r80_7ff_tmp20, tmp5);
          byte_d8 = simd_and(r80_7ff_tmp13, r80_7ff_tmp21);
          r80_7ff_tmp22 = simd_and(r80_7ff_tmp20, r80_7ff_tmp17);
          byte_8b = simd_and(r80_7ff_tmp15, r80_7ff_tmp22);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(2), byte_d8_adv));
          r80_7ff_tmp23 = simd_and(byte_d8_adv, byte_8b);
          struct_Sc.cc = simd_or(struct_Sc.cc, r80_7ff_tmp23);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        byte_range_e0_ef = simd_and(tmp7, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(3, 21))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_or(r800_ffff_tmp1, tmp5);
          byte_e0 = simd_andc(byte_range_e0_ef, r800_ffff_tmp2);
          r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp4 = simd_and(r800_ffff_tmp3, tmp2);
          r800_ffff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp6 = simd_and(tmp4, r800_ffff_tmp5);
          byte_a7 = simd_and(r800_ffff_tmp4, r800_ffff_tmp6);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(3), r800_ffff_tmp7));
          sequence_e0_a7 = simd_and(r800_ffff_tmp7, byte_a7);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(4), byte_e0_adv));
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          r800_ffff_tmp8 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp9 = simd_and(r800_ffff_tmp3, r800_ffff_tmp8);
          r800_ffff_tmp10 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
          r800_ffff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp12 = simd_and(r800_ffff_tmp11, r800_ffff_tmp5);
          r800_ffff_tmp13 = simd_or(r800_ffff_tmp10, r800_ffff_tmp12);
          cc_range_9f2_9fb_3 = simd_and(r800_ffff_tmp9, r800_ffff_tmp13);
          carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(5), sequence_e0_a7_adv));
          r800_ffff_tmp14 = simd_and(sequence_e0_a7_adv, cc_range_9f2_9fb_3);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp14);
          byte_ab = simd_and(r800_ffff_tmp4, r800_ffff_tmp12);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          r800_ffff_tmp15 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp16 = simd_andc(r800_ffff_tmp15, r800_ffff_tmp1);
          byte_b1 = simd_and(r800_ffff_tmp9, r800_ffff_tmp16);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(6), sequence_e0_ab_adv));
          r800_ffff_tmp17 = simd_and(sequence_e0_ab_adv, byte_b1);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp17);
          r800_ffff_tmp18 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp19 = simd_and(r800_ffff_tmp18, r800_ffff_tmp5);
          byte_af = simd_and(r800_ffff_tmp4, r800_ffff_tmp19);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          r800_ffff_tmp20 = simd_and(r800_ffff_tmp11, r800_ffff_tmp15);
          byte_b9 = simd_and(r800_ffff_tmp9, r800_ffff_tmp20);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(7), sequence_e0_af_adv));
          r800_ffff_tmp21 = simd_and(sequence_e0_af_adv, byte_b9);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp21);
          r800_ffff_tmp22 = simd_andc(r800_ffff_tmp11, tmp5);
          byte_b8 = simd_and(r800_ffff_tmp9, r800_ffff_tmp22);
          sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
          sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
          byte_bf = simd_and(r800_ffff_tmp9, r800_ffff_tmp19);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(8), sequence_e0_b8_adv));
          r800_ffff_tmp23 = simd_and(sequence_e0_b8_adv, byte_bf);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp23);
          byte_e1 = simd_and(byte_range_e0_ef, r800_ffff_tmp16);
          r800_ffff_tmp24 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r800_ffff_tmp25 = simd_and(r800_ffff_tmp3, r800_ffff_tmp24);
          byte_9f = simd_and(r800_ffff_tmp25, r800_ffff_tmp19);
          carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(9), r800_ffff_tmp26));
          sequence_e1_9f = simd_and(r800_ffff_tmp26, byte_9f);
          carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(10), byte_e1_adv));
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          byte_9b = simd_and(r800_ffff_tmp25, r800_ffff_tmp12);
          carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(11), sequence_e1_9f_adv));
          r800_ffff_tmp27 = simd_and(sequence_e1_9f_adv, byte_9b);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp27);
          r800_ffff_tmp28 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp29 = simd_andc(r800_ffff_tmp28, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp29);
          r800_ffff_tmp30 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp31 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp30);
          byte_82 = simd_and(r800_ffff_tmp31, r800_ffff_tmp29);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(12), r800_ffff_tmp32));
          sequence_e2_82 = simd_and(r800_ffff_tmp32, byte_82);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(13), byte_e2_adv));
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          r800_ffff_tmp33 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
          r800_ffff_tmp34 = simd_or(basis_bits.bit_5, r800_ffff_tmp5);
          r800_ffff_tmp35 = simd_and(basis_bits.bit_4, r800_ffff_tmp34);
          r800_ffff_tmp36 = simd_and(basis_bits.bit_3, r800_ffff_tmp35);
          byte_range_a0_ba = simd_andc(r800_ffff_tmp33, r800_ffff_tmp36);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(14), sequence_e2_82_adv));
          r800_ffff_tmp37 = simd_and(sequence_e2_82_adv, byte_range_a0_ba);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp37);
          r800_ffff_tmp38 = simd_and(r800_ffff_tmp11, r800_ffff_tmp28);
          byte_ea = simd_and(byte_range_e0_ef, r800_ffff_tmp38);
          byte_a0 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp2);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(15), r800_ffff_tmp39));
          sequence_ea_a0 = simd_and(r800_ffff_tmp39, byte_a0);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(16), byte_ea_adv));
          sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(17), sequence_ea_a0_adv));
          r800_ffff_tmp40 = simd_and(sequence_ea_a0_adv, byte_b8);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp40);
          byte_ef = simd_and(byte_range_e0_ef, r800_ffff_tmp19);
          byte_b7 = simd_and(r800_ffff_tmp9, r800_ffff_tmp6);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(18), r800_ffff_tmp41));
          sequence_ef_b7 = simd_and(r800_ffff_tmp41, byte_b7);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(19), byte_ef_adv));
          sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
          r800_ffff_tmp42 = simd_andc(r800_ffff_tmp18, tmp5);
          byte_bc = simd_and(r800_ffff_tmp9, r800_ffff_tmp42);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(20), sequence_ef_b7_adv));
          r800_ffff_tmp43 = simd_and(sequence_ef_b7_adv, byte_bc);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp43);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          byte_a9 = simd_and(r800_ffff_tmp4, r800_ffff_tmp20);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(21), sequence_ef_b9_adv));
          r800_ffff_tmp44 = simd_and(sequence_ef_b9_adv, byte_a9);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp44);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          byte_84 = simd_and(r800_ffff_tmp31, tmp6);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(22), sequence_ef_bc_adv));
          r800_ffff_tmp45 = simd_and(sequence_ef_bc_adv, byte_84);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp45);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          r800_ffff_tmp46 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
          r800_ffff_tmp47 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp46);
          r800_ffff_tmp48 = simd_and(r800_ffff_tmp4, tmp4);
          r800_ffff_tmp49 = simd_not(basis_bits.bit_7);
          r800_ffff_tmp50 = simd_or(simd_and(basis_bits.bit_6, r800_ffff_tmp49), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          r800_ffff_tmp51 = simd_and(r800_ffff_tmp48, r800_ffff_tmp50);
          cc_range_ffe0_ffe5_3 = simd_or(r800_ffff_tmp47, r800_ffff_tmp51);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(23), sequence_ef_bf_adv));
          r800_ffff_tmp52 = simd_and(sequence_ef_bf_adv, cc_range_ffe0_ffe5_3);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp52);
        }
        else {
          carryQ.CarryDequeueEnqueue(3, 21);
        }
        carryQ.CarryQ_Adjust(24);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Sc & struct_Sc, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_24, tmp7, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5;
		BitBlock byte_c2, r80_7ff_tmp6, r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9;
		BitBlock r80_7ff_tmp10, byte_range_a2_a5, byte_c2_adv, r80_7ff_tmp11;
		BitBlock r80_7ff_tmp12, r80_7ff_tmp13, r80_7ff_tmp14, byte_d6, r80_7ff_tmp15;
		BitBlock r80_7ff_tmp16, r80_7ff_tmp17, r80_7ff_tmp18, byte_8f, byte_d6_adv;
		BitBlock r80_7ff_tmp19, r80_7ff_tmp20, r80_7ff_tmp21, byte_d8, r80_7ff_tmp22;
		BitBlock byte_8b, byte_d8_adv, r80_7ff_tmp23, byte_range_e0_ef, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, byte_e0, r800_ffff_tmp3, r800_ffff_tmp4;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, byte_a7, r800_ffff_tmp7;
		BitBlock sequence_e0_a7, byte_e0_adv, r800_ffff_tmp8, r800_ffff_tmp9;
		BitBlock r800_ffff_tmp10, r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13;
		BitBlock cc_range_9f2_9fb_3, sequence_e0_a7_adv, r800_ffff_tmp14, byte_ab;
		BitBlock sequence_e0_ab, r800_ffff_tmp15, r800_ffff_tmp16, byte_b1;
		BitBlock sequence_e0_ab_adv, r800_ffff_tmp17, r800_ffff_tmp18, r800_ffff_tmp19;
		BitBlock byte_af, sequence_e0_af, r800_ffff_tmp20, byte_b9, sequence_e0_af_adv;
		BitBlock r800_ffff_tmp21, r800_ffff_tmp22, byte_b8, sequence_e0_b8, byte_bf;
		BitBlock sequence_e0_b8_adv, r800_ffff_tmp23, byte_e1, r800_ffff_tmp24;
		BitBlock r800_ffff_tmp25, byte_9f, r800_ffff_tmp26, sequence_e1_9f;
		BitBlock byte_e1_adv, byte_9b, sequence_e1_9f_adv, r800_ffff_tmp27;
		BitBlock r800_ffff_tmp28, r800_ffff_tmp29, byte_e2, r800_ffff_tmp30;
		BitBlock r800_ffff_tmp31, byte_82, r800_ffff_tmp32, sequence_e2_82;
		BitBlock byte_e2_adv, r800_ffff_tmp33, r800_ffff_tmp34, r800_ffff_tmp35;
		BitBlock r800_ffff_tmp36, byte_range_a0_ba, sequence_e2_82_adv;
		BitBlock r800_ffff_tmp37, r800_ffff_tmp38, byte_ea, byte_a0, r800_ffff_tmp39;
		BitBlock sequence_ea_a0, byte_ea_adv, sequence_ea_a0_adv, r800_ffff_tmp40;
		BitBlock byte_ef, byte_b7, r800_ffff_tmp41, sequence_ef_b7, byte_ef_adv;
		BitBlock r800_ffff_tmp42, byte_bc, sequence_ef_b7_adv, r800_ffff_tmp43;
		BitBlock sequence_ef_b9, byte_a9, sequence_ef_b9_adv, r800_ffff_tmp44;
		BitBlock sequence_ef_bc, byte_84, sequence_ef_bc_adv, r800_ffff_tmp45;
		BitBlock sequence_ef_bf, r800_ffff_tmp46, r800_ffff_tmp47, r800_ffff_tmp48;
		BitBlock r800_ffff_tmp49, r800_ffff_tmp50, r800_ffff_tmp51;
		BitBlock cc_range_ffe0_ffe5_3, sequence_ef_bf_adv, r800_ffff_tmp52;




        struct_Sc.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_andc(tmp4, tmp5);
        byte_24 = simd_and(tmp3, tmp6);
        struct_Sc.cc = simd_or(struct_Sc.cc, byte_24);
        tmp7 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_c0_df = simd_andc(tmp7, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 3))) {
          r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp2 = simd_andc(tmp7, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
          byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
          r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r80_7ff_tmp7 = simd_and(r80_7ff_tmp6, tmp2);
          r80_7ff_tmp8 = simd_andc(r80_7ff_tmp7, basis_bits.bit_4);
          r80_7ff_tmp9 = simd_not(basis_bits.bit_6);
          r80_7ff_tmp10 = simd_or(simd_and(basis_bits.bit_5, r80_7ff_tmp9), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          byte_range_a2_a5 = simd_and(r80_7ff_tmp8, r80_7ff_tmp10);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
          r80_7ff_tmp11 = simd_and(byte_c2_adv, byte_range_a2_a5);
          struct_Sc.cc = simd_or(struct_Sc.cc, r80_7ff_tmp11);
          r80_7ff_tmp12 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r80_7ff_tmp13 = simd_and(tmp7, r80_7ff_tmp12);
          r80_7ff_tmp14 = simd_and(tmp4, r80_7ff_tmp4);
          byte_d6 = simd_and(r80_7ff_tmp13, r80_7ff_tmp14);
          r80_7ff_tmp15 = simd_andc(r80_7ff_tmp6, r80_7ff_tmp1);
          r80_7ff_tmp16 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp17 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp18 = simd_and(r80_7ff_tmp16, r80_7ff_tmp17);
          byte_8f = simd_and(r80_7ff_tmp15, r80_7ff_tmp18);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(1), byte_d6_adv));
          r80_7ff_tmp19 = simd_and(byte_d6_adv, byte_8f);
          struct_Sc.cc = simd_or(struct_Sc.cc, r80_7ff_tmp19);
          r80_7ff_tmp20 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp21 = simd_andc(r80_7ff_tmp20, tmp5);
          byte_d8 = simd_and(r80_7ff_tmp13, r80_7ff_tmp21);
          r80_7ff_tmp22 = simd_and(r80_7ff_tmp20, r80_7ff_tmp17);
          byte_8b = simd_and(r80_7ff_tmp15, r80_7ff_tmp22);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(2), byte_d8_adv));
          r80_7ff_tmp23 = simd_and(byte_d8_adv, byte_8b);
          struct_Sc.cc = simd_or(struct_Sc.cc, r80_7ff_tmp23);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        byte_range_e0_ef = simd_and(tmp7, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(3, 21))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_or(r800_ffff_tmp1, tmp5);
          byte_e0 = simd_andc(byte_range_e0_ef, r800_ffff_tmp2);
          r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp4 = simd_and(r800_ffff_tmp3, tmp2);
          r800_ffff_tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp6 = simd_and(tmp4, r800_ffff_tmp5);
          byte_a7 = simd_and(r800_ffff_tmp4, r800_ffff_tmp6);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(3), r800_ffff_tmp7));
          sequence_e0_a7 = simd_and(r800_ffff_tmp7, byte_a7);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(4), byte_e0_adv));
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          r800_ffff_tmp8 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp9 = simd_and(r800_ffff_tmp3, r800_ffff_tmp8);
          r800_ffff_tmp10 = simd_andc(basis_bits.bit_6, r800_ffff_tmp1);
          r800_ffff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp12 = simd_and(r800_ffff_tmp11, r800_ffff_tmp5);
          r800_ffff_tmp13 = simd_or(r800_ffff_tmp10, r800_ffff_tmp12);
          cc_range_9f2_9fb_3 = simd_and(r800_ffff_tmp9, r800_ffff_tmp13);
          carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(5), sequence_e0_a7_adv));
          r800_ffff_tmp14 = simd_and(sequence_e0_a7_adv, cc_range_9f2_9fb_3);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp14);
          byte_ab = simd_and(r800_ffff_tmp4, r800_ffff_tmp12);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          r800_ffff_tmp15 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp16 = simd_andc(r800_ffff_tmp15, r800_ffff_tmp1);
          byte_b1 = simd_and(r800_ffff_tmp9, r800_ffff_tmp16);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(6), sequence_e0_ab_adv));
          r800_ffff_tmp17 = simd_and(sequence_e0_ab_adv, byte_b1);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp17);
          r800_ffff_tmp18 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp19 = simd_and(r800_ffff_tmp18, r800_ffff_tmp5);
          byte_af = simd_and(r800_ffff_tmp4, r800_ffff_tmp19);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          r800_ffff_tmp20 = simd_and(r800_ffff_tmp11, r800_ffff_tmp15);
          byte_b9 = simd_and(r800_ffff_tmp9, r800_ffff_tmp20);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(7), sequence_e0_af_adv));
          r800_ffff_tmp21 = simd_and(sequence_e0_af_adv, byte_b9);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp21);
          r800_ffff_tmp22 = simd_andc(r800_ffff_tmp11, tmp5);
          byte_b8 = simd_and(r800_ffff_tmp9, r800_ffff_tmp22);
          sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
          sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
          byte_bf = simd_and(r800_ffff_tmp9, r800_ffff_tmp19);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(8), sequence_e0_b8_adv));
          r800_ffff_tmp23 = simd_and(sequence_e0_b8_adv, byte_bf);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp23);
          byte_e1 = simd_and(byte_range_e0_ef, r800_ffff_tmp16);
          r800_ffff_tmp24 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r800_ffff_tmp25 = simd_and(r800_ffff_tmp3, r800_ffff_tmp24);
          byte_9f = simd_and(r800_ffff_tmp25, r800_ffff_tmp19);
          carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(9), r800_ffff_tmp26));
          sequence_e1_9f = simd_and(r800_ffff_tmp26, byte_9f);
          carryQ.cq[10] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(10), byte_e1_adv));
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          byte_9b = simd_and(r800_ffff_tmp25, r800_ffff_tmp12);
          carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(11), sequence_e1_9f_adv));
          r800_ffff_tmp27 = simd_and(sequence_e1_9f_adv, byte_9b);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp27);
          r800_ffff_tmp28 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp29 = simd_andc(r800_ffff_tmp28, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp29);
          r800_ffff_tmp30 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp31 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp30);
          byte_82 = simd_and(r800_ffff_tmp31, r800_ffff_tmp29);
          carryQ.cq[12] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(12), r800_ffff_tmp32));
          sequence_e2_82 = simd_and(r800_ffff_tmp32, byte_82);
          carryQ.cq[13] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(13), byte_e2_adv));
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          r800_ffff_tmp33 = simd_and(r800_ffff_tmp3, basis_bits.bit_2);
          r800_ffff_tmp34 = simd_or(basis_bits.bit_5, r800_ffff_tmp5);
          r800_ffff_tmp35 = simd_and(basis_bits.bit_4, r800_ffff_tmp34);
          r800_ffff_tmp36 = simd_and(basis_bits.bit_3, r800_ffff_tmp35);
          byte_range_a0_ba = simd_andc(r800_ffff_tmp33, r800_ffff_tmp36);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(14), sequence_e2_82_adv));
          r800_ffff_tmp37 = simd_and(sequence_e2_82_adv, byte_range_a0_ba);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp37);
          r800_ffff_tmp38 = simd_and(r800_ffff_tmp11, r800_ffff_tmp28);
          byte_ea = simd_and(byte_range_e0_ef, r800_ffff_tmp38);
          byte_a0 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp2);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(15), r800_ffff_tmp39));
          sequence_ea_a0 = simd_and(r800_ffff_tmp39, byte_a0);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(16), byte_ea_adv));
          sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(17), sequence_ea_a0_adv));
          r800_ffff_tmp40 = simd_and(sequence_ea_a0_adv, byte_b8);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp40);
          byte_ef = simd_and(byte_range_e0_ef, r800_ffff_tmp19);
          byte_b7 = simd_and(r800_ffff_tmp9, r800_ffff_tmp6);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(18), r800_ffff_tmp41));
          sequence_ef_b7 = simd_and(r800_ffff_tmp41, byte_b7);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(19), byte_ef_adv));
          sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
          r800_ffff_tmp42 = simd_andc(r800_ffff_tmp18, tmp5);
          byte_bc = simd_and(r800_ffff_tmp9, r800_ffff_tmp42);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(20), sequence_ef_b7_adv));
          r800_ffff_tmp43 = simd_and(sequence_ef_b7_adv, byte_bc);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp43);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          byte_a9 = simd_and(r800_ffff_tmp4, r800_ffff_tmp20);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(21), sequence_ef_b9_adv));
          r800_ffff_tmp44 = simd_and(sequence_ef_b9_adv, byte_a9);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp44);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          byte_84 = simd_and(r800_ffff_tmp31, tmp6);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(22), sequence_ef_bc_adv));
          r800_ffff_tmp45 = simd_and(sequence_ef_bc_adv, byte_84);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp45);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          r800_ffff_tmp46 = simd_or(r800_ffff_tmp1, basis_bits.bit_6);
          r800_ffff_tmp47 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp46);
          r800_ffff_tmp48 = simd_and(r800_ffff_tmp4, tmp4);
          r800_ffff_tmp49 = simd_not(basis_bits.bit_7);
          r800_ffff_tmp50 = simd_or(simd_and(basis_bits.bit_6, r800_ffff_tmp49), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
          r800_ffff_tmp51 = simd_and(r800_ffff_tmp48, r800_ffff_tmp50);
          cc_range_ffe0_ffe5_3 = simd_or(r800_ffff_tmp47, r800_ffff_tmp51);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(23), sequence_ef_bf_adv));
          r800_ffff_tmp52 = simd_and(sequence_ef_bf_adv, cc_range_ffe0_ffe5_3);
          struct_Sc.cc = simd_or(struct_Sc.cc, r800_ffff_tmp52);
        }
        else {
          carryQ.CarryDequeueEnqueue(3, 21);
        }
  }
  CarryArray<24, 0> carryQ;
  };

  struct Zl {
  Zl() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Zl & struct_Zl) {
		BitBlock tmp1, tmp2, byte_range_e0_ef, r800_ffff_tmp1, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, byte_e2, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8, byte_80;
		BitBlock r800_ffff_tmp9, sequence_e2_80, byte_e2_adv, r800_ffff_tmp10;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, byte_a8, sequence_e2_80_adv;
		BitBlock r800_ffff_tmp13;




        struct_Zl.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp3 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp3);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp6 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp8 = simd_or(r800_ffff_tmp1, r800_ffff_tmp7);
          byte_80 = simd_andc(r800_ffff_tmp6, r800_ffff_tmp8);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(0), r800_ffff_tmp9));
          sequence_e2_80 = simd_and(r800_ffff_tmp9, byte_80);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp10 = simd_and(r800_ffff_tmp4, tmp2);
          r800_ffff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp12 = simd_andc(r800_ffff_tmp11, r800_ffff_tmp7);
          byte_a8 = simd_and(r800_ffff_tmp10, r800_ffff_tmp12);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(2), sequence_e2_80_adv));
          r800_ffff_tmp13 = simd_and(sequence_e2_80_adv, byte_a8);
          struct_Zl.cc = simd_or(struct_Zl.cc, r800_ffff_tmp13);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Zl & struct_Zl, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, byte_range_e0_ef, r800_ffff_tmp1, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, byte_e2, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8, byte_80;
		BitBlock r800_ffff_tmp9, sequence_e2_80, byte_e2_adv, r800_ffff_tmp10;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, byte_a8, sequence_e2_80_adv;
		BitBlock r800_ffff_tmp13;




        struct_Zl.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp3 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp3);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp6 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp8 = simd_or(r800_ffff_tmp1, r800_ffff_tmp7);
          byte_80 = simd_andc(r800_ffff_tmp6, r800_ffff_tmp8);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(0), r800_ffff_tmp9));
          sequence_e2_80 = simd_and(r800_ffff_tmp9, byte_80);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp10 = simd_and(r800_ffff_tmp4, tmp2);
          r800_ffff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp12 = simd_andc(r800_ffff_tmp11, r800_ffff_tmp7);
          byte_a8 = simd_and(r800_ffff_tmp10, r800_ffff_tmp12);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(2), sequence_e2_80_adv));
          r800_ffff_tmp13 = simd_and(sequence_e2_80_adv, byte_a8);
          struct_Zl.cc = simd_or(struct_Zl.cc, r800_ffff_tmp13);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
  }
  CarryArray<3, 0> carryQ;
  };

  struct Co {
  Co() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Co & struct_Co) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f3, tmp7, tmp8, tmp9, tmp10;
		BitBlock byte_range_b0_be, tmp11, byte_f3_byte_range_b0_be, byte_range_80_bf;
		BitBlock tmp12, byte_f3_byte_range_b0_be_sfx, tmp13;
		BitBlock byte_f3_byte_range_b0_be_sfx_sfx, tmp14, tmp15, tmp16, byte_bf;
		BitBlock byte_f3_adv, sequence_f3_bf, tmp17, tmp18, tmp19, tmp20, byte_80;
		BitBlock sequence_f3_bf_adv, sequence_f3_bf_80, tmp21, tmp22, tmp23;
		BitBlock byte_range_80_bd, tmp24, sequence_f3_bf_80_byte_range_80_bd, tmp25;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, r800_ffff_tmp2, byte_ee;
		BitBlock r800_ffff_tmp3, byte_ee_byte_range_80_bf, r800_ffff_tmp4;
		BitBlock byte_ee_byte_range_80_bf_sfx, byte_ef, r800_ffff_tmp5, r800_ffff_tmp6;
		BitBlock byte_range_80_a3, r800_ffff_tmp7, byte_ef_byte_range_80_a3;
		BitBlock r800_ffff_tmp8, byte_ef_byte_range_80_a3_sfx;




        struct_Co.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_andc(tmp5, tmp4);
        byte_f3 = simd_and(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_and(tmp7, tmp2);
        tmp9 = simd_and(basis_bits.bit_5, tmp5);
        tmp10 = simd_and(basis_bits.bit_4, tmp9);
        byte_range_b0_be = simd_andc(tmp8, tmp10);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(0), tmp11));
        byte_f3_byte_range_b0_be = simd_and(tmp11, byte_range_b0_be);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_b0_be, carryQ.get_carry_in(1), tmp12));
        byte_f3_byte_range_b0_be_sfx = simd_and(tmp12, byte_range_80_bf);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_b0_be_sfx, carryQ.get_carry_in(2), tmp13));
        byte_f3_byte_range_b0_be_sfx_sfx = simd_and(tmp13, byte_range_80_bf);
        struct_Co.cc = simd_or(struct_Co.cc, byte_f3_byte_range_b0_be_sfx_sfx);
        tmp14 = simd_and(byte_range_80_bf, tmp2);
        tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp16 = simd_and(tmp15, tmp5);
        byte_bf = simd_and(tmp14, tmp16);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(3), byte_f3_adv));
        sequence_f3_bf = simd_and(byte_f3_adv, byte_bf);
        tmp17 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp18 = simd_andc(byte_range_80_bf, tmp17);
        tmp19 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp20 = simd_or(tmp4, tmp19);
        byte_80 = simd_andc(tmp18, tmp20);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f3_bf, carryQ.get_carry_in(4), sequence_f3_bf_adv));
        sequence_f3_bf_80 = simd_and(sequence_f3_bf_adv, byte_80);
        tmp21 = simd_and(tmp15, basis_bits.bit_6);
        tmp22 = simd_and(basis_bits.bit_3, tmp21);
        tmp23 = simd_and(basis_bits.bit_2, tmp22);
        byte_range_80_bd = simd_andc(byte_range_80_bf, tmp23);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f3_bf_80, carryQ.get_carry_in(5), tmp24));
        sequence_f3_bf_80_byte_range_80_bd = simd_and(tmp24, byte_range_80_bd);
        struct_Co.cc = simd_or(struct_Co.cc, sequence_f3_bf_80_byte_range_80_bd);
        tmp25 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp25);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(6, 4))) {
          r800_ffff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp2 = simd_and(tmp15, r800_ffff_tmp1);
          byte_ee = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_ee, carryQ.get_carry_in(6), r800_ffff_tmp3));
          byte_ee_byte_range_80_bf = simd_and(r800_ffff_tmp3, byte_range_80_bf);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_ee_byte_range_80_bf, carryQ.get_carry_in(7), r800_ffff_tmp4));
          byte_ee_byte_range_80_bf_sfx = simd_and(r800_ffff_tmp4, byte_range_80_bf);
          struct_Co.cc = simd_or(struct_Co.cc, byte_ee_byte_range_80_bf_sfx);
          byte_ef = simd_and(byte_range_e0_ef, tmp16);
          r800_ffff_tmp5 = simd_or(basis_bits.bit_3, tmp4);
          r800_ffff_tmp6 = simd_and(basis_bits.bit_2, r800_ffff_tmp5);
          byte_range_80_a3 = simd_andc(byte_range_80_bf, r800_ffff_tmp6);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(8), r800_ffff_tmp7));
          byte_ef_byte_range_80_a3 = simd_and(r800_ffff_tmp7, byte_range_80_a3);
          carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_80_a3, carryQ.get_carry_in(9), r800_ffff_tmp8));
          byte_ef_byte_range_80_a3_sfx = simd_and(r800_ffff_tmp8, byte_range_80_bf);
          struct_Co.cc = simd_or(struct_Co.cc, byte_ef_byte_range_80_a3_sfx);
        }
        else {
          carryQ.CarryDequeueEnqueue(6, 4);
        }
        carryQ.CarryQ_Adjust(10);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Co & struct_Co, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f3, tmp7, tmp8, tmp9, tmp10;
		BitBlock byte_range_b0_be, tmp11, byte_f3_byte_range_b0_be, byte_range_80_bf;
		BitBlock tmp12, byte_f3_byte_range_b0_be_sfx, tmp13;
		BitBlock byte_f3_byte_range_b0_be_sfx_sfx, tmp14, tmp15, tmp16, byte_bf;
		BitBlock byte_f3_adv, sequence_f3_bf, tmp17, tmp18, tmp19, tmp20, byte_80;
		BitBlock sequence_f3_bf_adv, sequence_f3_bf_80, tmp21, tmp22, tmp23;
		BitBlock byte_range_80_bd, tmp24, sequence_f3_bf_80_byte_range_80_bd, tmp25;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, r800_ffff_tmp2, byte_ee;
		BitBlock r800_ffff_tmp3, byte_ee_byte_range_80_bf, r800_ffff_tmp4;
		BitBlock byte_ee_byte_range_80_bf_sfx, byte_ef, r800_ffff_tmp5, r800_ffff_tmp6;
		BitBlock byte_range_80_a3, r800_ffff_tmp7, byte_ef_byte_range_80_a3;
		BitBlock r800_ffff_tmp8, byte_ef_byte_range_80_a3_sfx;




        struct_Co.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_andc(tmp5, tmp4);
        byte_f3 = simd_and(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_and(tmp7, tmp2);
        tmp9 = simd_and(basis_bits.bit_5, tmp5);
        tmp10 = simd_and(basis_bits.bit_4, tmp9);
        byte_range_b0_be = simd_andc(tmp8, tmp10);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(0), tmp11));
        byte_f3_byte_range_b0_be = simd_and(tmp11, byte_range_b0_be);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_b0_be, carryQ.get_carry_in(1), tmp12));
        byte_f3_byte_range_b0_be_sfx = simd_and(tmp12, byte_range_80_bf);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_f3_byte_range_b0_be_sfx, carryQ.get_carry_in(2), tmp13));
        byte_f3_byte_range_b0_be_sfx_sfx = simd_and(tmp13, byte_range_80_bf);
        struct_Co.cc = simd_or(struct_Co.cc, byte_f3_byte_range_b0_be_sfx_sfx);
        tmp14 = simd_and(byte_range_80_bf, tmp2);
        tmp15 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp16 = simd_and(tmp15, tmp5);
        byte_bf = simd_and(tmp14, tmp16);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(3), byte_f3_adv));
        sequence_f3_bf = simd_and(byte_f3_adv, byte_bf);
        tmp17 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp18 = simd_andc(byte_range_80_bf, tmp17);
        tmp19 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp20 = simd_or(tmp4, tmp19);
        byte_80 = simd_andc(tmp18, tmp20);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f3_bf, carryQ.get_carry_in(4), sequence_f3_bf_adv));
        sequence_f3_bf_80 = simd_and(sequence_f3_bf_adv, byte_80);
        tmp21 = simd_and(tmp15, basis_bits.bit_6);
        tmp22 = simd_and(basis_bits.bit_3, tmp21);
        tmp23 = simd_and(basis_bits.bit_2, tmp22);
        byte_range_80_bd = simd_andc(byte_range_80_bf, tmp23);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f3_bf_80, carryQ.get_carry_in(5), tmp24));
        sequence_f3_bf_80_byte_range_80_bd = simd_and(tmp24, byte_range_80_bd);
        struct_Co.cc = simd_or(struct_Co.cc, sequence_f3_bf_80_byte_range_80_bd);
        tmp25 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp25);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(6, 4))) {
          r800_ffff_tmp1 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp2 = simd_and(tmp15, r800_ffff_tmp1);
          byte_ee = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(byte_ee, carryQ.get_carry_in(6), r800_ffff_tmp3));
          byte_ee_byte_range_80_bf = simd_and(r800_ffff_tmp3, byte_range_80_bf);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(byte_ee_byte_range_80_bf, carryQ.get_carry_in(7), r800_ffff_tmp4));
          byte_ee_byte_range_80_bf_sfx = simd_and(r800_ffff_tmp4, byte_range_80_bf);
          struct_Co.cc = simd_or(struct_Co.cc, byte_ee_byte_range_80_bf_sfx);
          byte_ef = simd_and(byte_range_e0_ef, tmp16);
          r800_ffff_tmp5 = simd_or(basis_bits.bit_3, tmp4);
          r800_ffff_tmp6 = simd_and(basis_bits.bit_2, r800_ffff_tmp5);
          byte_range_80_a3 = simd_andc(byte_range_80_bf, r800_ffff_tmp6);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(8), r800_ffff_tmp7));
          byte_ef_byte_range_80_a3 = simd_and(r800_ffff_tmp7, byte_range_80_a3);
          carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_ef_byte_range_80_a3, carryQ.get_carry_in(9), r800_ffff_tmp8));
          byte_ef_byte_range_80_a3_sfx = simd_and(r800_ffff_tmp8, byte_range_80_bf);
          struct_Co.cc = simd_or(struct_Co.cc, byte_ef_byte_range_80_a3_sfx);
        }
        else {
          carryQ.CarryDequeueEnqueue(6, 4);
        }
  }
  CarryArray<10, 0> carryQ;
  };

  struct Cn {
  Cn() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Cn & struct_Cn) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f0, tmp7, tmp8, tmp9, tmp10;
		BitBlock tmp11, byte_91, tmp12, sequence_f0_91, byte_f0_adv, tmp13, tmp14;
		BitBlock byte_81, tmp15, sequence_f0_91_81, sequence_f0_91_adv, tmp16, tmp17;
		BitBlock tmp18, tmp19, tmp20, tmp21, tmp22, tmp23, cc_range_1104e_11070_4;
		BitBlock sequence_f0_91_81_adv, tmp24, tmp25, tmp26, byte_83;
		BitBlock sequence_f0_91_83, tmp27, tmp28, tmp29, tmp30, tmp31, tmp32, tmp33;
		BitBlock tmp34, tmp35, tmp36, tmp37, cc_range_110c2_110fa_4;
		BitBlock sequence_f0_91_83_adv, tmp38, tmp39, tmp40, byte_84;
		BitBlock sequence_f0_91_84, tmp41, byte_b5, sequence_f0_91_84_adv, tmp42;
		BitBlock byte_85, sequence_f0_91_85, tmp43, tmp44, byte_range_84_bf;
		BitBlock sequence_f0_91_85_adv, tmp45, tmp46, byte_87, sequence_f0_91_87;
		BitBlock tmp47, tmp48, tmp49, tmp50, tmp51, tmp52, cc_range_111c9_111da_4;
		BitBlock sequence_f0_91_87_adv, tmp53, tmp54, tmp55, byte_range_88_99;
		BitBlock sequence_f0_91_byte_range_88_99, byte_range_80_bf, tmp56;
		BitBlock sequence_f0_91_byte_range_88_99_sfx, tmp57, tmp58, tmp59, tmp60;
		BitBlock byte_9a, sequence_f0_91_9a, tmp61, byte_range_b8_bf, tmp62;
		BitBlock sequence_f0_91_9a_byte_range_b8_bf, tmp63, byte_9b, sequence_f0_91_9b;
		BitBlock tmp64, tmp65, byte_range_8a_bf, tmp66;
		BitBlock sequence_f0_91_9b_byte_range_8a_bf, tmp67, byte_9c, sequence_f0_91_9c;
		BitBlock tmp68, sequence_f0_91_9c_byte_range_80_bf, tmp69, byte_92;
		BitBlock sequence_f0_92, tmp70, tmp71, byte_8d, tmp72, sequence_f0_92_8d;
		BitBlock sequence_f0_92_adv, tmp73, tmp74, tmp75, byte_range_af_bf;
		BitBlock sequence_f0_92_8d_adv, tmp76, byte_range_8e_8f;
		BitBlock sequence_f0_92_byte_range_8e_8f, tmp77;
		BitBlock sequence_f0_92_byte_range_8e_8f_sfx, sequence_f0_92_91, tmp78, tmp79;
		BitBlock tmp80, byte_range_a3_af, tmp81, sequence_f0_92_91_byte_range_a3_af;
		BitBlock sequence_f0_92_92, tmp82, sequence_f0_92_92_byte_range_80_bf, byte_93;
		BitBlock sequence_f0_93, byte_90, tmp83, sequence_f0_93_90, sequence_f0_93_adv;
		BitBlock sequence_f0_93_90_adv, tmp84, tmp85, tmp86, byte_range_91_bf;
		BitBlock sequence_f0_93_byte_range_91_bf, tmp87;
		BitBlock sequence_f0_93_byte_range_91_bf_sfx, tmp88, byte_range_94_95;
		BitBlock byte_f0_byte_range_94_95, tmp89, byte_f0_byte_range_94_95_sfx, tmp90;
		BitBlock byte_f0_byte_range_94_95_sfx_sfx, tmp91, byte_96, sequence_f0_96;
		BitBlock byte_80, sequence_f0_96_adv, sequence_f0_96_80, tmp92;
		BitBlock sequence_f0_96_80_byte_range_80_bf, byte_97, sequence_f0_97;
		BitBlock sequence_f0_97_adv, sequence_f0_97_80, tmp93;
		BitBlock sequence_f0_97_80_byte_range_80_bf, sequence_f0_9b;
		BitBlock sequence_f0_9b_adv, sequence_f0_9b_80, tmp94, tmp95, byte_range_82_bf;
		BitBlock tmp96, sequence_f0_9b_80_byte_range_82_bf, sequence_f0_9c;
		BitBlock sequence_f0_9c_adv, sequence_f0_9c_80, tmp97;
		BitBlock sequence_f0_9c_80_byte_range_80_bf, byte_9d, sequence_f0_9d;
		BitBlock sequence_f0_9d_adv, sequence_f0_9d_83, tmp98, tmp99, byte_range_b6_bf;
		BitBlock tmp100, sequence_f0_9d_83_byte_range_b6_bf, tmp101, byte_9e;
		BitBlock sequence_f0_9e, sequence_f0_9e_adv, sequence_f0_9e_80, tmp102;
		BitBlock sequence_f0_9e_80_byte_range_80_bf, byte_9f, sequence_f0_9f;
		BitBlock sequence_f0_9f_adv, sequence_f0_9f_80, byte_range_ac_af, tmp103;
		BitBlock sequence_f0_9f_80_byte_range_ac_af, byte_aa, sequence_f0_aa;
		BitBlock sequence_f0_aa_adv, sequence_f0_aa_9b, tmp104, tmp105, tmp106, tmp107;
		BitBlock byte_range_97_bf, tmp108, sequence_f0_aa_9b_byte_range_97_bf, byte_ab;
		BitBlock sequence_f0_ab, sequence_f0_ab_adv, sequence_f0_ab_9c, tmp109, tmp110;
		BitBlock byte_range_b5_bf, tmp111, sequence_f0_ab_9c_byte_range_b5_bf, byte_ac;
		BitBlock sequence_f0_ac, sequence_f0_ac_adv, sequence_f0_ac_80, tmp112;
		BitBlock sequence_f0_ac_80_byte_range_80_bf, byte_af, sequence_f0_af;
		BitBlock sequence_f0_af_adv, sequence_f0_af_80, tmp113;
		BitBlock sequence_f0_af_80_byte_range_80_bf, byte_b0, sequence_f0_b0;
		BitBlock sequence_f0_b0_adv, sequence_f0_b0_80, tmp114;
		BitBlock sequence_f0_b0_80_byte_range_80_bf, tmp115, tmp116, tmp117;
		BitBlock byte_range_f1_f2, tmp118, byte_range_f1_f2_sfx, tmp119;
		BitBlock byte_range_f1_f2_sfx_sfx, tmp120, byte_range_f1_f2_sfx_sfx_sfx;
		BitBlock byte_f3, byte_f3_adv, sequence_f3_80, sequence_f3_80_adv;
		BitBlock sequence_f3_80_80, tmp121, sequence_f3_80_80_80, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, byte_cd, r80_7ff_tmp2, r80_7ff_tmp3, cc_range_378_37f_2;
		BitBlock byte_cd_adv, r80_7ff_tmp4, byte_ce, r80_7ff_tmp5, r80_7ff_tmp6;
		BitBlock r80_7ff_tmp7, r80_7ff_tmp8, cc_range_380_3a2_2, byte_ce_adv;
		BitBlock r80_7ff_tmp9, r80_7ff_tmp10, byte_d4, r80_7ff_tmp11, r80_7ff_tmp12;
		BitBlock byte_range_a8_b0, byte_d4_adv, r80_7ff_tmp13, byte_d5, r80_7ff_tmp14;
		BitBlock r80_7ff_tmp15, r80_7ff_tmp16, r80_7ff_tmp17, cc_range_557_560_2;
		BitBlock byte_d5_adv, r80_7ff_tmp18, byte_d6, r80_7ff_tmp19, r80_7ff_tmp20;
		BitBlock r80_7ff_tmp21, r80_7ff_tmp22, r80_7ff_tmp23, r80_7ff_tmp24;
		BitBlock r80_7ff_tmp25, cc_range_588_590_2, byte_d6_adv, r80_7ff_tmp26;
		BitBlock byte_d7, r80_7ff_tmp27, r80_7ff_tmp28, r80_7ff_tmp29;
		BitBlock cc_range_5c8_5f5_2, byte_d7_adv, r80_7ff_tmp30, byte_d8;
		BitBlock r80_7ff_tmp31, cc_range_605_61d_2, byte_d8_adv, r80_7ff_tmp32;
		BitBlock byte_dc, byte_8e, byte_dc_adv, r80_7ff_tmp33, byte_dd, r80_7ff_tmp34;
		BitBlock r80_7ff_tmp35, byte_range_8b_8c, byte_dd_adv, r80_7ff_tmp36, byte_de;
		BitBlock byte_range_b2_bf, byte_de_adv, r80_7ff_tmp37, byte_df;
		BitBlock byte_range_bb_bf, byte_df_adv, r80_7ff_tmp38, byte_range_e0_ef;
		BitBlock byte_e0, byte_a0, r800_ffff_tmp1, sequence_e0_a0, byte_e0_adv;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, cc_range_82e_83f_3;
		BitBlock sequence_e0_a0_adv, r800_ffff_tmp4, byte_a1, sequence_e0_a1;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, cc_range_85c_85f_3, sequence_e0_a1_adv;
		BitBlock r800_ffff_tmp10, byte_a2, sequence_e0_a2, r800_ffff_tmp11;
		BitBlock r800_ffff_tmp12, r800_ffff_tmp13, r800_ffff_tmp14, r800_ffff_tmp15;
		BitBlock cc_range_880_8ad_3, sequence_e0_a2_adv, r800_ffff_tmp16, byte_a3;
		BitBlock sequence_e0_a3, r800_ffff_tmp17, r800_ffff_tmp18, cc_range_8c0_8ff_3;
		BitBlock sequence_e0_a3_adv, r800_ffff_tmp19, byte_a5, sequence_e0_a5;
		BitBlock r800_ffff_tmp20, byte_b8, sequence_e0_a5_adv, r800_ffff_tmp21;
		BitBlock byte_a6, sequence_e0_a6, r800_ffff_tmp22, r800_ffff_tmp23;
		BitBlock r800_ffff_tmp24, r800_ffff_tmp25, r800_ffff_tmp26, r800_ffff_tmp27;
		BitBlock r800_ffff_tmp28, r800_ffff_tmp29, r800_ffff_tmp30, r800_ffff_tmp31;
		BitBlock r800_ffff_tmp32, r800_ffff_tmp33, r800_ffff_tmp34, r800_ffff_tmp35;
		BitBlock r800_ffff_tmp36, r800_ffff_tmp37, r800_ffff_tmp38, r800_ffff_tmp39;
		BitBlock r800_ffff_tmp40, r800_ffff_tmp41, cc_range_980_9ba_3;
		BitBlock sequence_e0_a6_adv, r800_ffff_tmp42, byte_a7, sequence_e0_a7;
		BitBlock r800_ffff_tmp43, r800_ffff_tmp44, r800_ffff_tmp45, r800_ffff_tmp46;
		BitBlock r800_ffff_tmp47, r800_ffff_tmp48, r800_ffff_tmp49, r800_ffff_tmp50;
		BitBlock r800_ffff_tmp51, r800_ffff_tmp52, r800_ffff_tmp53, r800_ffff_tmp54;
		BitBlock r800_ffff_tmp55, cc_range_9c5_9fc_3, sequence_e0_a7_adv;
		BitBlock r800_ffff_tmp56, byte_a8, sequence_e0_a8, r800_ffff_tmp57;
		BitBlock r800_ffff_tmp58, r800_ffff_tmp59, r800_ffff_tmp60, r800_ffff_tmp61;
		BitBlock r800_ffff_tmp62, r800_ffff_tmp63, r800_ffff_tmp64, r800_ffff_tmp65;
		BitBlock r800_ffff_tmp66, r800_ffff_tmp67, r800_ffff_tmp68, r800_ffff_tmp69;
		BitBlock r800_ffff_tmp70, cc_range_a00_a3d_3, sequence_e0_a8_adv;
		BitBlock r800_ffff_tmp71, byte_a9, sequence_e0_a9, r800_ffff_tmp72;
		BitBlock r800_ffff_tmp73, r800_ffff_tmp74, r800_ffff_tmp75, r800_ffff_tmp76;
		BitBlock r800_ffff_tmp77, r800_ffff_tmp78, r800_ffff_tmp79, r800_ffff_tmp80;
		BitBlock r800_ffff_tmp81, r800_ffff_tmp82, r800_ffff_tmp83, r800_ffff_tmp84;
		BitBlock r800_ffff_tmp85, r800_ffff_tmp86, r800_ffff_tmp87, r800_ffff_tmp88;
		BitBlock r800_ffff_tmp89, r800_ffff_tmp90, cc_range_a43_a76_3;
		BitBlock sequence_e0_a9_adv, r800_ffff_tmp91, sequence_e0_aa, r800_ffff_tmp92;
		BitBlock r800_ffff_tmp93, r800_ffff_tmp94, r800_ffff_tmp95, r800_ffff_tmp96;
		BitBlock r800_ffff_tmp97, cc_range_a80_aba_3, sequence_e0_aa_adv;
		BitBlock r800_ffff_tmp98, sequence_e0_ab, r800_ffff_tmp99, r800_ffff_tmp100;
		BitBlock r800_ffff_tmp101, r800_ffff_tmp102, r800_ffff_tmp103;
		BitBlock r800_ffff_tmp104, r800_ffff_tmp105, r800_ffff_tmp106;
		BitBlock cc_range_ac6_af2_3, sequence_e0_ab_adv, r800_ffff_tmp107;
		BitBlock sequence_e0_ac, r800_ffff_tmp108, r800_ffff_tmp109, r800_ffff_tmp110;
		BitBlock cc_range_b00_b3a_3, sequence_e0_ac_adv, r800_ffff_tmp111, byte_ad;
		BitBlock sequence_e0_ad, r800_ffff_tmp112, r800_ffff_tmp113, r800_ffff_tmp114;
		BitBlock r800_ffff_tmp115, r800_ffff_tmp116, r800_ffff_tmp117;
		BitBlock r800_ffff_tmp118, cc_range_b45_b78_3, sequence_e0_ad_adv;
		BitBlock r800_ffff_tmp119, byte_ae, sequence_e0_ae, r800_ffff_tmp120;
		BitBlock r800_ffff_tmp121, r800_ffff_tmp122, r800_ffff_tmp123;
		BitBlock r800_ffff_tmp124, r800_ffff_tmp125, r800_ffff_tmp126;
		BitBlock r800_ffff_tmp127, r800_ffff_tmp128, r800_ffff_tmp129;
		BitBlock r800_ffff_tmp130, r800_ffff_tmp131, r800_ffff_tmp132;
		BitBlock r800_ffff_tmp133, r800_ffff_tmp134, r800_ffff_tmp135;
		BitBlock r800_ffff_tmp136, r800_ffff_tmp137, r800_ffff_tmp138;
		BitBlock r800_ffff_tmp139, r800_ffff_tmp140, r800_ffff_tmp141;
		BitBlock cc_range_b80_bba_3, sequence_e0_ae_adv, r800_ffff_tmp142;
		BitBlock sequence_e0_af, r800_ffff_tmp143, r800_ffff_tmp144, r800_ffff_tmp145;
		BitBlock r800_ffff_tmp146, r800_ffff_tmp147, r800_ffff_tmp148;
		BitBlock r800_ffff_tmp149, r800_ffff_tmp150, r800_ffff_tmp151;
		BitBlock r800_ffff_tmp152, r800_ffff_tmp153, r800_ffff_tmp154;
		BitBlock r800_ffff_tmp155, cc_range_bc3_bfb_3, sequence_e0_af_adv;
		BitBlock r800_ffff_tmp156, sequence_e0_b0, r800_ffff_tmp157, r800_ffff_tmp158;
		BitBlock r800_ffff_tmp159, r800_ffff_tmp160, r800_ffff_tmp161;
		BitBlock r800_ffff_tmp162, r800_ffff_tmp163, r800_ffff_tmp164;
		BitBlock cc_range_c00_c3a_3, sequence_e0_b0_adv, r800_ffff_tmp165, byte_b1;
		BitBlock sequence_e0_b1, r800_ffff_tmp166, r800_ffff_tmp167, r800_ffff_tmp168;
		BitBlock r800_ffff_tmp169, r800_ffff_tmp170, r800_ffff_tmp171;
		BitBlock r800_ffff_tmp172, r800_ffff_tmp173, r800_ffff_tmp174;
		BitBlock r800_ffff_tmp175, r800_ffff_tmp176, cc_range_c45_c70_3;
		BitBlock sequence_e0_b1_adv, r800_ffff_tmp177, byte_b2, sequence_e0_b2;
		BitBlock r800_ffff_tmp178, r800_ffff_tmp179, r800_ffff_tmp180;
		BitBlock r800_ffff_tmp181, r800_ffff_tmp182, cc_range_c80_cba_3;
		BitBlock sequence_e0_b2_adv, r800_ffff_tmp183, byte_b3, sequence_e0_b3;
		BitBlock r800_ffff_tmp184, r800_ffff_tmp185, r800_ffff_tmp186;
		BitBlock r800_ffff_tmp187, r800_ffff_tmp188, r800_ffff_tmp189;
		BitBlock r800_ffff_tmp190, r800_ffff_tmp191, cc_range_cc5_cf3_3;
		BitBlock sequence_e0_b3_adv, r800_ffff_tmp192, byte_b4, sequence_e0_b4;
		BitBlock r800_ffff_tmp193, r800_ffff_tmp194, cc_range_d00_d3b_3;
		BitBlock sequence_e0_b4_adv, r800_ffff_tmp195, sequence_e0_b5;
		BitBlock r800_ffff_tmp196, r800_ffff_tmp197, r800_ffff_tmp198;
		BitBlock r800_ffff_tmp199, cc_range_d45_d76_3, sequence_e0_b5_adv;
		BitBlock r800_ffff_tmp200, byte_b6, sequence_e0_b6, r800_ffff_tmp201;
		BitBlock r800_ffff_tmp202, r800_ffff_tmp203, r800_ffff_tmp204;
		BitBlock r800_ffff_tmp205, r800_ffff_tmp206, r800_ffff_tmp207;
		BitBlock r800_ffff_tmp208, cc_range_d80_dbe_3, sequence_e0_b6_adv;
		BitBlock r800_ffff_tmp209, byte_b7, sequence_e0_b7, r800_ffff_tmp210;
		BitBlock r800_ffff_tmp211, r800_ffff_tmp212, r800_ffff_tmp213;
		BitBlock r800_ffff_tmp214, r800_ffff_tmp215, r800_ffff_tmp216;
		BitBlock r800_ffff_tmp217, cc_range_dc7_df5_3, sequence_e0_b7_adv;
		BitBlock r800_ffff_tmp218, sequence_e0_b8, r800_ffff_tmp219;
		BitBlock cc_range_e00_e3b_3, sequence_e0_b8_adv, r800_ffff_tmp220, byte_b9;
		BitBlock sequence_e0_b9, r800_ffff_tmp221, r800_ffff_tmp222, byte_range_9c_bf;
		BitBlock sequence_e0_b9_adv, r800_ffff_tmp223, byte_ba, sequence_e0_ba;
		BitBlock r800_ffff_tmp224, r800_ffff_tmp225, r800_ffff_tmp226;
		BitBlock r800_ffff_tmp227, r800_ffff_tmp228, r800_ffff_tmp229;
		BitBlock r800_ffff_tmp230, r800_ffff_tmp231, r800_ffff_tmp232;
		BitBlock r800_ffff_tmp233, r800_ffff_tmp234, r800_ffff_tmp235;
		BitBlock r800_ffff_tmp236, r800_ffff_tmp237, r800_ffff_tmp238;
		BitBlock r800_ffff_tmp239, r800_ffff_tmp240, r800_ffff_tmp241;
		BitBlock r800_ffff_tmp242, r800_ffff_tmp243, r800_ffff_tmp244;
		BitBlock r800_ffff_tmp245, r800_ffff_tmp246, cc_range_e80_ebe_3;
		BitBlock sequence_e0_ba_adv, r800_ffff_tmp247, byte_bb, sequence_e0_bb;
		BitBlock r800_ffff_tmp248, r800_ffff_tmp249, r800_ffff_tmp250;
		BitBlock r800_ffff_tmp251, r800_ffff_tmp252, cc_range_ec5_ee0_3;
		BitBlock sequence_e0_bb_adv, r800_ffff_tmp253, byte_bd, sequence_e0_bd;
		BitBlock r800_ffff_tmp254, r800_ffff_tmp255, r800_ffff_tmp256;
		BitBlock cc_range_f48_f6d_3, sequence_e0_bd_adv, r800_ffff_tmp257, byte_be;
		BitBlock sequence_e0_be, cc_range_f98_fbd_3, sequence_e0_be_adv;
		BitBlock r800_ffff_tmp258, byte_bf, sequence_e0_bf, r800_ffff_tmp259;
		BitBlock r800_ffff_tmp260, r800_ffff_tmp261, r800_ffff_tmp262;
		BitBlock cc_range_fcd_fdb_3, sequence_e0_bf_adv, r800_ffff_tmp263, byte_e1;
		BitBlock r800_ffff_tmp264, sequence_e1_83, byte_e1_adv, r800_ffff_tmp265;
		BitBlock r800_ffff_tmp266, r800_ffff_tmp267, cc_range_10c6_10ce_3;
		BitBlock sequence_e1_83_adv, r800_ffff_tmp268, byte_89, sequence_e1_89;
		BitBlock r800_ffff_tmp269, r800_ffff_tmp270, r800_ffff_tmp271;
		BitBlock r800_ffff_tmp272, r800_ffff_tmp273, r800_ffff_tmp274;
		BitBlock cc_range_1249_125e_3, sequence_e1_89_adv, r800_ffff_tmp275, byte_8a;
		BitBlock sequence_e1_8a, r800_ffff_tmp276, r800_ffff_tmp277, r800_ffff_tmp278;
		BitBlock r800_ffff_tmp279, cc_range_1289_12bf_3, sequence_e1_8a_adv;
		BitBlock r800_ffff_tmp280, byte_8b, sequence_e1_8b, r800_ffff_tmp281;
		BitBlock r800_ffff_tmp282, cc_range_12c1_12d7_3, sequence_e1_8b_adv;
		BitBlock r800_ffff_tmp283, byte_8c, sequence_e1_8c, cc_range_1311_1316_3;
		BitBlock sequence_e1_8c_adv, r800_ffff_tmp284, sequence_e1_8d;
		BitBlock r800_ffff_tmp285, r800_ffff_tmp286, cc_range_135b_137d_3;
		BitBlock sequence_e1_8d_adv, r800_ffff_tmp287, sequence_e1_8e;
		BitBlock byte_range_9a_9f, sequence_e1_8e_adv, r800_ffff_tmp288, byte_8f;
		BitBlock sequence_e1_8f, sequence_e1_8f_adv, r800_ffff_tmp289, sequence_e1_9a;
		BitBlock r800_ffff_tmp290, byte_range_9d_9f, sequence_e1_9a_adv;
		BitBlock r800_ffff_tmp291, sequence_e1_9b, byte_range_b1_bf;
		BitBlock sequence_e1_9b_adv, r800_ffff_tmp292, sequence_e1_9c;
		BitBlock r800_ffff_tmp293, r800_ffff_tmp294, r800_ffff_tmp295;
		BitBlock cc_range_170d_1737_3, sequence_e1_9c_adv, r800_ffff_tmp296;
		BitBlock sequence_e1_9d, r800_ffff_tmp297, r800_ffff_tmp298, r800_ffff_tmp299;
		BitBlock r800_ffff_tmp300, cc_range_1754_1774_3, sequence_e1_9d_adv;
		BitBlock r800_ffff_tmp301, sequence_e1_9f, r800_ffff_tmp302, r800_ffff_tmp303;
		BitBlock r800_ffff_tmp304, cc_range_17de_17fa_3, sequence_e1_9f_adv;
		BitBlock r800_ffff_tmp305, sequence_e1_a0, cc_range_180f_181a_3;
		BitBlock sequence_e1_a0_adv, r800_ffff_tmp306, sequence_e1_a1;
		BitBlock sequence_e1_a1_adv, r800_ffff_tmp307, sequence_e1_a2;
		BitBlock byte_range_ab_af, sequence_e1_a2_adv, r800_ffff_tmp308;
		BitBlock sequence_e1_a3, sequence_e1_a3_adv, r800_ffff_tmp309, byte_a4;
		BitBlock sequence_e1_a4, r800_ffff_tmp310, cc_range_191d_193c_3;
		BitBlock sequence_e1_a4_adv, r800_ffff_tmp311, sequence_e1_a5;
		BitBlock r800_ffff_tmp312, r800_ffff_tmp313, r800_ffff_tmp314;
		BitBlock cc_range_1941_1975_3, sequence_e1_a5_adv, r800_ffff_tmp315;
		BitBlock sequence_e1_a6, sequence_e1_a6_adv, r800_ffff_tmp316, sequence_e1_a7;
		BitBlock r800_ffff_tmp317, r800_ffff_tmp318, cc_range_19ca_19db_3;
		BitBlock sequence_e1_a7_adv, r800_ffff_tmp319, sequence_e1_a8;
		BitBlock byte_range_9c_9d, sequence_e1_a8_adv, r800_ffff_tmp320;
		BitBlock sequence_e1_a9, r800_ffff_tmp321, cc_range_1a5f_1a7d_3;
		BitBlock sequence_e1_a9_adv, r800_ffff_tmp322, sequence_e1_aa;
		BitBlock r800_ffff_tmp323, r800_ffff_tmp324, r800_ffff_tmp325;
		BitBlock r800_ffff_tmp326, r800_ffff_tmp327, r800_ffff_tmp328;
		BitBlock cc_range_1a8a_1aae_3, sequence_e1_aa_adv, r800_ffff_tmp329;
		BitBlock sequence_e1_ab, sequence_e1_ab_adv, r800_ffff_tmp330, sequence_e1_ad;
		BitBlock cc_range_1b4c_1b7d_3, sequence_e1_ad_adv, r800_ffff_tmp331;
		BitBlock sequence_e1_af, r800_ffff_tmp332, r800_ffff_tmp333, byte_range_b4_bb;
		BitBlock sequence_e1_af_adv, r800_ffff_tmp334, sequence_e1_b0;
		BitBlock r800_ffff_tmp335, byte_range_b8_ba, sequence_e1_b0_adv;
		BitBlock r800_ffff_tmp336, sequence_e1_b1, byte_range_8a_8c;
		BitBlock sequence_e1_b1_adv, r800_ffff_tmp337, sequence_e1_b2;
		BitBlock sequence_e1_b2_adv, r800_ffff_tmp338, sequence_e1_b3;
		BitBlock cc_range_1cc8_1cf7_3, sequence_e1_b3_adv, r800_ffff_tmp339;
		BitBlock sequence_e1_b7, r800_ffff_tmp340, r800_ffff_tmp341, byte_range_a7_bb;
		BitBlock sequence_e1_b7_adv, r800_ffff_tmp342, byte_bc, sequence_e1_bc;
		BitBlock r800_ffff_tmp343, cc_range_1f16_1f1e_3, sequence_e1_bc_adv;
		BitBlock r800_ffff_tmp344, sequence_e1_bd, r800_ffff_tmp345, r800_ffff_tmp346;
		BitBlock r800_ffff_tmp347, r800_ffff_tmp348, r800_ffff_tmp349;
		BitBlock cc_range_1f46_1f7e_3, sequence_e1_bd_adv, r800_ffff_tmp350;
		BitBlock sequence_e1_be, sequence_e1_be_adv, r800_ffff_tmp351, sequence_e1_bf;
		BitBlock r800_ffff_tmp352, r800_ffff_tmp353, r800_ffff_tmp354;
		BitBlock r800_ffff_tmp355, r800_ffff_tmp356, r800_ffff_tmp357;
		BitBlock r800_ffff_tmp358, cc_range_1fc5_1fff_3, sequence_e1_bf_adv;
		BitBlock r800_ffff_tmp359, byte_e2, r800_ffff_tmp360, sequence_e2_81;
		BitBlock byte_e2_adv, r800_ffff_tmp361, r800_ffff_tmp362, cc_range_2065_2072_3;
		BitBlock sequence_e2_81_adv, r800_ffff_tmp363, byte_82, sequence_e2_82;
		BitBlock r800_ffff_tmp364, cc_range_208f_20bb_3, sequence_e2_82_adv;
		BitBlock r800_ffff_tmp365, sequence_e2_83, cc_range_20c0_20f1_3;
		BitBlock sequence_e2_83_adv, r800_ffff_tmp366, byte_86, sequence_e2_86;
		BitBlock byte_range_8a_8f, sequence_e2_86_adv, r800_ffff_tmp367;
		BitBlock sequence_e2_8f, byte_range_b4_bf, sequence_e2_8f_adv;
		BitBlock r800_ffff_tmp368, sequence_e2_90, r800_ffff_tmp369, byte_range_a7_bf;
		BitBlock sequence_e2_90_adv, r800_ffff_tmp370, sequence_e2_91;
		BitBlock r800_ffff_tmp371, byte_range_8b_9f, sequence_e2_91_adv;
		BitBlock r800_ffff_tmp372, sequence_e2_9c, sequence_e2_9c_adv;
		BitBlock r800_ffff_tmp373, sequence_e2_ad, r800_ffff_tmp374, r800_ffff_tmp375;
		BitBlock cc_range_2b4d_2b5a_3, sequence_e2_ad_adv, r800_ffff_tmp376;
		BitBlock byte_range_ae_af, byte_e2_byte_range_ae_af, r800_ffff_tmp377;
		BitBlock byte_e2_byte_range_ae_af_sfx, sequence_e2_b0, r800_ffff_tmp378;
		BitBlock sequence_e2_b0_af, sequence_e2_b1, r800_ffff_tmp379;
		BitBlock sequence_e2_b1_9f, sequence_e2_b3, r800_ffff_tmp380, byte_range_b4_b8;
		BitBlock r800_ffff_tmp381, sequence_e2_b3_byte_range_b4_b8, sequence_e2_b4;
		BitBlock r800_ffff_tmp382, sequence_e2_b4_a6, sequence_e2_b5, byte_range_a8_ae;
		BitBlock r800_ffff_tmp383, sequence_e2_b5_byte_range_a8_ae, sequence_e2_b6;
		BitBlock byte_range_97_9f, r800_ffff_tmp384, sequence_e2_b6_byte_range_97_9f;
		BitBlock sequence_e2_b7, r800_ffff_tmp385, sequence_e2_b7_87, sequence_e2_b8;
		BitBlock byte_range_bc_bf, r800_ffff_tmp386, sequence_e2_b8_byte_range_bc_bf;
		BitBlock sequence_e2_b9, r800_ffff_tmp387, sequence_e2_b9_byte_range_80_bf;
		BitBlock sequence_e2_ba, r800_ffff_tmp388, sequence_e2_ba_9a, sequence_e2_bb;
		BitBlock r800_ffff_tmp389, sequence_e2_bb_byte_range_b4_bf, sequence_e2_bf;
		BitBlock r800_ffff_tmp390, r800_ffff_tmp391, r800_ffff_tmp392;
		BitBlock byte_range_96_af, r800_ffff_tmp393, sequence_e2_bf_byte_range_96_af;
		BitBlock byte_e3, r800_ffff_tmp394, sequence_e3_81, byte_e3_adv;
		BitBlock sequence_e3_81_adv, r800_ffff_tmp395, sequence_e3_82;
		BitBlock r800_ffff_tmp396, byte_range_97_98, sequence_e3_82_adv;
		BitBlock r800_ffff_tmp397, sequence_e3_84, r800_ffff_tmp398, r800_ffff_tmp399;
		BitBlock cc_range_3100_312e_3, sequence_e3_84_adv, r800_ffff_tmp400;
		BitBlock sequence_e3_86, cc_range_318f_31bb_3, sequence_e3_86_adv;
		BitBlock r800_ffff_tmp401, sequence_e3_87, byte_range_a4_af;
		BitBlock sequence_e3_87_adv, r800_ffff_tmp402, byte_88, sequence_e3_88;
		BitBlock sequence_e3_88_adv, r800_ffff_tmp403, sequence_e3_8b;
		BitBlock sequence_e3_8b_adv, r800_ffff_tmp404, byte_e4, r800_ffff_tmp405;
		BitBlock sequence_e4_b6, byte_e4_adv, sequence_e4_b6_adv, r800_ffff_tmp406;
		BitBlock byte_e9, r800_ffff_tmp407, sequence_e9_bf, byte_e9_adv;
		BitBlock r800_ffff_tmp408, byte_range_8d_bf, sequence_e9_bf_adv;
		BitBlock r800_ffff_tmp409, byte_ea, r800_ffff_tmp410, sequence_ea_92;
		BitBlock byte_ea_adv, byte_range_8d_8f, sequence_ea_92_adv, r800_ffff_tmp411;
		BitBlock sequence_ea_93, byte_range_87_8f, sequence_ea_93_adv;
		BitBlock r800_ffff_tmp412, byte_98, sequence_ea_98, r800_ffff_tmp413;
		BitBlock byte_range_ac_bf, sequence_ea_98_adv, r800_ffff_tmp414;
		BitBlock sequence_ea_9a, byte_range_98_9e, sequence_ea_9a_adv;
		BitBlock r800_ffff_tmp415, sequence_ea_9b, sequence_ea_9b_adv;
		BitBlock r800_ffff_tmp416, sequence_ea_9e, r800_ffff_tmp417, r800_ffff_tmp418;
		BitBlock cc_range_a78f_a7ab_3, sequence_ea_9e_adv, r800_ffff_tmp419;
		BitBlock sequence_ea_9f, r800_ffff_tmp420, byte_range_80_b7;
		BitBlock sequence_ea_9f_adv, r800_ffff_tmp421, sequence_ea_a0;
		BitBlock cc_range_a82c_a83a_3, sequence_ea_a0_adv, r800_ffff_tmp422;
		BitBlock sequence_ea_a1, sequence_ea_a1_adv, r800_ffff_tmp423, sequence_ea_a3;
		BitBlock r800_ffff_tmp424, r800_ffff_tmp425, r800_ffff_tmp426;
		BitBlock cc_range_a8c5_a8fc_3, sequence_ea_a3_adv, r800_ffff_tmp427;
		BitBlock sequence_ea_a5, r800_ffff_tmp428, r800_ffff_tmp429, r800_ffff_tmp430;
		BitBlock r800_ffff_tmp431, cc_range_a954_a97d_3, sequence_ea_a5_adv;
		BitBlock r800_ffff_tmp432, sequence_ea_a7, r800_ffff_tmp433, r800_ffff_tmp434;
		BitBlock cc_range_a9ce_a9e0_3, sequence_ea_a7_adv, r800_ffff_tmp435;
		BitBlock sequence_ea_a8, byte_range_b7_bf, sequence_ea_a8_adv;
		BitBlock r800_ffff_tmp436, sequence_ea_a9, r800_ffff_tmp437;
		BitBlock cc_range_aa4e_aa7c_3, sequence_ea_a9_adv, r800_ffff_tmp438;
		BitBlock sequence_ea_ab, r800_ffff_tmp439, r800_ffff_tmp440, r800_ffff_tmp441;
		BitBlock r800_ffff_tmp442, cc_range_aac3_aaf7_3, sequence_ea_ab_adv;
		BitBlock r800_ffff_tmp443, sequence_ea_ac, r800_ffff_tmp444, r800_ffff_tmp445;
		BitBlock r800_ffff_tmp446, r800_ffff_tmp447, r800_ffff_tmp448;
		BitBlock r800_ffff_tmp449, r800_ffff_tmp450, cc_range_ab00_ab2f_3;
		BitBlock sequence_ea_ac_adv, r800_ffff_tmp451, byte_range_ad_ae;
		BitBlock byte_ea_byte_range_ad_ae, r800_ffff_tmp452;
		BitBlock byte_ea_byte_range_ad_ae_sfx, sequence_ea_af, r800_ffff_tmp453;
		BitBlock sequence_ea_af_byte_range_ae_af, byte_ed, r800_ffff_tmp454;
		BitBlock sequence_ed_9e, byte_ed_adv, sequence_ed_9e_adv, r800_ffff_tmp455;
		BitBlock sequence_ed_9f, r800_ffff_tmp456, r800_ffff_tmp457, r800_ffff_tmp458;
		BitBlock cc_range_d7c7_d7fc_3, sequence_ed_9f_adv, r800_ffff_tmp459, byte_ef;
		BitBlock r800_ffff_tmp460, sequence_ef_a9, byte_ef_adv, sequence_ef_a9_adv;
		BitBlock r800_ffff_tmp461, sequence_ef_ab, byte_range_9a_bf;
		BitBlock sequence_ef_ab_adv, r800_ffff_tmp462, sequence_ef_ac;
		BitBlock r800_ffff_tmp463, r800_ffff_tmp464, r800_ffff_tmp465;
		BitBlock r800_ffff_tmp466, r800_ffff_tmp467, r800_ffff_tmp468;
		BitBlock r800_ffff_tmp469, cc_range_fb07_fb3f_3, sequence_ef_ac_adv;
		BitBlock r800_ffff_tmp470, sequence_ef_ad, r800_ffff_tmp471;
		BitBlock cc_range_fb42_fb45_3, sequence_ef_ad_adv, r800_ffff_tmp472;
		BitBlock sequence_ef_af, r800_ffff_tmp473, byte_range_82_92;
		BitBlock sequence_ef_af_adv, r800_ffff_tmp474, sequence_ef_b5;
		BitBlock byte_range_80_8f, sequence_ef_b5_adv, r800_ffff_tmp475;
		BitBlock sequence_ef_b6, byte_range_90_91, sequence_ef_b6_adv;
		BitBlock r800_ffff_tmp476, sequence_ef_b7, r800_ffff_tmp477, r800_ffff_tmp478;
		BitBlock r800_ffff_tmp479, cc_range_fdc8_fdfe_3, sequence_ef_b7_adv;
		BitBlock r800_ffff_tmp480, sequence_ef_b8, r800_ffff_tmp481;
		BitBlock cc_range_fe1a_fe27_3, sequence_ef_b8_adv, r800_ffff_tmp482;
		BitBlock sequence_ef_b9, r800_ffff_tmp483, r800_ffff_tmp484;
		BitBlock cc_range_fe53_fe75_3, sequence_ef_b9_adv, r800_ffff_tmp485;
		BitBlock sequence_ef_bb, byte_range_bd_be, sequence_ef_bb_adv;
		BitBlock r800_ffff_tmp486, sequence_ef_bc, sequence_ef_bc_adv;
		BitBlock r800_ffff_tmp487, sequence_ef_be, sequence_ef_be_adv;
		BitBlock r800_ffff_tmp488, sequence_ef_bf, r800_ffff_tmp489, r800_ffff_tmp490;
		BitBlock r800_ffff_tmp491, r800_ffff_tmp492, r800_ffff_tmp493;
		BitBlock r800_ffff_tmp494, r800_ffff_tmp495, r800_ffff_tmp496;
		BitBlock r800_ffff_tmp497, r800_ffff_tmp498, r800_ffff_tmp499;
		BitBlock r800_ffff_tmp500, cc_range_ffc0_fffe_3, sequence_ef_bf_adv;
		BitBlock r800_ffff_tmp501, sequence_f0_90, tmp122;
		BitBlock sequence_f0_90_byte_range_80_bf, tmp123;
		BitBlock sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock sequence_f0_90_80, sequence_f0_90_adv, r10000_10fff_tmp1;
		BitBlock r10000_10fff_tmp2, r10000_10fff_tmp3, r10000_10fff_tmp4;
		BitBlock r10000_10fff_tmp5, r10000_10fff_tmp6, cc_range_1000c_1003e_4;
		BitBlock sequence_f0_90_80_adv, r10000_10fff_tmp7, sequence_f0_90_81;
		BitBlock r10000_10fff_tmp8, r10000_10fff_tmp9, r10000_10fff_tmp10;
		BitBlock cc_range_1004e_1005e_4, sequence_f0_90_81_adv, r10000_10fff_tmp11;
		BitBlock sequence_f0_90_83, sequence_f0_90_83_adv, r10000_10fff_tmp12;
		BitBlock sequence_f0_90_84, r10000_10fff_tmp13, r10000_10fff_tmp14;
		BitBlock r10000_10fff_tmp15, r10000_10fff_tmp16, r10000_10fff_tmp17;
		BitBlock r10000_10fff_tmp18, cc_range_10103_10134_4, sequence_f0_90_84_adv;
		BitBlock r10000_10fff_tmp19, sequence_f0_90_86, r10000_10fff_tmp20;
		BitBlock r10000_10fff_tmp21, r10000_10fff_tmp22, r10000_10fff_tmp23;
		BitBlock r10000_10fff_tmp24, cc_range_1018b_1019c_4, sequence_f0_90_86_adv;
		BitBlock r10000_10fff_tmp25, sequence_f0_90_87, r10000_10fff_tmp26;
		BitBlock cc_range_101c0_101fe_4, sequence_f0_90_87_adv, r10000_10fff_tmp27;
		BitBlock r10000_10fff_tmp28, byte_range_88_89, sequence_f0_90_byte_range_88_89;
		BitBlock r10000_10fff_tmp29, sequence_f0_90_byte_range_88_89_sfx;
		BitBlock sequence_f0_90_8a, r10000_10fff_tmp30, r10000_10fff_tmp31;
		BitBlock sequence_f0_90_8a_byte_range_9d_9f, sequence_f0_90_8b;
		BitBlock r10000_10fff_tmp32, sequence_f0_90_8b_byte_range_91_bf;
		BitBlock sequence_f0_90_8c, r10000_10fff_tmp33, sequence_f0_90_8c_9f;
		BitBlock sequence_f0_90_8d, r10000_10fff_tmp34, r10000_10fff_tmp35;
		BitBlock r10000_10fff_tmp36, byte_range_8b_bf, r10000_10fff_tmp37;
		BitBlock sequence_f0_90_8d_byte_range_8b_bf, sequence_f0_90_8e;
		BitBlock r10000_10fff_tmp38, sequence_f0_90_8e_9e, sequence_f0_90_8f;
		BitBlock byte_range_84_87, r10000_10fff_tmp39;
		BitBlock sequence_f0_90_8f_byte_range_84_87, sequence_f0_90_92;
		BitBlock byte_range_9e_9f, r10000_10fff_tmp40;
		BitBlock sequence_f0_90_92_byte_range_9e_9f, sequence_f0_90_93;
		BitBlock r10000_10fff_tmp41, sequence_f0_90_93_byte_range_80_bf;
		BitBlock sequence_f0_90_a0, r10000_10fff_tmp42, byte_range_86_87;
		BitBlock r10000_10fff_tmp43, sequence_f0_90_a0_byte_range_86_87;
		BitBlock sequence_f0_90_a1, r10000_10fff_tmp44, sequence_f0_90_a1_96;
		BitBlock sequence_f0_90_a2, r10000_10fff_tmp45;
		BitBlock sequence_f0_90_a2_byte_range_80_bf, sequence_f0_90_a4;
		BitBlock byte_range_9c_9e, r10000_10fff_tmp46;
		BitBlock sequence_f0_90_a4_byte_range_9c_9e, sequence_f0_90_a5;
		BitBlock r10000_10fff_tmp47, sequence_f0_90_a5_byte_range_80_bf;
		BitBlock sequence_f0_90_a6, byte_range_b8_bd, r10000_10fff_tmp48;
		BitBlock sequence_f0_90_a6_byte_range_b8_bd, sequence_f0_90_a7;
		BitBlock r10000_10fff_tmp49, sequence_f0_90_a7_byte_range_80_bf;
		BitBlock r10000_10fff_tmp50, sequence_f0_90_a8, r10000_10fff_tmp51;
		BitBlock sequence_f0_90_a8_84, r10000_10fff_tmp52, sequence_f0_90_a9;
		BitBlock byte_range_88_8f, r10000_10fff_tmp53;
		BitBlock sequence_f0_90_a9_byte_range_88_8f, sequence_f0_90_aa;
		BitBlock r10000_10fff_tmp54, sequence_f0_90_aa_byte_range_80_bf;
		BitBlock sequence_f0_90_ac, r10000_10fff_tmp55, r10000_10fff_tmp56;
		BitBlock byte_range_b6_b8, r10000_10fff_tmp57;
		BitBlock sequence_f0_90_ac_byte_range_b6_b8, sequence_f0_90_ad;
		BitBlock byte_range_96_97, r10000_10fff_tmp58;
		BitBlock sequence_f0_90_ad_byte_range_96_97, sequence_f0_90_ae;
		BitBlock r10000_10fff_tmp59, sequence_f0_90_ae_byte_range_80_bf;
		BitBlock sequence_f0_90_b1, r10000_10fff_tmp60, r10000_10fff_tmp61;
		BitBlock r10000_10fff_tmp62, byte_range_89_bf, r10000_10fff_tmp63;
		BitBlock sequence_f0_90_b1_byte_range_89_bf, sequence_f0_90_b2;
		BitBlock r10000_10fff_tmp64, sequence_f0_90_b2_byte_range_80_bf;
		BitBlock sequence_f0_90_b9, byte_range_80_9f, r10000_10fff_tmp65;
		BitBlock sequence_f0_90_b9_byte_range_80_9f, sequence_f0_90_ba;
		BitBlock r10000_10fff_tmp66, sequence_f0_90_ba_byte_range_80_bf;




        struct_Cn.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_f0 = simd_andc(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp11 = simd_andc(tmp10, tmp4);
        byte_91 = simd_and(tmp9, tmp11);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp12));
        sequence_f0_91 = simd_and(tmp12, byte_91);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
        tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp14 = simd_andc(tmp7, tmp13);
        byte_81 = simd_and(tmp14, tmp11);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(2), tmp15));
        sequence_f0_91_81 = simd_and(tmp15, byte_81);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(3), sequence_f0_91_adv));
        sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
        tmp16 = simd_andc(tmp7, basis_bits.bit_2);
        tmp17 = simd_or(tmp4, basis_bits.bit_6);
        tmp18 = simd_not(tmp17);
        tmp19 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp20 = simd_and(tmp19, basis_bits.bit_6);
        tmp21 = simd_or(simd_and(basis_bits.bit_3, tmp18), simd_andc(tmp20, basis_bits.bit_3));
        tmp22 = simd_and(tmp16, tmp21);
        tmp23 = simd_and(tmp7, tmp2);
        cc_range_1104e_11070_4 = simd_or(tmp22, tmp23);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(4), sequence_f0_91_81_adv));
        tmp24 = simd_and(sequence_f0_91_81_adv, cc_range_1104e_11070_4);
        struct_Cn.cc = simd_or(struct_Cn.cc, tmp24);
        tmp25 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp26 = simd_andc(tmp25, tmp4);
        byte_83 = simd_and(tmp14, tmp26);
        sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
        sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
        tmp27 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp28 = simd_or(basis_bits.bit_4, tmp27);
        tmp29 = simd_and(tmp14, tmp28);
        tmp30 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp31 = simd_and(tmp7, tmp30);
        tmp32 = simd_and(tmp31, basis_bits.bit_4);
        tmp33 = simd_or(basis_bits.bit_5, tmp5);
        tmp34 = simd_and(tmp32, tmp33);
        tmp35 = simd_or(tmp29, tmp34);
        tmp36 = simd_and(tmp23, basis_bits.bit_4);
        tmp37 = simd_and(tmp36, tmp27);
        cc_range_110c2_110fa_4 = simd_or(tmp35, tmp37);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(5), sequence_f0_91_83_adv));
        tmp38 = simd_and(sequence_f0_91_83_adv, cc_range_110c2_110fa_4);
        struct_Cn.cc = simd_or(struct_Cn.cc, tmp38);
        tmp39 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp40 = simd_andc(tmp39, tmp5);
        byte_84 = simd_and(tmp14, tmp40);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        tmp41 = simd_and(tmp39, tmp10);
        byte_b5 = simd_and(tmp23, tmp41);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(6), sequence_f0_91_84_adv));
        tmp42 = simd_and(sequence_f0_91_84_adv, byte_b5);
        struct_Cn.cc = simd_or(struct_Cn.cc, tmp42);
        byte_85 = simd_and(tmp14, tmp41);
        sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
        sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
        tmp43 = simd_or(basis_bits.bit_3, tmp4);
        tmp44 = simd_or(basis_bits.bit_2, tmp43);
        byte_range_84_bf = simd_and(tmp7, tmp44);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(7), sequence_f0_91_85_adv));
        tmp45 = simd_and(sequence_f0_91_85_adv, byte_range_84_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, tmp45);
        tmp46 = simd_and(tmp39, tmp25);
        byte_87 = simd_and(tmp14, tmp46);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        tmp47 = simd_and(tmp14, basis_bits.bit_4);
        tmp48 = simd_and(tmp47, tmp33);
        tmp49 = simd_and(basis_bits.bit_4, tmp27);
        tmp50 = simd_and(basis_bits.bit_3, tmp49);
        tmp51 = simd_or(basis_bits.bit_2, tmp50);
        tmp52 = simd_and(tmp7, tmp51);
        cc_range_111c9_111da_4 = simd_or(tmp48, tmp52);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(8), sequence_f0_91_87_adv));
        tmp53 = simd_and(sequence_f0_91_87_adv, cc_range_111c9_111da_4);
        struct_Cn.cc = simd_or(struct_Cn.cc, tmp53);
        tmp54 = simd_not(tmp49);
        tmp55 = simd_or(simd_and(basis_bits.bit_3, tmp54), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
        byte_range_88_99 = simd_and(tmp16, tmp55);
        sequence_f0_91_byte_range_88_99 = simd_and(sequence_f0_91_adv, byte_range_88_99);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_88_99, carryQ.get_carry_in(9), tmp56));
        sequence_f0_91_byte_range_88_99_sfx = simd_and(tmp56, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_91_byte_range_88_99_sfx);
        tmp57 = simd_and(byte_range_80_bf, tmp8);
        tmp58 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp59 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp60 = simd_and(tmp58, tmp59);
        byte_9a = simd_and(tmp57, tmp60);
        sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
        tmp61 = simd_and(byte_range_80_bf, tmp2);
        byte_range_b8_bf = simd_and(tmp61, basis_bits.bit_4);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(10), tmp62));
        sequence_f0_91_9a_byte_range_b8_bf = simd_and(tmp62, byte_range_b8_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_91_9a_byte_range_b8_bf);
        tmp63 = simd_and(tmp58, tmp25);
        byte_9b = simd_and(tmp57, tmp63);
        sequence_f0_91_9b = simd_and(sequence_f0_91_adv, byte_9b);
        tmp64 = simd_or(basis_bits.bit_3, tmp49);
        tmp65 = simd_or(basis_bits.bit_2, tmp64);
        byte_range_8a_bf = simd_and(byte_range_80_bf, tmp65);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9b, carryQ.get_carry_in(11), tmp66));
        sequence_f0_91_9b_byte_range_8a_bf = simd_and(tmp66, byte_range_8a_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_91_9b_byte_range_8a_bf);
        tmp67 = simd_andc(tmp19, tmp5);
        byte_9c = simd_and(tmp57, tmp67);
        sequence_f0_91_9c = simd_and(sequence_f0_91_adv, byte_9c);
        carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9c, carryQ.get_carry_in(12), tmp68));
        sequence_f0_91_9c_byte_range_80_bf = simd_and(tmp68, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_91_9c_byte_range_80_bf);
        tmp69 = simd_andc(tmp59, tmp4);
        byte_92 = simd_and(tmp57, tmp69);
        sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
        sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
        tmp70 = simd_andc(byte_range_80_bf, tmp13);
        tmp71 = simd_and(tmp19, tmp10);
        byte_8d = simd_and(tmp70, tmp71);
        carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(13), tmp72));
        sequence_f0_92_8d = simd_and(tmp72, byte_8d);
        carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(14), sequence_f0_92_adv));
        sequence_f0_92_8d = simd_and(sequence_f0_92_adv, byte_8d);
        tmp73 = simd_and(byte_range_80_bf, basis_bits.bit_2);
        tmp74 = simd_and(tmp19, tmp25);
        tmp75 = simd_or(basis_bits.bit_3, tmp74);
        byte_range_af_bf = simd_and(tmp73, tmp75);
        carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f0_92_8d, carryQ.get_carry_in(15), sequence_f0_92_8d_adv));
        tmp76 = simd_and(sequence_f0_92_8d_adv, byte_range_af_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, tmp76);
        byte_range_8e_8f = simd_and(tmp70, tmp20);
        sequence_f0_92_byte_range_8e_8f = simd_and(sequence_f0_92_adv, byte_range_8e_8f);
        carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_f0_92_byte_range_8e_8f, carryQ.get_carry_in(16), tmp77));
        sequence_f0_92_byte_range_8e_8f_sfx = simd_and(tmp77, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_92_byte_range_8e_8f_sfx);
        sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
        tmp78 = simd_and(byte_range_80_bf, tmp30);
        tmp79 = simd_or(basis_bits.bit_5, tmp25);
        tmp80 = simd_or(basis_bits.bit_4, tmp79);
        byte_range_a3_af = simd_and(tmp78, tmp80);
        carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(17), tmp81));
        sequence_f0_92_91_byte_range_a3_af = simd_and(tmp81, byte_range_a3_af);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_92_91_byte_range_a3_af);
        sequence_f0_92_92 = simd_and(sequence_f0_92_adv, byte_92);
        carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_f0_92_92, carryQ.get_carry_in(18), tmp82));
        sequence_f0_92_92_byte_range_80_bf = simd_and(tmp82, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_92_92_byte_range_80_bf);
        byte_93 = simd_and(tmp57, tmp26);
        sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
        sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
        byte_90 = simd_andc(tmp57, tmp6);
        carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(19), tmp83));
        sequence_f0_93_90 = simd_and(tmp83, byte_90);
        carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(20), sequence_f0_93_adv));
        sequence_f0_93_90 = simd_and(sequence_f0_93_adv, byte_90);
        carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_f0_93_90, carryQ.get_carry_in(21), sequence_f0_93_90_adv));
        tmp84 = simd_and(sequence_f0_93_90_adv, byte_range_af_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, tmp84);
        tmp85 = simd_and(basis_bits.bit_3, tmp6);
        tmp86 = simd_or(basis_bits.bit_2, tmp85);
        byte_range_91_bf = simd_and(byte_range_80_bf, tmp86);
        sequence_f0_93_byte_range_91_bf = simd_and(sequence_f0_93_adv, byte_range_91_bf);
        carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f0_93_byte_range_91_bf, carryQ.get_carry_in(22), tmp87));
        sequence_f0_93_byte_range_91_bf_sfx = simd_and(tmp87, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_93_byte_range_91_bf_sfx);
        tmp88 = simd_andc(tmp39, basis_bits.bit_6);
        byte_range_94_95 = simd_and(tmp57, tmp88);
        byte_f0_byte_range_94_95 = simd_and(byte_f0_adv, byte_range_94_95);
        carryQ.cq[23] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_94_95, carryQ.get_carry_in(23), tmp89));
        byte_f0_byte_range_94_95_sfx = simd_and(tmp89, byte_range_80_bf);
        carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_94_95_sfx, carryQ.get_carry_in(24), tmp90));
        byte_f0_byte_range_94_95_sfx_sfx = simd_and(tmp90, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, byte_f0_byte_range_94_95_sfx_sfx);
        tmp91 = simd_and(tmp39, tmp59);
        byte_96 = simd_and(tmp57, tmp91);
        sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
        byte_80 = simd_andc(tmp70, tmp6);
        carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(25), sequence_f0_96_adv));
        sequence_f0_96_80 = simd_and(sequence_f0_96_adv, byte_80);
        carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_f0_96_80, carryQ.get_carry_in(26), tmp92));
        sequence_f0_96_80_byte_range_80_bf = simd_and(tmp92, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_96_80_byte_range_80_bf);
        byte_97 = simd_and(tmp57, tmp46);
        sequence_f0_97 = simd_and(byte_f0_adv, byte_97);
        carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_f0_97, carryQ.get_carry_in(27), sequence_f0_97_adv));
        sequence_f0_97_80 = simd_and(sequence_f0_97_adv, byte_80);
        carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_f0_97_80, carryQ.get_carry_in(28), tmp93));
        sequence_f0_97_80_byte_range_80_bf = simd_and(tmp93, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_97_80_byte_range_80_bf);
        sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
        carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(29), sequence_f0_9b_adv));
        sequence_f0_9b_80 = simd_and(sequence_f0_9b_adv, byte_80);
        tmp94 = simd_or(basis_bits.bit_3, tmp17);
        tmp95 = simd_or(basis_bits.bit_2, tmp94);
        byte_range_82_bf = simd_and(byte_range_80_bf, tmp95);
        carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_80, carryQ.get_carry_in(30), tmp96));
        sequence_f0_9b_80_byte_range_82_bf = simd_and(tmp96, byte_range_82_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_9b_80_byte_range_82_bf);
        sequence_f0_9c = simd_and(byte_f0_adv, byte_9c);
        carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_f0_9c, carryQ.get_carry_in(31), sequence_f0_9c_adv));
        sequence_f0_9c_80 = simd_and(sequence_f0_9c_adv, byte_80);
        carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_f0_9c_80, carryQ.get_carry_in(32), tmp97));
        sequence_f0_9c_80_byte_range_80_bf = simd_and(tmp97, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_9c_80_byte_range_80_bf);
        byte_9d = simd_and(tmp57, tmp71);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(33), sequence_f0_9d_adv));
        sequence_f0_9d_83 = simd_and(sequence_f0_9d_adv, byte_83);
        tmp98 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
        tmp99 = simd_or(basis_bits.bit_4, tmp98);
        byte_range_b6_bf = simd_and(tmp61, tmp99);
        carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_83, carryQ.get_carry_in(34), tmp100));
        sequence_f0_9d_83_byte_range_b6_bf = simd_and(tmp100, byte_range_b6_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_9d_83_byte_range_b6_bf);
        tmp101 = simd_and(tmp19, tmp59);
        byte_9e = simd_and(tmp57, tmp101);
        sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
        carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(35), sequence_f0_9e_adv));
        sequence_f0_9e_80 = simd_and(sequence_f0_9e_adv, byte_80);
        carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_80, carryQ.get_carry_in(36), tmp102));
        sequence_f0_9e_80_byte_range_80_bf = simd_and(tmp102, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_9e_80_byte_range_80_bf);
        byte_9f = simd_and(tmp57, tmp74);
        sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
        carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(37), sequence_f0_9f_adv));
        sequence_f0_9f_80 = simd_and(sequence_f0_9f_adv, byte_80);
        byte_range_ac_af = simd_and(tmp78, tmp19);
        carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_80, carryQ.get_carry_in(38), tmp103));
        sequence_f0_9f_80_byte_range_ac_af = simd_and(tmp103, byte_range_ac_af);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_9f_80_byte_range_ac_af);
        byte_aa = simd_and(tmp78, tmp60);
        sequence_f0_aa = simd_and(byte_f0_adv, byte_aa);
        carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(39), sequence_f0_aa_adv));
        sequence_f0_aa_9b = simd_and(sequence_f0_aa_adv, byte_9b);
        tmp104 = simd_and(basis_bits.bit_5, tmp25);
        tmp105 = simd_or(basis_bits.bit_4, tmp104);
        tmp106 = simd_and(basis_bits.bit_3, tmp105);
        tmp107 = simd_or(basis_bits.bit_2, tmp106);
        byte_range_97_bf = simd_and(byte_range_80_bf, tmp107);
        carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_9b, carryQ.get_carry_in(40), tmp108));
        sequence_f0_aa_9b_byte_range_97_bf = simd_and(tmp108, byte_range_97_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_aa_9b_byte_range_97_bf);
        byte_ab = simd_and(tmp78, tmp63);
        sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
        carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(41), sequence_f0_ab_adv));
        sequence_f0_ab_9c = simd_and(sequence_f0_ab_adv, byte_9c);
        tmp109 = simd_and(basis_bits.bit_5, tmp5);
        tmp110 = simd_or(basis_bits.bit_4, tmp109);
        byte_range_b5_bf = simd_and(tmp61, tmp110);
        carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_9c, carryQ.get_carry_in(42), tmp111));
        sequence_f0_ab_9c_byte_range_b5_bf = simd_and(tmp111, byte_range_b5_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_ab_9c_byte_range_b5_bf);
        byte_ac = simd_and(tmp78, tmp67);
        sequence_f0_ac = simd_and(byte_f0_adv, byte_ac);
        carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_f0_ac, carryQ.get_carry_in(43), sequence_f0_ac_adv));
        sequence_f0_ac_80 = simd_and(sequence_f0_ac_adv, byte_80);
        carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_f0_ac_80, carryQ.get_carry_in(44), tmp112));
        sequence_f0_ac_80_byte_range_80_bf = simd_and(tmp112, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_ac_80_byte_range_80_bf);
        byte_af = simd_and(tmp78, tmp74);
        sequence_f0_af = simd_and(byte_f0_adv, byte_af);
        carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(45), sequence_f0_af_adv));
        sequence_f0_af_80 = simd_and(sequence_f0_af_adv, byte_80);
        carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_f0_af_80, carryQ.get_carry_in(46), tmp113));
        sequence_f0_af_80_byte_range_80_bf = simd_and(tmp113, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_af_80_byte_range_80_bf);
        byte_b0 = simd_andc(tmp61, tmp6);
        sequence_f0_b0 = simd_and(byte_f0_adv, byte_b0);
        carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_f0_b0, carryQ.get_carry_in(47), sequence_f0_b0_adv));
        sequence_f0_b0_80 = simd_and(sequence_f0_b0_adv, byte_80);
        carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_f0_b0_80, carryQ.get_carry_in(48), tmp114));
        sequence_f0_b0_80_byte_range_80_bf = simd_and(tmp114, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_b0_80_byte_range_80_bf);
        tmp115 = simd_andc(tmp3, tmp4);
        tmp116 = simd_not(basis_bits.bit_7);
        tmp117 = simd_or(simd_and(basis_bits.bit_6, tmp116), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
        byte_range_f1_f2 = simd_and(tmp115, tmp117);
        carryQ.cq[49] = carryout2carry(pablo_blk_Advance(byte_range_f1_f2, carryQ.get_carry_in(49), tmp118));
        byte_range_f1_f2_sfx = simd_and(tmp118, byte_range_80_bf);
        carryQ.cq[50] = carryout2carry(pablo_blk_Advance(byte_range_f1_f2_sfx, carryQ.get_carry_in(50), tmp119));
        byte_range_f1_f2_sfx_sfx = simd_and(tmp119, byte_range_80_bf);
        carryQ.cq[51] = carryout2carry(pablo_blk_Advance(byte_range_f1_f2_sfx_sfx, carryQ.get_carry_in(51), tmp120));
        byte_range_f1_f2_sfx_sfx_sfx = simd_and(tmp120, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, byte_range_f1_f2_sfx_sfx_sfx);
        byte_f3 = simd_and(tmp3, tmp26);
        carryQ.cq[52] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(52), byte_f3_adv));
        sequence_f3_80 = simd_and(byte_f3_adv, byte_80);
        carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_f3_80, carryQ.get_carry_in(53), sequence_f3_80_adv));
        sequence_f3_80_80 = simd_and(sequence_f3_80_adv, byte_80);
        carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_f3_80_80, carryQ.get_carry_in(54), tmp121));
        sequence_f3_80_80_80 = simd_and(tmp121, byte_80);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(55, 11))) {
          r80_7ff_tmp1 = simd_andc(tmp1, tmp13);
          byte_cd = simd_and(r80_7ff_tmp1, tmp71);
          r80_7ff_tmp2 = simd_andc(tmp58, basis_bits.bit_6);
          r80_7ff_tmp3 = simd_or(r80_7ff_tmp2, tmp74);
          cc_range_378_37f_2 = simd_and(tmp61, r80_7ff_tmp3);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(55), byte_cd_adv));
          r80_7ff_tmp4 = simd_and(byte_cd_adv, cc_range_378_37f_2);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp4);
          byte_ce = simd_and(r80_7ff_tmp1, tmp101);
          r80_7ff_tmp5 = simd_andc(tmp4, tmp63);
          r80_7ff_tmp6 = simd_andc(r80_7ff_tmp5, tmp71);
          r80_7ff_tmp7 = simd_andc(tmp70, r80_7ff_tmp6);
          r80_7ff_tmp8 = simd_and(tmp78, tmp69);
          cc_range_380_3a2_2 = simd_or(r80_7ff_tmp7, r80_7ff_tmp8);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(56), byte_ce_adv));
          r80_7ff_tmp9 = simd_and(byte_ce_adv, cc_range_380_3a2_2);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp9);
          r80_7ff_tmp10 = simd_and(tmp1, tmp8);
          byte_d4 = simd_and(r80_7ff_tmp10, tmp40);
          r80_7ff_tmp11 = simd_not(tmp6);
          r80_7ff_tmp12 = simd_or(simd_and(basis_bits.bit_3, r80_7ff_tmp11), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
          byte_range_a8_b0 = simd_and(tmp73, r80_7ff_tmp12);
          carryQ.cq[57] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(57), byte_d4_adv));
          r80_7ff_tmp13 = simd_and(byte_d4_adv, byte_range_a8_b0);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp13);
          byte_d5 = simd_and(r80_7ff_tmp10, tmp41);
          r80_7ff_tmp14 = simd_not(tmp33);
          r80_7ff_tmp15 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp14), simd_andc(tmp104, basis_bits.bit_4));
          r80_7ff_tmp16 = simd_and(tmp57, r80_7ff_tmp15);
          r80_7ff_tmp17 = simd_andc(tmp78, tmp6);
          cc_range_557_560_2 = simd_or(r80_7ff_tmp16, r80_7ff_tmp17);
          carryQ.cq[58] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(58), byte_d5_adv));
          r80_7ff_tmp18 = simd_and(byte_d5_adv, cc_range_557_560_2);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp18);
          byte_d6 = simd_and(r80_7ff_tmp10, tmp91);
          r80_7ff_tmp19 = simd_andc(tmp58, tmp5);
          r80_7ff_tmp20 = simd_and(tmp70, r80_7ff_tmp19);
          r80_7ff_tmp21 = simd_and(tmp70, basis_bits.bit_4);
          r80_7ff_tmp22 = simd_not(tmp25);
          r80_7ff_tmp23 = simd_or(simd_and(basis_bits.bit_5, r80_7ff_tmp22), simd_andc(tmp25, basis_bits.bit_5));
          r80_7ff_tmp24 = simd_and(r80_7ff_tmp21, r80_7ff_tmp23);
          r80_7ff_tmp25 = simd_or(r80_7ff_tmp20, r80_7ff_tmp24);
          cc_range_588_590_2 = simd_or(r80_7ff_tmp25, byte_90);
          carryQ.cq[59] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(59), byte_d6_adv));
          r80_7ff_tmp26 = simd_and(byte_d6_adv, cc_range_588_590_2);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp26);
          byte_d7 = simd_and(r80_7ff_tmp10, tmp46);
          r80_7ff_tmp27 = simd_and(tmp78, basis_bits.bit_4);
          r80_7ff_tmp28 = simd_and(r80_7ff_tmp27, tmp79);
          r80_7ff_tmp29 = simd_or(r80_7ff_tmp21, r80_7ff_tmp28);
          cc_range_5c8_5f5_2 = simd_or(r80_7ff_tmp29, byte_range_b5_bf);
          carryQ.cq[60] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(60), byte_d7_adv));
          r80_7ff_tmp30 = simd_and(byte_d7_adv, cc_range_5c8_5f5_2);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp30);
          byte_d8 = simd_and(r80_7ff_tmp10, r80_7ff_tmp19);
          r80_7ff_tmp31 = simd_and(tmp70, tmp41);
          cc_range_605_61d_2 = simd_or(r80_7ff_tmp31, byte_9d);
          carryQ.cq[61] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(61), byte_d8_adv));
          r80_7ff_tmp32 = simd_and(byte_d8_adv, cc_range_605_61d_2);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp32);
          byte_dc = simd_and(r80_7ff_tmp10, tmp67);
          byte_8e = simd_and(tmp70, tmp101);
          carryQ.cq[62] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(62), byte_dc_adv));
          r80_7ff_tmp33 = simd_and(byte_dc_adv, byte_8e);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp33);
          byte_dd = simd_and(r80_7ff_tmp10, tmp71);
          r80_7ff_tmp34 = simd_not(tmp5);
          r80_7ff_tmp35 = simd_or(simd_and(basis_bits.bit_5, r80_7ff_tmp34), simd_andc(tmp25, basis_bits.bit_5));
          byte_range_8b_8c = simd_and(r80_7ff_tmp21, r80_7ff_tmp35);
          carryQ.cq[63] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(63), byte_dd_adv));
          r80_7ff_tmp36 = simd_and(byte_dd_adv, byte_range_8b_8c);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp36);
          byte_de = simd_and(r80_7ff_tmp10, tmp101);
          byte_range_b2_bf = simd_and(tmp61, tmp28);
          carryQ.cq[64] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(64), byte_de_adv));
          r80_7ff_tmp37 = simd_and(byte_de_adv, byte_range_b2_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp37);
          byte_df = simd_and(r80_7ff_tmp10, tmp74);
          byte_range_bb_bf = simd_and(byte_range_b8_bf, tmp79);
          carryQ.cq[65] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(65), byte_df_adv));
          r80_7ff_tmp38 = simd_and(byte_df_adv, byte_range_bb_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp38);
        }
        else {
          carryQ.CarryDequeueEnqueue(55, 11);
        }
        byte_range_e0_ef = simd_and(tmp1, tmp30);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(66, 149))) {
          byte_e0 = simd_andc(byte_range_e0_ef, tmp6);
          byte_a0 = simd_andc(tmp78, tmp6);
          carryQ.cq[66] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(66), r800_ffff_tmp1));
          sequence_e0_a0 = simd_and(r800_ffff_tmp1, byte_a0);
          carryQ.cq[67] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(67), byte_e0_adv));
          sequence_e0_a0 = simd_and(byte_e0_adv, byte_a0);
          r800_ffff_tmp2 = simd_and(tmp78, tmp20);
          r800_ffff_tmp3 = simd_and(tmp61, tmp74);
          cc_range_82e_83f_3 = simd_or(r800_ffff_tmp2, r800_ffff_tmp3);
          carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(68), sequence_e0_a0_adv));
          r800_ffff_tmp4 = simd_and(sequence_e0_a0_adv, cc_range_82e_83f_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp4);
          byte_a1 = simd_and(tmp78, tmp11);
          sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
          sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
          r800_ffff_tmp5 = simd_andc(tmp19, basis_bits.bit_6);
          r800_ffff_tmp6 = simd_and(tmp57, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_and(basis_bits.bit_3, tmp74);
          r800_ffff_tmp8 = simd_or(basis_bits.bit_2, r800_ffff_tmp7);
          r800_ffff_tmp9 = simd_and(byte_range_80_bf, r800_ffff_tmp8);
          cc_range_85c_85f_3 = simd_or(r800_ffff_tmp6, r800_ffff_tmp9);
          carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(69), sequence_e0_a1_adv));
          r800_ffff_tmp10 = simd_and(sequence_e0_a1_adv, cc_range_85c_85f_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp10);
          byte_a2 = simd_and(tmp78, tmp69);
          sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
          sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
          r800_ffff_tmp11 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
          r800_ffff_tmp12 = simd_or(r800_ffff_tmp11, byte_a1);
          r800_ffff_tmp13 = simd_and(tmp19, tmp5);
          r800_ffff_tmp14 = simd_or(basis_bits.bit_3, r800_ffff_tmp13);
          r800_ffff_tmp15 = simd_and(tmp73, r800_ffff_tmp14);
          cc_range_880_8ad_3 = simd_or(r800_ffff_tmp12, r800_ffff_tmp15);
          carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e0_a2, carryQ.get_carry_in(70), sequence_e0_a2_adv));
          r800_ffff_tmp16 = simd_and(sequence_e0_a2_adv, cc_range_880_8ad_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp16);
          byte_a3 = simd_and(tmp78, tmp26);
          sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
          sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
          r800_ffff_tmp17 = simd_and(basis_bits.bit_2, tmp43);
          r800_ffff_tmp18 = simd_andc(byte_range_80_bf, r800_ffff_tmp17);
          cc_range_8c0_8ff_3 = simd_or(r800_ffff_tmp18, r800_ffff_tmp3);
          carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e0_a3, carryQ.get_carry_in(71), sequence_e0_a3_adv));
          r800_ffff_tmp19 = simd_and(sequence_e0_a3_adv, cc_range_8c0_8ff_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp19);
          byte_a5 = simd_and(tmp78, tmp41);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          r800_ffff_tmp20 = simd_andc(tmp58, tmp5);
          byte_b8 = simd_and(tmp61, r800_ffff_tmp20);
          carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(72), sequence_e0_a5_adv));
          r800_ffff_tmp21 = simd_and(sequence_e0_a5_adv, byte_b8);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp21);
          byte_a6 = simd_and(tmp78, tmp91);
          sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
          sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
          r800_ffff_tmp22 = simd_andc(tmp6, tmp40);
          r800_ffff_tmp23 = simd_andc(tmp70, r800_ffff_tmp22);
          r800_ffff_tmp24 = simd_and(tmp70, tmp19);
          r800_ffff_tmp25 = simd_and(r800_ffff_tmp24, tmp117);
          r800_ffff_tmp26 = simd_or(r800_ffff_tmp23, r800_ffff_tmp25);
          r800_ffff_tmp27 = simd_andc(tmp57, tmp4);
          r800_ffff_tmp28 = simd_and(r800_ffff_tmp27, tmp117);
          r800_ffff_tmp29 = simd_or(r800_ffff_tmp26, r800_ffff_tmp28);
          r800_ffff_tmp30 = simd_and(tmp58, tmp10);
          r800_ffff_tmp31 = simd_and(tmp78, r800_ffff_tmp30);
          r800_ffff_tmp32 = simd_or(r800_ffff_tmp29, r800_ffff_tmp31);
          r800_ffff_tmp33 = simd_and(tmp61, tmp11);
          r800_ffff_tmp34 = simd_or(r800_ffff_tmp32, r800_ffff_tmp33);
          r800_ffff_tmp35 = simd_andc(tmp61, basis_bits.bit_4);
          r800_ffff_tmp36 = simd_not(basis_bits.bit_6);
          r800_ffff_tmp37 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp36), simd_andc(tmp25, basis_bits.bit_5));
          r800_ffff_tmp38 = simd_and(r800_ffff_tmp35, r800_ffff_tmp37);
          r800_ffff_tmp39 = simd_or(r800_ffff_tmp34, r800_ffff_tmp38);
          r800_ffff_tmp40 = simd_and(tmp58, basis_bits.bit_6);
          r800_ffff_tmp41 = simd_and(tmp61, r800_ffff_tmp40);
          cc_range_980_9ba_3 = simd_or(r800_ffff_tmp39, r800_ffff_tmp41);
          carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(73), sequence_e0_a6_adv));
          r800_ffff_tmp42 = simd_and(sequence_e0_a6_adv, cc_range_980_9ba_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp42);
          byte_a7 = simd_and(tmp78, tmp46);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          r800_ffff_tmp43 = simd_or(tmp39, tmp58);
          r800_ffff_tmp44 = simd_and(tmp70, r800_ffff_tmp43);
          r800_ffff_tmp45 = simd_and(tmp117, r800_ffff_tmp44);
          r800_ffff_tmp46 = simd_not(tmp105);
          r800_ffff_tmp47 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp46), simd_andc(tmp74, basis_bits.bit_3));
          r800_ffff_tmp48 = simd_and(r800_ffff_tmp11, r800_ffff_tmp47);
          r800_ffff_tmp49 = simd_or(r800_ffff_tmp45, r800_ffff_tmp48);
          r800_ffff_tmp50 = simd_and(tmp57, tmp58);
          r800_ffff_tmp51 = simd_or(r800_ffff_tmp49, r800_ffff_tmp50);
          r800_ffff_tmp52 = simd_or(r800_ffff_tmp51, byte_9e);
          r800_ffff_tmp53 = simd_and(tmp78, tmp88);
          r800_ffff_tmp54 = simd_or(r800_ffff_tmp52, r800_ffff_tmp53);
          r800_ffff_tmp55 = simd_and(tmp61, tmp19);
          cc_range_9c5_9fc_3 = simd_or(r800_ffff_tmp54, r800_ffff_tmp55);
          carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(74), sequence_e0_a7_adv));
          r800_ffff_tmp56 = simd_and(sequence_e0_a7_adv, cc_range_9c5_9fc_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp56);
          byte_a8 = simd_and(tmp78, r800_ffff_tmp20);
          sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
          sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
          r800_ffff_tmp57 = simd_and(tmp70, basis_bits.bit_4);
          r800_ffff_tmp58 = simd_not(tmp25);
          r800_ffff_tmp59 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp58), simd_andc(tmp25, basis_bits.bit_5));
          r800_ffff_tmp60 = simd_and(r800_ffff_tmp57, r800_ffff_tmp59);
          r800_ffff_tmp61 = simd_or(r800_ffff_tmp23, r800_ffff_tmp60);
          r800_ffff_tmp62 = simd_or(r800_ffff_tmp61, r800_ffff_tmp28);
          r800_ffff_tmp63 = simd_or(r800_ffff_tmp62, r800_ffff_tmp31);
          r800_ffff_tmp64 = simd_or(r800_ffff_tmp63, r800_ffff_tmp33);
          r800_ffff_tmp65 = simd_and(tmp61, tmp40);
          r800_ffff_tmp66 = simd_or(r800_ffff_tmp64, r800_ffff_tmp65);
          r800_ffff_tmp67 = simd_and(tmp61, tmp46);
          r800_ffff_tmp68 = simd_or(r800_ffff_tmp66, r800_ffff_tmp67);
          r800_ffff_tmp69 = simd_or(r800_ffff_tmp68, r800_ffff_tmp41);
          r800_ffff_tmp70 = simd_and(tmp61, tmp71);
          cc_range_a00_a3d_3 = simd_or(r800_ffff_tmp69, r800_ffff_tmp70);
          carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(75), sequence_e0_a8_adv));
          r800_ffff_tmp71 = simd_and(sequence_e0_a8_adv, cc_range_a00_a3d_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp71);
          byte_a9 = simd_and(tmp78, r800_ffff_tmp30);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          r800_ffff_tmp72 = simd_andc(tmp70, basis_bits.bit_4);
          r800_ffff_tmp73 = simd_and(r800_ffff_tmp72, r800_ffff_tmp59);
          r800_ffff_tmp74 = simd_and(tmp70, tmp58);
          r800_ffff_tmp75 = simd_and(r800_ffff_tmp74, tmp117);
          r800_ffff_tmp76 = simd_or(r800_ffff_tmp73, r800_ffff_tmp75);
          r800_ffff_tmp77 = simd_not(tmp6);
          r800_ffff_tmp78 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp77), simd_andc(tmp20, basis_bits.bit_3));
          r800_ffff_tmp79 = simd_and(r800_ffff_tmp11, r800_ffff_tmp78);
          r800_ffff_tmp80 = simd_or(r800_ffff_tmp76, r800_ffff_tmp79);
          r800_ffff_tmp81 = simd_not(tmp33);
          r800_ffff_tmp82 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp81), simd_andc(tmp27, basis_bits.bit_4));
          r800_ffff_tmp83 = simd_and(tmp57, r800_ffff_tmp82);
          r800_ffff_tmp84 = simd_or(r800_ffff_tmp80, r800_ffff_tmp83);
          r800_ffff_tmp85 = simd_or(r800_ffff_tmp84, byte_9d);
          r800_ffff_tmp86 = simd_or(basis_bits.bit_3, tmp99);
          r800_ffff_tmp87 = simd_not(r800_ffff_tmp86);
          r800_ffff_tmp88 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp87), simd_andc(r800_ffff_tmp7, basis_bits.bit_2));
          r800_ffff_tmp89 = simd_and(byte_range_80_bf, r800_ffff_tmp88);
          r800_ffff_tmp90 = simd_or(r800_ffff_tmp85, r800_ffff_tmp89);
          cc_range_a43_a76_3 = simd_or(r800_ffff_tmp90, byte_range_b6_bf);
          carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(76), sequence_e0_a9_adv));
          r800_ffff_tmp91 = simd_and(sequence_e0_a9_adv, cc_range_a43_a76_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp91);
          sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
          sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
          r800_ffff_tmp92 = simd_andc(r800_ffff_tmp22, tmp101);
          r800_ffff_tmp93 = simd_andc(tmp70, r800_ffff_tmp92);
          r800_ffff_tmp94 = simd_or(r800_ffff_tmp93, byte_92);
          r800_ffff_tmp95 = simd_or(r800_ffff_tmp94, byte_a9);
          r800_ffff_tmp96 = simd_or(r800_ffff_tmp95, r800_ffff_tmp33);
          r800_ffff_tmp97 = simd_or(r800_ffff_tmp96, r800_ffff_tmp65);
          cc_range_a80_aba_3 = simd_or(r800_ffff_tmp97, r800_ffff_tmp41);
          carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(77), sequence_e0_aa_adv));
          r800_ffff_tmp98 = simd_and(sequence_e0_aa_adv, cc_range_a80_aba_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp98);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          r800_ffff_tmp99 = simd_and(tmp59, r800_ffff_tmp43);
          r800_ffff_tmp100 = simd_or(r800_ffff_tmp99, tmp20);
          r800_ffff_tmp101 = simd_and(tmp70, r800_ffff_tmp100);
          r800_ffff_tmp102 = simd_or(basis_bits.bit_4, tmp33);
          r800_ffff_tmp103 = simd_and(tmp57, r800_ffff_tmp102);
          r800_ffff_tmp104 = simd_or(r800_ffff_tmp101, r800_ffff_tmp103);
          r800_ffff_tmp105 = simd_or(r800_ffff_tmp104, r800_ffff_tmp53);
          r800_ffff_tmp106 = simd_and(tmp61, tmp28);
          cc_range_ac6_af2_3 = simd_or(r800_ffff_tmp105, r800_ffff_tmp106);
          carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(78), sequence_e0_ab_adv));
          r800_ffff_tmp107 = simd_and(sequence_e0_ab_adv, cc_range_ac6_af2_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp107);
          sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
          sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
          r800_ffff_tmp108 = simd_or(r800_ffff_tmp29, byte_a9);
          r800_ffff_tmp109 = simd_or(r800_ffff_tmp108, r800_ffff_tmp33);
          r800_ffff_tmp110 = simd_or(r800_ffff_tmp109, r800_ffff_tmp65);
          cc_range_b00_b3a_3 = simd_or(r800_ffff_tmp110, r800_ffff_tmp41);
          carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(79), sequence_e0_ac_adv));
          r800_ffff_tmp111 = simd_and(sequence_e0_ac_adv, cc_range_b00_b3a_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp111);
          byte_ad = simd_and(tmp78, tmp71);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          r800_ffff_tmp112 = simd_not(tmp99);
          r800_ffff_tmp113 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp112), simd_andc(tmp20, basis_bits.bit_3));
          r800_ffff_tmp114 = simd_and(r800_ffff_tmp11, r800_ffff_tmp113);
          r800_ffff_tmp115 = simd_or(r800_ffff_tmp45, r800_ffff_tmp114);
          r800_ffff_tmp116 = simd_or(r800_ffff_tmp115, r800_ffff_tmp50);
          r800_ffff_tmp117 = simd_or(r800_ffff_tmp116, byte_9e);
          r800_ffff_tmp118 = simd_or(r800_ffff_tmp117, r800_ffff_tmp53);
          cc_range_b45_b78_3 = simd_or(r800_ffff_tmp118, byte_range_b8_bf);
          carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(80), sequence_e0_ad_adv));
          r800_ffff_tmp119 = simd_and(sequence_e0_ad_adv, cc_range_b45_b78_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp119);
          byte_ae = simd_and(tmp78, tmp101);
          sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
          sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
          r800_ffff_tmp120 = simd_andc(tmp17, tmp40);
          r800_ffff_tmp121 = simd_andc(tmp70, r800_ffff_tmp120);
          r800_ffff_tmp122 = simd_and(r800_ffff_tmp57, r800_ffff_tmp37);
          r800_ffff_tmp123 = simd_or(r800_ffff_tmp121, r800_ffff_tmp122);
          r800_ffff_tmp124 = simd_and(tmp57, tmp11);
          r800_ffff_tmp125 = simd_or(r800_ffff_tmp123, r800_ffff_tmp124);
          r800_ffff_tmp126 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp81), simd_andc(tmp98, basis_bits.bit_4));
          r800_ffff_tmp127 = simd_and(tmp57, r800_ffff_tmp126);
          r800_ffff_tmp128 = simd_or(r800_ffff_tmp125, r800_ffff_tmp127);
          r800_ffff_tmp129 = simd_or(r800_ffff_tmp128, byte_9b);
          r800_ffff_tmp130 = simd_or(r800_ffff_tmp129, byte_9d);
          r800_ffff_tmp131 = simd_andc(tmp78, tmp4);
          r800_ffff_tmp132 = simd_andc(r800_ffff_tmp131, tmp25);
          r800_ffff_tmp133 = simd_or(r800_ffff_tmp130, r800_ffff_tmp132);
          r800_ffff_tmp134 = simd_and(tmp78, tmp39);
          r800_ffff_tmp135 = simd_and(r800_ffff_tmp134, tmp5);
          r800_ffff_tmp136 = simd_or(r800_ffff_tmp133, r800_ffff_tmp135);
          r800_ffff_tmp137 = simd_and(tmp78, basis_bits.bit_4);
          r800_ffff_tmp138 = simd_and(r800_ffff_tmp137, r800_ffff_tmp37);
          r800_ffff_tmp139 = simd_or(r800_ffff_tmp136, r800_ffff_tmp138);
          r800_ffff_tmp140 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp36), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp141 = simd_and(byte_range_b8_bf, r800_ffff_tmp140);
          cc_range_b80_bba_3 = simd_or(r800_ffff_tmp139, r800_ffff_tmp141);
          carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(81), sequence_e0_ae_adv));
          r800_ffff_tmp142 = simd_and(sequence_e0_ae_adv, cc_range_b80_bba_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp142);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          r800_ffff_tmp143 = simd_and(r800_ffff_tmp72, r800_ffff_tmp37);
          r800_ffff_tmp144 = simd_and(tmp70, r800_ffff_tmp30);
          r800_ffff_tmp145 = simd_or(r800_ffff_tmp143, r800_ffff_tmp144);
          r800_ffff_tmp146 = simd_or(r800_ffff_tmp145, byte_range_8e_8f);
          r800_ffff_tmp147 = simd_andc(tmp57, basis_bits.bit_4);
          r800_ffff_tmp148 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp58), simd_andc(tmp5, basis_bits.bit_5));
          r800_ffff_tmp149 = simd_and(r800_ffff_tmp147, r800_ffff_tmp148);
          r800_ffff_tmp150 = simd_or(r800_ffff_tmp146, r800_ffff_tmp149);
          r800_ffff_tmp151 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
          r800_ffff_tmp152 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp87), simd_andc(r800_ffff_tmp151, basis_bits.bit_2));
          r800_ffff_tmp153 = simd_and(byte_range_80_bf, r800_ffff_tmp152);
          r800_ffff_tmp154 = simd_or(r800_ffff_tmp150, r800_ffff_tmp153);
          r800_ffff_tmp155 = simd_and(byte_range_b8_bf, tmp79);
          cc_range_bc3_bfb_3 = simd_or(r800_ffff_tmp154, r800_ffff_tmp155);
          carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(82), sequence_e0_af_adv));
          r800_ffff_tmp156 = simd_and(sequence_e0_af_adv, cc_range_bc3_bfb_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp156);
          sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
          sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
          r800_ffff_tmp157 = simd_andc(r800_ffff_tmp22, tmp71);
          r800_ffff_tmp158 = simd_andc(tmp70, r800_ffff_tmp157);
          r800_ffff_tmp159 = simd_or(r800_ffff_tmp158, r800_ffff_tmp124);
          r800_ffff_tmp160 = simd_or(r800_ffff_tmp159, byte_a9);
          r800_ffff_tmp161 = simd_or(r800_ffff_tmp160, r800_ffff_tmp65);
          r800_ffff_tmp162 = simd_not(tmp5);
          r800_ffff_tmp163 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp162), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp164 = simd_and(byte_range_b8_bf, r800_ffff_tmp163);
          cc_range_c00_c3a_3 = simd_or(r800_ffff_tmp161, r800_ffff_tmp164);
          carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(83), sequence_e0_b0_adv));
          r800_ffff_tmp165 = simd_and(sequence_e0_b0_adv, cc_range_c00_c3a_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp165);
          byte_b1 = simd_and(tmp61, tmp11);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          r800_ffff_tmp166 = simd_and(tmp10, r800_ffff_tmp43);
          r800_ffff_tmp167 = simd_and(tmp70, r800_ffff_tmp166);
          r800_ffff_tmp168 = simd_not(tmp110);
          r800_ffff_tmp169 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp168), simd_andc(tmp20, basis_bits.bit_3));
          r800_ffff_tmp170 = simd_and(r800_ffff_tmp11, r800_ffff_tmp169);
          r800_ffff_tmp171 = simd_or(r800_ffff_tmp167, r800_ffff_tmp170);
          r800_ffff_tmp172 = simd_or(r800_ffff_tmp171, byte_97);
          r800_ffff_tmp173 = simd_and(tmp57, basis_bits.bit_4);
          r800_ffff_tmp174 = simd_and(r800_ffff_tmp173, tmp27);
          r800_ffff_tmp175 = simd_or(r800_ffff_tmp172, r800_ffff_tmp174);
          r800_ffff_tmp176 = simd_or(r800_ffff_tmp175, r800_ffff_tmp53);
          cc_range_c45_c70_3 = simd_or(r800_ffff_tmp176, r800_ffff_tmp35);
          carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(84), sequence_e0_b1_adv));
          r800_ffff_tmp177 = simd_and(sequence_e0_b1_adv, cc_range_c45_c70_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp177);
          byte_b2 = simd_and(tmp61, tmp69);
          sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
          sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
          r800_ffff_tmp178 = simd_andc(r800_ffff_tmp120, tmp71);
          r800_ffff_tmp179 = simd_andc(tmp70, r800_ffff_tmp178);
          r800_ffff_tmp180 = simd_or(r800_ffff_tmp179, r800_ffff_tmp124);
          r800_ffff_tmp181 = simd_or(r800_ffff_tmp180, byte_a9);
          r800_ffff_tmp182 = simd_or(r800_ffff_tmp181, r800_ffff_tmp65);
          cc_range_c80_cba_3 = simd_or(r800_ffff_tmp182, r800_ffff_tmp41);
          carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(85), sequence_e0_b2_adv));
          r800_ffff_tmp183 = simd_and(sequence_e0_b2_adv, cc_range_c80_cba_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp183);
          byte_b3 = simd_and(tmp61, tmp26);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          r800_ffff_tmp184 = simd_not(tmp98);
          r800_ffff_tmp185 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp184), simd_andc(tmp104, basis_bits.bit_4));
          r800_ffff_tmp186 = simd_and(tmp57, r800_ffff_tmp185);
          r800_ffff_tmp187 = simd_or(r800_ffff_tmp171, r800_ffff_tmp186);
          r800_ffff_tmp188 = simd_or(r800_ffff_tmp187, byte_9f);
          r800_ffff_tmp189 = simd_or(r800_ffff_tmp188, r800_ffff_tmp53);
          r800_ffff_tmp190 = simd_or(r800_ffff_tmp189, byte_b0);
          r800_ffff_tmp191 = simd_and(tmp61, tmp80);
          cc_range_cc5_cf3_3 = simd_or(r800_ffff_tmp190, r800_ffff_tmp191);
          carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(86), sequence_e0_b3_adv));
          r800_ffff_tmp192 = simd_and(sequence_e0_b3_adv, cc_range_cc5_cf3_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp192);
          byte_b4 = simd_and(tmp61, tmp40);
          sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
          sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
          r800_ffff_tmp193 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp162), simd_andc(tmp25, basis_bits.bit_5));
          r800_ffff_tmp194 = simd_and(byte_range_b8_bf, r800_ffff_tmp193);
          cc_range_d00_d3b_3 = simd_or(r800_ffff_tmp180, r800_ffff_tmp194);
          carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(87), sequence_e0_b4_adv));
          r800_ffff_tmp195 = simd_and(sequence_e0_b4_adv, cc_range_d00_d3b_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp195);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          r800_ffff_tmp196 = simd_or(r800_ffff_tmp167, r800_ffff_tmp48);
          r800_ffff_tmp197 = simd_or(r800_ffff_tmp196, r800_ffff_tmp173);
          r800_ffff_tmp198 = simd_or(r800_ffff_tmp197, r800_ffff_tmp53);
          r800_ffff_tmp199 = simd_and(tmp61, r800_ffff_tmp126);
          cc_range_d45_d76_3 = simd_or(r800_ffff_tmp198, r800_ffff_tmp199);
          carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(88), sequence_e0_b5_adv));
          r800_ffff_tmp200 = simd_and(sequence_e0_b5_adv, cc_range_d45_d76_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp200);
          byte_b6 = simd_and(tmp61, tmp91);
          sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
          sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
          r800_ffff_tmp201 = simd_not(tmp27);
          r800_ffff_tmp202 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp201), simd_andc(tmp104, basis_bits.bit_4));
          r800_ffff_tmp203 = simd_and(tmp57, r800_ffff_tmp202);
          r800_ffff_tmp204 = simd_or(r800_ffff_tmp121, r800_ffff_tmp203);
          r800_ffff_tmp205 = simd_or(r800_ffff_tmp204, byte_b2);
          r800_ffff_tmp206 = simd_and(tmp61, tmp67);
          r800_ffff_tmp207 = simd_or(r800_ffff_tmp205, r800_ffff_tmp206);
          r800_ffff_tmp208 = simd_and(tmp61, tmp20);
          cc_range_d80_dbe_3 = simd_or(r800_ffff_tmp207, r800_ffff_tmp208);
          carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(89), sequence_e0_b6_adv));
          r800_ffff_tmp209 = simd_and(sequence_e0_b6_adv, cc_range_d80_dbe_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp209);
          byte_b7 = simd_and(tmp61, tmp46);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          r800_ffff_tmp210 = simd_and(tmp70, r800_ffff_tmp202);
          r800_ffff_tmp211 = simd_or(r800_ffff_tmp210, r800_ffff_tmp60);
          r800_ffff_tmp212 = simd_and(tmp57, tmp41);
          r800_ffff_tmp213 = simd_or(r800_ffff_tmp211, r800_ffff_tmp212);
          r800_ffff_tmp214 = simd_or(r800_ffff_tmp213, byte_97);
          r800_ffff_tmp215 = simd_and(basis_bits.bit_3, tmp17);
          r800_ffff_tmp216 = simd_andc(tmp73, r800_ffff_tmp215);
          r800_ffff_tmp217 = simd_or(r800_ffff_tmp214, r800_ffff_tmp216);
          cc_range_dc7_df5_3 = simd_or(r800_ffff_tmp217, byte_range_b5_bf);
          carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(90), sequence_e0_b7_adv));
          r800_ffff_tmp218 = simd_and(sequence_e0_b7_adv, cc_range_dc7_df5_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp218);
          sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
          sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
          r800_ffff_tmp219 = simd_and(byte_range_b8_bf, r800_ffff_tmp59);
          cc_range_e00_e3b_3 = simd_or(byte_80, r800_ffff_tmp219);
          carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(91), sequence_e0_b8_adv));
          r800_ffff_tmp220 = simd_and(sequence_e0_b8_adv, cc_range_e00_e3b_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp220);
          byte_b9 = simd_and(tmp61, r800_ffff_tmp30);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          r800_ffff_tmp221 = simd_and(basis_bits.bit_3, tmp19);
          r800_ffff_tmp222 = simd_or(basis_bits.bit_2, r800_ffff_tmp221);
          byte_range_9c_bf = simd_and(byte_range_80_bf, r800_ffff_tmp222);
          carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(92), sequence_e0_b9_adv));
          r800_ffff_tmp223 = simd_and(sequence_e0_b9_adv, byte_range_9c_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp223);
          byte_ba = simd_and(tmp61, tmp60);
          sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
          sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
          r800_ffff_tmp224 = simd_andc(tmp6, tmp26);
          r800_ffff_tmp225 = simd_andc(tmp70, r800_ffff_tmp224);
          r800_ffff_tmp226 = simd_and(tmp70, tmp39);
          r800_ffff_tmp227 = simd_and(r800_ffff_tmp226, tmp117);
          r800_ffff_tmp228 = simd_or(r800_ffff_tmp225, r800_ffff_tmp227);
          r800_ffff_tmp229 = simd_or(r800_ffff_tmp228, r800_ffff_tmp144);
          r800_ffff_tmp230 = simd_and(r800_ffff_tmp57, r800_ffff_tmp193);
          r800_ffff_tmp231 = simd_or(r800_ffff_tmp229, r800_ffff_tmp230);
          r800_ffff_tmp232 = simd_not(tmp4);
          r800_ffff_tmp233 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp232), simd_andc(tmp20, basis_bits.bit_3));
          r800_ffff_tmp234 = simd_and(r800_ffff_tmp11, r800_ffff_tmp233);
          r800_ffff_tmp235 = simd_or(r800_ffff_tmp231, r800_ffff_tmp234);
          r800_ffff_tmp236 = simd_and(tmp57, r800_ffff_tmp20);
          r800_ffff_tmp237 = simd_or(r800_ffff_tmp235, r800_ffff_tmp236);
          r800_ffff_tmp238 = simd_or(r800_ffff_tmp237, byte_a0);
          r800_ffff_tmp239 = simd_and(tmp78, tmp40);
          r800_ffff_tmp240 = simd_or(r800_ffff_tmp238, r800_ffff_tmp239);
          r800_ffff_tmp241 = simd_or(r800_ffff_tmp240, byte_a6);
          r800_ffff_tmp242 = simd_andc(tmp58, basis_bits.bit_6);
          r800_ffff_tmp243 = simd_and(tmp78, r800_ffff_tmp242);
          r800_ffff_tmp244 = simd_or(r800_ffff_tmp241, r800_ffff_tmp243);
          r800_ffff_tmp245 = simd_or(r800_ffff_tmp244, byte_ac);
          r800_ffff_tmp246 = simd_or(r800_ffff_tmp245, byte_ba);
          cc_range_e80_ebe_3 = simd_or(r800_ffff_tmp246, r800_ffff_tmp208);
          carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(93), sequence_e0_ba_adv));
          r800_ffff_tmp247 = simd_and(sequence_e0_ba_adv, cc_range_e80_ebe_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp247);
          byte_bb = simd_and(tmp61, tmp63);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          r800_ffff_tmp248 = simd_and(tmp39, basis_bits.bit_7);
          r800_ffff_tmp249 = simd_or(r800_ffff_tmp248, tmp20);
          r800_ffff_tmp250 = simd_and(tmp70, r800_ffff_tmp249);
          r800_ffff_tmp251 = simd_and(tmp57, r800_ffff_tmp40);
          r800_ffff_tmp252 = simd_or(r800_ffff_tmp250, r800_ffff_tmp251);
          cc_range_ec5_ee0_3 = simd_or(r800_ffff_tmp252, tmp73);
          carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(94), sequence_e0_bb_adv));
          r800_ffff_tmp253 = simd_and(sequence_e0_bb_adv, cc_range_ec5_ee0_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp253);
          byte_bd = simd_and(tmp61, tmp71);
          sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
          sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
          r800_ffff_tmp254 = simd_and(tmp70, r800_ffff_tmp20);
          r800_ffff_tmp255 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp77), simd_andc(r800_ffff_tmp13, basis_bits.bit_3));
          r800_ffff_tmp256 = simd_and(tmp73, r800_ffff_tmp255);
          cc_range_f48_f6d_3 = simd_or(r800_ffff_tmp254, r800_ffff_tmp256);
          carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(95), sequence_e0_bd_adv));
          r800_ffff_tmp257 = simd_and(sequence_e0_bd_adv, cc_range_f48_f6d_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp257);
          byte_be = simd_and(tmp61, tmp101);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          cc_range_f98_fbd_3 = simd_or(r800_ffff_tmp236, byte_bd);
          carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(96), sequence_e0_be_adv));
          r800_ffff_tmp258 = simd_and(sequence_e0_be_adv, cc_range_f98_fbd_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp258);
          byte_bf = simd_and(tmp61, tmp74);
          sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
          sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
          r800_ffff_tmp259 = simd_and(basis_bits.bit_4, tmp79);
          r800_ffff_tmp260 = simd_and(basis_bits.bit_3, r800_ffff_tmp259);
          r800_ffff_tmp261 = simd_or(basis_bits.bit_2, r800_ffff_tmp260);
          r800_ffff_tmp262 = simd_and(byte_range_80_bf, r800_ffff_tmp261);
          cc_range_fcd_fdb_3 = simd_or(byte_8d, r800_ffff_tmp262);
          carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(97), sequence_e0_bf_adv));
          r800_ffff_tmp263 = simd_and(sequence_e0_bf_adv, cc_range_fcd_fdb_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp263);
          byte_e1 = simd_and(byte_range_e0_ef, tmp11);
          carryQ.cq[98] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(98), r800_ffff_tmp264));
          sequence_e1_83 = simd_and(r800_ffff_tmp264, byte_83);
          carryQ.cq[99] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(99), byte_e1_adv));
          sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
          r800_ffff_tmp265 = simd_and(tmp70, tmp91);
          r800_ffff_tmp266 = simd_andc(r800_ffff_tmp57, tmp109);
          r800_ffff_tmp267 = simd_or(r800_ffff_tmp265, r800_ffff_tmp266);
          cc_range_10c6_10ce_3 = simd_or(r800_ffff_tmp267, byte_range_8e_8f);
          carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(100), sequence_e1_83_adv));
          r800_ffff_tmp268 = simd_and(sequence_e1_83_adv, cc_range_10c6_10ce_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp268);
          byte_89 = simd_and(tmp70, r800_ffff_tmp30);
          sequence_e1_89 = simd_and(byte_e1_adv, byte_89);
          sequence_e1_89 = simd_and(byte_e1_adv, byte_89);
          r800_ffff_tmp269 = simd_or(r800_ffff_tmp30, tmp20);
          r800_ffff_tmp270 = simd_and(tmp70, r800_ffff_tmp269);
          r800_ffff_tmp271 = simd_or(r800_ffff_tmp270, byte_97);
          r800_ffff_tmp272 = simd_and(tmp57, r800_ffff_tmp30);
          r800_ffff_tmp273 = simd_or(r800_ffff_tmp271, r800_ffff_tmp272);
          r800_ffff_tmp274 = simd_and(tmp57, tmp20);
          cc_range_1249_125e_3 = simd_or(r800_ffff_tmp273, r800_ffff_tmp274);
          carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_e1_89, carryQ.get_carry_in(101), sequence_e1_89_adv));
          r800_ffff_tmp275 = simd_and(sequence_e1_89_adv, cc_range_1249_125e_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp275);
          byte_8a = simd_and(tmp70, tmp60);
          sequence_e1_8a = simd_and(byte_e1_adv, byte_8a);
          sequence_e1_8a = simd_and(byte_e1_adv, byte_8a);
          r800_ffff_tmp276 = simd_or(r800_ffff_tmp270, byte_b1);
          r800_ffff_tmp277 = simd_and(tmp39, basis_bits.bit_6);
          r800_ffff_tmp278 = simd_and(tmp61, r800_ffff_tmp277);
          r800_ffff_tmp279 = simd_or(r800_ffff_tmp276, r800_ffff_tmp278);
          cc_range_1289_12bf_3 = simd_or(r800_ffff_tmp279, byte_bf);
          carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_e1_8a, carryQ.get_carry_in(102), sequence_e1_8a_adv));
          r800_ffff_tmp280 = simd_and(sequence_e1_8a_adv, cc_range_1289_12bf_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp280);
          byte_8b = simd_and(tmp70, tmp63);
          sequence_e1_8b = simd_and(byte_e1_adv, byte_8b);
          sequence_e1_8b = simd_and(byte_e1_adv, byte_8b);
          r800_ffff_tmp281 = simd_or(tmp11, r800_ffff_tmp277);
          r800_ffff_tmp282 = simd_and(tmp70, r800_ffff_tmp281);
          cc_range_12c1_12d7_3 = simd_or(r800_ffff_tmp282, byte_97);
          carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_e1_8b, carryQ.get_carry_in(103), sequence_e1_8b_adv));
          r800_ffff_tmp283 = simd_and(sequence_e1_8b_adv, cc_range_12c1_12d7_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp283);
          byte_8c = simd_and(tmp70, tmp67);
          sequence_e1_8c = simd_and(byte_e1_adv, byte_8c);
          sequence_e1_8c = simd_and(byte_e1_adv, byte_8c);
          cc_range_1311_1316_3 = simd_and(tmp57, r800_ffff_tmp281);
          carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_e1_8c, carryQ.get_carry_in(104), sequence_e1_8c_adv));
          r800_ffff_tmp284 = simd_and(sequence_e1_8c_adv, cc_range_1311_1316_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp284);
          sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
          sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
          r800_ffff_tmp285 = simd_and(r800_ffff_tmp173, r800_ffff_tmp193);
          r800_ffff_tmp286 = simd_and(r800_ffff_tmp55, tmp5);
          cc_range_135b_137d_3 = simd_or(r800_ffff_tmp285, r800_ffff_tmp286);
          carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(105), sequence_e1_8d_adv));
          r800_ffff_tmp287 = simd_and(sequence_e1_8d_adv, cc_range_135b_137d_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp287);
          byte_8e = simd_and(tmp70, tmp101);
          sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
          sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
          byte_range_9a_9f = simd_and(r800_ffff_tmp173, tmp27);
          carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(106), sequence_e1_8e_adv));
          r800_ffff_tmp288 = simd_and(sequence_e1_8e_adv, byte_range_9a_9f);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp288);
          byte_8f = simd_and(tmp70, tmp74);
          sequence_e1_8f = simd_and(byte_e1_adv, byte_8f);
          sequence_e1_8f = simd_and(byte_e1_adv, byte_8f);
          carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_e1_8f, carryQ.get_carry_in(107), sequence_e1_8f_adv));
          r800_ffff_tmp289 = simd_and(sequence_e1_8f_adv, byte_range_b5_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp289);
          sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
          sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
          r800_ffff_tmp290 = simd_and(tmp57, tmp19);
          byte_range_9d_9f = simd_and(r800_ffff_tmp290, tmp5);
          carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(108), sequence_e1_9a_adv));
          r800_ffff_tmp291 = simd_and(sequence_e1_9a_adv, byte_range_9d_9f);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp291);
          sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
          sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
          byte_range_b1_bf = simd_and(tmp61, r800_ffff_tmp102);
          carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(109), sequence_e1_9b_adv));
          r800_ffff_tmp292 = simd_and(sequence_e1_9b_adv, byte_range_b1_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp292);
          sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
          sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
          r800_ffff_tmp293 = simd_and(tmp57, tmp110);
          r800_ffff_tmp294 = simd_or(byte_8d, r800_ffff_tmp293);
          r800_ffff_tmp295 = simd_and(tmp61, tmp105);
          cc_range_170d_1737_3 = simd_or(r800_ffff_tmp294, r800_ffff_tmp295);
          carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(110), sequence_e1_9c_adv));
          r800_ffff_tmp296 = simd_and(sequence_e1_9c_adv, cc_range_170d_1737_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp296);
          sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
          sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
          r800_ffff_tmp297 = simd_and(tmp57, tmp4);
          r800_ffff_tmp298 = simd_or(r800_ffff_tmp297, byte_ad);
          r800_ffff_tmp299 = simd_or(r800_ffff_tmp298, byte_b1);
          r800_ffff_tmp300 = simd_and(tmp61, tmp4);
          cc_range_1754_1774_3 = simd_or(r800_ffff_tmp299, r800_ffff_tmp300);
          carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(111), sequence_e1_9d_adv));
          r800_ffff_tmp301 = simd_and(sequence_e1_9d_adv, cc_range_1754_1774_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp301);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          r800_ffff_tmp302 = simd_and(r800_ffff_tmp137, tmp27);
          r800_ffff_tmp303 = simd_or(r800_ffff_tmp274, r800_ffff_tmp302);
          r800_ffff_tmp304 = simd_and(byte_range_b8_bf, tmp27);
          cc_range_17de_17fa_3 = simd_or(r800_ffff_tmp303, r800_ffff_tmp304);
          carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(112), sequence_e1_9f_adv));
          r800_ffff_tmp305 = simd_and(sequence_e1_9f_adv, cc_range_17de_17fa_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp305);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          cc_range_180f_181a_3 = simd_or(byte_8f, byte_range_9a_9f);
          carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(113), sequence_e1_a0_adv));
          r800_ffff_tmp306 = simd_and(sequence_e1_a0_adv, cc_range_180f_181a_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp306);
          sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
          sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
          carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(114), sequence_e1_a1_adv));
          r800_ffff_tmp307 = simd_and(sequence_e1_a1_adv, byte_range_b8_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp307);
          sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
          sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
          byte_range_ab_af = simd_and(r800_ffff_tmp137, tmp79);
          carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(115), sequence_e1_a2_adv));
          r800_ffff_tmp308 = simd_and(sequence_e1_a2_adv, byte_range_ab_af);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp308);
          sequence_e1_a3 = simd_and(byte_e1_adv, byte_a3);
          sequence_e1_a3 = simd_and(byte_e1_adv, byte_a3);
          carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_e1_a3, carryQ.get_carry_in(116), sequence_e1_a3_adv));
          r800_ffff_tmp309 = simd_and(sequence_e1_a3_adv, byte_range_b6_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp309);
          byte_a4 = simd_and(tmp78, tmp40);
          sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
          sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
          r800_ffff_tmp310 = simd_or(byte_range_9d_9f, byte_range_ac_af);
          cc_range_191d_193c_3 = simd_or(r800_ffff_tmp310, r800_ffff_tmp55);
          carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(117), sequence_e1_a4_adv));
          r800_ffff_tmp311 = simd_and(sequence_e1_a4_adv, cc_range_191d_193c_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp311);
          sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
          sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
          r800_ffff_tmp312 = simd_andc(tmp70, tmp4);
          r800_ffff_tmp313 = simd_and(r800_ffff_tmp312, tmp5);
          r800_ffff_tmp314 = simd_or(r800_ffff_tmp313, r800_ffff_tmp2);
          cc_range_1941_1975_3 = simd_or(r800_ffff_tmp314, byte_range_b5_bf);
          carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(118), sequence_e1_a5_adv));
          r800_ffff_tmp315 = simd_and(sequence_e1_a5_adv, cc_range_1941_1975_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp315);
          sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
          sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
          carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(119), sequence_e1_a6_adv));
          r800_ffff_tmp316 = simd_and(sequence_e1_a6_adv, byte_range_ac_af);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp316);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          r800_ffff_tmp317 = simd_and(r800_ffff_tmp57, tmp27);
          r800_ffff_tmp318 = simd_and(r800_ffff_tmp173, r800_ffff_tmp37);
          cc_range_19ca_19db_3 = simd_or(r800_ffff_tmp317, r800_ffff_tmp318);
          carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(120), sequence_e1_a7_adv));
          r800_ffff_tmp319 = simd_and(sequence_e1_a7_adv, cc_range_19ca_19db_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp319);
          sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
          sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
          byte_range_9c_9d = simd_and(tmp57, r800_ffff_tmp5);
          carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(121), sequence_e1_a8_adv));
          r800_ffff_tmp320 = simd_and(sequence_e1_a8_adv, byte_range_9c_9d);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp320);
          sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
          sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
          r800_ffff_tmp321 = simd_and(r800_ffff_tmp55, tmp117);
          cc_range_1a5f_1a7d_3 = simd_or(byte_9f, r800_ffff_tmp321);
          carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(122), sequence_e1_a9_adv));
          r800_ffff_tmp322 = simd_and(sequence_e1_a9_adv, cc_range_1a5f_1a7d_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp322);
          sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
          sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
          r800_ffff_tmp323 = simd_andc(tmp13, tmp8);
          r800_ffff_tmp324 = simd_andc(byte_range_80_bf, r800_ffff_tmp323);
          r800_ffff_tmp325 = simd_and(basis_bits.bit_4, r800_ffff_tmp324);
          r800_ffff_tmp326 = simd_and(tmp27, r800_ffff_tmp325);
          r800_ffff_tmp327 = simd_or(basis_bits.bit_3, tmp20);
          r800_ffff_tmp328 = simd_and(tmp73, r800_ffff_tmp327);
          cc_range_1a8a_1aae_3 = simd_or(r800_ffff_tmp326, r800_ffff_tmp328);
          carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(123), sequence_e1_aa_adv));
          r800_ffff_tmp329 = simd_and(sequence_e1_aa_adv, cc_range_1a8a_1aae_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp329);
          sequence_e1_ab = simd_and(byte_e1_adv, byte_ab);
          sequence_e1_ab = simd_and(byte_e1_adv, byte_ab);
          carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_e1_ab, carryQ.get_carry_in(124), sequence_e1_ab_adv));
          r800_ffff_tmp330 = simd_and(sequence_e1_ab_adv, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp330);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          cc_range_1b4c_1b7d_3 = simd_or(r800_ffff_tmp24, r800_ffff_tmp286);
          carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(125), sequence_e1_ad_adv));
          r800_ffff_tmp331 = simd_and(sequence_e1_ad_adv, cc_range_1b4c_1b7d_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp331);
          sequence_e1_af = simd_and(byte_e1_adv, byte_af);
          sequence_e1_af = simd_and(byte_e1_adv, byte_af);
          r800_ffff_tmp332 = simd_not(basis_bits.bit_5);
          r800_ffff_tmp333 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp332), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          byte_range_b4_bb = simd_and(tmp61, r800_ffff_tmp333);
          carryQ.cq[126] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(126), sequence_e1_af_adv));
          r800_ffff_tmp334 = simd_and(sequence_e1_af_adv, byte_range_b4_bb);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp334);
          sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
          sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
          r800_ffff_tmp335 = simd_and(tmp61, tmp58);
          byte_range_b8_ba = simd_andc(r800_ffff_tmp335, tmp25);
          carryQ.cq[127] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(127), sequence_e1_b0_adv));
          r800_ffff_tmp336 = simd_and(sequence_e1_b0_adv, byte_range_b8_ba);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp336);
          sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
          sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
          byte_range_8a_8c = simd_and(r800_ffff_tmp57, r800_ffff_tmp163);
          carryQ.cq[128] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(128), sequence_e1_b1_adv));
          r800_ffff_tmp337 = simd_and(sequence_e1_b1_adv, byte_range_8a_8c);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp337);
          sequence_e1_b2 = simd_and(byte_e1_adv, byte_b2);
          sequence_e1_b2 = simd_and(byte_e1_adv, byte_b2);
          carryQ.cq[129] = carryout2carry(pablo_blk_Advance(sequence_e1_b2, carryQ.get_carry_in(129), sequence_e1_b2_adv));
          r800_ffff_tmp338 = simd_and(sequence_e1_b2_adv, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp338);
          sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
          sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
          cc_range_1cc8_1cf7_3 = simd_or(r800_ffff_tmp57, r800_ffff_tmp295);
          carryQ.cq[130] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(130), sequence_e1_b3_adv));
          r800_ffff_tmp339 = simd_and(sequence_e1_b3_adv, cc_range_1cc8_1cf7_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp339);
          sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
          sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
          r800_ffff_tmp340 = simd_not(tmp19);
          r800_ffff_tmp341 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp340), simd_andc(tmp105, basis_bits.bit_3));
          byte_range_a7_bb = simd_and(tmp73, r800_ffff_tmp341);
          carryQ.cq[131] = carryout2carry(pablo_blk_Advance(sequence_e1_b7, carryQ.get_carry_in(131), sequence_e1_b7_adv));
          r800_ffff_tmp342 = simd_and(sequence_e1_b7_adv, byte_range_a7_bb);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp342);
          byte_bc = simd_and(tmp61, tmp67);
          sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
          sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
          r800_ffff_tmp343 = simd_and(basis_bits.bit_6, basis_bits.bit_5);
          cc_range_1f16_1f1e_3 = simd_and(tmp57, r800_ffff_tmp343);
          carryQ.cq[132] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(132), sequence_e1_bc_adv));
          r800_ffff_tmp344 = simd_and(sequence_e1_bc_adv, cc_range_1f16_1f1e_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp344);
          sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
          sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
          r800_ffff_tmp345 = simd_and(tmp70, r800_ffff_tmp343);
          r800_ffff_tmp346 = simd_or(r800_ffff_tmp345, r800_ffff_tmp236);
          r800_ffff_tmp347 = simd_or(r800_ffff_tmp346, byte_9a);
          r800_ffff_tmp348 = simd_or(r800_ffff_tmp347, byte_9c);
          r800_ffff_tmp349 = simd_or(r800_ffff_tmp348, byte_9e);
          cc_range_1f46_1f7e_3 = simd_or(r800_ffff_tmp349, r800_ffff_tmp208);
          carryQ.cq[133] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(133), sequence_e1_bd_adv));
          r800_ffff_tmp350 = simd_and(sequence_e1_bd_adv, cc_range_1f46_1f7e_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp350);
          sequence_e1_be = simd_and(byte_e1_adv, byte_be);
          sequence_e1_be = simd_and(byte_e1_adv, byte_be);
          carryQ.cq[134] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(134), sequence_e1_be_adv));
          r800_ffff_tmp351 = simd_and(sequence_e1_be_adv, byte_b5);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp351);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          r800_ffff_tmp352 = simd_and(tmp70, tmp41);
          r800_ffff_tmp353 = simd_or(r800_ffff_tmp352, byte_range_94_95);
          r800_ffff_tmp354 = simd_or(r800_ffff_tmp353, byte_9c);
          r800_ffff_tmp355 = simd_andc(tmp61, tmp17);
          r800_ffff_tmp356 = simd_or(r800_ffff_tmp354, r800_ffff_tmp355);
          r800_ffff_tmp357 = simd_and(tmp61, tmp41);
          r800_ffff_tmp358 = simd_or(r800_ffff_tmp356, r800_ffff_tmp357);
          cc_range_1fc5_1fff_3 = simd_or(r800_ffff_tmp358, byte_bf);
          carryQ.cq[135] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(135), sequence_e1_bf_adv));
          r800_ffff_tmp359 = simd_and(sequence_e1_bf_adv, cc_range_1fc5_1fff_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp359);
          byte_e2 = simd_and(byte_range_e0_ef, tmp69);
          carryQ.cq[136] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(136), r800_ffff_tmp360));
          sequence_e2_81 = simd_and(r800_ffff_tmp360, byte_81);
          carryQ.cq[137] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(137), byte_e2_adv));
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          r800_ffff_tmp361 = simd_andc(basis_bits.bit_6, tmp4);
          r800_ffff_tmp362 = simd_and(tmp61, r800_ffff_tmp361);
          cc_range_2065_2072_3 = simd_or(byte_a5, r800_ffff_tmp362);
          carryQ.cq[138] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(138), sequence_e2_81_adv));
          r800_ffff_tmp363 = simd_and(sequence_e2_81_adv, cc_range_2065_2072_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp363);
          byte_82 = simd_and(tmp70, tmp69);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          r800_ffff_tmp364 = simd_or(byte_8f, byte_range_9d_9f);
          cc_range_208f_20bb_3 = simd_or(r800_ffff_tmp364, r800_ffff_tmp155);
          carryQ.cq[139] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(139), sequence_e2_82_adv));
          r800_ffff_tmp365 = simd_and(sequence_e2_82_adv, cc_range_208f_20bb_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp365);
          sequence_e2_83 = simd_and(byte_e2_adv, byte_83);
          sequence_e2_83 = simd_and(byte_e2_adv, byte_83);
          cc_range_20c0_20f1_3 = simd_or(tmp70, byte_range_b1_bf);
          carryQ.cq[140] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(140), sequence_e2_83_adv));
          r800_ffff_tmp366 = simd_and(sequence_e2_83_adv, cc_range_20c0_20f1_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp366);
          byte_86 = simd_and(tmp70, tmp91);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          byte_range_8a_8f = simd_and(r800_ffff_tmp57, tmp27);
          carryQ.cq[141] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(141), sequence_e2_86_adv));
          r800_ffff_tmp367 = simd_and(sequence_e2_86_adv, byte_range_8a_8f);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp367);
          sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
          sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
          byte_range_b4_bf = simd_and(tmp61, tmp4);
          carryQ.cq[142] = carryout2carry(pablo_blk_Advance(sequence_e2_8f, carryQ.get_carry_in(142), sequence_e2_8f_adv));
          r800_ffff_tmp368 = simd_and(sequence_e2_8f_adv, byte_range_b4_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp368);
          sequence_e2_90 = simd_and(byte_e2_adv, byte_90);
          sequence_e2_90 = simd_and(byte_e2_adv, byte_90);
          r800_ffff_tmp369 = simd_or(basis_bits.bit_3, tmp105);
          byte_range_a7_bf = simd_and(tmp73, r800_ffff_tmp369);
          carryQ.cq[143] = carryout2carry(pablo_blk_Advance(sequence_e2_90, carryQ.get_carry_in(143), sequence_e2_90_adv));
          r800_ffff_tmp370 = simd_and(sequence_e2_90_adv, byte_range_a7_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp370);
          sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
          sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
          r800_ffff_tmp371 = simd_or(basis_bits.bit_3, r800_ffff_tmp259);
          byte_range_8b_9f = simd_and(r800_ffff_tmp11, r800_ffff_tmp371);
          carryQ.cq[144] = carryout2carry(pablo_blk_Advance(sequence_e2_91, carryQ.get_carry_in(144), sequence_e2_91_adv));
          r800_ffff_tmp372 = simd_and(sequence_e2_91_adv, byte_range_8b_9f);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp372);
          sequence_e2_9c = simd_and(byte_e2_adv, byte_9c);
          sequence_e2_9c = simd_and(byte_e2_adv, byte_9c);
          carryQ.cq[145] = carryout2carry(pablo_blk_Advance(sequence_e2_9c, carryQ.get_carry_in(145), sequence_e2_9c_adv));
          r800_ffff_tmp373 = simd_and(sequence_e2_9c_adv, byte_80);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp373);
          sequence_e2_ad = simd_and(byte_e2_adv, byte_ad);
          sequence_e2_ad = simd_and(byte_e2_adv, byte_ad);
          r800_ffff_tmp374 = simd_and(r800_ffff_tmp24, tmp5);
          r800_ffff_tmp375 = simd_and(byte_range_80_bf, tmp51);
          cc_range_2b4d_2b5a_3 = simd_or(r800_ffff_tmp374, r800_ffff_tmp375);
          carryQ.cq[146] = carryout2carry(pablo_blk_Advance(sequence_e2_ad, carryQ.get_carry_in(146), sequence_e2_ad_adv));
          r800_ffff_tmp376 = simd_and(sequence_e2_ad_adv, cc_range_2b4d_2b5a_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp376);
          byte_range_ae_af = simd_and(tmp78, tmp20);
          byte_e2_byte_range_ae_af = simd_and(byte_e2_adv, byte_range_ae_af);
          carryQ.cq[147] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_ae_af, carryQ.get_carry_in(147), r800_ffff_tmp377));
          byte_e2_byte_range_ae_af_sfx = simd_and(r800_ffff_tmp377, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, byte_e2_byte_range_ae_af_sfx);
          sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
          carryQ.cq[148] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(148), r800_ffff_tmp378));
          sequence_e2_b0_af = simd_and(r800_ffff_tmp378, byte_af);
          sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
          carryQ.cq[149] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(149), r800_ffff_tmp379));
          sequence_e2_b1_9f = simd_and(r800_ffff_tmp379, byte_9f);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          r800_ffff_tmp380 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp81), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          byte_range_b4_b8 = simd_and(tmp61, r800_ffff_tmp380);
          carryQ.cq[150] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(150), r800_ffff_tmp381));
          sequence_e2_b3_byte_range_b4_b8 = simd_and(r800_ffff_tmp381, byte_range_b4_b8);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_e2_b3_byte_range_b4_b8);
          sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
          carryQ.cq[151] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(151), r800_ffff_tmp382));
          sequence_e2_b4_a6 = simd_and(r800_ffff_tmp382, byte_a6);
          sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
          byte_range_a8_ae = simd_andc(r800_ffff_tmp137, tmp104);
          carryQ.cq[152] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(152), r800_ffff_tmp383));
          sequence_e2_b5_byte_range_a8_ae = simd_and(r800_ffff_tmp383, byte_range_a8_ae);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_e2_b5_byte_range_a8_ae);
          sequence_e2_b6 = simd_and(byte_e2_adv, byte_b6);
          byte_range_97_9f = simd_and(tmp57, tmp105);
          carryQ.cq[153] = carryout2carry(pablo_blk_Advance(sequence_e2_b6, carryQ.get_carry_in(153), r800_ffff_tmp384));
          sequence_e2_b6_byte_range_97_9f = simd_and(r800_ffff_tmp384, byte_range_97_9f);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_e2_b6_byte_range_97_9f);
          sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
          carryQ.cq[154] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(154), r800_ffff_tmp385));
          sequence_e2_b7_87 = simd_and(r800_ffff_tmp385, byte_87);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          byte_range_bc_bf = simd_and(tmp61, tmp19);
          carryQ.cq[155] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(155), r800_ffff_tmp386));
          sequence_e2_b8_byte_range_bc_bf = simd_and(r800_ffff_tmp386, byte_range_bc_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_e2_b8_byte_range_bc_bf);
          sequence_e2_b9 = simd_and(byte_e2_adv, byte_b9);
          carryQ.cq[156] = carryout2carry(pablo_blk_Advance(sequence_e2_b9, carryQ.get_carry_in(156), r800_ffff_tmp387));
          sequence_e2_b9_byte_range_80_bf = simd_and(r800_ffff_tmp387, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_e2_b9_byte_range_80_bf);
          sequence_e2_ba = simd_and(byte_e2_adv, byte_ba);
          carryQ.cq[157] = carryout2carry(pablo_blk_Advance(sequence_e2_ba, carryQ.get_carry_in(157), r800_ffff_tmp388));
          sequence_e2_ba_9a = simd_and(r800_ffff_tmp388, byte_9a);
          sequence_e2_bb = simd_and(byte_e2_adv, byte_bb);
          carryQ.cq[158] = carryout2carry(pablo_blk_Advance(sequence_e2_bb, carryQ.get_carry_in(158), r800_ffff_tmp389));
          sequence_e2_bb_byte_range_b4_bf = simd_and(r800_ffff_tmp389, byte_range_b4_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_e2_bb_byte_range_b4_bf);
          sequence_e2_bf = simd_and(byte_e2_adv, byte_bf);
          r800_ffff_tmp390 = simd_not(basis_bits.bit_3);
          r800_ffff_tmp391 = simd_and(basis_bits.bit_3, tmp99);
          r800_ffff_tmp392 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp390), simd_andc(r800_ffff_tmp391, basis_bits.bit_2));
          byte_range_96_af = simd_and(byte_range_80_bf, r800_ffff_tmp392);
          carryQ.cq[159] = carryout2carry(pablo_blk_Advance(sequence_e2_bf, carryQ.get_carry_in(159), r800_ffff_tmp393));
          sequence_e2_bf_byte_range_96_af = simd_and(r800_ffff_tmp393, byte_range_96_af);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_e2_bf_byte_range_96_af);
          byte_e3 = simd_and(byte_range_e0_ef, tmp26);
          carryQ.cq[160] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(160), r800_ffff_tmp394));
          sequence_e3_81 = simd_and(r800_ffff_tmp394, byte_81);
          carryQ.cq[161] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(161), byte_e3_adv));
          sequence_e3_81 = simd_and(byte_e3_adv, byte_81);
          carryQ.cq[162] = carryout2carry(pablo_blk_Advance(sequence_e3_81, carryQ.get_carry_in(162), sequence_e3_81_adv));
          r800_ffff_tmp395 = simd_and(sequence_e3_81_adv, byte_80);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp395);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          r800_ffff_tmp396 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp81), simd_andc(tmp104, basis_bits.bit_4));
          byte_range_97_98 = simd_and(tmp57, r800_ffff_tmp396);
          carryQ.cq[163] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(163), sequence_e3_82_adv));
          r800_ffff_tmp397 = simd_and(sequence_e3_82_adv, byte_range_97_98);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp397);
          sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
          sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
          r800_ffff_tmp398 = simd_andc(r800_ffff_tmp72, tmp109);
          r800_ffff_tmp399 = simd_and(tmp73, r800_ffff_tmp78);
          cc_range_3100_312e_3 = simd_or(r800_ffff_tmp398, r800_ffff_tmp399);
          carryQ.cq[164] = carryout2carry(pablo_blk_Advance(sequence_e3_84, carryQ.get_carry_in(164), sequence_e3_84_adv));
          r800_ffff_tmp400 = simd_and(sequence_e3_84_adv, cc_range_3100_312e_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp400);
          sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
          sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
          cc_range_318f_31bb_3 = simd_or(byte_8f, r800_ffff_tmp155);
          carryQ.cq[165] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(165), sequence_e3_86_adv));
          r800_ffff_tmp401 = simd_and(sequence_e3_86_adv, cc_range_318f_31bb_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp401);
          sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
          sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
          byte_range_a4_af = simd_and(tmp78, tmp4);
          carryQ.cq[166] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(166), sequence_e3_87_adv));
          r800_ffff_tmp402 = simd_and(sequence_e3_87_adv, byte_range_a4_af);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp402);
          byte_88 = simd_and(tmp70, r800_ffff_tmp20);
          sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
          sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
          carryQ.cq[167] = carryout2carry(pablo_blk_Advance(sequence_e3_88, carryQ.get_carry_in(167), sequence_e3_88_adv));
          r800_ffff_tmp403 = simd_and(sequence_e3_88_adv, byte_9f);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp403);
          sequence_e3_8b = simd_and(byte_e3_adv, byte_8b);
          sequence_e3_8b = simd_and(byte_e3_adv, byte_8b);
          carryQ.cq[168] = carryout2carry(pablo_blk_Advance(sequence_e3_8b, carryQ.get_carry_in(168), sequence_e3_8b_adv));
          r800_ffff_tmp404 = simd_and(sequence_e3_8b_adv, byte_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp404);
          byte_e4 = simd_and(byte_range_e0_ef, tmp40);
          carryQ.cq[169] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(169), r800_ffff_tmp405));
          sequence_e4_b6 = simd_and(r800_ffff_tmp405, byte_b6);
          carryQ.cq[170] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(170), byte_e4_adv));
          sequence_e4_b6 = simd_and(byte_e4_adv, byte_b6);
          carryQ.cq[171] = carryout2carry(pablo_blk_Advance(sequence_e4_b6, carryQ.get_carry_in(171), sequence_e4_b6_adv));
          r800_ffff_tmp406 = simd_and(sequence_e4_b6_adv, byte_range_b6_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp406);
          byte_e9 = simd_and(byte_range_e0_ef, r800_ffff_tmp30);
          carryQ.cq[172] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(172), r800_ffff_tmp407));
          sequence_e9_bf = simd_and(r800_ffff_tmp407, byte_bf);
          carryQ.cq[173] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(173), byte_e9_adv));
          sequence_e9_bf = simd_and(byte_e9_adv, byte_bf);
          r800_ffff_tmp408 = simd_or(basis_bits.bit_2, r800_ffff_tmp14);
          byte_range_8d_bf = simd_and(byte_range_80_bf, r800_ffff_tmp408);
          carryQ.cq[174] = carryout2carry(pablo_blk_Advance(sequence_e9_bf, carryQ.get_carry_in(174), sequence_e9_bf_adv));
          r800_ffff_tmp409 = simd_and(sequence_e9_bf_adv, byte_range_8d_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp409);
          byte_ea = simd_and(byte_range_e0_ef, tmp60);
          carryQ.cq[175] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(175), r800_ffff_tmp410));
          sequence_ea_92 = simd_and(r800_ffff_tmp410, byte_92);
          carryQ.cq[176] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(176), byte_ea_adv));
          sequence_ea_92 = simd_and(byte_ea_adv, byte_92);
          byte_range_8d_8f = simd_and(r800_ffff_tmp24, tmp5);
          carryQ.cq[177] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(177), sequence_ea_92_adv));
          r800_ffff_tmp411 = simd_and(sequence_ea_92_adv, byte_range_8d_8f);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp411);
          sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
          sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
          byte_range_87_8f = simd_and(tmp70, tmp105);
          carryQ.cq[178] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(178), sequence_ea_93_adv));
          r800_ffff_tmp412 = simd_and(sequence_ea_93_adv, byte_range_87_8f);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp412);
          byte_98 = simd_and(tmp57, r800_ffff_tmp20);
          sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
          sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
          r800_ffff_tmp413 = simd_or(basis_bits.bit_3, tmp19);
          byte_range_ac_bf = simd_and(tmp73, r800_ffff_tmp413);
          carryQ.cq[179] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(179), sequence_ea_98_adv));
          r800_ffff_tmp414 = simd_and(sequence_ea_98_adv, byte_range_ac_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp414);
          sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
          sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
          byte_range_98_9e = simd_andc(r800_ffff_tmp173, tmp104);
          carryQ.cq[180] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(180), sequence_ea_9a_adv));
          r800_ffff_tmp415 = simd_and(sequence_ea_9a_adv, byte_range_98_9e);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp415);
          sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
          sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
          carryQ.cq[181] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(181), sequence_ea_9b_adv));
          r800_ffff_tmp416 = simd_and(sequence_ea_9b_adv, byte_range_b8_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp416);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          r800_ffff_tmp417 = simd_or(byte_8f, r800_ffff_tmp297);
          r800_ffff_tmp418 = simd_and(tmp73, r800_ffff_tmp371);
          cc_range_a78f_a7ab_3 = simd_or(r800_ffff_tmp417, r800_ffff_tmp418);
          carryQ.cq[182] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(182), sequence_ea_9e_adv));
          r800_ffff_tmp419 = simd_and(sequence_ea_9e_adv, cc_range_a78f_a7ab_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp419);
          sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
          sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
          r800_ffff_tmp420 = simd_and(basis_bits.bit_2, r800_ffff_tmp151);
          byte_range_80_b7 = simd_andc(byte_range_80_bf, r800_ffff_tmp420);
          carryQ.cq[183] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(183), sequence_ea_9f_adv));
          r800_ffff_tmp421 = simd_and(sequence_ea_9f_adv, byte_range_80_b7);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp421);
          sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
          sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
          cc_range_a82c_a83a_3 = simd_or(byte_range_ac_af, r800_ffff_tmp304);
          carryQ.cq[184] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(184), sequence_ea_a0_adv));
          r800_ffff_tmp422 = simd_and(sequence_ea_a0_adv, cc_range_a82c_a83a_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp422);
          sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
          sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
          carryQ.cq[185] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(185), sequence_ea_a1_adv));
          r800_ffff_tmp423 = simd_and(sequence_ea_a1_adv, byte_range_b8_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp423);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          r800_ffff_tmp424 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp184), simd_andc(tmp109, basis_bits.bit_4));
          r800_ffff_tmp425 = simd_and(tmp70, r800_ffff_tmp424);
          r800_ffff_tmp426 = simd_or(r800_ffff_tmp425, byte_range_9a_9f);
          cc_range_a8c5_a8fc_3 = simd_or(r800_ffff_tmp426, byte_range_bc_bf);
          carryQ.cq[186] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(186), sequence_ea_a3_adv));
          r800_ffff_tmp427 = simd_and(sequence_ea_a3_adv, cc_range_a8c5_a8fc_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp427);
          sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
          sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
          r800_ffff_tmp428 = simd_not(tmp104);
          r800_ffff_tmp429 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp428), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          r800_ffff_tmp430 = simd_and(tmp57, r800_ffff_tmp429);
          r800_ffff_tmp431 = simd_and(byte_range_bc_bf, tmp5);
          cc_range_a954_a97d_3 = simd_or(r800_ffff_tmp430, r800_ffff_tmp431);
          carryQ.cq[187] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(187), sequence_ea_a5_adv));
          r800_ffff_tmp432 = simd_and(sequence_ea_a5_adv, cc_range_a954_a97d_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp432);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          r800_ffff_tmp433 = simd_and(r800_ffff_tmp173, r800_ffff_tmp140);
          r800_ffff_tmp434 = simd_or(byte_8e, r800_ffff_tmp433);
          cc_range_a9ce_a9e0_3 = simd_or(r800_ffff_tmp434, tmp73);
          carryQ.cq[188] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(188), sequence_ea_a7_adv));
          r800_ffff_tmp435 = simd_and(sequence_ea_a7_adv, cc_range_a9ce_a9e0_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp435);
          sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
          sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
          byte_range_b7_bf = simd_and(tmp61, tmp105);
          carryQ.cq[189] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(189), sequence_ea_a8_adv));
          r800_ffff_tmp436 = simd_and(sequence_ea_a8_adv, byte_range_b7_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp436);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          r800_ffff_tmp437 = simd_or(byte_range_8e_8f, r800_ffff_tmp251);
          cc_range_aa4e_aa7c_3 = simd_or(r800_ffff_tmp437, byte_range_bc_bf);
          carryQ.cq[190] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(190), sequence_ea_a9_adv));
          r800_ffff_tmp438 = simd_and(sequence_ea_a9_adv, cc_range_aa4e_aa7c_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp438);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          r800_ffff_tmp439 = simd_not(r800_ffff_tmp259);
          r800_ffff_tmp440 = simd_or(tmp4, tmp25);
          r800_ffff_tmp441 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp439), simd_andc(r800_ffff_tmp440, basis_bits.bit_3));
          r800_ffff_tmp442 = simd_and(r800_ffff_tmp11, r800_ffff_tmp441);
          cc_range_aac3_aaf7_3 = simd_or(r800_ffff_tmp442, byte_range_b7_bf);
          carryQ.cq[191] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(191), sequence_ea_ab_adv));
          r800_ffff_tmp443 = simd_and(sequence_ea_ab_adv, cc_range_aac3_aaf7_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp443);
          sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
          sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
          r800_ffff_tmp444 = simd_andc(tmp6, r800_ffff_tmp396);
          r800_ffff_tmp445 = simd_andc(tmp70, r800_ffff_tmp444);
          r800_ffff_tmp446 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp77), simd_andc(tmp74, basis_bits.bit_3));
          r800_ffff_tmp447 = simd_and(r800_ffff_tmp11, r800_ffff_tmp446);
          r800_ffff_tmp448 = simd_or(r800_ffff_tmp445, r800_ffff_tmp447);
          r800_ffff_tmp449 = simd_or(r800_ffff_tmp448, byte_range_97_9f);
          r800_ffff_tmp450 = simd_or(r800_ffff_tmp449, byte_a7);
          cc_range_ab00_ab2f_3 = simd_or(r800_ffff_tmp450, byte_range_af_bf);
          carryQ.cq[192] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(192), sequence_ea_ac_adv));
          r800_ffff_tmp451 = simd_and(sequence_ea_ac_adv, cc_range_ab00_ab2f_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp451);
          byte_range_ad_ae = simd_and(byte_range_ac_af, tmp117);
          byte_ea_byte_range_ad_ae = simd_and(byte_ea_adv, byte_range_ad_ae);
          carryQ.cq[193] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_ad_ae, carryQ.get_carry_in(193), r800_ffff_tmp452));
          byte_ea_byte_range_ad_ae_sfx = simd_and(r800_ffff_tmp452, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, byte_ea_byte_range_ad_ae_sfx);
          sequence_ea_af = simd_and(byte_ea_adv, byte_af);
          carryQ.cq[194] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(194), r800_ffff_tmp453));
          sequence_ea_af_byte_range_ae_af = simd_and(r800_ffff_tmp453, byte_range_ae_af);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_ea_af_byte_range_ae_af);
          byte_ed = simd_and(byte_range_e0_ef, tmp71);
          carryQ.cq[195] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(195), r800_ffff_tmp454));
          sequence_ed_9e = simd_and(r800_ffff_tmp454, byte_9e);
          carryQ.cq[196] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(196), byte_ed_adv));
          sequence_ed_9e = simd_and(byte_ed_adv, byte_9e);
          carryQ.cq[197] = carryout2carry(pablo_blk_Advance(sequence_ed_9e, carryQ.get_carry_in(197), sequence_ed_9e_adv));
          r800_ffff_tmp455 = simd_and(sequence_ed_9e_adv, byte_range_a4_af);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp455);
          sequence_ed_9f = simd_and(byte_ed_adv, byte_9f);
          sequence_ed_9f = simd_and(byte_ed_adv, byte_9f);
          r800_ffff_tmp456 = simd_not(tmp79);
          r800_ffff_tmp457 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp456), simd_andc(tmp104, basis_bits.bit_4));
          r800_ffff_tmp458 = simd_and(tmp70, r800_ffff_tmp457);
          cc_range_d7c7_d7fc_3 = simd_or(r800_ffff_tmp458, byte_range_bc_bf);
          carryQ.cq[198] = carryout2carry(pablo_blk_Advance(sequence_ed_9f, carryQ.get_carry_in(198), sequence_ed_9f_adv));
          r800_ffff_tmp459 = simd_and(sequence_ed_9f_adv, cc_range_d7c7_d7fc_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp459);
          byte_ef = simd_and(byte_range_e0_ef, tmp74);
          carryQ.cq[199] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(199), r800_ffff_tmp460));
          sequence_ef_a9 = simd_and(r800_ffff_tmp460, byte_a9);
          carryQ.cq[200] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(200), byte_ef_adv));
          sequence_ef_a9 = simd_and(byte_ef_adv, byte_a9);
          carryQ.cq[201] = carryout2carry(pablo_blk_Advance(sequence_ef_a9, carryQ.get_carry_in(201), sequence_ef_a9_adv));
          r800_ffff_tmp461 = simd_and(sequence_ef_a9_adv, byte_range_ae_af);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp461);
          sequence_ef_ab = simd_and(byte_ef_adv, byte_ab);
          sequence_ef_ab = simd_and(byte_ef_adv, byte_ab);
          byte_range_9a_bf = simd_and(byte_range_80_bf, tmp51);
          carryQ.cq[202] = carryout2carry(pablo_blk_Advance(sequence_ef_ab, carryQ.get_carry_in(202), sequence_ef_ab_adv));
          r800_ffff_tmp462 = simd_and(sequence_ef_ab_adv, byte_range_9a_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp462);
          sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
          sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
          r800_ffff_tmp463 = simd_not(r800_ffff_tmp440);
          r800_ffff_tmp464 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp463), simd_andc(tmp105, basis_bits.bit_3));
          r800_ffff_tmp465 = simd_and(r800_ffff_tmp11, r800_ffff_tmp464);
          r800_ffff_tmp466 = simd_andc(r800_ffff_tmp173, tmp109);
          r800_ffff_tmp467 = simd_or(r800_ffff_tmp465, r800_ffff_tmp466);
          r800_ffff_tmp468 = simd_or(r800_ffff_tmp467, byte_b7);
          r800_ffff_tmp469 = simd_or(r800_ffff_tmp468, byte_bd);
          cc_range_fb07_fb3f_3 = simd_or(r800_ffff_tmp469, byte_bf);
          carryQ.cq[203] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(203), sequence_ef_ac_adv));
          r800_ffff_tmp470 = simd_and(sequence_ef_ac_adv, cc_range_fb07_fb3f_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp470);
          sequence_ef_ad = simd_and(byte_ef_adv, byte_ad);
          sequence_ef_ad = simd_and(byte_ef_adv, byte_ad);
          r800_ffff_tmp471 = simd_or(tmp69, tmp41);
          cc_range_fb42_fb45_3 = simd_and(tmp70, r800_ffff_tmp471);
          carryQ.cq[204] = carryout2carry(pablo_blk_Advance(sequence_ef_ad, carryQ.get_carry_in(204), sequence_ef_ad_adv));
          r800_ffff_tmp472 = simd_and(sequence_ef_ad_adv, cc_range_fb42_fb45_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp472);
          sequence_ef_af = simd_and(byte_ef_adv, byte_af);
          sequence_ef_af = simd_and(byte_ef_adv, byte_af);
          r800_ffff_tmp473 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp463), simd_andc(tmp17, basis_bits.bit_3));
          byte_range_82_92 = simd_and(r800_ffff_tmp11, r800_ffff_tmp473);
          carryQ.cq[205] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(205), sequence_ef_af_adv));
          r800_ffff_tmp474 = simd_and(sequence_ef_af_adv, byte_range_82_92);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp474);
          sequence_ef_b5 = simd_and(byte_ef_adv, byte_b5);
          sequence_ef_b5 = simd_and(byte_ef_adv, byte_b5);
          byte_range_80_8f = simd_andc(byte_range_80_bf, tmp13);
          carryQ.cq[206] = carryout2carry(pablo_blk_Advance(sequence_ef_b5, carryQ.get_carry_in(206), sequence_ef_b5_adv));
          r800_ffff_tmp475 = simd_and(sequence_ef_b5_adv, byte_range_80_8f);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp475);
          sequence_ef_b6 = simd_and(byte_ef_adv, byte_b6);
          sequence_ef_b6 = simd_and(byte_ef_adv, byte_b6);
          byte_range_90_91 = simd_andc(tmp57, tmp17);
          carryQ.cq[207] = carryout2carry(pablo_blk_Advance(sequence_ef_b6, carryQ.get_carry_in(207), sequence_ef_b6_adv));
          r800_ffff_tmp476 = simd_and(sequence_ef_b6_adv, byte_range_90_91);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp476);
          sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
          sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
          r800_ffff_tmp477 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
          r800_ffff_tmp478 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp390), simd_andc(r800_ffff_tmp477, basis_bits.bit_2));
          r800_ffff_tmp479 = simd_and(byte_range_80_bf, r800_ffff_tmp478);
          cc_range_fdc8_fdfe_3 = simd_or(r800_ffff_tmp479, r800_ffff_tmp208);
          carryQ.cq[208] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(208), sequence_ef_b7_adv));
          r800_ffff_tmp480 = simd_and(sequence_ef_b7_adv, cc_range_fdc8_fdfe_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp480);
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          r800_ffff_tmp481 = simd_and(tmp78, tmp105);
          cc_range_fe1a_fe27_3 = simd_or(byte_range_9a_9f, r800_ffff_tmp481);
          carryQ.cq[209] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(209), sequence_ef_b8_adv));
          r800_ffff_tmp482 = simd_and(sequence_ef_b8_adv, cc_range_fe1a_fe27_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp482);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          r800_ffff_tmp483 = simd_or(byte_93, byte_a7);
          r800_ffff_tmp484 = simd_or(r800_ffff_tmp483, byte_range_ac_af);
          cc_range_fe53_fe75_3 = simd_or(r800_ffff_tmp484, r800_ffff_tmp357);
          carryQ.cq[210] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(210), sequence_ef_b9_adv));
          r800_ffff_tmp485 = simd_and(sequence_ef_b9_adv, cc_range_fe53_fe75_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp485);
          sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
          sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
          byte_range_bd_be = simd_and(byte_range_bc_bf, tmp117);
          carryQ.cq[211] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(211), sequence_ef_bb_adv));
          r800_ffff_tmp486 = simd_and(sequence_ef_bb_adv, byte_range_bd_be);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp486);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          carryQ.cq[212] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(212), sequence_ef_bc_adv));
          r800_ffff_tmp487 = simd_and(sequence_ef_bc_adv, byte_80);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp487);
          sequence_ef_be = simd_and(byte_ef_adv, byte_be);
          sequence_ef_be = simd_and(byte_ef_adv, byte_be);
          carryQ.cq[213] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(213), sequence_ef_be_adv));
          r800_ffff_tmp488 = simd_and(sequence_ef_be_adv, byte_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp488);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          r800_ffff_tmp489 = simd_andc(tmp17, r800_ffff_tmp242);
          r800_ffff_tmp490 = simd_andc(byte_range_80_8f, r800_ffff_tmp489);
          r800_ffff_tmp491 = simd_or(r800_ffff_tmp490, byte_range_90_91);
          r800_ffff_tmp492 = simd_and(tmp57, r800_ffff_tmp242);
          r800_ffff_tmp493 = simd_or(r800_ffff_tmp491, r800_ffff_tmp492);
          r800_ffff_tmp494 = simd_or(r800_ffff_tmp493, byte_range_9d_9f);
          r800_ffff_tmp495 = simd_or(r800_ffff_tmp494, byte_a7);
          r800_ffff_tmp496 = simd_and(basis_bits.bit_4, tmp33);
          r800_ffff_tmp497 = simd_not(r800_ffff_tmp496);
          r800_ffff_tmp498 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp497), simd_andc(tmp74, basis_bits.bit_3));
          r800_ffff_tmp499 = simd_and(tmp73, r800_ffff_tmp498);
          r800_ffff_tmp500 = simd_or(r800_ffff_tmp495, r800_ffff_tmp499);
          cc_range_ffc0_fffe_3 = simd_or(r800_ffff_tmp500, r800_ffff_tmp208);
          carryQ.cq[214] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(214), sequence_ef_bf_adv));
          r800_ffff_tmp501 = simd_and(sequence_ef_bf_adv, cc_range_ffc0_fffe_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp501);
        }
        else {
          carryQ.CarryDequeueEnqueue(66, 149);
        }
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        carryQ.cq[215] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(215), tmp122));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp122, byte_range_80_bf);
        carryQ.cq[216] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(216), tmp123));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp123, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(217, 33))) {
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          sequence_f0_90_80 = simd_and(tmp122, byte_80);
          carryQ.cq[217] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(217), sequence_f0_90_adv));
          sequence_f0_90_80 = simd_and(sequence_f0_90_adv, byte_80);
          r10000_10fff_tmp1 = simd_and(tmp70, tmp67);
          r10000_10fff_tmp2 = simd_and(tmp78, tmp46);
          r10000_10fff_tmp3 = simd_or(r10000_10fff_tmp1, r10000_10fff_tmp2);
          r10000_10fff_tmp4 = simd_and(tmp61, tmp63);
          r10000_10fff_tmp5 = simd_or(r10000_10fff_tmp3, r10000_10fff_tmp4);
          r10000_10fff_tmp6 = simd_and(tmp61, tmp101);
          cc_range_1000c_1003e_4 = simd_or(r10000_10fff_tmp5, r10000_10fff_tmp6);
          carryQ.cq[218] = carryout2carry(pablo_blk_Advance(sequence_f0_90_80, carryQ.get_carry_in(218), sequence_f0_90_80_adv));
          r10000_10fff_tmp7 = simd_and(sequence_f0_90_80_adv, cc_range_1000c_1003e_4);
          struct_Cn.cc = simd_or(struct_Cn.cc, r10000_10fff_tmp7);
          sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
          sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
          r10000_10fff_tmp8 = simd_and(basis_bits.bit_3, tmp20);
          r10000_10fff_tmp9 = simd_or(basis_bits.bit_2, r10000_10fff_tmp8);
          r10000_10fff_tmp10 = simd_and(byte_range_80_bf, r10000_10fff_tmp9);
          cc_range_1004e_1005e_4 = simd_or(byte_range_8e_8f, r10000_10fff_tmp10);
          carryQ.cq[219] = carryout2carry(pablo_blk_Advance(sequence_f0_90_81, carryQ.get_carry_in(219), sequence_f0_90_81_adv));
          r10000_10fff_tmp11 = simd_and(sequence_f0_90_81_adv, cc_range_1004e_1005e_4);
          struct_Cn.cc = simd_or(struct_Cn.cc, r10000_10fff_tmp11);
          sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
          sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
          byte_range_bb_bf = simd_and(byte_range_b8_bf, tmp79);
          carryQ.cq[220] = carryout2carry(pablo_blk_Advance(sequence_f0_90_83, carryQ.get_carry_in(220), sequence_f0_90_83_adv));
          r10000_10fff_tmp12 = simd_and(sequence_f0_90_83_adv, byte_range_bb_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r10000_10fff_tmp12);
          sequence_f0_90_84 = simd_and(sequence_f0_90_adv, byte_84);
          sequence_f0_90_84 = simd_and(sequence_f0_90_adv, byte_84);
          r10000_10fff_tmp13 = simd_andc(tmp70, basis_bits.bit_4);
          r10000_10fff_tmp14 = simd_not(tmp25);
          r10000_10fff_tmp15 = simd_or(simd_and(basis_bits.bit_5, r10000_10fff_tmp14), simd_andc(tmp25, basis_bits.bit_5));
          r10000_10fff_tmp16 = simd_and(r10000_10fff_tmp13, r10000_10fff_tmp15);
          r10000_10fff_tmp17 = simd_and(tmp61, tmp39);
          r10000_10fff_tmp18 = simd_andc(r10000_10fff_tmp17, tmp25);
          cc_range_10103_10134_4 = simd_or(r10000_10fff_tmp16, r10000_10fff_tmp18);
          carryQ.cq[221] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(221), sequence_f0_90_84_adv));
          r10000_10fff_tmp19 = simd_and(sequence_f0_90_84_adv, cc_range_10103_10134_4);
          struct_Cn.cc = simd_or(struct_Cn.cc, r10000_10fff_tmp19);
          byte_86 = simd_and(tmp70, tmp91);
          sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
          sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
          r10000_10fff_tmp20 = simd_and(tmp70, basis_bits.bit_4);
          r10000_10fff_tmp21 = simd_and(r10000_10fff_tmp20, tmp79);
          r10000_10fff_tmp22 = simd_and(basis_bits.bit_3, tmp19);
          r10000_10fff_tmp23 = simd_or(basis_bits.bit_2, r10000_10fff_tmp22);
          r10000_10fff_tmp24 = simd_and(byte_range_80_bf, r10000_10fff_tmp23);
          cc_range_1018b_1019c_4 = simd_or(r10000_10fff_tmp21, r10000_10fff_tmp24);
          carryQ.cq[222] = carryout2carry(pablo_blk_Advance(sequence_f0_90_86, carryQ.get_carry_in(222), sequence_f0_90_86_adv));
          r10000_10fff_tmp25 = simd_and(sequence_f0_90_86_adv, cc_range_1018b_1019c_4);
          struct_Cn.cc = simd_or(struct_Cn.cc, r10000_10fff_tmp25);
          sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
          sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
          r10000_10fff_tmp26 = simd_and(tmp61, tmp20);
          cc_range_101c0_101fe_4 = simd_or(tmp70, r10000_10fff_tmp26);
          carryQ.cq[223] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(223), sequence_f0_90_87_adv));
          r10000_10fff_tmp27 = simd_and(sequence_f0_90_87_adv, cc_range_101c0_101fe_4);
          struct_Cn.cc = simd_or(struct_Cn.cc, r10000_10fff_tmp27);
          r10000_10fff_tmp28 = simd_andc(tmp58, basis_bits.bit_6);
          byte_range_88_89 = simd_and(tmp70, r10000_10fff_tmp28);
          sequence_f0_90_byte_range_88_89 = simd_and(sequence_f0_90_adv, byte_range_88_89);
          carryQ.cq[224] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_88_89, carryQ.get_carry_in(224), r10000_10fff_tmp29));
          sequence_f0_90_byte_range_88_89_sfx = simd_and(r10000_10fff_tmp29, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_byte_range_88_89_sfx);
          byte_8a = simd_and(tmp70, tmp60);
          sequence_f0_90_8a = simd_and(sequence_f0_90_adv, byte_8a);
          r10000_10fff_tmp30 = simd_and(tmp57, tmp19);
          byte_range_9d_9f = simd_and(r10000_10fff_tmp30, tmp5);
          carryQ.cq[225] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8a, carryQ.get_carry_in(225), r10000_10fff_tmp31));
          sequence_f0_90_8a_byte_range_9d_9f = simd_and(r10000_10fff_tmp31, byte_range_9d_9f);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_8a_byte_range_9d_9f);
          byte_8b = simd_and(tmp70, tmp63);
          sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
          carryQ.cq[226] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(226), r10000_10fff_tmp32));
          sequence_f0_90_8b_byte_range_91_bf = simd_and(r10000_10fff_tmp32, byte_range_91_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_8b_byte_range_91_bf);
          byte_8c = simd_and(tmp70, tmp67);
          sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
          carryQ.cq[227] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(227), r10000_10fff_tmp33));
          sequence_f0_90_8c_9f = simd_and(r10000_10fff_tmp33, byte_9f);
          sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
          r10000_10fff_tmp34 = simd_and(basis_bits.bit_4, tmp79);
          r10000_10fff_tmp35 = simd_or(basis_bits.bit_3, r10000_10fff_tmp34);
          r10000_10fff_tmp36 = simd_or(basis_bits.bit_2, r10000_10fff_tmp35);
          byte_range_8b_bf = simd_and(byte_range_80_bf, r10000_10fff_tmp36);
          carryQ.cq[228] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(228), r10000_10fff_tmp37));
          sequence_f0_90_8d_byte_range_8b_bf = simd_and(r10000_10fff_tmp37, byte_range_8b_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_8d_byte_range_8b_bf);
          byte_8e = simd_and(tmp70, tmp101);
          sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
          carryQ.cq[229] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(229), r10000_10fff_tmp38));
          sequence_f0_90_8e_9e = simd_and(r10000_10fff_tmp38, byte_9e);
          byte_8f = simd_and(tmp70, tmp74);
          sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
          byte_range_84_87 = simd_and(tmp70, tmp39);
          carryQ.cq[230] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(230), r10000_10fff_tmp39));
          sequence_f0_90_8f_byte_range_84_87 = simd_and(r10000_10fff_tmp39, byte_range_84_87);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_8f_byte_range_84_87);
          sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
          byte_range_9e_9f = simd_and(tmp57, tmp20);
          carryQ.cq[231] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(231), r10000_10fff_tmp40));
          sequence_f0_90_92_byte_range_9e_9f = simd_and(r10000_10fff_tmp40, byte_range_9e_9f);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_92_byte_range_9e_9f);
          sequence_f0_90_93 = simd_and(sequence_f0_90_adv, byte_93);
          carryQ.cq[232] = carryout2carry(pablo_blk_Advance(sequence_f0_90_93, carryQ.get_carry_in(232), r10000_10fff_tmp41));
          sequence_f0_90_93_byte_range_80_bf = simd_and(r10000_10fff_tmp41, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_93_byte_range_80_bf);
          byte_a0 = simd_andc(tmp78, tmp6);
          sequence_f0_90_a0 = simd_and(sequence_f0_90_adv, byte_a0);
          r10000_10fff_tmp42 = simd_and(tmp39, basis_bits.bit_6);
          byte_range_86_87 = simd_and(tmp70, r10000_10fff_tmp42);
          carryQ.cq[233] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a0, carryQ.get_carry_in(233), r10000_10fff_tmp43));
          sequence_f0_90_a0_byte_range_86_87 = simd_and(r10000_10fff_tmp43, byte_range_86_87);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_a0_byte_range_86_87);
          byte_a1 = simd_and(tmp78, tmp11);
          sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
          carryQ.cq[234] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(234), r10000_10fff_tmp44));
          sequence_f0_90_a1_96 = simd_and(r10000_10fff_tmp44, byte_96);
          byte_a2 = simd_and(tmp78, tmp69);
          sequence_f0_90_a2 = simd_and(sequence_f0_90_adv, byte_a2);
          carryQ.cq[235] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a2, carryQ.get_carry_in(235), r10000_10fff_tmp45));
          sequence_f0_90_a2_byte_range_80_bf = simd_and(r10000_10fff_tmp45, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_a2_byte_range_80_bf);
          byte_a4 = simd_and(tmp78, tmp40);
          sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
          byte_range_9c_9e = simd_andc(r10000_10fff_tmp30, tmp25);
          carryQ.cq[236] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(236), r10000_10fff_tmp46));
          sequence_f0_90_a4_byte_range_9c_9e = simd_and(r10000_10fff_tmp46, byte_range_9c_9e);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_a4_byte_range_9c_9e);
          byte_a5 = simd_and(tmp78, tmp41);
          sequence_f0_90_a5 = simd_and(sequence_f0_90_adv, byte_a5);
          carryQ.cq[237] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a5, carryQ.get_carry_in(237), r10000_10fff_tmp47));
          sequence_f0_90_a5_byte_range_80_bf = simd_and(r10000_10fff_tmp47, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_a5_byte_range_80_bf);
          byte_a6 = simd_and(tmp78, tmp91);
          sequence_f0_90_a6 = simd_and(sequence_f0_90_adv, byte_a6);
          byte_range_b8_bd = simd_andc(byte_range_b8_bf, tmp98);
          carryQ.cq[238] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a6, carryQ.get_carry_in(238), r10000_10fff_tmp48));
          sequence_f0_90_a6_byte_range_b8_bd = simd_and(r10000_10fff_tmp48, byte_range_b8_bd);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_a6_byte_range_b8_bd);
          byte_a7 = simd_and(tmp78, tmp46);
          sequence_f0_90_a7 = simd_and(sequence_f0_90_adv, byte_a7);
          carryQ.cq[239] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a7, carryQ.get_carry_in(239), r10000_10fff_tmp49));
          sequence_f0_90_a7_byte_range_80_bf = simd_and(r10000_10fff_tmp49, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_a7_byte_range_80_bf);
          r10000_10fff_tmp50 = simd_andc(tmp58, tmp5);
          byte_a8 = simd_and(tmp78, r10000_10fff_tmp50);
          sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
          carryQ.cq[240] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(240), r10000_10fff_tmp51));
          sequence_f0_90_a8_84 = simd_and(r10000_10fff_tmp51, byte_84);
          r10000_10fff_tmp52 = simd_and(tmp58, tmp10);
          byte_a9 = simd_and(tmp78, r10000_10fff_tmp52);
          sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
          byte_range_88_8f = simd_and(tmp70, basis_bits.bit_4);
          carryQ.cq[241] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(241), r10000_10fff_tmp53));
          sequence_f0_90_a9_byte_range_88_8f = simd_and(r10000_10fff_tmp53, byte_range_88_8f);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_a9_byte_range_88_8f);
          sequence_f0_90_aa = simd_and(sequence_f0_90_adv, byte_aa);
          carryQ.cq[242] = carryout2carry(pablo_blk_Advance(sequence_f0_90_aa, carryQ.get_carry_in(242), r10000_10fff_tmp54));
          sequence_f0_90_aa_byte_range_80_bf = simd_and(r10000_10fff_tmp54, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_aa_byte_range_80_bf);
          sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
          r10000_10fff_tmp55 = simd_not(tmp33);
          r10000_10fff_tmp56 = simd_or(simd_and(basis_bits.bit_4, r10000_10fff_tmp55), simd_andc(tmp98, basis_bits.bit_4));
          byte_range_b6_b8 = simd_and(tmp61, r10000_10fff_tmp56);
          carryQ.cq[243] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(243), r10000_10fff_tmp57));
          sequence_f0_90_ac_byte_range_b6_b8 = simd_and(r10000_10fff_tmp57, byte_range_b6_b8);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_ac_byte_range_b6_b8);
          byte_ad = simd_and(tmp78, tmp71);
          sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
          byte_range_96_97 = simd_and(tmp57, r10000_10fff_tmp42);
          carryQ.cq[244] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(244), r10000_10fff_tmp58));
          sequence_f0_90_ad_byte_range_96_97 = simd_and(r10000_10fff_tmp58, byte_range_96_97);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_ad_byte_range_96_97);
          byte_ae = simd_and(tmp78, tmp101);
          sequence_f0_90_ae = simd_and(sequence_f0_90_adv, byte_ae);
          carryQ.cq[245] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(245), r10000_10fff_tmp59));
          sequence_f0_90_ae_byte_range_80_bf = simd_and(r10000_10fff_tmp59, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_ae_byte_range_80_bf);
          byte_b1 = simd_and(tmp61, tmp11);
          sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
          r10000_10fff_tmp60 = simd_and(basis_bits.bit_4, tmp33);
          r10000_10fff_tmp61 = simd_or(basis_bits.bit_3, r10000_10fff_tmp60);
          r10000_10fff_tmp62 = simd_or(basis_bits.bit_2, r10000_10fff_tmp61);
          byte_range_89_bf = simd_and(byte_range_80_bf, r10000_10fff_tmp62);
          carryQ.cq[246] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b1, carryQ.get_carry_in(246), r10000_10fff_tmp63));
          sequence_f0_90_b1_byte_range_89_bf = simd_and(r10000_10fff_tmp63, byte_range_89_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_b1_byte_range_89_bf);
          byte_b2 = simd_and(tmp61, tmp69);
          sequence_f0_90_b2 = simd_and(sequence_f0_90_adv, byte_b2);
          carryQ.cq[247] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b2, carryQ.get_carry_in(247), r10000_10fff_tmp64));
          sequence_f0_90_b2_byte_range_80_bf = simd_and(r10000_10fff_tmp64, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_b2_byte_range_80_bf);
          byte_b9 = simd_and(tmp61, r10000_10fff_tmp52);
          sequence_f0_90_b9 = simd_and(sequence_f0_90_adv, byte_b9);
          byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
          carryQ.cq[248] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b9, carryQ.get_carry_in(248), r10000_10fff_tmp65));
          sequence_f0_90_b9_byte_range_80_9f = simd_and(r10000_10fff_tmp65, byte_range_80_9f);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_b9_byte_range_80_9f);
          byte_ba = simd_and(tmp61, tmp60);
          sequence_f0_90_ba = simd_and(sequence_f0_90_adv, byte_ba);
          carryQ.cq[249] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ba, carryQ.get_carry_in(249), r10000_10fff_tmp66));
          sequence_f0_90_ba_byte_range_80_bf = simd_and(r10000_10fff_tmp66, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_ba_byte_range_80_bf);
        }
        else {
          carryQ.CarryDequeueEnqueue(217, 33);
        }
        carryQ.CarryQ_Adjust(250);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Cn & struct_Cn, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f0, tmp7, tmp8, tmp9, tmp10;
		BitBlock tmp11, byte_91, tmp12, sequence_f0_91, byte_f0_adv, tmp13, tmp14;
		BitBlock byte_81, tmp15, sequence_f0_91_81, sequence_f0_91_adv, tmp16, tmp17;
		BitBlock tmp18, tmp19, tmp20, tmp21, tmp22, tmp23, cc_range_1104e_11070_4;
		BitBlock sequence_f0_91_81_adv, tmp24, tmp25, tmp26, byte_83;
		BitBlock sequence_f0_91_83, tmp27, tmp28, tmp29, tmp30, tmp31, tmp32, tmp33;
		BitBlock tmp34, tmp35, tmp36, tmp37, cc_range_110c2_110fa_4;
		BitBlock sequence_f0_91_83_adv, tmp38, tmp39, tmp40, byte_84;
		BitBlock sequence_f0_91_84, tmp41, byte_b5, sequence_f0_91_84_adv, tmp42;
		BitBlock byte_85, sequence_f0_91_85, tmp43, tmp44, byte_range_84_bf;
		BitBlock sequence_f0_91_85_adv, tmp45, tmp46, byte_87, sequence_f0_91_87;
		BitBlock tmp47, tmp48, tmp49, tmp50, tmp51, tmp52, cc_range_111c9_111da_4;
		BitBlock sequence_f0_91_87_adv, tmp53, tmp54, tmp55, byte_range_88_99;
		BitBlock sequence_f0_91_byte_range_88_99, byte_range_80_bf, tmp56;
		BitBlock sequence_f0_91_byte_range_88_99_sfx, tmp57, tmp58, tmp59, tmp60;
		BitBlock byte_9a, sequence_f0_91_9a, tmp61, byte_range_b8_bf, tmp62;
		BitBlock sequence_f0_91_9a_byte_range_b8_bf, tmp63, byte_9b, sequence_f0_91_9b;
		BitBlock tmp64, tmp65, byte_range_8a_bf, tmp66;
		BitBlock sequence_f0_91_9b_byte_range_8a_bf, tmp67, byte_9c, sequence_f0_91_9c;
		BitBlock tmp68, sequence_f0_91_9c_byte_range_80_bf, tmp69, byte_92;
		BitBlock sequence_f0_92, tmp70, tmp71, byte_8d, tmp72, sequence_f0_92_8d;
		BitBlock sequence_f0_92_adv, tmp73, tmp74, tmp75, byte_range_af_bf;
		BitBlock sequence_f0_92_8d_adv, tmp76, byte_range_8e_8f;
		BitBlock sequence_f0_92_byte_range_8e_8f, tmp77;
		BitBlock sequence_f0_92_byte_range_8e_8f_sfx, sequence_f0_92_91, tmp78, tmp79;
		BitBlock tmp80, byte_range_a3_af, tmp81, sequence_f0_92_91_byte_range_a3_af;
		BitBlock sequence_f0_92_92, tmp82, sequence_f0_92_92_byte_range_80_bf, byte_93;
		BitBlock sequence_f0_93, byte_90, tmp83, sequence_f0_93_90, sequence_f0_93_adv;
		BitBlock sequence_f0_93_90_adv, tmp84, tmp85, tmp86, byte_range_91_bf;
		BitBlock sequence_f0_93_byte_range_91_bf, tmp87;
		BitBlock sequence_f0_93_byte_range_91_bf_sfx, tmp88, byte_range_94_95;
		BitBlock byte_f0_byte_range_94_95, tmp89, byte_f0_byte_range_94_95_sfx, tmp90;
		BitBlock byte_f0_byte_range_94_95_sfx_sfx, tmp91, byte_96, sequence_f0_96;
		BitBlock byte_80, sequence_f0_96_adv, sequence_f0_96_80, tmp92;
		BitBlock sequence_f0_96_80_byte_range_80_bf, byte_97, sequence_f0_97;
		BitBlock sequence_f0_97_adv, sequence_f0_97_80, tmp93;
		BitBlock sequence_f0_97_80_byte_range_80_bf, sequence_f0_9b;
		BitBlock sequence_f0_9b_adv, sequence_f0_9b_80, tmp94, tmp95, byte_range_82_bf;
		BitBlock tmp96, sequence_f0_9b_80_byte_range_82_bf, sequence_f0_9c;
		BitBlock sequence_f0_9c_adv, sequence_f0_9c_80, tmp97;
		BitBlock sequence_f0_9c_80_byte_range_80_bf, byte_9d, sequence_f0_9d;
		BitBlock sequence_f0_9d_adv, sequence_f0_9d_83, tmp98, tmp99, byte_range_b6_bf;
		BitBlock tmp100, sequence_f0_9d_83_byte_range_b6_bf, tmp101, byte_9e;
		BitBlock sequence_f0_9e, sequence_f0_9e_adv, sequence_f0_9e_80, tmp102;
		BitBlock sequence_f0_9e_80_byte_range_80_bf, byte_9f, sequence_f0_9f;
		BitBlock sequence_f0_9f_adv, sequence_f0_9f_80, byte_range_ac_af, tmp103;
		BitBlock sequence_f0_9f_80_byte_range_ac_af, byte_aa, sequence_f0_aa;
		BitBlock sequence_f0_aa_adv, sequence_f0_aa_9b, tmp104, tmp105, tmp106, tmp107;
		BitBlock byte_range_97_bf, tmp108, sequence_f0_aa_9b_byte_range_97_bf, byte_ab;
		BitBlock sequence_f0_ab, sequence_f0_ab_adv, sequence_f0_ab_9c, tmp109, tmp110;
		BitBlock byte_range_b5_bf, tmp111, sequence_f0_ab_9c_byte_range_b5_bf, byte_ac;
		BitBlock sequence_f0_ac, sequence_f0_ac_adv, sequence_f0_ac_80, tmp112;
		BitBlock sequence_f0_ac_80_byte_range_80_bf, byte_af, sequence_f0_af;
		BitBlock sequence_f0_af_adv, sequence_f0_af_80, tmp113;
		BitBlock sequence_f0_af_80_byte_range_80_bf, byte_b0, sequence_f0_b0;
		BitBlock sequence_f0_b0_adv, sequence_f0_b0_80, tmp114;
		BitBlock sequence_f0_b0_80_byte_range_80_bf, tmp115, tmp116, tmp117;
		BitBlock byte_range_f1_f2, tmp118, byte_range_f1_f2_sfx, tmp119;
		BitBlock byte_range_f1_f2_sfx_sfx, tmp120, byte_range_f1_f2_sfx_sfx_sfx;
		BitBlock byte_f3, byte_f3_adv, sequence_f3_80, sequence_f3_80_adv;
		BitBlock sequence_f3_80_80, tmp121, sequence_f3_80_80_80, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, byte_cd, r80_7ff_tmp2, r80_7ff_tmp3, cc_range_378_37f_2;
		BitBlock byte_cd_adv, r80_7ff_tmp4, byte_ce, r80_7ff_tmp5, r80_7ff_tmp6;
		BitBlock r80_7ff_tmp7, r80_7ff_tmp8, cc_range_380_3a2_2, byte_ce_adv;
		BitBlock r80_7ff_tmp9, r80_7ff_tmp10, byte_d4, r80_7ff_tmp11, r80_7ff_tmp12;
		BitBlock byte_range_a8_b0, byte_d4_adv, r80_7ff_tmp13, byte_d5, r80_7ff_tmp14;
		BitBlock r80_7ff_tmp15, r80_7ff_tmp16, r80_7ff_tmp17, cc_range_557_560_2;
		BitBlock byte_d5_adv, r80_7ff_tmp18, byte_d6, r80_7ff_tmp19, r80_7ff_tmp20;
		BitBlock r80_7ff_tmp21, r80_7ff_tmp22, r80_7ff_tmp23, r80_7ff_tmp24;
		BitBlock r80_7ff_tmp25, cc_range_588_590_2, byte_d6_adv, r80_7ff_tmp26;
		BitBlock byte_d7, r80_7ff_tmp27, r80_7ff_tmp28, r80_7ff_tmp29;
		BitBlock cc_range_5c8_5f5_2, byte_d7_adv, r80_7ff_tmp30, byte_d8;
		BitBlock r80_7ff_tmp31, cc_range_605_61d_2, byte_d8_adv, r80_7ff_tmp32;
		BitBlock byte_dc, byte_8e, byte_dc_adv, r80_7ff_tmp33, byte_dd, r80_7ff_tmp34;
		BitBlock r80_7ff_tmp35, byte_range_8b_8c, byte_dd_adv, r80_7ff_tmp36, byte_de;
		BitBlock byte_range_b2_bf, byte_de_adv, r80_7ff_tmp37, byte_df;
		BitBlock byte_range_bb_bf, byte_df_adv, r80_7ff_tmp38, byte_range_e0_ef;
		BitBlock byte_e0, byte_a0, r800_ffff_tmp1, sequence_e0_a0, byte_e0_adv;
		BitBlock r800_ffff_tmp2, r800_ffff_tmp3, cc_range_82e_83f_3;
		BitBlock sequence_e0_a0_adv, r800_ffff_tmp4, byte_a1, sequence_e0_a1;
		BitBlock r800_ffff_tmp5, r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8;
		BitBlock r800_ffff_tmp9, cc_range_85c_85f_3, sequence_e0_a1_adv;
		BitBlock r800_ffff_tmp10, byte_a2, sequence_e0_a2, r800_ffff_tmp11;
		BitBlock r800_ffff_tmp12, r800_ffff_tmp13, r800_ffff_tmp14, r800_ffff_tmp15;
		BitBlock cc_range_880_8ad_3, sequence_e0_a2_adv, r800_ffff_tmp16, byte_a3;
		BitBlock sequence_e0_a3, r800_ffff_tmp17, r800_ffff_tmp18, cc_range_8c0_8ff_3;
		BitBlock sequence_e0_a3_adv, r800_ffff_tmp19, byte_a5, sequence_e0_a5;
		BitBlock r800_ffff_tmp20, byte_b8, sequence_e0_a5_adv, r800_ffff_tmp21;
		BitBlock byte_a6, sequence_e0_a6, r800_ffff_tmp22, r800_ffff_tmp23;
		BitBlock r800_ffff_tmp24, r800_ffff_tmp25, r800_ffff_tmp26, r800_ffff_tmp27;
		BitBlock r800_ffff_tmp28, r800_ffff_tmp29, r800_ffff_tmp30, r800_ffff_tmp31;
		BitBlock r800_ffff_tmp32, r800_ffff_tmp33, r800_ffff_tmp34, r800_ffff_tmp35;
		BitBlock r800_ffff_tmp36, r800_ffff_tmp37, r800_ffff_tmp38, r800_ffff_tmp39;
		BitBlock r800_ffff_tmp40, r800_ffff_tmp41, cc_range_980_9ba_3;
		BitBlock sequence_e0_a6_adv, r800_ffff_tmp42, byte_a7, sequence_e0_a7;
		BitBlock r800_ffff_tmp43, r800_ffff_tmp44, r800_ffff_tmp45, r800_ffff_tmp46;
		BitBlock r800_ffff_tmp47, r800_ffff_tmp48, r800_ffff_tmp49, r800_ffff_tmp50;
		BitBlock r800_ffff_tmp51, r800_ffff_tmp52, r800_ffff_tmp53, r800_ffff_tmp54;
		BitBlock r800_ffff_tmp55, cc_range_9c5_9fc_3, sequence_e0_a7_adv;
		BitBlock r800_ffff_tmp56, byte_a8, sequence_e0_a8, r800_ffff_tmp57;
		BitBlock r800_ffff_tmp58, r800_ffff_tmp59, r800_ffff_tmp60, r800_ffff_tmp61;
		BitBlock r800_ffff_tmp62, r800_ffff_tmp63, r800_ffff_tmp64, r800_ffff_tmp65;
		BitBlock r800_ffff_tmp66, r800_ffff_tmp67, r800_ffff_tmp68, r800_ffff_tmp69;
		BitBlock r800_ffff_tmp70, cc_range_a00_a3d_3, sequence_e0_a8_adv;
		BitBlock r800_ffff_tmp71, byte_a9, sequence_e0_a9, r800_ffff_tmp72;
		BitBlock r800_ffff_tmp73, r800_ffff_tmp74, r800_ffff_tmp75, r800_ffff_tmp76;
		BitBlock r800_ffff_tmp77, r800_ffff_tmp78, r800_ffff_tmp79, r800_ffff_tmp80;
		BitBlock r800_ffff_tmp81, r800_ffff_tmp82, r800_ffff_tmp83, r800_ffff_tmp84;
		BitBlock r800_ffff_tmp85, r800_ffff_tmp86, r800_ffff_tmp87, r800_ffff_tmp88;
		BitBlock r800_ffff_tmp89, r800_ffff_tmp90, cc_range_a43_a76_3;
		BitBlock sequence_e0_a9_adv, r800_ffff_tmp91, sequence_e0_aa, r800_ffff_tmp92;
		BitBlock r800_ffff_tmp93, r800_ffff_tmp94, r800_ffff_tmp95, r800_ffff_tmp96;
		BitBlock r800_ffff_tmp97, cc_range_a80_aba_3, sequence_e0_aa_adv;
		BitBlock r800_ffff_tmp98, sequence_e0_ab, r800_ffff_tmp99, r800_ffff_tmp100;
		BitBlock r800_ffff_tmp101, r800_ffff_tmp102, r800_ffff_tmp103;
		BitBlock r800_ffff_tmp104, r800_ffff_tmp105, r800_ffff_tmp106;
		BitBlock cc_range_ac6_af2_3, sequence_e0_ab_adv, r800_ffff_tmp107;
		BitBlock sequence_e0_ac, r800_ffff_tmp108, r800_ffff_tmp109, r800_ffff_tmp110;
		BitBlock cc_range_b00_b3a_3, sequence_e0_ac_adv, r800_ffff_tmp111, byte_ad;
		BitBlock sequence_e0_ad, r800_ffff_tmp112, r800_ffff_tmp113, r800_ffff_tmp114;
		BitBlock r800_ffff_tmp115, r800_ffff_tmp116, r800_ffff_tmp117;
		BitBlock r800_ffff_tmp118, cc_range_b45_b78_3, sequence_e0_ad_adv;
		BitBlock r800_ffff_tmp119, byte_ae, sequence_e0_ae, r800_ffff_tmp120;
		BitBlock r800_ffff_tmp121, r800_ffff_tmp122, r800_ffff_tmp123;
		BitBlock r800_ffff_tmp124, r800_ffff_tmp125, r800_ffff_tmp126;
		BitBlock r800_ffff_tmp127, r800_ffff_tmp128, r800_ffff_tmp129;
		BitBlock r800_ffff_tmp130, r800_ffff_tmp131, r800_ffff_tmp132;
		BitBlock r800_ffff_tmp133, r800_ffff_tmp134, r800_ffff_tmp135;
		BitBlock r800_ffff_tmp136, r800_ffff_tmp137, r800_ffff_tmp138;
		BitBlock r800_ffff_tmp139, r800_ffff_tmp140, r800_ffff_tmp141;
		BitBlock cc_range_b80_bba_3, sequence_e0_ae_adv, r800_ffff_tmp142;
		BitBlock sequence_e0_af, r800_ffff_tmp143, r800_ffff_tmp144, r800_ffff_tmp145;
		BitBlock r800_ffff_tmp146, r800_ffff_tmp147, r800_ffff_tmp148;
		BitBlock r800_ffff_tmp149, r800_ffff_tmp150, r800_ffff_tmp151;
		BitBlock r800_ffff_tmp152, r800_ffff_tmp153, r800_ffff_tmp154;
		BitBlock r800_ffff_tmp155, cc_range_bc3_bfb_3, sequence_e0_af_adv;
		BitBlock r800_ffff_tmp156, sequence_e0_b0, r800_ffff_tmp157, r800_ffff_tmp158;
		BitBlock r800_ffff_tmp159, r800_ffff_tmp160, r800_ffff_tmp161;
		BitBlock r800_ffff_tmp162, r800_ffff_tmp163, r800_ffff_tmp164;
		BitBlock cc_range_c00_c3a_3, sequence_e0_b0_adv, r800_ffff_tmp165, byte_b1;
		BitBlock sequence_e0_b1, r800_ffff_tmp166, r800_ffff_tmp167, r800_ffff_tmp168;
		BitBlock r800_ffff_tmp169, r800_ffff_tmp170, r800_ffff_tmp171;
		BitBlock r800_ffff_tmp172, r800_ffff_tmp173, r800_ffff_tmp174;
		BitBlock r800_ffff_tmp175, r800_ffff_tmp176, cc_range_c45_c70_3;
		BitBlock sequence_e0_b1_adv, r800_ffff_tmp177, byte_b2, sequence_e0_b2;
		BitBlock r800_ffff_tmp178, r800_ffff_tmp179, r800_ffff_tmp180;
		BitBlock r800_ffff_tmp181, r800_ffff_tmp182, cc_range_c80_cba_3;
		BitBlock sequence_e0_b2_adv, r800_ffff_tmp183, byte_b3, sequence_e0_b3;
		BitBlock r800_ffff_tmp184, r800_ffff_tmp185, r800_ffff_tmp186;
		BitBlock r800_ffff_tmp187, r800_ffff_tmp188, r800_ffff_tmp189;
		BitBlock r800_ffff_tmp190, r800_ffff_tmp191, cc_range_cc5_cf3_3;
		BitBlock sequence_e0_b3_adv, r800_ffff_tmp192, byte_b4, sequence_e0_b4;
		BitBlock r800_ffff_tmp193, r800_ffff_tmp194, cc_range_d00_d3b_3;
		BitBlock sequence_e0_b4_adv, r800_ffff_tmp195, sequence_e0_b5;
		BitBlock r800_ffff_tmp196, r800_ffff_tmp197, r800_ffff_tmp198;
		BitBlock r800_ffff_tmp199, cc_range_d45_d76_3, sequence_e0_b5_adv;
		BitBlock r800_ffff_tmp200, byte_b6, sequence_e0_b6, r800_ffff_tmp201;
		BitBlock r800_ffff_tmp202, r800_ffff_tmp203, r800_ffff_tmp204;
		BitBlock r800_ffff_tmp205, r800_ffff_tmp206, r800_ffff_tmp207;
		BitBlock r800_ffff_tmp208, cc_range_d80_dbe_3, sequence_e0_b6_adv;
		BitBlock r800_ffff_tmp209, byte_b7, sequence_e0_b7, r800_ffff_tmp210;
		BitBlock r800_ffff_tmp211, r800_ffff_tmp212, r800_ffff_tmp213;
		BitBlock r800_ffff_tmp214, r800_ffff_tmp215, r800_ffff_tmp216;
		BitBlock r800_ffff_tmp217, cc_range_dc7_df5_3, sequence_e0_b7_adv;
		BitBlock r800_ffff_tmp218, sequence_e0_b8, r800_ffff_tmp219;
		BitBlock cc_range_e00_e3b_3, sequence_e0_b8_adv, r800_ffff_tmp220, byte_b9;
		BitBlock sequence_e0_b9, r800_ffff_tmp221, r800_ffff_tmp222, byte_range_9c_bf;
		BitBlock sequence_e0_b9_adv, r800_ffff_tmp223, byte_ba, sequence_e0_ba;
		BitBlock r800_ffff_tmp224, r800_ffff_tmp225, r800_ffff_tmp226;
		BitBlock r800_ffff_tmp227, r800_ffff_tmp228, r800_ffff_tmp229;
		BitBlock r800_ffff_tmp230, r800_ffff_tmp231, r800_ffff_tmp232;
		BitBlock r800_ffff_tmp233, r800_ffff_tmp234, r800_ffff_tmp235;
		BitBlock r800_ffff_tmp236, r800_ffff_tmp237, r800_ffff_tmp238;
		BitBlock r800_ffff_tmp239, r800_ffff_tmp240, r800_ffff_tmp241;
		BitBlock r800_ffff_tmp242, r800_ffff_tmp243, r800_ffff_tmp244;
		BitBlock r800_ffff_tmp245, r800_ffff_tmp246, cc_range_e80_ebe_3;
		BitBlock sequence_e0_ba_adv, r800_ffff_tmp247, byte_bb, sequence_e0_bb;
		BitBlock r800_ffff_tmp248, r800_ffff_tmp249, r800_ffff_tmp250;
		BitBlock r800_ffff_tmp251, r800_ffff_tmp252, cc_range_ec5_ee0_3;
		BitBlock sequence_e0_bb_adv, r800_ffff_tmp253, byte_bd, sequence_e0_bd;
		BitBlock r800_ffff_tmp254, r800_ffff_tmp255, r800_ffff_tmp256;
		BitBlock cc_range_f48_f6d_3, sequence_e0_bd_adv, r800_ffff_tmp257, byte_be;
		BitBlock sequence_e0_be, cc_range_f98_fbd_3, sequence_e0_be_adv;
		BitBlock r800_ffff_tmp258, byte_bf, sequence_e0_bf, r800_ffff_tmp259;
		BitBlock r800_ffff_tmp260, r800_ffff_tmp261, r800_ffff_tmp262;
		BitBlock cc_range_fcd_fdb_3, sequence_e0_bf_adv, r800_ffff_tmp263, byte_e1;
		BitBlock r800_ffff_tmp264, sequence_e1_83, byte_e1_adv, r800_ffff_tmp265;
		BitBlock r800_ffff_tmp266, r800_ffff_tmp267, cc_range_10c6_10ce_3;
		BitBlock sequence_e1_83_adv, r800_ffff_tmp268, byte_89, sequence_e1_89;
		BitBlock r800_ffff_tmp269, r800_ffff_tmp270, r800_ffff_tmp271;
		BitBlock r800_ffff_tmp272, r800_ffff_tmp273, r800_ffff_tmp274;
		BitBlock cc_range_1249_125e_3, sequence_e1_89_adv, r800_ffff_tmp275, byte_8a;
		BitBlock sequence_e1_8a, r800_ffff_tmp276, r800_ffff_tmp277, r800_ffff_tmp278;
		BitBlock r800_ffff_tmp279, cc_range_1289_12bf_3, sequence_e1_8a_adv;
		BitBlock r800_ffff_tmp280, byte_8b, sequence_e1_8b, r800_ffff_tmp281;
		BitBlock r800_ffff_tmp282, cc_range_12c1_12d7_3, sequence_e1_8b_adv;
		BitBlock r800_ffff_tmp283, byte_8c, sequence_e1_8c, cc_range_1311_1316_3;
		BitBlock sequence_e1_8c_adv, r800_ffff_tmp284, sequence_e1_8d;
		BitBlock r800_ffff_tmp285, r800_ffff_tmp286, cc_range_135b_137d_3;
		BitBlock sequence_e1_8d_adv, r800_ffff_tmp287, sequence_e1_8e;
		BitBlock byte_range_9a_9f, sequence_e1_8e_adv, r800_ffff_tmp288, byte_8f;
		BitBlock sequence_e1_8f, sequence_e1_8f_adv, r800_ffff_tmp289, sequence_e1_9a;
		BitBlock r800_ffff_tmp290, byte_range_9d_9f, sequence_e1_9a_adv;
		BitBlock r800_ffff_tmp291, sequence_e1_9b, byte_range_b1_bf;
		BitBlock sequence_e1_9b_adv, r800_ffff_tmp292, sequence_e1_9c;
		BitBlock r800_ffff_tmp293, r800_ffff_tmp294, r800_ffff_tmp295;
		BitBlock cc_range_170d_1737_3, sequence_e1_9c_adv, r800_ffff_tmp296;
		BitBlock sequence_e1_9d, r800_ffff_tmp297, r800_ffff_tmp298, r800_ffff_tmp299;
		BitBlock r800_ffff_tmp300, cc_range_1754_1774_3, sequence_e1_9d_adv;
		BitBlock r800_ffff_tmp301, sequence_e1_9f, r800_ffff_tmp302, r800_ffff_tmp303;
		BitBlock r800_ffff_tmp304, cc_range_17de_17fa_3, sequence_e1_9f_adv;
		BitBlock r800_ffff_tmp305, sequence_e1_a0, cc_range_180f_181a_3;
		BitBlock sequence_e1_a0_adv, r800_ffff_tmp306, sequence_e1_a1;
		BitBlock sequence_e1_a1_adv, r800_ffff_tmp307, sequence_e1_a2;
		BitBlock byte_range_ab_af, sequence_e1_a2_adv, r800_ffff_tmp308;
		BitBlock sequence_e1_a3, sequence_e1_a3_adv, r800_ffff_tmp309, byte_a4;
		BitBlock sequence_e1_a4, r800_ffff_tmp310, cc_range_191d_193c_3;
		BitBlock sequence_e1_a4_adv, r800_ffff_tmp311, sequence_e1_a5;
		BitBlock r800_ffff_tmp312, r800_ffff_tmp313, r800_ffff_tmp314;
		BitBlock cc_range_1941_1975_3, sequence_e1_a5_adv, r800_ffff_tmp315;
		BitBlock sequence_e1_a6, sequence_e1_a6_adv, r800_ffff_tmp316, sequence_e1_a7;
		BitBlock r800_ffff_tmp317, r800_ffff_tmp318, cc_range_19ca_19db_3;
		BitBlock sequence_e1_a7_adv, r800_ffff_tmp319, sequence_e1_a8;
		BitBlock byte_range_9c_9d, sequence_e1_a8_adv, r800_ffff_tmp320;
		BitBlock sequence_e1_a9, r800_ffff_tmp321, cc_range_1a5f_1a7d_3;
		BitBlock sequence_e1_a9_adv, r800_ffff_tmp322, sequence_e1_aa;
		BitBlock r800_ffff_tmp323, r800_ffff_tmp324, r800_ffff_tmp325;
		BitBlock r800_ffff_tmp326, r800_ffff_tmp327, r800_ffff_tmp328;
		BitBlock cc_range_1a8a_1aae_3, sequence_e1_aa_adv, r800_ffff_tmp329;
		BitBlock sequence_e1_ab, sequence_e1_ab_adv, r800_ffff_tmp330, sequence_e1_ad;
		BitBlock cc_range_1b4c_1b7d_3, sequence_e1_ad_adv, r800_ffff_tmp331;
		BitBlock sequence_e1_af, r800_ffff_tmp332, r800_ffff_tmp333, byte_range_b4_bb;
		BitBlock sequence_e1_af_adv, r800_ffff_tmp334, sequence_e1_b0;
		BitBlock r800_ffff_tmp335, byte_range_b8_ba, sequence_e1_b0_adv;
		BitBlock r800_ffff_tmp336, sequence_e1_b1, byte_range_8a_8c;
		BitBlock sequence_e1_b1_adv, r800_ffff_tmp337, sequence_e1_b2;
		BitBlock sequence_e1_b2_adv, r800_ffff_tmp338, sequence_e1_b3;
		BitBlock cc_range_1cc8_1cf7_3, sequence_e1_b3_adv, r800_ffff_tmp339;
		BitBlock sequence_e1_b7, r800_ffff_tmp340, r800_ffff_tmp341, byte_range_a7_bb;
		BitBlock sequence_e1_b7_adv, r800_ffff_tmp342, byte_bc, sequence_e1_bc;
		BitBlock r800_ffff_tmp343, cc_range_1f16_1f1e_3, sequence_e1_bc_adv;
		BitBlock r800_ffff_tmp344, sequence_e1_bd, r800_ffff_tmp345, r800_ffff_tmp346;
		BitBlock r800_ffff_tmp347, r800_ffff_tmp348, r800_ffff_tmp349;
		BitBlock cc_range_1f46_1f7e_3, sequence_e1_bd_adv, r800_ffff_tmp350;
		BitBlock sequence_e1_be, sequence_e1_be_adv, r800_ffff_tmp351, sequence_e1_bf;
		BitBlock r800_ffff_tmp352, r800_ffff_tmp353, r800_ffff_tmp354;
		BitBlock r800_ffff_tmp355, r800_ffff_tmp356, r800_ffff_tmp357;
		BitBlock r800_ffff_tmp358, cc_range_1fc5_1fff_3, sequence_e1_bf_adv;
		BitBlock r800_ffff_tmp359, byte_e2, r800_ffff_tmp360, sequence_e2_81;
		BitBlock byte_e2_adv, r800_ffff_tmp361, r800_ffff_tmp362, cc_range_2065_2072_3;
		BitBlock sequence_e2_81_adv, r800_ffff_tmp363, byte_82, sequence_e2_82;
		BitBlock r800_ffff_tmp364, cc_range_208f_20bb_3, sequence_e2_82_adv;
		BitBlock r800_ffff_tmp365, sequence_e2_83, cc_range_20c0_20f1_3;
		BitBlock sequence_e2_83_adv, r800_ffff_tmp366, byte_86, sequence_e2_86;
		BitBlock byte_range_8a_8f, sequence_e2_86_adv, r800_ffff_tmp367;
		BitBlock sequence_e2_8f, byte_range_b4_bf, sequence_e2_8f_adv;
		BitBlock r800_ffff_tmp368, sequence_e2_90, r800_ffff_tmp369, byte_range_a7_bf;
		BitBlock sequence_e2_90_adv, r800_ffff_tmp370, sequence_e2_91;
		BitBlock r800_ffff_tmp371, byte_range_8b_9f, sequence_e2_91_adv;
		BitBlock r800_ffff_tmp372, sequence_e2_9c, sequence_e2_9c_adv;
		BitBlock r800_ffff_tmp373, sequence_e2_ad, r800_ffff_tmp374, r800_ffff_tmp375;
		BitBlock cc_range_2b4d_2b5a_3, sequence_e2_ad_adv, r800_ffff_tmp376;
		BitBlock byte_range_ae_af, byte_e2_byte_range_ae_af, r800_ffff_tmp377;
		BitBlock byte_e2_byte_range_ae_af_sfx, sequence_e2_b0, r800_ffff_tmp378;
		BitBlock sequence_e2_b0_af, sequence_e2_b1, r800_ffff_tmp379;
		BitBlock sequence_e2_b1_9f, sequence_e2_b3, r800_ffff_tmp380, byte_range_b4_b8;
		BitBlock r800_ffff_tmp381, sequence_e2_b3_byte_range_b4_b8, sequence_e2_b4;
		BitBlock r800_ffff_tmp382, sequence_e2_b4_a6, sequence_e2_b5, byte_range_a8_ae;
		BitBlock r800_ffff_tmp383, sequence_e2_b5_byte_range_a8_ae, sequence_e2_b6;
		BitBlock byte_range_97_9f, r800_ffff_tmp384, sequence_e2_b6_byte_range_97_9f;
		BitBlock sequence_e2_b7, r800_ffff_tmp385, sequence_e2_b7_87, sequence_e2_b8;
		BitBlock byte_range_bc_bf, r800_ffff_tmp386, sequence_e2_b8_byte_range_bc_bf;
		BitBlock sequence_e2_b9, r800_ffff_tmp387, sequence_e2_b9_byte_range_80_bf;
		BitBlock sequence_e2_ba, r800_ffff_tmp388, sequence_e2_ba_9a, sequence_e2_bb;
		BitBlock r800_ffff_tmp389, sequence_e2_bb_byte_range_b4_bf, sequence_e2_bf;
		BitBlock r800_ffff_tmp390, r800_ffff_tmp391, r800_ffff_tmp392;
		BitBlock byte_range_96_af, r800_ffff_tmp393, sequence_e2_bf_byte_range_96_af;
		BitBlock byte_e3, r800_ffff_tmp394, sequence_e3_81, byte_e3_adv;
		BitBlock sequence_e3_81_adv, r800_ffff_tmp395, sequence_e3_82;
		BitBlock r800_ffff_tmp396, byte_range_97_98, sequence_e3_82_adv;
		BitBlock r800_ffff_tmp397, sequence_e3_84, r800_ffff_tmp398, r800_ffff_tmp399;
		BitBlock cc_range_3100_312e_3, sequence_e3_84_adv, r800_ffff_tmp400;
		BitBlock sequence_e3_86, cc_range_318f_31bb_3, sequence_e3_86_adv;
		BitBlock r800_ffff_tmp401, sequence_e3_87, byte_range_a4_af;
		BitBlock sequence_e3_87_adv, r800_ffff_tmp402, byte_88, sequence_e3_88;
		BitBlock sequence_e3_88_adv, r800_ffff_tmp403, sequence_e3_8b;
		BitBlock sequence_e3_8b_adv, r800_ffff_tmp404, byte_e4, r800_ffff_tmp405;
		BitBlock sequence_e4_b6, byte_e4_adv, sequence_e4_b6_adv, r800_ffff_tmp406;
		BitBlock byte_e9, r800_ffff_tmp407, sequence_e9_bf, byte_e9_adv;
		BitBlock r800_ffff_tmp408, byte_range_8d_bf, sequence_e9_bf_adv;
		BitBlock r800_ffff_tmp409, byte_ea, r800_ffff_tmp410, sequence_ea_92;
		BitBlock byte_ea_adv, byte_range_8d_8f, sequence_ea_92_adv, r800_ffff_tmp411;
		BitBlock sequence_ea_93, byte_range_87_8f, sequence_ea_93_adv;
		BitBlock r800_ffff_tmp412, byte_98, sequence_ea_98, r800_ffff_tmp413;
		BitBlock byte_range_ac_bf, sequence_ea_98_adv, r800_ffff_tmp414;
		BitBlock sequence_ea_9a, byte_range_98_9e, sequence_ea_9a_adv;
		BitBlock r800_ffff_tmp415, sequence_ea_9b, sequence_ea_9b_adv;
		BitBlock r800_ffff_tmp416, sequence_ea_9e, r800_ffff_tmp417, r800_ffff_tmp418;
		BitBlock cc_range_a78f_a7ab_3, sequence_ea_9e_adv, r800_ffff_tmp419;
		BitBlock sequence_ea_9f, r800_ffff_tmp420, byte_range_80_b7;
		BitBlock sequence_ea_9f_adv, r800_ffff_tmp421, sequence_ea_a0;
		BitBlock cc_range_a82c_a83a_3, sequence_ea_a0_adv, r800_ffff_tmp422;
		BitBlock sequence_ea_a1, sequence_ea_a1_adv, r800_ffff_tmp423, sequence_ea_a3;
		BitBlock r800_ffff_tmp424, r800_ffff_tmp425, r800_ffff_tmp426;
		BitBlock cc_range_a8c5_a8fc_3, sequence_ea_a3_adv, r800_ffff_tmp427;
		BitBlock sequence_ea_a5, r800_ffff_tmp428, r800_ffff_tmp429, r800_ffff_tmp430;
		BitBlock r800_ffff_tmp431, cc_range_a954_a97d_3, sequence_ea_a5_adv;
		BitBlock r800_ffff_tmp432, sequence_ea_a7, r800_ffff_tmp433, r800_ffff_tmp434;
		BitBlock cc_range_a9ce_a9e0_3, sequence_ea_a7_adv, r800_ffff_tmp435;
		BitBlock sequence_ea_a8, byte_range_b7_bf, sequence_ea_a8_adv;
		BitBlock r800_ffff_tmp436, sequence_ea_a9, r800_ffff_tmp437;
		BitBlock cc_range_aa4e_aa7c_3, sequence_ea_a9_adv, r800_ffff_tmp438;
		BitBlock sequence_ea_ab, r800_ffff_tmp439, r800_ffff_tmp440, r800_ffff_tmp441;
		BitBlock r800_ffff_tmp442, cc_range_aac3_aaf7_3, sequence_ea_ab_adv;
		BitBlock r800_ffff_tmp443, sequence_ea_ac, r800_ffff_tmp444, r800_ffff_tmp445;
		BitBlock r800_ffff_tmp446, r800_ffff_tmp447, r800_ffff_tmp448;
		BitBlock r800_ffff_tmp449, r800_ffff_tmp450, cc_range_ab00_ab2f_3;
		BitBlock sequence_ea_ac_adv, r800_ffff_tmp451, byte_range_ad_ae;
		BitBlock byte_ea_byte_range_ad_ae, r800_ffff_tmp452;
		BitBlock byte_ea_byte_range_ad_ae_sfx, sequence_ea_af, r800_ffff_tmp453;
		BitBlock sequence_ea_af_byte_range_ae_af, byte_ed, r800_ffff_tmp454;
		BitBlock sequence_ed_9e, byte_ed_adv, sequence_ed_9e_adv, r800_ffff_tmp455;
		BitBlock sequence_ed_9f, r800_ffff_tmp456, r800_ffff_tmp457, r800_ffff_tmp458;
		BitBlock cc_range_d7c7_d7fc_3, sequence_ed_9f_adv, r800_ffff_tmp459, byte_ef;
		BitBlock r800_ffff_tmp460, sequence_ef_a9, byte_ef_adv, sequence_ef_a9_adv;
		BitBlock r800_ffff_tmp461, sequence_ef_ab, byte_range_9a_bf;
		BitBlock sequence_ef_ab_adv, r800_ffff_tmp462, sequence_ef_ac;
		BitBlock r800_ffff_tmp463, r800_ffff_tmp464, r800_ffff_tmp465;
		BitBlock r800_ffff_tmp466, r800_ffff_tmp467, r800_ffff_tmp468;
		BitBlock r800_ffff_tmp469, cc_range_fb07_fb3f_3, sequence_ef_ac_adv;
		BitBlock r800_ffff_tmp470, sequence_ef_ad, r800_ffff_tmp471;
		BitBlock cc_range_fb42_fb45_3, sequence_ef_ad_adv, r800_ffff_tmp472;
		BitBlock sequence_ef_af, r800_ffff_tmp473, byte_range_82_92;
		BitBlock sequence_ef_af_adv, r800_ffff_tmp474, sequence_ef_b5;
		BitBlock byte_range_80_8f, sequence_ef_b5_adv, r800_ffff_tmp475;
		BitBlock sequence_ef_b6, byte_range_90_91, sequence_ef_b6_adv;
		BitBlock r800_ffff_tmp476, sequence_ef_b7, r800_ffff_tmp477, r800_ffff_tmp478;
		BitBlock r800_ffff_tmp479, cc_range_fdc8_fdfe_3, sequence_ef_b7_adv;
		BitBlock r800_ffff_tmp480, sequence_ef_b8, r800_ffff_tmp481;
		BitBlock cc_range_fe1a_fe27_3, sequence_ef_b8_adv, r800_ffff_tmp482;
		BitBlock sequence_ef_b9, r800_ffff_tmp483, r800_ffff_tmp484;
		BitBlock cc_range_fe53_fe75_3, sequence_ef_b9_adv, r800_ffff_tmp485;
		BitBlock sequence_ef_bb, byte_range_bd_be, sequence_ef_bb_adv;
		BitBlock r800_ffff_tmp486, sequence_ef_bc, sequence_ef_bc_adv;
		BitBlock r800_ffff_tmp487, sequence_ef_be, sequence_ef_be_adv;
		BitBlock r800_ffff_tmp488, sequence_ef_bf, r800_ffff_tmp489, r800_ffff_tmp490;
		BitBlock r800_ffff_tmp491, r800_ffff_tmp492, r800_ffff_tmp493;
		BitBlock r800_ffff_tmp494, r800_ffff_tmp495, r800_ffff_tmp496;
		BitBlock r800_ffff_tmp497, r800_ffff_tmp498, r800_ffff_tmp499;
		BitBlock r800_ffff_tmp500, cc_range_ffc0_fffe_3, sequence_ef_bf_adv;
		BitBlock r800_ffff_tmp501, sequence_f0_90, tmp122;
		BitBlock sequence_f0_90_byte_range_80_bf, tmp123;
		BitBlock sequence_f0_90_byte_range_80_bf_sfx, cp_range_10000_10fff;
		BitBlock sequence_f0_90_80, sequence_f0_90_adv, r10000_10fff_tmp1;
		BitBlock r10000_10fff_tmp2, r10000_10fff_tmp3, r10000_10fff_tmp4;
		BitBlock r10000_10fff_tmp5, r10000_10fff_tmp6, cc_range_1000c_1003e_4;
		BitBlock sequence_f0_90_80_adv, r10000_10fff_tmp7, sequence_f0_90_81;
		BitBlock r10000_10fff_tmp8, r10000_10fff_tmp9, r10000_10fff_tmp10;
		BitBlock cc_range_1004e_1005e_4, sequence_f0_90_81_adv, r10000_10fff_tmp11;
		BitBlock sequence_f0_90_83, sequence_f0_90_83_adv, r10000_10fff_tmp12;
		BitBlock sequence_f0_90_84, r10000_10fff_tmp13, r10000_10fff_tmp14;
		BitBlock r10000_10fff_tmp15, r10000_10fff_tmp16, r10000_10fff_tmp17;
		BitBlock r10000_10fff_tmp18, cc_range_10103_10134_4, sequence_f0_90_84_adv;
		BitBlock r10000_10fff_tmp19, sequence_f0_90_86, r10000_10fff_tmp20;
		BitBlock r10000_10fff_tmp21, r10000_10fff_tmp22, r10000_10fff_tmp23;
		BitBlock r10000_10fff_tmp24, cc_range_1018b_1019c_4, sequence_f0_90_86_adv;
		BitBlock r10000_10fff_tmp25, sequence_f0_90_87, r10000_10fff_tmp26;
		BitBlock cc_range_101c0_101fe_4, sequence_f0_90_87_adv, r10000_10fff_tmp27;
		BitBlock r10000_10fff_tmp28, byte_range_88_89, sequence_f0_90_byte_range_88_89;
		BitBlock r10000_10fff_tmp29, sequence_f0_90_byte_range_88_89_sfx;
		BitBlock sequence_f0_90_8a, r10000_10fff_tmp30, r10000_10fff_tmp31;
		BitBlock sequence_f0_90_8a_byte_range_9d_9f, sequence_f0_90_8b;
		BitBlock r10000_10fff_tmp32, sequence_f0_90_8b_byte_range_91_bf;
		BitBlock sequence_f0_90_8c, r10000_10fff_tmp33, sequence_f0_90_8c_9f;
		BitBlock sequence_f0_90_8d, r10000_10fff_tmp34, r10000_10fff_tmp35;
		BitBlock r10000_10fff_tmp36, byte_range_8b_bf, r10000_10fff_tmp37;
		BitBlock sequence_f0_90_8d_byte_range_8b_bf, sequence_f0_90_8e;
		BitBlock r10000_10fff_tmp38, sequence_f0_90_8e_9e, sequence_f0_90_8f;
		BitBlock byte_range_84_87, r10000_10fff_tmp39;
		BitBlock sequence_f0_90_8f_byte_range_84_87, sequence_f0_90_92;
		BitBlock byte_range_9e_9f, r10000_10fff_tmp40;
		BitBlock sequence_f0_90_92_byte_range_9e_9f, sequence_f0_90_93;
		BitBlock r10000_10fff_tmp41, sequence_f0_90_93_byte_range_80_bf;
		BitBlock sequence_f0_90_a0, r10000_10fff_tmp42, byte_range_86_87;
		BitBlock r10000_10fff_tmp43, sequence_f0_90_a0_byte_range_86_87;
		BitBlock sequence_f0_90_a1, r10000_10fff_tmp44, sequence_f0_90_a1_96;
		BitBlock sequence_f0_90_a2, r10000_10fff_tmp45;
		BitBlock sequence_f0_90_a2_byte_range_80_bf, sequence_f0_90_a4;
		BitBlock byte_range_9c_9e, r10000_10fff_tmp46;
		BitBlock sequence_f0_90_a4_byte_range_9c_9e, sequence_f0_90_a5;
		BitBlock r10000_10fff_tmp47, sequence_f0_90_a5_byte_range_80_bf;
		BitBlock sequence_f0_90_a6, byte_range_b8_bd, r10000_10fff_tmp48;
		BitBlock sequence_f0_90_a6_byte_range_b8_bd, sequence_f0_90_a7;
		BitBlock r10000_10fff_tmp49, sequence_f0_90_a7_byte_range_80_bf;
		BitBlock r10000_10fff_tmp50, sequence_f0_90_a8, r10000_10fff_tmp51;
		BitBlock sequence_f0_90_a8_84, r10000_10fff_tmp52, sequence_f0_90_a9;
		BitBlock byte_range_88_8f, r10000_10fff_tmp53;
		BitBlock sequence_f0_90_a9_byte_range_88_8f, sequence_f0_90_aa;
		BitBlock r10000_10fff_tmp54, sequence_f0_90_aa_byte_range_80_bf;
		BitBlock sequence_f0_90_ac, r10000_10fff_tmp55, r10000_10fff_tmp56;
		BitBlock byte_range_b6_b8, r10000_10fff_tmp57;
		BitBlock sequence_f0_90_ac_byte_range_b6_b8, sequence_f0_90_ad;
		BitBlock byte_range_96_97, r10000_10fff_tmp58;
		BitBlock sequence_f0_90_ad_byte_range_96_97, sequence_f0_90_ae;
		BitBlock r10000_10fff_tmp59, sequence_f0_90_ae_byte_range_80_bf;
		BitBlock sequence_f0_90_b1, r10000_10fff_tmp60, r10000_10fff_tmp61;
		BitBlock r10000_10fff_tmp62, byte_range_89_bf, r10000_10fff_tmp63;
		BitBlock sequence_f0_90_b1_byte_range_89_bf, sequence_f0_90_b2;
		BitBlock r10000_10fff_tmp64, sequence_f0_90_b2_byte_range_80_bf;
		BitBlock sequence_f0_90_b9, byte_range_80_9f, r10000_10fff_tmp65;
		BitBlock sequence_f0_90_b9_byte_range_80_9f, sequence_f0_90_ba;
		BitBlock r10000_10fff_tmp66, sequence_f0_90_ba_byte_range_80_bf;




        struct_Cn.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_f0 = simd_andc(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp11 = simd_andc(tmp10, tmp4);
        byte_91 = simd_and(tmp9, tmp11);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp12));
        sequence_f0_91 = simd_and(tmp12, byte_91);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
        tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp14 = simd_andc(tmp7, tmp13);
        byte_81 = simd_and(tmp14, tmp11);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(2), tmp15));
        sequence_f0_91_81 = simd_and(tmp15, byte_81);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(3), sequence_f0_91_adv));
        sequence_f0_91_81 = simd_and(sequence_f0_91_adv, byte_81);
        tmp16 = simd_andc(tmp7, basis_bits.bit_2);
        tmp17 = simd_or(tmp4, basis_bits.bit_6);
        tmp18 = simd_not(tmp17);
        tmp19 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp20 = simd_and(tmp19, basis_bits.bit_6);
        tmp21 = simd_or(simd_and(basis_bits.bit_3, tmp18), simd_andc(tmp20, basis_bits.bit_3));
        tmp22 = simd_and(tmp16, tmp21);
        tmp23 = simd_and(tmp7, tmp2);
        cc_range_1104e_11070_4 = simd_or(tmp22, tmp23);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_91_81, carryQ.get_carry_in(4), sequence_f0_91_81_adv));
        tmp24 = simd_and(sequence_f0_91_81_adv, cc_range_1104e_11070_4);
        struct_Cn.cc = simd_or(struct_Cn.cc, tmp24);
        tmp25 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp26 = simd_andc(tmp25, tmp4);
        byte_83 = simd_and(tmp14, tmp26);
        sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
        sequence_f0_91_83 = simd_and(sequence_f0_91_adv, byte_83);
        tmp27 = simd_or(basis_bits.bit_5, basis_bits.bit_6);
        tmp28 = simd_or(basis_bits.bit_4, tmp27);
        tmp29 = simd_and(tmp14, tmp28);
        tmp30 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp31 = simd_and(tmp7, tmp30);
        tmp32 = simd_and(tmp31, basis_bits.bit_4);
        tmp33 = simd_or(basis_bits.bit_5, tmp5);
        tmp34 = simd_and(tmp32, tmp33);
        tmp35 = simd_or(tmp29, tmp34);
        tmp36 = simd_and(tmp23, basis_bits.bit_4);
        tmp37 = simd_and(tmp36, tmp27);
        cc_range_110c2_110fa_4 = simd_or(tmp35, tmp37);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_91_83, carryQ.get_carry_in(5), sequence_f0_91_83_adv));
        tmp38 = simd_and(sequence_f0_91_83_adv, cc_range_110c2_110fa_4);
        struct_Cn.cc = simd_or(struct_Cn.cc, tmp38);
        tmp39 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp40 = simd_andc(tmp39, tmp5);
        byte_84 = simd_and(tmp14, tmp40);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        sequence_f0_91_84 = simd_and(sequence_f0_91_adv, byte_84);
        tmp41 = simd_and(tmp39, tmp10);
        byte_b5 = simd_and(tmp23, tmp41);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_91_84, carryQ.get_carry_in(6), sequence_f0_91_84_adv));
        tmp42 = simd_and(sequence_f0_91_84_adv, byte_b5);
        struct_Cn.cc = simd_or(struct_Cn.cc, tmp42);
        byte_85 = simd_and(tmp14, tmp41);
        sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
        sequence_f0_91_85 = simd_and(sequence_f0_91_adv, byte_85);
        tmp43 = simd_or(basis_bits.bit_3, tmp4);
        tmp44 = simd_or(basis_bits.bit_2, tmp43);
        byte_range_84_bf = simd_and(tmp7, tmp44);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_91_85, carryQ.get_carry_in(7), sequence_f0_91_85_adv));
        tmp45 = simd_and(sequence_f0_91_85_adv, byte_range_84_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, tmp45);
        tmp46 = simd_and(tmp39, tmp25);
        byte_87 = simd_and(tmp14, tmp46);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        sequence_f0_91_87 = simd_and(sequence_f0_91_adv, byte_87);
        tmp47 = simd_and(tmp14, basis_bits.bit_4);
        tmp48 = simd_and(tmp47, tmp33);
        tmp49 = simd_and(basis_bits.bit_4, tmp27);
        tmp50 = simd_and(basis_bits.bit_3, tmp49);
        tmp51 = simd_or(basis_bits.bit_2, tmp50);
        tmp52 = simd_and(tmp7, tmp51);
        cc_range_111c9_111da_4 = simd_or(tmp48, tmp52);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(sequence_f0_91_87, carryQ.get_carry_in(8), sequence_f0_91_87_adv));
        tmp53 = simd_and(sequence_f0_91_87_adv, cc_range_111c9_111da_4);
        struct_Cn.cc = simd_or(struct_Cn.cc, tmp53);
        tmp54 = simd_not(tmp49);
        tmp55 = simd_or(simd_and(basis_bits.bit_3, tmp54), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
        byte_range_88_99 = simd_and(tmp16, tmp55);
        sequence_f0_91_byte_range_88_99 = simd_and(sequence_f0_91_adv, byte_range_88_99);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(sequence_f0_91_byte_range_88_99, carryQ.get_carry_in(9), tmp56));
        sequence_f0_91_byte_range_88_99_sfx = simd_and(tmp56, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_91_byte_range_88_99_sfx);
        tmp57 = simd_and(byte_range_80_bf, tmp8);
        tmp58 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
        tmp59 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp60 = simd_and(tmp58, tmp59);
        byte_9a = simd_and(tmp57, tmp60);
        sequence_f0_91_9a = simd_and(sequence_f0_91_adv, byte_9a);
        tmp61 = simd_and(byte_range_80_bf, tmp2);
        byte_range_b8_bf = simd_and(tmp61, basis_bits.bit_4);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9a, carryQ.get_carry_in(10), tmp62));
        sequence_f0_91_9a_byte_range_b8_bf = simd_and(tmp62, byte_range_b8_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_91_9a_byte_range_b8_bf);
        tmp63 = simd_and(tmp58, tmp25);
        byte_9b = simd_and(tmp57, tmp63);
        sequence_f0_91_9b = simd_and(sequence_f0_91_adv, byte_9b);
        tmp64 = simd_or(basis_bits.bit_3, tmp49);
        tmp65 = simd_or(basis_bits.bit_2, tmp64);
        byte_range_8a_bf = simd_and(byte_range_80_bf, tmp65);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9b, carryQ.get_carry_in(11), tmp66));
        sequence_f0_91_9b_byte_range_8a_bf = simd_and(tmp66, byte_range_8a_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_91_9b_byte_range_8a_bf);
        tmp67 = simd_andc(tmp19, tmp5);
        byte_9c = simd_and(tmp57, tmp67);
        sequence_f0_91_9c = simd_and(sequence_f0_91_adv, byte_9c);
        carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f0_91_9c, carryQ.get_carry_in(12), tmp68));
        sequence_f0_91_9c_byte_range_80_bf = simd_and(tmp68, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_91_9c_byte_range_80_bf);
        tmp69 = simd_andc(tmp59, tmp4);
        byte_92 = simd_and(tmp57, tmp69);
        sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
        sequence_f0_92 = simd_and(byte_f0_adv, byte_92);
        tmp70 = simd_andc(byte_range_80_bf, tmp13);
        tmp71 = simd_and(tmp19, tmp10);
        byte_8d = simd_and(tmp70, tmp71);
        carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(13), tmp72));
        sequence_f0_92_8d = simd_and(tmp72, byte_8d);
        carryQ.cq[14] = carryout2carry(pablo_blk_Advance(sequence_f0_92, carryQ.get_carry_in(14), sequence_f0_92_adv));
        sequence_f0_92_8d = simd_and(sequence_f0_92_adv, byte_8d);
        tmp73 = simd_and(byte_range_80_bf, basis_bits.bit_2);
        tmp74 = simd_and(tmp19, tmp25);
        tmp75 = simd_or(basis_bits.bit_3, tmp74);
        byte_range_af_bf = simd_and(tmp73, tmp75);
        carryQ.cq[15] = carryout2carry(pablo_blk_Advance(sequence_f0_92_8d, carryQ.get_carry_in(15), sequence_f0_92_8d_adv));
        tmp76 = simd_and(sequence_f0_92_8d_adv, byte_range_af_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, tmp76);
        byte_range_8e_8f = simd_and(tmp70, tmp20);
        sequence_f0_92_byte_range_8e_8f = simd_and(sequence_f0_92_adv, byte_range_8e_8f);
        carryQ.cq[16] = carryout2carry(pablo_blk_Advance(sequence_f0_92_byte_range_8e_8f, carryQ.get_carry_in(16), tmp77));
        sequence_f0_92_byte_range_8e_8f_sfx = simd_and(tmp77, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_92_byte_range_8e_8f_sfx);
        sequence_f0_92_91 = simd_and(sequence_f0_92_adv, byte_91);
        tmp78 = simd_and(byte_range_80_bf, tmp30);
        tmp79 = simd_or(basis_bits.bit_5, tmp25);
        tmp80 = simd_or(basis_bits.bit_4, tmp79);
        byte_range_a3_af = simd_and(tmp78, tmp80);
        carryQ.cq[17] = carryout2carry(pablo_blk_Advance(sequence_f0_92_91, carryQ.get_carry_in(17), tmp81));
        sequence_f0_92_91_byte_range_a3_af = simd_and(tmp81, byte_range_a3_af);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_92_91_byte_range_a3_af);
        sequence_f0_92_92 = simd_and(sequence_f0_92_adv, byte_92);
        carryQ.cq[18] = carryout2carry(pablo_blk_Advance(sequence_f0_92_92, carryQ.get_carry_in(18), tmp82));
        sequence_f0_92_92_byte_range_80_bf = simd_and(tmp82, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_92_92_byte_range_80_bf);
        byte_93 = simd_and(tmp57, tmp26);
        sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
        sequence_f0_93 = simd_and(byte_f0_adv, byte_93);
        byte_90 = simd_andc(tmp57, tmp6);
        carryQ.cq[19] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(19), tmp83));
        sequence_f0_93_90 = simd_and(tmp83, byte_90);
        carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_f0_93, carryQ.get_carry_in(20), sequence_f0_93_adv));
        sequence_f0_93_90 = simd_and(sequence_f0_93_adv, byte_90);
        carryQ.cq[21] = carryout2carry(pablo_blk_Advance(sequence_f0_93_90, carryQ.get_carry_in(21), sequence_f0_93_90_adv));
        tmp84 = simd_and(sequence_f0_93_90_adv, byte_range_af_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, tmp84);
        tmp85 = simd_and(basis_bits.bit_3, tmp6);
        tmp86 = simd_or(basis_bits.bit_2, tmp85);
        byte_range_91_bf = simd_and(byte_range_80_bf, tmp86);
        sequence_f0_93_byte_range_91_bf = simd_and(sequence_f0_93_adv, byte_range_91_bf);
        carryQ.cq[22] = carryout2carry(pablo_blk_Advance(sequence_f0_93_byte_range_91_bf, carryQ.get_carry_in(22), tmp87));
        sequence_f0_93_byte_range_91_bf_sfx = simd_and(tmp87, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_93_byte_range_91_bf_sfx);
        tmp88 = simd_andc(tmp39, basis_bits.bit_6);
        byte_range_94_95 = simd_and(tmp57, tmp88);
        byte_f0_byte_range_94_95 = simd_and(byte_f0_adv, byte_range_94_95);
        carryQ.cq[23] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_94_95, carryQ.get_carry_in(23), tmp89));
        byte_f0_byte_range_94_95_sfx = simd_and(tmp89, byte_range_80_bf);
        carryQ.cq[24] = carryout2carry(pablo_blk_Advance(byte_f0_byte_range_94_95_sfx, carryQ.get_carry_in(24), tmp90));
        byte_f0_byte_range_94_95_sfx_sfx = simd_and(tmp90, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, byte_f0_byte_range_94_95_sfx_sfx);
        tmp91 = simd_and(tmp39, tmp59);
        byte_96 = simd_and(tmp57, tmp91);
        sequence_f0_96 = simd_and(byte_f0_adv, byte_96);
        byte_80 = simd_andc(tmp70, tmp6);
        carryQ.cq[25] = carryout2carry(pablo_blk_Advance(sequence_f0_96, carryQ.get_carry_in(25), sequence_f0_96_adv));
        sequence_f0_96_80 = simd_and(sequence_f0_96_adv, byte_80);
        carryQ.cq[26] = carryout2carry(pablo_blk_Advance(sequence_f0_96_80, carryQ.get_carry_in(26), tmp92));
        sequence_f0_96_80_byte_range_80_bf = simd_and(tmp92, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_96_80_byte_range_80_bf);
        byte_97 = simd_and(tmp57, tmp46);
        sequence_f0_97 = simd_and(byte_f0_adv, byte_97);
        carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_f0_97, carryQ.get_carry_in(27), sequence_f0_97_adv));
        sequence_f0_97_80 = simd_and(sequence_f0_97_adv, byte_80);
        carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_f0_97_80, carryQ.get_carry_in(28), tmp93));
        sequence_f0_97_80_byte_range_80_bf = simd_and(tmp93, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_97_80_byte_range_80_bf);
        sequence_f0_9b = simd_and(byte_f0_adv, byte_9b);
        carryQ.cq[29] = carryout2carry(pablo_blk_Advance(sequence_f0_9b, carryQ.get_carry_in(29), sequence_f0_9b_adv));
        sequence_f0_9b_80 = simd_and(sequence_f0_9b_adv, byte_80);
        tmp94 = simd_or(basis_bits.bit_3, tmp17);
        tmp95 = simd_or(basis_bits.bit_2, tmp94);
        byte_range_82_bf = simd_and(byte_range_80_bf, tmp95);
        carryQ.cq[30] = carryout2carry(pablo_blk_Advance(sequence_f0_9b_80, carryQ.get_carry_in(30), tmp96));
        sequence_f0_9b_80_byte_range_82_bf = simd_and(tmp96, byte_range_82_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_9b_80_byte_range_82_bf);
        sequence_f0_9c = simd_and(byte_f0_adv, byte_9c);
        carryQ.cq[31] = carryout2carry(pablo_blk_Advance(sequence_f0_9c, carryQ.get_carry_in(31), sequence_f0_9c_adv));
        sequence_f0_9c_80 = simd_and(sequence_f0_9c_adv, byte_80);
        carryQ.cq[32] = carryout2carry(pablo_blk_Advance(sequence_f0_9c_80, carryQ.get_carry_in(32), tmp97));
        sequence_f0_9c_80_byte_range_80_bf = simd_and(tmp97, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_9c_80_byte_range_80_bf);
        byte_9d = simd_and(tmp57, tmp71);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        carryQ.cq[33] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(33), sequence_f0_9d_adv));
        sequence_f0_9d_83 = simd_and(sequence_f0_9d_adv, byte_83);
        tmp98 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
        tmp99 = simd_or(basis_bits.bit_4, tmp98);
        byte_range_b6_bf = simd_and(tmp61, tmp99);
        carryQ.cq[34] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_83, carryQ.get_carry_in(34), tmp100));
        sequence_f0_9d_83_byte_range_b6_bf = simd_and(tmp100, byte_range_b6_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_9d_83_byte_range_b6_bf);
        tmp101 = simd_and(tmp19, tmp59);
        byte_9e = simd_and(tmp57, tmp101);
        sequence_f0_9e = simd_and(byte_f0_adv, byte_9e);
        carryQ.cq[35] = carryout2carry(pablo_blk_Advance(sequence_f0_9e, carryQ.get_carry_in(35), sequence_f0_9e_adv));
        sequence_f0_9e_80 = simd_and(sequence_f0_9e_adv, byte_80);
        carryQ.cq[36] = carryout2carry(pablo_blk_Advance(sequence_f0_9e_80, carryQ.get_carry_in(36), tmp102));
        sequence_f0_9e_80_byte_range_80_bf = simd_and(tmp102, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_9e_80_byte_range_80_bf);
        byte_9f = simd_and(tmp57, tmp74);
        sequence_f0_9f = simd_and(byte_f0_adv, byte_9f);
        carryQ.cq[37] = carryout2carry(pablo_blk_Advance(sequence_f0_9f, carryQ.get_carry_in(37), sequence_f0_9f_adv));
        sequence_f0_9f_80 = simd_and(sequence_f0_9f_adv, byte_80);
        byte_range_ac_af = simd_and(tmp78, tmp19);
        carryQ.cq[38] = carryout2carry(pablo_blk_Advance(sequence_f0_9f_80, carryQ.get_carry_in(38), tmp103));
        sequence_f0_9f_80_byte_range_ac_af = simd_and(tmp103, byte_range_ac_af);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_9f_80_byte_range_ac_af);
        byte_aa = simd_and(tmp78, tmp60);
        sequence_f0_aa = simd_and(byte_f0_adv, byte_aa);
        carryQ.cq[39] = carryout2carry(pablo_blk_Advance(sequence_f0_aa, carryQ.get_carry_in(39), sequence_f0_aa_adv));
        sequence_f0_aa_9b = simd_and(sequence_f0_aa_adv, byte_9b);
        tmp104 = simd_and(basis_bits.bit_5, tmp25);
        tmp105 = simd_or(basis_bits.bit_4, tmp104);
        tmp106 = simd_and(basis_bits.bit_3, tmp105);
        tmp107 = simd_or(basis_bits.bit_2, tmp106);
        byte_range_97_bf = simd_and(byte_range_80_bf, tmp107);
        carryQ.cq[40] = carryout2carry(pablo_blk_Advance(sequence_f0_aa_9b, carryQ.get_carry_in(40), tmp108));
        sequence_f0_aa_9b_byte_range_97_bf = simd_and(tmp108, byte_range_97_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_aa_9b_byte_range_97_bf);
        byte_ab = simd_and(tmp78, tmp63);
        sequence_f0_ab = simd_and(byte_f0_adv, byte_ab);
        carryQ.cq[41] = carryout2carry(pablo_blk_Advance(sequence_f0_ab, carryQ.get_carry_in(41), sequence_f0_ab_adv));
        sequence_f0_ab_9c = simd_and(sequence_f0_ab_adv, byte_9c);
        tmp109 = simd_and(basis_bits.bit_5, tmp5);
        tmp110 = simd_or(basis_bits.bit_4, tmp109);
        byte_range_b5_bf = simd_and(tmp61, tmp110);
        carryQ.cq[42] = carryout2carry(pablo_blk_Advance(sequence_f0_ab_9c, carryQ.get_carry_in(42), tmp111));
        sequence_f0_ab_9c_byte_range_b5_bf = simd_and(tmp111, byte_range_b5_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_ab_9c_byte_range_b5_bf);
        byte_ac = simd_and(tmp78, tmp67);
        sequence_f0_ac = simd_and(byte_f0_adv, byte_ac);
        carryQ.cq[43] = carryout2carry(pablo_blk_Advance(sequence_f0_ac, carryQ.get_carry_in(43), sequence_f0_ac_adv));
        sequence_f0_ac_80 = simd_and(sequence_f0_ac_adv, byte_80);
        carryQ.cq[44] = carryout2carry(pablo_blk_Advance(sequence_f0_ac_80, carryQ.get_carry_in(44), tmp112));
        sequence_f0_ac_80_byte_range_80_bf = simd_and(tmp112, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_ac_80_byte_range_80_bf);
        byte_af = simd_and(tmp78, tmp74);
        sequence_f0_af = simd_and(byte_f0_adv, byte_af);
        carryQ.cq[45] = carryout2carry(pablo_blk_Advance(sequence_f0_af, carryQ.get_carry_in(45), sequence_f0_af_adv));
        sequence_f0_af_80 = simd_and(sequence_f0_af_adv, byte_80);
        carryQ.cq[46] = carryout2carry(pablo_blk_Advance(sequence_f0_af_80, carryQ.get_carry_in(46), tmp113));
        sequence_f0_af_80_byte_range_80_bf = simd_and(tmp113, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_af_80_byte_range_80_bf);
        byte_b0 = simd_andc(tmp61, tmp6);
        sequence_f0_b0 = simd_and(byte_f0_adv, byte_b0);
        carryQ.cq[47] = carryout2carry(pablo_blk_Advance(sequence_f0_b0, carryQ.get_carry_in(47), sequence_f0_b0_adv));
        sequence_f0_b0_80 = simd_and(sequence_f0_b0_adv, byte_80);
        carryQ.cq[48] = carryout2carry(pablo_blk_Advance(sequence_f0_b0_80, carryQ.get_carry_in(48), tmp114));
        sequence_f0_b0_80_byte_range_80_bf = simd_and(tmp114, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_b0_80_byte_range_80_bf);
        tmp115 = simd_andc(tmp3, tmp4);
        tmp116 = simd_not(basis_bits.bit_7);
        tmp117 = simd_or(simd_and(basis_bits.bit_6, tmp116), simd_andc(basis_bits.bit_7, basis_bits.bit_6));
        byte_range_f1_f2 = simd_and(tmp115, tmp117);
        carryQ.cq[49] = carryout2carry(pablo_blk_Advance(byte_range_f1_f2, carryQ.get_carry_in(49), tmp118));
        byte_range_f1_f2_sfx = simd_and(tmp118, byte_range_80_bf);
        carryQ.cq[50] = carryout2carry(pablo_blk_Advance(byte_range_f1_f2_sfx, carryQ.get_carry_in(50), tmp119));
        byte_range_f1_f2_sfx_sfx = simd_and(tmp119, byte_range_80_bf);
        carryQ.cq[51] = carryout2carry(pablo_blk_Advance(byte_range_f1_f2_sfx_sfx, carryQ.get_carry_in(51), tmp120));
        byte_range_f1_f2_sfx_sfx_sfx = simd_and(tmp120, byte_range_80_bf);
        struct_Cn.cc = simd_or(struct_Cn.cc, byte_range_f1_f2_sfx_sfx_sfx);
        byte_f3 = simd_and(tmp3, tmp26);
        carryQ.cq[52] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(52), byte_f3_adv));
        sequence_f3_80 = simd_and(byte_f3_adv, byte_80);
        carryQ.cq[53] = carryout2carry(pablo_blk_Advance(sequence_f3_80, carryQ.get_carry_in(53), sequence_f3_80_adv));
        sequence_f3_80_80 = simd_and(sequence_f3_80_adv, byte_80);
        carryQ.cq[54] = carryout2carry(pablo_blk_Advance(sequence_f3_80_80, carryQ.get_carry_in(54), tmp121));
        sequence_f3_80_80_80 = simd_and(tmp121, byte_80);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(55, 11))) {
          r80_7ff_tmp1 = simd_andc(tmp1, tmp13);
          byte_cd = simd_and(r80_7ff_tmp1, tmp71);
          r80_7ff_tmp2 = simd_andc(tmp58, basis_bits.bit_6);
          r80_7ff_tmp3 = simd_or(r80_7ff_tmp2, tmp74);
          cc_range_378_37f_2 = simd_and(tmp61, r80_7ff_tmp3);
          carryQ.cq[55] = carryout2carry(pablo_blk_Advance(byte_cd, carryQ.get_carry_in(55), byte_cd_adv));
          r80_7ff_tmp4 = simd_and(byte_cd_adv, cc_range_378_37f_2);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp4);
          byte_ce = simd_and(r80_7ff_tmp1, tmp101);
          r80_7ff_tmp5 = simd_andc(tmp4, tmp63);
          r80_7ff_tmp6 = simd_andc(r80_7ff_tmp5, tmp71);
          r80_7ff_tmp7 = simd_andc(tmp70, r80_7ff_tmp6);
          r80_7ff_tmp8 = simd_and(tmp78, tmp69);
          cc_range_380_3a2_2 = simd_or(r80_7ff_tmp7, r80_7ff_tmp8);
          carryQ.cq[56] = carryout2carry(pablo_blk_Advance(byte_ce, carryQ.get_carry_in(56), byte_ce_adv));
          r80_7ff_tmp9 = simd_and(byte_ce_adv, cc_range_380_3a2_2);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp9);
          r80_7ff_tmp10 = simd_and(tmp1, tmp8);
          byte_d4 = simd_and(r80_7ff_tmp10, tmp40);
          r80_7ff_tmp11 = simd_not(tmp6);
          r80_7ff_tmp12 = simd_or(simd_and(basis_bits.bit_3, r80_7ff_tmp11), simd_andc(basis_bits.bit_4, basis_bits.bit_3));
          byte_range_a8_b0 = simd_and(tmp73, r80_7ff_tmp12);
          carryQ.cq[57] = carryout2carry(pablo_blk_Advance(byte_d4, carryQ.get_carry_in(57), byte_d4_adv));
          r80_7ff_tmp13 = simd_and(byte_d4_adv, byte_range_a8_b0);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp13);
          byte_d5 = simd_and(r80_7ff_tmp10, tmp41);
          r80_7ff_tmp14 = simd_not(tmp33);
          r80_7ff_tmp15 = simd_or(simd_and(basis_bits.bit_4, r80_7ff_tmp14), simd_andc(tmp104, basis_bits.bit_4));
          r80_7ff_tmp16 = simd_and(tmp57, r80_7ff_tmp15);
          r80_7ff_tmp17 = simd_andc(tmp78, tmp6);
          cc_range_557_560_2 = simd_or(r80_7ff_tmp16, r80_7ff_tmp17);
          carryQ.cq[58] = carryout2carry(pablo_blk_Advance(byte_d5, carryQ.get_carry_in(58), byte_d5_adv));
          r80_7ff_tmp18 = simd_and(byte_d5_adv, cc_range_557_560_2);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp18);
          byte_d6 = simd_and(r80_7ff_tmp10, tmp91);
          r80_7ff_tmp19 = simd_andc(tmp58, tmp5);
          r80_7ff_tmp20 = simd_and(tmp70, r80_7ff_tmp19);
          r80_7ff_tmp21 = simd_and(tmp70, basis_bits.bit_4);
          r80_7ff_tmp22 = simd_not(tmp25);
          r80_7ff_tmp23 = simd_or(simd_and(basis_bits.bit_5, r80_7ff_tmp22), simd_andc(tmp25, basis_bits.bit_5));
          r80_7ff_tmp24 = simd_and(r80_7ff_tmp21, r80_7ff_tmp23);
          r80_7ff_tmp25 = simd_or(r80_7ff_tmp20, r80_7ff_tmp24);
          cc_range_588_590_2 = simd_or(r80_7ff_tmp25, byte_90);
          carryQ.cq[59] = carryout2carry(pablo_blk_Advance(byte_d6, carryQ.get_carry_in(59), byte_d6_adv));
          r80_7ff_tmp26 = simd_and(byte_d6_adv, cc_range_588_590_2);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp26);
          byte_d7 = simd_and(r80_7ff_tmp10, tmp46);
          r80_7ff_tmp27 = simd_and(tmp78, basis_bits.bit_4);
          r80_7ff_tmp28 = simd_and(r80_7ff_tmp27, tmp79);
          r80_7ff_tmp29 = simd_or(r80_7ff_tmp21, r80_7ff_tmp28);
          cc_range_5c8_5f5_2 = simd_or(r80_7ff_tmp29, byte_range_b5_bf);
          carryQ.cq[60] = carryout2carry(pablo_blk_Advance(byte_d7, carryQ.get_carry_in(60), byte_d7_adv));
          r80_7ff_tmp30 = simd_and(byte_d7_adv, cc_range_5c8_5f5_2);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp30);
          byte_d8 = simd_and(r80_7ff_tmp10, r80_7ff_tmp19);
          r80_7ff_tmp31 = simd_and(tmp70, tmp41);
          cc_range_605_61d_2 = simd_or(r80_7ff_tmp31, byte_9d);
          carryQ.cq[61] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(61), byte_d8_adv));
          r80_7ff_tmp32 = simd_and(byte_d8_adv, cc_range_605_61d_2);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp32);
          byte_dc = simd_and(r80_7ff_tmp10, tmp67);
          byte_8e = simd_and(tmp70, tmp101);
          carryQ.cq[62] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(62), byte_dc_adv));
          r80_7ff_tmp33 = simd_and(byte_dc_adv, byte_8e);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp33);
          byte_dd = simd_and(r80_7ff_tmp10, tmp71);
          r80_7ff_tmp34 = simd_not(tmp5);
          r80_7ff_tmp35 = simd_or(simd_and(basis_bits.bit_5, r80_7ff_tmp34), simd_andc(tmp25, basis_bits.bit_5));
          byte_range_8b_8c = simd_and(r80_7ff_tmp21, r80_7ff_tmp35);
          carryQ.cq[63] = carryout2carry(pablo_blk_Advance(byte_dd, carryQ.get_carry_in(63), byte_dd_adv));
          r80_7ff_tmp36 = simd_and(byte_dd_adv, byte_range_8b_8c);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp36);
          byte_de = simd_and(r80_7ff_tmp10, tmp101);
          byte_range_b2_bf = simd_and(tmp61, tmp28);
          carryQ.cq[64] = carryout2carry(pablo_blk_Advance(byte_de, carryQ.get_carry_in(64), byte_de_adv));
          r80_7ff_tmp37 = simd_and(byte_de_adv, byte_range_b2_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp37);
          byte_df = simd_and(r80_7ff_tmp10, tmp74);
          byte_range_bb_bf = simd_and(byte_range_b8_bf, tmp79);
          carryQ.cq[65] = carryout2carry(pablo_blk_Advance(byte_df, carryQ.get_carry_in(65), byte_df_adv));
          r80_7ff_tmp38 = simd_and(byte_df_adv, byte_range_bb_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r80_7ff_tmp38);
        }
        else {
          carryQ.CarryDequeueEnqueue(55, 11);
        }
        byte_range_e0_ef = simd_and(tmp1, tmp30);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(66, 149))) {
          byte_e0 = simd_andc(byte_range_e0_ef, tmp6);
          byte_a0 = simd_andc(tmp78, tmp6);
          carryQ.cq[66] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(66), r800_ffff_tmp1));
          sequence_e0_a0 = simd_and(r800_ffff_tmp1, byte_a0);
          carryQ.cq[67] = carryout2carry(pablo_blk_Advance(byte_e0, carryQ.get_carry_in(67), byte_e0_adv));
          sequence_e0_a0 = simd_and(byte_e0_adv, byte_a0);
          r800_ffff_tmp2 = simd_and(tmp78, tmp20);
          r800_ffff_tmp3 = simd_and(tmp61, tmp74);
          cc_range_82e_83f_3 = simd_or(r800_ffff_tmp2, r800_ffff_tmp3);
          carryQ.cq[68] = carryout2carry(pablo_blk_Advance(sequence_e0_a0, carryQ.get_carry_in(68), sequence_e0_a0_adv));
          r800_ffff_tmp4 = simd_and(sequence_e0_a0_adv, cc_range_82e_83f_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp4);
          byte_a1 = simd_and(tmp78, tmp11);
          sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
          sequence_e0_a1 = simd_and(byte_e0_adv, byte_a1);
          r800_ffff_tmp5 = simd_andc(tmp19, basis_bits.bit_6);
          r800_ffff_tmp6 = simd_and(tmp57, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_and(basis_bits.bit_3, tmp74);
          r800_ffff_tmp8 = simd_or(basis_bits.bit_2, r800_ffff_tmp7);
          r800_ffff_tmp9 = simd_and(byte_range_80_bf, r800_ffff_tmp8);
          cc_range_85c_85f_3 = simd_or(r800_ffff_tmp6, r800_ffff_tmp9);
          carryQ.cq[69] = carryout2carry(pablo_blk_Advance(sequence_e0_a1, carryQ.get_carry_in(69), sequence_e0_a1_adv));
          r800_ffff_tmp10 = simd_and(sequence_e0_a1_adv, cc_range_85c_85f_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp10);
          byte_a2 = simd_and(tmp78, tmp69);
          sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
          sequence_e0_a2 = simd_and(byte_e0_adv, byte_a2);
          r800_ffff_tmp11 = simd_andc(byte_range_80_bf, basis_bits.bit_2);
          r800_ffff_tmp12 = simd_or(r800_ffff_tmp11, byte_a1);
          r800_ffff_tmp13 = simd_and(tmp19, tmp5);
          r800_ffff_tmp14 = simd_or(basis_bits.bit_3, r800_ffff_tmp13);
          r800_ffff_tmp15 = simd_and(tmp73, r800_ffff_tmp14);
          cc_range_880_8ad_3 = simd_or(r800_ffff_tmp12, r800_ffff_tmp15);
          carryQ.cq[70] = carryout2carry(pablo_blk_Advance(sequence_e0_a2, carryQ.get_carry_in(70), sequence_e0_a2_adv));
          r800_ffff_tmp16 = simd_and(sequence_e0_a2_adv, cc_range_880_8ad_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp16);
          byte_a3 = simd_and(tmp78, tmp26);
          sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
          sequence_e0_a3 = simd_and(byte_e0_adv, byte_a3);
          r800_ffff_tmp17 = simd_and(basis_bits.bit_2, tmp43);
          r800_ffff_tmp18 = simd_andc(byte_range_80_bf, r800_ffff_tmp17);
          cc_range_8c0_8ff_3 = simd_or(r800_ffff_tmp18, r800_ffff_tmp3);
          carryQ.cq[71] = carryout2carry(pablo_blk_Advance(sequence_e0_a3, carryQ.get_carry_in(71), sequence_e0_a3_adv));
          r800_ffff_tmp19 = simd_and(sequence_e0_a3_adv, cc_range_8c0_8ff_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp19);
          byte_a5 = simd_and(tmp78, tmp41);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          sequence_e0_a5 = simd_and(byte_e0_adv, byte_a5);
          r800_ffff_tmp20 = simd_andc(tmp58, tmp5);
          byte_b8 = simd_and(tmp61, r800_ffff_tmp20);
          carryQ.cq[72] = carryout2carry(pablo_blk_Advance(sequence_e0_a5, carryQ.get_carry_in(72), sequence_e0_a5_adv));
          r800_ffff_tmp21 = simd_and(sequence_e0_a5_adv, byte_b8);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp21);
          byte_a6 = simd_and(tmp78, tmp91);
          sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
          sequence_e0_a6 = simd_and(byte_e0_adv, byte_a6);
          r800_ffff_tmp22 = simd_andc(tmp6, tmp40);
          r800_ffff_tmp23 = simd_andc(tmp70, r800_ffff_tmp22);
          r800_ffff_tmp24 = simd_and(tmp70, tmp19);
          r800_ffff_tmp25 = simd_and(r800_ffff_tmp24, tmp117);
          r800_ffff_tmp26 = simd_or(r800_ffff_tmp23, r800_ffff_tmp25);
          r800_ffff_tmp27 = simd_andc(tmp57, tmp4);
          r800_ffff_tmp28 = simd_and(r800_ffff_tmp27, tmp117);
          r800_ffff_tmp29 = simd_or(r800_ffff_tmp26, r800_ffff_tmp28);
          r800_ffff_tmp30 = simd_and(tmp58, tmp10);
          r800_ffff_tmp31 = simd_and(tmp78, r800_ffff_tmp30);
          r800_ffff_tmp32 = simd_or(r800_ffff_tmp29, r800_ffff_tmp31);
          r800_ffff_tmp33 = simd_and(tmp61, tmp11);
          r800_ffff_tmp34 = simd_or(r800_ffff_tmp32, r800_ffff_tmp33);
          r800_ffff_tmp35 = simd_andc(tmp61, basis_bits.bit_4);
          r800_ffff_tmp36 = simd_not(basis_bits.bit_6);
          r800_ffff_tmp37 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp36), simd_andc(tmp25, basis_bits.bit_5));
          r800_ffff_tmp38 = simd_and(r800_ffff_tmp35, r800_ffff_tmp37);
          r800_ffff_tmp39 = simd_or(r800_ffff_tmp34, r800_ffff_tmp38);
          r800_ffff_tmp40 = simd_and(tmp58, basis_bits.bit_6);
          r800_ffff_tmp41 = simd_and(tmp61, r800_ffff_tmp40);
          cc_range_980_9ba_3 = simd_or(r800_ffff_tmp39, r800_ffff_tmp41);
          carryQ.cq[73] = carryout2carry(pablo_blk_Advance(sequence_e0_a6, carryQ.get_carry_in(73), sequence_e0_a6_adv));
          r800_ffff_tmp42 = simd_and(sequence_e0_a6_adv, cc_range_980_9ba_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp42);
          byte_a7 = simd_and(tmp78, tmp46);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          sequence_e0_a7 = simd_and(byte_e0_adv, byte_a7);
          r800_ffff_tmp43 = simd_or(tmp39, tmp58);
          r800_ffff_tmp44 = simd_and(tmp70, r800_ffff_tmp43);
          r800_ffff_tmp45 = simd_and(tmp117, r800_ffff_tmp44);
          r800_ffff_tmp46 = simd_not(tmp105);
          r800_ffff_tmp47 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp46), simd_andc(tmp74, basis_bits.bit_3));
          r800_ffff_tmp48 = simd_and(r800_ffff_tmp11, r800_ffff_tmp47);
          r800_ffff_tmp49 = simd_or(r800_ffff_tmp45, r800_ffff_tmp48);
          r800_ffff_tmp50 = simd_and(tmp57, tmp58);
          r800_ffff_tmp51 = simd_or(r800_ffff_tmp49, r800_ffff_tmp50);
          r800_ffff_tmp52 = simd_or(r800_ffff_tmp51, byte_9e);
          r800_ffff_tmp53 = simd_and(tmp78, tmp88);
          r800_ffff_tmp54 = simd_or(r800_ffff_tmp52, r800_ffff_tmp53);
          r800_ffff_tmp55 = simd_and(tmp61, tmp19);
          cc_range_9c5_9fc_3 = simd_or(r800_ffff_tmp54, r800_ffff_tmp55);
          carryQ.cq[74] = carryout2carry(pablo_blk_Advance(sequence_e0_a7, carryQ.get_carry_in(74), sequence_e0_a7_adv));
          r800_ffff_tmp56 = simd_and(sequence_e0_a7_adv, cc_range_9c5_9fc_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp56);
          byte_a8 = simd_and(tmp78, r800_ffff_tmp20);
          sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
          sequence_e0_a8 = simd_and(byte_e0_adv, byte_a8);
          r800_ffff_tmp57 = simd_and(tmp70, basis_bits.bit_4);
          r800_ffff_tmp58 = simd_not(tmp25);
          r800_ffff_tmp59 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp58), simd_andc(tmp25, basis_bits.bit_5));
          r800_ffff_tmp60 = simd_and(r800_ffff_tmp57, r800_ffff_tmp59);
          r800_ffff_tmp61 = simd_or(r800_ffff_tmp23, r800_ffff_tmp60);
          r800_ffff_tmp62 = simd_or(r800_ffff_tmp61, r800_ffff_tmp28);
          r800_ffff_tmp63 = simd_or(r800_ffff_tmp62, r800_ffff_tmp31);
          r800_ffff_tmp64 = simd_or(r800_ffff_tmp63, r800_ffff_tmp33);
          r800_ffff_tmp65 = simd_and(tmp61, tmp40);
          r800_ffff_tmp66 = simd_or(r800_ffff_tmp64, r800_ffff_tmp65);
          r800_ffff_tmp67 = simd_and(tmp61, tmp46);
          r800_ffff_tmp68 = simd_or(r800_ffff_tmp66, r800_ffff_tmp67);
          r800_ffff_tmp69 = simd_or(r800_ffff_tmp68, r800_ffff_tmp41);
          r800_ffff_tmp70 = simd_and(tmp61, tmp71);
          cc_range_a00_a3d_3 = simd_or(r800_ffff_tmp69, r800_ffff_tmp70);
          carryQ.cq[75] = carryout2carry(pablo_blk_Advance(sequence_e0_a8, carryQ.get_carry_in(75), sequence_e0_a8_adv));
          r800_ffff_tmp71 = simd_and(sequence_e0_a8_adv, cc_range_a00_a3d_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp71);
          byte_a9 = simd_and(tmp78, r800_ffff_tmp30);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          sequence_e0_a9 = simd_and(byte_e0_adv, byte_a9);
          r800_ffff_tmp72 = simd_andc(tmp70, basis_bits.bit_4);
          r800_ffff_tmp73 = simd_and(r800_ffff_tmp72, r800_ffff_tmp59);
          r800_ffff_tmp74 = simd_and(tmp70, tmp58);
          r800_ffff_tmp75 = simd_and(r800_ffff_tmp74, tmp117);
          r800_ffff_tmp76 = simd_or(r800_ffff_tmp73, r800_ffff_tmp75);
          r800_ffff_tmp77 = simd_not(tmp6);
          r800_ffff_tmp78 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp77), simd_andc(tmp20, basis_bits.bit_3));
          r800_ffff_tmp79 = simd_and(r800_ffff_tmp11, r800_ffff_tmp78);
          r800_ffff_tmp80 = simd_or(r800_ffff_tmp76, r800_ffff_tmp79);
          r800_ffff_tmp81 = simd_not(tmp33);
          r800_ffff_tmp82 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp81), simd_andc(tmp27, basis_bits.bit_4));
          r800_ffff_tmp83 = simd_and(tmp57, r800_ffff_tmp82);
          r800_ffff_tmp84 = simd_or(r800_ffff_tmp80, r800_ffff_tmp83);
          r800_ffff_tmp85 = simd_or(r800_ffff_tmp84, byte_9d);
          r800_ffff_tmp86 = simd_or(basis_bits.bit_3, tmp99);
          r800_ffff_tmp87 = simd_not(r800_ffff_tmp86);
          r800_ffff_tmp88 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp87), simd_andc(r800_ffff_tmp7, basis_bits.bit_2));
          r800_ffff_tmp89 = simd_and(byte_range_80_bf, r800_ffff_tmp88);
          r800_ffff_tmp90 = simd_or(r800_ffff_tmp85, r800_ffff_tmp89);
          cc_range_a43_a76_3 = simd_or(r800_ffff_tmp90, byte_range_b6_bf);
          carryQ.cq[76] = carryout2carry(pablo_blk_Advance(sequence_e0_a9, carryQ.get_carry_in(76), sequence_e0_a9_adv));
          r800_ffff_tmp91 = simd_and(sequence_e0_a9_adv, cc_range_a43_a76_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp91);
          sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
          sequence_e0_aa = simd_and(byte_e0_adv, byte_aa);
          r800_ffff_tmp92 = simd_andc(r800_ffff_tmp22, tmp101);
          r800_ffff_tmp93 = simd_andc(tmp70, r800_ffff_tmp92);
          r800_ffff_tmp94 = simd_or(r800_ffff_tmp93, byte_92);
          r800_ffff_tmp95 = simd_or(r800_ffff_tmp94, byte_a9);
          r800_ffff_tmp96 = simd_or(r800_ffff_tmp95, r800_ffff_tmp33);
          r800_ffff_tmp97 = simd_or(r800_ffff_tmp96, r800_ffff_tmp65);
          cc_range_a80_aba_3 = simd_or(r800_ffff_tmp97, r800_ffff_tmp41);
          carryQ.cq[77] = carryout2carry(pablo_blk_Advance(sequence_e0_aa, carryQ.get_carry_in(77), sequence_e0_aa_adv));
          r800_ffff_tmp98 = simd_and(sequence_e0_aa_adv, cc_range_a80_aba_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp98);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          sequence_e0_ab = simd_and(byte_e0_adv, byte_ab);
          r800_ffff_tmp99 = simd_and(tmp59, r800_ffff_tmp43);
          r800_ffff_tmp100 = simd_or(r800_ffff_tmp99, tmp20);
          r800_ffff_tmp101 = simd_and(tmp70, r800_ffff_tmp100);
          r800_ffff_tmp102 = simd_or(basis_bits.bit_4, tmp33);
          r800_ffff_tmp103 = simd_and(tmp57, r800_ffff_tmp102);
          r800_ffff_tmp104 = simd_or(r800_ffff_tmp101, r800_ffff_tmp103);
          r800_ffff_tmp105 = simd_or(r800_ffff_tmp104, r800_ffff_tmp53);
          r800_ffff_tmp106 = simd_and(tmp61, tmp28);
          cc_range_ac6_af2_3 = simd_or(r800_ffff_tmp105, r800_ffff_tmp106);
          carryQ.cq[78] = carryout2carry(pablo_blk_Advance(sequence_e0_ab, carryQ.get_carry_in(78), sequence_e0_ab_adv));
          r800_ffff_tmp107 = simd_and(sequence_e0_ab_adv, cc_range_ac6_af2_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp107);
          sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
          sequence_e0_ac = simd_and(byte_e0_adv, byte_ac);
          r800_ffff_tmp108 = simd_or(r800_ffff_tmp29, byte_a9);
          r800_ffff_tmp109 = simd_or(r800_ffff_tmp108, r800_ffff_tmp33);
          r800_ffff_tmp110 = simd_or(r800_ffff_tmp109, r800_ffff_tmp65);
          cc_range_b00_b3a_3 = simd_or(r800_ffff_tmp110, r800_ffff_tmp41);
          carryQ.cq[79] = carryout2carry(pablo_blk_Advance(sequence_e0_ac, carryQ.get_carry_in(79), sequence_e0_ac_adv));
          r800_ffff_tmp111 = simd_and(sequence_e0_ac_adv, cc_range_b00_b3a_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp111);
          byte_ad = simd_and(tmp78, tmp71);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          sequence_e0_ad = simd_and(byte_e0_adv, byte_ad);
          r800_ffff_tmp112 = simd_not(tmp99);
          r800_ffff_tmp113 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp112), simd_andc(tmp20, basis_bits.bit_3));
          r800_ffff_tmp114 = simd_and(r800_ffff_tmp11, r800_ffff_tmp113);
          r800_ffff_tmp115 = simd_or(r800_ffff_tmp45, r800_ffff_tmp114);
          r800_ffff_tmp116 = simd_or(r800_ffff_tmp115, r800_ffff_tmp50);
          r800_ffff_tmp117 = simd_or(r800_ffff_tmp116, byte_9e);
          r800_ffff_tmp118 = simd_or(r800_ffff_tmp117, r800_ffff_tmp53);
          cc_range_b45_b78_3 = simd_or(r800_ffff_tmp118, byte_range_b8_bf);
          carryQ.cq[80] = carryout2carry(pablo_blk_Advance(sequence_e0_ad, carryQ.get_carry_in(80), sequence_e0_ad_adv));
          r800_ffff_tmp119 = simd_and(sequence_e0_ad_adv, cc_range_b45_b78_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp119);
          byte_ae = simd_and(tmp78, tmp101);
          sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
          sequence_e0_ae = simd_and(byte_e0_adv, byte_ae);
          r800_ffff_tmp120 = simd_andc(tmp17, tmp40);
          r800_ffff_tmp121 = simd_andc(tmp70, r800_ffff_tmp120);
          r800_ffff_tmp122 = simd_and(r800_ffff_tmp57, r800_ffff_tmp37);
          r800_ffff_tmp123 = simd_or(r800_ffff_tmp121, r800_ffff_tmp122);
          r800_ffff_tmp124 = simd_and(tmp57, tmp11);
          r800_ffff_tmp125 = simd_or(r800_ffff_tmp123, r800_ffff_tmp124);
          r800_ffff_tmp126 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp81), simd_andc(tmp98, basis_bits.bit_4));
          r800_ffff_tmp127 = simd_and(tmp57, r800_ffff_tmp126);
          r800_ffff_tmp128 = simd_or(r800_ffff_tmp125, r800_ffff_tmp127);
          r800_ffff_tmp129 = simd_or(r800_ffff_tmp128, byte_9b);
          r800_ffff_tmp130 = simd_or(r800_ffff_tmp129, byte_9d);
          r800_ffff_tmp131 = simd_andc(tmp78, tmp4);
          r800_ffff_tmp132 = simd_andc(r800_ffff_tmp131, tmp25);
          r800_ffff_tmp133 = simd_or(r800_ffff_tmp130, r800_ffff_tmp132);
          r800_ffff_tmp134 = simd_and(tmp78, tmp39);
          r800_ffff_tmp135 = simd_and(r800_ffff_tmp134, tmp5);
          r800_ffff_tmp136 = simd_or(r800_ffff_tmp133, r800_ffff_tmp135);
          r800_ffff_tmp137 = simd_and(tmp78, basis_bits.bit_4);
          r800_ffff_tmp138 = simd_and(r800_ffff_tmp137, r800_ffff_tmp37);
          r800_ffff_tmp139 = simd_or(r800_ffff_tmp136, r800_ffff_tmp138);
          r800_ffff_tmp140 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp36), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp141 = simd_and(byte_range_b8_bf, r800_ffff_tmp140);
          cc_range_b80_bba_3 = simd_or(r800_ffff_tmp139, r800_ffff_tmp141);
          carryQ.cq[81] = carryout2carry(pablo_blk_Advance(sequence_e0_ae, carryQ.get_carry_in(81), sequence_e0_ae_adv));
          r800_ffff_tmp142 = simd_and(sequence_e0_ae_adv, cc_range_b80_bba_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp142);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          sequence_e0_af = simd_and(byte_e0_adv, byte_af);
          r800_ffff_tmp143 = simd_and(r800_ffff_tmp72, r800_ffff_tmp37);
          r800_ffff_tmp144 = simd_and(tmp70, r800_ffff_tmp30);
          r800_ffff_tmp145 = simd_or(r800_ffff_tmp143, r800_ffff_tmp144);
          r800_ffff_tmp146 = simd_or(r800_ffff_tmp145, byte_range_8e_8f);
          r800_ffff_tmp147 = simd_andc(tmp57, basis_bits.bit_4);
          r800_ffff_tmp148 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp58), simd_andc(tmp5, basis_bits.bit_5));
          r800_ffff_tmp149 = simd_and(r800_ffff_tmp147, r800_ffff_tmp148);
          r800_ffff_tmp150 = simd_or(r800_ffff_tmp146, r800_ffff_tmp149);
          r800_ffff_tmp151 = simd_and(basis_bits.bit_3, basis_bits.bit_4);
          r800_ffff_tmp152 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp87), simd_andc(r800_ffff_tmp151, basis_bits.bit_2));
          r800_ffff_tmp153 = simd_and(byte_range_80_bf, r800_ffff_tmp152);
          r800_ffff_tmp154 = simd_or(r800_ffff_tmp150, r800_ffff_tmp153);
          r800_ffff_tmp155 = simd_and(byte_range_b8_bf, tmp79);
          cc_range_bc3_bfb_3 = simd_or(r800_ffff_tmp154, r800_ffff_tmp155);
          carryQ.cq[82] = carryout2carry(pablo_blk_Advance(sequence_e0_af, carryQ.get_carry_in(82), sequence_e0_af_adv));
          r800_ffff_tmp156 = simd_and(sequence_e0_af_adv, cc_range_bc3_bfb_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp156);
          sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
          sequence_e0_b0 = simd_and(byte_e0_adv, byte_b0);
          r800_ffff_tmp157 = simd_andc(r800_ffff_tmp22, tmp71);
          r800_ffff_tmp158 = simd_andc(tmp70, r800_ffff_tmp157);
          r800_ffff_tmp159 = simd_or(r800_ffff_tmp158, r800_ffff_tmp124);
          r800_ffff_tmp160 = simd_or(r800_ffff_tmp159, byte_a9);
          r800_ffff_tmp161 = simd_or(r800_ffff_tmp160, r800_ffff_tmp65);
          r800_ffff_tmp162 = simd_not(tmp5);
          r800_ffff_tmp163 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp162), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp164 = simd_and(byte_range_b8_bf, r800_ffff_tmp163);
          cc_range_c00_c3a_3 = simd_or(r800_ffff_tmp161, r800_ffff_tmp164);
          carryQ.cq[83] = carryout2carry(pablo_blk_Advance(sequence_e0_b0, carryQ.get_carry_in(83), sequence_e0_b0_adv));
          r800_ffff_tmp165 = simd_and(sequence_e0_b0_adv, cc_range_c00_c3a_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp165);
          byte_b1 = simd_and(tmp61, tmp11);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          sequence_e0_b1 = simd_and(byte_e0_adv, byte_b1);
          r800_ffff_tmp166 = simd_and(tmp10, r800_ffff_tmp43);
          r800_ffff_tmp167 = simd_and(tmp70, r800_ffff_tmp166);
          r800_ffff_tmp168 = simd_not(tmp110);
          r800_ffff_tmp169 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp168), simd_andc(tmp20, basis_bits.bit_3));
          r800_ffff_tmp170 = simd_and(r800_ffff_tmp11, r800_ffff_tmp169);
          r800_ffff_tmp171 = simd_or(r800_ffff_tmp167, r800_ffff_tmp170);
          r800_ffff_tmp172 = simd_or(r800_ffff_tmp171, byte_97);
          r800_ffff_tmp173 = simd_and(tmp57, basis_bits.bit_4);
          r800_ffff_tmp174 = simd_and(r800_ffff_tmp173, tmp27);
          r800_ffff_tmp175 = simd_or(r800_ffff_tmp172, r800_ffff_tmp174);
          r800_ffff_tmp176 = simd_or(r800_ffff_tmp175, r800_ffff_tmp53);
          cc_range_c45_c70_3 = simd_or(r800_ffff_tmp176, r800_ffff_tmp35);
          carryQ.cq[84] = carryout2carry(pablo_blk_Advance(sequence_e0_b1, carryQ.get_carry_in(84), sequence_e0_b1_adv));
          r800_ffff_tmp177 = simd_and(sequence_e0_b1_adv, cc_range_c45_c70_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp177);
          byte_b2 = simd_and(tmp61, tmp69);
          sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
          sequence_e0_b2 = simd_and(byte_e0_adv, byte_b2);
          r800_ffff_tmp178 = simd_andc(r800_ffff_tmp120, tmp71);
          r800_ffff_tmp179 = simd_andc(tmp70, r800_ffff_tmp178);
          r800_ffff_tmp180 = simd_or(r800_ffff_tmp179, r800_ffff_tmp124);
          r800_ffff_tmp181 = simd_or(r800_ffff_tmp180, byte_a9);
          r800_ffff_tmp182 = simd_or(r800_ffff_tmp181, r800_ffff_tmp65);
          cc_range_c80_cba_3 = simd_or(r800_ffff_tmp182, r800_ffff_tmp41);
          carryQ.cq[85] = carryout2carry(pablo_blk_Advance(sequence_e0_b2, carryQ.get_carry_in(85), sequence_e0_b2_adv));
          r800_ffff_tmp183 = simd_and(sequence_e0_b2_adv, cc_range_c80_cba_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp183);
          byte_b3 = simd_and(tmp61, tmp26);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          sequence_e0_b3 = simd_and(byte_e0_adv, byte_b3);
          r800_ffff_tmp184 = simd_not(tmp98);
          r800_ffff_tmp185 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp184), simd_andc(tmp104, basis_bits.bit_4));
          r800_ffff_tmp186 = simd_and(tmp57, r800_ffff_tmp185);
          r800_ffff_tmp187 = simd_or(r800_ffff_tmp171, r800_ffff_tmp186);
          r800_ffff_tmp188 = simd_or(r800_ffff_tmp187, byte_9f);
          r800_ffff_tmp189 = simd_or(r800_ffff_tmp188, r800_ffff_tmp53);
          r800_ffff_tmp190 = simd_or(r800_ffff_tmp189, byte_b0);
          r800_ffff_tmp191 = simd_and(tmp61, tmp80);
          cc_range_cc5_cf3_3 = simd_or(r800_ffff_tmp190, r800_ffff_tmp191);
          carryQ.cq[86] = carryout2carry(pablo_blk_Advance(sequence_e0_b3, carryQ.get_carry_in(86), sequence_e0_b3_adv));
          r800_ffff_tmp192 = simd_and(sequence_e0_b3_adv, cc_range_cc5_cf3_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp192);
          byte_b4 = simd_and(tmp61, tmp40);
          sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
          sequence_e0_b4 = simd_and(byte_e0_adv, byte_b4);
          r800_ffff_tmp193 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp162), simd_andc(tmp25, basis_bits.bit_5));
          r800_ffff_tmp194 = simd_and(byte_range_b8_bf, r800_ffff_tmp193);
          cc_range_d00_d3b_3 = simd_or(r800_ffff_tmp180, r800_ffff_tmp194);
          carryQ.cq[87] = carryout2carry(pablo_blk_Advance(sequence_e0_b4, carryQ.get_carry_in(87), sequence_e0_b4_adv));
          r800_ffff_tmp195 = simd_and(sequence_e0_b4_adv, cc_range_d00_d3b_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp195);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          sequence_e0_b5 = simd_and(byte_e0_adv, byte_b5);
          r800_ffff_tmp196 = simd_or(r800_ffff_tmp167, r800_ffff_tmp48);
          r800_ffff_tmp197 = simd_or(r800_ffff_tmp196, r800_ffff_tmp173);
          r800_ffff_tmp198 = simd_or(r800_ffff_tmp197, r800_ffff_tmp53);
          r800_ffff_tmp199 = simd_and(tmp61, r800_ffff_tmp126);
          cc_range_d45_d76_3 = simd_or(r800_ffff_tmp198, r800_ffff_tmp199);
          carryQ.cq[88] = carryout2carry(pablo_blk_Advance(sequence_e0_b5, carryQ.get_carry_in(88), sequence_e0_b5_adv));
          r800_ffff_tmp200 = simd_and(sequence_e0_b5_adv, cc_range_d45_d76_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp200);
          byte_b6 = simd_and(tmp61, tmp91);
          sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
          sequence_e0_b6 = simd_and(byte_e0_adv, byte_b6);
          r800_ffff_tmp201 = simd_not(tmp27);
          r800_ffff_tmp202 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp201), simd_andc(tmp104, basis_bits.bit_4));
          r800_ffff_tmp203 = simd_and(tmp57, r800_ffff_tmp202);
          r800_ffff_tmp204 = simd_or(r800_ffff_tmp121, r800_ffff_tmp203);
          r800_ffff_tmp205 = simd_or(r800_ffff_tmp204, byte_b2);
          r800_ffff_tmp206 = simd_and(tmp61, tmp67);
          r800_ffff_tmp207 = simd_or(r800_ffff_tmp205, r800_ffff_tmp206);
          r800_ffff_tmp208 = simd_and(tmp61, tmp20);
          cc_range_d80_dbe_3 = simd_or(r800_ffff_tmp207, r800_ffff_tmp208);
          carryQ.cq[89] = carryout2carry(pablo_blk_Advance(sequence_e0_b6, carryQ.get_carry_in(89), sequence_e0_b6_adv));
          r800_ffff_tmp209 = simd_and(sequence_e0_b6_adv, cc_range_d80_dbe_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp209);
          byte_b7 = simd_and(tmp61, tmp46);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          sequence_e0_b7 = simd_and(byte_e0_adv, byte_b7);
          r800_ffff_tmp210 = simd_and(tmp70, r800_ffff_tmp202);
          r800_ffff_tmp211 = simd_or(r800_ffff_tmp210, r800_ffff_tmp60);
          r800_ffff_tmp212 = simd_and(tmp57, tmp41);
          r800_ffff_tmp213 = simd_or(r800_ffff_tmp211, r800_ffff_tmp212);
          r800_ffff_tmp214 = simd_or(r800_ffff_tmp213, byte_97);
          r800_ffff_tmp215 = simd_and(basis_bits.bit_3, tmp17);
          r800_ffff_tmp216 = simd_andc(tmp73, r800_ffff_tmp215);
          r800_ffff_tmp217 = simd_or(r800_ffff_tmp214, r800_ffff_tmp216);
          cc_range_dc7_df5_3 = simd_or(r800_ffff_tmp217, byte_range_b5_bf);
          carryQ.cq[90] = carryout2carry(pablo_blk_Advance(sequence_e0_b7, carryQ.get_carry_in(90), sequence_e0_b7_adv));
          r800_ffff_tmp218 = simd_and(sequence_e0_b7_adv, cc_range_dc7_df5_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp218);
          sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
          sequence_e0_b8 = simd_and(byte_e0_adv, byte_b8);
          r800_ffff_tmp219 = simd_and(byte_range_b8_bf, r800_ffff_tmp59);
          cc_range_e00_e3b_3 = simd_or(byte_80, r800_ffff_tmp219);
          carryQ.cq[91] = carryout2carry(pablo_blk_Advance(sequence_e0_b8, carryQ.get_carry_in(91), sequence_e0_b8_adv));
          r800_ffff_tmp220 = simd_and(sequence_e0_b8_adv, cc_range_e00_e3b_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp220);
          byte_b9 = simd_and(tmp61, r800_ffff_tmp30);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          sequence_e0_b9 = simd_and(byte_e0_adv, byte_b9);
          r800_ffff_tmp221 = simd_and(basis_bits.bit_3, tmp19);
          r800_ffff_tmp222 = simd_or(basis_bits.bit_2, r800_ffff_tmp221);
          byte_range_9c_bf = simd_and(byte_range_80_bf, r800_ffff_tmp222);
          carryQ.cq[92] = carryout2carry(pablo_blk_Advance(sequence_e0_b9, carryQ.get_carry_in(92), sequence_e0_b9_adv));
          r800_ffff_tmp223 = simd_and(sequence_e0_b9_adv, byte_range_9c_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp223);
          byte_ba = simd_and(tmp61, tmp60);
          sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
          sequence_e0_ba = simd_and(byte_e0_adv, byte_ba);
          r800_ffff_tmp224 = simd_andc(tmp6, tmp26);
          r800_ffff_tmp225 = simd_andc(tmp70, r800_ffff_tmp224);
          r800_ffff_tmp226 = simd_and(tmp70, tmp39);
          r800_ffff_tmp227 = simd_and(r800_ffff_tmp226, tmp117);
          r800_ffff_tmp228 = simd_or(r800_ffff_tmp225, r800_ffff_tmp227);
          r800_ffff_tmp229 = simd_or(r800_ffff_tmp228, r800_ffff_tmp144);
          r800_ffff_tmp230 = simd_and(r800_ffff_tmp57, r800_ffff_tmp193);
          r800_ffff_tmp231 = simd_or(r800_ffff_tmp229, r800_ffff_tmp230);
          r800_ffff_tmp232 = simd_not(tmp4);
          r800_ffff_tmp233 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp232), simd_andc(tmp20, basis_bits.bit_3));
          r800_ffff_tmp234 = simd_and(r800_ffff_tmp11, r800_ffff_tmp233);
          r800_ffff_tmp235 = simd_or(r800_ffff_tmp231, r800_ffff_tmp234);
          r800_ffff_tmp236 = simd_and(tmp57, r800_ffff_tmp20);
          r800_ffff_tmp237 = simd_or(r800_ffff_tmp235, r800_ffff_tmp236);
          r800_ffff_tmp238 = simd_or(r800_ffff_tmp237, byte_a0);
          r800_ffff_tmp239 = simd_and(tmp78, tmp40);
          r800_ffff_tmp240 = simd_or(r800_ffff_tmp238, r800_ffff_tmp239);
          r800_ffff_tmp241 = simd_or(r800_ffff_tmp240, byte_a6);
          r800_ffff_tmp242 = simd_andc(tmp58, basis_bits.bit_6);
          r800_ffff_tmp243 = simd_and(tmp78, r800_ffff_tmp242);
          r800_ffff_tmp244 = simd_or(r800_ffff_tmp241, r800_ffff_tmp243);
          r800_ffff_tmp245 = simd_or(r800_ffff_tmp244, byte_ac);
          r800_ffff_tmp246 = simd_or(r800_ffff_tmp245, byte_ba);
          cc_range_e80_ebe_3 = simd_or(r800_ffff_tmp246, r800_ffff_tmp208);
          carryQ.cq[93] = carryout2carry(pablo_blk_Advance(sequence_e0_ba, carryQ.get_carry_in(93), sequence_e0_ba_adv));
          r800_ffff_tmp247 = simd_and(sequence_e0_ba_adv, cc_range_e80_ebe_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp247);
          byte_bb = simd_and(tmp61, tmp63);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          sequence_e0_bb = simd_and(byte_e0_adv, byte_bb);
          r800_ffff_tmp248 = simd_and(tmp39, basis_bits.bit_7);
          r800_ffff_tmp249 = simd_or(r800_ffff_tmp248, tmp20);
          r800_ffff_tmp250 = simd_and(tmp70, r800_ffff_tmp249);
          r800_ffff_tmp251 = simd_and(tmp57, r800_ffff_tmp40);
          r800_ffff_tmp252 = simd_or(r800_ffff_tmp250, r800_ffff_tmp251);
          cc_range_ec5_ee0_3 = simd_or(r800_ffff_tmp252, tmp73);
          carryQ.cq[94] = carryout2carry(pablo_blk_Advance(sequence_e0_bb, carryQ.get_carry_in(94), sequence_e0_bb_adv));
          r800_ffff_tmp253 = simd_and(sequence_e0_bb_adv, cc_range_ec5_ee0_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp253);
          byte_bd = simd_and(tmp61, tmp71);
          sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
          sequence_e0_bd = simd_and(byte_e0_adv, byte_bd);
          r800_ffff_tmp254 = simd_and(tmp70, r800_ffff_tmp20);
          r800_ffff_tmp255 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp77), simd_andc(r800_ffff_tmp13, basis_bits.bit_3));
          r800_ffff_tmp256 = simd_and(tmp73, r800_ffff_tmp255);
          cc_range_f48_f6d_3 = simd_or(r800_ffff_tmp254, r800_ffff_tmp256);
          carryQ.cq[95] = carryout2carry(pablo_blk_Advance(sequence_e0_bd, carryQ.get_carry_in(95), sequence_e0_bd_adv));
          r800_ffff_tmp257 = simd_and(sequence_e0_bd_adv, cc_range_f48_f6d_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp257);
          byte_be = simd_and(tmp61, tmp101);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          sequence_e0_be = simd_and(byte_e0_adv, byte_be);
          cc_range_f98_fbd_3 = simd_or(r800_ffff_tmp236, byte_bd);
          carryQ.cq[96] = carryout2carry(pablo_blk_Advance(sequence_e0_be, carryQ.get_carry_in(96), sequence_e0_be_adv));
          r800_ffff_tmp258 = simd_and(sequence_e0_be_adv, cc_range_f98_fbd_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp258);
          byte_bf = simd_and(tmp61, tmp74);
          sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
          sequence_e0_bf = simd_and(byte_e0_adv, byte_bf);
          r800_ffff_tmp259 = simd_and(basis_bits.bit_4, tmp79);
          r800_ffff_tmp260 = simd_and(basis_bits.bit_3, r800_ffff_tmp259);
          r800_ffff_tmp261 = simd_or(basis_bits.bit_2, r800_ffff_tmp260);
          r800_ffff_tmp262 = simd_and(byte_range_80_bf, r800_ffff_tmp261);
          cc_range_fcd_fdb_3 = simd_or(byte_8d, r800_ffff_tmp262);
          carryQ.cq[97] = carryout2carry(pablo_blk_Advance(sequence_e0_bf, carryQ.get_carry_in(97), sequence_e0_bf_adv));
          r800_ffff_tmp263 = simd_and(sequence_e0_bf_adv, cc_range_fcd_fdb_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp263);
          byte_e1 = simd_and(byte_range_e0_ef, tmp11);
          carryQ.cq[98] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(98), r800_ffff_tmp264));
          sequence_e1_83 = simd_and(r800_ffff_tmp264, byte_83);
          carryQ.cq[99] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(99), byte_e1_adv));
          sequence_e1_83 = simd_and(byte_e1_adv, byte_83);
          r800_ffff_tmp265 = simd_and(tmp70, tmp91);
          r800_ffff_tmp266 = simd_andc(r800_ffff_tmp57, tmp109);
          r800_ffff_tmp267 = simd_or(r800_ffff_tmp265, r800_ffff_tmp266);
          cc_range_10c6_10ce_3 = simd_or(r800_ffff_tmp267, byte_range_8e_8f);
          carryQ.cq[100] = carryout2carry(pablo_blk_Advance(sequence_e1_83, carryQ.get_carry_in(100), sequence_e1_83_adv));
          r800_ffff_tmp268 = simd_and(sequence_e1_83_adv, cc_range_10c6_10ce_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp268);
          byte_89 = simd_and(tmp70, r800_ffff_tmp30);
          sequence_e1_89 = simd_and(byte_e1_adv, byte_89);
          sequence_e1_89 = simd_and(byte_e1_adv, byte_89);
          r800_ffff_tmp269 = simd_or(r800_ffff_tmp30, tmp20);
          r800_ffff_tmp270 = simd_and(tmp70, r800_ffff_tmp269);
          r800_ffff_tmp271 = simd_or(r800_ffff_tmp270, byte_97);
          r800_ffff_tmp272 = simd_and(tmp57, r800_ffff_tmp30);
          r800_ffff_tmp273 = simd_or(r800_ffff_tmp271, r800_ffff_tmp272);
          r800_ffff_tmp274 = simd_and(tmp57, tmp20);
          cc_range_1249_125e_3 = simd_or(r800_ffff_tmp273, r800_ffff_tmp274);
          carryQ.cq[101] = carryout2carry(pablo_blk_Advance(sequence_e1_89, carryQ.get_carry_in(101), sequence_e1_89_adv));
          r800_ffff_tmp275 = simd_and(sequence_e1_89_adv, cc_range_1249_125e_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp275);
          byte_8a = simd_and(tmp70, tmp60);
          sequence_e1_8a = simd_and(byte_e1_adv, byte_8a);
          sequence_e1_8a = simd_and(byte_e1_adv, byte_8a);
          r800_ffff_tmp276 = simd_or(r800_ffff_tmp270, byte_b1);
          r800_ffff_tmp277 = simd_and(tmp39, basis_bits.bit_6);
          r800_ffff_tmp278 = simd_and(tmp61, r800_ffff_tmp277);
          r800_ffff_tmp279 = simd_or(r800_ffff_tmp276, r800_ffff_tmp278);
          cc_range_1289_12bf_3 = simd_or(r800_ffff_tmp279, byte_bf);
          carryQ.cq[102] = carryout2carry(pablo_blk_Advance(sequence_e1_8a, carryQ.get_carry_in(102), sequence_e1_8a_adv));
          r800_ffff_tmp280 = simd_and(sequence_e1_8a_adv, cc_range_1289_12bf_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp280);
          byte_8b = simd_and(tmp70, tmp63);
          sequence_e1_8b = simd_and(byte_e1_adv, byte_8b);
          sequence_e1_8b = simd_and(byte_e1_adv, byte_8b);
          r800_ffff_tmp281 = simd_or(tmp11, r800_ffff_tmp277);
          r800_ffff_tmp282 = simd_and(tmp70, r800_ffff_tmp281);
          cc_range_12c1_12d7_3 = simd_or(r800_ffff_tmp282, byte_97);
          carryQ.cq[103] = carryout2carry(pablo_blk_Advance(sequence_e1_8b, carryQ.get_carry_in(103), sequence_e1_8b_adv));
          r800_ffff_tmp283 = simd_and(sequence_e1_8b_adv, cc_range_12c1_12d7_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp283);
          byte_8c = simd_and(tmp70, tmp67);
          sequence_e1_8c = simd_and(byte_e1_adv, byte_8c);
          sequence_e1_8c = simd_and(byte_e1_adv, byte_8c);
          cc_range_1311_1316_3 = simd_and(tmp57, r800_ffff_tmp281);
          carryQ.cq[104] = carryout2carry(pablo_blk_Advance(sequence_e1_8c, carryQ.get_carry_in(104), sequence_e1_8c_adv));
          r800_ffff_tmp284 = simd_and(sequence_e1_8c_adv, cc_range_1311_1316_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp284);
          sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
          sequence_e1_8d = simd_and(byte_e1_adv, byte_8d);
          r800_ffff_tmp285 = simd_and(r800_ffff_tmp173, r800_ffff_tmp193);
          r800_ffff_tmp286 = simd_and(r800_ffff_tmp55, tmp5);
          cc_range_135b_137d_3 = simd_or(r800_ffff_tmp285, r800_ffff_tmp286);
          carryQ.cq[105] = carryout2carry(pablo_blk_Advance(sequence_e1_8d, carryQ.get_carry_in(105), sequence_e1_8d_adv));
          r800_ffff_tmp287 = simd_and(sequence_e1_8d_adv, cc_range_135b_137d_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp287);
          byte_8e = simd_and(tmp70, tmp101);
          sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
          sequence_e1_8e = simd_and(byte_e1_adv, byte_8e);
          byte_range_9a_9f = simd_and(r800_ffff_tmp173, tmp27);
          carryQ.cq[106] = carryout2carry(pablo_blk_Advance(sequence_e1_8e, carryQ.get_carry_in(106), sequence_e1_8e_adv));
          r800_ffff_tmp288 = simd_and(sequence_e1_8e_adv, byte_range_9a_9f);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp288);
          byte_8f = simd_and(tmp70, tmp74);
          sequence_e1_8f = simd_and(byte_e1_adv, byte_8f);
          sequence_e1_8f = simd_and(byte_e1_adv, byte_8f);
          carryQ.cq[107] = carryout2carry(pablo_blk_Advance(sequence_e1_8f, carryQ.get_carry_in(107), sequence_e1_8f_adv));
          r800_ffff_tmp289 = simd_and(sequence_e1_8f_adv, byte_range_b5_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp289);
          sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
          sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
          r800_ffff_tmp290 = simd_and(tmp57, tmp19);
          byte_range_9d_9f = simd_and(r800_ffff_tmp290, tmp5);
          carryQ.cq[108] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(108), sequence_e1_9a_adv));
          r800_ffff_tmp291 = simd_and(sequence_e1_9a_adv, byte_range_9d_9f);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp291);
          sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
          sequence_e1_9b = simd_and(byte_e1_adv, byte_9b);
          byte_range_b1_bf = simd_and(tmp61, r800_ffff_tmp102);
          carryQ.cq[109] = carryout2carry(pablo_blk_Advance(sequence_e1_9b, carryQ.get_carry_in(109), sequence_e1_9b_adv));
          r800_ffff_tmp292 = simd_and(sequence_e1_9b_adv, byte_range_b1_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp292);
          sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
          sequence_e1_9c = simd_and(byte_e1_adv, byte_9c);
          r800_ffff_tmp293 = simd_and(tmp57, tmp110);
          r800_ffff_tmp294 = simd_or(byte_8d, r800_ffff_tmp293);
          r800_ffff_tmp295 = simd_and(tmp61, tmp105);
          cc_range_170d_1737_3 = simd_or(r800_ffff_tmp294, r800_ffff_tmp295);
          carryQ.cq[110] = carryout2carry(pablo_blk_Advance(sequence_e1_9c, carryQ.get_carry_in(110), sequence_e1_9c_adv));
          r800_ffff_tmp296 = simd_and(sequence_e1_9c_adv, cc_range_170d_1737_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp296);
          sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
          sequence_e1_9d = simd_and(byte_e1_adv, byte_9d);
          r800_ffff_tmp297 = simd_and(tmp57, tmp4);
          r800_ffff_tmp298 = simd_or(r800_ffff_tmp297, byte_ad);
          r800_ffff_tmp299 = simd_or(r800_ffff_tmp298, byte_b1);
          r800_ffff_tmp300 = simd_and(tmp61, tmp4);
          cc_range_1754_1774_3 = simd_or(r800_ffff_tmp299, r800_ffff_tmp300);
          carryQ.cq[111] = carryout2carry(pablo_blk_Advance(sequence_e1_9d, carryQ.get_carry_in(111), sequence_e1_9d_adv));
          r800_ffff_tmp301 = simd_and(sequence_e1_9d_adv, cc_range_1754_1774_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp301);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          sequence_e1_9f = simd_and(byte_e1_adv, byte_9f);
          r800_ffff_tmp302 = simd_and(r800_ffff_tmp137, tmp27);
          r800_ffff_tmp303 = simd_or(r800_ffff_tmp274, r800_ffff_tmp302);
          r800_ffff_tmp304 = simd_and(byte_range_b8_bf, tmp27);
          cc_range_17de_17fa_3 = simd_or(r800_ffff_tmp303, r800_ffff_tmp304);
          carryQ.cq[112] = carryout2carry(pablo_blk_Advance(sequence_e1_9f, carryQ.get_carry_in(112), sequence_e1_9f_adv));
          r800_ffff_tmp305 = simd_and(sequence_e1_9f_adv, cc_range_17de_17fa_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp305);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          cc_range_180f_181a_3 = simd_or(byte_8f, byte_range_9a_9f);
          carryQ.cq[113] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(113), sequence_e1_a0_adv));
          r800_ffff_tmp306 = simd_and(sequence_e1_a0_adv, cc_range_180f_181a_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp306);
          sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
          sequence_e1_a1 = simd_and(byte_e1_adv, byte_a1);
          carryQ.cq[114] = carryout2carry(pablo_blk_Advance(sequence_e1_a1, carryQ.get_carry_in(114), sequence_e1_a1_adv));
          r800_ffff_tmp307 = simd_and(sequence_e1_a1_adv, byte_range_b8_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp307);
          sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
          sequence_e1_a2 = simd_and(byte_e1_adv, byte_a2);
          byte_range_ab_af = simd_and(r800_ffff_tmp137, tmp79);
          carryQ.cq[115] = carryout2carry(pablo_blk_Advance(sequence_e1_a2, carryQ.get_carry_in(115), sequence_e1_a2_adv));
          r800_ffff_tmp308 = simd_and(sequence_e1_a2_adv, byte_range_ab_af);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp308);
          sequence_e1_a3 = simd_and(byte_e1_adv, byte_a3);
          sequence_e1_a3 = simd_and(byte_e1_adv, byte_a3);
          carryQ.cq[116] = carryout2carry(pablo_blk_Advance(sequence_e1_a3, carryQ.get_carry_in(116), sequence_e1_a3_adv));
          r800_ffff_tmp309 = simd_and(sequence_e1_a3_adv, byte_range_b6_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp309);
          byte_a4 = simd_and(tmp78, tmp40);
          sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
          sequence_e1_a4 = simd_and(byte_e1_adv, byte_a4);
          r800_ffff_tmp310 = simd_or(byte_range_9d_9f, byte_range_ac_af);
          cc_range_191d_193c_3 = simd_or(r800_ffff_tmp310, r800_ffff_tmp55);
          carryQ.cq[117] = carryout2carry(pablo_blk_Advance(sequence_e1_a4, carryQ.get_carry_in(117), sequence_e1_a4_adv));
          r800_ffff_tmp311 = simd_and(sequence_e1_a4_adv, cc_range_191d_193c_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp311);
          sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
          sequence_e1_a5 = simd_and(byte_e1_adv, byte_a5);
          r800_ffff_tmp312 = simd_andc(tmp70, tmp4);
          r800_ffff_tmp313 = simd_and(r800_ffff_tmp312, tmp5);
          r800_ffff_tmp314 = simd_or(r800_ffff_tmp313, r800_ffff_tmp2);
          cc_range_1941_1975_3 = simd_or(r800_ffff_tmp314, byte_range_b5_bf);
          carryQ.cq[118] = carryout2carry(pablo_blk_Advance(sequence_e1_a5, carryQ.get_carry_in(118), sequence_e1_a5_adv));
          r800_ffff_tmp315 = simd_and(sequence_e1_a5_adv, cc_range_1941_1975_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp315);
          sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
          sequence_e1_a6 = simd_and(byte_e1_adv, byte_a6);
          carryQ.cq[119] = carryout2carry(pablo_blk_Advance(sequence_e1_a6, carryQ.get_carry_in(119), sequence_e1_a6_adv));
          r800_ffff_tmp316 = simd_and(sequence_e1_a6_adv, byte_range_ac_af);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp316);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          sequence_e1_a7 = simd_and(byte_e1_adv, byte_a7);
          r800_ffff_tmp317 = simd_and(r800_ffff_tmp57, tmp27);
          r800_ffff_tmp318 = simd_and(r800_ffff_tmp173, r800_ffff_tmp37);
          cc_range_19ca_19db_3 = simd_or(r800_ffff_tmp317, r800_ffff_tmp318);
          carryQ.cq[120] = carryout2carry(pablo_blk_Advance(sequence_e1_a7, carryQ.get_carry_in(120), sequence_e1_a7_adv));
          r800_ffff_tmp319 = simd_and(sequence_e1_a7_adv, cc_range_19ca_19db_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp319);
          sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
          sequence_e1_a8 = simd_and(byte_e1_adv, byte_a8);
          byte_range_9c_9d = simd_and(tmp57, r800_ffff_tmp5);
          carryQ.cq[121] = carryout2carry(pablo_blk_Advance(sequence_e1_a8, carryQ.get_carry_in(121), sequence_e1_a8_adv));
          r800_ffff_tmp320 = simd_and(sequence_e1_a8_adv, byte_range_9c_9d);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp320);
          sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
          sequence_e1_a9 = simd_and(byte_e1_adv, byte_a9);
          r800_ffff_tmp321 = simd_and(r800_ffff_tmp55, tmp117);
          cc_range_1a5f_1a7d_3 = simd_or(byte_9f, r800_ffff_tmp321);
          carryQ.cq[122] = carryout2carry(pablo_blk_Advance(sequence_e1_a9, carryQ.get_carry_in(122), sequence_e1_a9_adv));
          r800_ffff_tmp322 = simd_and(sequence_e1_a9_adv, cc_range_1a5f_1a7d_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp322);
          sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
          sequence_e1_aa = simd_and(byte_e1_adv, byte_aa);
          r800_ffff_tmp323 = simd_andc(tmp13, tmp8);
          r800_ffff_tmp324 = simd_andc(byte_range_80_bf, r800_ffff_tmp323);
          r800_ffff_tmp325 = simd_and(basis_bits.bit_4, r800_ffff_tmp324);
          r800_ffff_tmp326 = simd_and(tmp27, r800_ffff_tmp325);
          r800_ffff_tmp327 = simd_or(basis_bits.bit_3, tmp20);
          r800_ffff_tmp328 = simd_and(tmp73, r800_ffff_tmp327);
          cc_range_1a8a_1aae_3 = simd_or(r800_ffff_tmp326, r800_ffff_tmp328);
          carryQ.cq[123] = carryout2carry(pablo_blk_Advance(sequence_e1_aa, carryQ.get_carry_in(123), sequence_e1_aa_adv));
          r800_ffff_tmp329 = simd_and(sequence_e1_aa_adv, cc_range_1a8a_1aae_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp329);
          sequence_e1_ab = simd_and(byte_e1_adv, byte_ab);
          sequence_e1_ab = simd_and(byte_e1_adv, byte_ab);
          carryQ.cq[124] = carryout2carry(pablo_blk_Advance(sequence_e1_ab, carryQ.get_carry_in(124), sequence_e1_ab_adv));
          r800_ffff_tmp330 = simd_and(sequence_e1_ab_adv, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp330);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          sequence_e1_ad = simd_and(byte_e1_adv, byte_ad);
          cc_range_1b4c_1b7d_3 = simd_or(r800_ffff_tmp24, r800_ffff_tmp286);
          carryQ.cq[125] = carryout2carry(pablo_blk_Advance(sequence_e1_ad, carryQ.get_carry_in(125), sequence_e1_ad_adv));
          r800_ffff_tmp331 = simd_and(sequence_e1_ad_adv, cc_range_1b4c_1b7d_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp331);
          sequence_e1_af = simd_and(byte_e1_adv, byte_af);
          sequence_e1_af = simd_and(byte_e1_adv, byte_af);
          r800_ffff_tmp332 = simd_not(basis_bits.bit_5);
          r800_ffff_tmp333 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp332), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          byte_range_b4_bb = simd_and(tmp61, r800_ffff_tmp333);
          carryQ.cq[126] = carryout2carry(pablo_blk_Advance(sequence_e1_af, carryQ.get_carry_in(126), sequence_e1_af_adv));
          r800_ffff_tmp334 = simd_and(sequence_e1_af_adv, byte_range_b4_bb);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp334);
          sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
          sequence_e1_b0 = simd_and(byte_e1_adv, byte_b0);
          r800_ffff_tmp335 = simd_and(tmp61, tmp58);
          byte_range_b8_ba = simd_andc(r800_ffff_tmp335, tmp25);
          carryQ.cq[127] = carryout2carry(pablo_blk_Advance(sequence_e1_b0, carryQ.get_carry_in(127), sequence_e1_b0_adv));
          r800_ffff_tmp336 = simd_and(sequence_e1_b0_adv, byte_range_b8_ba);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp336);
          sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
          sequence_e1_b1 = simd_and(byte_e1_adv, byte_b1);
          byte_range_8a_8c = simd_and(r800_ffff_tmp57, r800_ffff_tmp163);
          carryQ.cq[128] = carryout2carry(pablo_blk_Advance(sequence_e1_b1, carryQ.get_carry_in(128), sequence_e1_b1_adv));
          r800_ffff_tmp337 = simd_and(sequence_e1_b1_adv, byte_range_8a_8c);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp337);
          sequence_e1_b2 = simd_and(byte_e1_adv, byte_b2);
          sequence_e1_b2 = simd_and(byte_e1_adv, byte_b2);
          carryQ.cq[129] = carryout2carry(pablo_blk_Advance(sequence_e1_b2, carryQ.get_carry_in(129), sequence_e1_b2_adv));
          r800_ffff_tmp338 = simd_and(sequence_e1_b2_adv, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp338);
          sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
          sequence_e1_b3 = simd_and(byte_e1_adv, byte_b3);
          cc_range_1cc8_1cf7_3 = simd_or(r800_ffff_tmp57, r800_ffff_tmp295);
          carryQ.cq[130] = carryout2carry(pablo_blk_Advance(sequence_e1_b3, carryQ.get_carry_in(130), sequence_e1_b3_adv));
          r800_ffff_tmp339 = simd_and(sequence_e1_b3_adv, cc_range_1cc8_1cf7_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp339);
          sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
          sequence_e1_b7 = simd_and(byte_e1_adv, byte_b7);
          r800_ffff_tmp340 = simd_not(tmp19);
          r800_ffff_tmp341 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp340), simd_andc(tmp105, basis_bits.bit_3));
          byte_range_a7_bb = simd_and(tmp73, r800_ffff_tmp341);
          carryQ.cq[131] = carryout2carry(pablo_blk_Advance(sequence_e1_b7, carryQ.get_carry_in(131), sequence_e1_b7_adv));
          r800_ffff_tmp342 = simd_and(sequence_e1_b7_adv, byte_range_a7_bb);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp342);
          byte_bc = simd_and(tmp61, tmp67);
          sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
          sequence_e1_bc = simd_and(byte_e1_adv, byte_bc);
          r800_ffff_tmp343 = simd_and(basis_bits.bit_6, basis_bits.bit_5);
          cc_range_1f16_1f1e_3 = simd_and(tmp57, r800_ffff_tmp343);
          carryQ.cq[132] = carryout2carry(pablo_blk_Advance(sequence_e1_bc, carryQ.get_carry_in(132), sequence_e1_bc_adv));
          r800_ffff_tmp344 = simd_and(sequence_e1_bc_adv, cc_range_1f16_1f1e_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp344);
          sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
          sequence_e1_bd = simd_and(byte_e1_adv, byte_bd);
          r800_ffff_tmp345 = simd_and(tmp70, r800_ffff_tmp343);
          r800_ffff_tmp346 = simd_or(r800_ffff_tmp345, r800_ffff_tmp236);
          r800_ffff_tmp347 = simd_or(r800_ffff_tmp346, byte_9a);
          r800_ffff_tmp348 = simd_or(r800_ffff_tmp347, byte_9c);
          r800_ffff_tmp349 = simd_or(r800_ffff_tmp348, byte_9e);
          cc_range_1f46_1f7e_3 = simd_or(r800_ffff_tmp349, r800_ffff_tmp208);
          carryQ.cq[133] = carryout2carry(pablo_blk_Advance(sequence_e1_bd, carryQ.get_carry_in(133), sequence_e1_bd_adv));
          r800_ffff_tmp350 = simd_and(sequence_e1_bd_adv, cc_range_1f46_1f7e_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp350);
          sequence_e1_be = simd_and(byte_e1_adv, byte_be);
          sequence_e1_be = simd_and(byte_e1_adv, byte_be);
          carryQ.cq[134] = carryout2carry(pablo_blk_Advance(sequence_e1_be, carryQ.get_carry_in(134), sequence_e1_be_adv));
          r800_ffff_tmp351 = simd_and(sequence_e1_be_adv, byte_b5);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp351);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          sequence_e1_bf = simd_and(byte_e1_adv, byte_bf);
          r800_ffff_tmp352 = simd_and(tmp70, tmp41);
          r800_ffff_tmp353 = simd_or(r800_ffff_tmp352, byte_range_94_95);
          r800_ffff_tmp354 = simd_or(r800_ffff_tmp353, byte_9c);
          r800_ffff_tmp355 = simd_andc(tmp61, tmp17);
          r800_ffff_tmp356 = simd_or(r800_ffff_tmp354, r800_ffff_tmp355);
          r800_ffff_tmp357 = simd_and(tmp61, tmp41);
          r800_ffff_tmp358 = simd_or(r800_ffff_tmp356, r800_ffff_tmp357);
          cc_range_1fc5_1fff_3 = simd_or(r800_ffff_tmp358, byte_bf);
          carryQ.cq[135] = carryout2carry(pablo_blk_Advance(sequence_e1_bf, carryQ.get_carry_in(135), sequence_e1_bf_adv));
          r800_ffff_tmp359 = simd_and(sequence_e1_bf_adv, cc_range_1fc5_1fff_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp359);
          byte_e2 = simd_and(byte_range_e0_ef, tmp69);
          carryQ.cq[136] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(136), r800_ffff_tmp360));
          sequence_e2_81 = simd_and(r800_ffff_tmp360, byte_81);
          carryQ.cq[137] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(137), byte_e2_adv));
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          r800_ffff_tmp361 = simd_andc(basis_bits.bit_6, tmp4);
          r800_ffff_tmp362 = simd_and(tmp61, r800_ffff_tmp361);
          cc_range_2065_2072_3 = simd_or(byte_a5, r800_ffff_tmp362);
          carryQ.cq[138] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(138), sequence_e2_81_adv));
          r800_ffff_tmp363 = simd_and(sequence_e2_81_adv, cc_range_2065_2072_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp363);
          byte_82 = simd_and(tmp70, tmp69);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          sequence_e2_82 = simd_and(byte_e2_adv, byte_82);
          r800_ffff_tmp364 = simd_or(byte_8f, byte_range_9d_9f);
          cc_range_208f_20bb_3 = simd_or(r800_ffff_tmp364, r800_ffff_tmp155);
          carryQ.cq[139] = carryout2carry(pablo_blk_Advance(sequence_e2_82, carryQ.get_carry_in(139), sequence_e2_82_adv));
          r800_ffff_tmp365 = simd_and(sequence_e2_82_adv, cc_range_208f_20bb_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp365);
          sequence_e2_83 = simd_and(byte_e2_adv, byte_83);
          sequence_e2_83 = simd_and(byte_e2_adv, byte_83);
          cc_range_20c0_20f1_3 = simd_or(tmp70, byte_range_b1_bf);
          carryQ.cq[140] = carryout2carry(pablo_blk_Advance(sequence_e2_83, carryQ.get_carry_in(140), sequence_e2_83_adv));
          r800_ffff_tmp366 = simd_and(sequence_e2_83_adv, cc_range_20c0_20f1_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp366);
          byte_86 = simd_and(tmp70, tmp91);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          sequence_e2_86 = simd_and(byte_e2_adv, byte_86);
          byte_range_8a_8f = simd_and(r800_ffff_tmp57, tmp27);
          carryQ.cq[141] = carryout2carry(pablo_blk_Advance(sequence_e2_86, carryQ.get_carry_in(141), sequence_e2_86_adv));
          r800_ffff_tmp367 = simd_and(sequence_e2_86_adv, byte_range_8a_8f);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp367);
          sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
          sequence_e2_8f = simd_and(byte_e2_adv, byte_8f);
          byte_range_b4_bf = simd_and(tmp61, tmp4);
          carryQ.cq[142] = carryout2carry(pablo_blk_Advance(sequence_e2_8f, carryQ.get_carry_in(142), sequence_e2_8f_adv));
          r800_ffff_tmp368 = simd_and(sequence_e2_8f_adv, byte_range_b4_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp368);
          sequence_e2_90 = simd_and(byte_e2_adv, byte_90);
          sequence_e2_90 = simd_and(byte_e2_adv, byte_90);
          r800_ffff_tmp369 = simd_or(basis_bits.bit_3, tmp105);
          byte_range_a7_bf = simd_and(tmp73, r800_ffff_tmp369);
          carryQ.cq[143] = carryout2carry(pablo_blk_Advance(sequence_e2_90, carryQ.get_carry_in(143), sequence_e2_90_adv));
          r800_ffff_tmp370 = simd_and(sequence_e2_90_adv, byte_range_a7_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp370);
          sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
          sequence_e2_91 = simd_and(byte_e2_adv, byte_91);
          r800_ffff_tmp371 = simd_or(basis_bits.bit_3, r800_ffff_tmp259);
          byte_range_8b_9f = simd_and(r800_ffff_tmp11, r800_ffff_tmp371);
          carryQ.cq[144] = carryout2carry(pablo_blk_Advance(sequence_e2_91, carryQ.get_carry_in(144), sequence_e2_91_adv));
          r800_ffff_tmp372 = simd_and(sequence_e2_91_adv, byte_range_8b_9f);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp372);
          sequence_e2_9c = simd_and(byte_e2_adv, byte_9c);
          sequence_e2_9c = simd_and(byte_e2_adv, byte_9c);
          carryQ.cq[145] = carryout2carry(pablo_blk_Advance(sequence_e2_9c, carryQ.get_carry_in(145), sequence_e2_9c_adv));
          r800_ffff_tmp373 = simd_and(sequence_e2_9c_adv, byte_80);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp373);
          sequence_e2_ad = simd_and(byte_e2_adv, byte_ad);
          sequence_e2_ad = simd_and(byte_e2_adv, byte_ad);
          r800_ffff_tmp374 = simd_and(r800_ffff_tmp24, tmp5);
          r800_ffff_tmp375 = simd_and(byte_range_80_bf, tmp51);
          cc_range_2b4d_2b5a_3 = simd_or(r800_ffff_tmp374, r800_ffff_tmp375);
          carryQ.cq[146] = carryout2carry(pablo_blk_Advance(sequence_e2_ad, carryQ.get_carry_in(146), sequence_e2_ad_adv));
          r800_ffff_tmp376 = simd_and(sequence_e2_ad_adv, cc_range_2b4d_2b5a_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp376);
          byte_range_ae_af = simd_and(tmp78, tmp20);
          byte_e2_byte_range_ae_af = simd_and(byte_e2_adv, byte_range_ae_af);
          carryQ.cq[147] = carryout2carry(pablo_blk_Advance(byte_e2_byte_range_ae_af, carryQ.get_carry_in(147), r800_ffff_tmp377));
          byte_e2_byte_range_ae_af_sfx = simd_and(r800_ffff_tmp377, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, byte_e2_byte_range_ae_af_sfx);
          sequence_e2_b0 = simd_and(byte_e2_adv, byte_b0);
          carryQ.cq[148] = carryout2carry(pablo_blk_Advance(sequence_e2_b0, carryQ.get_carry_in(148), r800_ffff_tmp378));
          sequence_e2_b0_af = simd_and(r800_ffff_tmp378, byte_af);
          sequence_e2_b1 = simd_and(byte_e2_adv, byte_b1);
          carryQ.cq[149] = carryout2carry(pablo_blk_Advance(sequence_e2_b1, carryQ.get_carry_in(149), r800_ffff_tmp379));
          sequence_e2_b1_9f = simd_and(r800_ffff_tmp379, byte_9f);
          sequence_e2_b3 = simd_and(byte_e2_adv, byte_b3);
          r800_ffff_tmp380 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp81), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          byte_range_b4_b8 = simd_and(tmp61, r800_ffff_tmp380);
          carryQ.cq[150] = carryout2carry(pablo_blk_Advance(sequence_e2_b3, carryQ.get_carry_in(150), r800_ffff_tmp381));
          sequence_e2_b3_byte_range_b4_b8 = simd_and(r800_ffff_tmp381, byte_range_b4_b8);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_e2_b3_byte_range_b4_b8);
          sequence_e2_b4 = simd_and(byte_e2_adv, byte_b4);
          carryQ.cq[151] = carryout2carry(pablo_blk_Advance(sequence_e2_b4, carryQ.get_carry_in(151), r800_ffff_tmp382));
          sequence_e2_b4_a6 = simd_and(r800_ffff_tmp382, byte_a6);
          sequence_e2_b5 = simd_and(byte_e2_adv, byte_b5);
          byte_range_a8_ae = simd_andc(r800_ffff_tmp137, tmp104);
          carryQ.cq[152] = carryout2carry(pablo_blk_Advance(sequence_e2_b5, carryQ.get_carry_in(152), r800_ffff_tmp383));
          sequence_e2_b5_byte_range_a8_ae = simd_and(r800_ffff_tmp383, byte_range_a8_ae);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_e2_b5_byte_range_a8_ae);
          sequence_e2_b6 = simd_and(byte_e2_adv, byte_b6);
          byte_range_97_9f = simd_and(tmp57, tmp105);
          carryQ.cq[153] = carryout2carry(pablo_blk_Advance(sequence_e2_b6, carryQ.get_carry_in(153), r800_ffff_tmp384));
          sequence_e2_b6_byte_range_97_9f = simd_and(r800_ffff_tmp384, byte_range_97_9f);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_e2_b6_byte_range_97_9f);
          sequence_e2_b7 = simd_and(byte_e2_adv, byte_b7);
          carryQ.cq[154] = carryout2carry(pablo_blk_Advance(sequence_e2_b7, carryQ.get_carry_in(154), r800_ffff_tmp385));
          sequence_e2_b7_87 = simd_and(r800_ffff_tmp385, byte_87);
          sequence_e2_b8 = simd_and(byte_e2_adv, byte_b8);
          byte_range_bc_bf = simd_and(tmp61, tmp19);
          carryQ.cq[155] = carryout2carry(pablo_blk_Advance(sequence_e2_b8, carryQ.get_carry_in(155), r800_ffff_tmp386));
          sequence_e2_b8_byte_range_bc_bf = simd_and(r800_ffff_tmp386, byte_range_bc_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_e2_b8_byte_range_bc_bf);
          sequence_e2_b9 = simd_and(byte_e2_adv, byte_b9);
          carryQ.cq[156] = carryout2carry(pablo_blk_Advance(sequence_e2_b9, carryQ.get_carry_in(156), r800_ffff_tmp387));
          sequence_e2_b9_byte_range_80_bf = simd_and(r800_ffff_tmp387, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_e2_b9_byte_range_80_bf);
          sequence_e2_ba = simd_and(byte_e2_adv, byte_ba);
          carryQ.cq[157] = carryout2carry(pablo_blk_Advance(sequence_e2_ba, carryQ.get_carry_in(157), r800_ffff_tmp388));
          sequence_e2_ba_9a = simd_and(r800_ffff_tmp388, byte_9a);
          sequence_e2_bb = simd_and(byte_e2_adv, byte_bb);
          carryQ.cq[158] = carryout2carry(pablo_blk_Advance(sequence_e2_bb, carryQ.get_carry_in(158), r800_ffff_tmp389));
          sequence_e2_bb_byte_range_b4_bf = simd_and(r800_ffff_tmp389, byte_range_b4_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_e2_bb_byte_range_b4_bf);
          sequence_e2_bf = simd_and(byte_e2_adv, byte_bf);
          r800_ffff_tmp390 = simd_not(basis_bits.bit_3);
          r800_ffff_tmp391 = simd_and(basis_bits.bit_3, tmp99);
          r800_ffff_tmp392 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp390), simd_andc(r800_ffff_tmp391, basis_bits.bit_2));
          byte_range_96_af = simd_and(byte_range_80_bf, r800_ffff_tmp392);
          carryQ.cq[159] = carryout2carry(pablo_blk_Advance(sequence_e2_bf, carryQ.get_carry_in(159), r800_ffff_tmp393));
          sequence_e2_bf_byte_range_96_af = simd_and(r800_ffff_tmp393, byte_range_96_af);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_e2_bf_byte_range_96_af);
          byte_e3 = simd_and(byte_range_e0_ef, tmp26);
          carryQ.cq[160] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(160), r800_ffff_tmp394));
          sequence_e3_81 = simd_and(r800_ffff_tmp394, byte_81);
          carryQ.cq[161] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(161), byte_e3_adv));
          sequence_e3_81 = simd_and(byte_e3_adv, byte_81);
          carryQ.cq[162] = carryout2carry(pablo_blk_Advance(sequence_e3_81, carryQ.get_carry_in(162), sequence_e3_81_adv));
          r800_ffff_tmp395 = simd_and(sequence_e3_81_adv, byte_80);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp395);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          sequence_e3_82 = simd_and(byte_e3_adv, byte_82);
          r800_ffff_tmp396 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp81), simd_andc(tmp104, basis_bits.bit_4));
          byte_range_97_98 = simd_and(tmp57, r800_ffff_tmp396);
          carryQ.cq[163] = carryout2carry(pablo_blk_Advance(sequence_e3_82, carryQ.get_carry_in(163), sequence_e3_82_adv));
          r800_ffff_tmp397 = simd_and(sequence_e3_82_adv, byte_range_97_98);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp397);
          sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
          sequence_e3_84 = simd_and(byte_e3_adv, byte_84);
          r800_ffff_tmp398 = simd_andc(r800_ffff_tmp72, tmp109);
          r800_ffff_tmp399 = simd_and(tmp73, r800_ffff_tmp78);
          cc_range_3100_312e_3 = simd_or(r800_ffff_tmp398, r800_ffff_tmp399);
          carryQ.cq[164] = carryout2carry(pablo_blk_Advance(sequence_e3_84, carryQ.get_carry_in(164), sequence_e3_84_adv));
          r800_ffff_tmp400 = simd_and(sequence_e3_84_adv, cc_range_3100_312e_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp400);
          sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
          sequence_e3_86 = simd_and(byte_e3_adv, byte_86);
          cc_range_318f_31bb_3 = simd_or(byte_8f, r800_ffff_tmp155);
          carryQ.cq[165] = carryout2carry(pablo_blk_Advance(sequence_e3_86, carryQ.get_carry_in(165), sequence_e3_86_adv));
          r800_ffff_tmp401 = simd_and(sequence_e3_86_adv, cc_range_318f_31bb_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp401);
          sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
          sequence_e3_87 = simd_and(byte_e3_adv, byte_87);
          byte_range_a4_af = simd_and(tmp78, tmp4);
          carryQ.cq[166] = carryout2carry(pablo_blk_Advance(sequence_e3_87, carryQ.get_carry_in(166), sequence_e3_87_adv));
          r800_ffff_tmp402 = simd_and(sequence_e3_87_adv, byte_range_a4_af);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp402);
          byte_88 = simd_and(tmp70, r800_ffff_tmp20);
          sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
          sequence_e3_88 = simd_and(byte_e3_adv, byte_88);
          carryQ.cq[167] = carryout2carry(pablo_blk_Advance(sequence_e3_88, carryQ.get_carry_in(167), sequence_e3_88_adv));
          r800_ffff_tmp403 = simd_and(sequence_e3_88_adv, byte_9f);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp403);
          sequence_e3_8b = simd_and(byte_e3_adv, byte_8b);
          sequence_e3_8b = simd_and(byte_e3_adv, byte_8b);
          carryQ.cq[168] = carryout2carry(pablo_blk_Advance(sequence_e3_8b, carryQ.get_carry_in(168), sequence_e3_8b_adv));
          r800_ffff_tmp404 = simd_and(sequence_e3_8b_adv, byte_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp404);
          byte_e4 = simd_and(byte_range_e0_ef, tmp40);
          carryQ.cq[169] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(169), r800_ffff_tmp405));
          sequence_e4_b6 = simd_and(r800_ffff_tmp405, byte_b6);
          carryQ.cq[170] = carryout2carry(pablo_blk_Advance(byte_e4, carryQ.get_carry_in(170), byte_e4_adv));
          sequence_e4_b6 = simd_and(byte_e4_adv, byte_b6);
          carryQ.cq[171] = carryout2carry(pablo_blk_Advance(sequence_e4_b6, carryQ.get_carry_in(171), sequence_e4_b6_adv));
          r800_ffff_tmp406 = simd_and(sequence_e4_b6_adv, byte_range_b6_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp406);
          byte_e9 = simd_and(byte_range_e0_ef, r800_ffff_tmp30);
          carryQ.cq[172] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(172), r800_ffff_tmp407));
          sequence_e9_bf = simd_and(r800_ffff_tmp407, byte_bf);
          carryQ.cq[173] = carryout2carry(pablo_blk_Advance(byte_e9, carryQ.get_carry_in(173), byte_e9_adv));
          sequence_e9_bf = simd_and(byte_e9_adv, byte_bf);
          r800_ffff_tmp408 = simd_or(basis_bits.bit_2, r800_ffff_tmp14);
          byte_range_8d_bf = simd_and(byte_range_80_bf, r800_ffff_tmp408);
          carryQ.cq[174] = carryout2carry(pablo_blk_Advance(sequence_e9_bf, carryQ.get_carry_in(174), sequence_e9_bf_adv));
          r800_ffff_tmp409 = simd_and(sequence_e9_bf_adv, byte_range_8d_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp409);
          byte_ea = simd_and(byte_range_e0_ef, tmp60);
          carryQ.cq[175] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(175), r800_ffff_tmp410));
          sequence_ea_92 = simd_and(r800_ffff_tmp410, byte_92);
          carryQ.cq[176] = carryout2carry(pablo_blk_Advance(byte_ea, carryQ.get_carry_in(176), byte_ea_adv));
          sequence_ea_92 = simd_and(byte_ea_adv, byte_92);
          byte_range_8d_8f = simd_and(r800_ffff_tmp24, tmp5);
          carryQ.cq[177] = carryout2carry(pablo_blk_Advance(sequence_ea_92, carryQ.get_carry_in(177), sequence_ea_92_adv));
          r800_ffff_tmp411 = simd_and(sequence_ea_92_adv, byte_range_8d_8f);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp411);
          sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
          sequence_ea_93 = simd_and(byte_ea_adv, byte_93);
          byte_range_87_8f = simd_and(tmp70, tmp105);
          carryQ.cq[178] = carryout2carry(pablo_blk_Advance(sequence_ea_93, carryQ.get_carry_in(178), sequence_ea_93_adv));
          r800_ffff_tmp412 = simd_and(sequence_ea_93_adv, byte_range_87_8f);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp412);
          byte_98 = simd_and(tmp57, r800_ffff_tmp20);
          sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
          sequence_ea_98 = simd_and(byte_ea_adv, byte_98);
          r800_ffff_tmp413 = simd_or(basis_bits.bit_3, tmp19);
          byte_range_ac_bf = simd_and(tmp73, r800_ffff_tmp413);
          carryQ.cq[179] = carryout2carry(pablo_blk_Advance(sequence_ea_98, carryQ.get_carry_in(179), sequence_ea_98_adv));
          r800_ffff_tmp414 = simd_and(sequence_ea_98_adv, byte_range_ac_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp414);
          sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
          sequence_ea_9a = simd_and(byte_ea_adv, byte_9a);
          byte_range_98_9e = simd_andc(r800_ffff_tmp173, tmp104);
          carryQ.cq[180] = carryout2carry(pablo_blk_Advance(sequence_ea_9a, carryQ.get_carry_in(180), sequence_ea_9a_adv));
          r800_ffff_tmp415 = simd_and(sequence_ea_9a_adv, byte_range_98_9e);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp415);
          sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
          sequence_ea_9b = simd_and(byte_ea_adv, byte_9b);
          carryQ.cq[181] = carryout2carry(pablo_blk_Advance(sequence_ea_9b, carryQ.get_carry_in(181), sequence_ea_9b_adv));
          r800_ffff_tmp416 = simd_and(sequence_ea_9b_adv, byte_range_b8_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp416);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          sequence_ea_9e = simd_and(byte_ea_adv, byte_9e);
          r800_ffff_tmp417 = simd_or(byte_8f, r800_ffff_tmp297);
          r800_ffff_tmp418 = simd_and(tmp73, r800_ffff_tmp371);
          cc_range_a78f_a7ab_3 = simd_or(r800_ffff_tmp417, r800_ffff_tmp418);
          carryQ.cq[182] = carryout2carry(pablo_blk_Advance(sequence_ea_9e, carryQ.get_carry_in(182), sequence_ea_9e_adv));
          r800_ffff_tmp419 = simd_and(sequence_ea_9e_adv, cc_range_a78f_a7ab_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp419);
          sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
          sequence_ea_9f = simd_and(byte_ea_adv, byte_9f);
          r800_ffff_tmp420 = simd_and(basis_bits.bit_2, r800_ffff_tmp151);
          byte_range_80_b7 = simd_andc(byte_range_80_bf, r800_ffff_tmp420);
          carryQ.cq[183] = carryout2carry(pablo_blk_Advance(sequence_ea_9f, carryQ.get_carry_in(183), sequence_ea_9f_adv));
          r800_ffff_tmp421 = simd_and(sequence_ea_9f_adv, byte_range_80_b7);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp421);
          sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
          sequence_ea_a0 = simd_and(byte_ea_adv, byte_a0);
          cc_range_a82c_a83a_3 = simd_or(byte_range_ac_af, r800_ffff_tmp304);
          carryQ.cq[184] = carryout2carry(pablo_blk_Advance(sequence_ea_a0, carryQ.get_carry_in(184), sequence_ea_a0_adv));
          r800_ffff_tmp422 = simd_and(sequence_ea_a0_adv, cc_range_a82c_a83a_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp422);
          sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
          sequence_ea_a1 = simd_and(byte_ea_adv, byte_a1);
          carryQ.cq[185] = carryout2carry(pablo_blk_Advance(sequence_ea_a1, carryQ.get_carry_in(185), sequence_ea_a1_adv));
          r800_ffff_tmp423 = simd_and(sequence_ea_a1_adv, byte_range_b8_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp423);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          sequence_ea_a3 = simd_and(byte_ea_adv, byte_a3);
          r800_ffff_tmp424 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp184), simd_andc(tmp109, basis_bits.bit_4));
          r800_ffff_tmp425 = simd_and(tmp70, r800_ffff_tmp424);
          r800_ffff_tmp426 = simd_or(r800_ffff_tmp425, byte_range_9a_9f);
          cc_range_a8c5_a8fc_3 = simd_or(r800_ffff_tmp426, byte_range_bc_bf);
          carryQ.cq[186] = carryout2carry(pablo_blk_Advance(sequence_ea_a3, carryQ.get_carry_in(186), sequence_ea_a3_adv));
          r800_ffff_tmp427 = simd_and(sequence_ea_a3_adv, cc_range_a8c5_a8fc_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp427);
          sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
          sequence_ea_a5 = simd_and(byte_ea_adv, byte_a5);
          r800_ffff_tmp428 = simd_not(tmp104);
          r800_ffff_tmp429 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp428), simd_andc(basis_bits.bit_5, basis_bits.bit_4));
          r800_ffff_tmp430 = simd_and(tmp57, r800_ffff_tmp429);
          r800_ffff_tmp431 = simd_and(byte_range_bc_bf, tmp5);
          cc_range_a954_a97d_3 = simd_or(r800_ffff_tmp430, r800_ffff_tmp431);
          carryQ.cq[187] = carryout2carry(pablo_blk_Advance(sequence_ea_a5, carryQ.get_carry_in(187), sequence_ea_a5_adv));
          r800_ffff_tmp432 = simd_and(sequence_ea_a5_adv, cc_range_a954_a97d_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp432);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          sequence_ea_a7 = simd_and(byte_ea_adv, byte_a7);
          r800_ffff_tmp433 = simd_and(r800_ffff_tmp173, r800_ffff_tmp140);
          r800_ffff_tmp434 = simd_or(byte_8e, r800_ffff_tmp433);
          cc_range_a9ce_a9e0_3 = simd_or(r800_ffff_tmp434, tmp73);
          carryQ.cq[188] = carryout2carry(pablo_blk_Advance(sequence_ea_a7, carryQ.get_carry_in(188), sequence_ea_a7_adv));
          r800_ffff_tmp435 = simd_and(sequence_ea_a7_adv, cc_range_a9ce_a9e0_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp435);
          sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
          sequence_ea_a8 = simd_and(byte_ea_adv, byte_a8);
          byte_range_b7_bf = simd_and(tmp61, tmp105);
          carryQ.cq[189] = carryout2carry(pablo_blk_Advance(sequence_ea_a8, carryQ.get_carry_in(189), sequence_ea_a8_adv));
          r800_ffff_tmp436 = simd_and(sequence_ea_a8_adv, byte_range_b7_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp436);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          sequence_ea_a9 = simd_and(byte_ea_adv, byte_a9);
          r800_ffff_tmp437 = simd_or(byte_range_8e_8f, r800_ffff_tmp251);
          cc_range_aa4e_aa7c_3 = simd_or(r800_ffff_tmp437, byte_range_bc_bf);
          carryQ.cq[190] = carryout2carry(pablo_blk_Advance(sequence_ea_a9, carryQ.get_carry_in(190), sequence_ea_a9_adv));
          r800_ffff_tmp438 = simd_and(sequence_ea_a9_adv, cc_range_aa4e_aa7c_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp438);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          sequence_ea_ab = simd_and(byte_ea_adv, byte_ab);
          r800_ffff_tmp439 = simd_not(r800_ffff_tmp259);
          r800_ffff_tmp440 = simd_or(tmp4, tmp25);
          r800_ffff_tmp441 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp439), simd_andc(r800_ffff_tmp440, basis_bits.bit_3));
          r800_ffff_tmp442 = simd_and(r800_ffff_tmp11, r800_ffff_tmp441);
          cc_range_aac3_aaf7_3 = simd_or(r800_ffff_tmp442, byte_range_b7_bf);
          carryQ.cq[191] = carryout2carry(pablo_blk_Advance(sequence_ea_ab, carryQ.get_carry_in(191), sequence_ea_ab_adv));
          r800_ffff_tmp443 = simd_and(sequence_ea_ab_adv, cc_range_aac3_aaf7_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp443);
          sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
          sequence_ea_ac = simd_and(byte_ea_adv, byte_ac);
          r800_ffff_tmp444 = simd_andc(tmp6, r800_ffff_tmp396);
          r800_ffff_tmp445 = simd_andc(tmp70, r800_ffff_tmp444);
          r800_ffff_tmp446 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp77), simd_andc(tmp74, basis_bits.bit_3));
          r800_ffff_tmp447 = simd_and(r800_ffff_tmp11, r800_ffff_tmp446);
          r800_ffff_tmp448 = simd_or(r800_ffff_tmp445, r800_ffff_tmp447);
          r800_ffff_tmp449 = simd_or(r800_ffff_tmp448, byte_range_97_9f);
          r800_ffff_tmp450 = simd_or(r800_ffff_tmp449, byte_a7);
          cc_range_ab00_ab2f_3 = simd_or(r800_ffff_tmp450, byte_range_af_bf);
          carryQ.cq[192] = carryout2carry(pablo_blk_Advance(sequence_ea_ac, carryQ.get_carry_in(192), sequence_ea_ac_adv));
          r800_ffff_tmp451 = simd_and(sequence_ea_ac_adv, cc_range_ab00_ab2f_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp451);
          byte_range_ad_ae = simd_and(byte_range_ac_af, tmp117);
          byte_ea_byte_range_ad_ae = simd_and(byte_ea_adv, byte_range_ad_ae);
          carryQ.cq[193] = carryout2carry(pablo_blk_Advance(byte_ea_byte_range_ad_ae, carryQ.get_carry_in(193), r800_ffff_tmp452));
          byte_ea_byte_range_ad_ae_sfx = simd_and(r800_ffff_tmp452, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, byte_ea_byte_range_ad_ae_sfx);
          sequence_ea_af = simd_and(byte_ea_adv, byte_af);
          carryQ.cq[194] = carryout2carry(pablo_blk_Advance(sequence_ea_af, carryQ.get_carry_in(194), r800_ffff_tmp453));
          sequence_ea_af_byte_range_ae_af = simd_and(r800_ffff_tmp453, byte_range_ae_af);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_ea_af_byte_range_ae_af);
          byte_ed = simd_and(byte_range_e0_ef, tmp71);
          carryQ.cq[195] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(195), r800_ffff_tmp454));
          sequence_ed_9e = simd_and(r800_ffff_tmp454, byte_9e);
          carryQ.cq[196] = carryout2carry(pablo_blk_Advance(byte_ed, carryQ.get_carry_in(196), byte_ed_adv));
          sequence_ed_9e = simd_and(byte_ed_adv, byte_9e);
          carryQ.cq[197] = carryout2carry(pablo_blk_Advance(sequence_ed_9e, carryQ.get_carry_in(197), sequence_ed_9e_adv));
          r800_ffff_tmp455 = simd_and(sequence_ed_9e_adv, byte_range_a4_af);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp455);
          sequence_ed_9f = simd_and(byte_ed_adv, byte_9f);
          sequence_ed_9f = simd_and(byte_ed_adv, byte_9f);
          r800_ffff_tmp456 = simd_not(tmp79);
          r800_ffff_tmp457 = simd_or(simd_and(basis_bits.bit_4, r800_ffff_tmp456), simd_andc(tmp104, basis_bits.bit_4));
          r800_ffff_tmp458 = simd_and(tmp70, r800_ffff_tmp457);
          cc_range_d7c7_d7fc_3 = simd_or(r800_ffff_tmp458, byte_range_bc_bf);
          carryQ.cq[198] = carryout2carry(pablo_blk_Advance(sequence_ed_9f, carryQ.get_carry_in(198), sequence_ed_9f_adv));
          r800_ffff_tmp459 = simd_and(sequence_ed_9f_adv, cc_range_d7c7_d7fc_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp459);
          byte_ef = simd_and(byte_range_e0_ef, tmp74);
          carryQ.cq[199] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(199), r800_ffff_tmp460));
          sequence_ef_a9 = simd_and(r800_ffff_tmp460, byte_a9);
          carryQ.cq[200] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(200), byte_ef_adv));
          sequence_ef_a9 = simd_and(byte_ef_adv, byte_a9);
          carryQ.cq[201] = carryout2carry(pablo_blk_Advance(sequence_ef_a9, carryQ.get_carry_in(201), sequence_ef_a9_adv));
          r800_ffff_tmp461 = simd_and(sequence_ef_a9_adv, byte_range_ae_af);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp461);
          sequence_ef_ab = simd_and(byte_ef_adv, byte_ab);
          sequence_ef_ab = simd_and(byte_ef_adv, byte_ab);
          byte_range_9a_bf = simd_and(byte_range_80_bf, tmp51);
          carryQ.cq[202] = carryout2carry(pablo_blk_Advance(sequence_ef_ab, carryQ.get_carry_in(202), sequence_ef_ab_adv));
          r800_ffff_tmp462 = simd_and(sequence_ef_ab_adv, byte_range_9a_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp462);
          sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
          sequence_ef_ac = simd_and(byte_ef_adv, byte_ac);
          r800_ffff_tmp463 = simd_not(r800_ffff_tmp440);
          r800_ffff_tmp464 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp463), simd_andc(tmp105, basis_bits.bit_3));
          r800_ffff_tmp465 = simd_and(r800_ffff_tmp11, r800_ffff_tmp464);
          r800_ffff_tmp466 = simd_andc(r800_ffff_tmp173, tmp109);
          r800_ffff_tmp467 = simd_or(r800_ffff_tmp465, r800_ffff_tmp466);
          r800_ffff_tmp468 = simd_or(r800_ffff_tmp467, byte_b7);
          r800_ffff_tmp469 = simd_or(r800_ffff_tmp468, byte_bd);
          cc_range_fb07_fb3f_3 = simd_or(r800_ffff_tmp469, byte_bf);
          carryQ.cq[203] = carryout2carry(pablo_blk_Advance(sequence_ef_ac, carryQ.get_carry_in(203), sequence_ef_ac_adv));
          r800_ffff_tmp470 = simd_and(sequence_ef_ac_adv, cc_range_fb07_fb3f_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp470);
          sequence_ef_ad = simd_and(byte_ef_adv, byte_ad);
          sequence_ef_ad = simd_and(byte_ef_adv, byte_ad);
          r800_ffff_tmp471 = simd_or(tmp69, tmp41);
          cc_range_fb42_fb45_3 = simd_and(tmp70, r800_ffff_tmp471);
          carryQ.cq[204] = carryout2carry(pablo_blk_Advance(sequence_ef_ad, carryQ.get_carry_in(204), sequence_ef_ad_adv));
          r800_ffff_tmp472 = simd_and(sequence_ef_ad_adv, cc_range_fb42_fb45_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp472);
          sequence_ef_af = simd_and(byte_ef_adv, byte_af);
          sequence_ef_af = simd_and(byte_ef_adv, byte_af);
          r800_ffff_tmp473 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp463), simd_andc(tmp17, basis_bits.bit_3));
          byte_range_82_92 = simd_and(r800_ffff_tmp11, r800_ffff_tmp473);
          carryQ.cq[205] = carryout2carry(pablo_blk_Advance(sequence_ef_af, carryQ.get_carry_in(205), sequence_ef_af_adv));
          r800_ffff_tmp474 = simd_and(sequence_ef_af_adv, byte_range_82_92);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp474);
          sequence_ef_b5 = simd_and(byte_ef_adv, byte_b5);
          sequence_ef_b5 = simd_and(byte_ef_adv, byte_b5);
          byte_range_80_8f = simd_andc(byte_range_80_bf, tmp13);
          carryQ.cq[206] = carryout2carry(pablo_blk_Advance(sequence_ef_b5, carryQ.get_carry_in(206), sequence_ef_b5_adv));
          r800_ffff_tmp475 = simd_and(sequence_ef_b5_adv, byte_range_80_8f);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp475);
          sequence_ef_b6 = simd_and(byte_ef_adv, byte_b6);
          sequence_ef_b6 = simd_and(byte_ef_adv, byte_b6);
          byte_range_90_91 = simd_andc(tmp57, tmp17);
          carryQ.cq[207] = carryout2carry(pablo_blk_Advance(sequence_ef_b6, carryQ.get_carry_in(207), sequence_ef_b6_adv));
          r800_ffff_tmp476 = simd_and(sequence_ef_b6_adv, byte_range_90_91);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp476);
          sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
          sequence_ef_b7 = simd_and(byte_ef_adv, byte_b7);
          r800_ffff_tmp477 = simd_or(basis_bits.bit_3, basis_bits.bit_4);
          r800_ffff_tmp478 = simd_or(simd_and(basis_bits.bit_2, r800_ffff_tmp390), simd_andc(r800_ffff_tmp477, basis_bits.bit_2));
          r800_ffff_tmp479 = simd_and(byte_range_80_bf, r800_ffff_tmp478);
          cc_range_fdc8_fdfe_3 = simd_or(r800_ffff_tmp479, r800_ffff_tmp208);
          carryQ.cq[208] = carryout2carry(pablo_blk_Advance(sequence_ef_b7, carryQ.get_carry_in(208), sequence_ef_b7_adv));
          r800_ffff_tmp480 = simd_and(sequence_ef_b7_adv, cc_range_fdc8_fdfe_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp480);
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          sequence_ef_b8 = simd_and(byte_ef_adv, byte_b8);
          r800_ffff_tmp481 = simd_and(tmp78, tmp105);
          cc_range_fe1a_fe27_3 = simd_or(byte_range_9a_9f, r800_ffff_tmp481);
          carryQ.cq[209] = carryout2carry(pablo_blk_Advance(sequence_ef_b8, carryQ.get_carry_in(209), sequence_ef_b8_adv));
          r800_ffff_tmp482 = simd_and(sequence_ef_b8_adv, cc_range_fe1a_fe27_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp482);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          sequence_ef_b9 = simd_and(byte_ef_adv, byte_b9);
          r800_ffff_tmp483 = simd_or(byte_93, byte_a7);
          r800_ffff_tmp484 = simd_or(r800_ffff_tmp483, byte_range_ac_af);
          cc_range_fe53_fe75_3 = simd_or(r800_ffff_tmp484, r800_ffff_tmp357);
          carryQ.cq[210] = carryout2carry(pablo_blk_Advance(sequence_ef_b9, carryQ.get_carry_in(210), sequence_ef_b9_adv));
          r800_ffff_tmp485 = simd_and(sequence_ef_b9_adv, cc_range_fe53_fe75_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp485);
          sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
          sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
          byte_range_bd_be = simd_and(byte_range_bc_bf, tmp117);
          carryQ.cq[211] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(211), sequence_ef_bb_adv));
          r800_ffff_tmp486 = simd_and(sequence_ef_bb_adv, byte_range_bd_be);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp486);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          sequence_ef_bc = simd_and(byte_ef_adv, byte_bc);
          carryQ.cq[212] = carryout2carry(pablo_blk_Advance(sequence_ef_bc, carryQ.get_carry_in(212), sequence_ef_bc_adv));
          r800_ffff_tmp487 = simd_and(sequence_ef_bc_adv, byte_80);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp487);
          sequence_ef_be = simd_and(byte_ef_adv, byte_be);
          sequence_ef_be = simd_and(byte_ef_adv, byte_be);
          carryQ.cq[213] = carryout2carry(pablo_blk_Advance(sequence_ef_be, carryQ.get_carry_in(213), sequence_ef_be_adv));
          r800_ffff_tmp488 = simd_and(sequence_ef_be_adv, byte_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp488);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          r800_ffff_tmp489 = simd_andc(tmp17, r800_ffff_tmp242);
          r800_ffff_tmp490 = simd_andc(byte_range_80_8f, r800_ffff_tmp489);
          r800_ffff_tmp491 = simd_or(r800_ffff_tmp490, byte_range_90_91);
          r800_ffff_tmp492 = simd_and(tmp57, r800_ffff_tmp242);
          r800_ffff_tmp493 = simd_or(r800_ffff_tmp491, r800_ffff_tmp492);
          r800_ffff_tmp494 = simd_or(r800_ffff_tmp493, byte_range_9d_9f);
          r800_ffff_tmp495 = simd_or(r800_ffff_tmp494, byte_a7);
          r800_ffff_tmp496 = simd_and(basis_bits.bit_4, tmp33);
          r800_ffff_tmp497 = simd_not(r800_ffff_tmp496);
          r800_ffff_tmp498 = simd_or(simd_and(basis_bits.bit_3, r800_ffff_tmp497), simd_andc(tmp74, basis_bits.bit_3));
          r800_ffff_tmp499 = simd_and(tmp73, r800_ffff_tmp498);
          r800_ffff_tmp500 = simd_or(r800_ffff_tmp495, r800_ffff_tmp499);
          cc_range_ffc0_fffe_3 = simd_or(r800_ffff_tmp500, r800_ffff_tmp208);
          carryQ.cq[214] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(214), sequence_ef_bf_adv));
          r800_ffff_tmp501 = simd_and(sequence_ef_bf_adv, cc_range_ffc0_fffe_3);
          struct_Cn.cc = simd_or(struct_Cn.cc, r800_ffff_tmp501);
        }
        else {
          carryQ.CarryDequeueEnqueue(66, 149);
        }
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
        carryQ.cq[215] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(215), tmp122));
        sequence_f0_90_byte_range_80_bf = simd_and(tmp122, byte_range_80_bf);
        carryQ.cq[216] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_80_bf, carryQ.get_carry_in(216), tmp123));
        sequence_f0_90_byte_range_80_bf_sfx = simd_and(tmp123, byte_range_80_bf);
        cp_range_10000_10fff = simd_or(cp_range_10000_10fff, sequence_f0_90_byte_range_80_bf_sfx);
        if ((bitblock::any(cp_range_10000_10fff) || carryQ.CarryTest(217, 33))) {
          sequence_f0_90 = simd_and(byte_f0_adv, byte_90);
          sequence_f0_90_80 = simd_and(tmp122, byte_80);
          carryQ.cq[217] = carryout2carry(pablo_blk_Advance(sequence_f0_90, carryQ.get_carry_in(217), sequence_f0_90_adv));
          sequence_f0_90_80 = simd_and(sequence_f0_90_adv, byte_80);
          r10000_10fff_tmp1 = simd_and(tmp70, tmp67);
          r10000_10fff_tmp2 = simd_and(tmp78, tmp46);
          r10000_10fff_tmp3 = simd_or(r10000_10fff_tmp1, r10000_10fff_tmp2);
          r10000_10fff_tmp4 = simd_and(tmp61, tmp63);
          r10000_10fff_tmp5 = simd_or(r10000_10fff_tmp3, r10000_10fff_tmp4);
          r10000_10fff_tmp6 = simd_and(tmp61, tmp101);
          cc_range_1000c_1003e_4 = simd_or(r10000_10fff_tmp5, r10000_10fff_tmp6);
          carryQ.cq[218] = carryout2carry(pablo_blk_Advance(sequence_f0_90_80, carryQ.get_carry_in(218), sequence_f0_90_80_adv));
          r10000_10fff_tmp7 = simd_and(sequence_f0_90_80_adv, cc_range_1000c_1003e_4);
          struct_Cn.cc = simd_or(struct_Cn.cc, r10000_10fff_tmp7);
          sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
          sequence_f0_90_81 = simd_and(sequence_f0_90_adv, byte_81);
          r10000_10fff_tmp8 = simd_and(basis_bits.bit_3, tmp20);
          r10000_10fff_tmp9 = simd_or(basis_bits.bit_2, r10000_10fff_tmp8);
          r10000_10fff_tmp10 = simd_and(byte_range_80_bf, r10000_10fff_tmp9);
          cc_range_1004e_1005e_4 = simd_or(byte_range_8e_8f, r10000_10fff_tmp10);
          carryQ.cq[219] = carryout2carry(pablo_blk_Advance(sequence_f0_90_81, carryQ.get_carry_in(219), sequence_f0_90_81_adv));
          r10000_10fff_tmp11 = simd_and(sequence_f0_90_81_adv, cc_range_1004e_1005e_4);
          struct_Cn.cc = simd_or(struct_Cn.cc, r10000_10fff_tmp11);
          sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
          sequence_f0_90_83 = simd_and(sequence_f0_90_adv, byte_83);
          byte_range_bb_bf = simd_and(byte_range_b8_bf, tmp79);
          carryQ.cq[220] = carryout2carry(pablo_blk_Advance(sequence_f0_90_83, carryQ.get_carry_in(220), sequence_f0_90_83_adv));
          r10000_10fff_tmp12 = simd_and(sequence_f0_90_83_adv, byte_range_bb_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, r10000_10fff_tmp12);
          sequence_f0_90_84 = simd_and(sequence_f0_90_adv, byte_84);
          sequence_f0_90_84 = simd_and(sequence_f0_90_adv, byte_84);
          r10000_10fff_tmp13 = simd_andc(tmp70, basis_bits.bit_4);
          r10000_10fff_tmp14 = simd_not(tmp25);
          r10000_10fff_tmp15 = simd_or(simd_and(basis_bits.bit_5, r10000_10fff_tmp14), simd_andc(tmp25, basis_bits.bit_5));
          r10000_10fff_tmp16 = simd_and(r10000_10fff_tmp13, r10000_10fff_tmp15);
          r10000_10fff_tmp17 = simd_and(tmp61, tmp39);
          r10000_10fff_tmp18 = simd_andc(r10000_10fff_tmp17, tmp25);
          cc_range_10103_10134_4 = simd_or(r10000_10fff_tmp16, r10000_10fff_tmp18);
          carryQ.cq[221] = carryout2carry(pablo_blk_Advance(sequence_f0_90_84, carryQ.get_carry_in(221), sequence_f0_90_84_adv));
          r10000_10fff_tmp19 = simd_and(sequence_f0_90_84_adv, cc_range_10103_10134_4);
          struct_Cn.cc = simd_or(struct_Cn.cc, r10000_10fff_tmp19);
          byte_86 = simd_and(tmp70, tmp91);
          sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
          sequence_f0_90_86 = simd_and(sequence_f0_90_adv, byte_86);
          r10000_10fff_tmp20 = simd_and(tmp70, basis_bits.bit_4);
          r10000_10fff_tmp21 = simd_and(r10000_10fff_tmp20, tmp79);
          r10000_10fff_tmp22 = simd_and(basis_bits.bit_3, tmp19);
          r10000_10fff_tmp23 = simd_or(basis_bits.bit_2, r10000_10fff_tmp22);
          r10000_10fff_tmp24 = simd_and(byte_range_80_bf, r10000_10fff_tmp23);
          cc_range_1018b_1019c_4 = simd_or(r10000_10fff_tmp21, r10000_10fff_tmp24);
          carryQ.cq[222] = carryout2carry(pablo_blk_Advance(sequence_f0_90_86, carryQ.get_carry_in(222), sequence_f0_90_86_adv));
          r10000_10fff_tmp25 = simd_and(sequence_f0_90_86_adv, cc_range_1018b_1019c_4);
          struct_Cn.cc = simd_or(struct_Cn.cc, r10000_10fff_tmp25);
          sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
          sequence_f0_90_87 = simd_and(sequence_f0_90_adv, byte_87);
          r10000_10fff_tmp26 = simd_and(tmp61, tmp20);
          cc_range_101c0_101fe_4 = simd_or(tmp70, r10000_10fff_tmp26);
          carryQ.cq[223] = carryout2carry(pablo_blk_Advance(sequence_f0_90_87, carryQ.get_carry_in(223), sequence_f0_90_87_adv));
          r10000_10fff_tmp27 = simd_and(sequence_f0_90_87_adv, cc_range_101c0_101fe_4);
          struct_Cn.cc = simd_or(struct_Cn.cc, r10000_10fff_tmp27);
          r10000_10fff_tmp28 = simd_andc(tmp58, basis_bits.bit_6);
          byte_range_88_89 = simd_and(tmp70, r10000_10fff_tmp28);
          sequence_f0_90_byte_range_88_89 = simd_and(sequence_f0_90_adv, byte_range_88_89);
          carryQ.cq[224] = carryout2carry(pablo_blk_Advance(sequence_f0_90_byte_range_88_89, carryQ.get_carry_in(224), r10000_10fff_tmp29));
          sequence_f0_90_byte_range_88_89_sfx = simd_and(r10000_10fff_tmp29, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_byte_range_88_89_sfx);
          byte_8a = simd_and(tmp70, tmp60);
          sequence_f0_90_8a = simd_and(sequence_f0_90_adv, byte_8a);
          r10000_10fff_tmp30 = simd_and(tmp57, tmp19);
          byte_range_9d_9f = simd_and(r10000_10fff_tmp30, tmp5);
          carryQ.cq[225] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8a, carryQ.get_carry_in(225), r10000_10fff_tmp31));
          sequence_f0_90_8a_byte_range_9d_9f = simd_and(r10000_10fff_tmp31, byte_range_9d_9f);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_8a_byte_range_9d_9f);
          byte_8b = simd_and(tmp70, tmp63);
          sequence_f0_90_8b = simd_and(sequence_f0_90_adv, byte_8b);
          carryQ.cq[226] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8b, carryQ.get_carry_in(226), r10000_10fff_tmp32));
          sequence_f0_90_8b_byte_range_91_bf = simd_and(r10000_10fff_tmp32, byte_range_91_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_8b_byte_range_91_bf);
          byte_8c = simd_and(tmp70, tmp67);
          sequence_f0_90_8c = simd_and(sequence_f0_90_adv, byte_8c);
          carryQ.cq[227] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8c, carryQ.get_carry_in(227), r10000_10fff_tmp33));
          sequence_f0_90_8c_9f = simd_and(r10000_10fff_tmp33, byte_9f);
          sequence_f0_90_8d = simd_and(sequence_f0_90_adv, byte_8d);
          r10000_10fff_tmp34 = simd_and(basis_bits.bit_4, tmp79);
          r10000_10fff_tmp35 = simd_or(basis_bits.bit_3, r10000_10fff_tmp34);
          r10000_10fff_tmp36 = simd_or(basis_bits.bit_2, r10000_10fff_tmp35);
          byte_range_8b_bf = simd_and(byte_range_80_bf, r10000_10fff_tmp36);
          carryQ.cq[228] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8d, carryQ.get_carry_in(228), r10000_10fff_tmp37));
          sequence_f0_90_8d_byte_range_8b_bf = simd_and(r10000_10fff_tmp37, byte_range_8b_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_8d_byte_range_8b_bf);
          byte_8e = simd_and(tmp70, tmp101);
          sequence_f0_90_8e = simd_and(sequence_f0_90_adv, byte_8e);
          carryQ.cq[229] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8e, carryQ.get_carry_in(229), r10000_10fff_tmp38));
          sequence_f0_90_8e_9e = simd_and(r10000_10fff_tmp38, byte_9e);
          byte_8f = simd_and(tmp70, tmp74);
          sequence_f0_90_8f = simd_and(sequence_f0_90_adv, byte_8f);
          byte_range_84_87 = simd_and(tmp70, tmp39);
          carryQ.cq[230] = carryout2carry(pablo_blk_Advance(sequence_f0_90_8f, carryQ.get_carry_in(230), r10000_10fff_tmp39));
          sequence_f0_90_8f_byte_range_84_87 = simd_and(r10000_10fff_tmp39, byte_range_84_87);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_8f_byte_range_84_87);
          sequence_f0_90_92 = simd_and(sequence_f0_90_adv, byte_92);
          byte_range_9e_9f = simd_and(tmp57, tmp20);
          carryQ.cq[231] = carryout2carry(pablo_blk_Advance(sequence_f0_90_92, carryQ.get_carry_in(231), r10000_10fff_tmp40));
          sequence_f0_90_92_byte_range_9e_9f = simd_and(r10000_10fff_tmp40, byte_range_9e_9f);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_92_byte_range_9e_9f);
          sequence_f0_90_93 = simd_and(sequence_f0_90_adv, byte_93);
          carryQ.cq[232] = carryout2carry(pablo_blk_Advance(sequence_f0_90_93, carryQ.get_carry_in(232), r10000_10fff_tmp41));
          sequence_f0_90_93_byte_range_80_bf = simd_and(r10000_10fff_tmp41, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_93_byte_range_80_bf);
          byte_a0 = simd_andc(tmp78, tmp6);
          sequence_f0_90_a0 = simd_and(sequence_f0_90_adv, byte_a0);
          r10000_10fff_tmp42 = simd_and(tmp39, basis_bits.bit_6);
          byte_range_86_87 = simd_and(tmp70, r10000_10fff_tmp42);
          carryQ.cq[233] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a0, carryQ.get_carry_in(233), r10000_10fff_tmp43));
          sequence_f0_90_a0_byte_range_86_87 = simd_and(r10000_10fff_tmp43, byte_range_86_87);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_a0_byte_range_86_87);
          byte_a1 = simd_and(tmp78, tmp11);
          sequence_f0_90_a1 = simd_and(sequence_f0_90_adv, byte_a1);
          carryQ.cq[234] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a1, carryQ.get_carry_in(234), r10000_10fff_tmp44));
          sequence_f0_90_a1_96 = simd_and(r10000_10fff_tmp44, byte_96);
          byte_a2 = simd_and(tmp78, tmp69);
          sequence_f0_90_a2 = simd_and(sequence_f0_90_adv, byte_a2);
          carryQ.cq[235] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a2, carryQ.get_carry_in(235), r10000_10fff_tmp45));
          sequence_f0_90_a2_byte_range_80_bf = simd_and(r10000_10fff_tmp45, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_a2_byte_range_80_bf);
          byte_a4 = simd_and(tmp78, tmp40);
          sequence_f0_90_a4 = simd_and(sequence_f0_90_adv, byte_a4);
          byte_range_9c_9e = simd_andc(r10000_10fff_tmp30, tmp25);
          carryQ.cq[236] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a4, carryQ.get_carry_in(236), r10000_10fff_tmp46));
          sequence_f0_90_a4_byte_range_9c_9e = simd_and(r10000_10fff_tmp46, byte_range_9c_9e);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_a4_byte_range_9c_9e);
          byte_a5 = simd_and(tmp78, tmp41);
          sequence_f0_90_a5 = simd_and(sequence_f0_90_adv, byte_a5);
          carryQ.cq[237] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a5, carryQ.get_carry_in(237), r10000_10fff_tmp47));
          sequence_f0_90_a5_byte_range_80_bf = simd_and(r10000_10fff_tmp47, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_a5_byte_range_80_bf);
          byte_a6 = simd_and(tmp78, tmp91);
          sequence_f0_90_a6 = simd_and(sequence_f0_90_adv, byte_a6);
          byte_range_b8_bd = simd_andc(byte_range_b8_bf, tmp98);
          carryQ.cq[238] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a6, carryQ.get_carry_in(238), r10000_10fff_tmp48));
          sequence_f0_90_a6_byte_range_b8_bd = simd_and(r10000_10fff_tmp48, byte_range_b8_bd);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_a6_byte_range_b8_bd);
          byte_a7 = simd_and(tmp78, tmp46);
          sequence_f0_90_a7 = simd_and(sequence_f0_90_adv, byte_a7);
          carryQ.cq[239] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a7, carryQ.get_carry_in(239), r10000_10fff_tmp49));
          sequence_f0_90_a7_byte_range_80_bf = simd_and(r10000_10fff_tmp49, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_a7_byte_range_80_bf);
          r10000_10fff_tmp50 = simd_andc(tmp58, tmp5);
          byte_a8 = simd_and(tmp78, r10000_10fff_tmp50);
          sequence_f0_90_a8 = simd_and(sequence_f0_90_adv, byte_a8);
          carryQ.cq[240] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a8, carryQ.get_carry_in(240), r10000_10fff_tmp51));
          sequence_f0_90_a8_84 = simd_and(r10000_10fff_tmp51, byte_84);
          r10000_10fff_tmp52 = simd_and(tmp58, tmp10);
          byte_a9 = simd_and(tmp78, r10000_10fff_tmp52);
          sequence_f0_90_a9 = simd_and(sequence_f0_90_adv, byte_a9);
          byte_range_88_8f = simd_and(tmp70, basis_bits.bit_4);
          carryQ.cq[241] = carryout2carry(pablo_blk_Advance(sequence_f0_90_a9, carryQ.get_carry_in(241), r10000_10fff_tmp53));
          sequence_f0_90_a9_byte_range_88_8f = simd_and(r10000_10fff_tmp53, byte_range_88_8f);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_a9_byte_range_88_8f);
          sequence_f0_90_aa = simd_and(sequence_f0_90_adv, byte_aa);
          carryQ.cq[242] = carryout2carry(pablo_blk_Advance(sequence_f0_90_aa, carryQ.get_carry_in(242), r10000_10fff_tmp54));
          sequence_f0_90_aa_byte_range_80_bf = simd_and(r10000_10fff_tmp54, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_aa_byte_range_80_bf);
          sequence_f0_90_ac = simd_and(sequence_f0_90_adv, byte_ac);
          r10000_10fff_tmp55 = simd_not(tmp33);
          r10000_10fff_tmp56 = simd_or(simd_and(basis_bits.bit_4, r10000_10fff_tmp55), simd_andc(tmp98, basis_bits.bit_4));
          byte_range_b6_b8 = simd_and(tmp61, r10000_10fff_tmp56);
          carryQ.cq[243] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ac, carryQ.get_carry_in(243), r10000_10fff_tmp57));
          sequence_f0_90_ac_byte_range_b6_b8 = simd_and(r10000_10fff_tmp57, byte_range_b6_b8);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_ac_byte_range_b6_b8);
          byte_ad = simd_and(tmp78, tmp71);
          sequence_f0_90_ad = simd_and(sequence_f0_90_adv, byte_ad);
          byte_range_96_97 = simd_and(tmp57, r10000_10fff_tmp42);
          carryQ.cq[244] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ad, carryQ.get_carry_in(244), r10000_10fff_tmp58));
          sequence_f0_90_ad_byte_range_96_97 = simd_and(r10000_10fff_tmp58, byte_range_96_97);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_ad_byte_range_96_97);
          byte_ae = simd_and(tmp78, tmp101);
          sequence_f0_90_ae = simd_and(sequence_f0_90_adv, byte_ae);
          carryQ.cq[245] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ae, carryQ.get_carry_in(245), r10000_10fff_tmp59));
          sequence_f0_90_ae_byte_range_80_bf = simd_and(r10000_10fff_tmp59, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_ae_byte_range_80_bf);
          byte_b1 = simd_and(tmp61, tmp11);
          sequence_f0_90_b1 = simd_and(sequence_f0_90_adv, byte_b1);
          r10000_10fff_tmp60 = simd_and(basis_bits.bit_4, tmp33);
          r10000_10fff_tmp61 = simd_or(basis_bits.bit_3, r10000_10fff_tmp60);
          r10000_10fff_tmp62 = simd_or(basis_bits.bit_2, r10000_10fff_tmp61);
          byte_range_89_bf = simd_and(byte_range_80_bf, r10000_10fff_tmp62);
          carryQ.cq[246] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b1, carryQ.get_carry_in(246), r10000_10fff_tmp63));
          sequence_f0_90_b1_byte_range_89_bf = simd_and(r10000_10fff_tmp63, byte_range_89_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_b1_byte_range_89_bf);
          byte_b2 = simd_and(tmp61, tmp69);
          sequence_f0_90_b2 = simd_and(sequence_f0_90_adv, byte_b2);
          carryQ.cq[247] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b2, carryQ.get_carry_in(247), r10000_10fff_tmp64));
          sequence_f0_90_b2_byte_range_80_bf = simd_and(r10000_10fff_tmp64, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_b2_byte_range_80_bf);
          byte_b9 = simd_and(tmp61, r10000_10fff_tmp52);
          sequence_f0_90_b9 = simd_and(sequence_f0_90_adv, byte_b9);
          byte_range_80_9f = simd_andc(byte_range_80_bf, basis_bits.bit_2);
          carryQ.cq[248] = carryout2carry(pablo_blk_Advance(sequence_f0_90_b9, carryQ.get_carry_in(248), r10000_10fff_tmp65));
          sequence_f0_90_b9_byte_range_80_9f = simd_and(r10000_10fff_tmp65, byte_range_80_9f);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_b9_byte_range_80_9f);
          byte_ba = simd_and(tmp61, tmp60);
          sequence_f0_90_ba = simd_and(sequence_f0_90_adv, byte_ba);
          carryQ.cq[249] = carryout2carry(pablo_blk_Advance(sequence_f0_90_ba, carryQ.get_carry_in(249), r10000_10fff_tmp66));
          sequence_f0_90_ba_byte_range_80_bf = simd_and(r10000_10fff_tmp66, byte_range_80_bf);
          struct_Cn.cc = simd_or(struct_Cn.cc, sequence_f0_90_ba_byte_range_80_bf);
        }
        else {
          carryQ.CarryDequeueEnqueue(217, 33);
        }
  }
  CarryArray<250, 0> carryQ;
  };

  struct Cc {
  Cc() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Cc & struct_Cc) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10;
		BitBlock cc_range_0_7f_1, tmp11, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6;
		BitBlock byte_range_80_9f, byte_c2_adv, r80_7ff_tmp7;




        struct_Cc.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_or(tmp1, basis_bits.bit_2);
        tmp3 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp5 = simd_and(tmp3, tmp4);
        tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp8 = simd_and(tmp6, tmp7);
        tmp9 = simd_and(tmp5, tmp8);
        tmp10 = simd_andc(tmp2, tmp9);
        cc_range_0_7f_1 = simd_not(tmp10);
        struct_Cc.cc = simd_or(struct_Cc.cc, cc_range_0_7f_1);
        tmp11 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_c0_df = simd_andc(tmp11, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
          r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp2 = simd_andc(tmp11, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
          byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
          r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          byte_range_80_9f = simd_andc(r80_7ff_tmp6, basis_bits.bit_2);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
          r80_7ff_tmp7 = simd_and(byte_c2_adv, byte_range_80_9f);
          struct_Cc.cc = simd_or(struct_Cc.cc, r80_7ff_tmp7);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        carryQ.CarryQ_Adjust(1);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Cc & struct_Cc, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10;
		BitBlock cc_range_0_7f_1, tmp11, byte_range_c0_df, r80_7ff_tmp1, r80_7ff_tmp2;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5, byte_c2, r80_7ff_tmp6;
		BitBlock byte_range_80_9f, byte_c2_adv, r80_7ff_tmp7;




        struct_Cc.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_or(tmp1, basis_bits.bit_2);
        tmp3 = simd_andc(basis_bits.bit_1, basis_bits.bit_0);
        tmp4 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp5 = simd_and(tmp3, tmp4);
        tmp6 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp7 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp8 = simd_and(tmp6, tmp7);
        tmp9 = simd_and(tmp5, tmp8);
        tmp10 = simd_andc(tmp2, tmp9);
        cc_range_0_7f_1 = simd_not(tmp10);
        struct_Cc.cc = simd_or(struct_Cc.cc, cc_range_0_7f_1);
        tmp11 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_c0_df = simd_andc(tmp11, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
          r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp2 = simd_andc(tmp11, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp4 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp5 = simd_andc(r80_7ff_tmp4, r80_7ff_tmp3);
          byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp5);
          r80_7ff_tmp6 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          byte_range_80_9f = simd_andc(r80_7ff_tmp6, basis_bits.bit_2);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
          r80_7ff_tmp7 = simd_and(byte_c2_adv, byte_range_80_9f);
          struct_Cc.cc = simd_or(struct_Cc.cc, r80_7ff_tmp7);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
  }
  CarryArray<1, 0> carryQ;
  };

  struct Cf {
  Cf() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Cf & struct_Cf) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f0, tmp7, tmp8, tmp9, tmp10;
		BitBlock tmp11, byte_91, tmp12, sequence_f0_91, byte_f0_adv, tmp13, tmp14;
		BitBlock tmp15, tmp16, byte_82, tmp17, sequence_f0_91_82, sequence_f0_91_adv;
		BitBlock tmp18, tmp19, tmp20, byte_bd, sequence_f0_91_82_adv, tmp21, byte_9d;
		BitBlock sequence_f0_9d, tmp22, tmp23, byte_85, tmp24, sequence_f0_9d_85;
		BitBlock sequence_f0_9d_adv, tmp25, tmp26, tmp27, tmp28, byte_range_b3_ba;
		BitBlock sequence_f0_9d_85_adv, tmp29, tmp30, byte_f3, tmp31, tmp32, byte_a0;
		BitBlock tmp33, sequence_f3_a0, byte_f3_adv, byte_80, tmp34, sequence_f3_a0_80;
		BitBlock sequence_f3_a0_adv, tmp35, tmp36, cc_range_e0001_e0020_4;
		BitBlock sequence_f3_a0_80_adv, tmp37, byte_81, sequence_f3_a0_81;
		BitBlock byte_range_80_bf, sequence_f3_a0_81_adv, tmp38, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, byte_c2, r80_7ff_tmp2, byte_ad, byte_c2_adv;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5, r80_7ff_tmp6, byte_d8;
		BitBlock r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13, cc_range_600_61c_2;
		BitBlock byte_d8_adv, r80_7ff_tmp14, r80_7ff_tmp15, byte_db, byte_db_adv;
		BitBlock r80_7ff_tmp16, byte_dc, r80_7ff_tmp17, byte_8f, byte_dc_adv;
		BitBlock r80_7ff_tmp18, byte_range_e0_ef, byte_e1, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, sequence_e1_a0, byte_e1_adv, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, byte_8e, sequence_e1_a0_adv, r800_ffff_tmp5, byte_e2;
		BitBlock r800_ffff_tmp6, sequence_e2_80, byte_e2_adv, r800_ffff_tmp7;
		BitBlock r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10, r800_ffff_tmp11;
		BitBlock r800_ffff_tmp12, cc_range_200b_202a_3, sequence_e2_80_adv;
		BitBlock r800_ffff_tmp13, sequence_e2_81, r800_ffff_tmp14, r800_ffff_tmp15;
		BitBlock r800_ffff_tmp16, r800_ffff_tmp17, r800_ffff_tmp18, r800_ffff_tmp19;
		BitBlock cc_range_2060_2066_3, sequence_e2_81_adv, r800_ffff_tmp20;
		BitBlock r800_ffff_tmp21, byte_ef, r800_ffff_tmp22, r800_ffff_tmp23;
		BitBlock r800_ffff_tmp24, byte_bb, r800_ffff_tmp25, sequence_ef_bb;
		BitBlock byte_ef_adv, byte_bf, sequence_ef_bb_adv, r800_ffff_tmp26;
		BitBlock sequence_ef_bf, r800_ffff_tmp27, byte_range_b9_bb, sequence_ef_bf_adv;
		BitBlock r800_ffff_tmp28;




        struct_Cf.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_f0 = simd_andc(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp11 = simd_andc(tmp10, tmp4);
        byte_91 = simd_and(tmp9, tmp11);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp12));
        sequence_f0_91 = simd_and(tmp12, byte_91);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
        tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp14 = simd_andc(tmp7, tmp13);
        tmp15 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp16 = simd_andc(tmp15, tmp4);
        byte_82 = simd_and(tmp14, tmp16);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(2), tmp17));
        sequence_f0_91_82 = simd_and(tmp17, byte_82);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(3), sequence_f0_91_adv));
        sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
        tmp18 = simd_and(tmp7, tmp2);
        tmp19 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp20 = simd_and(tmp19, tmp10);
        byte_bd = simd_and(tmp18, tmp20);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(4), sequence_f0_91_82_adv));
        tmp21 = simd_and(sequence_f0_91_82_adv, byte_bd);
        struct_Cf.cc = simd_or(struct_Cf.cc, tmp21);
        byte_9d = simd_and(tmp9, tmp20);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        tmp22 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp23 = simd_and(tmp22, tmp10);
        byte_85 = simd_and(tmp14, tmp23);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(5), tmp24));
        sequence_f0_9d_85 = simd_and(tmp24, byte_85);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(6), sequence_f0_9d_adv));
        sequence_f0_9d_85 = simd_and(sequence_f0_9d_adv, byte_85);
        tmp25 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp26 = simd_or(basis_bits.bit_5, tmp25);
        tmp27 = simd_not(tmp26);
        tmp28 = simd_or(simd_and(basis_bits.bit_4, tmp27), simd_andc(tmp26, basis_bits.bit_4));
        byte_range_b3_ba = simd_and(tmp18, tmp28);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(7), sequence_f0_9d_85_adv));
        tmp29 = simd_and(sequence_f0_9d_85_adv, byte_range_b3_ba);
        struct_Cf.cc = simd_or(struct_Cf.cc, tmp29);
        tmp30 = simd_andc(tmp25, tmp4);
        byte_f3 = simd_and(tmp3, tmp30);
        tmp31 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp32 = simd_and(tmp7, tmp31);
        byte_a0 = simd_andc(tmp32, tmp6);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(8), tmp33));
        sequence_f3_a0 = simd_and(tmp33, byte_a0);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(9), byte_f3_adv));
        sequence_f3_a0 = simd_and(byte_f3_adv, byte_a0);
        byte_80 = simd_andc(tmp14, tmp6);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(10), tmp34));
        sequence_f3_a0_80 = simd_and(tmp34, byte_80);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(11), sequence_f3_a0_adv));
        sequence_f3_a0_80 = simd_and(sequence_f3_a0_adv, byte_80);
        tmp35 = simd_and(tmp14, tmp11);
        tmp36 = simd_and(tmp7, basis_bits.bit_2);
        cc_range_e0001_e0020_4 = simd_or(tmp35, tmp36);
        carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_80, carryQ.get_carry_in(12), sequence_f3_a0_80_adv));
        tmp37 = simd_and(sequence_f3_a0_80_adv, cc_range_e0001_e0020_4);
        struct_Cf.cc = simd_or(struct_Cf.cc, tmp37);
        byte_81 = simd_and(tmp14, tmp11);
        sequence_f3_a0_81 = simd_and(sequence_f3_a0_adv, byte_81);
        sequence_f3_a0_81 = simd_and(sequence_f3_a0_adv, byte_81);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_81, carryQ.get_carry_in(13), sequence_f3_a0_81_adv));
        tmp38 = simd_and(sequence_f3_a0_81_adv, byte_range_80_bf);
        struct_Cf.cc = simd_or(struct_Cf.cc, tmp38);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(14, 4))) {
          r80_7ff_tmp1 = simd_andc(tmp1, tmp13);
          byte_c2 = simd_and(r80_7ff_tmp1, tmp16);
          r80_7ff_tmp2 = simd_and(byte_range_80_bf, tmp31);
          byte_ad = simd_and(r80_7ff_tmp2, tmp20);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(14), byte_c2_adv));
          r80_7ff_tmp3 = simd_and(byte_c2_adv, byte_ad);
          struct_Cf.cc = simd_or(struct_Cf.cc, r80_7ff_tmp3);
          r80_7ff_tmp4 = simd_and(tmp1, tmp8);
          r80_7ff_tmp5 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp6 = simd_andc(r80_7ff_tmp5, tmp5);
          byte_d8 = simd_and(r80_7ff_tmp4, r80_7ff_tmp6);
          r80_7ff_tmp7 = simd_andc(byte_range_80_bf, tmp13);
          r80_7ff_tmp8 = simd_andc(r80_7ff_tmp7, basis_bits.bit_4);
          r80_7ff_tmp9 = simd_and(basis_bits.bit_5, tmp5);
          r80_7ff_tmp10 = simd_andc(r80_7ff_tmp8, r80_7ff_tmp9);
          r80_7ff_tmp11 = simd_and(byte_range_80_bf, tmp8);
          r80_7ff_tmp12 = simd_andc(tmp19, tmp5);
          r80_7ff_tmp13 = simd_and(r80_7ff_tmp11, r80_7ff_tmp12);
          cc_range_600_61c_2 = simd_or(r80_7ff_tmp10, r80_7ff_tmp13);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(15), byte_d8_adv));
          r80_7ff_tmp14 = simd_and(byte_d8_adv, cc_range_600_61c_2);
          struct_Cf.cc = simd_or(struct_Cf.cc, r80_7ff_tmp14);
          r80_7ff_tmp15 = simd_and(r80_7ff_tmp5, tmp25);
          byte_db = simd_and(r80_7ff_tmp4, r80_7ff_tmp15);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(16), byte_db_adv));
          r80_7ff_tmp16 = simd_and(byte_db_adv, byte_9d);
          struct_Cf.cc = simd_or(struct_Cf.cc, r80_7ff_tmp16);
          byte_dc = simd_and(r80_7ff_tmp4, r80_7ff_tmp12);
          r80_7ff_tmp17 = simd_and(tmp19, tmp25);
          byte_8f = simd_and(r80_7ff_tmp7, r80_7ff_tmp17);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(17), byte_dc_adv));
          r80_7ff_tmp18 = simd_and(byte_dc_adv, byte_8f);
          struct_Cf.cc = simd_or(struct_Cf.cc, r80_7ff_tmp18);
        }
        else {
          carryQ.CarryDequeueEnqueue(14, 4);
        }
        byte_range_e0_ef = simd_and(tmp1, tmp31);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(18, 11))) {
          byte_e1 = simd_and(byte_range_e0_ef, tmp11);
          r800_ffff_tmp1 = simd_and(byte_range_80_bf, tmp31);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(18), r800_ffff_tmp2));
          sequence_e1_a0 = simd_and(r800_ffff_tmp2, byte_a0);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(19), byte_e1_adv));
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          r800_ffff_tmp3 = simd_andc(byte_range_80_bf, tmp13);
          r800_ffff_tmp4 = simd_and(tmp19, tmp15);
          byte_8e = simd_and(r800_ffff_tmp3, r800_ffff_tmp4);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(20), sequence_e1_a0_adv));
          r800_ffff_tmp5 = simd_and(sequence_e1_a0_adv, byte_8e);
          struct_Cf.cc = simd_or(struct_Cf.cc, r800_ffff_tmp5);
          byte_e2 = simd_and(byte_range_e0_ef, tmp16);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(21), r800_ffff_tmp6));
          sequence_e2_80 = simd_and(r800_ffff_tmp6, byte_80);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(22), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp7 = simd_and(r800_ffff_tmp3, basis_bits.bit_4);
          r800_ffff_tmp8 = simd_and(r800_ffff_tmp7, tmp26);
          r800_ffff_tmp9 = simd_and(r800_ffff_tmp1, basis_bits.bit_4);
          r800_ffff_tmp10 = simd_not(tmp25);
          r800_ffff_tmp11 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp10), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp12 = simd_and(r800_ffff_tmp9, r800_ffff_tmp11);
          cc_range_200b_202a_3 = simd_or(r800_ffff_tmp8, r800_ffff_tmp12);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(23), sequence_e2_80_adv));
          r800_ffff_tmp13 = simd_and(sequence_e2_80_adv, cc_range_200b_202a_3);
          struct_Cf.cc = simd_or(struct_Cf.cc, r800_ffff_tmp13);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          r800_ffff_tmp14 = simd_andc(r800_ffff_tmp1, basis_bits.bit_4);
          r800_ffff_tmp15 = simd_and(basis_bits.bit_5, tmp5);
          r800_ffff_tmp16 = simd_andc(r800_ffff_tmp14, r800_ffff_tmp15);
          r800_ffff_tmp17 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp18 = simd_or(basis_bits.bit_4, r800_ffff_tmp17);
          r800_ffff_tmp19 = simd_and(r800_ffff_tmp1, r800_ffff_tmp18);
          cc_range_2060_2066_3 = simd_or(r800_ffff_tmp16, r800_ffff_tmp19);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(24), sequence_e2_81_adv));
          r800_ffff_tmp20 = simd_and(sequence_e2_81_adv, cc_range_2060_2066_3);
          struct_Cf.cc = simd_or(struct_Cf.cc, r800_ffff_tmp20);
          r800_ffff_tmp21 = simd_and(tmp19, tmp25);
          byte_ef = simd_and(byte_range_e0_ef, r800_ffff_tmp21);
          r800_ffff_tmp22 = simd_and(byte_range_80_bf, tmp2);
          r800_ffff_tmp23 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp24 = simd_and(r800_ffff_tmp23, tmp25);
          byte_bb = simd_and(r800_ffff_tmp22, r800_ffff_tmp24);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(25), r800_ffff_tmp25));
          sequence_ef_bb = simd_and(r800_ffff_tmp25, byte_bb);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(26), byte_ef_adv));
          sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
          byte_bf = simd_and(r800_ffff_tmp22, r800_ffff_tmp21);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(27), sequence_ef_bb_adv));
          r800_ffff_tmp26 = simd_and(sequence_ef_bb_adv, byte_bf);
          struct_Cf.cc = simd_or(struct_Cf.cc, r800_ffff_tmp26);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          r800_ffff_tmp27 = simd_and(r800_ffff_tmp22, r800_ffff_tmp23);
          byte_range_b9_bb = simd_and(r800_ffff_tmp27, tmp5);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(28), sequence_ef_bf_adv));
          r800_ffff_tmp28 = simd_and(sequence_ef_bf_adv, byte_range_b9_bb);
          struct_Cf.cc = simd_or(struct_Cf.cc, r800_ffff_tmp28);
        }
        else {
          carryQ.CarryDequeueEnqueue(18, 11);
        }
        carryQ.CarryQ_Adjust(29);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Cf & struct_Cf, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_f0, tmp7, tmp8, tmp9, tmp10;
		BitBlock tmp11, byte_91, tmp12, sequence_f0_91, byte_f0_adv, tmp13, tmp14;
		BitBlock tmp15, tmp16, byte_82, tmp17, sequence_f0_91_82, sequence_f0_91_adv;
		BitBlock tmp18, tmp19, tmp20, byte_bd, sequence_f0_91_82_adv, tmp21, byte_9d;
		BitBlock sequence_f0_9d, tmp22, tmp23, byte_85, tmp24, sequence_f0_9d_85;
		BitBlock sequence_f0_9d_adv, tmp25, tmp26, tmp27, tmp28, byte_range_b3_ba;
		BitBlock sequence_f0_9d_85_adv, tmp29, tmp30, byte_f3, tmp31, tmp32, byte_a0;
		BitBlock tmp33, sequence_f3_a0, byte_f3_adv, byte_80, tmp34, sequence_f3_a0_80;
		BitBlock sequence_f3_a0_adv, tmp35, tmp36, cc_range_e0001_e0020_4;
		BitBlock sequence_f3_a0_80_adv, tmp37, byte_81, sequence_f3_a0_81;
		BitBlock byte_range_80_bf, sequence_f3_a0_81_adv, tmp38, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, byte_c2, r80_7ff_tmp2, byte_ad, byte_c2_adv;
		BitBlock r80_7ff_tmp3, r80_7ff_tmp4, r80_7ff_tmp5, r80_7ff_tmp6, byte_d8;
		BitBlock r80_7ff_tmp7, r80_7ff_tmp8, r80_7ff_tmp9, r80_7ff_tmp10;
		BitBlock r80_7ff_tmp11, r80_7ff_tmp12, r80_7ff_tmp13, cc_range_600_61c_2;
		BitBlock byte_d8_adv, r80_7ff_tmp14, r80_7ff_tmp15, byte_db, byte_db_adv;
		BitBlock r80_7ff_tmp16, byte_dc, r80_7ff_tmp17, byte_8f, byte_dc_adv;
		BitBlock r80_7ff_tmp18, byte_range_e0_ef, byte_e1, r800_ffff_tmp1;
		BitBlock r800_ffff_tmp2, sequence_e1_a0, byte_e1_adv, r800_ffff_tmp3;
		BitBlock r800_ffff_tmp4, byte_8e, sequence_e1_a0_adv, r800_ffff_tmp5, byte_e2;
		BitBlock r800_ffff_tmp6, sequence_e2_80, byte_e2_adv, r800_ffff_tmp7;
		BitBlock r800_ffff_tmp8, r800_ffff_tmp9, r800_ffff_tmp10, r800_ffff_tmp11;
		BitBlock r800_ffff_tmp12, cc_range_200b_202a_3, sequence_e2_80_adv;
		BitBlock r800_ffff_tmp13, sequence_e2_81, r800_ffff_tmp14, r800_ffff_tmp15;
		BitBlock r800_ffff_tmp16, r800_ffff_tmp17, r800_ffff_tmp18, r800_ffff_tmp19;
		BitBlock cc_range_2060_2066_3, sequence_e2_81_adv, r800_ffff_tmp20;
		BitBlock r800_ffff_tmp21, byte_ef, r800_ffff_tmp22, r800_ffff_tmp23;
		BitBlock r800_ffff_tmp24, byte_bb, r800_ffff_tmp25, sequence_ef_bb;
		BitBlock byte_ef_adv, byte_bf, sequence_ef_bb_adv, r800_ffff_tmp26;
		BitBlock sequence_ef_bf, r800_ffff_tmp27, byte_range_b9_bb, sequence_ef_bf_adv;
		BitBlock r800_ffff_tmp28;




        struct_Cf.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_and(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_and(tmp1, tmp2);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_f0 = simd_andc(tmp3, tmp6);
        tmp7 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        tmp8 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
        tmp9 = simd_and(tmp7, tmp8);
        tmp10 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
        tmp11 = simd_andc(tmp10, tmp4);
        byte_91 = simd_and(tmp9, tmp11);
        carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(0), tmp12));
        sequence_f0_91 = simd_and(tmp12, byte_91);
        carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_f0, carryQ.get_carry_in(1), byte_f0_adv));
        sequence_f0_91 = simd_and(byte_f0_adv, byte_91);
        tmp13 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
        tmp14 = simd_andc(tmp7, tmp13);
        tmp15 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
        tmp16 = simd_andc(tmp15, tmp4);
        byte_82 = simd_and(tmp14, tmp16);
        carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(2), tmp17));
        sequence_f0_91_82 = simd_and(tmp17, byte_82);
        carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_f0_91, carryQ.get_carry_in(3), sequence_f0_91_adv));
        sequence_f0_91_82 = simd_and(sequence_f0_91_adv, byte_82);
        tmp18 = simd_and(tmp7, tmp2);
        tmp19 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
        tmp20 = simd_and(tmp19, tmp10);
        byte_bd = simd_and(tmp18, tmp20);
        carryQ.cq[4] = carryout2carry(pablo_blk_Advance(sequence_f0_91_82, carryQ.get_carry_in(4), sequence_f0_91_82_adv));
        tmp21 = simd_and(sequence_f0_91_82_adv, byte_bd);
        struct_Cf.cc = simd_or(struct_Cf.cc, tmp21);
        byte_9d = simd_and(tmp9, tmp20);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        sequence_f0_9d = simd_and(byte_f0_adv, byte_9d);
        tmp22 = simd_andc(basis_bits.bit_5, basis_bits.bit_4);
        tmp23 = simd_and(tmp22, tmp10);
        byte_85 = simd_and(tmp14, tmp23);
        carryQ.cq[5] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(5), tmp24));
        sequence_f0_9d_85 = simd_and(tmp24, byte_85);
        carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_f0_9d, carryQ.get_carry_in(6), sequence_f0_9d_adv));
        sequence_f0_9d_85 = simd_and(sequence_f0_9d_adv, byte_85);
        tmp25 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
        tmp26 = simd_or(basis_bits.bit_5, tmp25);
        tmp27 = simd_not(tmp26);
        tmp28 = simd_or(simd_and(basis_bits.bit_4, tmp27), simd_andc(tmp26, basis_bits.bit_4));
        byte_range_b3_ba = simd_and(tmp18, tmp28);
        carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_f0_9d_85, carryQ.get_carry_in(7), sequence_f0_9d_85_adv));
        tmp29 = simd_and(sequence_f0_9d_85_adv, byte_range_b3_ba);
        struct_Cf.cc = simd_or(struct_Cf.cc, tmp29);
        tmp30 = simd_andc(tmp25, tmp4);
        byte_f3 = simd_and(tmp3, tmp30);
        tmp31 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp32 = simd_and(tmp7, tmp31);
        byte_a0 = simd_andc(tmp32, tmp6);
        carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(8), tmp33));
        sequence_f3_a0 = simd_and(tmp33, byte_a0);
        carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_f3, carryQ.get_carry_in(9), byte_f3_adv));
        sequence_f3_a0 = simd_and(byte_f3_adv, byte_a0);
        byte_80 = simd_andc(tmp14, tmp6);
        carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(10), tmp34));
        sequence_f3_a0_80 = simd_and(tmp34, byte_80);
        carryQ.cq[11] = carryout2carry(pablo_blk_Advance(sequence_f3_a0, carryQ.get_carry_in(11), sequence_f3_a0_adv));
        sequence_f3_a0_80 = simd_and(sequence_f3_a0_adv, byte_80);
        tmp35 = simd_and(tmp14, tmp11);
        tmp36 = simd_and(tmp7, basis_bits.bit_2);
        cc_range_e0001_e0020_4 = simd_or(tmp35, tmp36);
        carryQ.cq[12] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_80, carryQ.get_carry_in(12), sequence_f3_a0_80_adv));
        tmp37 = simd_and(sequence_f3_a0_80_adv, cc_range_e0001_e0020_4);
        struct_Cf.cc = simd_or(struct_Cf.cc, tmp37);
        byte_81 = simd_and(tmp14, tmp11);
        sequence_f3_a0_81 = simd_and(sequence_f3_a0_adv, byte_81);
        sequence_f3_a0_81 = simd_and(sequence_f3_a0_adv, byte_81);
        byte_range_80_bf = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
        carryQ.cq[13] = carryout2carry(pablo_blk_Advance(sequence_f3_a0_81, carryQ.get_carry_in(13), sequence_f3_a0_81_adv));
        tmp38 = simd_and(sequence_f3_a0_81_adv, byte_range_80_bf);
        struct_Cf.cc = simd_or(struct_Cf.cc, tmp38);
        byte_range_c0_df = simd_andc(tmp1, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(14, 4))) {
          r80_7ff_tmp1 = simd_andc(tmp1, tmp13);
          byte_c2 = simd_and(r80_7ff_tmp1, tmp16);
          r80_7ff_tmp2 = simd_and(byte_range_80_bf, tmp31);
          byte_ad = simd_and(r80_7ff_tmp2, tmp20);
          carryQ.cq[14] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(14), byte_c2_adv));
          r80_7ff_tmp3 = simd_and(byte_c2_adv, byte_ad);
          struct_Cf.cc = simd_or(struct_Cf.cc, r80_7ff_tmp3);
          r80_7ff_tmp4 = simd_and(tmp1, tmp8);
          r80_7ff_tmp5 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r80_7ff_tmp6 = simd_andc(r80_7ff_tmp5, tmp5);
          byte_d8 = simd_and(r80_7ff_tmp4, r80_7ff_tmp6);
          r80_7ff_tmp7 = simd_andc(byte_range_80_bf, tmp13);
          r80_7ff_tmp8 = simd_andc(r80_7ff_tmp7, basis_bits.bit_4);
          r80_7ff_tmp9 = simd_and(basis_bits.bit_5, tmp5);
          r80_7ff_tmp10 = simd_andc(r80_7ff_tmp8, r80_7ff_tmp9);
          r80_7ff_tmp11 = simd_and(byte_range_80_bf, tmp8);
          r80_7ff_tmp12 = simd_andc(tmp19, tmp5);
          r80_7ff_tmp13 = simd_and(r80_7ff_tmp11, r80_7ff_tmp12);
          cc_range_600_61c_2 = simd_or(r80_7ff_tmp10, r80_7ff_tmp13);
          carryQ.cq[15] = carryout2carry(pablo_blk_Advance(byte_d8, carryQ.get_carry_in(15), byte_d8_adv));
          r80_7ff_tmp14 = simd_and(byte_d8_adv, cc_range_600_61c_2);
          struct_Cf.cc = simd_or(struct_Cf.cc, r80_7ff_tmp14);
          r80_7ff_tmp15 = simd_and(r80_7ff_tmp5, tmp25);
          byte_db = simd_and(r80_7ff_tmp4, r80_7ff_tmp15);
          carryQ.cq[16] = carryout2carry(pablo_blk_Advance(byte_db, carryQ.get_carry_in(16), byte_db_adv));
          r80_7ff_tmp16 = simd_and(byte_db_adv, byte_9d);
          struct_Cf.cc = simd_or(struct_Cf.cc, r80_7ff_tmp16);
          byte_dc = simd_and(r80_7ff_tmp4, r80_7ff_tmp12);
          r80_7ff_tmp17 = simd_and(tmp19, tmp25);
          byte_8f = simd_and(r80_7ff_tmp7, r80_7ff_tmp17);
          carryQ.cq[17] = carryout2carry(pablo_blk_Advance(byte_dc, carryQ.get_carry_in(17), byte_dc_adv));
          r80_7ff_tmp18 = simd_and(byte_dc_adv, byte_8f);
          struct_Cf.cc = simd_or(struct_Cf.cc, r80_7ff_tmp18);
        }
        else {
          carryQ.CarryDequeueEnqueue(14, 4);
        }
        byte_range_e0_ef = simd_and(tmp1, tmp31);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(18, 11))) {
          byte_e1 = simd_and(byte_range_e0_ef, tmp11);
          r800_ffff_tmp1 = simd_and(byte_range_80_bf, tmp31);
          carryQ.cq[18] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(18), r800_ffff_tmp2));
          sequence_e1_a0 = simd_and(r800_ffff_tmp2, byte_a0);
          carryQ.cq[19] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(19), byte_e1_adv));
          sequence_e1_a0 = simd_and(byte_e1_adv, byte_a0);
          r800_ffff_tmp3 = simd_andc(byte_range_80_bf, tmp13);
          r800_ffff_tmp4 = simd_and(tmp19, tmp15);
          byte_8e = simd_and(r800_ffff_tmp3, r800_ffff_tmp4);
          carryQ.cq[20] = carryout2carry(pablo_blk_Advance(sequence_e1_a0, carryQ.get_carry_in(20), sequence_e1_a0_adv));
          r800_ffff_tmp5 = simd_and(sequence_e1_a0_adv, byte_8e);
          struct_Cf.cc = simd_or(struct_Cf.cc, r800_ffff_tmp5);
          byte_e2 = simd_and(byte_range_e0_ef, tmp16);
          carryQ.cq[21] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(21), r800_ffff_tmp6));
          sequence_e2_80 = simd_and(r800_ffff_tmp6, byte_80);
          carryQ.cq[22] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(22), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp7 = simd_and(r800_ffff_tmp3, basis_bits.bit_4);
          r800_ffff_tmp8 = simd_and(r800_ffff_tmp7, tmp26);
          r800_ffff_tmp9 = simd_and(r800_ffff_tmp1, basis_bits.bit_4);
          r800_ffff_tmp10 = simd_not(tmp25);
          r800_ffff_tmp11 = simd_or(simd_and(basis_bits.bit_5, r800_ffff_tmp10), simd_andc(basis_bits.bit_6, basis_bits.bit_5));
          r800_ffff_tmp12 = simd_and(r800_ffff_tmp9, r800_ffff_tmp11);
          cc_range_200b_202a_3 = simd_or(r800_ffff_tmp8, r800_ffff_tmp12);
          carryQ.cq[23] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(23), sequence_e2_80_adv));
          r800_ffff_tmp13 = simd_and(sequence_e2_80_adv, cc_range_200b_202a_3);
          struct_Cf.cc = simd_or(struct_Cf.cc, r800_ffff_tmp13);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          r800_ffff_tmp14 = simd_andc(r800_ffff_tmp1, basis_bits.bit_4);
          r800_ffff_tmp15 = simd_and(basis_bits.bit_5, tmp5);
          r800_ffff_tmp16 = simd_andc(r800_ffff_tmp14, r800_ffff_tmp15);
          r800_ffff_tmp17 = simd_and(basis_bits.bit_5, basis_bits.bit_6);
          r800_ffff_tmp18 = simd_or(basis_bits.bit_4, r800_ffff_tmp17);
          r800_ffff_tmp19 = simd_and(r800_ffff_tmp1, r800_ffff_tmp18);
          cc_range_2060_2066_3 = simd_or(r800_ffff_tmp16, r800_ffff_tmp19);
          carryQ.cq[24] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(24), sequence_e2_81_adv));
          r800_ffff_tmp20 = simd_and(sequence_e2_81_adv, cc_range_2060_2066_3);
          struct_Cf.cc = simd_or(struct_Cf.cc, r800_ffff_tmp20);
          r800_ffff_tmp21 = simd_and(tmp19, tmp25);
          byte_ef = simd_and(byte_range_e0_ef, r800_ffff_tmp21);
          r800_ffff_tmp22 = simd_and(byte_range_80_bf, tmp2);
          r800_ffff_tmp23 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp24 = simd_and(r800_ffff_tmp23, tmp25);
          byte_bb = simd_and(r800_ffff_tmp22, r800_ffff_tmp24);
          carryQ.cq[25] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(25), r800_ffff_tmp25));
          sequence_ef_bb = simd_and(r800_ffff_tmp25, byte_bb);
          carryQ.cq[26] = carryout2carry(pablo_blk_Advance(byte_ef, carryQ.get_carry_in(26), byte_ef_adv));
          sequence_ef_bb = simd_and(byte_ef_adv, byte_bb);
          byte_bf = simd_and(r800_ffff_tmp22, r800_ffff_tmp21);
          carryQ.cq[27] = carryout2carry(pablo_blk_Advance(sequence_ef_bb, carryQ.get_carry_in(27), sequence_ef_bb_adv));
          r800_ffff_tmp26 = simd_and(sequence_ef_bb_adv, byte_bf);
          struct_Cf.cc = simd_or(struct_Cf.cc, r800_ffff_tmp26);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          sequence_ef_bf = simd_and(byte_ef_adv, byte_bf);
          r800_ffff_tmp27 = simd_and(r800_ffff_tmp22, r800_ffff_tmp23);
          byte_range_b9_bb = simd_and(r800_ffff_tmp27, tmp5);
          carryQ.cq[28] = carryout2carry(pablo_blk_Advance(sequence_ef_bf, carryQ.get_carry_in(28), sequence_ef_bf_adv));
          r800_ffff_tmp28 = simd_and(sequence_ef_bf_adv, byte_range_b9_bb);
          struct_Cf.cc = simd_or(struct_Cf.cc, r800_ffff_tmp28);
        }
        else {
          carryQ.CarryDequeueEnqueue(18, 11);
        }
  }
  CarryArray<29, 0> carryQ;
  };

  struct Cs {
  
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Cs & struct_Cs) {
		BitBlock tmp1, tmp2, byte_range_e0_ef;




        struct_Cs.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp2);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Cs & struct_Cs, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, byte_range_e0_ef;




        struct_Cs.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp2);
  }
  
  };

  struct Zp {
  Zp() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Zp & struct_Zp) {
		BitBlock tmp1, tmp2, byte_range_e0_ef, r800_ffff_tmp1, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, byte_e2, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8, byte_80;
		BitBlock r800_ffff_tmp9, sequence_e2_80, byte_e2_adv, r800_ffff_tmp10;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13, byte_a9;
		BitBlock sequence_e2_80_adv, r800_ffff_tmp14;




        struct_Zp.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp3 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp3);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp6 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp8 = simd_or(r800_ffff_tmp1, r800_ffff_tmp7);
          byte_80 = simd_andc(r800_ffff_tmp6, r800_ffff_tmp8);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(0), r800_ffff_tmp9));
          sequence_e2_80 = simd_and(r800_ffff_tmp9, byte_80);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp10 = simd_and(r800_ffff_tmp4, tmp2);
          r800_ffff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp13 = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
          byte_a9 = simd_and(r800_ffff_tmp10, r800_ffff_tmp13);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(2), sequence_e2_80_adv));
          r800_ffff_tmp14 = simd_and(sequence_e2_80_adv, byte_a9);
          struct_Zp.cc = simd_or(struct_Zp.cc, r800_ffff_tmp14);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
        carryQ.CarryQ_Adjust(3);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Zp & struct_Zp, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, byte_range_e0_ef, r800_ffff_tmp1, r800_ffff_tmp2;
		BitBlock r800_ffff_tmp3, byte_e2, r800_ffff_tmp4, r800_ffff_tmp5;
		BitBlock r800_ffff_tmp6, r800_ffff_tmp7, r800_ffff_tmp8, byte_80;
		BitBlock r800_ffff_tmp9, sequence_e2_80, byte_e2_adv, r800_ffff_tmp10;
		BitBlock r800_ffff_tmp11, r800_ffff_tmp12, r800_ffff_tmp13, byte_a9;
		BitBlock sequence_e2_80_adv, r800_ffff_tmp14;




        struct_Zp.cc = simd<1>::constant<0>();
        tmp1 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        byte_range_e0_ef = simd_and(tmp1, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(0, 3))) {
          r800_ffff_tmp1 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp2 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp3 = simd_andc(r800_ffff_tmp2, r800_ffff_tmp1);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp3);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp5 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp6 = simd_andc(r800_ffff_tmp4, r800_ffff_tmp5);
          r800_ffff_tmp7 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp8 = simd_or(r800_ffff_tmp1, r800_ffff_tmp7);
          byte_80 = simd_andc(r800_ffff_tmp6, r800_ffff_tmp8);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(0), r800_ffff_tmp9));
          sequence_e2_80 = simd_and(r800_ffff_tmp9, byte_80);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(1), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp10 = simd_and(r800_ffff_tmp4, tmp2);
          r800_ffff_tmp11 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp12 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp13 = simd_and(r800_ffff_tmp11, r800_ffff_tmp12);
          byte_a9 = simd_and(r800_ffff_tmp10, r800_ffff_tmp13);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(2), sequence_e2_80_adv));
          r800_ffff_tmp14 = simd_and(sequence_e2_80_adv, byte_a9);
          struct_Zp.cc = simd_or(struct_Zp.cc, r800_ffff_tmp14);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 3);
        }
  }
  CarryArray<3, 0> carryQ;
  };

  struct Zs {
  Zs() { 
 }
  IDISA_INLINE void do_block(Basis_bits & basis_bits, Struct_Zs & struct_Zs) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_20, tmp7, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, byte_c2;
		BitBlock r80_7ff_tmp5, r80_7ff_tmp6, byte_a0, byte_c2_adv, r80_7ff_tmp7;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, r800_ffff_tmp2, byte_e1;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, r800_ffff_tmp8, byte_9a, r800_ffff_tmp9;
		BitBlock sequence_e1_9a, byte_e1_adv, r800_ffff_tmp10, r800_ffff_tmp11;
		BitBlock byte_80, sequence_e1_9a_adv, r800_ffff_tmp12, r800_ffff_tmp13;
		BitBlock byte_e2, r800_ffff_tmp14, sequence_e2_80, byte_e2_adv;
		BitBlock r800_ffff_tmp15, r800_ffff_tmp16, r800_ffff_tmp17, r800_ffff_tmp18;
		BitBlock r800_ffff_tmp19, r800_ffff_tmp20, r800_ffff_tmp21, r800_ffff_tmp22;
		BitBlock cc_range_2000_202f_3, sequence_e2_80_adv, r800_ffff_tmp23, byte_81;
		BitBlock sequence_e2_81, byte_9f, sequence_e2_81_adv, r800_ffff_tmp24;
		BitBlock r800_ffff_tmp25, byte_e3, r800_ffff_tmp26, sequence_e3_80;
		BitBlock byte_e3_adv, sequence_e3_80_adv, r800_ffff_tmp27;




        struct_Zs.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_20 = simd_andc(tmp3, tmp6);
        struct_Zs.cc = simd_or(struct_Zs.cc, byte_20);
        tmp7 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_c0_df = simd_andc(tmp7, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
          r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp2 = simd_andc(tmp7, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, tmp4);
          byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
          r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r80_7ff_tmp6 = simd_and(r80_7ff_tmp5, tmp2);
          byte_a0 = simd_andc(r80_7ff_tmp6, tmp6);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
          r80_7ff_tmp7 = simd_and(byte_c2_adv, byte_a0);
          struct_Zs.cc = simd_or(struct_Zs.cc, r80_7ff_tmp7);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        byte_range_e0_ef = simd_and(tmp7, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 10))) {
          r800_ffff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp4);
          byte_e1 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
          r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r800_ffff_tmp5 = simd_and(r800_ffff_tmp3, r800_ffff_tmp4);
          r800_ffff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp7 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp8 = simd_and(r800_ffff_tmp6, r800_ffff_tmp7);
          byte_9a = simd_and(r800_ffff_tmp5, r800_ffff_tmp8);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r800_ffff_tmp9));
          sequence_e1_9a = simd_and(r800_ffff_tmp9, byte_9a);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(2), byte_e1_adv));
          sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
          r800_ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp11 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp10);
          byte_80 = simd_andc(r800_ffff_tmp11, tmp6);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(3), sequence_e1_9a_adv));
          r800_ffff_tmp12 = simd_and(sequence_e1_9a_adv, byte_80);
          struct_Zs.cc = simd_or(struct_Zs.cc, r800_ffff_tmp12);
          r800_ffff_tmp13 = simd_andc(r800_ffff_tmp7, tmp4);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp13);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(4), r800_ffff_tmp14));
          sequence_e2_80 = simd_and(r800_ffff_tmp14, byte_80);
          carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(5), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp16 = simd_or(basis_bits.bit_5, r800_ffff_tmp15);
          r800_ffff_tmp17 = simd_and(basis_bits.bit_4, r800_ffff_tmp16);
          r800_ffff_tmp18 = simd_andc(r800_ffff_tmp11, r800_ffff_tmp17);
          r800_ffff_tmp19 = simd_and(r800_ffff_tmp3, tmp2);
          r800_ffff_tmp20 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp21 = simd_and(r800_ffff_tmp20, r800_ffff_tmp15);
          r800_ffff_tmp22 = simd_and(r800_ffff_tmp19, r800_ffff_tmp21);
          cc_range_2000_202f_3 = simd_or(r800_ffff_tmp18, r800_ffff_tmp22);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(6), sequence_e2_80_adv));
          r800_ffff_tmp23 = simd_and(sequence_e2_80_adv, cc_range_2000_202f_3);
          struct_Zs.cc = simd_or(struct_Zs.cc, r800_ffff_tmp23);
          byte_81 = simd_and(r800_ffff_tmp11, r800_ffff_tmp2);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          byte_9f = simd_and(r800_ffff_tmp5, r800_ffff_tmp21);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(7), sequence_e2_81_adv));
          r800_ffff_tmp24 = simd_and(sequence_e2_81_adv, byte_9f);
          struct_Zs.cc = simd_or(struct_Zs.cc, r800_ffff_tmp24);
          r800_ffff_tmp25 = simd_andc(r800_ffff_tmp15, tmp4);
          byte_e3 = simd_and(byte_range_e0_ef, r800_ffff_tmp25);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(8), r800_ffff_tmp26));
          sequence_e3_80 = simd_and(r800_ffff_tmp26, byte_80);
          carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(9), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(10), sequence_e3_80_adv));
          r800_ffff_tmp27 = simd_and(sequence_e3_80_adv, byte_80);
          struct_Zs.cc = simd_or(struct_Zs.cc, r800_ffff_tmp27);
        }
        else {
          carryQ.CarryDequeueEnqueue(1, 10);
        }
        carryQ.CarryQ_Adjust(11);
  }
  IDISA_INLINE void clear() { 
 }
  void do_final_block(Basis_bits & basis_bits, Struct_Zs & struct_Zs, BitBlock EOF_mask) {
		BitBlock tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, byte_20, tmp7, byte_range_c0_df;
		BitBlock r80_7ff_tmp1, r80_7ff_tmp2, r80_7ff_tmp3, r80_7ff_tmp4, byte_c2;
		BitBlock r80_7ff_tmp5, r80_7ff_tmp6, byte_a0, byte_c2_adv, r80_7ff_tmp7;
		BitBlock byte_range_e0_ef, r800_ffff_tmp1, r800_ffff_tmp2, byte_e1;
		BitBlock r800_ffff_tmp3, r800_ffff_tmp4, r800_ffff_tmp5, r800_ffff_tmp6;
		BitBlock r800_ffff_tmp7, r800_ffff_tmp8, byte_9a, r800_ffff_tmp9;
		BitBlock sequence_e1_9a, byte_e1_adv, r800_ffff_tmp10, r800_ffff_tmp11;
		BitBlock byte_80, sequence_e1_9a_adv, r800_ffff_tmp12, r800_ffff_tmp13;
		BitBlock byte_e2, r800_ffff_tmp14, sequence_e2_80, byte_e2_adv;
		BitBlock r800_ffff_tmp15, r800_ffff_tmp16, r800_ffff_tmp17, r800_ffff_tmp18;
		BitBlock r800_ffff_tmp19, r800_ffff_tmp20, r800_ffff_tmp21, r800_ffff_tmp22;
		BitBlock cc_range_2000_202f_3, sequence_e2_80_adv, r800_ffff_tmp23, byte_81;
		BitBlock sequence_e2_81, byte_9f, sequence_e2_81_adv, r800_ffff_tmp24;
		BitBlock r800_ffff_tmp25, byte_e3, r800_ffff_tmp26, sequence_e3_80;
		BitBlock byte_e3_adv, sequence_e3_80_adv, r800_ffff_tmp27;




        struct_Zs.cc = simd<1>::constant<0>();
        tmp1 = simd_or(basis_bits.bit_0, basis_bits.bit_1);
        tmp2 = simd_andc(basis_bits.bit_2, basis_bits.bit_3);
        tmp3 = simd_andc(tmp2, tmp1);
        tmp4 = simd_or(basis_bits.bit_4, basis_bits.bit_5);
        tmp5 = simd_or(basis_bits.bit_6, basis_bits.bit_7);
        tmp6 = simd_or(tmp4, tmp5);
        byte_20 = simd_andc(tmp3, tmp6);
        struct_Zs.cc = simd_or(struct_Zs.cc, byte_20);
        tmp7 = simd_and(basis_bits.bit_0, basis_bits.bit_1);
        byte_range_c0_df = simd_andc(tmp7, basis_bits.bit_2);
        if ((bitblock::any(byte_range_c0_df) || carryQ.CarryTest(0, 1))) {
          r80_7ff_tmp1 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r80_7ff_tmp2 = simd_andc(tmp7, r80_7ff_tmp1);
          r80_7ff_tmp3 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r80_7ff_tmp4 = simd_andc(r80_7ff_tmp3, tmp4);
          byte_c2 = simd_and(r80_7ff_tmp2, r80_7ff_tmp4);
          r80_7ff_tmp5 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r80_7ff_tmp6 = simd_and(r80_7ff_tmp5, tmp2);
          byte_a0 = simd_andc(r80_7ff_tmp6, tmp6);
          carryQ.cq[0] = carryout2carry(pablo_blk_Advance(byte_c2, carryQ.get_carry_in(0), byte_c2_adv));
          r80_7ff_tmp7 = simd_and(byte_c2_adv, byte_a0);
          struct_Zs.cc = simd_or(struct_Zs.cc, r80_7ff_tmp7);
        }
        else {
          carryQ.CarryDequeueEnqueue(0, 1);
        }
        byte_range_e0_ef = simd_and(tmp7, tmp2);
        if ((bitblock::any(byte_range_e0_ef) || carryQ.CarryTest(1, 10))) {
          r800_ffff_tmp1 = simd_andc(basis_bits.bit_7, basis_bits.bit_6);
          r800_ffff_tmp2 = simd_andc(r800_ffff_tmp1, tmp4);
          byte_e1 = simd_and(byte_range_e0_ef, r800_ffff_tmp2);
          r800_ffff_tmp3 = simd_andc(basis_bits.bit_0, basis_bits.bit_1);
          r800_ffff_tmp4 = simd_andc(basis_bits.bit_3, basis_bits.bit_2);
          r800_ffff_tmp5 = simd_and(r800_ffff_tmp3, r800_ffff_tmp4);
          r800_ffff_tmp6 = simd_andc(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp7 = simd_andc(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp8 = simd_and(r800_ffff_tmp6, r800_ffff_tmp7);
          byte_9a = simd_and(r800_ffff_tmp5, r800_ffff_tmp8);
          carryQ.cq[1] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(1), r800_ffff_tmp9));
          sequence_e1_9a = simd_and(r800_ffff_tmp9, byte_9a);
          carryQ.cq[2] = carryout2carry(pablo_blk_Advance(byte_e1, carryQ.get_carry_in(2), byte_e1_adv));
          sequence_e1_9a = simd_and(byte_e1_adv, byte_9a);
          r800_ffff_tmp10 = simd_or(basis_bits.bit_2, basis_bits.bit_3);
          r800_ffff_tmp11 = simd_andc(r800_ffff_tmp3, r800_ffff_tmp10);
          byte_80 = simd_andc(r800_ffff_tmp11, tmp6);
          carryQ.cq[3] = carryout2carry(pablo_blk_Advance(sequence_e1_9a, carryQ.get_carry_in(3), sequence_e1_9a_adv));
          r800_ffff_tmp12 = simd_and(sequence_e1_9a_adv, byte_80);
          struct_Zs.cc = simd_or(struct_Zs.cc, r800_ffff_tmp12);
          r800_ffff_tmp13 = simd_andc(r800_ffff_tmp7, tmp4);
          byte_e2 = simd_and(byte_range_e0_ef, r800_ffff_tmp13);
          carryQ.cq[4] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(4), r800_ffff_tmp14));
          sequence_e2_80 = simd_and(r800_ffff_tmp14, byte_80);
          carryQ.cq[5] = carryout2carry(pablo_blk_Advance(byte_e2, carryQ.get_carry_in(5), byte_e2_adv));
          sequence_e2_80 = simd_and(byte_e2_adv, byte_80);
          r800_ffff_tmp15 = simd_and(basis_bits.bit_6, basis_bits.bit_7);
          r800_ffff_tmp16 = simd_or(basis_bits.bit_5, r800_ffff_tmp15);
          r800_ffff_tmp17 = simd_and(basis_bits.bit_4, r800_ffff_tmp16);
          r800_ffff_tmp18 = simd_andc(r800_ffff_tmp11, r800_ffff_tmp17);
          r800_ffff_tmp19 = simd_and(r800_ffff_tmp3, tmp2);
          r800_ffff_tmp20 = simd_and(basis_bits.bit_4, basis_bits.bit_5);
          r800_ffff_tmp21 = simd_and(r800_ffff_tmp20, r800_ffff_tmp15);
          r800_ffff_tmp22 = simd_and(r800_ffff_tmp19, r800_ffff_tmp21);
          cc_range_2000_202f_3 = simd_or(r800_ffff_tmp18, r800_ffff_tmp22);
          carryQ.cq[6] = carryout2carry(pablo_blk_Advance(sequence_e2_80, carryQ.get_carry_in(6), sequence_e2_80_adv));
          r800_ffff_tmp23 = simd_and(sequence_e2_80_adv, cc_range_2000_202f_3);
          struct_Zs.cc = simd_or(struct_Zs.cc, r800_ffff_tmp23);
          byte_81 = simd_and(r800_ffff_tmp11, r800_ffff_tmp2);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          sequence_e2_81 = simd_and(byte_e2_adv, byte_81);
          byte_9f = simd_and(r800_ffff_tmp5, r800_ffff_tmp21);
          carryQ.cq[7] = carryout2carry(pablo_blk_Advance(sequence_e2_81, carryQ.get_carry_in(7), sequence_e2_81_adv));
          r800_ffff_tmp24 = simd_and(sequence_e2_81_adv, byte_9f);
          struct_Zs.cc = simd_or(struct_Zs.cc, r800_ffff_tmp24);
          r800_ffff_tmp25 = simd_andc(r800_ffff_tmp15, tmp4);
          byte_e3 = simd_and(byte_range_e0_ef, r800_ffff_tmp25);
          carryQ.cq[8] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(8), r800_ffff_tmp26));
          sequence_e3_80 = simd_and(r800_ffff_tmp26, byte_80);
          carryQ.cq[9] = carryout2carry(pablo_blk_Advance(byte_e3, carryQ.get_carry_in(9), byte_e3_adv));
          sequence_e3_80 = simd_and(byte_e3_adv, byte_80);
          carryQ.cq[10] = carryout2carry(pablo_blk_Advance(sequence_e3_80, carryQ.get_carry_in(10), sequence_e3_80_adv));
          r800_ffff_tmp27 = simd_and(sequence_e3_80_adv, byte_80);
          struct_Zs.cc = simd_or(struct_Zs.cc, r800_ffff_tmp27);
        }
        else {
          carryQ.CarryDequeueEnqueue(1, 10);
        }
  }
  CarryArray<11, 0> carryQ;
  };



#endif // UNICODE_CATEGORIES_H

