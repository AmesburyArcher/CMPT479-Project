/*
 *  Copyright (c) 2019 International Characters.
 *  This software is licensed to the public under the Open Software License 3.0.
 *  icgrep is a trademark of International Characters.
 */

#include <pablo/passes.h>

#include <pablo/pablo_kernel.h>
#include <pablo/pablo_simplifier.hpp>
#include <pablo/codemotionpass.h>
#include <pablo/distributivepass.h>
#include <pablo/schedulingprepass.h>
#include <pablo/flattenif.hpp>
#include <pablo/pabloverifier.hpp>
#include <pablo/printer_pablos.h>
#include <llvm/Support/raw_ostream.h>
#include <toolchain/toolchain.h>
#include <toolchain/pablo_toolchain.h>

using namespace llvm;

namespace pablo {

void pablo_function_passes(PabloKernel * kernel) {

    if (ShowPabloOption != codegen::OmittedOption) {
        //Print to the terminal the AST that was generated by the pararallel bit-stream compiler.
        if (ShowPabloOption.empty()) {
            errs() << "### Initial Pablo AST ###\n";
            PabloPrinter::print(kernel, errs());
        } else {
            std::error_code error;
            llvm::raw_fd_ostream out(ShowPabloOption, error, PabloOutputFileFlag);
            PabloPrinter::print(kernel, out);
            PabloOutputFileFlag = sys::fs::OpenFlags::F_Append;   // append subsequent Pablo kernels
        }
    }

#ifdef NDEBUG
    if (pablo::DebugOptionIsSet(VerifyPablo)) {
#endif
        PabloVerifier::verify(kernel, "creation");
#ifdef NDEBUG
    }
#endif

    // Scan through the pablo code and perform DCE and CSE
    if (Flatten){
        FlattenIf::transform(kernel);
    }
    if (LLVM_LIKELY(!CompileOptionIsSet(DisableSimplification))) {
        Simplifier::optimize(kernel);
    }
    if (CompileOptionIsSet(EnableDistribution)) {
        DistributivePass::optimize(kernel);
    }
    if (LLVM_LIKELY(!CompileOptionIsSet(DisableCodeMotion))) {
        CodeMotionPass::optimize(kernel);
    }
    if (CompileOptionIsSet(EnableSchedulingPrePass)) {
        SchedulingPrePass::optimize(kernel);
    }
    if (ShowOptimizedPabloOption != codegen::OmittedOption) {
        if (ShowOptimizedPabloOption.empty()) {
            //Print to the terminal the final Pablo AST after optimization.
            errs() << "### Final Pablo AST ###\n";
            PabloPrinter::print(kernel, errs());
        } else {
            std::error_code error;
            llvm::raw_fd_ostream out(ShowOptimizedPabloOption, error, PabloOptimizedOutputFileFlag);
            PabloPrinter::print(kernel, out);
            PabloOptimizedOutputFileFlag = sys::fs::OpenFlags::F_Append;  // append subsequent Pablo kernels
        }
    }
}

}
