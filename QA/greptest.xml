
<greptest>
<datafile id="simple1">
A few lines of input
in this simple test file
provide fodder for some simple
regexp tests.
</datafile>

<datafile id="bounded_charclass">
=a;
=bb;
=ccc;
=dddd;
=eeeee;
=ffffff;
=ggggggg;
=hhhhhhhh;
=iiiiiiiii;
=jjjjjjjjjj;
=kkkkkkkkkkk;
=llllllllllll;
=mmmmmmmmmmmmm;
=nnnnnnnnnnnnnn;
=ooooooooooooooo;
=pppppppppppppppp;
=qqqqqqqqqqqqqqqqq;
=rrrrrrrrrrrrrrrrrr;
=sssssssssssssssssss;
=tttttttttttttttttttt;
=uuuuuuuuuuuuuuuuuuuuu;
=vvvvvvvvvvvvvvvvvvvvvv;
=wwwwwwwwwwwwwwwwwwwwwww;
=xxxxxxxxxxxxxxxxxxxxxxxx;
=yyyyyyyyyyyyyyyyyyyyyyyyy;
=zzzzzzzzzzzzzzzzzzzzzzzzzz;
</datafile>

<datafile id="RangeAltSeqMatchStarKplusWhileNotOptAny">
Dogbe hat ,/R Cat dt bt bt bt bt bat MzzzzzzzzT MaT MT McT MdT MeT M0T M1T M2T M3T M4T
Dogbe hit foffasm zza " Dog Cat 1, 4= Dog ['zxcvbnm,./R Dog MT
Dogbe hot foffasm czzb " MazazazTDogogogogog Cat 1, 4= Dog [;'zxcvbnm,./R Dogtp
Dogbe foffasm dooooc MazT" Dog Cat 1, 4= Dog [Sqwertyuiopasdfghjkl;'zxcvbnm,./R Dog Cat
Dogbe foffasm ezzzzzzzzzzzzzzt "tp Dog Cat 12, ktp 4= Dog [jkl;'zxcvbnm,./R Dogtp
Dogbe foffasm zze " Dog CatMjT , = Dog [;'zxcvbzzznm,./R Dog MazazT cat
zzcztpDogbe fofasm zazazz4z Doggg Cat 6, azzzzz= Dog [;'zxcvbonm,.R Dog TUT Dog
Natatatats Nats T M0T ed bazbzczdzt et
Dfg dc fog Nt ezt
MazazazazazazazT
</datafile>

<datafile id="StartEndAlt">
The ever-growing social networks and social media provide invaluable 
sources of information for modeling the behavior of users. High-quality 
user models enable superior services and functions for end users. In this 
talk, I will present several examples of user modeling based on social 
networks and social media. I will first describe our research in modeling 
users' information preferences on Microblogs using a novel user message 
model. I will then discuss our work on extracting users' daily activities, 
such as dining and shopping, that inherently reflect their habits, intents and preferences. 
I explain our novel transfer learning solution via a collaborative boosting 
framework comprising a text-to-activity classifier for socially connected users. 
I will also describe our research on user modeling in multiple, overlapping 
social networks in a 'composite social network' setting. I will show the benefits of 
modeling the dynamics of composite networks, where the evolution processes 
of different networks are jointly considered. Finally, I will explain our
research on finding social spammers in large social networks.
</datafile>

<datafile id="special_characters">
The ] character may appear as the first character inside character class
expressions such as []>)].
In this case, the ] character does not terminate the character class, but
stands for itself.
Similarly, the - character may appear as the first or last character
in a character class expression, such as [-] or []-].  Occurring as the
first or last character in a class means that it is a member of the
class, instead of being interpreted as a range metacharacter.
For both ] and -, occurrence as the first character could mean after
an opening [^ mark for negated character class.   That is [^]] is the
class that matches everything but ], while [^-] is the class that matches
anything but -.
----------
The above line does not match [^-].
----------
]]]]]]]]]]
^^^^^^^^^^
</datafile>

<datafile id="ips">  
201.250.180.213
236.4.20.176
137.96.194.126
245.16.96.112
245.19.58.43
131.176.131.248
248.160.22.214
156.179.88.103
174.13.62.156
256.122.123.5
16.81.78.152
177.17.24.167
32.120.25.23
138.82.66.15
4.196.8.251
101.30.211.3
209.44.105.129
56.166.31.72
247.108.224.170
124.248.83.156
113.107.178.250
189.243.10.192
184.18.189.31
48.145.33.2
188.137.131.244
49.161.61.42
14.31.211.138
24.39.39.136
146.217.131.80
205.141.18.135
159.207.166.206
96.211.62.20
23.148.44.140
109.159.129.161
183.230.172.129
48.178.63.192
224.41.190.207
144.114.56.31
151.205.132.247
161.194.12.184
87.55.69.195
214.198.102.143
173.19.17.220
197.80.158.167
121.94.119.11
208.174.42.104
124.173.96.31
112.107.215.199
162.30.140.121
227.241.9.145
6.26.111.203
106.14.115.226
107.233.237.60
153.24.163.23
197.4.54.55
111.14.253.18
43.138.139.15
125.148.160.131
173.16.80.24
30.194.250.136
173.233.196.71
</datafile>

<datafile id = "CRLF">line with CRLF &#13;&#10;two lines with LFCR &#10;&#13;final line
</datafile>
 <grepcase regexp="^$" datafile="CRLF" grepcount="1"/>
 <grepcase regexp="^.*$" datafile="CRLF" grepcount="4"/>

 <datafile id = "LU_test">
The following line has LATIN CAPITAL LETTER G WITH MACRON in single quotes.
'&#x1E20;'
</datafile>

<grepcase regexp="ab" datafile="StartEndAlt" grepcount="4"/>
<grepcase regexp="a*b" datafile="StartEndAlt" grepcount="10"/>
<grepcase regexp="ab*" datafile="StartEndAlt" grepcount="15"/>
<grepcase regexp="^user|^I|our$" datafile="StartEndAlt" grepcount="5"/>

<grepcase regexp="fe|si" datafile="simple1" grepcount="3"/>
<grepcase regexp="in" datafile="simple1" grepcount="2"/>
<grepcase regexp="[A-Z]" datafile="simple1" grepcount="1"/>
<grepcase regexp="fodder|simple" datafile="simple1" grepcount="2"/>

<grepcase regexp="[cde]{3}" datafile="bounded_charclass" grepcount="3"/>
<grepcase regexp="[f-h]{5}" datafile="bounded_charclass" grepcount="3"/>
<grepcase regexp="[a-z]{5}" datafile="bounded_charclass" grepcount="22"/>
<grepcase regexp="[a-z]{5,15}" datafile="bounded_charclass" grepcount="22"/>
<grepcase regexp="=[a-z]{7,}" datafile="bounded_charclass" grepcount="20"/>
<grepcase regexp="=[a-z]{5,15};" datafile="bounded_charclass" grepcount="11"/>
<grepcase regexp="[wxy]{2}{3}{2}" datafile="bounded_charclass" grepcount="3"/>
<grepcase regexp="=([a-z][c-z])*;" datafile="bounded_charclass" grepcount="12"/>

<grepcase regexp="^D[zabcdefoy]g" datafile="RangeAltSeqMatchStarKplusWhileNotOptAny" grepcount="7"/>
<grepcase regexp="do*c|ez*t" datafile="RangeAltSeqMatchStarKplusWhileNotOptAny" grepcount="4"/>
<grepcase regexp="M(az)*T" datafile="RangeAltSeqMatchStarKplusWhileNotOptAny" grepcount="6"/>          
<grepcase regexp="ez+t" datafile="RangeAltSeqMatchStarKplusWhileNotOptAny" grepcount="2" />
<grepcase regexp="b([a-d]z)*t" datafile="RangeAltSeqMatchStarKplusWhileNotOptAny" grepcount="2"/>
<grepcase regexp="[^D]og" datafile="RangeAltSeqMatchStarKplusWhileNotOptAny" grepcount="2"/>
<grepcase regexp="Na?t" datafile="RangeAltSeqMatchStarKplusWhileNotOptAny" grepcount="2"/>
<grepcase regexp="h.t" datafile="RangeAltSeqMatchStarKplusWhileNotOptAny" grepcount="3" />

<grepcase regexp="[]]" datafile="special_characters" grepcount="9"/>
<grepcase regexp="[-]" datafile="special_characters" grepcount="8"/>
<grepcase regexp="[]^-]" datafile="special_characters" grepcount="14"/>
<grepcase regexp="[\-\]\^]" datafile="special_characters" grepcount="14"/>
<grepcase regexp="[^]]" datafile="special_characters" grepcount="16"/>
<grepcase regexp="[^-]" datafile="special_characters" grepcount="15"/>
<grepcase regexp="[^^]" datafile="special_characters" grepcount="16"/>
<grepcase regexp="[^]-]" datafile="special_characters" grepcount="14"/>
<grepcase regexp="[.]" datafile="special_characters" grepcount="7"/>

<grepcase regexp="^((([2][5][0-5]|([2][0-4]|[1][0-9]|[0-9])?[0-9])[.]){3})([2][5][0-5]|([2][0-4]|[1][0-9]|[0-9])?[0-9])$" datafile="ips" grepcount="60"/>

<!-- . should match a unique character, even if it is 3 bytes. -->
<grepcase regexp="'.'" datafile="LU_test" grepcount="1"/>
<grepcase regexp="'...'" datafile="LU_test" grepcount="0"/>
<grepcase regexp="\u{1e20}" datafile="LU_test" grepcount="1"/>
<grepcase regexp="\u{1e21}" datafile="LU_test" grepcount="0"/>
<grepcase regexp="\p{Lu}" datafile="LU_test" grepcount="2"/>
<grepcase regexp="'\p{Lu}'" datafile="LU_test" grepcount="1"/>
<grepcase regexp="\p{Ll}" datafile="LU_test" grepcount="1"/>
</greptest>
